From 8a91b7f7b073ee756e4a24efdb719f94650d4990 Mon Sep 17 00:00:00 2001
From: Sam Stites <stites@users.noreply.github.com>
Date: Tue, 16 Jul 2024 20:49:13 -0400
Subject: [PATCH 1/2] inline autogen'd code

---
 .../Graphics/UI/WXCore/WxcClassInfo.hs        |  4551 ++++
 .../Graphics/UI/WXCore/WxcClassTypes.hs       |  6342 +++++
 .../Graphics/UI/WXCore/WxcClasses.hs  |    33 +
 .../Graphics/UI/WXCore/WxcClassesAL.hs        | 18074 +++++++++++++
 .../Graphics/UI/WXCore/WxcClassesMZ.hs        | 21240 ++++++++++++++++
 5 files changed, 50240 insertions(+)
 create mode 100644 src/haskell/Graphics/UI/WxcClassInfo.hs
 create mode 100644 src/haskell/Graphics/UI/WxcClassTypes.hs
 create mode 100644 src/haskell/Graphics/UI/WxcClasses.hs
 create mode 100644 src/haskell/Graphics/UI/WxcClassesAL.hs
 create mode 100644 src/haskell/Graphics/UI/WxcClassesMZ.hs

diff --git a/src/haskell/Graphics/UI/WxcClassInfo.hs b/src/haskell/Graphics/UI/WxcClassInfo.hs
new file mode 100644
index 0000000..7c541c6
--- /dev/null
+++ b/src/haskell/Graphics/UI/WxcClassInfo.hs
@@ -0,0 +1,4551 @@
+{-# OPTIONS_HADDOCK prune #-}
+--------------------------------------------------------------------------------
+{-|
+Module      :  WxcClassInfo
+Copyright   :  Copyright (c) Daan Leijen 2003, 2004
+License     :  wxWindows
+
+Maintainer  :  wxhaskell-devel@lists.sourceforge.net
+Stability   :  provisional
+Portability :  portable
+
+Haskell class info definitions for the wxWidgets C library (@wxc.dll@).
+
+Do not edit this file manually!
+This file was automatically generated by wxDirect.
+
+And contains 406 class info definitions.
+-}
+--------------------------------------------------------------------------------
+module Graphics.UI.WXCore.WxcClassInfo
+    ( -- * Class Info
+      ClassType, classInfo, instanceOf, instanceOfName
+      -- * Safe casts
+    , safeCast, ifInstanceOf, whenInstanceOf, whenValidInstanceOf
+      -- * Class Types
+     ,classActivateEvent
+     ,classApp
+     ,classArtProvider
+     ,classAuiManager
+     ,classAuiManagerEvent
+     ,classAuiNotebook
+     ,classAuiNotebookEvent
+     ,classAuiTabCtrl
+     ,classAuiToolBar
+     ,classAuiToolBarEvent
+     ,classAutoBufferedPaintDC
+     ,classAutomationObject
+     ,classBitmap
+     ,classBitmapButton
+     ,classBitmapHandler
+     ,classBitmapToggleButton
+     ,classBookCtrlBase
+     ,classBookCtrlEvent
+     ,classBoolProperty
+     ,classBoxSizer
+     ,classBrush
+     ,classBrushList
+     ,classBufferedDC
+     ,classBufferedPaintDC
+     ,classButton
+     ,classCalculateLayoutEvent
+     ,classCalendarCtrl
+     ,classCalendarEvent
+     ,classCbAntiflickerPlugin
+     ,classCbBarDragPlugin
+     ,classCbBarHintsPlugin
+     ,classCbBarInfo
+     ,classCbBarSpy
+     ,classCbCloseBox
+     ,classCbCollapseBox
+     ,classCbCommonPaneProperties
+     ,classCbCustomizeBarEvent
+     ,classCbCustomizeLayoutEvent
+     ,classCbDimHandlerBase
+     ,classCbDimInfo
+     ,classCbDockBox
+     ,classCbDockPane
+     ,classCbDrawBarDecorEvent
+     ,classCbDrawBarHandlesEvent
+     ,classCbDrawHintRectEvent
+     ,classCbDrawPaneBkGroundEvent
+     ,classCbDrawPaneDecorEvent
+     ,classCbDrawRowBkGroundEvent
+     ,classCbDrawRowDecorEvent
+     ,classCbDrawRowHandlesEvent
+     ,classCbDynToolBarDimHandler
+     ,classCbFinishDrawInAreaEvent
+     ,classCbFloatedBarWindow
+     ,classCbGCUpdatesMgr
+     ,classCbHintAnimationPlugin
+     ,classCbInsertBarEvent
+     ,classCbLayoutRowEvent
+     ,classCbLeftDClickEvent
+     ,classCbLeftDownEvent
+     ,classCbLeftUpEvent
+     ,classCbMiniButton
+     ,classCbMotionEvent
+     ,classCbPaneDrawPlugin
+     ,classCbPluginBase
+     ,classCbPluginEvent
+     ,classCbRemoveBarEvent
+     ,classCbResizeBarEvent
+     ,classCbResizeRowEvent
+     ,classCbRightDownEvent
+     ,classCbRightUpEvent
+     ,classCbRowDragPlugin
+     ,classCbRowInfo
+     ,classCbRowLayoutPlugin
+     ,classCbSimpleCustomizationPlugin
+     ,classCbSimpleUpdatesMgr
+     ,classCbSizeBarWndEvent
+     ,classCbStartBarDraggingEvent
+     ,classCbStartDrawInAreaEvent
+     ,classCbUpdatesManagerBase
+     ,classCheckBox
+     ,classCheckListBox
+     ,classChoice
+     ,classClient
+     ,classClientBase
+     ,classClientDC
+     ,classClipboard
+     ,classCloseEvent
+     ,classClosure
+     ,classColour
+     ,classColourData
+     ,classColourDatabase
+     ,classColourDialog
+     ,classColourPickerCtrl
+     ,classComboBox
+     ,classCommand
+     ,classCommandEvent
+     ,classCommandProcessor
+     ,classConnection
+     ,classConnectionBase
+     ,classContextHelp
+     ,classContextHelpButton
+     ,classControl
+     ,classCursor
+     ,classDatabase
+     ,classDateProperty
+     ,classDC
+     ,classDDEClient
+     ,classDDEConnection
+     ,classDDEServer
+     ,classDialog
+     ,classDialUpEvent
+     ,classDirDialog
+     ,classDocChildFrame
+     ,classDocManager
+     ,classDocMDIChildFrame
+     ,classDocMDIParentFrame
+     ,classDocParentFrame
+     ,classDocTemplate
+     ,classDocument
+     ,classDragImage
+     ,classDrawControl
+     ,classDrawWindow
+     ,classDropFilesEvent
+     ,classDynamicSashWindow
+     ,classDynamicToolBar
+     ,classDynToolInfo
+     ,classEditableListBox
+     ,classEncodingConverter
+     ,classEraseEvent
+     ,classEvent
+     ,classEvtHandler
+     ,classExprDatabase
+     ,classFileDialog
+     ,classFileHistory
+     ,classFileProperty
+     ,classFileSystem
+     ,classFileSystemHandler
+     ,classFindDialogEvent
+     ,classFindReplaceData
+     ,classFindReplaceDialog
+     ,classFlexGridSizer
+     ,classFloatProperty
+     ,classFocusEvent
+     ,classFont
+     ,classFontData
+     ,classFontDialog
+     ,classFontList
+     ,classFrame
+     ,classFrameLayout
+     ,classFSFile
+     ,classFTP
+     ,classGauge
+     ,classGauge95
+     ,classGaugeMSW
+     ,classGCDC
+     ,classGDIObject
+     ,classGenericDirCtrl
+     ,classGenericDragImage
+     ,classGenericValidator
+     ,classGLCanvas
+     ,classGLContext
+     ,classGraphicsBrush
+     ,classGraphicsContext
+     ,classGraphicsFont
+     ,classGraphicsMatrix
+     ,classGraphicsObject
+     ,classGraphicsPath
+     ,classGraphicsPen
+     ,classGraphicsRenderer
+     ,classGrid
+     ,classGridEditorCreatedEvent
+     ,classGridEvent
+     ,classGridRangeSelectEvent
+     ,classGridSizeEvent
+     ,classGridSizer
+     ,classGridTableBase
+     ,classHelpController
+     ,classHelpControllerBase
+     ,classHelpEvent
+     ,classHtmlCell
+     ,classHtmlColourCell
+     ,classHtmlContainerCell
+     ,classHtmlDCRenderer
+     ,classHtmlEasyPrinting
+     ,classHtmlFilter
+     ,classHtmlHelpController
+     ,classHtmlHelpData
+     ,classHtmlHelpFrame
+     ,classHtmlLinkInfo
+     ,classHtmlParser
+     ,classHtmlPrintout
+     ,classHtmlTag
+     ,classHtmlTagHandler
+     ,classHtmlTagsModule
+     ,classHtmlWidgetCell
+     ,classHtmlWindow
+     ,classHtmlWinParser
+     ,classHtmlWinTagHandler
+     ,classHTTP
+     ,classHyperlinkCtrl
+     ,classIcon
+     ,classIconizeEvent
+     ,classIdleEvent
+     ,classImage
+     ,classImageHandler
+     ,classImageList
+     ,classIndividualLayoutConstraint
+     ,classInitDialogEvent
+     ,classInputSinkEvent
+     ,classIntProperty
+     ,classIPV4address
+     ,classJoystick
+     ,classJoystickEvent
+     ,classKeyEvent
+     ,classLayoutAlgorithm
+     ,classLayoutConstraints
+     ,classLEDNumberCtrl
+     ,classList
+     ,classListBox
+     ,classListCtrl
+     ,classListEvent
+     ,classListItem
+     ,classMask
+     ,classMaximizeEvent
+     ,classMDIChildFrame
+     ,classMDIClientWindow
+     ,classMDIParentFrame
+     ,classMediaCtrl
+     ,classMediaEvent
+     ,classMemoryDC
+     ,classMemoryFSHandler
+     ,classMenu
+     ,classMenuBar
+     ,classMenuEvent
+     ,classMenuItem
+     ,classMessageDialog
+     ,classMetafile
+     ,classMetafileDC
+     ,classMiniFrame
+     ,classMirrorDC
+     ,classModule
+     ,classMouseCaptureChangedEvent
+     ,classMouseEvent
+     ,classMoveEvent
+     ,classMultiCellCanvas
+     ,classMultiCellItemHandle
+     ,classMultiCellSizer
+     ,classNavigationKeyEvent
+     ,classNewBitmapButton
+     ,classNotebook
+     ,classNotebookEvent
+     ,classNotifyEvent
+     ,classPageSetupDialog
+     ,classPageSetupDialogData
+     ,classPaintDC
+     ,classPaintEvent
+     ,classPalette
+     ,classPaletteChangedEvent
+     ,classPanel
+     ,classPathList
+     ,classPen
+     ,classPenList
+     ,classPGProperty
+     ,classPickerBase
+     ,classPlotCurve
+     ,classPlotEvent
+     ,classPlotOnOffCurve
+     ,classPlotWindow
+     ,classPopupTransientWindow
+     ,classPopupWindow
+     ,classPostScriptDC
+     ,classPostScriptPrintNativeData
+     ,classPreviewCanvas
+     ,classPreviewControlBar
+     ,classPreviewFrame
+     ,classPrintData
+     ,classPrintDialog
+     ,classPrintDialogData
+     ,classPrinter
+     ,classPrinterDC
+     ,classPrintout
+     ,classPrintPreview
+     ,classProcess
+     ,classProcessEvent
+     ,classProgressDialog
+     ,classPropertyCategory
+     ,classPropertyGrid
+     ,classPropertyGridEvent
+     ,classProtocol
+     ,classQuantize
+     ,classQueryCol
+     ,classQueryField
+     ,classQueryLayoutInfoEvent
+     ,classQueryNewPaletteEvent
+     ,classRadioBox
+     ,classRadioButton
+     ,classRecordSet
+     ,classRegion
+     ,classRegionIterator
+     ,classRemotelyScrolledTreeCtrl
+     ,classSashEvent
+     ,classSashLayoutWindow
+     ,classSashWindow
+     ,classScreenDC
+     ,classScrollBar
+     ,classScrolledWindow
+     ,classScrollEvent
+     ,classScrollWinEvent
+     ,classServer
+     ,classServerBase
+     ,classSetCursorEvent
+     ,classShowEvent
+     ,classSingleChoiceDialog
+     ,classSizeEvent
+     ,classSizer
+     ,classSizerItem
+     ,classSlider
+     ,classSlider95
+     ,classSliderMSW
+     ,classSockAddress
+     ,classSocketBase
+     ,classSocketClient
+     ,classSocketEvent
+     ,classSocketServer
+     ,classSound
+     ,classSpinButton
+     ,classSpinCtrl
+     ,classSpinEvent
+     ,classSplashScreen
+     ,classSplitterEvent
+     ,classSplitterScrolledWindow
+     ,classSplitterWindow
+     ,classStaticBitmap
+     ,classStaticBox
+     ,classStaticBoxSizer
+     ,classStaticLine
+     ,classStaticText
+     ,classStatusBar
+     ,classStringList
+     ,classStringProperty
+     ,classStringTokenizer
+     ,classStyledTextCtrl
+     ,classStyledTextEvent
+     ,classSVGFileDC
+     ,classSysColourChangedEvent
+     ,classSystemOptions
+     ,classSystemSettings
+     ,classTabCtrl
+     ,classTabEvent
+     ,classTablesInUse
+     ,classTaskBarIcon
+     ,classTextCtrl
+     ,classTextEntryDialog
+     ,classTextValidator
+     ,classThinSplitterWindow
+     ,classTime
+     ,classTimer
+     ,classTimerBase
+     ,classTimerEvent
+     ,classTimerEx
+     ,classTipWindow
+     ,classToggleButton
+     ,classToolBar
+     ,classToolBarBase
+     ,classToolLayoutItem
+     ,classToolTip
+     ,classToolWindow
+     ,classTopLevelWindow
+     ,classTreeCompanionWindow
+     ,classTreeCtrl
+     ,classTreeEvent
+     ,classTreeLayout
+     ,classTreeLayoutStored
+     ,classUpdateUIEvent
+     ,classURL
+     ,classValidator
+     ,classVariant
+     ,classVariantData
+     ,classView
+     ,classWindow
+     ,classWindowCreateEvent
+     ,classWindowDC
+     ,classWindowDestroyEvent
+     ,classWizard
+     ,classWizardEvent
+     ,classWizardPage
+     ,classWizardPageSimple
+     ,classWXCApp
+     ,classWXCArtProv
+     ,classWXCClient
+     ,classWXCCommand
+     ,classWXCConnection
+     ,classWXCGridTable
+     ,classWXCHtmlEvent
+     ,classWXCHtmlWindow
+     ,classWXCPlotCurve
+     ,classWXCPreviewControlBar
+     ,classWXCPreviewFrame
+     ,classWXCPrintEvent
+     ,classWXCPrintout
+     ,classWXCPrintoutHandler
+     ,classWXCServer
+     ,classWXCTextValidator
+     ,classWxObject
+     ,classXmlResource
+     ,classXmlResourceHandler
+      -- * Down casts
+     ,downcastActivateEvent
+     ,downcastApp
+     ,downcastArtProvider
+     ,downcastAuiManager
+     ,downcastAuiManagerEvent
+     ,downcastAuiNotebook
+     ,downcastAuiNotebookEvent
+     ,downcastAuiTabCtrl
+     ,downcastAuiToolBar
+     ,downcastAuiToolBarEvent
+     ,downcastAutoBufferedPaintDC
+     ,downcastAutomationObject
+     ,downcastBitmap
+     ,downcastBitmapButton
+     ,downcastBitmapHandler
+     ,downcastBitmapToggleButton
+     ,downcastBookCtrlBase
+     ,downcastBookCtrlEvent
+     ,downcastBoolProperty
+     ,downcastBoxSizer
+     ,downcastBrush
+     ,downcastBrushList
+     ,downcastBufferedDC
+     ,downcastBufferedPaintDC
+     ,downcastButton
+     ,downcastCalculateLayoutEvent
+     ,downcastCalendarCtrl
+     ,downcastCalendarEvent
+     ,downcastCbAntiflickerPlugin
+     ,downcastCbBarDragPlugin
+     ,downcastCbBarHintsPlugin
+     ,downcastCbBarInfo
+     ,downcastCbBarSpy
+     ,downcastCbCloseBox
+     ,downcastCbCollapseBox
+     ,downcastCbCommonPaneProperties
+     ,downcastCbCustomizeBarEvent
+     ,downcastCbCustomizeLayoutEvent
+     ,downcastCbDimHandlerBase
+     ,downcastCbDimInfo
+     ,downcastCbDockBox
+     ,downcastCbDockPane
+     ,downcastCbDrawBarDecorEvent
+     ,downcastCbDrawBarHandlesEvent
+     ,downcastCbDrawHintRectEvent
+     ,downcastCbDrawPaneBkGroundEvent
+     ,downcastCbDrawPaneDecorEvent
+     ,downcastCbDrawRowBkGroundEvent
+     ,downcastCbDrawRowDecorEvent
+     ,downcastCbDrawRowHandlesEvent
+     ,downcastCbDynToolBarDimHandler
+     ,downcastCbFinishDrawInAreaEvent
+     ,downcastCbFloatedBarWindow
+     ,downcastCbGCUpdatesMgr
+     ,downcastCbHintAnimationPlugin
+     ,downcastCbInsertBarEvent
+     ,downcastCbLayoutRowEvent
+     ,downcastCbLeftDClickEvent
+     ,downcastCbLeftDownEvent
+     ,downcastCbLeftUpEvent
+     ,downcastCbMiniButton
+     ,downcastCbMotionEvent
+     ,downcastCbPaneDrawPlugin
+     ,downcastCbPluginBase
+     ,downcastCbPluginEvent
+     ,downcastCbRemoveBarEvent
+     ,downcastCbResizeBarEvent
+     ,downcastCbResizeRowEvent
+     ,downcastCbRightDownEvent
+     ,downcastCbRightUpEvent
+     ,downcastCbRowDragPlugin
+     ,downcastCbRowInfo
+     ,downcastCbRowLayoutPlugin
+     ,downcastCbSimpleCustomizationPlugin
+     ,downcastCbSimpleUpdatesMgr
+     ,downcastCbSizeBarWndEvent
+     ,downcastCbStartBarDraggingEvent
+     ,downcastCbStartDrawInAreaEvent
+     ,downcastCbUpdatesManagerBase
+     ,downcastCheckBox
+     ,downcastCheckListBox
+     ,downcastChoice
+     ,downcastClient
+     ,downcastClientBase
+     ,downcastClientDC
+     ,downcastClipboard
+     ,downcastCloseEvent
+     ,downcastClosure
+     ,downcastColour
+     ,downcastColourData
+     ,downcastColourDatabase
+     ,downcastColourDialog
+     ,downcastColourPickerCtrl
+     ,downcastComboBox
+     ,downcastCommand
+     ,downcastCommandEvent
+     ,downcastCommandProcessor
+     ,downcastConnection
+     ,downcastConnectionBase
+     ,downcastContextHelp
+     ,downcastContextHelpButton
+     ,downcastControl
+     ,downcastCursor
+     ,downcastDatabase
+     ,downcastDateProperty
+     ,downcastDC
+     ,downcastDDEClient
+     ,downcastDDEConnection
+     ,downcastDDEServer
+     ,downcastDialog
+     ,downcastDialUpEvent
+     ,downcastDirDialog
+     ,downcastDocChildFrame
+     ,downcastDocManager
+     ,downcastDocMDIChildFrame
+     ,downcastDocMDIParentFrame
+     ,downcastDocParentFrame
+     ,downcastDocTemplate
+     ,downcastDocument
+     ,downcastDragImage
+     ,downcastDrawControl
+     ,downcastDrawWindow
+     ,downcastDropFilesEvent
+     ,downcastDynamicSashWindow
+     ,downcastDynamicToolBar
+     ,downcastDynToolInfo
+     ,downcastEditableListBox
+     ,downcastEncodingConverter
+     ,downcastEraseEvent
+     ,downcastEvent
+     ,downcastEvtHandler
+     ,downcastExprDatabase
+     ,downcastFileDialog
+     ,downcastFileHistory
+     ,downcastFileProperty
+     ,downcastFileSystem
+     ,downcastFileSystemHandler
+     ,downcastFindDialogEvent
+     ,downcastFindReplaceData
+     ,downcastFindReplaceDialog
+     ,downcastFlexGridSizer
+     ,downcastFloatProperty
+     ,downcastFocusEvent
+     ,downcastFont
+     ,downcastFontData
+     ,downcastFontDialog
+     ,downcastFontList
+     ,downcastFrame
+     ,downcastFrameLayout
+     ,downcastFSFile
+     ,downcastFTP
+     ,downcastGauge
+     ,downcastGauge95
+     ,downcastGaugeMSW
+     ,downcastGCDC
+     ,downcastGDIObject
+     ,downcastGenericDirCtrl
+     ,downcastGenericDragImage
+     ,downcastGenericValidator
+     ,downcastGLCanvas
+     ,downcastGLContext
+     ,downcastGraphicsBrush
+     ,downcastGraphicsContext
+     ,downcastGraphicsFont
+     ,downcastGraphicsMatrix
+     ,downcastGraphicsObject
+     ,downcastGraphicsPath
+     ,downcastGraphicsPen
+     ,downcastGraphicsRenderer
+     ,downcastGrid
+     ,downcastGridEditorCreatedEvent
+     ,downcastGridEvent
+     ,downcastGridRangeSelectEvent
+     ,downcastGridSizeEvent
+     ,downcastGridSizer
+     ,downcastGridTableBase
+     ,downcastHelpController
+     ,downcastHelpControllerBase
+     ,downcastHelpEvent
+     ,downcastHtmlCell
+     ,downcastHtmlColourCell
+     ,downcastHtmlContainerCell
+     ,downcastHtmlDCRenderer
+     ,downcastHtmlEasyPrinting
+     ,downcastHtmlFilter
+     ,downcastHtmlHelpController
+     ,downcastHtmlHelpData
+     ,downcastHtmlHelpFrame
+     ,downcastHtmlLinkInfo
+     ,downcastHtmlParser
+     ,downcastHtmlPrintout
+     ,downcastHtmlTag
+     ,downcastHtmlTagHandler
+     ,downcastHtmlTagsModule
+     ,downcastHtmlWidgetCell
+     ,downcastHtmlWindow
+     ,downcastHtmlWinParser
+     ,downcastHtmlWinTagHandler
+     ,downcastHTTP
+     ,downcastHyperlinkCtrl
+     ,downcastIcon
+     ,downcastIconizeEvent
+     ,downcastIdleEvent
+     ,downcastImage
+     ,downcastImageHandler
+     ,downcastImageList
+     ,downcastIndividualLayoutConstraint
+     ,downcastInitDialogEvent
+     ,downcastInputSinkEvent
+     ,downcastIntProperty
+     ,downcastIPV4address
+     ,downcastJoystick
+     ,downcastJoystickEvent
+     ,downcastKeyEvent
+     ,downcastLayoutAlgorithm
+     ,downcastLayoutConstraints
+     ,downcastLEDNumberCtrl
+     ,downcastList
+     ,downcastListBox
+     ,downcastListCtrl
+     ,downcastListEvent
+     ,downcastListItem
+     ,downcastMask
+     ,downcastMaximizeEvent
+     ,downcastMDIChildFrame
+     ,downcastMDIClientWindow
+     ,downcastMDIParentFrame
+     ,downcastMediaCtrl
+     ,downcastMediaEvent
+     ,downcastMemoryDC
+     ,downcastMemoryFSHandler
+     ,downcastMenu
+     ,downcastMenuBar
+     ,downcastMenuEvent
+     ,downcastMenuItem
+     ,downcastMessageDialog
+     ,downcastMetafile
+     ,downcastMetafileDC
+     ,downcastMiniFrame
+     ,downcastMirrorDC
+     ,downcastModule
+     ,downcastMouseCaptureChangedEvent
+     ,downcastMouseEvent
+     ,downcastMoveEvent
+     ,downcastMultiCellCanvas
+     ,downcastMultiCellItemHandle
+     ,downcastMultiCellSizer
+     ,downcastNavigationKeyEvent
+     ,downcastNewBitmapButton
+     ,downcastNotebook
+     ,downcastNotebookEvent
+     ,downcastNotifyEvent
+     ,downcastPageSetupDialog
+     ,downcastPageSetupDialogData
+     ,downcastPaintDC
+     ,downcastPaintEvent
+     ,downcastPalette
+     ,downcastPaletteChangedEvent
+     ,downcastPanel
+     ,downcastPathList
+     ,downcastPen
+     ,downcastPenList
+     ,downcastPGProperty
+     ,downcastPickerBase
+     ,downcastPlotCurve
+     ,downcastPlotEvent
+     ,downcastPlotOnOffCurve
+     ,downcastPlotWindow
+     ,downcastPopupTransientWindow
+     ,downcastPopupWindow
+     ,downcastPostScriptDC
+     ,downcastPostScriptPrintNativeData
+     ,downcastPreviewCanvas
+     ,downcastPreviewControlBar
+     ,downcastPreviewFrame
+     ,downcastPrintData
+     ,downcastPrintDialog
+     ,downcastPrintDialogData
+     ,downcastPrinter
+     ,downcastPrinterDC
+     ,downcastPrintout
+     ,downcastPrintPreview
+     ,downcastProcess
+     ,downcastProcessEvent
+     ,downcastProgressDialog
+     ,downcastPropertyCategory
+     ,downcastPropertyGrid
+     ,downcastPropertyGridEvent
+     ,downcastProtocol
+     ,downcastQuantize
+     ,downcastQueryCol
+     ,downcastQueryField
+     ,downcastQueryLayoutInfoEvent
+     ,downcastQueryNewPaletteEvent
+     ,downcastRadioBox
+     ,downcastRadioButton
+     ,downcastRecordSet
+     ,downcastRegion
+     ,downcastRegionIterator
+     ,downcastRemotelyScrolledTreeCtrl
+     ,downcastSashEvent
+     ,downcastSashLayoutWindow
+     ,downcastSashWindow
+     ,downcastScreenDC
+     ,downcastScrollBar
+     ,downcastScrolledWindow
+     ,downcastScrollEvent
+     ,downcastScrollWinEvent
+     ,downcastServer
+     ,downcastServerBase
+     ,downcastSetCursorEvent
+     ,downcastShowEvent
+     ,downcastSingleChoiceDialog
+     ,downcastSizeEvent
+     ,downcastSizer
+     ,downcastSizerItem
+     ,downcastSlider
+     ,downcastSlider95
+     ,downcastSliderMSW
+     ,downcastSockAddress
+     ,downcastSocketBase
+     ,downcastSocketClient
+     ,downcastSocketEvent
+     ,downcastSocketServer
+     ,downcastSound
+     ,downcastSpinButton
+     ,downcastSpinCtrl
+     ,downcastSpinEvent
+     ,downcastSplashScreen
+     ,downcastSplitterEvent
+     ,downcastSplitterScrolledWindow
+     ,downcastSplitterWindow
+     ,downcastStaticBitmap
+     ,downcastStaticBox
+     ,downcastStaticBoxSizer
+     ,downcastStaticLine
+     ,downcastStaticText
+     ,downcastStatusBar
+     ,downcastStringList
+     ,downcastStringProperty
+     ,downcastStringTokenizer
+     ,downcastStyledTextCtrl
+     ,downcastStyledTextEvent
+     ,downcastSVGFileDC
+     ,downcastSysColourChangedEvent
+     ,downcastSystemOptions
+     ,downcastSystemSettings
+     ,downcastTabCtrl
+     ,downcastTabEvent
+     ,downcastTablesInUse
+     ,downcastTaskBarIcon
+     ,downcastTextCtrl
+     ,downcastTextEntryDialog
+     ,downcastTextValidator
+     ,downcastThinSplitterWindow
+     ,downcastTime
+     ,downcastTimer
+     ,downcastTimerBase
+     ,downcastTimerEvent
+     ,downcastTimerEx
+     ,downcastTipWindow
+     ,downcastToggleButton
+     ,downcastToolBar
+     ,downcastToolBarBase
+     ,downcastToolLayoutItem
+     ,downcastToolTip
+     ,downcastToolWindow
+     ,downcastTopLevelWindow
+     ,downcastTreeCompanionWindow
+     ,downcastTreeCtrl
+     ,downcastTreeEvent
+     ,downcastTreeLayout
+     ,downcastTreeLayoutStored
+     ,downcastUpdateUIEvent
+     ,downcastURL
+     ,downcastValidator
+     ,downcastVariant
+     ,downcastVariantData
+     ,downcastView
+     ,downcastWindow
+     ,downcastWindowCreateEvent
+     ,downcastWindowDC
+     ,downcastWindowDestroyEvent
+     ,downcastWizard
+     ,downcastWizardEvent
+     ,downcastWizardPage
+     ,downcastWizardPageSimple
+     ,downcastWXCApp
+     ,downcastWXCArtProv
+     ,downcastWXCClient
+     ,downcastWXCCommand
+     ,downcastWXCConnection
+     ,downcastWXCGridTable
+     ,downcastWXCHtmlEvent
+     ,downcastWXCHtmlWindow
+     ,downcastWXCPlotCurve
+     ,downcastWXCPreviewControlBar
+     ,downcastWXCPreviewFrame
+     ,downcastWXCPrintEvent
+     ,downcastWXCPrintout
+     ,downcastWXCPrintoutHandler
+     ,downcastWXCServer
+     ,downcastWXCTextValidator
+     ,downcastWxObject
+     ,downcastXmlResource
+     ,downcastXmlResourceHandler
+    ) where
+
+import System.IO.Unsafe( unsafePerformIO )
+import Graphics.UI.WXCore.WxcClassTypes
+import Graphics.UI.WXCore.WxcTypes
+import Graphics.UI.WXCore.WxcClasses
+
+-- | The type of a class.
+data ClassType a = ClassType (ClassInfo ())
+
+-- | Return the 'ClassInfo' belonging to a class type. (Do not delete this object, it is statically allocated)
+{-# NOINLINE classInfo #-}
+classInfo :: ClassType a -> ClassInfo ()
+classInfo (ClassType info) = info
+
+-- | Test if an object is of a certain kind. (Returns also 'True' when the object is null.)
+{-# NOINLINE instanceOf #-}
+instanceOf :: WxObject b -> ClassType a -> Bool
+instanceOf obj (ClassType classInfo') 
+  = if (objectIsNull obj)
+     then True
+     else unsafePerformIO (objectIsKindOf obj classInfo')
+
+-- | Test if an object is of a certain kind, based on a full wxWidgets class name. (Use with care).
+{-# NOINLINE instanceOfName #-}
+instanceOfName :: WxObject a -> String -> Bool
+instanceOfName obj className 
+  = if (objectIsNull obj)
+     then True
+     else unsafePerformIO (
+          do classInfo'   <- classInfoFindClass className
+             if (objectIsNull classInfo')
+              then return False
+              else objectIsKindOf obj classInfo')
+
+-- | A safe object cast. Returns 'Nothing' if the object is of the wrong type. Note that a null object can always be cast.
+safeCast :: WxObject b -> ClassType (WxObject a) -> Maybe (WxObject a)
+safeCast obj classType
+  | instanceOf obj classType = Just (objectCast obj)
+  | otherwise                = Nothing
+
+-- | Perform an action when the object has the right type /and/ is not null.
+whenValidInstanceOf :: WxObject a -> ClassType (WxObject b) -> (WxObject b -> IO ()) -> IO ()
+whenValidInstanceOf obj classType f
+  = whenInstanceOf obj classType $ \object ->
+    if (object==objectNull) then return () else f object
+
+-- | Perform an action when the object has the right kind. Note that a null object has always the right kind.
+whenInstanceOf :: WxObject a -> ClassType (WxObject b) -> (WxObject b -> IO ()) -> IO ()
+whenInstanceOf obj classType f
+  = ifInstanceOf obj classType f (return ())
+
+-- | Perform an action when the object has the right kind. Perform the default action if the kind is not correct. Note that a null object has always the right kind.
+ifInstanceOf :: WxObject a -> ClassType (WxObject b) -> (WxObject b -> c) -> c -> c
+ifInstanceOf obj classType yes no
+  = case safeCast obj classType of
+      Just object -> yes object
+      Nothing     -> no
+
+{-# NOINLINE classActivateEvent #-}
+classActivateEvent :: ClassType (ActivateEvent ())
+classActivateEvent = ClassType (unsafePerformIO (classInfoFindClass "wxActivateEvent"))
+
+
+{-# NOINLINE classApp #-}
+classApp :: ClassType (App ())
+classApp = ClassType (unsafePerformIO (classInfoFindClass "wxApp"))
+
+
+{-# NOINLINE classArtProvider #-}
+classArtProvider :: ClassType (ArtProvider ())
+classArtProvider = ClassType (unsafePerformIO (classInfoFindClass "wxArtProvider"))
+
+
+{-# NOINLINE classAuiManager #-}
+classAuiManager :: ClassType (AuiManager ())
+classAuiManager = ClassType (unsafePerformIO (classInfoFindClass "wxAuiManager"))
+
+
+{-# NOINLINE classAuiManagerEvent #-}
+classAuiManagerEvent :: ClassType (AuiManagerEvent ())
+classAuiManagerEvent = ClassType (unsafePerformIO (classInfoFindClass "wxAuiManagerEvent"))
+
+
+{-# NOINLINE classAuiNotebook #-}
+classAuiNotebook :: ClassType (AuiNotebook ())
+classAuiNotebook = ClassType (unsafePerformIO (classInfoFindClass "wxAuiNotebook"))
+
+
+{-# NOINLINE classAuiNotebookEvent #-}
+classAuiNotebookEvent :: ClassType (AuiNotebookEvent ())
+classAuiNotebookEvent = ClassType (unsafePerformIO (classInfoFindClass "wxAuiNotebookEvent"))
+
+
+{-# NOINLINE classAuiTabCtrl #-}
+classAuiTabCtrl :: ClassType (AuiTabCtrl ())
+classAuiTabCtrl = ClassType (unsafePerformIO (classInfoFindClass "wxAuiTabCtrl"))
+
+
+{-# NOINLINE classAuiToolBar #-}
+classAuiToolBar :: ClassType (AuiToolBar ())
+classAuiToolBar = ClassType (unsafePerformIO (classInfoFindClass "wxAuiToolBar"))
+
+
+{-# NOINLINE classAuiToolBarEvent #-}
+classAuiToolBarEvent :: ClassType (AuiToolBarEvent ())
+classAuiToolBarEvent = ClassType (unsafePerformIO (classInfoFindClass "wxAuiToolBarEvent"))
+
+
+{-# NOINLINE classAutoBufferedPaintDC #-}
+classAutoBufferedPaintDC :: ClassType (AutoBufferedPaintDC ())
+classAutoBufferedPaintDC = ClassType (unsafePerformIO (classInfoFindClass "wxAutoBufferedPaintDC"))
+
+
+{-# NOINLINE classAutomationObject #-}
+classAutomationObject :: ClassType (AutomationObject ())
+classAutomationObject = ClassType (unsafePerformIO (classInfoFindClass "wxAutomationObject"))
+
+
+{-# NOINLINE classBitmap #-}
+classBitmap :: ClassType (Bitmap ())
+classBitmap = ClassType (unsafePerformIO (classInfoFindClass "wxBitmap"))
+
+
+{-# NOINLINE classBitmapButton #-}
+classBitmapButton :: ClassType (BitmapButton ())
+classBitmapButton = ClassType (unsafePerformIO (classInfoFindClass "wxBitmapButton"))
+
+
+{-# NOINLINE classBitmapHandler #-}
+classBitmapHandler :: ClassType (BitmapHandler ())
+classBitmapHandler = ClassType (unsafePerformIO (classInfoFindClass "wxBitmapHandler"))
+
+
+{-# NOINLINE classBitmapToggleButton #-}
+classBitmapToggleButton :: ClassType (BitmapToggleButton ())
+classBitmapToggleButton = ClassType (unsafePerformIO (classInfoFindClass "wxBitmapToggleButton"))
+
+
+{-# NOINLINE classBookCtrlBase #-}
+classBookCtrlBase :: ClassType (BookCtrlBase ())
+classBookCtrlBase = ClassType (unsafePerformIO (classInfoFindClass "wxBookCtrlBase"))
+
+
+{-# NOINLINE classBookCtrlEvent #-}
+classBookCtrlEvent :: ClassType (BookCtrlEvent ())
+classBookCtrlEvent = ClassType (unsafePerformIO (classInfoFindClass "wxBookCtrlEvent"))
+
+
+{-# NOINLINE classBoolProperty #-}
+classBoolProperty :: ClassType (BoolProperty ())
+classBoolProperty = ClassType (unsafePerformIO (classInfoFindClass "wxBoolProperty"))
+
+
+{-# NOINLINE classBoxSizer #-}
+classBoxSizer :: ClassType (BoxSizer ())
+classBoxSizer = ClassType (unsafePerformIO (classInfoFindClass "wxBoxSizer"))
+
+
+{-# NOINLINE classBrush #-}
+classBrush :: ClassType (Brush ())
+classBrush = ClassType (unsafePerformIO (classInfoFindClass "wxBrush"))
+
+
+{-# NOINLINE classBrushList #-}
+classBrushList :: ClassType (BrushList ())
+classBrushList = ClassType (unsafePerformIO (classInfoFindClass "wxBrushList"))
+
+
+{-# NOINLINE classBufferedDC #-}
+classBufferedDC :: ClassType (BufferedDC ())
+classBufferedDC = ClassType (unsafePerformIO (classInfoFindClass "wxBufferedDC"))
+
+
+{-# NOINLINE classBufferedPaintDC #-}
+classBufferedPaintDC :: ClassType (BufferedPaintDC ())
+classBufferedPaintDC = ClassType (unsafePerformIO (classInfoFindClass "wxBufferedPaintDC"))
+
+
+{-# NOINLINE classButton #-}
+classButton :: ClassType (Button ())
+classButton = ClassType (unsafePerformIO (classInfoFindClass "wxButton"))
+
+
+{-# NOINLINE classCalculateLayoutEvent #-}
+classCalculateLayoutEvent :: ClassType (CalculateLayoutEvent ())
+classCalculateLayoutEvent = ClassType (unsafePerformIO (classInfoFindClass "wxCalculateLayoutEvent"))
+
+
+{-# NOINLINE classCalendarCtrl #-}
+classCalendarCtrl :: ClassType (CalendarCtrl ())
+classCalendarCtrl = ClassType (unsafePerformIO (classInfoFindClass "wxCalendarCtrl"))
+
+
+{-# NOINLINE classCalendarEvent #-}
+classCalendarEvent :: ClassType (CalendarEvent ())
+classCalendarEvent = ClassType (unsafePerformIO (classInfoFindClass "wxCalendarEvent"))
+
+
+{-# NOINLINE classCbAntiflickerPlugin #-}
+classCbAntiflickerPlugin :: ClassType (CbAntiflickerPlugin ())
+classCbAntiflickerPlugin = ClassType (unsafePerformIO (classInfoFindClass "cbAntiflickerPlugin"))
+
+
+{-# NOINLINE classCbBarDragPlugin #-}
+classCbBarDragPlugin :: ClassType (CbBarDragPlugin ())
+classCbBarDragPlugin = ClassType (unsafePerformIO (classInfoFindClass "cbBarDragPlugin"))
+
+
+{-# NOINLINE classCbBarHintsPlugin #-}
+classCbBarHintsPlugin :: ClassType (CbBarHintsPlugin ())
+classCbBarHintsPlugin = ClassType (unsafePerformIO (classInfoFindClass "cbBarHintsPlugin"))
+
+
+{-# NOINLINE classCbBarInfo #-}
+classCbBarInfo :: ClassType (CbBarInfo ())
+classCbBarInfo = ClassType (unsafePerformIO (classInfoFindClass "cbBarInfo"))
+
+
+{-# NOINLINE classCbBarSpy #-}
+classCbBarSpy :: ClassType (CbBarSpy ())
+classCbBarSpy = ClassType (unsafePerformIO (classInfoFindClass "cbBarSpy"))
+
+
+{-# NOINLINE classCbCloseBox #-}
+classCbCloseBox :: ClassType (CbCloseBox ())
+classCbCloseBox = ClassType (unsafePerformIO (classInfoFindClass "cbCloseBox"))
+
+
+{-# NOINLINE classCbCollapseBox #-}
+classCbCollapseBox :: ClassType (CbCollapseBox ())
+classCbCollapseBox = ClassType (unsafePerformIO (classInfoFindClass "cbCollapseBox"))
+
+
+{-# NOINLINE classCbCommonPaneProperties #-}
+classCbCommonPaneProperties :: ClassType (CbCommonPaneProperties ())
+classCbCommonPaneProperties = ClassType (unsafePerformIO (classInfoFindClass "cbCommonPaneProperties"))
+
+
+{-# NOINLINE classCbCustomizeBarEvent #-}
+classCbCustomizeBarEvent :: ClassType (CbCustomizeBarEvent ())
+classCbCustomizeBarEvent = ClassType (unsafePerformIO (classInfoFindClass "cbCustomizeBarEvent"))
+
+
+{-# NOINLINE classCbCustomizeLayoutEvent #-}
+classCbCustomizeLayoutEvent :: ClassType (CbCustomizeLayoutEvent ())
+classCbCustomizeLayoutEvent = ClassType (unsafePerformIO (classInfoFindClass "cbCustomizeLayoutEvent"))
+
+
+{-# NOINLINE classCbDimHandlerBase #-}
+classCbDimHandlerBase :: ClassType (CbDimHandlerBase ())
+classCbDimHandlerBase = ClassType (unsafePerformIO (classInfoFindClass "cbDimHandlerBase"))
+
+
+{-# NOINLINE classCbDimInfo #-}
+classCbDimInfo :: ClassType (CbDimInfo ())
+classCbDimInfo = ClassType (unsafePerformIO (classInfoFindClass "cbDimInfo"))
+
+
+{-# NOINLINE classCbDockBox #-}
+classCbDockBox :: ClassType (CbDockBox ())
+classCbDockBox = ClassType (unsafePerformIO (classInfoFindClass "cbDockBox"))
+
+
+{-# NOINLINE classCbDockPane #-}
+classCbDockPane :: ClassType (CbDockPane ())
+classCbDockPane = ClassType (unsafePerformIO (classInfoFindClass "cbDockPane"))
+
+
+{-# NOINLINE classCbDrawBarDecorEvent #-}
+classCbDrawBarDecorEvent :: ClassType (CbDrawBarDecorEvent ())
+classCbDrawBarDecorEvent = ClassType (unsafePerformIO (classInfoFindClass "cbDrawBarDecorEvent"))
+
+
+{-# NOINLINE classCbDrawBarHandlesEvent #-}
+classCbDrawBarHandlesEvent :: ClassType (CbDrawBarHandlesEvent ())
+classCbDrawBarHandlesEvent = ClassType (unsafePerformIO (classInfoFindClass "cbDrawBarHandlesEvent"))
+
+
+{-# NOINLINE classCbDrawHintRectEvent #-}
+classCbDrawHintRectEvent :: ClassType (CbDrawHintRectEvent ())
+classCbDrawHintRectEvent = ClassType (unsafePerformIO (classInfoFindClass "cbDrawHintRectEvent"))
+
+
+{-# NOINLINE classCbDrawPaneBkGroundEvent #-}
+classCbDrawPaneBkGroundEvent :: ClassType (CbDrawPaneBkGroundEvent ())
+classCbDrawPaneBkGroundEvent = ClassType (unsafePerformIO (classInfoFindClass "cbDrawPaneBkGroundEvent"))
+
+
+{-# NOINLINE classCbDrawPaneDecorEvent #-}
+classCbDrawPaneDecorEvent :: ClassType (CbDrawPaneDecorEvent ())
+classCbDrawPaneDecorEvent = ClassType (unsafePerformIO (classInfoFindClass "cbDrawPaneDecorEvent"))
+
+
+{-# NOINLINE classCbDrawRowBkGroundEvent #-}
+classCbDrawRowBkGroundEvent :: ClassType (CbDrawRowBkGroundEvent ())
+classCbDrawRowBkGroundEvent = ClassType (unsafePerformIO (classInfoFindClass "cbDrawRowBkGroundEvent"))
+
+
+{-# NOINLINE classCbDrawRowDecorEvent #-}
+classCbDrawRowDecorEvent :: ClassType (CbDrawRowDecorEvent ())
+classCbDrawRowDecorEvent = ClassType (unsafePerformIO (classInfoFindClass "cbDrawRowDecorEvent"))
+
+
+{-# NOINLINE classCbDrawRowHandlesEvent #-}
+classCbDrawRowHandlesEvent :: ClassType (CbDrawRowHandlesEvent ())
+classCbDrawRowHandlesEvent = ClassType (unsafePerformIO (classInfoFindClass "cbDrawRowHandlesEvent"))
+
+
+{-# NOINLINE classCbDynToolBarDimHandler #-}
+classCbDynToolBarDimHandler :: ClassType (CbDynToolBarDimHandler ())
+classCbDynToolBarDimHandler = ClassType (unsafePerformIO (classInfoFindClass "cbDynToolBarDimHandler"))
+
+
+{-# NOINLINE classCbFinishDrawInAreaEvent #-}
+classCbFinishDrawInAreaEvent :: ClassType (CbFinishDrawInAreaEvent ())
+classCbFinishDrawInAreaEvent = ClassType (unsafePerformIO (classInfoFindClass "cbFinishDrawInAreaEvent"))
+
+
+{-# NOINLINE classCbFloatedBarWindow #-}
+classCbFloatedBarWindow :: ClassType (CbFloatedBarWindow ())
+classCbFloatedBarWindow = ClassType (unsafePerformIO (classInfoFindClass "cbFloatedBarWindow"))
+
+
+{-# NOINLINE classCbGCUpdatesMgr #-}
+classCbGCUpdatesMgr :: ClassType (CbGCUpdatesMgr ())
+classCbGCUpdatesMgr = ClassType (unsafePerformIO (classInfoFindClass "cbGCUpdatesMgr"))
+
+
+{-# NOINLINE classCbHintAnimationPlugin #-}
+classCbHintAnimationPlugin :: ClassType (CbHintAnimationPlugin ())
+classCbHintAnimationPlugin = ClassType (unsafePerformIO (classInfoFindClass "cbHintAnimationPlugin"))
+
+
+{-# NOINLINE classCbInsertBarEvent #-}
+classCbInsertBarEvent :: ClassType (CbInsertBarEvent ())
+classCbInsertBarEvent = ClassType (unsafePerformIO (classInfoFindClass "cbInsertBarEvent"))
+
+
+{-# NOINLINE classCbLayoutRowEvent #-}
+classCbLayoutRowEvent :: ClassType (CbLayoutRowEvent ())
+classCbLayoutRowEvent = ClassType (unsafePerformIO (classInfoFindClass "cbLayoutRowEvent"))
+
+
+{-# NOINLINE classCbLeftDClickEvent #-}
+classCbLeftDClickEvent :: ClassType (CbLeftDClickEvent ())
+classCbLeftDClickEvent = ClassType (unsafePerformIO (classInfoFindClass "cbLeftDClickEvent"))
+
+
+{-# NOINLINE classCbLeftDownEvent #-}
+classCbLeftDownEvent :: ClassType (CbLeftDownEvent ())
+classCbLeftDownEvent = ClassType (unsafePerformIO (classInfoFindClass "cbLeftDownEvent"))
+
+
+{-# NOINLINE classCbLeftUpEvent #-}
+classCbLeftUpEvent :: ClassType (CbLeftUpEvent ())
+classCbLeftUpEvent = ClassType (unsafePerformIO (classInfoFindClass "cbLeftUpEvent"))
+
+
+{-# NOINLINE classCbMiniButton #-}
+classCbMiniButton :: ClassType (CbMiniButton ())
+classCbMiniButton = ClassType (unsafePerformIO (classInfoFindClass "cbMiniButton"))
+
+
+{-# NOINLINE classCbMotionEvent #-}
+classCbMotionEvent :: ClassType (CbMotionEvent ())
+classCbMotionEvent = ClassType (unsafePerformIO (classInfoFindClass "cbMotionEvent"))
+
+
+{-# NOINLINE classCbPaneDrawPlugin #-}
+classCbPaneDrawPlugin :: ClassType (CbPaneDrawPlugin ())
+classCbPaneDrawPlugin = ClassType (unsafePerformIO (classInfoFindClass "cbPaneDrawPlugin"))
+
+
+{-# NOINLINE classCbPluginBase #-}
+classCbPluginBase :: ClassType (CbPluginBase ())
+classCbPluginBase = ClassType (unsafePerformIO (classInfoFindClass "cbPluginBase"))
+
+
+{-# NOINLINE classCbPluginEvent #-}
+classCbPluginEvent :: ClassType (CbPluginEvent ())
+classCbPluginEvent = ClassType (unsafePerformIO (classInfoFindClass "cbPluginEvent"))
+
+
+{-# NOINLINE classCbRemoveBarEvent #-}
+classCbRemoveBarEvent :: ClassType (CbRemoveBarEvent ())
+classCbRemoveBarEvent = ClassType (unsafePerformIO (classInfoFindClass "cbRemoveBarEvent"))
+
+
+{-# NOINLINE classCbResizeBarEvent #-}
+classCbResizeBarEvent :: ClassType (CbResizeBarEvent ())
+classCbResizeBarEvent = ClassType (unsafePerformIO (classInfoFindClass "cbResizeBarEvent"))
+
+
+{-# NOINLINE classCbResizeRowEvent #-}
+classCbResizeRowEvent :: ClassType (CbResizeRowEvent ())
+classCbResizeRowEvent = ClassType (unsafePerformIO (classInfoFindClass "cbResizeRowEvent"))
+
+
+{-# NOINLINE classCbRightDownEvent #-}
+classCbRightDownEvent :: ClassType (CbRightDownEvent ())
+classCbRightDownEvent = ClassType (unsafePerformIO (classInfoFindClass "cbRightDownEvent"))
+
+
+{-# NOINLINE classCbRightUpEvent #-}
+classCbRightUpEvent :: ClassType (CbRightUpEvent ())
+classCbRightUpEvent = ClassType (unsafePerformIO (classInfoFindClass "cbRightUpEvent"))
+
+
+{-# NOINLINE classCbRowDragPlugin #-}
+classCbRowDragPlugin :: ClassType (CbRowDragPlugin ())
+classCbRowDragPlugin = ClassType (unsafePerformIO (classInfoFindClass "cbRowDragPlugin"))
+
+
+{-# NOINLINE classCbRowInfo #-}
+classCbRowInfo :: ClassType (CbRowInfo ())
+classCbRowInfo = ClassType (unsafePerformIO (classInfoFindClass "cbRowInfo"))
+
+
+{-# NOINLINE classCbRowLayoutPlugin #-}
+classCbRowLayoutPlugin :: ClassType (CbRowLayoutPlugin ())
+classCbRowLayoutPlugin = ClassType (unsafePerformIO (classInfoFindClass "cbRowLayoutPlugin"))
+
+
+{-# NOINLINE classCbSimpleCustomizationPlugin #-}
+classCbSimpleCustomizationPlugin :: ClassType (CbSimpleCustomizationPlugin ())
+classCbSimpleCustomizationPlugin = ClassType (unsafePerformIO (classInfoFindClass "cbSimpleCustomizationPlugin"))
+
+
+{-# NOINLINE classCbSimpleUpdatesMgr #-}
+classCbSimpleUpdatesMgr :: ClassType (CbSimpleUpdatesMgr ())
+classCbSimpleUpdatesMgr = ClassType (unsafePerformIO (classInfoFindClass "cbSimpleUpdatesMgr"))
+
+
+{-# NOINLINE classCbSizeBarWndEvent #-}
+classCbSizeBarWndEvent :: ClassType (CbSizeBarWndEvent ())
+classCbSizeBarWndEvent = ClassType (unsafePerformIO (classInfoFindClass "cbSizeBarWndEvent"))
+
+
+{-# NOINLINE classCbStartBarDraggingEvent #-}
+classCbStartBarDraggingEvent :: ClassType (CbStartBarDraggingEvent ())
+classCbStartBarDraggingEvent = ClassType (unsafePerformIO (classInfoFindClass "cbStartBarDraggingEvent"))
+
+
+{-# NOINLINE classCbStartDrawInAreaEvent #-}
+classCbStartDrawInAreaEvent :: ClassType (CbStartDrawInAreaEvent ())
+classCbStartDrawInAreaEvent = ClassType (unsafePerformIO (classInfoFindClass "cbStartDrawInAreaEvent"))
+
+
+{-# NOINLINE classCbUpdatesManagerBase #-}
+classCbUpdatesManagerBase :: ClassType (CbUpdatesManagerBase ())
+classCbUpdatesManagerBase = ClassType (unsafePerformIO (classInfoFindClass "cbUpdatesManagerBase"))
+
+
+{-# NOINLINE classCheckBox #-}
+classCheckBox :: ClassType (CheckBox ())
+classCheckBox = ClassType (unsafePerformIO (classInfoFindClass "wxCheckBox"))
+
+
+{-# NOINLINE classCheckListBox #-}
+classCheckListBox :: ClassType (CheckListBox ())
+classCheckListBox = ClassType (unsafePerformIO (classInfoFindClass "wxCheckListBox"))
+
+
+{-# NOINLINE classChoice #-}
+classChoice :: ClassType (Choice ())
+classChoice = ClassType (unsafePerformIO (classInfoFindClass "wxChoice"))
+
+
+{-# NOINLINE classClient #-}
+classClient :: ClassType (Client ())
+classClient = ClassType (unsafePerformIO (classInfoFindClass "wxClient"))
+
+
+{-# NOINLINE classClientBase #-}
+classClientBase :: ClassType (ClientBase ())
+classClientBase = ClassType (unsafePerformIO (classInfoFindClass "wxClientBase"))
+
+
+{-# NOINLINE classClientDC #-}
+classClientDC :: ClassType (ClientDC ())
+classClientDC = ClassType (unsafePerformIO (classInfoFindClass "wxClientDC"))
+
+
+{-# NOINLINE classClipboard #-}
+classClipboard :: ClassType (Clipboard ())
+classClipboard = ClassType (unsafePerformIO (classInfoFindClass "wxClipboard"))
+
+
+{-# NOINLINE classCloseEvent #-}
+classCloseEvent :: ClassType (CloseEvent ())
+classCloseEvent = ClassType (unsafePerformIO (classInfoFindClass "wxCloseEvent"))
+
+
+{-# NOINLINE classClosure #-}
+classClosure :: ClassType (Closure ())
+classClosure = ClassType (unsafePerformIO (classInfoFindClass "wxClosure"))
+
+
+{-# NOINLINE classColour #-}
+classColour :: ClassType (Colour ())
+classColour = ClassType (unsafePerformIO (classInfoFindClass "wxColour"))
+
+
+{-# NOINLINE classColourData #-}
+classColourData :: ClassType (ColourData ())
+classColourData = ClassType (unsafePerformIO (classInfoFindClass "wxColourData"))
+
+
+{-# NOINLINE classColourDatabase #-}
+classColourDatabase :: ClassType (ColourDatabase ())
+classColourDatabase = ClassType (unsafePerformIO (classInfoFindClass "wxColourDatabase"))
+
+
+{-# NOINLINE classColourDialog #-}
+classColourDialog :: ClassType (ColourDialog ())
+classColourDialog = ClassType (unsafePerformIO (classInfoFindClass "wxColourDialog"))
+
+
+{-# NOINLINE classColourPickerCtrl #-}
+classColourPickerCtrl :: ClassType (ColourPickerCtrl ())
+classColourPickerCtrl = ClassType (unsafePerformIO (classInfoFindClass "wxColourPickerCtrl"))
+
+
+{-# NOINLINE classComboBox #-}
+classComboBox :: ClassType (ComboBox ())
+classComboBox = ClassType (unsafePerformIO (classInfoFindClass "wxComboBox"))
+
+
+{-# NOINLINE classCommand #-}
+classCommand :: ClassType (Command ())
+classCommand = ClassType (unsafePerformIO (classInfoFindClass "wxCommand"))
+
+
+{-# NOINLINE classCommandEvent #-}
+classCommandEvent :: ClassType (CommandEvent ())
+classCommandEvent = ClassType (unsafePerformIO (classInfoFindClass "wxCommandEvent"))
+
+
+{-# NOINLINE classCommandProcessor #-}
+classCommandProcessor :: ClassType (CommandProcessor ())
+classCommandProcessor = ClassType (unsafePerformIO (classInfoFindClass "wxCommandProcessor"))
+
+
+{-# NOINLINE classConnection #-}
+classConnection :: ClassType (Connection ())
+classConnection = ClassType (unsafePerformIO (classInfoFindClass "wxConnection"))
+
+
+{-# NOINLINE classConnectionBase #-}
+classConnectionBase :: ClassType (ConnectionBase ())
+classConnectionBase = ClassType (unsafePerformIO (classInfoFindClass "wxConnectionBase"))
+
+
+{-# NOINLINE classContextHelp #-}
+classContextHelp :: ClassType (ContextHelp ())
+classContextHelp = ClassType (unsafePerformIO (classInfoFindClass "wxContextHelp"))
+
+
+{-# NOINLINE classContextHelpButton #-}
+classContextHelpButton :: ClassType (ContextHelpButton ())
+classContextHelpButton = ClassType (unsafePerformIO (classInfoFindClass "wxContextHelpButton"))
+
+
+{-# NOINLINE classControl #-}
+classControl :: ClassType (Control ())
+classControl = ClassType (unsafePerformIO (classInfoFindClass "wxControl"))
+
+
+{-# NOINLINE classCursor #-}
+classCursor :: ClassType (Cursor ())
+classCursor = ClassType (unsafePerformIO (classInfoFindClass "wxCursor"))
+
+
+{-# NOINLINE classDatabase #-}
+classDatabase :: ClassType (Database ())
+classDatabase = ClassType (unsafePerformIO (classInfoFindClass "wxDatabase"))
+
+
+{-# NOINLINE classDateProperty #-}
+classDateProperty :: ClassType (DateProperty ())
+classDateProperty = ClassType (unsafePerformIO (classInfoFindClass "wxDateProperty"))
+
+
+{-# NOINLINE classDC #-}
+classDC :: ClassType (DC ())
+classDC = ClassType (unsafePerformIO (classInfoFindClass "wxDC"))
+
+
+{-# NOINLINE classDDEClient #-}
+classDDEClient :: ClassType (DDEClient ())
+classDDEClient = ClassType (unsafePerformIO (classInfoFindClass "wxDDEClient"))
+
+
+{-# NOINLINE classDDEConnection #-}
+classDDEConnection :: ClassType (DDEConnection ())
+classDDEConnection = ClassType (unsafePerformIO (classInfoFindClass "wxDDEConnection"))
+
+
+{-# NOINLINE classDDEServer #-}
+classDDEServer :: ClassType (DDEServer ())
+classDDEServer = ClassType (unsafePerformIO (classInfoFindClass "wxDDEServer"))
+
+
+{-# NOINLINE classDialog #-}
+classDialog :: ClassType (Dialog ())
+classDialog = ClassType (unsafePerformIO (classInfoFindClass "wxDialog"))
+
+
+{-# NOINLINE classDialUpEvent #-}
+classDialUpEvent :: ClassType (DialUpEvent ())
+classDialUpEvent = ClassType (unsafePerformIO (classInfoFindClass "wxDialUpEvent"))
+
+
+{-# NOINLINE classDirDialog #-}
+classDirDialog :: ClassType (DirDialog ())
+classDirDialog = ClassType (unsafePerformIO (classInfoFindClass "wxDirDialog"))
+
+
+{-# NOINLINE classDocChildFrame #-}
+classDocChildFrame :: ClassType (DocChildFrame ())
+classDocChildFrame = ClassType (unsafePerformIO (classInfoFindClass "wxDocChildFrame"))
+
+
+{-# NOINLINE classDocManager #-}
+classDocManager :: ClassType (DocManager ())
+classDocManager = ClassType (unsafePerformIO (classInfoFindClass "wxDocManager"))
+
+
+{-# NOINLINE classDocMDIChildFrame #-}
+classDocMDIChildFrame :: ClassType (DocMDIChildFrame ())
+classDocMDIChildFrame = ClassType (unsafePerformIO (classInfoFindClass "wxDocMDIChildFrame"))
+
+
+{-# NOINLINE classDocMDIParentFrame #-}
+classDocMDIParentFrame :: ClassType (DocMDIParentFrame ())
+classDocMDIParentFrame = ClassType (unsafePerformIO (classInfoFindClass "wxDocMDIParentFrame"))
+
+
+{-# NOINLINE classDocParentFrame #-}
+classDocParentFrame :: ClassType (DocParentFrame ())
+classDocParentFrame = ClassType (unsafePerformIO (classInfoFindClass "wxDocParentFrame"))
+
+
+{-# NOINLINE classDocTemplate #-}
+classDocTemplate :: ClassType (DocTemplate ())
+classDocTemplate = ClassType (unsafePerformIO (classInfoFindClass "wxDocTemplate"))
+
+
+{-# NOINLINE classDocument #-}
+classDocument :: ClassType (Document ())
+classDocument = ClassType (unsafePerformIO (classInfoFindClass "wxDocument"))
+
+
+{-# NOINLINE classDragImage #-}
+classDragImage :: ClassType (DragImage ())
+classDragImage = ClassType (unsafePerformIO (classInfoFindClass "wxDragImage"))
+
+
+{-# NOINLINE classDrawControl #-}
+classDrawControl :: ClassType (DrawControl ())
+classDrawControl = ClassType (unsafePerformIO (classInfoFindClass "wxDrawControl"))
+
+
+{-# NOINLINE classDrawWindow #-}
+classDrawWindow :: ClassType (DrawWindow ())
+classDrawWindow = ClassType (unsafePerformIO (classInfoFindClass "wxDrawWindow"))
+
+
+{-# NOINLINE classDropFilesEvent #-}
+classDropFilesEvent :: ClassType (DropFilesEvent ())
+classDropFilesEvent = ClassType (unsafePerformIO (classInfoFindClass "wxDropFilesEvent"))
+
+
+{-# NOINLINE classDynamicSashWindow #-}
+classDynamicSashWindow :: ClassType (DynamicSashWindow ())
+classDynamicSashWindow = ClassType (unsafePerformIO (classInfoFindClass "wxDynamicSashWindow"))
+
+
+{-# NOINLINE classDynamicToolBar #-}
+classDynamicToolBar :: ClassType (DynamicToolBar ())
+classDynamicToolBar = ClassType (unsafePerformIO (classInfoFindClass "wxDynamicToolBar"))
+
+
+{-# NOINLINE classDynToolInfo #-}
+classDynToolInfo :: ClassType (DynToolInfo ())
+classDynToolInfo = ClassType (unsafePerformIO (classInfoFindClass "wxDynToolInfo"))
+
+
+{-# NOINLINE classEditableListBox #-}
+classEditableListBox :: ClassType (EditableListBox ())
+classEditableListBox = ClassType (unsafePerformIO (classInfoFindClass "wxEditableListBox"))
+
+
+{-# NOINLINE classEncodingConverter #-}
+classEncodingConverter :: ClassType (EncodingConverter ())
+classEncodingConverter = ClassType (unsafePerformIO (classInfoFindClass "wxEncodingConverter"))
+
+
+{-# NOINLINE classEraseEvent #-}
+classEraseEvent :: ClassType (EraseEvent ())
+classEraseEvent = ClassType (unsafePerformIO (classInfoFindClass "wxEraseEvent"))
+
+
+{-# NOINLINE classEvent #-}
+classEvent :: ClassType (Event ())
+classEvent = ClassType (unsafePerformIO (classInfoFindClass "wxEvent"))
+
+
+{-# NOINLINE classEvtHandler #-}
+classEvtHandler :: ClassType (EvtHandler ())
+classEvtHandler = ClassType (unsafePerformIO (classInfoFindClass "wxEvtHandler"))
+
+
+{-# NOINLINE classExprDatabase #-}
+classExprDatabase :: ClassType (ExprDatabase ())
+classExprDatabase = ClassType (unsafePerformIO (classInfoFindClass "wxExprDatabase"))
+
+
+{-# NOINLINE classFileDialog #-}
+classFileDialog :: ClassType (FileDialog ())
+classFileDialog = ClassType (unsafePerformIO (classInfoFindClass "wxFileDialog"))
+
+
+{-# NOINLINE classFileHistory #-}
+classFileHistory :: ClassType (FileHistory ())
+classFileHistory = ClassType (unsafePerformIO (classInfoFindClass "wxFileHistory"))
+
+
+{-# NOINLINE classFileProperty #-}
+classFileProperty :: ClassType (FileProperty ())
+classFileProperty = ClassType (unsafePerformIO (classInfoFindClass "wxFileProperty"))
+
+
+{-# NOINLINE classFileSystem #-}
+classFileSystem :: ClassType (FileSystem ())
+classFileSystem = ClassType (unsafePerformIO (classInfoFindClass "wxFileSystem"))
+
+
+{-# NOINLINE classFileSystemHandler #-}
+classFileSystemHandler :: ClassType (FileSystemHandler ())
+classFileSystemHandler = ClassType (unsafePerformIO (classInfoFindClass "wxFileSystemHandler"))
+
+
+{-# NOINLINE classFindDialogEvent #-}
+classFindDialogEvent :: ClassType (FindDialogEvent ())
+classFindDialogEvent = ClassType (unsafePerformIO (classInfoFindClass "wxFindDialogEvent"))
+
+
+{-# NOINLINE classFindReplaceData #-}
+classFindReplaceData :: ClassType (FindReplaceData ())
+classFindReplaceData = ClassType (unsafePerformIO (classInfoFindClass "wxFindReplaceData"))
+
+
+{-# NOINLINE classFindReplaceDialog #-}
+classFindReplaceDialog :: ClassType (FindReplaceDialog ())
+classFindReplaceDialog = ClassType (unsafePerformIO (classInfoFindClass "wxFindReplaceDialog"))
+
+
+{-# NOINLINE classFlexGridSizer #-}
+classFlexGridSizer :: ClassType (FlexGridSizer ())
+classFlexGridSizer = ClassType (unsafePerformIO (classInfoFindClass "wxFlexGridSizer"))
+
+
+{-# NOINLINE classFloatProperty #-}
+classFloatProperty :: ClassType (FloatProperty ())
+classFloatProperty = ClassType (unsafePerformIO (classInfoFindClass "wxFloatProperty"))
+
+
+{-# NOINLINE classFocusEvent #-}
+classFocusEvent :: ClassType (FocusEvent ())
+classFocusEvent = ClassType (unsafePerformIO (classInfoFindClass "wxFocusEvent"))
+
+
+{-# NOINLINE classFont #-}
+classFont :: ClassType (Font ())
+classFont = ClassType (unsafePerformIO (classInfoFindClass "wxFont"))
+
+
+{-# NOINLINE classFontData #-}
+classFontData :: ClassType (FontData ())
+classFontData = ClassType (unsafePerformIO (classInfoFindClass "wxFontData"))
+
+
+{-# NOINLINE classFontDialog #-}
+classFontDialog :: ClassType (FontDialog ())
+classFontDialog = ClassType (unsafePerformIO (classInfoFindClass "wxFontDialog"))
+
+
+{-# NOINLINE classFontList #-}
+classFontList :: ClassType (FontList ())
+classFontList = ClassType (unsafePerformIO (classInfoFindClass "wxFontList"))
+
+
+{-# NOINLINE classFrame #-}
+classFrame :: ClassType (Frame ())
+classFrame = ClassType (unsafePerformIO (classInfoFindClass "wxFrame"))
+
+
+{-# NOINLINE classFrameLayout #-}
+classFrameLayout :: ClassType (FrameLayout ())
+classFrameLayout = ClassType (unsafePerformIO (classInfoFindClass "wxFrameLayout"))
+
+
+{-# NOINLINE classFSFile #-}
+classFSFile :: ClassType (FSFile ())
+classFSFile = ClassType (unsafePerformIO (classInfoFindClass "wxFSFile"))
+
+
+{-# NOINLINE classFTP #-}
+classFTP :: ClassType (FTP ())
+classFTP = ClassType (unsafePerformIO (classInfoFindClass "wxFTP"))
+
+
+{-# NOINLINE classGauge #-}
+classGauge :: ClassType (Gauge ())
+classGauge = ClassType (unsafePerformIO (classInfoFindClass "wxGauge"))
+
+
+{-# NOINLINE classGauge95 #-}
+classGauge95 :: ClassType (Gauge95 ())
+classGauge95 = ClassType (unsafePerformIO (classInfoFindClass "wxGauge95"))
+
+
+{-# NOINLINE classGaugeMSW #-}
+classGaugeMSW :: ClassType (GaugeMSW ())
+classGaugeMSW = ClassType (unsafePerformIO (classInfoFindClass "wxGaugeMSW"))
+
+
+{-# NOINLINE classGCDC #-}
+classGCDC :: ClassType (GCDC ())
+classGCDC = ClassType (unsafePerformIO (classInfoFindClass "wxGCDC"))
+
+
+{-# NOINLINE classGDIObject #-}
+classGDIObject :: ClassType (GDIObject ())
+classGDIObject = ClassType (unsafePerformIO (classInfoFindClass "wxGDIObject"))
+
+
+{-# NOINLINE classGenericDirCtrl #-}
+classGenericDirCtrl :: ClassType (GenericDirCtrl ())
+classGenericDirCtrl = ClassType (unsafePerformIO (classInfoFindClass "wxGenericDirCtrl"))
+
+
+{-# NOINLINE classGenericDragImage #-}
+classGenericDragImage :: ClassType (GenericDragImage ())
+classGenericDragImage = ClassType (unsafePerformIO (classInfoFindClass "wxGenericDragImage"))
+
+
+{-# NOINLINE classGenericValidator #-}
+classGenericValidator :: ClassType (GenericValidator ())
+classGenericValidator = ClassType (unsafePerformIO (classInfoFindClass "wxGenericValidator"))
+
+
+{-# NOINLINE classGLCanvas #-}
+classGLCanvas :: ClassType (GLCanvas ())
+classGLCanvas = ClassType (unsafePerformIO (classInfoFindClass "wxGLCanvas"))
+
+
+{-# NOINLINE classGLContext #-}
+classGLContext :: ClassType (GLContext ())
+classGLContext = ClassType (unsafePerformIO (classInfoFindClass "wxGLContext"))
+
+
+{-# NOINLINE classGraphicsBrush #-}
+classGraphicsBrush :: ClassType (GraphicsBrush ())
+classGraphicsBrush = ClassType (unsafePerformIO (classInfoFindClass "wxGraphicsBrush"))
+
+
+{-# NOINLINE classGraphicsContext #-}
+classGraphicsContext :: ClassType (GraphicsContext ())
+classGraphicsContext = ClassType (unsafePerformIO (classInfoFindClass "wxGraphicsContext"))
+
+
+{-# NOINLINE classGraphicsFont #-}
+classGraphicsFont :: ClassType (GraphicsFont ())
+classGraphicsFont = ClassType (unsafePerformIO (classInfoFindClass "wxGraphicsFont"))
+
+
+{-# NOINLINE classGraphicsMatrix #-}
+classGraphicsMatrix :: ClassType (GraphicsMatrix ())
+classGraphicsMatrix = ClassType (unsafePerformIO (classInfoFindClass "wxGraphicsMatrix"))
+
+
+{-# NOINLINE classGraphicsObject #-}
+classGraphicsObject :: ClassType (GraphicsObject ())
+classGraphicsObject = ClassType (unsafePerformIO (classInfoFindClass "wxGraphicsObject"))
+
+
+{-# NOINLINE classGraphicsPath #-}
+classGraphicsPath :: ClassType (GraphicsPath ())
+classGraphicsPath = ClassType (unsafePerformIO (classInfoFindClass "wxGraphicsPath"))
+
+
+{-# NOINLINE classGraphicsPen #-}
+classGraphicsPen :: ClassType (GraphicsPen ())
+classGraphicsPen = ClassType (unsafePerformIO (classInfoFindClass "wxGraphicsPen"))
+
+
+{-# NOINLINE classGraphicsRenderer #-}
+classGraphicsRenderer :: ClassType (GraphicsRenderer ())
+classGraphicsRenderer = ClassType (unsafePerformIO (classInfoFindClass "wxGraphicsRenderer"))
+
+
+{-# NOINLINE classGrid #-}
+classGrid :: ClassType (Grid ())
+classGrid = ClassType (unsafePerformIO (classInfoFindClass "wxGrid"))
+
+
+{-# NOINLINE classGridEditorCreatedEvent #-}
+classGridEditorCreatedEvent :: ClassType (GridEditorCreatedEvent ())
+classGridEditorCreatedEvent = ClassType (unsafePerformIO (classInfoFindClass "wxGridEditorCreatedEvent"))
+
+
+{-# NOINLINE classGridEvent #-}
+classGridEvent :: ClassType (GridEvent ())
+classGridEvent = ClassType (unsafePerformIO (classInfoFindClass "wxGridEvent"))
+
+
+{-# NOINLINE classGridRangeSelectEvent #-}
+classGridRangeSelectEvent :: ClassType (GridRangeSelectEvent ())
+classGridRangeSelectEvent = ClassType (unsafePerformIO (classInfoFindClass "wxGridRangeSelectEvent"))
+
+
+{-# NOINLINE classGridSizeEvent #-}
+classGridSizeEvent :: ClassType (GridSizeEvent ())
+classGridSizeEvent = ClassType (unsafePerformIO (classInfoFindClass "wxGridSizeEvent"))
+
+
+{-# NOINLINE classGridSizer #-}
+classGridSizer :: ClassType (GridSizer ())
+classGridSizer = ClassType (unsafePerformIO (classInfoFindClass "wxGridSizer"))
+
+
+{-# NOINLINE classGridTableBase #-}
+classGridTableBase :: ClassType (GridTableBase ())
+classGridTableBase = ClassType (unsafePerformIO (classInfoFindClass "wxGridTableBase"))
+
+
+{-# NOINLINE classHelpController #-}
+classHelpController :: ClassType (HelpController ())
+classHelpController = ClassType (unsafePerformIO (classInfoFindClass "wxHelpController"))
+
+
+{-# NOINLINE classHelpControllerBase #-}
+classHelpControllerBase :: ClassType (HelpControllerBase ())
+classHelpControllerBase = ClassType (unsafePerformIO (classInfoFindClass "wxHelpControllerBase"))
+
+
+{-# NOINLINE classHelpEvent #-}
+classHelpEvent :: ClassType (HelpEvent ())
+classHelpEvent = ClassType (unsafePerformIO (classInfoFindClass "wxHelpEvent"))
+
+
+{-# NOINLINE classHtmlCell #-}
+classHtmlCell :: ClassType (HtmlCell ())
+classHtmlCell = ClassType (unsafePerformIO (classInfoFindClass "wxHtmlCell"))
+
+
+{-# NOINLINE classHtmlColourCell #-}
+classHtmlColourCell :: ClassType (HtmlColourCell ())
+classHtmlColourCell = ClassType (unsafePerformIO (classInfoFindClass "wxHtmlColourCell"))
+
+
+{-# NOINLINE classHtmlContainerCell #-}
+classHtmlContainerCell :: ClassType (HtmlContainerCell ())
+classHtmlContainerCell = ClassType (unsafePerformIO (classInfoFindClass "wxHtmlContainerCell"))
+
+
+{-# NOINLINE classHtmlDCRenderer #-}
+classHtmlDCRenderer :: ClassType (HtmlDCRenderer ())
+classHtmlDCRenderer = ClassType (unsafePerformIO (classInfoFindClass "wxHtmlDCRenderer"))
+
+
+{-# NOINLINE classHtmlEasyPrinting #-}
+classHtmlEasyPrinting :: ClassType (HtmlEasyPrinting ())
+classHtmlEasyPrinting = ClassType (unsafePerformIO (classInfoFindClass "wxHtmlEasyPrinting"))
+
+
+{-# NOINLINE classHtmlFilter #-}
+classHtmlFilter :: ClassType (HtmlFilter ())
+classHtmlFilter = ClassType (unsafePerformIO (classInfoFindClass "wxHtmlFilter"))
+
+
+{-# NOINLINE classHtmlHelpController #-}
+classHtmlHelpController :: ClassType (HtmlHelpController ())
+classHtmlHelpController = ClassType (unsafePerformIO (classInfoFindClass "wxHtmlHelpController"))
+
+
+{-# NOINLINE classHtmlHelpData #-}
+classHtmlHelpData :: ClassType (HtmlHelpData ())
+classHtmlHelpData = ClassType (unsafePerformIO (classInfoFindClass "wxHtmlHelpData"))
+
+
+{-# NOINLINE classHtmlHelpFrame #-}
+classHtmlHelpFrame :: ClassType (HtmlHelpFrame ())
+classHtmlHelpFrame = ClassType (unsafePerformIO (classInfoFindClass "wxHtmlHelpFrame"))
+
+
+{-# NOINLINE classHtmlLinkInfo #-}
+classHtmlLinkInfo :: ClassType (HtmlLinkInfo ())
+classHtmlLinkInfo = ClassType (unsafePerformIO (classInfoFindClass "wxHtmlLinkInfo"))
+
+
+{-# NOINLINE classHtmlParser #-}
+classHtmlParser :: ClassType (HtmlParser ())
+classHtmlParser = ClassType (unsafePerformIO (classInfoFindClass "wxHtmlParser"))
+
+
+{-# NOINLINE classHtmlPrintout #-}
+classHtmlPrintout :: ClassType (HtmlPrintout ())
+classHtmlPrintout = ClassType (unsafePerformIO (classInfoFindClass "wxHtmlPrintout"))
+
+
+{-# NOINLINE classHtmlTag #-}
+classHtmlTag :: ClassType (HtmlTag ())
+classHtmlTag = ClassType (unsafePerformIO (classInfoFindClass "wxHtmlTag"))
+
+
+{-# NOINLINE classHtmlTagHandler #-}
+classHtmlTagHandler :: ClassType (HtmlTagHandler ())
+classHtmlTagHandler = ClassType (unsafePerformIO (classInfoFindClass "wxHtmlTagHandler"))
+
+
+{-# NOINLINE classHtmlTagsModule #-}
+classHtmlTagsModule :: ClassType (HtmlTagsModule ())
+classHtmlTagsModule = ClassType (unsafePerformIO (classInfoFindClass "wxHtmlTagsModule"))
+
+
+{-# NOINLINE classHtmlWidgetCell #-}
+classHtmlWidgetCell :: ClassType (HtmlWidgetCell ())
+classHtmlWidgetCell = ClassType (unsafePerformIO (classInfoFindClass "wxHtmlWidgetCell"))
+
+
+{-# NOINLINE classHtmlWindow #-}
+classHtmlWindow :: ClassType (HtmlWindow ())
+classHtmlWindow = ClassType (unsafePerformIO (classInfoFindClass "wxHtmlWindow"))
+
+
+{-# NOINLINE classHtmlWinParser #-}
+classHtmlWinParser :: ClassType (HtmlWinParser ())
+classHtmlWinParser = ClassType (unsafePerformIO (classInfoFindClass "wxHtmlWinParser"))
+
+
+{-# NOINLINE classHtmlWinTagHandler #-}
+classHtmlWinTagHandler :: ClassType (HtmlWinTagHandler ())
+classHtmlWinTagHandler = ClassType (unsafePerformIO (classInfoFindClass "wxHtmlWinTagHandler"))
+
+
+{-# NOINLINE classHTTP #-}
+classHTTP :: ClassType (HTTP ())
+classHTTP = ClassType (unsafePerformIO (classInfoFindClass "wxHTTP"))
+
+
+{-# NOINLINE classHyperlinkCtrl #-}
+classHyperlinkCtrl :: ClassType (HyperlinkCtrl ())
+classHyperlinkCtrl = ClassType (unsafePerformIO (classInfoFindClass "wxHyperlinkCtrl"))
+
+
+{-# NOINLINE classIcon #-}
+classIcon :: ClassType (Icon ())
+classIcon = ClassType (unsafePerformIO (classInfoFindClass "wxIcon"))
+
+
+{-# NOINLINE classIconizeEvent #-}
+classIconizeEvent :: ClassType (IconizeEvent ())
+classIconizeEvent = ClassType (unsafePerformIO (classInfoFindClass "wxIconizeEvent"))
+
+
+{-# NOINLINE classIdleEvent #-}
+classIdleEvent :: ClassType (IdleEvent ())
+classIdleEvent = ClassType (unsafePerformIO (classInfoFindClass "wxIdleEvent"))
+
+
+{-# NOINLINE classImage #-}
+classImage :: ClassType (Image ())
+classImage = ClassType (unsafePerformIO (classInfoFindClass "wxImage"))
+
+
+{-# NOINLINE classImageHandler #-}
+classImageHandler :: ClassType (ImageHandler ())
+classImageHandler = ClassType (unsafePerformIO (classInfoFindClass "wxImageHandler"))
+
+
+{-# NOINLINE classImageList #-}
+classImageList :: ClassType (ImageList ())
+classImageList = ClassType (unsafePerformIO (classInfoFindClass "wxImageList"))
+
+
+{-# NOINLINE classIndividualLayoutConstraint #-}
+classIndividualLayoutConstraint :: ClassType (IndividualLayoutConstraint ())
+classIndividualLayoutConstraint = ClassType (unsafePerformIO (classInfoFindClass "wxIndividualLayoutConstraint"))
+
+
+{-# NOINLINE classInitDialogEvent #-}
+classInitDialogEvent :: ClassType (InitDialogEvent ())
+classInitDialogEvent = ClassType (unsafePerformIO (classInfoFindClass "wxInitDialogEvent"))
+
+
+{-# NOINLINE classInputSinkEvent #-}
+classInputSinkEvent :: ClassType (InputSinkEvent ())
+classInputSinkEvent = ClassType (unsafePerformIO (classInfoFindClass "wxInputSinkEvent"))
+
+
+{-# NOINLINE classIntProperty #-}
+classIntProperty :: ClassType (IntProperty ())
+classIntProperty = ClassType (unsafePerformIO (classInfoFindClass "wxIntProperty"))
+
+
+{-# NOINLINE classIPV4address #-}
+classIPV4address :: ClassType (IPV4address ())
+classIPV4address = ClassType (unsafePerformIO (classInfoFindClass "wxIPV4address"))
+
+
+{-# NOINLINE classJoystick #-}
+classJoystick :: ClassType (Joystick ())
+classJoystick = ClassType (unsafePerformIO (classInfoFindClass "wxJoystick"))
+
+
+{-# NOINLINE classJoystickEvent #-}
+classJoystickEvent :: ClassType (JoystickEvent ())
+classJoystickEvent = ClassType (unsafePerformIO (classInfoFindClass "wxJoystickEvent"))
+
+
+{-# NOINLINE classKeyEvent #-}
+classKeyEvent :: ClassType (KeyEvent ())
+classKeyEvent = ClassType (unsafePerformIO (classInfoFindClass "wxKeyEvent"))
+
+
+{-# NOINLINE classLayoutAlgorithm #-}
+classLayoutAlgorithm :: ClassType (LayoutAlgorithm ())
+classLayoutAlgorithm = ClassType (unsafePerformIO (classInfoFindClass "wxLayoutAlgorithm"))
+
+
+{-# NOINLINE classLayoutConstraints #-}
+classLayoutConstraints :: ClassType (LayoutConstraints ())
+classLayoutConstraints = ClassType (unsafePerformIO (classInfoFindClass "wxLayoutConstraints"))
+
+
+{-# NOINLINE classLEDNumberCtrl #-}
+classLEDNumberCtrl :: ClassType (LEDNumberCtrl ())
+classLEDNumberCtrl = ClassType (unsafePerformIO (classInfoFindClass "wxLEDNumberCtrl"))
+
+
+{-# NOINLINE classList #-}
+classList :: ClassType (List ())
+classList = ClassType (unsafePerformIO (classInfoFindClass "wxList"))
+
+
+{-# NOINLINE classListBox #-}
+classListBox :: ClassType (ListBox ())
+classListBox = ClassType (unsafePerformIO (classInfoFindClass "wxListBox"))
+
+
+{-# NOINLINE classListCtrl #-}
+classListCtrl :: ClassType (ListCtrl ())
+classListCtrl = ClassType (unsafePerformIO (classInfoFindClass "wxListCtrl"))
+
+
+{-# NOINLINE classListEvent #-}
+classListEvent :: ClassType (ListEvent ())
+classListEvent = ClassType (unsafePerformIO (classInfoFindClass "wxListEvent"))
+
+
+{-# NOINLINE classListItem #-}
+classListItem :: ClassType (ListItem ())
+classListItem = ClassType (unsafePerformIO (classInfoFindClass "wxListItem"))
+
+
+{-# NOINLINE classMask #-}
+classMask :: ClassType (Mask ())
+classMask = ClassType (unsafePerformIO (classInfoFindClass "wxMask"))
+
+
+{-# NOINLINE classMaximizeEvent #-}
+classMaximizeEvent :: ClassType (MaximizeEvent ())
+classMaximizeEvent = ClassType (unsafePerformIO (classInfoFindClass "wxMaximizeEvent"))
+
+
+{-# NOINLINE classMDIChildFrame #-}
+classMDIChildFrame :: ClassType (MDIChildFrame ())
+classMDIChildFrame = ClassType (unsafePerformIO (classInfoFindClass "wxMDIChildFrame"))
+
+
+{-# NOINLINE classMDIClientWindow #-}
+classMDIClientWindow :: ClassType (MDIClientWindow ())
+classMDIClientWindow = ClassType (unsafePerformIO (classInfoFindClass "wxMDIClientWindow"))
+
+
+{-# NOINLINE classMDIParentFrame #-}
+classMDIParentFrame :: ClassType (MDIParentFrame ())
+classMDIParentFrame = ClassType (unsafePerformIO (classInfoFindClass "wxMDIParentFrame"))
+
+
+{-# NOINLINE classMediaCtrl #-}
+classMediaCtrl :: ClassType (MediaCtrl ())
+classMediaCtrl = ClassType (unsafePerformIO (classInfoFindClass "wxMediaCtrl"))
+
+
+{-# NOINLINE classMediaEvent #-}
+classMediaEvent :: ClassType (MediaEvent ())
+classMediaEvent = ClassType (unsafePerformIO (classInfoFindClass "wxMediaEvent"))
+
+
+{-# NOINLINE classMemoryDC #-}
+classMemoryDC :: ClassType (MemoryDC ())
+classMemoryDC = ClassType (unsafePerformIO (classInfoFindClass "wxMemoryDC"))
+
+
+{-# NOINLINE classMemoryFSHandler #-}
+classMemoryFSHandler :: ClassType (MemoryFSHandler ())
+classMemoryFSHandler = ClassType (unsafePerformIO (classInfoFindClass "wxMemoryFSHandler"))
+
+
+{-# NOINLINE classMenu #-}
+classMenu :: ClassType (Menu ())
+classMenu = ClassType (unsafePerformIO (classInfoFindClass "wxMenu"))
+
+
+{-# NOINLINE classMenuBar #-}
+classMenuBar :: ClassType (MenuBar ())
+classMenuBar = ClassType (unsafePerformIO (classInfoFindClass "wxMenuBar"))
+
+
+{-# NOINLINE classMenuEvent #-}
+classMenuEvent :: ClassType (MenuEvent ())
+classMenuEvent = ClassType (unsafePerformIO (classInfoFindClass "wxMenuEvent"))
+
+
+{-# NOINLINE classMenuItem #-}
+classMenuItem :: ClassType (MenuItem ())
+classMenuItem = ClassType (unsafePerformIO (classInfoFindClass "wxMenuItem"))
+
+
+{-# NOINLINE classMessageDialog #-}
+classMessageDialog :: ClassType (MessageDialog ())
+classMessageDialog = ClassType (unsafePerformIO (classInfoFindClass "wxMessageDialog"))
+
+
+{-# NOINLINE classMetafile #-}
+classMetafile :: ClassType (Metafile ())
+classMetafile = ClassType (unsafePerformIO (classInfoFindClass "wxMetafile"))
+
+
+{-# NOINLINE classMetafileDC #-}
+classMetafileDC :: ClassType (MetafileDC ())
+classMetafileDC = ClassType (unsafePerformIO (classInfoFindClass "wxMetafileDC"))
+
+
+{-# NOINLINE classMiniFrame #-}
+classMiniFrame :: ClassType (MiniFrame ())
+classMiniFrame = ClassType (unsafePerformIO (classInfoFindClass "wxMiniFrame"))
+
+
+{-# NOINLINE classMirrorDC #-}
+classMirrorDC :: ClassType (MirrorDC ())
+classMirrorDC = ClassType (unsafePerformIO (classInfoFindClass "wxMirrorDC"))
+
+
+{-# NOINLINE classModule #-}
+classModule :: ClassType (Module ())
+classModule = ClassType (unsafePerformIO (classInfoFindClass "wxModule"))
+
+
+{-# NOINLINE classMouseCaptureChangedEvent #-}
+classMouseCaptureChangedEvent :: ClassType (MouseCaptureChangedEvent ())
+classMouseCaptureChangedEvent = ClassType (unsafePerformIO (classInfoFindClass "wxMouseCaptureChangedEvent"))
+
+
+{-# NOINLINE classMouseEvent #-}
+classMouseEvent :: ClassType (MouseEvent ())
+classMouseEvent = ClassType (unsafePerformIO (classInfoFindClass "wxMouseEvent"))
+
+
+{-# NOINLINE classMoveEvent #-}
+classMoveEvent :: ClassType (MoveEvent ())
+classMoveEvent = ClassType (unsafePerformIO (classInfoFindClass "wxMoveEvent"))
+
+
+{-# NOINLINE classMultiCellCanvas #-}
+classMultiCellCanvas :: ClassType (MultiCellCanvas ())
+classMultiCellCanvas = ClassType (unsafePerformIO (classInfoFindClass "wxMultiCellCanvas"))
+
+
+{-# NOINLINE classMultiCellItemHandle #-}
+classMultiCellItemHandle :: ClassType (MultiCellItemHandle ())
+classMultiCellItemHandle = ClassType (unsafePerformIO (classInfoFindClass "wxMultiCellItemHandle"))
+
+
+{-# NOINLINE classMultiCellSizer #-}
+classMultiCellSizer :: ClassType (MultiCellSizer ())
+classMultiCellSizer = ClassType (unsafePerformIO (classInfoFindClass "wxMultiCellSizer"))
+
+
+{-# NOINLINE classNavigationKeyEvent #-}
+classNavigationKeyEvent :: ClassType (NavigationKeyEvent ())
+classNavigationKeyEvent = ClassType (unsafePerformIO (classInfoFindClass "wxNavigationKeyEvent"))
+
+
+{-# NOINLINE classNewBitmapButton #-}
+classNewBitmapButton :: ClassType (NewBitmapButton ())
+classNewBitmapButton = ClassType (unsafePerformIO (classInfoFindClass "wxNewBitmapButton"))
+
+
+{-# NOINLINE classNotebook #-}
+classNotebook :: ClassType (Notebook ())
+classNotebook = ClassType (unsafePerformIO (classInfoFindClass "wxNotebook"))
+
+
+{-# NOINLINE classNotebookEvent #-}
+classNotebookEvent :: ClassType (NotebookEvent ())
+classNotebookEvent = ClassType (unsafePerformIO (classInfoFindClass "wxNotebookEvent"))
+
+
+{-# NOINLINE classNotifyEvent #-}
+classNotifyEvent :: ClassType (NotifyEvent ())
+classNotifyEvent = ClassType (unsafePerformIO (classInfoFindClass "wxNotifyEvent"))
+
+
+{-# NOINLINE classPageSetupDialog #-}
+classPageSetupDialog :: ClassType (PageSetupDialog ())
+classPageSetupDialog = ClassType (unsafePerformIO (classInfoFindClass "wxPageSetupDialog"))
+
+
+{-# NOINLINE classPageSetupDialogData #-}
+classPageSetupDialogData :: ClassType (PageSetupDialogData ())
+classPageSetupDialogData = ClassType (unsafePerformIO (classInfoFindClass "wxPageSetupDialogData"))
+
+
+{-# NOINLINE classPaintDC #-}
+classPaintDC :: ClassType (PaintDC ())
+classPaintDC = ClassType (unsafePerformIO (classInfoFindClass "wxPaintDC"))
+
+
+{-# NOINLINE classPaintEvent #-}
+classPaintEvent :: ClassType (PaintEvent ())
+classPaintEvent = ClassType (unsafePerformIO (classInfoFindClass "wxPaintEvent"))
+
+
+{-# NOINLINE classPalette #-}
+classPalette :: ClassType (Palette ())
+classPalette = ClassType (unsafePerformIO (classInfoFindClass "wxPalette"))
+
+
+{-# NOINLINE classPaletteChangedEvent #-}
+classPaletteChangedEvent :: ClassType (PaletteChangedEvent ())
+classPaletteChangedEvent = ClassType (unsafePerformIO (classInfoFindClass "wxPaletteChangedEvent"))
+
+
+{-# NOINLINE classPanel #-}
+classPanel :: ClassType (Panel ())
+classPanel = ClassType (unsafePerformIO (classInfoFindClass "wxPanel"))
+
+
+{-# NOINLINE classPathList #-}
+classPathList :: ClassType (PathList ())
+classPathList = ClassType (unsafePerformIO (classInfoFindClass "wxPathList"))
+
+
+{-# NOINLINE classPen #-}
+classPen :: ClassType (Pen ())
+classPen = ClassType (unsafePerformIO (classInfoFindClass "wxPen"))
+
+
+{-# NOINLINE classPenList #-}
+classPenList :: ClassType (PenList ())
+classPenList = ClassType (unsafePerformIO (classInfoFindClass "wxPenList"))
+
+
+{-# NOINLINE classPGProperty #-}
+classPGProperty :: ClassType (PGProperty ())
+classPGProperty = ClassType (unsafePerformIO (classInfoFindClass "wxPGProperty"))
+
+
+{-# NOINLINE classPickerBase #-}
+classPickerBase :: ClassType (PickerBase ())
+classPickerBase = ClassType (unsafePerformIO (classInfoFindClass "wxPickerBase"))
+
+
+{-# NOINLINE classPlotCurve #-}
+classPlotCurve :: ClassType (PlotCurve ())
+classPlotCurve = ClassType (unsafePerformIO (classInfoFindClass "wxPlotCurve"))
+
+
+{-# NOINLINE classPlotEvent #-}
+classPlotEvent :: ClassType (PlotEvent ())
+classPlotEvent = ClassType (unsafePerformIO (classInfoFindClass "wxPlotEvent"))
+
+
+{-# NOINLINE classPlotOnOffCurve #-}
+classPlotOnOffCurve :: ClassType (PlotOnOffCurve ())
+classPlotOnOffCurve = ClassType (unsafePerformIO (classInfoFindClass "wxPlotOnOffCurve"))
+
+
+{-# NOINLINE classPlotWindow #-}
+classPlotWindow :: ClassType (PlotWindow ())
+classPlotWindow = ClassType (unsafePerformIO (classInfoFindClass "wxPlotWindow"))
+
+
+{-# NOINLINE classPopupTransientWindow #-}
+classPopupTransientWindow :: ClassType (PopupTransientWindow ())
+classPopupTransientWindow = ClassType (unsafePerformIO (classInfoFindClass "wxPopupTransientWindow"))
+
+
+{-# NOINLINE classPopupWindow #-}
+classPopupWindow :: ClassType (PopupWindow ())
+classPopupWindow = ClassType (unsafePerformIO (classInfoFindClass "wxPopupWindow"))
+
+
+{-# NOINLINE classPostScriptDC #-}
+classPostScriptDC :: ClassType (PostScriptDC ())
+classPostScriptDC = ClassType (unsafePerformIO (classInfoFindClass "wxPostScriptDC"))
+
+
+{-# NOINLINE classPostScriptPrintNativeData #-}
+classPostScriptPrintNativeData :: ClassType (PostScriptPrintNativeData ())
+classPostScriptPrintNativeData = ClassType (unsafePerformIO (classInfoFindClass "wxPostScriptPrintNativeData"))
+
+
+{-# NOINLINE classPreviewCanvas #-}
+classPreviewCanvas :: ClassType (PreviewCanvas ())
+classPreviewCanvas = ClassType (unsafePerformIO (classInfoFindClass "wxPreviewCanvas"))
+
+
+{-# NOINLINE classPreviewControlBar #-}
+classPreviewControlBar :: ClassType (PreviewControlBar ())
+classPreviewControlBar = ClassType (unsafePerformIO (classInfoFindClass "wxPreviewControlBar"))
+
+
+{-# NOINLINE classPreviewFrame #-}
+classPreviewFrame :: ClassType (PreviewFrame ())
+classPreviewFrame = ClassType (unsafePerformIO (classInfoFindClass "wxPreviewFrame"))
+
+
+{-# NOINLINE classPrintData #-}
+classPrintData :: ClassType (PrintData ())
+classPrintData = ClassType (unsafePerformIO (classInfoFindClass "wxPrintData"))
+
+
+{-# NOINLINE classPrintDialog #-}
+classPrintDialog :: ClassType (PrintDialog ())
+classPrintDialog = ClassType (unsafePerformIO (classInfoFindClass "wxPrintDialog"))
+
+
+{-# NOINLINE classPrintDialogData #-}
+classPrintDialogData :: ClassType (PrintDialogData ())
+classPrintDialogData = ClassType (unsafePerformIO (classInfoFindClass "wxPrintDialogData"))
+
+
+{-# NOINLINE classPrinter #-}
+classPrinter :: ClassType (Printer ())
+classPrinter = ClassType (unsafePerformIO (classInfoFindClass "wxPrinter"))
+
+
+{-# NOINLINE classPrinterDC #-}
+classPrinterDC :: ClassType (PrinterDC ())
+classPrinterDC = ClassType (unsafePerformIO (classInfoFindClass "wxPrinterDC"))
+
+
+{-# NOINLINE classPrintout #-}
+classPrintout :: ClassType (Printout ())
+classPrintout = ClassType (unsafePerformIO (classInfoFindClass "wxPrintout"))
+
+
+{-# NOINLINE classPrintPreview #-}
+classPrintPreview :: ClassType (PrintPreview ())
+classPrintPreview = ClassType (unsafePerformIO (classInfoFindClass "wxPrintPreview"))
+
+
+{-# NOINLINE classProcess #-}
+classProcess :: ClassType (Process ())
+classProcess = ClassType (unsafePerformIO (classInfoFindClass "wxProcess"))
+
+
+{-# NOINLINE classProcessEvent #-}
+classProcessEvent :: ClassType (ProcessEvent ())
+classProcessEvent = ClassType (unsafePerformIO (classInfoFindClass "wxProcessEvent"))
+
+
+{-# NOINLINE classProgressDialog #-}
+classProgressDialog :: ClassType (ProgressDialog ())
+classProgressDialog = ClassType (unsafePerformIO (classInfoFindClass "wxProgressDialog"))
+
+
+{-# NOINLINE classPropertyCategory #-}
+classPropertyCategory :: ClassType (PropertyCategory ())
+classPropertyCategory = ClassType (unsafePerformIO (classInfoFindClass "wxPropertyCategory"))
+
+
+{-# NOINLINE classPropertyGrid #-}
+classPropertyGrid :: ClassType (PropertyGrid ())
+classPropertyGrid = ClassType (unsafePerformIO (classInfoFindClass "wxPropertyGrid"))
+
+
+{-# NOINLINE classPropertyGridEvent #-}
+classPropertyGridEvent :: ClassType (PropertyGridEvent ())
+classPropertyGridEvent = ClassType (unsafePerformIO (classInfoFindClass "wxPropertyGridEvent"))
+
+
+{-# NOINLINE classProtocol #-}
+classProtocol :: ClassType (Protocol ())
+classProtocol = ClassType (unsafePerformIO (classInfoFindClass "wxProtocol"))
+
+
+{-# NOINLINE classQuantize #-}
+classQuantize :: ClassType (Quantize ())
+classQuantize = ClassType (unsafePerformIO (classInfoFindClass "wxQuantize"))
+
+
+{-# NOINLINE classQueryCol #-}
+classQueryCol :: ClassType (QueryCol ())
+classQueryCol = ClassType (unsafePerformIO (classInfoFindClass "wxQueryCol"))
+
+
+{-# NOINLINE classQueryField #-}
+classQueryField :: ClassType (QueryField ())
+classQueryField = ClassType (unsafePerformIO (classInfoFindClass "wxQueryField"))
+
+
+{-# NOINLINE classQueryLayoutInfoEvent #-}
+classQueryLayoutInfoEvent :: ClassType (QueryLayoutInfoEvent ())
+classQueryLayoutInfoEvent = ClassType (unsafePerformIO (classInfoFindClass "wxQueryLayoutInfoEvent"))
+
+
+{-# NOINLINE classQueryNewPaletteEvent #-}
+classQueryNewPaletteEvent :: ClassType (QueryNewPaletteEvent ())
+classQueryNewPaletteEvent = ClassType (unsafePerformIO (classInfoFindClass "wxQueryNewPaletteEvent"))
+
+
+{-# NOINLINE classRadioBox #-}
+classRadioBox :: ClassType (RadioBox ())
+classRadioBox = ClassType (unsafePerformIO (classInfoFindClass "wxRadioBox"))
+
+
+{-# NOINLINE classRadioButton #-}
+classRadioButton :: ClassType (RadioButton ())
+classRadioButton = ClassType (unsafePerformIO (classInfoFindClass "wxRadioButton"))
+
+
+{-# NOINLINE classRecordSet #-}
+classRecordSet :: ClassType (RecordSet ())
+classRecordSet = ClassType (unsafePerformIO (classInfoFindClass "wxRecordSet"))
+
+
+{-# NOINLINE classRegion #-}
+classRegion :: ClassType (Region ())
+classRegion = ClassType (unsafePerformIO (classInfoFindClass "wxRegion"))
+
+
+{-# NOINLINE classRegionIterator #-}
+classRegionIterator :: ClassType (RegionIterator ())
+classRegionIterator = ClassType (unsafePerformIO (classInfoFindClass "wxRegionIterator"))
+
+
+{-# NOINLINE classRemotelyScrolledTreeCtrl #-}
+classRemotelyScrolledTreeCtrl :: ClassType (RemotelyScrolledTreeCtrl ())
+classRemotelyScrolledTreeCtrl = ClassType (unsafePerformIO (classInfoFindClass "wxRemotelyScrolledTreeCtrl"))
+
+
+{-# NOINLINE classSashEvent #-}
+classSashEvent :: ClassType (SashEvent ())
+classSashEvent = ClassType (unsafePerformIO (classInfoFindClass "wxSashEvent"))
+
+
+{-# NOINLINE classSashLayoutWindow #-}
+classSashLayoutWindow :: ClassType (SashLayoutWindow ())
+classSashLayoutWindow = ClassType (unsafePerformIO (classInfoFindClass "wxSashLayoutWindow"))
+
+
+{-# NOINLINE classSashWindow #-}
+classSashWindow :: ClassType (SashWindow ())
+classSashWindow = ClassType (unsafePerformIO (classInfoFindClass "wxSashWindow"))
+
+
+{-# NOINLINE classScreenDC #-}
+classScreenDC :: ClassType (ScreenDC ())
+classScreenDC = ClassType (unsafePerformIO (classInfoFindClass "wxScreenDC"))
+
+
+{-# NOINLINE classScrollBar #-}
+classScrollBar :: ClassType (ScrollBar ())
+classScrollBar = ClassType (unsafePerformIO (classInfoFindClass "wxScrollBar"))
+
+
+{-# NOINLINE classScrolledWindow #-}
+classScrolledWindow :: ClassType (ScrolledWindow ())
+classScrolledWindow = ClassType (unsafePerformIO (classInfoFindClass "wxScrolledWindow"))
+
+
+{-# NOINLINE classScrollEvent #-}
+classScrollEvent :: ClassType (ScrollEvent ())
+classScrollEvent = ClassType (unsafePerformIO (classInfoFindClass "wxScrollEvent"))
+
+
+{-# NOINLINE classScrollWinEvent #-}
+classScrollWinEvent :: ClassType (ScrollWinEvent ())
+classScrollWinEvent = ClassType (unsafePerformIO (classInfoFindClass "wxScrollWinEvent"))
+
+
+{-# NOINLINE classServer #-}
+classServer :: ClassType (Server ())
+classServer = ClassType (unsafePerformIO (classInfoFindClass "wxServer"))
+
+
+{-# NOINLINE classServerBase #-}
+classServerBase :: ClassType (ServerBase ())
+classServerBase = ClassType (unsafePerformIO (classInfoFindClass "wxServerBase"))
+
+
+{-# NOINLINE classSetCursorEvent #-}
+classSetCursorEvent :: ClassType (SetCursorEvent ())
+classSetCursorEvent = ClassType (unsafePerformIO (classInfoFindClass "wxSetCursorEvent"))
+
+
+{-# NOINLINE classShowEvent #-}
+classShowEvent :: ClassType (ShowEvent ())
+classShowEvent = ClassType (unsafePerformIO (classInfoFindClass "wxShowEvent"))
+
+
+{-# NOINLINE classSingleChoiceDialog #-}
+classSingleChoiceDialog :: ClassType (SingleChoiceDialog ())
+classSingleChoiceDialog = ClassType (unsafePerformIO (classInfoFindClass "wxSingleChoiceDialog"))
+
+
+{-# NOINLINE classSizeEvent #-}
+classSizeEvent :: ClassType (SizeEvent ())
+classSizeEvent = ClassType (unsafePerformIO (classInfoFindClass "wxSizeEvent"))
+
+
+{-# NOINLINE classSizer #-}
+classSizer :: ClassType (Sizer ())
+classSizer = ClassType (unsafePerformIO (classInfoFindClass "wxSizer"))
+
+
+{-# NOINLINE classSizerItem #-}
+classSizerItem :: ClassType (SizerItem ())
+classSizerItem = ClassType (unsafePerformIO (classInfoFindClass "wxSizerItem"))
+
+
+{-# NOINLINE classSlider #-}
+classSlider :: ClassType (Slider ())
+classSlider = ClassType (unsafePerformIO (classInfoFindClass "wxSlider"))
+
+
+{-# NOINLINE classSlider95 #-}
+classSlider95 :: ClassType (Slider95 ())
+classSlider95 = ClassType (unsafePerformIO (classInfoFindClass "wxSlider95"))
+
+
+{-# NOINLINE classSliderMSW #-}
+classSliderMSW :: ClassType (SliderMSW ())
+classSliderMSW = ClassType (unsafePerformIO (classInfoFindClass "wxSliderMSW"))
+
+
+{-# NOINLINE classSockAddress #-}
+classSockAddress :: ClassType (SockAddress ())
+classSockAddress = ClassType (unsafePerformIO (classInfoFindClass "wxSockAddress"))
+
+
+{-# NOINLINE classSocketBase #-}
+classSocketBase :: ClassType (SocketBase ())
+classSocketBase = ClassType (unsafePerformIO (classInfoFindClass "wxSocketBase"))
+
+
+{-# NOINLINE classSocketClient #-}
+classSocketClient :: ClassType (SocketClient ())
+classSocketClient = ClassType (unsafePerformIO (classInfoFindClass "wxSocketClient"))
+
+
+{-# NOINLINE classSocketEvent #-}
+classSocketEvent :: ClassType (SocketEvent ())
+classSocketEvent = ClassType (unsafePerformIO (classInfoFindClass "wxSocketEvent"))
+
+
+{-# NOINLINE classSocketServer #-}
+classSocketServer :: ClassType (SocketServer ())
+classSocketServer = ClassType (unsafePerformIO (classInfoFindClass "wxSocketServer"))
+
+
+{-# NOINLINE classSound #-}
+classSound :: ClassType (Sound ())
+classSound = ClassType (unsafePerformIO (classInfoFindClass "wxSound"))
+
+
+{-# NOINLINE classSpinButton #-}
+classSpinButton :: ClassType (SpinButton ())
+classSpinButton = ClassType (unsafePerformIO (classInfoFindClass "wxSpinButton"))
+
+
+{-# NOINLINE classSpinCtrl #-}
+classSpinCtrl :: ClassType (SpinCtrl ())
+classSpinCtrl = ClassType (unsafePerformIO (classInfoFindClass "wxSpinCtrl"))
+
+
+{-# NOINLINE classSpinEvent #-}
+classSpinEvent :: ClassType (SpinEvent ())
+classSpinEvent = ClassType (unsafePerformIO (classInfoFindClass "wxSpinEvent"))
+
+
+{-# NOINLINE classSplashScreen #-}
+classSplashScreen :: ClassType (SplashScreen ())
+classSplashScreen = ClassType (unsafePerformIO (classInfoFindClass "wxSplashScreen"))
+
+
+{-# NOINLINE classSplitterEvent #-}
+classSplitterEvent :: ClassType (SplitterEvent ())
+classSplitterEvent = ClassType (unsafePerformIO (classInfoFindClass "wxSplitterEvent"))
+
+
+{-# NOINLINE classSplitterScrolledWindow #-}
+classSplitterScrolledWindow :: ClassType (SplitterScrolledWindow ())
+classSplitterScrolledWindow = ClassType (unsafePerformIO (classInfoFindClass "wxSplitterScrolledWindow"))
+
+
+{-# NOINLINE classSplitterWindow #-}
+classSplitterWindow :: ClassType (SplitterWindow ())
+classSplitterWindow = ClassType (unsafePerformIO (classInfoFindClass "wxSplitterWindow"))
+
+
+{-# NOINLINE classStaticBitmap #-}
+classStaticBitmap :: ClassType (StaticBitmap ())
+classStaticBitmap = ClassType (unsafePerformIO (classInfoFindClass "wxStaticBitmap"))
+
+
+{-# NOINLINE classStaticBox #-}
+classStaticBox :: ClassType (StaticBox ())
+classStaticBox = ClassType (unsafePerformIO (classInfoFindClass "wxStaticBox"))
+
+
+{-# NOINLINE classStaticBoxSizer #-}
+classStaticBoxSizer :: ClassType (StaticBoxSizer ())
+classStaticBoxSizer = ClassType (unsafePerformIO (classInfoFindClass "wxStaticBoxSizer"))
+
+
+{-# NOINLINE classStaticLine #-}
+classStaticLine :: ClassType (StaticLine ())
+classStaticLine = ClassType (unsafePerformIO (classInfoFindClass "wxStaticLine"))
+
+
+{-# NOINLINE classStaticText #-}
+classStaticText :: ClassType (StaticText ())
+classStaticText = ClassType (unsafePerformIO (classInfoFindClass "wxStaticText"))
+
+
+{-# NOINLINE classStatusBar #-}
+classStatusBar :: ClassType (StatusBar ())
+classStatusBar = ClassType (unsafePerformIO (classInfoFindClass "wxStatusBar"))
+
+
+{-# NOINLINE classStringList #-}
+classStringList :: ClassType (StringList ())
+classStringList = ClassType (unsafePerformIO (classInfoFindClass "wxStringList"))
+
+
+{-# NOINLINE classStringProperty #-}
+classStringProperty :: ClassType (StringProperty ())
+classStringProperty = ClassType (unsafePerformIO (classInfoFindClass "wxStringProperty"))
+
+
+{-# NOINLINE classStringTokenizer #-}
+classStringTokenizer :: ClassType (StringTokenizer ())
+classStringTokenizer = ClassType (unsafePerformIO (classInfoFindClass "wxStringTokenizer"))
+
+
+{-# NOINLINE classStyledTextCtrl #-}
+classStyledTextCtrl :: ClassType (StyledTextCtrl ())
+classStyledTextCtrl = ClassType (unsafePerformIO (classInfoFindClass "wxStyledTextCtrl"))
+
+
+{-# NOINLINE classStyledTextEvent #-}
+classStyledTextEvent :: ClassType (StyledTextEvent ())
+classStyledTextEvent = ClassType (unsafePerformIO (classInfoFindClass "wxStyledTextEvent"))
+
+
+{-# NOINLINE classSVGFileDC #-}
+classSVGFileDC :: ClassType (SVGFileDC ())
+classSVGFileDC = ClassType (unsafePerformIO (classInfoFindClass "wxSVGFileDC"))
+
+
+{-# NOINLINE classSysColourChangedEvent #-}
+classSysColourChangedEvent :: ClassType (SysColourChangedEvent ())
+classSysColourChangedEvent = ClassType (unsafePerformIO (classInfoFindClass "wxSysColourChangedEvent"))
+
+
+{-# NOINLINE classSystemOptions #-}
+classSystemOptions :: ClassType (SystemOptions ())
+classSystemOptions = ClassType (unsafePerformIO (classInfoFindClass "wxSystemOptions"))
+
+
+{-# NOINLINE classSystemSettings #-}
+classSystemSettings :: ClassType (SystemSettings ())
+classSystemSettings = ClassType (unsafePerformIO (classInfoFindClass "wxSystemSettings"))
+
+
+{-# NOINLINE classTabCtrl #-}
+classTabCtrl :: ClassType (TabCtrl ())
+classTabCtrl = ClassType (unsafePerformIO (classInfoFindClass "wxTabCtrl"))
+
+
+{-# NOINLINE classTabEvent #-}
+classTabEvent :: ClassType (TabEvent ())
+classTabEvent = ClassType (unsafePerformIO (classInfoFindClass "wxTabEvent"))
+
+
+{-# NOINLINE classTablesInUse #-}
+classTablesInUse :: ClassType (TablesInUse ())
+classTablesInUse = ClassType (unsafePerformIO (classInfoFindClass "wxTablesInUse"))
+
+
+{-# NOINLINE classTaskBarIcon #-}
+classTaskBarIcon :: ClassType (TaskBarIcon ())
+classTaskBarIcon = ClassType (unsafePerformIO (classInfoFindClass "wxTaskBarIcon"))
+
+
+{-# NOINLINE classTextCtrl #-}
+classTextCtrl :: ClassType (TextCtrl ())
+classTextCtrl = ClassType (unsafePerformIO (classInfoFindClass "wxTextCtrl"))
+
+
+{-# NOINLINE classTextEntryDialog #-}
+classTextEntryDialog :: ClassType (TextEntryDialog ())
+classTextEntryDialog = ClassType (unsafePerformIO (classInfoFindClass "wxTextEntryDialog"))
+
+
+{-# NOINLINE classTextValidator #-}
+classTextValidator :: ClassType (TextValidator ())
+classTextValidator = ClassType (unsafePerformIO (classInfoFindClass "wxTextValidator"))
+
+
+{-# NOINLINE classThinSplitterWindow #-}
+classThinSplitterWindow :: ClassType (ThinSplitterWindow ())
+classThinSplitterWindow = ClassType (unsafePerformIO (classInfoFindClass "wxThinSplitterWindow"))
+
+
+{-# NOINLINE classTime #-}
+classTime :: ClassType (Time ())
+classTime = ClassType (unsafePerformIO (classInfoFindClass "wxTime"))
+
+
+{-# NOINLINE classTimer #-}
+classTimer :: ClassType (Timer ())
+classTimer = ClassType (unsafePerformIO (classInfoFindClass "wxTimer"))
+
+
+{-# NOINLINE classTimerBase #-}
+classTimerBase :: ClassType (TimerBase ())
+classTimerBase = ClassType (unsafePerformIO (classInfoFindClass "wxTimerBase"))
+
+
+{-# NOINLINE classTimerEvent #-}
+classTimerEvent :: ClassType (TimerEvent ())
+classTimerEvent = ClassType (unsafePerformIO (classInfoFindClass "wxTimerEvent"))
+
+
+{-# NOINLINE classTimerEx #-}
+classTimerEx :: ClassType (TimerEx ())
+classTimerEx = ClassType (unsafePerformIO (classInfoFindClass "wxTimerEx"))
+
+
+{-# NOINLINE classTipWindow #-}
+classTipWindow :: ClassType (TipWindow ())
+classTipWindow = ClassType (unsafePerformIO (classInfoFindClass "wxTipWindow"))
+
+
+{-# NOINLINE classToggleButton #-}
+classToggleButton :: ClassType (ToggleButton ())
+classToggleButton = ClassType (unsafePerformIO (classInfoFindClass "wxToggleButton"))
+
+
+{-# NOINLINE classToolBar #-}
+classToolBar :: ClassType (ToolBar ())
+classToolBar = ClassType (unsafePerformIO (classInfoFindClass "wxToolBar"))
+
+
+{-# NOINLINE classToolBarBase #-}
+classToolBarBase :: ClassType (ToolBarBase ())
+classToolBarBase = ClassType (unsafePerformIO (classInfoFindClass "wxToolBarBase"))
+
+
+{-# NOINLINE classToolLayoutItem #-}
+classToolLayoutItem :: ClassType (ToolLayoutItem ())
+classToolLayoutItem = ClassType (unsafePerformIO (classInfoFindClass "wxToolLayoutItem"))
+
+
+{-# NOINLINE classToolTip #-}
+classToolTip :: ClassType (ToolTip ())
+classToolTip = ClassType (unsafePerformIO (classInfoFindClass "wxToolTip"))
+
+
+{-# NOINLINE classToolWindow #-}
+classToolWindow :: ClassType (ToolWindow ())
+classToolWindow = ClassType (unsafePerformIO (classInfoFindClass "wxToolWindow"))
+
+
+{-# NOINLINE classTopLevelWindow #-}
+classTopLevelWindow :: ClassType (TopLevelWindow ())
+classTopLevelWindow = ClassType (unsafePerformIO (classInfoFindClass "wxTopLevelWindow"))
+
+
+{-# NOINLINE classTreeCompanionWindow #-}
+classTreeCompanionWindow :: ClassType (TreeCompanionWindow ())
+classTreeCompanionWindow = ClassType (unsafePerformIO (classInfoFindClass "wxTreeCompanionWindow"))
+
+
+{-# NOINLINE classTreeCtrl #-}
+classTreeCtrl :: ClassType (TreeCtrl ())
+classTreeCtrl = ClassType (unsafePerformIO (classInfoFindClass "wxTreeCtrl"))
+
+
+{-# NOINLINE classTreeEvent #-}
+classTreeEvent :: ClassType (TreeEvent ())
+classTreeEvent = ClassType (unsafePerformIO (classInfoFindClass "wxTreeEvent"))
+
+
+{-# NOINLINE classTreeLayout #-}
+classTreeLayout :: ClassType (TreeLayout ())
+classTreeLayout = ClassType (unsafePerformIO (classInfoFindClass "wxTreeLayout"))
+
+
+{-# NOINLINE classTreeLayoutStored #-}
+classTreeLayoutStored :: ClassType (TreeLayoutStored ())
+classTreeLayoutStored = ClassType (unsafePerformIO (classInfoFindClass "wxTreeLayoutStored"))
+
+
+{-# NOINLINE classUpdateUIEvent #-}
+classUpdateUIEvent :: ClassType (UpdateUIEvent ())
+classUpdateUIEvent = ClassType (unsafePerformIO (classInfoFindClass "wxUpdateUIEvent"))
+
+
+{-# NOINLINE classURL #-}
+classURL :: ClassType (URL ())
+classURL = ClassType (unsafePerformIO (classInfoFindClass "wxURL"))
+
+
+{-# NOINLINE classValidator #-}
+classValidator :: ClassType (Validator ())
+classValidator = ClassType (unsafePerformIO (classInfoFindClass "wxValidator"))
+
+
+{-# NOINLINE classVariant #-}
+classVariant :: ClassType (Variant ())
+classVariant = ClassType (unsafePerformIO (classInfoFindClass "wxVariant"))
+
+
+{-# NOINLINE classVariantData #-}
+classVariantData :: ClassType (VariantData ())
+classVariantData = ClassType (unsafePerformIO (classInfoFindClass "wxVariantData"))
+
+
+{-# NOINLINE classView #-}
+classView :: ClassType (View ())
+classView = ClassType (unsafePerformIO (classInfoFindClass "wxView"))
+
+
+{-# NOINLINE classWindow #-}
+classWindow :: ClassType (Window ())
+classWindow = ClassType (unsafePerformIO (classInfoFindClass "wxWindow"))
+
+
+{-# NOINLINE classWindowCreateEvent #-}
+classWindowCreateEvent :: ClassType (WindowCreateEvent ())
+classWindowCreateEvent = ClassType (unsafePerformIO (classInfoFindClass "wxWindowCreateEvent"))
+
+
+{-# NOINLINE classWindowDC #-}
+classWindowDC :: ClassType (WindowDC ())
+classWindowDC = ClassType (unsafePerformIO (classInfoFindClass "wxWindowDC"))
+
+
+{-# NOINLINE classWindowDestroyEvent #-}
+classWindowDestroyEvent :: ClassType (WindowDestroyEvent ())
+classWindowDestroyEvent = ClassType (unsafePerformIO (classInfoFindClass "wxWindowDestroyEvent"))
+
+
+{-# NOINLINE classWizard #-}
+classWizard :: ClassType (Wizard ())
+classWizard = ClassType (unsafePerformIO (classInfoFindClass "wxWizard"))
+
+
+{-# NOINLINE classWizardEvent #-}
+classWizardEvent :: ClassType (WizardEvent ())
+classWizardEvent = ClassType (unsafePerformIO (classInfoFindClass "wxWizardEvent"))
+
+
+{-# NOINLINE classWizardPage #-}
+classWizardPage :: ClassType (WizardPage ())
+classWizardPage = ClassType (unsafePerformIO (classInfoFindClass "wxWizardPage"))
+
+
+{-# NOINLINE classWizardPageSimple #-}
+classWizardPageSimple :: ClassType (WizardPageSimple ())
+classWizardPageSimple = ClassType (unsafePerformIO (classInfoFindClass "wxWizardPageSimple"))
+
+
+{-# NOINLINE classWXCApp #-}
+classWXCApp :: ClassType (WXCApp ())
+classWXCApp = ClassType (unsafePerformIO (classInfoFindClass "ELJApp"))
+
+
+{-# NOINLINE classWXCArtProv #-}
+classWXCArtProv :: ClassType (WXCArtProv ())
+classWXCArtProv = ClassType (unsafePerformIO (classInfoFindClass "ELJArtProv"))
+
+
+{-# NOINLINE classWXCClient #-}
+classWXCClient :: ClassType (WXCClient ())
+classWXCClient = ClassType (unsafePerformIO (classInfoFindClass "ELJClient"))
+
+
+{-# NOINLINE classWXCCommand #-}
+classWXCCommand :: ClassType (WXCCommand ())
+classWXCCommand = ClassType (unsafePerformIO (classInfoFindClass "ELJCommand"))
+
+
+{-# NOINLINE classWXCConnection #-}
+classWXCConnection :: ClassType (WXCConnection ())
+classWXCConnection = ClassType (unsafePerformIO (classInfoFindClass "ELJConnection"))
+
+
+{-# NOINLINE classWXCGridTable #-}
+classWXCGridTable :: ClassType (WXCGridTable ())
+classWXCGridTable = ClassType (unsafePerformIO (classInfoFindClass "ELJGridTable"))
+
+
+{-# NOINLINE classWXCHtmlEvent #-}
+classWXCHtmlEvent :: ClassType (WXCHtmlEvent ())
+classWXCHtmlEvent = ClassType (unsafePerformIO (classInfoFindClass "wxcHtmlEvent"))
+
+
+{-# NOINLINE classWXCHtmlWindow #-}
+classWXCHtmlWindow :: ClassType (WXCHtmlWindow ())
+classWXCHtmlWindow = ClassType (unsafePerformIO (classInfoFindClass "wxcHtmlWindow"))
+
+
+{-# NOINLINE classWXCPlotCurve #-}
+classWXCPlotCurve :: ClassType (WXCPlotCurve ())
+classWXCPlotCurve = ClassType (unsafePerformIO (classInfoFindClass "ELJPlotCurve"))
+
+
+{-# NOINLINE classWXCPreviewControlBar #-}
+classWXCPreviewControlBar :: ClassType (WXCPreviewControlBar ())
+classWXCPreviewControlBar = ClassType (unsafePerformIO (classInfoFindClass "ELJPreviewControlBar"))
+
+
+{-# NOINLINE classWXCPreviewFrame #-}
+classWXCPreviewFrame :: ClassType (WXCPreviewFrame ())
+classWXCPreviewFrame = ClassType (unsafePerformIO (classInfoFindClass "ELJPreviewFrame"))
+
+
+{-# NOINLINE classWXCPrintEvent #-}
+classWXCPrintEvent :: ClassType (WXCPrintEvent ())
+classWXCPrintEvent = ClassType (unsafePerformIO (classInfoFindClass "wxcPrintEvent"))
+
+
+{-# NOINLINE classWXCPrintout #-}
+classWXCPrintout :: ClassType (WXCPrintout ())
+classWXCPrintout = ClassType (unsafePerformIO (classInfoFindClass "wxcPrintout"))
+
+
+{-# NOINLINE classWXCPrintoutHandler #-}
+classWXCPrintoutHandler :: ClassType (WXCPrintoutHandler ())
+classWXCPrintoutHandler = ClassType (unsafePerformIO (classInfoFindClass "wxcPrintoutHandler"))
+
+
+{-# NOINLINE classWXCServer #-}
+classWXCServer :: ClassType (WXCServer ())
+classWXCServer = ClassType (unsafePerformIO (classInfoFindClass "ELJServer"))
+
+
+{-# NOINLINE classWXCTextValidator #-}
+classWXCTextValidator :: ClassType (WXCTextValidator ())
+classWXCTextValidator = ClassType (unsafePerformIO (classInfoFindClass "ELJTextValidator"))
+
+
+{-# NOINLINE classWxObject #-}
+classWxObject :: ClassType (WxObject ())
+classWxObject = ClassType (unsafePerformIO (classInfoFindClass "wxObject"))
+
+
+{-# NOINLINE classXmlResource #-}
+classXmlResource :: ClassType (XmlResource ())
+classXmlResource = ClassType (unsafePerformIO (classInfoFindClass "wxXmlResource"))
+
+
+{-# NOINLINE classXmlResourceHandler #-}
+classXmlResourceHandler :: ClassType (XmlResourceHandler ())
+classXmlResourceHandler = ClassType (unsafePerformIO (classInfoFindClass "wxXmlResourceHandler"))
+
+
+downcastActivateEvent :: ActivateEvent a -> ActivateEvent ()
+downcastActivateEvent obj = objectCast obj
+
+
+downcastApp :: App a -> App ()
+downcastApp obj = objectCast obj
+
+
+downcastArtProvider :: ArtProvider a -> ArtProvider ()
+downcastArtProvider obj = objectCast obj
+
+
+downcastAuiManager :: AuiManager a -> AuiManager ()
+downcastAuiManager obj = objectCast obj
+
+
+downcastAuiManagerEvent :: AuiManagerEvent a -> AuiManagerEvent ()
+downcastAuiManagerEvent obj = objectCast obj
+
+
+downcastAuiNotebook :: AuiNotebook a -> AuiNotebook ()
+downcastAuiNotebook obj = objectCast obj
+
+
+downcastAuiNotebookEvent :: AuiNotebookEvent a -> AuiNotebookEvent ()
+downcastAuiNotebookEvent obj = objectCast obj
+
+
+downcastAuiTabCtrl :: AuiTabCtrl a -> AuiTabCtrl ()
+downcastAuiTabCtrl obj = objectCast obj
+
+
+downcastAuiToolBar :: AuiToolBar a -> AuiToolBar ()
+downcastAuiToolBar obj = objectCast obj
+
+
+downcastAuiToolBarEvent :: AuiToolBarEvent a -> AuiToolBarEvent ()
+downcastAuiToolBarEvent obj = objectCast obj
+
+
+downcastAutoBufferedPaintDC :: AutoBufferedPaintDC a -> AutoBufferedPaintDC ()
+downcastAutoBufferedPaintDC obj = objectCast obj
+
+
+downcastAutomationObject :: AutomationObject a -> AutomationObject ()
+downcastAutomationObject obj = objectCast obj
+
+
+downcastBitmap :: Bitmap a -> Bitmap ()
+downcastBitmap obj = objectCast obj
+
+
+downcastBitmapButton :: BitmapButton a -> BitmapButton ()
+downcastBitmapButton obj = objectCast obj
+
+
+downcastBitmapHandler :: BitmapHandler a -> BitmapHandler ()
+downcastBitmapHandler obj = objectCast obj
+
+
+downcastBitmapToggleButton :: BitmapToggleButton a -> BitmapToggleButton ()
+downcastBitmapToggleButton obj = objectCast obj
+
+
+downcastBookCtrlBase :: BookCtrlBase a -> BookCtrlBase ()
+downcastBookCtrlBase obj = objectCast obj
+
+
+downcastBookCtrlEvent :: BookCtrlEvent a -> BookCtrlEvent ()
+downcastBookCtrlEvent obj = objectCast obj
+
+
+downcastBoolProperty :: BoolProperty a -> BoolProperty ()
+downcastBoolProperty obj = objectCast obj
+
+
+downcastBoxSizer :: BoxSizer a -> BoxSizer ()
+downcastBoxSizer obj = objectCast obj
+
+
+downcastBrush :: Brush a -> Brush ()
+downcastBrush obj = objectCast obj
+
+
+downcastBrushList :: BrushList a -> BrushList ()
+downcastBrushList obj = objectCast obj
+
+
+downcastBufferedDC :: BufferedDC a -> BufferedDC ()
+downcastBufferedDC obj = objectCast obj
+
+
+downcastBufferedPaintDC :: BufferedPaintDC a -> BufferedPaintDC ()
+downcastBufferedPaintDC obj = objectCast obj
+
+
+downcastButton :: Button a -> Button ()
+downcastButton obj = objectCast obj
+
+
+downcastCalculateLayoutEvent :: CalculateLayoutEvent a -> CalculateLayoutEvent ()
+downcastCalculateLayoutEvent obj = objectCast obj
+
+
+downcastCalendarCtrl :: CalendarCtrl a -> CalendarCtrl ()
+downcastCalendarCtrl obj = objectCast obj
+
+
+downcastCalendarEvent :: CalendarEvent a -> CalendarEvent ()
+downcastCalendarEvent obj = objectCast obj
+
+
+downcastCbAntiflickerPlugin :: CbAntiflickerPlugin a -> CbAntiflickerPlugin ()
+downcastCbAntiflickerPlugin obj = objectCast obj
+
+
+downcastCbBarDragPlugin :: CbBarDragPlugin a -> CbBarDragPlugin ()
+downcastCbBarDragPlugin obj = objectCast obj
+
+
+downcastCbBarHintsPlugin :: CbBarHintsPlugin a -> CbBarHintsPlugin ()
+downcastCbBarHintsPlugin obj = objectCast obj
+
+
+downcastCbBarInfo :: CbBarInfo a -> CbBarInfo ()
+downcastCbBarInfo obj = objectCast obj
+
+
+downcastCbBarSpy :: CbBarSpy a -> CbBarSpy ()
+downcastCbBarSpy obj = objectCast obj
+
+
+downcastCbCloseBox :: CbCloseBox a -> CbCloseBox ()
+downcastCbCloseBox obj = objectCast obj
+
+
+downcastCbCollapseBox :: CbCollapseBox a -> CbCollapseBox ()
+downcastCbCollapseBox obj = objectCast obj
+
+
+downcastCbCommonPaneProperties :: CbCommonPaneProperties a -> CbCommonPaneProperties ()
+downcastCbCommonPaneProperties obj = objectCast obj
+
+
+downcastCbCustomizeBarEvent :: CbCustomizeBarEvent a -> CbCustomizeBarEvent ()
+downcastCbCustomizeBarEvent obj = objectCast obj
+
+
+downcastCbCustomizeLayoutEvent :: CbCustomizeLayoutEvent a -> CbCustomizeLayoutEvent ()
+downcastCbCustomizeLayoutEvent obj = objectCast obj
+
+
+downcastCbDimHandlerBase :: CbDimHandlerBase a -> CbDimHandlerBase ()
+downcastCbDimHandlerBase obj = objectCast obj
+
+
+downcastCbDimInfo :: CbDimInfo a -> CbDimInfo ()
+downcastCbDimInfo obj = objectCast obj
+
+
+downcastCbDockBox :: CbDockBox a -> CbDockBox ()
+downcastCbDockBox obj = objectCast obj
+
+
+downcastCbDockPane :: CbDockPane a -> CbDockPane ()
+downcastCbDockPane obj = objectCast obj
+
+
+downcastCbDrawBarDecorEvent :: CbDrawBarDecorEvent a -> CbDrawBarDecorEvent ()
+downcastCbDrawBarDecorEvent obj = objectCast obj
+
+
+downcastCbDrawBarHandlesEvent :: CbDrawBarHandlesEvent a -> CbDrawBarHandlesEvent ()
+downcastCbDrawBarHandlesEvent obj = objectCast obj
+
+
+downcastCbDrawHintRectEvent :: CbDrawHintRectEvent a -> CbDrawHintRectEvent ()
+downcastCbDrawHintRectEvent obj = objectCast obj
+
+
+downcastCbDrawPaneBkGroundEvent :: CbDrawPaneBkGroundEvent a -> CbDrawPaneBkGroundEvent ()
+downcastCbDrawPaneBkGroundEvent obj = objectCast obj
+
+
+downcastCbDrawPaneDecorEvent :: CbDrawPaneDecorEvent a -> CbDrawPaneDecorEvent ()
+downcastCbDrawPaneDecorEvent obj = objectCast obj
+
+
+downcastCbDrawRowBkGroundEvent :: CbDrawRowBkGroundEvent a -> CbDrawRowBkGroundEvent ()
+downcastCbDrawRowBkGroundEvent obj = objectCast obj
+
+
+downcastCbDrawRowDecorEvent :: CbDrawRowDecorEvent a -> CbDrawRowDecorEvent ()
+downcastCbDrawRowDecorEvent obj = objectCast obj
+
+
+downcastCbDrawRowHandlesEvent :: CbDrawRowHandlesEvent a -> CbDrawRowHandlesEvent ()
+downcastCbDrawRowHandlesEvent obj = objectCast obj
+
+
+downcastCbDynToolBarDimHandler :: CbDynToolBarDimHandler a -> CbDynToolBarDimHandler ()
+downcastCbDynToolBarDimHandler obj = objectCast obj
+
+
+downcastCbFinishDrawInAreaEvent :: CbFinishDrawInAreaEvent a -> CbFinishDrawInAreaEvent ()
+downcastCbFinishDrawInAreaEvent obj = objectCast obj
+
+
+downcastCbFloatedBarWindow :: CbFloatedBarWindow a -> CbFloatedBarWindow ()
+downcastCbFloatedBarWindow obj = objectCast obj
+
+
+downcastCbGCUpdatesMgr :: CbGCUpdatesMgr a -> CbGCUpdatesMgr ()
+downcastCbGCUpdatesMgr obj = objectCast obj
+
+
+downcastCbHintAnimationPlugin :: CbHintAnimationPlugin a -> CbHintAnimationPlugin ()
+downcastCbHintAnimationPlugin obj = objectCast obj
+
+
+downcastCbInsertBarEvent :: CbInsertBarEvent a -> CbInsertBarEvent ()
+downcastCbInsertBarEvent obj = objectCast obj
+
+
+downcastCbLayoutRowEvent :: CbLayoutRowEvent a -> CbLayoutRowEvent ()
+downcastCbLayoutRowEvent obj = objectCast obj
+
+
+downcastCbLeftDClickEvent :: CbLeftDClickEvent a -> CbLeftDClickEvent ()
+downcastCbLeftDClickEvent obj = objectCast obj
+
+
+downcastCbLeftDownEvent :: CbLeftDownEvent a -> CbLeftDownEvent ()
+downcastCbLeftDownEvent obj = objectCast obj
+
+
+downcastCbLeftUpEvent :: CbLeftUpEvent a -> CbLeftUpEvent ()
+downcastCbLeftUpEvent obj = objectCast obj
+
+
+downcastCbMiniButton :: CbMiniButton a -> CbMiniButton ()
+downcastCbMiniButton obj = objectCast obj
+
+
+downcastCbMotionEvent :: CbMotionEvent a -> CbMotionEvent ()
+downcastCbMotionEvent obj = objectCast obj
+
+
+downcastCbPaneDrawPlugin :: CbPaneDrawPlugin a -> CbPaneDrawPlugin ()
+downcastCbPaneDrawPlugin obj = objectCast obj
+
+
+downcastCbPluginBase :: CbPluginBase a -> CbPluginBase ()
+downcastCbPluginBase obj = objectCast obj
+
+
+downcastCbPluginEvent :: CbPluginEvent a -> CbPluginEvent ()
+downcastCbPluginEvent obj = objectCast obj
+
+
+downcastCbRemoveBarEvent :: CbRemoveBarEvent a -> CbRemoveBarEvent ()
+downcastCbRemoveBarEvent obj = objectCast obj
+
+
+downcastCbResizeBarEvent :: CbResizeBarEvent a -> CbResizeBarEvent ()
+downcastCbResizeBarEvent obj = objectCast obj
+
+
+downcastCbResizeRowEvent :: CbResizeRowEvent a -> CbResizeRowEvent ()
+downcastCbResizeRowEvent obj = objectCast obj
+
+
+downcastCbRightDownEvent :: CbRightDownEvent a -> CbRightDownEvent ()
+downcastCbRightDownEvent obj = objectCast obj
+
+
+downcastCbRightUpEvent :: CbRightUpEvent a -> CbRightUpEvent ()
+downcastCbRightUpEvent obj = objectCast obj
+
+
+downcastCbRowDragPlugin :: CbRowDragPlugin a -> CbRowDragPlugin ()
+downcastCbRowDragPlugin obj = objectCast obj
+
+
+downcastCbRowInfo :: CbRowInfo a -> CbRowInfo ()
+downcastCbRowInfo obj = objectCast obj
+
+
+downcastCbRowLayoutPlugin :: CbRowLayoutPlugin a -> CbRowLayoutPlugin ()
+downcastCbRowLayoutPlugin obj = objectCast obj
+
+
+downcastCbSimpleCustomizationPlugin :: CbSimpleCustomizationPlugin a -> CbSimpleCustomizationPlugin ()
+downcastCbSimpleCustomizationPlugin obj = objectCast obj
+
+
+downcastCbSimpleUpdatesMgr :: CbSimpleUpdatesMgr a -> CbSimpleUpdatesMgr ()
+downcastCbSimpleUpdatesMgr obj = objectCast obj
+
+
+downcastCbSizeBarWndEvent :: CbSizeBarWndEvent a -> CbSizeBarWndEvent ()
+downcastCbSizeBarWndEvent obj = objectCast obj
+
+
+downcastCbStartBarDraggingEvent :: CbStartBarDraggingEvent a -> CbStartBarDraggingEvent ()
+downcastCbStartBarDraggingEvent obj = objectCast obj
+
+
+downcastCbStartDrawInAreaEvent :: CbStartDrawInAreaEvent a -> CbStartDrawInAreaEvent ()
+downcastCbStartDrawInAreaEvent obj = objectCast obj
+
+
+downcastCbUpdatesManagerBase :: CbUpdatesManagerBase a -> CbUpdatesManagerBase ()
+downcastCbUpdatesManagerBase obj = objectCast obj
+
+
+downcastCheckBox :: CheckBox a -> CheckBox ()
+downcastCheckBox obj = objectCast obj
+
+
+downcastCheckListBox :: CheckListBox a -> CheckListBox ()
+downcastCheckListBox obj = objectCast obj
+
+
+downcastChoice :: Choice a -> Choice ()
+downcastChoice obj = objectCast obj
+
+
+downcastClient :: Client a -> Client ()
+downcastClient obj = objectCast obj
+
+
+downcastClientBase :: ClientBase a -> ClientBase ()
+downcastClientBase obj = objectCast obj
+
+
+downcastClientDC :: ClientDC a -> ClientDC ()
+downcastClientDC obj = objectCast obj
+
+
+downcastClipboard :: Clipboard a -> Clipboard ()
+downcastClipboard obj = objectCast obj
+
+
+downcastCloseEvent :: CloseEvent a -> CloseEvent ()
+downcastCloseEvent obj = objectCast obj
+
+
+downcastClosure :: Closure a -> Closure ()
+downcastClosure obj = objectCast obj
+
+
+downcastColour :: Colour a -> Colour ()
+downcastColour obj = objectCast obj
+
+
+downcastColourData :: ColourData a -> ColourData ()
+downcastColourData obj = objectCast obj
+
+
+downcastColourDatabase :: ColourDatabase a -> ColourDatabase ()
+downcastColourDatabase obj = objectCast obj
+
+
+downcastColourDialog :: ColourDialog a -> ColourDialog ()
+downcastColourDialog obj = objectCast obj
+
+
+downcastColourPickerCtrl :: ColourPickerCtrl a -> ColourPickerCtrl ()
+downcastColourPickerCtrl obj = objectCast obj
+
+
+downcastComboBox :: ComboBox a -> ComboBox ()
+downcastComboBox obj = objectCast obj
+
+
+downcastCommand :: Command a -> Command ()
+downcastCommand obj = objectCast obj
+
+
+downcastCommandEvent :: CommandEvent a -> CommandEvent ()
+downcastCommandEvent obj = objectCast obj
+
+
+downcastCommandProcessor :: CommandProcessor a -> CommandProcessor ()
+downcastCommandProcessor obj = objectCast obj
+
+
+downcastConnection :: Connection a -> Connection ()
+downcastConnection obj = objectCast obj
+
+
+downcastConnectionBase :: ConnectionBase a -> ConnectionBase ()
+downcastConnectionBase obj = objectCast obj
+
+
+downcastContextHelp :: ContextHelp a -> ContextHelp ()
+downcastContextHelp obj = objectCast obj
+
+
+downcastContextHelpButton :: ContextHelpButton a -> ContextHelpButton ()
+downcastContextHelpButton obj = objectCast obj
+
+
+downcastControl :: Control a -> Control ()
+downcastControl obj = objectCast obj
+
+
+downcastCursor :: Cursor a -> Cursor ()
+downcastCursor obj = objectCast obj
+
+
+downcastDatabase :: Database a -> Database ()
+downcastDatabase obj = objectCast obj
+
+
+downcastDateProperty :: DateProperty a -> DateProperty ()
+downcastDateProperty obj = objectCast obj
+
+
+downcastDC :: DC a -> DC ()
+downcastDC obj = objectCast obj
+
+
+downcastDDEClient :: DDEClient a -> DDEClient ()
+downcastDDEClient obj = objectCast obj
+
+
+downcastDDEConnection :: DDEConnection a -> DDEConnection ()
+downcastDDEConnection obj = objectCast obj
+
+
+downcastDDEServer :: DDEServer a -> DDEServer ()
+downcastDDEServer obj = objectCast obj
+
+
+downcastDialog :: Dialog a -> Dialog ()
+downcastDialog obj = objectCast obj
+
+
+downcastDialUpEvent :: DialUpEvent a -> DialUpEvent ()
+downcastDialUpEvent obj = objectCast obj
+
+
+downcastDirDialog :: DirDialog a -> DirDialog ()
+downcastDirDialog obj = objectCast obj
+
+
+downcastDocChildFrame :: DocChildFrame a -> DocChildFrame ()
+downcastDocChildFrame obj = objectCast obj
+
+
+downcastDocManager :: DocManager a -> DocManager ()
+downcastDocManager obj = objectCast obj
+
+
+downcastDocMDIChildFrame :: DocMDIChildFrame a -> DocMDIChildFrame ()
+downcastDocMDIChildFrame obj = objectCast obj
+
+
+downcastDocMDIParentFrame :: DocMDIParentFrame a -> DocMDIParentFrame ()
+downcastDocMDIParentFrame obj = objectCast obj
+
+
+downcastDocParentFrame :: DocParentFrame a -> DocParentFrame ()
+downcastDocParentFrame obj = objectCast obj
+
+
+downcastDocTemplate :: DocTemplate a -> DocTemplate ()
+downcastDocTemplate obj = objectCast obj
+
+
+downcastDocument :: Document a -> Document ()
+downcastDocument obj = objectCast obj
+
+
+downcastDragImage :: DragImage a -> DragImage ()
+downcastDragImage obj = objectCast obj
+
+
+downcastDrawControl :: DrawControl a -> DrawControl ()
+downcastDrawControl obj = objectCast obj
+
+
+downcastDrawWindow :: DrawWindow a -> DrawWindow ()
+downcastDrawWindow obj = objectCast obj
+
+
+downcastDropFilesEvent :: DropFilesEvent a -> DropFilesEvent ()
+downcastDropFilesEvent obj = objectCast obj
+
+
+downcastDynamicSashWindow :: DynamicSashWindow a -> DynamicSashWindow ()
+downcastDynamicSashWindow obj = objectCast obj
+
+
+downcastDynamicToolBar :: DynamicToolBar a -> DynamicToolBar ()
+downcastDynamicToolBar obj = objectCast obj
+
+
+downcastDynToolInfo :: DynToolInfo a -> DynToolInfo ()
+downcastDynToolInfo obj = objectCast obj
+
+
+downcastEditableListBox :: EditableListBox a -> EditableListBox ()
+downcastEditableListBox obj = objectCast obj
+
+
+downcastEncodingConverter :: EncodingConverter a -> EncodingConverter ()
+downcastEncodingConverter obj = objectCast obj
+
+
+downcastEraseEvent :: EraseEvent a -> EraseEvent ()
+downcastEraseEvent obj = objectCast obj
+
+
+downcastEvent :: Event a -> Event ()
+downcastEvent obj = objectCast obj
+
+
+downcastEvtHandler :: EvtHandler a -> EvtHandler ()
+downcastEvtHandler obj = objectCast obj
+
+
+downcastExprDatabase :: ExprDatabase a -> ExprDatabase ()
+downcastExprDatabase obj = objectCast obj
+
+
+downcastFileDialog :: FileDialog a -> FileDialog ()
+downcastFileDialog obj = objectCast obj
+
+
+downcastFileHistory :: FileHistory a -> FileHistory ()
+downcastFileHistory obj = objectCast obj
+
+
+downcastFileProperty :: FileProperty a -> FileProperty ()
+downcastFileProperty obj = objectCast obj
+
+
+downcastFileSystem :: FileSystem a -> FileSystem ()
+downcastFileSystem obj = objectCast obj
+
+
+downcastFileSystemHandler :: FileSystemHandler a -> FileSystemHandler ()
+downcastFileSystemHandler obj = objectCast obj
+
+
+downcastFindDialogEvent :: FindDialogEvent a -> FindDialogEvent ()
+downcastFindDialogEvent obj = objectCast obj
+
+
+downcastFindReplaceData :: FindReplaceData a -> FindReplaceData ()
+downcastFindReplaceData obj = objectCast obj
+
+
+downcastFindReplaceDialog :: FindReplaceDialog a -> FindReplaceDialog ()
+downcastFindReplaceDialog obj = objectCast obj
+
+
+downcastFlexGridSizer :: FlexGridSizer a -> FlexGridSizer ()
+downcastFlexGridSizer obj = objectCast obj
+
+
+downcastFloatProperty :: FloatProperty a -> FloatProperty ()
+downcastFloatProperty obj = objectCast obj
+
+
+downcastFocusEvent :: FocusEvent a -> FocusEvent ()
+downcastFocusEvent obj = objectCast obj
+
+
+downcastFont :: Font a -> Font ()
+downcastFont obj = objectCast obj
+
+
+downcastFontData :: FontData a -> FontData ()
+downcastFontData obj = objectCast obj
+
+
+downcastFontDialog :: FontDialog a -> FontDialog ()
+downcastFontDialog obj = objectCast obj
+
+
+downcastFontList :: FontList a -> FontList ()
+downcastFontList obj = objectCast obj
+
+
+downcastFrame :: Frame a -> Frame ()
+downcastFrame obj = objectCast obj
+
+
+downcastFrameLayout :: FrameLayout a -> FrameLayout ()
+downcastFrameLayout obj = objectCast obj
+
+
+downcastFSFile :: FSFile a -> FSFile ()
+downcastFSFile obj = objectCast obj
+
+
+downcastFTP :: FTP a -> FTP ()
+downcastFTP obj = objectCast obj
+
+
+downcastGauge :: Gauge a -> Gauge ()
+downcastGauge obj = objectCast obj
+
+
+downcastGauge95 :: Gauge95 a -> Gauge95 ()
+downcastGauge95 obj = objectCast obj
+
+
+downcastGaugeMSW :: GaugeMSW a -> GaugeMSW ()
+downcastGaugeMSW obj = objectCast obj
+
+
+downcastGCDC :: GCDC a -> GCDC ()
+downcastGCDC obj = objectCast obj
+
+
+downcastGDIObject :: GDIObject a -> GDIObject ()
+downcastGDIObject obj = objectCast obj
+
+
+downcastGenericDirCtrl :: GenericDirCtrl a -> GenericDirCtrl ()
+downcastGenericDirCtrl obj = objectCast obj
+
+
+downcastGenericDragImage :: GenericDragImage a -> GenericDragImage ()
+downcastGenericDragImage obj = objectCast obj
+
+
+downcastGenericValidator :: GenericValidator a -> GenericValidator ()
+downcastGenericValidator obj = objectCast obj
+
+
+downcastGLCanvas :: GLCanvas a -> GLCanvas ()
+downcastGLCanvas obj = objectCast obj
+
+
+downcastGLContext :: GLContext a -> GLContext ()
+downcastGLContext obj = objectCast obj
+
+
+downcastGraphicsBrush :: GraphicsBrush a -> GraphicsBrush ()
+downcastGraphicsBrush obj = objectCast obj
+
+
+downcastGraphicsContext :: GraphicsContext a -> GraphicsContext ()
+downcastGraphicsContext obj = objectCast obj
+
+
+downcastGraphicsFont :: GraphicsFont a -> GraphicsFont ()
+downcastGraphicsFont obj = objectCast obj
+
+
+downcastGraphicsMatrix :: GraphicsMatrix a -> GraphicsMatrix ()
+downcastGraphicsMatrix obj = objectCast obj
+
+
+downcastGraphicsObject :: GraphicsObject a -> GraphicsObject ()
+downcastGraphicsObject obj = objectCast obj
+
+
+downcastGraphicsPath :: GraphicsPath a -> GraphicsPath ()
+downcastGraphicsPath obj = objectCast obj
+
+
+downcastGraphicsPen :: GraphicsPen a -> GraphicsPen ()
+downcastGraphicsPen obj = objectCast obj
+
+
+downcastGraphicsRenderer :: GraphicsRenderer a -> GraphicsRenderer ()
+downcastGraphicsRenderer obj = objectCast obj
+
+
+downcastGrid :: Grid a -> Grid ()
+downcastGrid obj = objectCast obj
+
+
+downcastGridEditorCreatedEvent :: GridEditorCreatedEvent a -> GridEditorCreatedEvent ()
+downcastGridEditorCreatedEvent obj = objectCast obj
+
+
+downcastGridEvent :: GridEvent a -> GridEvent ()
+downcastGridEvent obj = objectCast obj
+
+
+downcastGridRangeSelectEvent :: GridRangeSelectEvent a -> GridRangeSelectEvent ()
+downcastGridRangeSelectEvent obj = objectCast obj
+
+
+downcastGridSizeEvent :: GridSizeEvent a -> GridSizeEvent ()
+downcastGridSizeEvent obj = objectCast obj
+
+
+downcastGridSizer :: GridSizer a -> GridSizer ()
+downcastGridSizer obj = objectCast obj
+
+
+downcastGridTableBase :: GridTableBase a -> GridTableBase ()
+downcastGridTableBase obj = objectCast obj
+
+
+downcastHelpController :: HelpController a -> HelpController ()
+downcastHelpController obj = objectCast obj
+
+
+downcastHelpControllerBase :: HelpControllerBase a -> HelpControllerBase ()
+downcastHelpControllerBase obj = objectCast obj
+
+
+downcastHelpEvent :: HelpEvent a -> HelpEvent ()
+downcastHelpEvent obj = objectCast obj
+
+
+downcastHtmlCell :: HtmlCell a -> HtmlCell ()
+downcastHtmlCell obj = objectCast obj
+
+
+downcastHtmlColourCell :: HtmlColourCell a -> HtmlColourCell ()
+downcastHtmlColourCell obj = objectCast obj
+
+
+downcastHtmlContainerCell :: HtmlContainerCell a -> HtmlContainerCell ()
+downcastHtmlContainerCell obj = objectCast obj
+
+
+downcastHtmlDCRenderer :: HtmlDCRenderer a -> HtmlDCRenderer ()
+downcastHtmlDCRenderer obj = objectCast obj
+
+
+downcastHtmlEasyPrinting :: HtmlEasyPrinting a -> HtmlEasyPrinting ()
+downcastHtmlEasyPrinting obj = objectCast obj
+
+
+downcastHtmlFilter :: HtmlFilter a -> HtmlFilter ()
+downcastHtmlFilter obj = objectCast obj
+
+
+downcastHtmlHelpController :: HtmlHelpController a -> HtmlHelpController ()
+downcastHtmlHelpController obj = objectCast obj
+
+
+downcastHtmlHelpData :: HtmlHelpData a -> HtmlHelpData ()
+downcastHtmlHelpData obj = objectCast obj
+
+
+downcastHtmlHelpFrame :: HtmlHelpFrame a -> HtmlHelpFrame ()
+downcastHtmlHelpFrame obj = objectCast obj
+
+
+downcastHtmlLinkInfo :: HtmlLinkInfo a -> HtmlLinkInfo ()
+downcastHtmlLinkInfo obj = objectCast obj
+
+
+downcastHtmlParser :: HtmlParser a -> HtmlParser ()
+downcastHtmlParser obj = objectCast obj
+
+
+downcastHtmlPrintout :: HtmlPrintout a -> HtmlPrintout ()
+downcastHtmlPrintout obj = objectCast obj
+
+
+downcastHtmlTag :: HtmlTag a -> HtmlTag ()
+downcastHtmlTag obj = objectCast obj
+
+
+downcastHtmlTagHandler :: HtmlTagHandler a -> HtmlTagHandler ()
+downcastHtmlTagHandler obj = objectCast obj
+
+
+downcastHtmlTagsModule :: HtmlTagsModule a -> HtmlTagsModule ()
+downcastHtmlTagsModule obj = objectCast obj
+
+
+downcastHtmlWidgetCell :: HtmlWidgetCell a -> HtmlWidgetCell ()
+downcastHtmlWidgetCell obj = objectCast obj
+
+
+downcastHtmlWindow :: HtmlWindow a -> HtmlWindow ()
+downcastHtmlWindow obj = objectCast obj
+
+
+downcastHtmlWinParser :: HtmlWinParser a -> HtmlWinParser ()
+downcastHtmlWinParser obj = objectCast obj
+
+
+downcastHtmlWinTagHandler :: HtmlWinTagHandler a -> HtmlWinTagHandler ()
+downcastHtmlWinTagHandler obj = objectCast obj
+
+
+downcastHTTP :: HTTP a -> HTTP ()
+downcastHTTP obj = objectCast obj
+
+
+downcastHyperlinkCtrl :: HyperlinkCtrl a -> HyperlinkCtrl ()
+downcastHyperlinkCtrl obj = objectCast obj
+
+
+downcastIcon :: Icon a -> Icon ()
+downcastIcon obj = objectCast obj
+
+
+downcastIconizeEvent :: IconizeEvent a -> IconizeEvent ()
+downcastIconizeEvent obj = objectCast obj
+
+
+downcastIdleEvent :: IdleEvent a -> IdleEvent ()
+downcastIdleEvent obj = objectCast obj
+
+
+downcastImage :: Image a -> Image ()
+downcastImage obj = objectCast obj
+
+
+downcastImageHandler :: ImageHandler a -> ImageHandler ()
+downcastImageHandler obj = objectCast obj
+
+
+downcastImageList :: ImageList a -> ImageList ()
+downcastImageList obj = objectCast obj
+
+
+downcastIndividualLayoutConstraint :: IndividualLayoutConstraint a -> IndividualLayoutConstraint ()
+downcastIndividualLayoutConstraint obj = objectCast obj
+
+
+downcastInitDialogEvent :: InitDialogEvent a -> InitDialogEvent ()
+downcastInitDialogEvent obj = objectCast obj
+
+
+downcastInputSinkEvent :: InputSinkEvent a -> InputSinkEvent ()
+downcastInputSinkEvent obj = objectCast obj
+
+
+downcastIntProperty :: IntProperty a -> IntProperty ()
+downcastIntProperty obj = objectCast obj
+
+
+downcastIPV4address :: IPV4address a -> IPV4address ()
+downcastIPV4address obj = objectCast obj
+
+
+downcastJoystick :: Joystick a -> Joystick ()
+downcastJoystick obj = objectCast obj
+
+
+downcastJoystickEvent :: JoystickEvent a -> JoystickEvent ()
+downcastJoystickEvent obj = objectCast obj
+
+
+downcastKeyEvent :: KeyEvent a -> KeyEvent ()
+downcastKeyEvent obj = objectCast obj
+
+
+downcastLayoutAlgorithm :: LayoutAlgorithm a -> LayoutAlgorithm ()
+downcastLayoutAlgorithm obj = objectCast obj
+
+
+downcastLayoutConstraints :: LayoutConstraints a -> LayoutConstraints ()
+downcastLayoutConstraints obj = objectCast obj
+
+
+downcastLEDNumberCtrl :: LEDNumberCtrl a -> LEDNumberCtrl ()
+downcastLEDNumberCtrl obj = objectCast obj
+
+
+downcastList :: List a -> List ()
+downcastList obj = objectCast obj
+
+
+downcastListBox :: ListBox a -> ListBox ()
+downcastListBox obj = objectCast obj
+
+
+downcastListCtrl :: ListCtrl a -> ListCtrl ()
+downcastListCtrl obj = objectCast obj
+
+
+downcastListEvent :: ListEvent a -> ListEvent ()
+downcastListEvent obj = objectCast obj
+
+
+downcastListItem :: ListItem a -> ListItem ()
+downcastListItem obj = objectCast obj
+
+
+downcastMask :: Mask a -> Mask ()
+downcastMask obj = objectCast obj
+
+
+downcastMaximizeEvent :: MaximizeEvent a -> MaximizeEvent ()
+downcastMaximizeEvent obj = objectCast obj
+
+
+downcastMDIChildFrame :: MDIChildFrame a -> MDIChildFrame ()
+downcastMDIChildFrame obj = objectCast obj
+
+
+downcastMDIClientWindow :: MDIClientWindow a -> MDIClientWindow ()
+downcastMDIClientWindow obj = objectCast obj
+
+
+downcastMDIParentFrame :: MDIParentFrame a -> MDIParentFrame ()
+downcastMDIParentFrame obj = objectCast obj
+
+
+downcastMediaCtrl :: MediaCtrl a -> MediaCtrl ()
+downcastMediaCtrl obj = objectCast obj
+
+
+downcastMediaEvent :: MediaEvent a -> MediaEvent ()
+downcastMediaEvent obj = objectCast obj
+
+
+downcastMemoryDC :: MemoryDC a -> MemoryDC ()
+downcastMemoryDC obj = objectCast obj
+
+
+downcastMemoryFSHandler :: MemoryFSHandler a -> MemoryFSHandler ()
+downcastMemoryFSHandler obj = objectCast obj
+
+
+downcastMenu :: Menu a -> Menu ()
+downcastMenu obj = objectCast obj
+
+
+downcastMenuBar :: MenuBar a -> MenuBar ()
+downcastMenuBar obj = objectCast obj
+
+
+downcastMenuEvent :: MenuEvent a -> MenuEvent ()
+downcastMenuEvent obj = objectCast obj
+
+
+downcastMenuItem :: MenuItem a -> MenuItem ()
+downcastMenuItem obj = objectCast obj
+
+
+downcastMessageDialog :: MessageDialog a -> MessageDialog ()
+downcastMessageDialog obj = objectCast obj
+
+
+downcastMetafile :: Metafile a -> Metafile ()
+downcastMetafile obj = objectCast obj
+
+
+downcastMetafileDC :: MetafileDC a -> MetafileDC ()
+downcastMetafileDC obj = objectCast obj
+
+
+downcastMiniFrame :: MiniFrame a -> MiniFrame ()
+downcastMiniFrame obj = objectCast obj
+
+
+downcastMirrorDC :: MirrorDC a -> MirrorDC ()
+downcastMirrorDC obj = objectCast obj
+
+
+downcastModule :: Module a -> Module ()
+downcastModule obj = objectCast obj
+
+
+downcastMouseCaptureChangedEvent :: MouseCaptureChangedEvent a -> MouseCaptureChangedEvent ()
+downcastMouseCaptureChangedEvent obj = objectCast obj
+
+
+downcastMouseEvent :: MouseEvent a -> MouseEvent ()
+downcastMouseEvent obj = objectCast obj
+
+
+downcastMoveEvent :: MoveEvent a -> MoveEvent ()
+downcastMoveEvent obj = objectCast obj
+
+
+downcastMultiCellCanvas :: MultiCellCanvas a -> MultiCellCanvas ()
+downcastMultiCellCanvas obj = objectCast obj
+
+
+downcastMultiCellItemHandle :: MultiCellItemHandle a -> MultiCellItemHandle ()
+downcastMultiCellItemHandle obj = objectCast obj
+
+
+downcastMultiCellSizer :: MultiCellSizer a -> MultiCellSizer ()
+downcastMultiCellSizer obj = objectCast obj
+
+
+downcastNavigationKeyEvent :: NavigationKeyEvent a -> NavigationKeyEvent ()
+downcastNavigationKeyEvent obj = objectCast obj
+
+
+downcastNewBitmapButton :: NewBitmapButton a -> NewBitmapButton ()
+downcastNewBitmapButton obj = objectCast obj
+
+
+downcastNotebook :: Notebook a -> Notebook ()
+downcastNotebook obj = objectCast obj
+
+
+downcastNotebookEvent :: NotebookEvent a -> NotebookEvent ()
+downcastNotebookEvent obj = objectCast obj
+
+
+downcastNotifyEvent :: NotifyEvent a -> NotifyEvent ()
+downcastNotifyEvent obj = objectCast obj
+
+
+downcastPageSetupDialog :: PageSetupDialog a -> PageSetupDialog ()
+downcastPageSetupDialog obj = objectCast obj
+
+
+downcastPageSetupDialogData :: PageSetupDialogData a -> PageSetupDialogData ()
+downcastPageSetupDialogData obj = objectCast obj
+
+
+downcastPaintDC :: PaintDC a -> PaintDC ()
+downcastPaintDC obj = objectCast obj
+
+
+downcastPaintEvent :: PaintEvent a -> PaintEvent ()
+downcastPaintEvent obj = objectCast obj
+
+
+downcastPalette :: Palette a -> Palette ()
+downcastPalette obj = objectCast obj
+
+
+downcastPaletteChangedEvent :: PaletteChangedEvent a -> PaletteChangedEvent ()
+downcastPaletteChangedEvent obj = objectCast obj
+
+
+downcastPanel :: Panel a -> Panel ()
+downcastPanel obj = objectCast obj
+
+
+downcastPathList :: PathList a -> PathList ()
+downcastPathList obj = objectCast obj
+
+
+downcastPen :: Pen a -> Pen ()
+downcastPen obj = objectCast obj
+
+
+downcastPenList :: PenList a -> PenList ()
+downcastPenList obj = objectCast obj
+
+
+downcastPGProperty :: PGProperty a -> PGProperty ()
+downcastPGProperty obj = objectCast obj
+
+
+downcastPickerBase :: PickerBase a -> PickerBase ()
+downcastPickerBase obj = objectCast obj
+
+
+downcastPlotCurve :: PlotCurve a -> PlotCurve ()
+downcastPlotCurve obj = objectCast obj
+
+
+downcastPlotEvent :: PlotEvent a -> PlotEvent ()
+downcastPlotEvent obj = objectCast obj
+
+
+downcastPlotOnOffCurve :: PlotOnOffCurve a -> PlotOnOffCurve ()
+downcastPlotOnOffCurve obj = objectCast obj
+
+
+downcastPlotWindow :: PlotWindow a -> PlotWindow ()
+downcastPlotWindow obj = objectCast obj
+
+
+downcastPopupTransientWindow :: PopupTransientWindow a -> PopupTransientWindow ()
+downcastPopupTransientWindow obj = objectCast obj
+
+
+downcastPopupWindow :: PopupWindow a -> PopupWindow ()
+downcastPopupWindow obj = objectCast obj
+
+
+downcastPostScriptDC :: PostScriptDC a -> PostScriptDC ()
+downcastPostScriptDC obj = objectCast obj
+
+
+downcastPostScriptPrintNativeData :: PostScriptPrintNativeData a -> PostScriptPrintNativeData ()
+downcastPostScriptPrintNativeData obj = objectCast obj
+
+
+downcastPreviewCanvas :: PreviewCanvas a -> PreviewCanvas ()
+downcastPreviewCanvas obj = objectCast obj
+
+
+downcastPreviewControlBar :: PreviewControlBar a -> PreviewControlBar ()
+downcastPreviewControlBar obj = objectCast obj
+
+
+downcastPreviewFrame :: PreviewFrame a -> PreviewFrame ()
+downcastPreviewFrame obj = objectCast obj
+
+
+downcastPrintData :: PrintData a -> PrintData ()
+downcastPrintData obj = objectCast obj
+
+
+downcastPrintDialog :: PrintDialog a -> PrintDialog ()
+downcastPrintDialog obj = objectCast obj
+
+
+downcastPrintDialogData :: PrintDialogData a -> PrintDialogData ()
+downcastPrintDialogData obj = objectCast obj
+
+
+downcastPrinter :: Printer a -> Printer ()
+downcastPrinter obj = objectCast obj
+
+
+downcastPrinterDC :: PrinterDC a -> PrinterDC ()
+downcastPrinterDC obj = objectCast obj
+
+
+downcastPrintout :: Printout a -> Printout ()
+downcastPrintout obj = objectCast obj
+
+
+downcastPrintPreview :: PrintPreview a -> PrintPreview ()
+downcastPrintPreview obj = objectCast obj
+
+
+downcastProcess :: Process a -> Process ()
+downcastProcess obj = objectCast obj
+
+
+downcastProcessEvent :: ProcessEvent a -> ProcessEvent ()
+downcastProcessEvent obj = objectCast obj
+
+
+downcastProgressDialog :: ProgressDialog a -> ProgressDialog ()
+downcastProgressDialog obj = objectCast obj
+
+
+downcastPropertyCategory :: PropertyCategory a -> PropertyCategory ()
+downcastPropertyCategory obj = objectCast obj
+
+
+downcastPropertyGrid :: PropertyGrid a -> PropertyGrid ()
+downcastPropertyGrid obj = objectCast obj
+
+
+downcastPropertyGridEvent :: PropertyGridEvent a -> PropertyGridEvent ()
+downcastPropertyGridEvent obj = objectCast obj
+
+
+downcastProtocol :: Protocol a -> Protocol ()
+downcastProtocol obj = objectCast obj
+
+
+downcastQuantize :: Quantize a -> Quantize ()
+downcastQuantize obj = objectCast obj
+
+
+downcastQueryCol :: QueryCol a -> QueryCol ()
+downcastQueryCol obj = objectCast obj
+
+
+downcastQueryField :: QueryField a -> QueryField ()
+downcastQueryField obj = objectCast obj
+
+
+downcastQueryLayoutInfoEvent :: QueryLayoutInfoEvent a -> QueryLayoutInfoEvent ()
+downcastQueryLayoutInfoEvent obj = objectCast obj
+
+
+downcastQueryNewPaletteEvent :: QueryNewPaletteEvent a -> QueryNewPaletteEvent ()
+downcastQueryNewPaletteEvent obj = objectCast obj
+
+
+downcastRadioBox :: RadioBox a -> RadioBox ()
+downcastRadioBox obj = objectCast obj
+
+
+downcastRadioButton :: RadioButton a -> RadioButton ()
+downcastRadioButton obj = objectCast obj
+
+
+downcastRecordSet :: RecordSet a -> RecordSet ()
+downcastRecordSet obj = objectCast obj
+
+
+downcastRegion :: Region a -> Region ()
+downcastRegion obj = objectCast obj
+
+
+downcastRegionIterator :: RegionIterator a -> RegionIterator ()
+downcastRegionIterator obj = objectCast obj
+
+
+downcastRemotelyScrolledTreeCtrl :: RemotelyScrolledTreeCtrl a -> RemotelyScrolledTreeCtrl ()
+downcastRemotelyScrolledTreeCtrl obj = objectCast obj
+
+
+downcastSashEvent :: SashEvent a -> SashEvent ()
+downcastSashEvent obj = objectCast obj
+
+
+downcastSashLayoutWindow :: SashLayoutWindow a -> SashLayoutWindow ()
+downcastSashLayoutWindow obj = objectCast obj
+
+
+downcastSashWindow :: SashWindow a -> SashWindow ()
+downcastSashWindow obj = objectCast obj
+
+
+downcastScreenDC :: ScreenDC a -> ScreenDC ()
+downcastScreenDC obj = objectCast obj
+
+
+downcastScrollBar :: ScrollBar a -> ScrollBar ()
+downcastScrollBar obj = objectCast obj
+
+
+downcastScrolledWindow :: ScrolledWindow a -> ScrolledWindow ()
+downcastScrolledWindow obj = objectCast obj
+
+
+downcastScrollEvent :: ScrollEvent a -> ScrollEvent ()
+downcastScrollEvent obj = objectCast obj
+
+
+downcastScrollWinEvent :: ScrollWinEvent a -> ScrollWinEvent ()
+downcastScrollWinEvent obj = objectCast obj
+
+
+downcastServer :: Server a -> Server ()
+downcastServer obj = objectCast obj
+
+
+downcastServerBase :: ServerBase a -> ServerBase ()
+downcastServerBase obj = objectCast obj
+
+
+downcastSetCursorEvent :: SetCursorEvent a -> SetCursorEvent ()
+downcastSetCursorEvent obj = objectCast obj
+
+
+downcastShowEvent :: ShowEvent a -> ShowEvent ()
+downcastShowEvent obj = objectCast obj
+
+
+downcastSingleChoiceDialog :: SingleChoiceDialog a -> SingleChoiceDialog ()
+downcastSingleChoiceDialog obj = objectCast obj
+
+
+downcastSizeEvent :: SizeEvent a -> SizeEvent ()
+downcastSizeEvent obj = objectCast obj
+
+
+downcastSizer :: Sizer a -> Sizer ()
+downcastSizer obj = objectCast obj
+
+
+downcastSizerItem :: SizerItem a -> SizerItem ()
+downcastSizerItem obj = objectCast obj
+
+
+downcastSlider :: Slider a -> Slider ()
+downcastSlider obj = objectCast obj
+
+
+downcastSlider95 :: Slider95 a -> Slider95 ()
+downcastSlider95 obj = objectCast obj
+
+
+downcastSliderMSW :: SliderMSW a -> SliderMSW ()
+downcastSliderMSW obj = objectCast obj
+
+
+downcastSockAddress :: SockAddress a -> SockAddress ()
+downcastSockAddress obj = objectCast obj
+
+
+downcastSocketBase :: SocketBase a -> SocketBase ()
+downcastSocketBase obj = objectCast obj
+
+
+downcastSocketClient :: SocketClient a -> SocketClient ()
+downcastSocketClient obj = objectCast obj
+
+
+downcastSocketEvent :: SocketEvent a -> SocketEvent ()
+downcastSocketEvent obj = objectCast obj
+
+
+downcastSocketServer :: SocketServer a -> SocketServer ()
+downcastSocketServer obj = objectCast obj
+
+
+downcastSound :: Sound a -> Sound ()
+downcastSound obj = objectCast obj
+
+
+downcastSpinButton :: SpinButton a -> SpinButton ()
+downcastSpinButton obj = objectCast obj
+
+
+downcastSpinCtrl :: SpinCtrl a -> SpinCtrl ()
+downcastSpinCtrl obj = objectCast obj
+
+
+downcastSpinEvent :: SpinEvent a -> SpinEvent ()
+downcastSpinEvent obj = objectCast obj
+
+
+downcastSplashScreen :: SplashScreen a -> SplashScreen ()
+downcastSplashScreen obj = objectCast obj
+
+
+downcastSplitterEvent :: SplitterEvent a -> SplitterEvent ()
+downcastSplitterEvent obj = objectCast obj
+
+
+downcastSplitterScrolledWindow :: SplitterScrolledWindow a -> SplitterScrolledWindow ()
+downcastSplitterScrolledWindow obj = objectCast obj
+
+
+downcastSplitterWindow :: SplitterWindow a -> SplitterWindow ()
+downcastSplitterWindow obj = objectCast obj
+
+
+downcastStaticBitmap :: StaticBitmap a -> StaticBitmap ()
+downcastStaticBitmap obj = objectCast obj
+
+
+downcastStaticBox :: StaticBox a -> StaticBox ()
+downcastStaticBox obj = objectCast obj
+
+
+downcastStaticBoxSizer :: StaticBoxSizer a -> StaticBoxSizer ()
+downcastStaticBoxSizer obj = objectCast obj
+
+
+downcastStaticLine :: StaticLine a -> StaticLine ()
+downcastStaticLine obj = objectCast obj
+
+
+downcastStaticText :: StaticText a -> StaticText ()
+downcastStaticText obj = objectCast obj
+
+
+downcastStatusBar :: StatusBar a -> StatusBar ()
+downcastStatusBar obj = objectCast obj
+
+
+downcastStringList :: StringList a -> StringList ()
+downcastStringList obj = objectCast obj
+
+
+downcastStringProperty :: StringProperty a -> StringProperty ()
+downcastStringProperty obj = objectCast obj
+
+
+downcastStringTokenizer :: StringTokenizer a -> StringTokenizer ()
+downcastStringTokenizer obj = objectCast obj
+
+
+downcastStyledTextCtrl :: StyledTextCtrl a -> StyledTextCtrl ()
+downcastStyledTextCtrl obj = objectCast obj
+
+
+downcastStyledTextEvent :: StyledTextEvent a -> StyledTextEvent ()
+downcastStyledTextEvent obj = objectCast obj
+
+
+downcastSVGFileDC :: SVGFileDC a -> SVGFileDC ()
+downcastSVGFileDC obj = objectCast obj
+
+
+downcastSysColourChangedEvent :: SysColourChangedEvent a -> SysColourChangedEvent ()
+downcastSysColourChangedEvent obj = objectCast obj
+
+
+downcastSystemOptions :: SystemOptions a -> SystemOptions ()
+downcastSystemOptions obj = objectCast obj
+
+
+downcastSystemSettings :: SystemSettings a -> SystemSettings ()
+downcastSystemSettings obj = objectCast obj
+
+
+downcastTabCtrl :: TabCtrl a -> TabCtrl ()
+downcastTabCtrl obj = objectCast obj
+
+
+downcastTabEvent :: TabEvent a -> TabEvent ()
+downcastTabEvent obj = objectCast obj
+
+
+downcastTablesInUse :: TablesInUse a -> TablesInUse ()
+downcastTablesInUse obj = objectCast obj
+
+
+downcastTaskBarIcon :: TaskBarIcon a -> TaskBarIcon ()
+downcastTaskBarIcon obj = objectCast obj
+
+
+downcastTextCtrl :: TextCtrl a -> TextCtrl ()
+downcastTextCtrl obj = objectCast obj
+
+
+downcastTextEntryDialog :: TextEntryDialog a -> TextEntryDialog ()
+downcastTextEntryDialog obj = objectCast obj
+
+
+downcastTextValidator :: TextValidator a -> TextValidator ()
+downcastTextValidator obj = objectCast obj
+
+
+downcastThinSplitterWindow :: ThinSplitterWindow a -> ThinSplitterWindow ()
+downcastThinSplitterWindow obj = objectCast obj
+
+
+downcastTime :: Time a -> Time ()
+downcastTime obj = objectCast obj
+
+
+downcastTimer :: Timer a -> Timer ()
+downcastTimer obj = objectCast obj
+
+
+downcastTimerBase :: TimerBase a -> TimerBase ()
+downcastTimerBase obj = objectCast obj
+
+
+downcastTimerEvent :: TimerEvent a -> TimerEvent ()
+downcastTimerEvent obj = objectCast obj
+
+
+downcastTimerEx :: TimerEx a -> TimerEx ()
+downcastTimerEx obj = objectCast obj
+
+
+downcastTipWindow :: TipWindow a -> TipWindow ()
+downcastTipWindow obj = objectCast obj
+
+
+downcastToggleButton :: ToggleButton a -> ToggleButton ()
+downcastToggleButton obj = objectCast obj
+
+
+downcastToolBar :: ToolBar a -> ToolBar ()
+downcastToolBar obj = objectCast obj
+
+
+downcastToolBarBase :: ToolBarBase a -> ToolBarBase ()
+downcastToolBarBase obj = objectCast obj
+
+
+downcastToolLayoutItem :: ToolLayoutItem a -> ToolLayoutItem ()
+downcastToolLayoutItem obj = objectCast obj
+
+
+downcastToolTip :: ToolTip a -> ToolTip ()
+downcastToolTip obj = objectCast obj
+
+
+downcastToolWindow :: ToolWindow a -> ToolWindow ()
+downcastToolWindow obj = objectCast obj
+
+
+downcastTopLevelWindow :: TopLevelWindow a -> TopLevelWindow ()
+downcastTopLevelWindow obj = objectCast obj
+
+
+downcastTreeCompanionWindow :: TreeCompanionWindow a -> TreeCompanionWindow ()
+downcastTreeCompanionWindow obj = objectCast obj
+
+
+downcastTreeCtrl :: TreeCtrl a -> TreeCtrl ()
+downcastTreeCtrl obj = objectCast obj
+
+
+downcastTreeEvent :: TreeEvent a -> TreeEvent ()
+downcastTreeEvent obj = objectCast obj
+
+
+downcastTreeLayout :: TreeLayout a -> TreeLayout ()
+downcastTreeLayout obj = objectCast obj
+
+
+downcastTreeLayoutStored :: TreeLayoutStored a -> TreeLayoutStored ()
+downcastTreeLayoutStored obj = objectCast obj
+
+
+downcastUpdateUIEvent :: UpdateUIEvent a -> UpdateUIEvent ()
+downcastUpdateUIEvent obj = objectCast obj
+
+
+downcastURL :: URL a -> URL ()
+downcastURL obj = objectCast obj
+
+
+downcastValidator :: Validator a -> Validator ()
+downcastValidator obj = objectCast obj
+
+
+downcastVariant :: Variant a -> Variant ()
+downcastVariant obj = objectCast obj
+
+
+downcastVariantData :: VariantData a -> VariantData ()
+downcastVariantData obj = objectCast obj
+
+
+downcastView :: View a -> View ()
+downcastView obj = objectCast obj
+
+
+downcastWindow :: Window a -> Window ()
+downcastWindow obj = objectCast obj
+
+
+downcastWindowCreateEvent :: WindowCreateEvent a -> WindowCreateEvent ()
+downcastWindowCreateEvent obj = objectCast obj
+
+
+downcastWindowDC :: WindowDC a -> WindowDC ()
+downcastWindowDC obj = objectCast obj
+
+
+downcastWindowDestroyEvent :: WindowDestroyEvent a -> WindowDestroyEvent ()
+downcastWindowDestroyEvent obj = objectCast obj
+
+
+downcastWizard :: Wizard a -> Wizard ()
+downcastWizard obj = objectCast obj
+
+
+downcastWizardEvent :: WizardEvent a -> WizardEvent ()
+downcastWizardEvent obj = objectCast obj
+
+
+downcastWizardPage :: WizardPage a -> WizardPage ()
+downcastWizardPage obj = objectCast obj
+
+
+downcastWizardPageSimple :: WizardPageSimple a -> WizardPageSimple ()
+downcastWizardPageSimple obj = objectCast obj
+
+
+downcastWXCApp :: WXCApp a -> WXCApp ()
+downcastWXCApp obj = objectCast obj
+
+
+downcastWXCArtProv :: WXCArtProv a -> WXCArtProv ()
+downcastWXCArtProv obj = objectCast obj
+
+
+downcastWXCClient :: WXCClient a -> WXCClient ()
+downcastWXCClient obj = objectCast obj
+
+
+downcastWXCCommand :: WXCCommand a -> WXCCommand ()
+downcastWXCCommand obj = objectCast obj
+
+
+downcastWXCConnection :: WXCConnection a -> WXCConnection ()
+downcastWXCConnection obj = objectCast obj
+
+
+downcastWXCGridTable :: WXCGridTable a -> WXCGridTable ()
+downcastWXCGridTable obj = objectCast obj
+
+
+downcastWXCHtmlEvent :: WXCHtmlEvent a -> WXCHtmlEvent ()
+downcastWXCHtmlEvent obj = objectCast obj
+
+
+downcastWXCHtmlWindow :: WXCHtmlWindow a -> WXCHtmlWindow ()
+downcastWXCHtmlWindow obj = objectCast obj
+
+
+downcastWXCPlotCurve :: WXCPlotCurve a -> WXCPlotCurve ()
+downcastWXCPlotCurve obj = objectCast obj
+
+
+downcastWXCPreviewControlBar :: WXCPreviewControlBar a -> WXCPreviewControlBar ()
+downcastWXCPreviewControlBar obj = objectCast obj
+
+
+downcastWXCPreviewFrame :: WXCPreviewFrame a -> WXCPreviewFrame ()
+downcastWXCPreviewFrame obj = objectCast obj
+
+
+downcastWXCPrintEvent :: WXCPrintEvent a -> WXCPrintEvent ()
+downcastWXCPrintEvent obj = objectCast obj
+
+
+downcastWXCPrintout :: WXCPrintout a -> WXCPrintout ()
+downcastWXCPrintout obj = objectCast obj
+
+
+downcastWXCPrintoutHandler :: WXCPrintoutHandler a -> WXCPrintoutHandler ()
+downcastWXCPrintoutHandler obj = objectCast obj
+
+
+downcastWXCServer :: WXCServer a -> WXCServer ()
+downcastWXCServer obj = objectCast obj
+
+
+downcastWXCTextValidator :: WXCTextValidator a -> WXCTextValidator ()
+downcastWXCTextValidator obj = objectCast obj
+
+
+downcastWxObject :: WxObject a -> WxObject ()
+downcastWxObject obj = objectCast obj
+
+
+downcastXmlResource :: XmlResource a -> XmlResource ()
+downcastXmlResource obj = objectCast obj
+
+
+downcastXmlResourceHandler :: XmlResourceHandler a -> XmlResourceHandler ()
+downcastXmlResourceHandler obj = objectCast obj
+
+
diff --git a/src/haskell/Graphics/UI/WxcClassTypes.hs b/src/haskell/Graphics/UI/WxcClassTypes.hs
new file mode 100644
index 0000000..6a2229f
--- /dev/null
+++ b/src/haskell/Graphics/UI/WxcClassTypes.hs
@@ -0,0 +1,6342 @@
+--------------------------------------------------------------------------------
+{-|
+Module      :  WxcClassTypes
+Copyright   :  Copyright (c) Daan Leijen 2003, 2004
+License     :  wxWindows
+
+Maintainer  :  wxhaskell-devel@lists.sourceforge.net
+Stability   :  provisional
+Portability :  portable
+
+Haskell class definitions for the wxWidgets C library (@wxc.dll@).
+
+Do not edit this file manually!
+This file was automatically generated by wxDirect.
+
+From the files:
+
+  * @wxc.h@
+
+And contains 574 class definitions.
+-}
+--------------------------------------------------------------------------------
+module Graphics.UI.WXCore.WxcClassTypes
+    ( -- * Classes
+     -- ** AcceleratorEntry
+      AcceleratorEntry
+     ,TAcceleratorEntry
+     ,CAcceleratorEntry(..)
+     -- ** AcceleratorTable
+     ,AcceleratorTable
+     ,TAcceleratorTable
+     ,CAcceleratorTable(..)
+     -- ** ActivateEvent
+     ,ActivateEvent
+     ,TActivateEvent
+     ,CActivateEvent(..)
+     -- ** App
+     ,App
+     ,TApp
+     ,CApp(..)
+     -- ** ArrayString
+     ,ArrayString
+     ,TArrayString
+     ,CArrayString(..)
+     -- ** ArtProvider
+     ,ArtProvider
+     ,TArtProvider
+     ,CArtProvider(..)
+     -- ** AuiDefaultTabArt
+     ,AuiDefaultTabArt
+     ,TAuiDefaultTabArt
+     ,CAuiDefaultTabArt(..)
+     -- ** AuiDefaultToolBarArt
+     ,AuiDefaultToolBarArt
+     ,TAuiDefaultToolBarArt
+     ,CAuiDefaultToolBarArt(..)
+     -- ** AuiDockArt
+     ,AuiDockArt
+     ,TAuiDockArt
+     ,CAuiDockArt(..)
+     -- ** AuiManager
+     ,AuiManager
+     ,TAuiManager
+     ,CAuiManager(..)
+     -- ** AuiManagerEvent
+     ,AuiManagerEvent
+     ,TAuiManagerEvent
+     ,CAuiManagerEvent(..)
+     -- ** AuiNotebook
+     ,AuiNotebook
+     ,TAuiNotebook
+     ,CAuiNotebook(..)
+     -- ** AuiNotebookEvent
+     ,AuiNotebookEvent
+     ,TAuiNotebookEvent
+     ,CAuiNotebookEvent(..)
+     -- ** AuiNotebookPage
+     ,AuiNotebookPage
+     ,TAuiNotebookPage
+     ,CAuiNotebookPage(..)
+     -- ** AuiNotebookPageArray
+     ,AuiNotebookPageArray
+     ,TAuiNotebookPageArray
+     ,CAuiNotebookPageArray(..)
+     -- ** AuiPaneInfo
+     ,AuiPaneInfo
+     ,TAuiPaneInfo
+     ,CAuiPaneInfo(..)
+     -- ** AuiPaneInfoArray
+     ,AuiPaneInfoArray
+     ,TAuiPaneInfoArray
+     ,CAuiPaneInfoArray(..)
+     -- ** AuiSimpleTabArt
+     ,AuiSimpleTabArt
+     ,TAuiSimpleTabArt
+     ,CAuiSimpleTabArt(..)
+     -- ** AuiTabArt
+     ,AuiTabArt
+     ,TAuiTabArt
+     ,CAuiTabArt(..)
+     -- ** AuiTabContainer
+     ,AuiTabContainer
+     ,TAuiTabContainer
+     ,CAuiTabContainer(..)
+     -- ** AuiTabContainerButton
+     ,AuiTabContainerButton
+     ,TAuiTabContainerButton
+     ,CAuiTabContainerButton(..)
+     -- ** AuiTabCtrl
+     ,AuiTabCtrl
+     ,TAuiTabCtrl
+     ,CAuiTabCtrl(..)
+     -- ** AuiToolBar
+     ,AuiToolBar
+     ,TAuiToolBar
+     ,CAuiToolBar(..)
+     -- ** AuiToolBarArt
+     ,AuiToolBarArt
+     ,TAuiToolBarArt
+     ,CAuiToolBarArt(..)
+     -- ** AuiToolBarEvent
+     ,AuiToolBarEvent
+     ,TAuiToolBarEvent
+     ,CAuiToolBarEvent(..)
+     -- ** AuiToolBarItem
+     ,AuiToolBarItem
+     ,TAuiToolBarItem
+     ,CAuiToolBarItem(..)
+     -- ** AuiToolBarItemArray
+     ,AuiToolBarItemArray
+     ,TAuiToolBarItemArray
+     ,CAuiToolBarItemArray(..)
+     -- ** AutoBufferedPaintDC
+     ,AutoBufferedPaintDC
+     ,TAutoBufferedPaintDC
+     ,CAutoBufferedPaintDC(..)
+     -- ** AutomationObject
+     ,AutomationObject
+     ,TAutomationObject
+     ,CAutomationObject(..)
+     -- ** Bitmap
+     ,Bitmap
+     ,TBitmap
+     ,CBitmap(..)
+     -- ** BitmapButton
+     ,BitmapButton
+     ,TBitmapButton
+     ,CBitmapButton(..)
+     -- ** BitmapDataObject
+     ,BitmapDataObject
+     ,TBitmapDataObject
+     ,CBitmapDataObject(..)
+     -- ** BitmapHandler
+     ,BitmapHandler
+     ,TBitmapHandler
+     ,CBitmapHandler(..)
+     -- ** BitmapToggleButton
+     ,BitmapToggleButton
+     ,TBitmapToggleButton
+     ,CBitmapToggleButton(..)
+     -- ** BookCtrlBase
+     ,BookCtrlBase
+     ,TBookCtrlBase
+     ,CBookCtrlBase(..)
+     -- ** BookCtrlEvent
+     ,BookCtrlEvent
+     ,TBookCtrlEvent
+     ,CBookCtrlEvent(..)
+     -- ** BoolProperty
+     ,BoolProperty
+     ,TBoolProperty
+     ,CBoolProperty(..)
+     -- ** BoxSizer
+     ,BoxSizer
+     ,TBoxSizer
+     ,CBoxSizer(..)
+     -- ** Brush
+     ,Brush
+     ,TBrush
+     ,CBrush(..)
+     -- ** BrushList
+     ,BrushList
+     ,TBrushList
+     ,CBrushList(..)
+     -- ** BufferedDC
+     ,BufferedDC
+     ,TBufferedDC
+     ,CBufferedDC(..)
+     -- ** BufferedInputStream
+     ,BufferedInputStream
+     ,TBufferedInputStream
+     ,CBufferedInputStream(..)
+     -- ** BufferedOutputStream
+     ,BufferedOutputStream
+     ,TBufferedOutputStream
+     ,CBufferedOutputStream(..)
+     -- ** BufferedPaintDC
+     ,BufferedPaintDC
+     ,TBufferedPaintDC
+     ,CBufferedPaintDC(..)
+     -- ** BusyCursor
+     ,BusyCursor
+     ,TBusyCursor
+     ,CBusyCursor(..)
+     -- ** BusyInfo
+     ,BusyInfo
+     ,TBusyInfo
+     ,CBusyInfo(..)
+     -- ** Button
+     ,Button
+     ,TButton
+     ,CButton(..)
+     -- ** CSConv
+     ,CSConv
+     ,TCSConv
+     ,CCSConv(..)
+     -- ** CalculateLayoutEvent
+     ,CalculateLayoutEvent
+     ,TCalculateLayoutEvent
+     ,CCalculateLayoutEvent(..)
+     -- ** CalendarCtrl
+     ,CalendarCtrl
+     ,TCalendarCtrl
+     ,CCalendarCtrl(..)
+     -- ** CalendarDateAttr
+     ,CalendarDateAttr
+     ,TCalendarDateAttr
+     ,CCalendarDateAttr(..)
+     -- ** CalendarEvent
+     ,CalendarEvent
+     ,TCalendarEvent
+     ,CCalendarEvent(..)
+     -- ** Caret
+     ,Caret
+     ,TCaret
+     ,CCaret(..)
+     -- ** CbAntiflickerPlugin
+     ,CbAntiflickerPlugin
+     ,TCbAntiflickerPlugin
+     ,CCbAntiflickerPlugin(..)
+     -- ** CbBarDragPlugin
+     ,CbBarDragPlugin
+     ,TCbBarDragPlugin
+     ,CCbBarDragPlugin(..)
+     -- ** CbBarHintsPlugin
+     ,CbBarHintsPlugin
+     ,TCbBarHintsPlugin
+     ,CCbBarHintsPlugin(..)
+     -- ** CbBarInfo
+     ,CbBarInfo
+     ,TCbBarInfo
+     ,CCbBarInfo(..)
+     -- ** CbBarSpy
+     ,CbBarSpy
+     ,TCbBarSpy
+     ,CCbBarSpy(..)
+     -- ** CbCloseBox
+     ,CbCloseBox
+     ,TCbCloseBox
+     ,CCbCloseBox(..)
+     -- ** CbCollapseBox
+     ,CbCollapseBox
+     ,TCbCollapseBox
+     ,CCbCollapseBox(..)
+     -- ** CbCommonPaneProperties
+     ,CbCommonPaneProperties
+     ,TCbCommonPaneProperties
+     ,CCbCommonPaneProperties(..)
+     -- ** CbCustomizeBarEvent
+     ,CbCustomizeBarEvent
+     ,TCbCustomizeBarEvent
+     ,CCbCustomizeBarEvent(..)
+     -- ** CbCustomizeLayoutEvent
+     ,CbCustomizeLayoutEvent
+     ,TCbCustomizeLayoutEvent
+     ,CCbCustomizeLayoutEvent(..)
+     -- ** CbDimHandlerBase
+     ,CbDimHandlerBase
+     ,TCbDimHandlerBase
+     ,CCbDimHandlerBase(..)
+     -- ** CbDimInfo
+     ,CbDimInfo
+     ,TCbDimInfo
+     ,CCbDimInfo(..)
+     -- ** CbDockBox
+     ,CbDockBox
+     ,TCbDockBox
+     ,CCbDockBox(..)
+     -- ** CbDockPane
+     ,CbDockPane
+     ,TCbDockPane
+     ,CCbDockPane(..)
+     -- ** CbDrawBarDecorEvent
+     ,CbDrawBarDecorEvent
+     ,TCbDrawBarDecorEvent
+     ,CCbDrawBarDecorEvent(..)
+     -- ** CbDrawBarHandlesEvent
+     ,CbDrawBarHandlesEvent
+     ,TCbDrawBarHandlesEvent
+     ,CCbDrawBarHandlesEvent(..)
+     -- ** CbDrawHintRectEvent
+     ,CbDrawHintRectEvent
+     ,TCbDrawHintRectEvent
+     ,CCbDrawHintRectEvent(..)
+     -- ** CbDrawPaneBkGroundEvent
+     ,CbDrawPaneBkGroundEvent
+     ,TCbDrawPaneBkGroundEvent
+     ,CCbDrawPaneBkGroundEvent(..)
+     -- ** CbDrawPaneDecorEvent
+     ,CbDrawPaneDecorEvent
+     ,TCbDrawPaneDecorEvent
+     ,CCbDrawPaneDecorEvent(..)
+     -- ** CbDrawRowBkGroundEvent
+     ,CbDrawRowBkGroundEvent
+     ,TCbDrawRowBkGroundEvent
+     ,CCbDrawRowBkGroundEvent(..)
+     -- ** CbDrawRowDecorEvent
+     ,CbDrawRowDecorEvent
+     ,TCbDrawRowDecorEvent
+     ,CCbDrawRowDecorEvent(..)
+     -- ** CbDrawRowHandlesEvent
+     ,CbDrawRowHandlesEvent
+     ,TCbDrawRowHandlesEvent
+     ,CCbDrawRowHandlesEvent(..)
+     -- ** CbDynToolBarDimHandler
+     ,CbDynToolBarDimHandler
+     ,TCbDynToolBarDimHandler
+     ,CCbDynToolBarDimHandler(..)
+     -- ** CbFinishDrawInAreaEvent
+     ,CbFinishDrawInAreaEvent
+     ,TCbFinishDrawInAreaEvent
+     ,CCbFinishDrawInAreaEvent(..)
+     -- ** CbFloatedBarWindow
+     ,CbFloatedBarWindow
+     ,TCbFloatedBarWindow
+     ,CCbFloatedBarWindow(..)
+     -- ** CbGCUpdatesMgr
+     ,CbGCUpdatesMgr
+     ,TCbGCUpdatesMgr
+     ,CCbGCUpdatesMgr(..)
+     -- ** CbHintAnimationPlugin
+     ,CbHintAnimationPlugin
+     ,TCbHintAnimationPlugin
+     ,CCbHintAnimationPlugin(..)
+     -- ** CbInsertBarEvent
+     ,CbInsertBarEvent
+     ,TCbInsertBarEvent
+     ,CCbInsertBarEvent(..)
+     -- ** CbLayoutRowEvent
+     ,CbLayoutRowEvent
+     ,TCbLayoutRowEvent
+     ,CCbLayoutRowEvent(..)
+     -- ** CbLeftDClickEvent
+     ,CbLeftDClickEvent
+     ,TCbLeftDClickEvent
+     ,CCbLeftDClickEvent(..)
+     -- ** CbLeftDownEvent
+     ,CbLeftDownEvent
+     ,TCbLeftDownEvent
+     ,CCbLeftDownEvent(..)
+     -- ** CbLeftUpEvent
+     ,CbLeftUpEvent
+     ,TCbLeftUpEvent
+     ,CCbLeftUpEvent(..)
+     -- ** CbMiniButton
+     ,CbMiniButton
+     ,TCbMiniButton
+     ,CCbMiniButton(..)
+     -- ** CbMotionEvent
+     ,CbMotionEvent
+     ,TCbMotionEvent
+     ,CCbMotionEvent(..)
+     -- ** CbPaneDrawPlugin
+     ,CbPaneDrawPlugin
+     ,TCbPaneDrawPlugin
+     ,CCbPaneDrawPlugin(..)
+     -- ** CbPluginBase
+     ,CbPluginBase
+     ,TCbPluginBase
+     ,CCbPluginBase(..)
+     -- ** CbPluginEvent
+     ,CbPluginEvent
+     ,TCbPluginEvent
+     ,CCbPluginEvent(..)
+     -- ** CbRemoveBarEvent
+     ,CbRemoveBarEvent
+     ,TCbRemoveBarEvent
+     ,CCbRemoveBarEvent(..)
+     -- ** CbResizeBarEvent
+     ,CbResizeBarEvent
+     ,TCbResizeBarEvent
+     ,CCbResizeBarEvent(..)
+     -- ** CbResizeRowEvent
+     ,CbResizeRowEvent
+     ,TCbResizeRowEvent
+     ,CCbResizeRowEvent(..)
+     -- ** CbRightDownEvent
+     ,CbRightDownEvent
+     ,TCbRightDownEvent
+     ,CCbRightDownEvent(..)
+     -- ** CbRightUpEvent
+     ,CbRightUpEvent
+     ,TCbRightUpEvent
+     ,CCbRightUpEvent(..)
+     -- ** CbRowDragPlugin
+     ,CbRowDragPlugin
+     ,TCbRowDragPlugin
+     ,CCbRowDragPlugin(..)
+     -- ** CbRowInfo
+     ,CbRowInfo
+     ,TCbRowInfo
+     ,CCbRowInfo(..)
+     -- ** CbRowLayoutPlugin
+     ,CbRowLayoutPlugin
+     ,TCbRowLayoutPlugin
+     ,CCbRowLayoutPlugin(..)
+     -- ** CbSimpleCustomizationPlugin
+     ,CbSimpleCustomizationPlugin
+     ,TCbSimpleCustomizationPlugin
+     ,CCbSimpleCustomizationPlugin(..)
+     -- ** CbSimpleUpdatesMgr
+     ,CbSimpleUpdatesMgr
+     ,TCbSimpleUpdatesMgr
+     ,CCbSimpleUpdatesMgr(..)
+     -- ** CbSizeBarWndEvent
+     ,CbSizeBarWndEvent
+     ,TCbSizeBarWndEvent
+     ,CCbSizeBarWndEvent(..)
+     -- ** CbStartBarDraggingEvent
+     ,CbStartBarDraggingEvent
+     ,TCbStartBarDraggingEvent
+     ,CCbStartBarDraggingEvent(..)
+     -- ** CbStartDrawInAreaEvent
+     ,CbStartDrawInAreaEvent
+     ,TCbStartDrawInAreaEvent
+     ,CCbStartDrawInAreaEvent(..)
+     -- ** CbUpdatesManagerBase
+     ,CbUpdatesManagerBase
+     ,TCbUpdatesManagerBase
+     ,CCbUpdatesManagerBase(..)
+     -- ** CheckBox
+     ,CheckBox
+     ,TCheckBox
+     ,CCheckBox(..)
+     -- ** CheckListBox
+     ,CheckListBox
+     ,TCheckListBox
+     ,CCheckListBox(..)
+     -- ** Choice
+     ,Choice
+     ,TChoice
+     ,CChoice(..)
+     -- ** ClassInfo
+     ,ClassInfo
+     ,TClassInfo
+     ,CClassInfo(..)
+     -- ** Client
+     ,Client
+     ,TClient
+     ,CClient(..)
+     -- ** ClientBase
+     ,ClientBase
+     ,TClientBase
+     ,CClientBase(..)
+     -- ** ClientDC
+     ,ClientDC
+     ,TClientDC
+     ,CClientDC(..)
+     -- ** ClientData
+     ,ClientData
+     ,TClientData
+     ,CClientData(..)
+     -- ** ClientDataContainer
+     ,ClientDataContainer
+     ,TClientDataContainer
+     ,CClientDataContainer(..)
+     -- ** Clipboard
+     ,Clipboard
+     ,TClipboard
+     ,CClipboard(..)
+     -- ** CloseEvent
+     ,CloseEvent
+     ,TCloseEvent
+     ,CCloseEvent(..)
+     -- ** Closure
+     ,Closure
+     ,TClosure
+     ,CClosure(..)
+     -- ** Colour
+     ,Colour
+     ,TColour
+     ,CColour(..)
+     -- ** ColourData
+     ,ColourData
+     ,TColourData
+     ,CColourData(..)
+     -- ** ColourDatabase
+     ,ColourDatabase
+     ,TColourDatabase
+     ,CColourDatabase(..)
+     -- ** ColourDialog
+     ,ColourDialog
+     ,TColourDialog
+     ,CColourDialog(..)
+     -- ** ColourPickerCtrl
+     ,ColourPickerCtrl
+     ,TColourPickerCtrl
+     ,CColourPickerCtrl(..)
+     -- ** ComboBox
+     ,ComboBox
+     ,TComboBox
+     ,CComboBox(..)
+     -- ** Command
+     ,Command
+     ,TCommand
+     ,CCommand(..)
+     -- ** CommandEvent
+     ,CommandEvent
+     ,TCommandEvent
+     ,CCommandEvent(..)
+     -- ** CommandLineParser
+     ,CommandLineParser
+     ,TCommandLineParser
+     ,CCommandLineParser(..)
+     -- ** CommandProcessor
+     ,CommandProcessor
+     ,TCommandProcessor
+     ,CCommandProcessor(..)
+     -- ** Condition
+     ,Condition
+     ,TCondition
+     ,CCondition(..)
+     -- ** ConfigBase
+     ,ConfigBase
+     ,TConfigBase
+     ,CConfigBase(..)
+     -- ** Connection
+     ,Connection
+     ,TConnection
+     ,CConnection(..)
+     -- ** ConnectionBase
+     ,ConnectionBase
+     ,TConnectionBase
+     ,CConnectionBase(..)
+     -- ** ContextHelp
+     ,ContextHelp
+     ,TContextHelp
+     ,CContextHelp(..)
+     -- ** ContextHelpButton
+     ,ContextHelpButton
+     ,TContextHelpButton
+     ,CContextHelpButton(..)
+     -- ** Control
+     ,Control
+     ,TControl
+     ,CControl(..)
+     -- ** CountingOutputStream
+     ,CountingOutputStream
+     ,TCountingOutputStream
+     ,CCountingOutputStream(..)
+     -- ** CriticalSection
+     ,CriticalSection
+     ,TCriticalSection
+     ,CCriticalSection(..)
+     -- ** CriticalSectionLocker
+     ,CriticalSectionLocker
+     ,TCriticalSectionLocker
+     ,CCriticalSectionLocker(..)
+     -- ** Cursor
+     ,Cursor
+     ,TCursor
+     ,CCursor(..)
+     -- ** CustomDataObject
+     ,CustomDataObject
+     ,TCustomDataObject
+     ,CCustomDataObject(..)
+     -- ** DC
+     ,DC
+     ,TDC
+     ,CDC(..)
+     -- ** DCClipper
+     ,DCClipper
+     ,TDCClipper
+     ,CDCClipper(..)
+     -- ** DDEClient
+     ,DDEClient
+     ,TDDEClient
+     ,CDDEClient(..)
+     -- ** DDEConnection
+     ,DDEConnection
+     ,TDDEConnection
+     ,CDDEConnection(..)
+     -- ** DDEServer
+     ,DDEServer
+     ,TDDEServer
+     ,CDDEServer(..)
+     -- ** DataFormat
+     ,DataFormat
+     ,TDataFormat
+     ,CDataFormat(..)
+     -- ** DataInputStream
+     ,DataInputStream
+     ,TDataInputStream
+     ,CDataInputStream(..)
+     -- ** DataObject
+     ,DataObject
+     ,TDataObject
+     ,CDataObject(..)
+     -- ** DataObjectComposite
+     ,DataObjectComposite
+     ,TDataObjectComposite
+     ,CDataObjectComposite(..)
+     -- ** DataObjectSimple
+     ,DataObjectSimple
+     ,TDataObjectSimple
+     ,CDataObjectSimple(..)
+     -- ** DataOutputStream
+     ,DataOutputStream
+     ,TDataOutputStream
+     ,CDataOutputStream(..)
+     -- ** Database
+     ,Database
+     ,TDatabase
+     ,CDatabase(..)
+     -- ** DateProperty
+     ,DateProperty
+     ,TDateProperty
+     ,CDateProperty(..)
+     -- ** DateTime
+     ,DateTime
+     ,TDateTime
+     ,CDateTime(..)
+     -- ** Db
+     ,Db
+     ,TDb
+     ,CDb(..)
+     -- ** DbColDef
+     ,DbColDef
+     ,TDbColDef
+     ,CDbColDef(..)
+     -- ** DbColFor
+     ,DbColFor
+     ,TDbColFor
+     ,CDbColFor(..)
+     -- ** DbColInf
+     ,DbColInf
+     ,TDbColInf
+     ,CDbColInf(..)
+     -- ** DbConnectInf
+     ,DbConnectInf
+     ,TDbConnectInf
+     ,CDbConnectInf(..)
+     -- ** DbInf
+     ,DbInf
+     ,TDbInf
+     ,CDbInf(..)
+     -- ** DbSqlTypeInfo
+     ,DbSqlTypeInfo
+     ,TDbSqlTypeInfo
+     ,CDbSqlTypeInfo(..)
+     -- ** DbTable
+     ,DbTable
+     ,TDbTable
+     ,CDbTable(..)
+     -- ** DbTableInfo
+     ,DbTableInfo
+     ,TDbTableInfo
+     ,CDbTableInfo(..)
+     -- ** DebugContext
+     ,DebugContext
+     ,TDebugContext
+     ,CDebugContext(..)
+     -- ** DialUpEvent
+     ,DialUpEvent
+     ,TDialUpEvent
+     ,CDialUpEvent(..)
+     -- ** DialUpManager
+     ,DialUpManager
+     ,TDialUpManager
+     ,CDialUpManager(..)
+     -- ** Dialog
+     ,Dialog
+     ,TDialog
+     ,CDialog(..)
+     -- ** DirDialog
+     ,DirDialog
+     ,TDirDialog
+     ,CDirDialog(..)
+     -- ** DirTraverser
+     ,DirTraverser
+     ,TDirTraverser
+     ,CDirTraverser(..)
+     -- ** DocChildFrame
+     ,DocChildFrame
+     ,TDocChildFrame
+     ,CDocChildFrame(..)
+     -- ** DocMDIChildFrame
+     ,DocMDIChildFrame
+     ,TDocMDIChildFrame
+     ,CDocMDIChildFrame(..)
+     -- ** DocMDIParentFrame
+     ,DocMDIParentFrame
+     ,TDocMDIParentFrame
+     ,CDocMDIParentFrame(..)
+     -- ** DocManager
+     ,DocManager
+     ,TDocManager
+     ,CDocManager(..)
+     -- ** DocParentFrame
+     ,DocParentFrame
+     ,TDocParentFrame
+     ,CDocParentFrame(..)
+     -- ** DocTemplate
+     ,DocTemplate
+     ,TDocTemplate
+     ,CDocTemplate(..)
+     -- ** Document
+     ,Document
+     ,TDocument
+     ,CDocument(..)
+     -- ** DragImage
+     ,DragImage
+     ,TDragImage
+     ,CDragImage(..)
+     -- ** DrawControl
+     ,DrawControl
+     ,TDrawControl
+     ,CDrawControl(..)
+     -- ** DrawWindow
+     ,DrawWindow
+     ,TDrawWindow
+     ,CDrawWindow(..)
+     -- ** DropFilesEvent
+     ,DropFilesEvent
+     ,TDropFilesEvent
+     ,CDropFilesEvent(..)
+     -- ** DropSource
+     ,DropSource
+     ,TDropSource
+     ,CDropSource(..)
+     -- ** DropTarget
+     ,DropTarget
+     ,TDropTarget
+     ,CDropTarget(..)
+     -- ** DynToolInfo
+     ,DynToolInfo
+     ,TDynToolInfo
+     ,CDynToolInfo(..)
+     -- ** DynamicLibrary
+     ,DynamicLibrary
+     ,TDynamicLibrary
+     ,CDynamicLibrary(..)
+     -- ** DynamicSashWindow
+     ,DynamicSashWindow
+     ,TDynamicSashWindow
+     ,CDynamicSashWindow(..)
+     -- ** DynamicToolBar
+     ,DynamicToolBar
+     ,TDynamicToolBar
+     ,CDynamicToolBar(..)
+     -- ** EditableListBox
+     ,EditableListBox
+     ,TEditableListBox
+     ,CEditableListBox(..)
+     -- ** EncodingConverter
+     ,EncodingConverter
+     ,TEncodingConverter
+     ,CEncodingConverter(..)
+     -- ** EraseEvent
+     ,EraseEvent
+     ,TEraseEvent
+     ,CEraseEvent(..)
+     -- ** Event
+     ,Event
+     ,TEvent
+     ,CEvent(..)
+     -- ** EvtHandler
+     ,EvtHandler
+     ,TEvtHandler
+     ,CEvtHandler(..)
+     -- ** ExprDatabase
+     ,ExprDatabase
+     ,TExprDatabase
+     ,CExprDatabase(..)
+     -- ** FFile
+     ,FFile
+     ,TFFile
+     ,CFFile(..)
+     -- ** FFileInputStream
+     ,FFileInputStream
+     ,TFFileInputStream
+     ,CFFileInputStream(..)
+     -- ** FFileOutputStream
+     ,FFileOutputStream
+     ,TFFileOutputStream
+     ,CFFileOutputStream(..)
+     -- ** FSFile
+     ,FSFile
+     ,TFSFile
+     ,CFSFile(..)
+     -- ** FTP
+     ,FTP
+     ,TFTP
+     ,CFTP(..)
+     -- ** FileConfig
+     ,FileConfig
+     ,TFileConfig
+     ,CFileConfig(..)
+     -- ** FileDataObject
+     ,FileDataObject
+     ,TFileDataObject
+     ,CFileDataObject(..)
+     -- ** FileDialog
+     ,FileDialog
+     ,TFileDialog
+     ,CFileDialog(..)
+     -- ** FileDropTarget
+     ,FileDropTarget
+     ,TFileDropTarget
+     ,CFileDropTarget(..)
+     -- ** FileHistory
+     ,FileHistory
+     ,TFileHistory
+     ,CFileHistory(..)
+     -- ** FileInputStream
+     ,FileInputStream
+     ,TFileInputStream
+     ,CFileInputStream(..)
+     -- ** FileName
+     ,FileName
+     ,TFileName
+     ,CFileName(..)
+     -- ** FileOutputStream
+     ,FileOutputStream
+     ,TFileOutputStream
+     ,CFileOutputStream(..)
+     -- ** FileProperty
+     ,FileProperty
+     ,TFileProperty
+     ,CFileProperty(..)
+     -- ** FileSystem
+     ,FileSystem
+     ,TFileSystem
+     ,CFileSystem(..)
+     -- ** FileSystemHandler
+     ,FileSystemHandler
+     ,TFileSystemHandler
+     ,CFileSystemHandler(..)
+     -- ** FileType
+     ,FileType
+     ,TFileType
+     ,CFileType(..)
+     -- ** FilterInputStream
+     ,FilterInputStream
+     ,TFilterInputStream
+     ,CFilterInputStream(..)
+     -- ** FilterOutputStream
+     ,FilterOutputStream
+     ,TFilterOutputStream
+     ,CFilterOutputStream(..)
+     -- ** FindDialogEvent
+     ,FindDialogEvent
+     ,TFindDialogEvent
+     ,CFindDialogEvent(..)
+     -- ** FindReplaceData
+     ,FindReplaceData
+     ,TFindReplaceData
+     ,CFindReplaceData(..)
+     -- ** FindReplaceDialog
+     ,FindReplaceDialog
+     ,TFindReplaceDialog
+     ,CFindReplaceDialog(..)
+     -- ** FlexGridSizer
+     ,FlexGridSizer
+     ,TFlexGridSizer
+     ,CFlexGridSizer(..)
+     -- ** FloatProperty
+     ,FloatProperty
+     ,TFloatProperty
+     ,CFloatProperty(..)
+     -- ** FocusEvent
+     ,FocusEvent
+     ,TFocusEvent
+     ,CFocusEvent(..)
+     -- ** Font
+     ,Font
+     ,TFont
+     ,CFont(..)
+     -- ** FontData
+     ,FontData
+     ,TFontData
+     ,CFontData(..)
+     -- ** FontDialog
+     ,FontDialog
+     ,TFontDialog
+     ,CFontDialog(..)
+     -- ** FontEnumerator
+     ,FontEnumerator
+     ,TFontEnumerator
+     ,CFontEnumerator(..)
+     -- ** FontList
+     ,FontList
+     ,TFontList
+     ,CFontList(..)
+     -- ** FontMapper
+     ,FontMapper
+     ,TFontMapper
+     ,CFontMapper(..)
+     -- ** Frame
+     ,Frame
+     ,TFrame
+     ,CFrame(..)
+     -- ** FrameLayout
+     ,FrameLayout
+     ,TFrameLayout
+     ,CFrameLayout(..)
+     -- ** GCDC
+     ,GCDC
+     ,TGCDC
+     ,CGCDC(..)
+     -- ** GDIObject
+     ,GDIObject
+     ,TGDIObject
+     ,CGDIObject(..)
+     -- ** GLCanvas
+     ,GLCanvas
+     ,TGLCanvas
+     ,CGLCanvas(..)
+     -- ** GLContext
+     ,GLContext
+     ,TGLContext
+     ,CGLContext(..)
+     -- ** Gauge
+     ,Gauge
+     ,TGauge
+     ,CGauge(..)
+     -- ** Gauge95
+     ,Gauge95
+     ,TGauge95
+     ,CGauge95(..)
+     -- ** GaugeMSW
+     ,GaugeMSW
+     ,TGaugeMSW
+     ,CGaugeMSW(..)
+     -- ** GenericDirCtrl
+     ,GenericDirCtrl
+     ,TGenericDirCtrl
+     ,CGenericDirCtrl(..)
+     -- ** GenericDragImage
+     ,GenericDragImage
+     ,TGenericDragImage
+     ,CGenericDragImage(..)
+     -- ** GenericValidator
+     ,GenericValidator
+     ,TGenericValidator
+     ,CGenericValidator(..)
+     -- ** GraphicsBrush
+     ,GraphicsBrush
+     ,TGraphicsBrush
+     ,CGraphicsBrush(..)
+     -- ** GraphicsContext
+     ,GraphicsContext
+     ,TGraphicsContext
+     ,CGraphicsContext(..)
+     -- ** GraphicsFont
+     ,GraphicsFont
+     ,TGraphicsFont
+     ,CGraphicsFont(..)
+     -- ** GraphicsMatrix
+     ,GraphicsMatrix
+     ,TGraphicsMatrix
+     ,CGraphicsMatrix(..)
+     -- ** GraphicsObject
+     ,GraphicsObject
+     ,TGraphicsObject
+     ,CGraphicsObject(..)
+     -- ** GraphicsPath
+     ,GraphicsPath
+     ,TGraphicsPath
+     ,CGraphicsPath(..)
+     -- ** GraphicsPen
+     ,GraphicsPen
+     ,TGraphicsPen
+     ,CGraphicsPen(..)
+     -- ** GraphicsRenderer
+     ,GraphicsRenderer
+     ,TGraphicsRenderer
+     ,CGraphicsRenderer(..)
+     -- ** Grid
+     ,Grid
+     ,TGrid
+     ,CGrid(..)
+     -- ** GridCellAttr
+     ,GridCellAttr
+     ,TGridCellAttr
+     ,CGridCellAttr(..)
+     -- ** GridCellAutoWrapStringRenderer
+     ,GridCellAutoWrapStringRenderer
+     ,TGridCellAutoWrapStringRenderer
+     ,CGridCellAutoWrapStringRenderer(..)
+     -- ** GridCellBoolEditor
+     ,GridCellBoolEditor
+     ,TGridCellBoolEditor
+     ,CGridCellBoolEditor(..)
+     -- ** GridCellBoolRenderer
+     ,GridCellBoolRenderer
+     ,TGridCellBoolRenderer
+     ,CGridCellBoolRenderer(..)
+     -- ** GridCellChoiceEditor
+     ,GridCellChoiceEditor
+     ,TGridCellChoiceEditor
+     ,CGridCellChoiceEditor(..)
+     -- ** GridCellCoordsArray
+     ,GridCellCoordsArray
+     ,TGridCellCoordsArray
+     ,CGridCellCoordsArray(..)
+     -- ** GridCellEditor
+     ,GridCellEditor
+     ,TGridCellEditor
+     ,CGridCellEditor(..)
+     -- ** GridCellFloatEditor
+     ,GridCellFloatEditor
+     ,TGridCellFloatEditor
+     ,CGridCellFloatEditor(..)
+     -- ** GridCellFloatRenderer
+     ,GridCellFloatRenderer
+     ,TGridCellFloatRenderer
+     ,CGridCellFloatRenderer(..)
+     -- ** GridCellNumberEditor
+     ,GridCellNumberEditor
+     ,TGridCellNumberEditor
+     ,CGridCellNumberEditor(..)
+     -- ** GridCellNumberRenderer
+     ,GridCellNumberRenderer
+     ,TGridCellNumberRenderer
+     ,CGridCellNumberRenderer(..)
+     -- ** GridCellRenderer
+     ,GridCellRenderer
+     ,TGridCellRenderer
+     ,CGridCellRenderer(..)
+     -- ** GridCellStringRenderer
+     ,GridCellStringRenderer
+     ,TGridCellStringRenderer
+     ,CGridCellStringRenderer(..)
+     -- ** GridCellTextEditor
+     ,GridCellTextEditor
+     ,TGridCellTextEditor
+     ,CGridCellTextEditor(..)
+     -- ** GridCellTextEnterEditor
+     ,GridCellTextEnterEditor
+     ,TGridCellTextEnterEditor
+     ,CGridCellTextEnterEditor(..)
+     -- ** GridCellWorker
+     ,GridCellWorker
+     ,TGridCellWorker
+     ,CGridCellWorker(..)
+     -- ** GridEditorCreatedEvent
+     ,GridEditorCreatedEvent
+     ,TGridEditorCreatedEvent
+     ,CGridEditorCreatedEvent(..)
+     -- ** GridEvent
+     ,GridEvent
+     ,TGridEvent
+     ,CGridEvent(..)
+     -- ** GridRangeSelectEvent
+     ,GridRangeSelectEvent
+     ,TGridRangeSelectEvent
+     ,CGridRangeSelectEvent(..)
+     -- ** GridSizeEvent
+     ,GridSizeEvent
+     ,TGridSizeEvent
+     ,CGridSizeEvent(..)
+     -- ** GridSizer
+     ,GridSizer
+     ,TGridSizer
+     ,CGridSizer(..)
+     -- ** GridTableBase
+     ,GridTableBase
+     ,TGridTableBase
+     ,CGridTableBase(..)
+     -- ** HTTP
+     ,HTTP
+     ,THTTP
+     ,CHTTP(..)
+     -- ** HashMap
+     ,HashMap
+     ,THashMap
+     ,CHashMap(..)
+     -- ** HelpController
+     ,HelpController
+     ,THelpController
+     ,CHelpController(..)
+     -- ** HelpControllerBase
+     ,HelpControllerBase
+     ,THelpControllerBase
+     ,CHelpControllerBase(..)
+     -- ** HelpControllerHelpProvider
+     ,HelpControllerHelpProvider
+     ,THelpControllerHelpProvider
+     ,CHelpControllerHelpProvider(..)
+     -- ** HelpEvent
+     ,HelpEvent
+     ,THelpEvent
+     ,CHelpEvent(..)
+     -- ** HelpProvider
+     ,HelpProvider
+     ,THelpProvider
+     ,CHelpProvider(..)
+     -- ** HtmlCell
+     ,HtmlCell
+     ,THtmlCell
+     ,CHtmlCell(..)
+     -- ** HtmlColourCell
+     ,HtmlColourCell
+     ,THtmlColourCell
+     ,CHtmlColourCell(..)
+     -- ** HtmlContainerCell
+     ,HtmlContainerCell
+     ,THtmlContainerCell
+     ,CHtmlContainerCell(..)
+     -- ** HtmlDCRenderer
+     ,HtmlDCRenderer
+     ,THtmlDCRenderer
+     ,CHtmlDCRenderer(..)
+     -- ** HtmlEasyPrinting
+     ,HtmlEasyPrinting
+     ,THtmlEasyPrinting
+     ,CHtmlEasyPrinting(..)
+     -- ** HtmlFilter
+     ,HtmlFilter
+     ,THtmlFilter
+     ,CHtmlFilter(..)
+     -- ** HtmlHelpController
+     ,HtmlHelpController
+     ,THtmlHelpController
+     ,CHtmlHelpController(..)
+     -- ** HtmlHelpData
+     ,HtmlHelpData
+     ,THtmlHelpData
+     ,CHtmlHelpData(..)
+     -- ** HtmlHelpFrame
+     ,HtmlHelpFrame
+     ,THtmlHelpFrame
+     ,CHtmlHelpFrame(..)
+     -- ** HtmlLinkInfo
+     ,HtmlLinkInfo
+     ,THtmlLinkInfo
+     ,CHtmlLinkInfo(..)
+     -- ** HtmlParser
+     ,HtmlParser
+     ,THtmlParser
+     ,CHtmlParser(..)
+     -- ** HtmlPrintout
+     ,HtmlPrintout
+     ,THtmlPrintout
+     ,CHtmlPrintout(..)
+     -- ** HtmlTag
+     ,HtmlTag
+     ,THtmlTag
+     ,CHtmlTag(..)
+     -- ** HtmlTagHandler
+     ,HtmlTagHandler
+     ,THtmlTagHandler
+     ,CHtmlTagHandler(..)
+     -- ** HtmlTagsModule
+     ,HtmlTagsModule
+     ,THtmlTagsModule
+     ,CHtmlTagsModule(..)
+     -- ** HtmlWidgetCell
+     ,HtmlWidgetCell
+     ,THtmlWidgetCell
+     ,CHtmlWidgetCell(..)
+     -- ** HtmlWinParser
+     ,HtmlWinParser
+     ,THtmlWinParser
+     ,CHtmlWinParser(..)
+     -- ** HtmlWinTagHandler
+     ,HtmlWinTagHandler
+     ,THtmlWinTagHandler
+     ,CHtmlWinTagHandler(..)
+     -- ** HtmlWindow
+     ,HtmlWindow
+     ,THtmlWindow
+     ,CHtmlWindow(..)
+     -- ** HyperlinkCtrl
+     ,HyperlinkCtrl
+     ,THyperlinkCtrl
+     ,CHyperlinkCtrl(..)
+     -- ** IPV4address
+     ,IPV4address
+     ,TIPV4address
+     ,CIPV4address(..)
+     -- ** Icon
+     ,Icon
+     ,TIcon
+     ,CIcon(..)
+     -- ** IconBundle
+     ,IconBundle
+     ,TIconBundle
+     ,CIconBundle(..)
+     -- ** IconizeEvent
+     ,IconizeEvent
+     ,TIconizeEvent
+     ,CIconizeEvent(..)
+     -- ** IdleEvent
+     ,IdleEvent
+     ,TIdleEvent
+     ,CIdleEvent(..)
+     -- ** Image
+     ,Image
+     ,TImage
+     ,CImage(..)
+     -- ** ImageHandler
+     ,ImageHandler
+     ,TImageHandler
+     ,CImageHandler(..)
+     -- ** ImageList
+     ,ImageList
+     ,TImageList
+     ,CImageList(..)
+     -- ** IndividualLayoutConstraint
+     ,IndividualLayoutConstraint
+     ,TIndividualLayoutConstraint
+     ,CIndividualLayoutConstraint(..)
+     -- ** InitDialogEvent
+     ,InitDialogEvent
+     ,TInitDialogEvent
+     ,CInitDialogEvent(..)
+     -- ** InputSink
+     ,InputSink
+     ,TInputSink
+     ,CInputSink(..)
+     -- ** InputSinkEvent
+     ,InputSinkEvent
+     ,TInputSinkEvent
+     ,CInputSinkEvent(..)
+     -- ** InputStream
+     ,InputStream
+     ,TInputStream
+     ,CInputStream(..)
+     -- ** IntProperty
+     ,IntProperty
+     ,TIntProperty
+     ,CIntProperty(..)
+     -- ** Joystick
+     ,Joystick
+     ,TJoystick
+     ,CJoystick(..)
+     -- ** JoystickEvent
+     ,JoystickEvent
+     ,TJoystickEvent
+     ,CJoystickEvent(..)
+     -- ** KeyEvent
+     ,KeyEvent
+     ,TKeyEvent
+     ,CKeyEvent(..)
+     -- ** LEDNumberCtrl
+     ,LEDNumberCtrl
+     ,TLEDNumberCtrl
+     ,CLEDNumberCtrl(..)
+     -- ** LayoutAlgorithm
+     ,LayoutAlgorithm
+     ,TLayoutAlgorithm
+     ,CLayoutAlgorithm(..)
+     -- ** LayoutConstraints
+     ,LayoutConstraints
+     ,TLayoutConstraints
+     ,CLayoutConstraints(..)
+     -- ** List
+     ,List
+     ,TList
+     ,CList(..)
+     -- ** ListBox
+     ,ListBox
+     ,TListBox
+     ,CListBox(..)
+     -- ** ListCtrl
+     ,ListCtrl
+     ,TListCtrl
+     ,CListCtrl(..)
+     -- ** ListEvent
+     ,ListEvent
+     ,TListEvent
+     ,CListEvent(..)
+     -- ** ListItem
+     ,ListItem
+     ,TListItem
+     ,CListItem(..)
+     -- ** Locale
+     ,Locale
+     ,TLocale
+     ,CLocale(..)
+     -- ** Log
+     ,Log
+     ,TLog
+     ,CLog(..)
+     -- ** LogChain
+     ,LogChain
+     ,TLogChain
+     ,CLogChain(..)
+     -- ** LogGUI
+     ,LogGUI
+     ,TLogGUI
+     ,CLogGUI(..)
+     -- ** LogNull
+     ,LogNull
+     ,TLogNull
+     ,CLogNull(..)
+     -- ** LogPassThrough
+     ,LogPassThrough
+     ,TLogPassThrough
+     ,CLogPassThrough(..)
+     -- ** LogStderr
+     ,LogStderr
+     ,TLogStderr
+     ,CLogStderr(..)
+     -- ** LogStream
+     ,LogStream
+     ,TLogStream
+     ,CLogStream(..)
+     -- ** LogTextCtrl
+     ,LogTextCtrl
+     ,TLogTextCtrl
+     ,CLogTextCtrl(..)
+     -- ** LogWindow
+     ,LogWindow
+     ,TLogWindow
+     ,CLogWindow(..)
+     -- ** LongLong
+     ,LongLong
+     ,TLongLong
+     ,CLongLong(..)
+     -- ** MBConv
+     ,MBConv
+     ,TMBConv
+     ,CMBConv(..)
+     -- ** MBConvFile
+     ,MBConvFile
+     ,TMBConvFile
+     ,CMBConvFile(..)
+     -- ** MBConvUTF7
+     ,MBConvUTF7
+     ,TMBConvUTF7
+     ,CMBConvUTF7(..)
+     -- ** MBConvUTF8
+     ,MBConvUTF8
+     ,TMBConvUTF8
+     ,CMBConvUTF8(..)
+     -- ** MDIChildFrame
+     ,MDIChildFrame
+     ,TMDIChildFrame
+     ,CMDIChildFrame(..)
+     -- ** MDIClientWindow
+     ,MDIClientWindow
+     ,TMDIClientWindow
+     ,CMDIClientWindow(..)
+     -- ** MDIParentFrame
+     ,MDIParentFrame
+     ,TMDIParentFrame
+     ,CMDIParentFrame(..)
+     -- ** Mask
+     ,Mask
+     ,TMask
+     ,CMask(..)
+     -- ** MaximizeEvent
+     ,MaximizeEvent
+     ,TMaximizeEvent
+     ,CMaximizeEvent(..)
+     -- ** MediaCtrl
+     ,MediaCtrl
+     ,TMediaCtrl
+     ,CMediaCtrl(..)
+     -- ** MediaEvent
+     ,MediaEvent
+     ,TMediaEvent
+     ,CMediaEvent(..)
+     -- ** MemoryBuffer
+     ,MemoryBuffer
+     ,TMemoryBuffer
+     ,CMemoryBuffer(..)
+     -- ** MemoryDC
+     ,MemoryDC
+     ,TMemoryDC
+     ,CMemoryDC(..)
+     -- ** MemoryFSHandler
+     ,MemoryFSHandler
+     ,TMemoryFSHandler
+     ,CMemoryFSHandler(..)
+     -- ** MemoryInputStream
+     ,MemoryInputStream
+     ,TMemoryInputStream
+     ,CMemoryInputStream(..)
+     -- ** MemoryOutputStream
+     ,MemoryOutputStream
+     ,TMemoryOutputStream
+     ,CMemoryOutputStream(..)
+     -- ** Menu
+     ,Menu
+     ,TMenu
+     ,CMenu(..)
+     -- ** MenuBar
+     ,MenuBar
+     ,TMenuBar
+     ,CMenuBar(..)
+     -- ** MenuEvent
+     ,MenuEvent
+     ,TMenuEvent
+     ,CMenuEvent(..)
+     -- ** MenuItem
+     ,MenuItem
+     ,TMenuItem
+     ,CMenuItem(..)
+     -- ** MessageDialog
+     ,MessageDialog
+     ,TMessageDialog
+     ,CMessageDialog(..)
+     -- ** Metafile
+     ,Metafile
+     ,TMetafile
+     ,CMetafile(..)
+     -- ** MetafileDC
+     ,MetafileDC
+     ,TMetafileDC
+     ,CMetafileDC(..)
+     -- ** MimeTypesManager
+     ,MimeTypesManager
+     ,TMimeTypesManager
+     ,CMimeTypesManager(..)
+     -- ** MiniFrame
+     ,MiniFrame
+     ,TMiniFrame
+     ,CMiniFrame(..)
+     -- ** MirrorDC
+     ,MirrorDC
+     ,TMirrorDC
+     ,CMirrorDC(..)
+     -- ** Module
+     ,Module
+     ,TModule
+     ,CModule(..)
+     -- ** MouseCaptureChangedEvent
+     ,MouseCaptureChangedEvent
+     ,TMouseCaptureChangedEvent
+     ,CMouseCaptureChangedEvent(..)
+     -- ** MouseEvent
+     ,MouseEvent
+     ,TMouseEvent
+     ,CMouseEvent(..)
+     -- ** MoveEvent
+     ,MoveEvent
+     ,TMoveEvent
+     ,CMoveEvent(..)
+     -- ** MultiCellCanvas
+     ,MultiCellCanvas
+     ,TMultiCellCanvas
+     ,CMultiCellCanvas(..)
+     -- ** MultiCellItemHandle
+     ,MultiCellItemHandle
+     ,TMultiCellItemHandle
+     ,CMultiCellItemHandle(..)
+     -- ** MultiCellSizer
+     ,MultiCellSizer
+     ,TMultiCellSizer
+     ,CMultiCellSizer(..)
+     -- ** Mutex
+     ,Mutex
+     ,TMutex
+     ,CMutex(..)
+     -- ** MutexLocker
+     ,MutexLocker
+     ,TMutexLocker
+     ,CMutexLocker(..)
+     -- ** NavigationKeyEvent
+     ,NavigationKeyEvent
+     ,TNavigationKeyEvent
+     ,CNavigationKeyEvent(..)
+     -- ** NewBitmapButton
+     ,NewBitmapButton
+     ,TNewBitmapButton
+     ,CNewBitmapButton(..)
+     -- ** NodeBase
+     ,NodeBase
+     ,TNodeBase
+     ,CNodeBase(..)
+     -- ** Notebook
+     ,Notebook
+     ,TNotebook
+     ,CNotebook(..)
+     -- ** NotebookEvent
+     ,NotebookEvent
+     ,TNotebookEvent
+     ,CNotebookEvent(..)
+     -- ** NotifyEvent
+     ,NotifyEvent
+     ,TNotifyEvent
+     ,CNotifyEvent(..)
+     -- ** ObjectRefData
+     ,ObjectRefData
+     ,TObjectRefData
+     ,CObjectRefData(..)
+     -- ** OutputStream
+     ,OutputStream
+     ,TOutputStream
+     ,COutputStream(..)
+     -- ** PGProperty
+     ,PGProperty
+     ,TPGProperty
+     ,CPGProperty(..)
+     -- ** PageSetupDialog
+     ,PageSetupDialog
+     ,TPageSetupDialog
+     ,CPageSetupDialog(..)
+     -- ** PageSetupDialogData
+     ,PageSetupDialogData
+     ,TPageSetupDialogData
+     ,CPageSetupDialogData(..)
+     -- ** PaintDC
+     ,PaintDC
+     ,TPaintDC
+     ,CPaintDC(..)
+     -- ** PaintEvent
+     ,PaintEvent
+     ,TPaintEvent
+     ,CPaintEvent(..)
+     -- ** Palette
+     ,Palette
+     ,TPalette
+     ,CPalette(..)
+     -- ** PaletteChangedEvent
+     ,PaletteChangedEvent
+     ,TPaletteChangedEvent
+     ,CPaletteChangedEvent(..)
+     -- ** Panel
+     ,Panel
+     ,TPanel
+     ,CPanel(..)
+     -- ** PathList
+     ,PathList
+     ,TPathList
+     ,CPathList(..)
+     -- ** Pen
+     ,Pen
+     ,TPen
+     ,CPen(..)
+     -- ** PenList
+     ,PenList
+     ,TPenList
+     ,CPenList(..)
+     -- ** PickerBase
+     ,PickerBase
+     ,TPickerBase
+     ,CPickerBase(..)
+     -- ** PlotCurve
+     ,PlotCurve
+     ,TPlotCurve
+     ,CPlotCurve(..)
+     -- ** PlotEvent
+     ,PlotEvent
+     ,TPlotEvent
+     ,CPlotEvent(..)
+     -- ** PlotOnOffCurve
+     ,PlotOnOffCurve
+     ,TPlotOnOffCurve
+     ,CPlotOnOffCurve(..)
+     -- ** PlotWindow
+     ,PlotWindow
+     ,TPlotWindow
+     ,CPlotWindow(..)
+     -- ** PopupTransientWindow
+     ,PopupTransientWindow
+     ,TPopupTransientWindow
+     ,CPopupTransientWindow(..)
+     -- ** PopupWindow
+     ,PopupWindow
+     ,TPopupWindow
+     ,CPopupWindow(..)
+     -- ** PostScriptDC
+     ,PostScriptDC
+     ,TPostScriptDC
+     ,CPostScriptDC(..)
+     -- ** PostScriptPrintNativeData
+     ,PostScriptPrintNativeData
+     ,TPostScriptPrintNativeData
+     ,CPostScriptPrintNativeData(..)
+     -- ** PreviewCanvas
+     ,PreviewCanvas
+     ,TPreviewCanvas
+     ,CPreviewCanvas(..)
+     -- ** PreviewControlBar
+     ,PreviewControlBar
+     ,TPreviewControlBar
+     ,CPreviewControlBar(..)
+     -- ** PreviewFrame
+     ,PreviewFrame
+     ,TPreviewFrame
+     ,CPreviewFrame(..)
+     -- ** PrintData
+     ,PrintData
+     ,TPrintData
+     ,CPrintData(..)
+     -- ** PrintDialog
+     ,PrintDialog
+     ,TPrintDialog
+     ,CPrintDialog(..)
+     -- ** PrintDialogData
+     ,PrintDialogData
+     ,TPrintDialogData
+     ,CPrintDialogData(..)
+     -- ** PrintPreview
+     ,PrintPreview
+     ,TPrintPreview
+     ,CPrintPreview(..)
+     -- ** Printer
+     ,Printer
+     ,TPrinter
+     ,CPrinter(..)
+     -- ** PrinterDC
+     ,PrinterDC
+     ,TPrinterDC
+     ,CPrinterDC(..)
+     -- ** Printout
+     ,Printout
+     ,TPrintout
+     ,CPrintout(..)
+     -- ** PrivateDropTarget
+     ,PrivateDropTarget
+     ,TPrivateDropTarget
+     ,CPrivateDropTarget(..)
+     -- ** Process
+     ,Process
+     ,TProcess
+     ,CProcess(..)
+     -- ** ProcessEvent
+     ,ProcessEvent
+     ,TProcessEvent
+     ,CProcessEvent(..)
+     -- ** ProgressDialog
+     ,ProgressDialog
+     ,TProgressDialog
+     ,CProgressDialog(..)
+     -- ** PropertyCategory
+     ,PropertyCategory
+     ,TPropertyCategory
+     ,CPropertyCategory(..)
+     -- ** PropertyGrid
+     ,PropertyGrid
+     ,TPropertyGrid
+     ,CPropertyGrid(..)
+     -- ** PropertyGridEvent
+     ,PropertyGridEvent
+     ,TPropertyGridEvent
+     ,CPropertyGridEvent(..)
+     -- ** Protocol
+     ,Protocol
+     ,TProtocol
+     ,CProtocol(..)
+     -- ** Quantize
+     ,Quantize
+     ,TQuantize
+     ,CQuantize(..)
+     -- ** QueryCol
+     ,QueryCol
+     ,TQueryCol
+     ,CQueryCol(..)
+     -- ** QueryField
+     ,QueryField
+     ,TQueryField
+     ,CQueryField(..)
+     -- ** QueryLayoutInfoEvent
+     ,QueryLayoutInfoEvent
+     ,TQueryLayoutInfoEvent
+     ,CQueryLayoutInfoEvent(..)
+     -- ** QueryNewPaletteEvent
+     ,QueryNewPaletteEvent
+     ,TQueryNewPaletteEvent
+     ,CQueryNewPaletteEvent(..)
+     -- ** RadioBox
+     ,RadioBox
+     ,TRadioBox
+     ,CRadioBox(..)
+     -- ** RadioButton
+     ,RadioButton
+     ,TRadioButton
+     ,CRadioButton(..)
+     -- ** RealPoint
+     ,RealPoint
+     ,TRealPoint
+     ,CRealPoint(..)
+     -- ** RecordSet
+     ,RecordSet
+     ,TRecordSet
+     ,CRecordSet(..)
+     -- ** RegEx
+     ,RegEx
+     ,TRegEx
+     ,CRegEx(..)
+     -- ** Region
+     ,Region
+     ,TRegion
+     ,CRegion(..)
+     -- ** RegionIterator
+     ,RegionIterator
+     ,TRegionIterator
+     ,CRegionIterator(..)
+     -- ** RemotelyScrolledTreeCtrl
+     ,RemotelyScrolledTreeCtrl
+     ,TRemotelyScrolledTreeCtrl
+     ,CRemotelyScrolledTreeCtrl(..)
+     -- ** STCDoc
+     ,STCDoc
+     ,TSTCDoc
+     ,CSTCDoc(..)
+     -- ** SVGFileDC
+     ,SVGFileDC
+     ,TSVGFileDC
+     ,CSVGFileDC(..)
+     -- ** SashEvent
+     ,SashEvent
+     ,TSashEvent
+     ,CSashEvent(..)
+     -- ** SashLayoutWindow
+     ,SashLayoutWindow
+     ,TSashLayoutWindow
+     ,CSashLayoutWindow(..)
+     -- ** SashWindow
+     ,SashWindow
+     ,TSashWindow
+     ,CSashWindow(..)
+     -- ** ScopedArray
+     ,ScopedArray
+     ,TScopedArray
+     ,CScopedArray(..)
+     -- ** ScopedPtr
+     ,ScopedPtr
+     ,TScopedPtr
+     ,CScopedPtr(..)
+     -- ** ScreenDC
+     ,ScreenDC
+     ,TScreenDC
+     ,CScreenDC(..)
+     -- ** ScrollBar
+     ,ScrollBar
+     ,TScrollBar
+     ,CScrollBar(..)
+     -- ** ScrollEvent
+     ,ScrollEvent
+     ,TScrollEvent
+     ,CScrollEvent(..)
+     -- ** ScrollWinEvent
+     ,ScrollWinEvent
+     ,TScrollWinEvent
+     ,CScrollWinEvent(..)
+     -- ** ScrolledWindow
+     ,ScrolledWindow
+     ,TScrolledWindow
+     ,CScrolledWindow(..)
+     -- ** Semaphore
+     ,Semaphore
+     ,TSemaphore
+     ,CSemaphore(..)
+     -- ** Server
+     ,Server
+     ,TServer
+     ,CServer(..)
+     -- ** ServerBase
+     ,ServerBase
+     ,TServerBase
+     ,CServerBase(..)
+     -- ** SetCursorEvent
+     ,SetCursorEvent
+     ,TSetCursorEvent
+     ,CSetCursorEvent(..)
+     -- ** ShowEvent
+     ,ShowEvent
+     ,TShowEvent
+     ,CShowEvent(..)
+     -- ** SimpleHelpProvider
+     ,SimpleHelpProvider
+     ,TSimpleHelpProvider
+     ,CSimpleHelpProvider(..)
+     -- ** SingleChoiceDialog
+     ,SingleChoiceDialog
+     ,TSingleChoiceDialog
+     ,CSingleChoiceDialog(..)
+     -- ** SingleInstanceChecker
+     ,SingleInstanceChecker
+     ,TSingleInstanceChecker
+     ,CSingleInstanceChecker(..)
+     -- ** SizeEvent
+     ,SizeEvent
+     ,TSizeEvent
+     ,CSizeEvent(..)
+     -- ** Sizer
+     ,Sizer
+     ,TSizer
+     ,CSizer(..)
+     -- ** SizerItem
+     ,SizerItem
+     ,TSizerItem
+     ,CSizerItem(..)
+     -- ** Slider
+     ,Slider
+     ,TSlider
+     ,CSlider(..)
+     -- ** Slider95
+     ,Slider95
+     ,TSlider95
+     ,CSlider95(..)
+     -- ** SliderMSW
+     ,SliderMSW
+     ,TSliderMSW
+     ,CSliderMSW(..)
+     -- ** SockAddress
+     ,SockAddress
+     ,TSockAddress
+     ,CSockAddress(..)
+     -- ** SocketBase
+     ,SocketBase
+     ,TSocketBase
+     ,CSocketBase(..)
+     -- ** SocketClient
+     ,SocketClient
+     ,TSocketClient
+     ,CSocketClient(..)
+     -- ** SocketEvent
+     ,SocketEvent
+     ,TSocketEvent
+     ,CSocketEvent(..)
+     -- ** SocketInputStream
+     ,SocketInputStream
+     ,TSocketInputStream
+     ,CSocketInputStream(..)
+     -- ** SocketOutputStream
+     ,SocketOutputStream
+     ,TSocketOutputStream
+     ,CSocketOutputStream(..)
+     -- ** SocketServer
+     ,SocketServer
+     ,TSocketServer
+     ,CSocketServer(..)
+     -- ** Sound
+     ,Sound
+     ,TSound
+     ,CSound(..)
+     -- ** SpinButton
+     ,SpinButton
+     ,TSpinButton
+     ,CSpinButton(..)
+     -- ** SpinCtrl
+     ,SpinCtrl
+     ,TSpinCtrl
+     ,CSpinCtrl(..)
+     -- ** SpinEvent
+     ,SpinEvent
+     ,TSpinEvent
+     ,CSpinEvent(..)
+     -- ** SplashScreen
+     ,SplashScreen
+     ,TSplashScreen
+     ,CSplashScreen(..)
+     -- ** SplitterEvent
+     ,SplitterEvent
+     ,TSplitterEvent
+     ,CSplitterEvent(..)
+     -- ** SplitterScrolledWindow
+     ,SplitterScrolledWindow
+     ,TSplitterScrolledWindow
+     ,CSplitterScrolledWindow(..)
+     -- ** SplitterWindow
+     ,SplitterWindow
+     ,TSplitterWindow
+     ,CSplitterWindow(..)
+     -- ** StaticBitmap
+     ,StaticBitmap
+     ,TStaticBitmap
+     ,CStaticBitmap(..)
+     -- ** StaticBox
+     ,StaticBox
+     ,TStaticBox
+     ,CStaticBox(..)
+     -- ** StaticBoxSizer
+     ,StaticBoxSizer
+     ,TStaticBoxSizer
+     ,CStaticBoxSizer(..)
+     -- ** StaticLine
+     ,StaticLine
+     ,TStaticLine
+     ,CStaticLine(..)
+     -- ** StaticText
+     ,StaticText
+     ,TStaticText
+     ,CStaticText(..)
+     -- ** StatusBar
+     ,StatusBar
+     ,TStatusBar
+     ,CStatusBar(..)
+     -- ** StopWatch
+     ,StopWatch
+     ,TStopWatch
+     ,CStopWatch(..)
+     -- ** StreamBase
+     ,StreamBase
+     ,TStreamBase
+     ,CStreamBase(..)
+     -- ** StreamBuffer
+     ,StreamBuffer
+     ,TStreamBuffer
+     ,CStreamBuffer(..)
+     -- ** StreamToTextRedirector
+     ,StreamToTextRedirector
+     ,TStreamToTextRedirector
+     ,CStreamToTextRedirector(..)
+     -- ** StringBuffer
+     ,StringBuffer
+     ,TStringBuffer
+     ,CStringBuffer(..)
+     -- ** StringClientData
+     ,StringClientData
+     ,TStringClientData
+     ,CStringClientData(..)
+     -- ** StringList
+     ,StringList
+     ,TStringList
+     ,CStringList(..)
+     -- ** StringProperty
+     ,StringProperty
+     ,TStringProperty
+     ,CStringProperty(..)
+     -- ** StringTokenizer
+     ,StringTokenizer
+     ,TStringTokenizer
+     ,CStringTokenizer(..)
+     -- ** StyledTextCtrl
+     ,StyledTextCtrl
+     ,TStyledTextCtrl
+     ,CStyledTextCtrl(..)
+     -- ** StyledTextEvent
+     ,StyledTextEvent
+     ,TStyledTextEvent
+     ,CStyledTextEvent(..)
+     -- ** SysColourChangedEvent
+     ,SysColourChangedEvent
+     ,TSysColourChangedEvent
+     ,CSysColourChangedEvent(..)
+     -- ** SystemOptions
+     ,SystemOptions
+     ,TSystemOptions
+     ,CSystemOptions(..)
+     -- ** SystemSettings
+     ,SystemSettings
+     ,TSystemSettings
+     ,CSystemSettings(..)
+     -- ** TabCtrl
+     ,TabCtrl
+     ,TTabCtrl
+     ,CTabCtrl(..)
+     -- ** TabEvent
+     ,TabEvent
+     ,TTabEvent
+     ,CTabEvent(..)
+     -- ** TablesInUse
+     ,TablesInUse
+     ,TTablesInUse
+     ,CTablesInUse(..)
+     -- ** TaskBarIcon
+     ,TaskBarIcon
+     ,TTaskBarIcon
+     ,CTaskBarIcon(..)
+     -- ** TempFile
+     ,TempFile
+     ,TTempFile
+     ,CTempFile(..)
+     -- ** TextAttr
+     ,TextAttr
+     ,TTextAttr
+     ,CTextAttr(..)
+     -- ** TextCtrl
+     ,TextCtrl
+     ,TTextCtrl
+     ,CTextCtrl(..)
+     -- ** TextDataObject
+     ,TextDataObject
+     ,TTextDataObject
+     ,CTextDataObject(..)
+     -- ** TextDropTarget
+     ,TextDropTarget
+     ,TTextDropTarget
+     ,CTextDropTarget(..)
+     -- ** TextEntryDialog
+     ,TextEntryDialog
+     ,TTextEntryDialog
+     ,CTextEntryDialog(..)
+     -- ** TextFile
+     ,TextFile
+     ,TTextFile
+     ,CTextFile(..)
+     -- ** TextInputStream
+     ,TextInputStream
+     ,TTextInputStream
+     ,CTextInputStream(..)
+     -- ** TextOutputStream
+     ,TextOutputStream
+     ,TTextOutputStream
+     ,CTextOutputStream(..)
+     -- ** TextValidator
+     ,TextValidator
+     ,TTextValidator
+     ,CTextValidator(..)
+     -- ** ThinSplitterWindow
+     ,ThinSplitterWindow
+     ,TThinSplitterWindow
+     ,CThinSplitterWindow(..)
+     -- ** Thread
+     ,Thread
+     ,TThread
+     ,CThread(..)
+     -- ** Time
+     ,Time
+     ,TTime
+     ,CTime(..)
+     -- ** TimeSpan
+     ,TimeSpan
+     ,TTimeSpan
+     ,CTimeSpan(..)
+     -- ** Timer
+     ,Timer
+     ,TTimer
+     ,CTimer(..)
+     -- ** TimerBase
+     ,TimerBase
+     ,TTimerBase
+     ,CTimerBase(..)
+     -- ** TimerEvent
+     ,TimerEvent
+     ,TTimerEvent
+     ,CTimerEvent(..)
+     -- ** TimerEx
+     ,TimerEx
+     ,TTimerEx
+     ,CTimerEx(..)
+     -- ** TimerRunner
+     ,TimerRunner
+     ,TTimerRunner
+     ,CTimerRunner(..)
+     -- ** TipProvider
+     ,TipProvider
+     ,TTipProvider
+     ,CTipProvider(..)
+     -- ** TipWindow
+     ,TipWindow
+     ,TTipWindow
+     ,CTipWindow(..)
+     -- ** ToggleButton
+     ,ToggleButton
+     ,TToggleButton
+     ,CToggleButton(..)
+     -- ** ToolBar
+     ,ToolBar
+     ,TToolBar
+     ,CToolBar(..)
+     -- ** ToolBarBase
+     ,ToolBarBase
+     ,TToolBarBase
+     ,CToolBarBase(..)
+     -- ** ToolLayoutItem
+     ,ToolLayoutItem
+     ,TToolLayoutItem
+     ,CToolLayoutItem(..)
+     -- ** ToolTip
+     ,ToolTip
+     ,TToolTip
+     ,CToolTip(..)
+     -- ** ToolWindow
+     ,ToolWindow
+     ,TToolWindow
+     ,CToolWindow(..)
+     -- ** TopLevelWindow
+     ,TopLevelWindow
+     ,TTopLevelWindow
+     ,CTopLevelWindow(..)
+     -- ** TreeCompanionWindow
+     ,TreeCompanionWindow
+     ,TTreeCompanionWindow
+     ,CTreeCompanionWindow(..)
+     -- ** TreeCtrl
+     ,TreeCtrl
+     ,TTreeCtrl
+     ,CTreeCtrl(..)
+     -- ** TreeEvent
+     ,TreeEvent
+     ,TTreeEvent
+     ,CTreeEvent(..)
+     -- ** TreeItemData
+     ,TreeItemData
+     ,TTreeItemData
+     ,CTreeItemData(..)
+     -- ** TreeItemId
+     ,TreeItemId
+     ,TTreeItemId
+     ,CTreeItemId(..)
+     -- ** TreeLayout
+     ,TreeLayout
+     ,TTreeLayout
+     ,CTreeLayout(..)
+     -- ** TreeLayoutStored
+     ,TreeLayoutStored
+     ,TTreeLayoutStored
+     ,CTreeLayoutStored(..)
+     -- ** URL
+     ,URL
+     ,TURL
+     ,CURL(..)
+     -- ** UpdateUIEvent
+     ,UpdateUIEvent
+     ,TUpdateUIEvent
+     ,CUpdateUIEvent(..)
+     -- ** Validator
+     ,Validator
+     ,TValidator
+     ,CValidator(..)
+     -- ** Variant
+     ,Variant
+     ,TVariant
+     ,CVariant(..)
+     -- ** VariantData
+     ,VariantData
+     ,TVariantData
+     ,CVariantData(..)
+     -- ** View
+     ,View
+     ,TView
+     ,CView(..)
+     -- ** WXCApp
+     ,WXCApp
+     ,TWXCApp
+     ,CWXCApp(..)
+     -- ** WXCArtProv
+     ,WXCArtProv
+     ,TWXCArtProv
+     ,CWXCArtProv(..)
+     -- ** WXCClient
+     ,WXCClient
+     ,TWXCClient
+     ,CWXCClient(..)
+     -- ** WXCCommand
+     ,WXCCommand
+     ,TWXCCommand
+     ,CWXCCommand(..)
+     -- ** WXCConnection
+     ,WXCConnection
+     ,TWXCConnection
+     ,CWXCConnection(..)
+     -- ** WXCDragDataObject
+     ,WXCDragDataObject
+     ,TWXCDragDataObject
+     ,CWXCDragDataObject(..)
+     -- ** WXCDropTarget
+     ,WXCDropTarget
+     ,TWXCDropTarget
+     ,CWXCDropTarget(..)
+     -- ** WXCFileDropTarget
+     ,WXCFileDropTarget
+     ,TWXCFileDropTarget
+     ,CWXCFileDropTarget(..)
+     -- ** WXCGridTable
+     ,WXCGridTable
+     ,TWXCGridTable
+     ,CWXCGridTable(..)
+     -- ** WXCHtmlEvent
+     ,WXCHtmlEvent
+     ,TWXCHtmlEvent
+     ,CWXCHtmlEvent(..)
+     -- ** WXCHtmlWindow
+     ,WXCHtmlWindow
+     ,TWXCHtmlWindow
+     ,CWXCHtmlWindow(..)
+     -- ** WXCLocale
+     ,WXCLocale
+     ,TWXCLocale
+     ,CWXCLocale(..)
+     -- ** WXCLog
+     ,WXCLog
+     ,TWXCLog
+     ,CWXCLog(..)
+     -- ** WXCMessageParameters
+     ,WXCMessageParameters
+     ,TWXCMessageParameters
+     ,CWXCMessageParameters(..)
+     -- ** WXCPlotCurve
+     ,WXCPlotCurve
+     ,TWXCPlotCurve
+     ,CWXCPlotCurve(..)
+     -- ** WXCPreviewControlBar
+     ,WXCPreviewControlBar
+     ,TWXCPreviewControlBar
+     ,CWXCPreviewControlBar(..)
+     -- ** WXCPreviewFrame
+     ,WXCPreviewFrame
+     ,TWXCPreviewFrame
+     ,CWXCPreviewFrame(..)
+     -- ** WXCPrintEvent
+     ,WXCPrintEvent
+     ,TWXCPrintEvent
+     ,CWXCPrintEvent(..)
+     -- ** WXCPrintout
+     ,WXCPrintout
+     ,TWXCPrintout
+     ,CWXCPrintout(..)
+     -- ** WXCPrintoutHandler
+     ,WXCPrintoutHandler
+     ,TWXCPrintoutHandler
+     ,CWXCPrintoutHandler(..)
+     -- ** WXCServer
+     ,WXCServer
+     ,TWXCServer
+     ,CWXCServer(..)
+     -- ** WXCTextDropTarget
+     ,WXCTextDropTarget
+     ,TWXCTextDropTarget
+     ,CWXCTextDropTarget(..)
+     -- ** WXCTextValidator
+     ,WXCTextValidator
+     ,TWXCTextValidator
+     ,CWXCTextValidator(..)
+     -- ** WXCTreeItemData
+     ,WXCTreeItemData
+     ,TWXCTreeItemData
+     ,CWXCTreeItemData(..)
+     -- ** Window
+     ,Window
+     ,TWindow
+     ,CWindow(..)
+     -- ** WindowCreateEvent
+     ,WindowCreateEvent
+     ,TWindowCreateEvent
+     ,CWindowCreateEvent(..)
+     -- ** WindowDC
+     ,WindowDC
+     ,TWindowDC
+     ,CWindowDC(..)
+     -- ** WindowDestroyEvent
+     ,WindowDestroyEvent
+     ,TWindowDestroyEvent
+     ,CWindowDestroyEvent(..)
+     -- ** WindowDisabler
+     ,WindowDisabler
+     ,TWindowDisabler
+     ,CWindowDisabler(..)
+     -- ** Wizard
+     ,Wizard
+     ,TWizard
+     ,CWizard(..)
+     -- ** WizardEvent
+     ,WizardEvent
+     ,TWizardEvent
+     ,CWizardEvent(..)
+     -- ** WizardPage
+     ,WizardPage
+     ,TWizardPage
+     ,CWizardPage(..)
+     -- ** WizardPageSimple
+     ,WizardPageSimple
+     ,TWizardPageSimple
+     ,CWizardPageSimple(..)
+     -- ** WxArray
+     ,WxArray
+     ,TWxArray
+     ,CWxArray(..)
+     -- ** WxDllLoader
+     ,WxDllLoader
+     ,TWxDllLoader
+     ,CWxDllLoader(..)
+     -- ** WxExpr
+     ,WxExpr
+     ,TWxExpr
+     ,CWxExpr(..)
+     -- ** WxManagedPtr
+     ,WxManagedPtr
+     ,TWxManagedPtr
+     ,CWxManagedPtr(..)
+     -- ** WxObject
+     ,WxObject
+     ,TWxObject
+     ,CWxObject(..)
+     -- ** WxPoint
+     ,WxPoint
+     ,TWxPoint
+     ,CWxPoint(..)
+     -- ** WxRect
+     ,WxRect
+     ,TWxRect
+     ,CWxRect(..)
+     -- ** WxSize
+     ,WxSize
+     ,TWxSize
+     ,CWxSize(..)
+     -- ** WxString
+     ,WxString
+     ,TWxString
+     ,CWxString(..)
+     -- ** XmlResource
+     ,XmlResource
+     ,TXmlResource
+     ,CXmlResource(..)
+     -- ** XmlResourceHandler
+     ,XmlResourceHandler
+     ,TXmlResourceHandler
+     ,CXmlResourceHandler(..)
+     -- ** ZipInputStream
+     ,ZipInputStream
+     ,TZipInputStream
+     ,CZipInputStream(..)
+     -- ** ZlibInputStream
+     ,ZlibInputStream
+     ,TZlibInputStream
+     ,CZlibInputStream(..)
+     -- ** ZlibOutputStream
+     ,ZlibOutputStream
+     ,TZlibOutputStream
+     ,CZlibOutputStream(..)
+    ) where
+
+import Graphics.UI.WXCore.WxcObject
+
+-- | Pointer to an object of type 'ConfigBase'.
+type ConfigBase a  = Object (CConfigBase a)
+-- | Inheritance type of the ConfigBase class.
+type TConfigBase a  = CConfigBase a
+-- | Abstract type of the ConfigBase class.
+data CConfigBase a  = CConfigBase
+
+-- | Pointer to an object of type 'FileConfig', derived from 'ConfigBase'.
+type FileConfig a  = ConfigBase (CFileConfig a)
+-- | Inheritance type of the FileConfig class.
+type TFileConfig a  = TConfigBase (CFileConfig a)
+-- | Abstract type of the FileConfig class.
+data CFileConfig a  = CFileConfig
+
+-- | Pointer to an object of type 'GridCellWorker'.
+type GridCellWorker a  = Object (CGridCellWorker a)
+-- | Inheritance type of the GridCellWorker class.
+type TGridCellWorker a  = CGridCellWorker a
+-- | Abstract type of the GridCellWorker class.
+data CGridCellWorker a  = CGridCellWorker
+
+-- | Pointer to an object of type 'GridCellEditor', derived from 'GridCellWorker'.
+type GridCellEditor a  = GridCellWorker (CGridCellEditor a)
+-- | Inheritance type of the GridCellEditor class.
+type TGridCellEditor a  = TGridCellWorker (CGridCellEditor a)
+-- | Abstract type of the GridCellEditor class.
+data CGridCellEditor a  = CGridCellEditor
+
+-- | Pointer to an object of type 'GridCellTextEditor', derived from 'GridCellEditor'.
+type GridCellTextEditor a  = GridCellEditor (CGridCellTextEditor a)
+-- | Inheritance type of the GridCellTextEditor class.
+type TGridCellTextEditor a  = TGridCellEditor (CGridCellTextEditor a)
+-- | Abstract type of the GridCellTextEditor class.
+data CGridCellTextEditor a  = CGridCellTextEditor
+
+-- | Pointer to an object of type 'GridCellFloatEditor', derived from 'GridCellTextEditor'.
+type GridCellFloatEditor a  = GridCellTextEditor (CGridCellFloatEditor a)
+-- | Inheritance type of the GridCellFloatEditor class.
+type TGridCellFloatEditor a  = TGridCellTextEditor (CGridCellFloatEditor a)
+-- | Abstract type of the GridCellFloatEditor class.
+data CGridCellFloatEditor a  = CGridCellFloatEditor
+
+-- | Pointer to an object of type 'GridCellTextEnterEditor', derived from 'GridCellTextEditor'.
+type GridCellTextEnterEditor a  = GridCellTextEditor (CGridCellTextEnterEditor a)
+-- | Inheritance type of the GridCellTextEnterEditor class.
+type TGridCellTextEnterEditor a  = TGridCellTextEditor (CGridCellTextEnterEditor a)
+-- | Abstract type of the GridCellTextEnterEditor class.
+data CGridCellTextEnterEditor a  = CGridCellTextEnterEditor
+
+-- | Pointer to an object of type 'GridCellNumberEditor', derived from 'GridCellTextEditor'.
+type GridCellNumberEditor a  = GridCellTextEditor (CGridCellNumberEditor a)
+-- | Inheritance type of the GridCellNumberEditor class.
+type TGridCellNumberEditor a  = TGridCellTextEditor (CGridCellNumberEditor a)
+-- | Abstract type of the GridCellNumberEditor class.
+data CGridCellNumberEditor a  = CGridCellNumberEditor
+
+-- | Pointer to an object of type 'GridCellChoiceEditor', derived from 'GridCellEditor'.
+type GridCellChoiceEditor a  = GridCellEditor (CGridCellChoiceEditor a)
+-- | Inheritance type of the GridCellChoiceEditor class.
+type TGridCellChoiceEditor a  = TGridCellEditor (CGridCellChoiceEditor a)
+-- | Abstract type of the GridCellChoiceEditor class.
+data CGridCellChoiceEditor a  = CGridCellChoiceEditor
+
+-- | Pointer to an object of type 'GridCellBoolEditor', derived from 'GridCellEditor'.
+type GridCellBoolEditor a  = GridCellEditor (CGridCellBoolEditor a)
+-- | Inheritance type of the GridCellBoolEditor class.
+type TGridCellBoolEditor a  = TGridCellEditor (CGridCellBoolEditor a)
+-- | Abstract type of the GridCellBoolEditor class.
+data CGridCellBoolEditor a  = CGridCellBoolEditor
+
+-- | Pointer to an object of type 'GridCellRenderer', derived from 'GridCellWorker'.
+type GridCellRenderer a  = GridCellWorker (CGridCellRenderer a)
+-- | Inheritance type of the GridCellRenderer class.
+type TGridCellRenderer a  = TGridCellWorker (CGridCellRenderer a)
+-- | Abstract type of the GridCellRenderer class.
+data CGridCellRenderer a  = CGridCellRenderer
+
+-- | Pointer to an object of type 'GridCellStringRenderer', derived from 'GridCellRenderer'.
+type GridCellStringRenderer a  = GridCellRenderer (CGridCellStringRenderer a)
+-- | Inheritance type of the GridCellStringRenderer class.
+type TGridCellStringRenderer a  = TGridCellRenderer (CGridCellStringRenderer a)
+-- | Abstract type of the GridCellStringRenderer class.
+data CGridCellStringRenderer a  = CGridCellStringRenderer
+
+-- | Pointer to an object of type 'GridCellFloatRenderer', derived from 'GridCellStringRenderer'.
+type GridCellFloatRenderer a  = GridCellStringRenderer (CGridCellFloatRenderer a)
+-- | Inheritance type of the GridCellFloatRenderer class.
+type TGridCellFloatRenderer a  = TGridCellStringRenderer (CGridCellFloatRenderer a)
+-- | Abstract type of the GridCellFloatRenderer class.
+data CGridCellFloatRenderer a  = CGridCellFloatRenderer
+
+-- | Pointer to an object of type 'GridCellAutoWrapStringRenderer', derived from 'GridCellStringRenderer'.
+type GridCellAutoWrapStringRenderer a  = GridCellStringRenderer (CGridCellAutoWrapStringRenderer a)
+-- | Inheritance type of the GridCellAutoWrapStringRenderer class.
+type TGridCellAutoWrapStringRenderer a  = TGridCellStringRenderer (CGridCellAutoWrapStringRenderer a)
+-- | Abstract type of the GridCellAutoWrapStringRenderer class.
+data CGridCellAutoWrapStringRenderer a  = CGridCellAutoWrapStringRenderer
+
+-- | Pointer to an object of type 'GridCellNumberRenderer', derived from 'GridCellStringRenderer'.
+type GridCellNumberRenderer a  = GridCellStringRenderer (CGridCellNumberRenderer a)
+-- | Inheritance type of the GridCellNumberRenderer class.
+type TGridCellNumberRenderer a  = TGridCellStringRenderer (CGridCellNumberRenderer a)
+-- | Abstract type of the GridCellNumberRenderer class.
+data CGridCellNumberRenderer a  = CGridCellNumberRenderer
+
+-- | Pointer to an object of type 'GridCellBoolRenderer', derived from 'GridCellRenderer'.
+type GridCellBoolRenderer a  = GridCellRenderer (CGridCellBoolRenderer a)
+-- | Inheritance type of the GridCellBoolRenderer class.
+type TGridCellBoolRenderer a  = TGridCellRenderer (CGridCellBoolRenderer a)
+-- | Abstract type of the GridCellBoolRenderer class.
+data CGridCellBoolRenderer a  = CGridCellBoolRenderer
+
+-- | Pointer to an object of type 'WxObject'.
+type WxObject a  = Object (CWxObject a)
+-- | Inheritance type of the WxObject class.
+type TWxObject a  = CWxObject a
+-- | Abstract type of the WxObject class.
+data CWxObject a  = CWxObject
+
+-- | Pointer to an object of type 'EvtHandler', derived from 'WxObject'.
+type EvtHandler a  = WxObject (CEvtHandler a)
+-- | Inheritance type of the EvtHandler class.
+type TEvtHandler a  = TWxObject (CEvtHandler a)
+-- | Abstract type of the EvtHandler class.
+data CEvtHandler a  = CEvtHandler
+
+-- | Pointer to an object of type 'Window', derived from 'EvtHandler'.
+type Window a  = EvtHandler (CWindow a)
+-- | Inheritance type of the Window class.
+type TWindow a  = TEvtHandler (CWindow a)
+-- | Abstract type of the Window class.
+data CWindow a  = CWindow
+
+-- | Pointer to an object of type 'Panel', derived from 'Window'.
+type Panel a  = Window (CPanel a)
+-- | Inheritance type of the Panel class.
+type TPanel a  = TWindow (CPanel a)
+-- | Abstract type of the Panel class.
+data CPanel a  = CPanel
+
+-- | Pointer to an object of type 'ScrolledWindow', derived from 'Panel'.
+type ScrolledWindow a  = Panel (CScrolledWindow a)
+-- | Inheritance type of the ScrolledWindow class.
+type TScrolledWindow a  = TPanel (CScrolledWindow a)
+-- | Abstract type of the ScrolledWindow class.
+data CScrolledWindow a  = CScrolledWindow
+
+-- | Pointer to an object of type 'Grid', derived from 'ScrolledWindow'.
+type Grid a  = ScrolledWindow (CGrid a)
+-- | Inheritance type of the Grid class.
+type TGrid a  = TScrolledWindow (CGrid a)
+-- | Abstract type of the Grid class.
+data CGrid a  = CGrid
+
+-- | Pointer to an object of type 'PlotWindow', derived from 'ScrolledWindow'.
+type PlotWindow a  = ScrolledWindow (CPlotWindow a)
+-- | Inheritance type of the PlotWindow class.
+type TPlotWindow a  = TScrolledWindow (CPlotWindow a)
+-- | Abstract type of the PlotWindow class.
+data CPlotWindow a  = CPlotWindow
+
+-- | Pointer to an object of type 'SplitterScrolledWindow', derived from 'ScrolledWindow'.
+type SplitterScrolledWindow a  = ScrolledWindow (CSplitterScrolledWindow a)
+-- | Inheritance type of the SplitterScrolledWindow class.
+type TSplitterScrolledWindow a  = TScrolledWindow (CSplitterScrolledWindow a)
+-- | Abstract type of the SplitterScrolledWindow class.
+data CSplitterScrolledWindow a  = CSplitterScrolledWindow
+
+-- | Pointer to an object of type 'PreviewCanvas', derived from 'ScrolledWindow'.
+type PreviewCanvas a  = ScrolledWindow (CPreviewCanvas a)
+-- | Inheritance type of the PreviewCanvas class.
+type TPreviewCanvas a  = TScrolledWindow (CPreviewCanvas a)
+-- | Abstract type of the PreviewCanvas class.
+data CPreviewCanvas a  = CPreviewCanvas
+
+-- | Pointer to an object of type 'HtmlWindow', derived from 'ScrolledWindow'.
+type HtmlWindow a  = ScrolledWindow (CHtmlWindow a)
+-- | Inheritance type of the HtmlWindow class.
+type THtmlWindow a  = TScrolledWindow (CHtmlWindow a)
+-- | Abstract type of the HtmlWindow class.
+data CHtmlWindow a  = CHtmlWindow
+
+-- | Pointer to an object of type 'WXCHtmlWindow', derived from 'HtmlWindow'.
+type WXCHtmlWindow a  = HtmlWindow (CWXCHtmlWindow a)
+-- | Inheritance type of the WXCHtmlWindow class.
+type TWXCHtmlWindow a  = THtmlWindow (CWXCHtmlWindow a)
+-- | Abstract type of the WXCHtmlWindow class.
+data CWXCHtmlWindow a  = CWXCHtmlWindow
+
+-- | Pointer to an object of type 'PreviewControlBar', derived from 'Panel'.
+type PreviewControlBar a  = Panel (CPreviewControlBar a)
+-- | Inheritance type of the PreviewControlBar class.
+type TPreviewControlBar a  = TPanel (CPreviewControlBar a)
+-- | Abstract type of the PreviewControlBar class.
+data CPreviewControlBar a  = CPreviewControlBar
+
+-- | Pointer to an object of type 'WXCPreviewControlBar', derived from 'PreviewControlBar'.
+type WXCPreviewControlBar a  = PreviewControlBar (CWXCPreviewControlBar a)
+-- | Inheritance type of the WXCPreviewControlBar class.
+type TWXCPreviewControlBar a  = TPreviewControlBar (CWXCPreviewControlBar a)
+-- | Abstract type of the WXCPreviewControlBar class.
+data CWXCPreviewControlBar a  = CWXCPreviewControlBar
+
+-- | Pointer to an object of type 'WizardPage', derived from 'Panel'.
+type WizardPage a  = Panel (CWizardPage a)
+-- | Inheritance type of the WizardPage class.
+type TWizardPage a  = TPanel (CWizardPage a)
+-- | Abstract type of the WizardPage class.
+data CWizardPage a  = CWizardPage
+
+-- | Pointer to an object of type 'WizardPageSimple', derived from 'WizardPage'.
+type WizardPageSimple a  = WizardPage (CWizardPageSimple a)
+-- | Inheritance type of the WizardPageSimple class.
+type TWizardPageSimple a  = TWizardPage (CWizardPageSimple a)
+-- | Abstract type of the WizardPageSimple class.
+data CWizardPageSimple a  = CWizardPageSimple
+
+-- | Pointer to an object of type 'NewBitmapButton', derived from 'Panel'.
+type NewBitmapButton a  = Panel (CNewBitmapButton a)
+-- | Inheritance type of the NewBitmapButton class.
+type TNewBitmapButton a  = TPanel (CNewBitmapButton a)
+-- | Abstract type of the NewBitmapButton class.
+data CNewBitmapButton a  = CNewBitmapButton
+
+-- | Pointer to an object of type 'EditableListBox', derived from 'Panel'.
+type EditableListBox a  = Panel (CEditableListBox a)
+-- | Inheritance type of the EditableListBox class.
+type TEditableListBox a  = TPanel (CEditableListBox a)
+-- | Abstract type of the EditableListBox class.
+data CEditableListBox a  = CEditableListBox
+
+-- | Pointer to an object of type 'DynamicSashWindow', derived from 'Window'.
+type DynamicSashWindow a  = Window (CDynamicSashWindow a)
+-- | Inheritance type of the DynamicSashWindow class.
+type TDynamicSashWindow a  = TWindow (CDynamicSashWindow a)
+-- | Abstract type of the DynamicSashWindow class.
+data CDynamicSashWindow a  = CDynamicSashWindow
+
+-- | Pointer to an object of type 'StatusBar', derived from 'Window'.
+type StatusBar a  = Window (CStatusBar a)
+-- | Inheritance type of the StatusBar class.
+type TStatusBar a  = TWindow (CStatusBar a)
+-- | Abstract type of the StatusBar class.
+data CStatusBar a  = CStatusBar
+
+-- | Pointer to an object of type 'MediaCtrl', derived from 'Window'.
+type MediaCtrl a  = Window (CMediaCtrl a)
+-- | Inheritance type of the MediaCtrl class.
+type TMediaCtrl a  = TWindow (CMediaCtrl a)
+-- | Abstract type of the MediaCtrl class.
+data CMediaCtrl a  = CMediaCtrl
+
+-- | Pointer to an object of type 'TreeCompanionWindow', derived from 'Window'.
+type TreeCompanionWindow a  = Window (CTreeCompanionWindow a)
+-- | Inheritance type of the TreeCompanionWindow class.
+type TTreeCompanionWindow a  = TWindow (CTreeCompanionWindow a)
+-- | Abstract type of the TreeCompanionWindow class.
+data CTreeCompanionWindow a  = CTreeCompanionWindow
+
+-- | Pointer to an object of type 'SplitterWindow', derived from 'Window'.
+type SplitterWindow a  = Window (CSplitterWindow a)
+-- | Inheritance type of the SplitterWindow class.
+type TSplitterWindow a  = TWindow (CSplitterWindow a)
+-- | Abstract type of the SplitterWindow class.
+data CSplitterWindow a  = CSplitterWindow
+
+-- | Pointer to an object of type 'ThinSplitterWindow', derived from 'SplitterWindow'.
+type ThinSplitterWindow a  = SplitterWindow (CThinSplitterWindow a)
+-- | Inheritance type of the ThinSplitterWindow class.
+type TThinSplitterWindow a  = TSplitterWindow (CThinSplitterWindow a)
+-- | Abstract type of the ThinSplitterWindow class.
+data CThinSplitterWindow a  = CThinSplitterWindow
+
+-- | Pointer to an object of type 'SashWindow', derived from 'Window'.
+type SashWindow a  = Window (CSashWindow a)
+-- | Inheritance type of the SashWindow class.
+type TSashWindow a  = TWindow (CSashWindow a)
+-- | Abstract type of the SashWindow class.
+data CSashWindow a  = CSashWindow
+
+-- | Pointer to an object of type 'SashLayoutWindow', derived from 'SashWindow'.
+type SashLayoutWindow a  = SashWindow (CSashLayoutWindow a)
+-- | Inheritance type of the SashLayoutWindow class.
+type TSashLayoutWindow a  = TSashWindow (CSashLayoutWindow a)
+-- | Abstract type of the SashLayoutWindow class.
+data CSashLayoutWindow a  = CSashLayoutWindow
+
+-- | Pointer to an object of type 'PopupWindow', derived from 'Window'.
+type PopupWindow a  = Window (CPopupWindow a)
+-- | Inheritance type of the PopupWindow class.
+type TPopupWindow a  = TWindow (CPopupWindow a)
+-- | Abstract type of the PopupWindow class.
+data CPopupWindow a  = CPopupWindow
+
+-- | Pointer to an object of type 'PopupTransientWindow', derived from 'PopupWindow'.
+type PopupTransientWindow a  = PopupWindow (CPopupTransientWindow a)
+-- | Inheritance type of the PopupTransientWindow class.
+type TPopupTransientWindow a  = TPopupWindow (CPopupTransientWindow a)
+-- | Abstract type of the PopupTransientWindow class.
+data CPopupTransientWindow a  = CPopupTransientWindow
+
+-- | Pointer to an object of type 'TipWindow', derived from 'PopupTransientWindow'.
+type TipWindow a  = PopupTransientWindow (CTipWindow a)
+-- | Inheritance type of the TipWindow class.
+type TTipWindow a  = TPopupTransientWindow (CTipWindow a)
+-- | Abstract type of the TipWindow class.
+data CTipWindow a  = CTipWindow
+
+-- | Pointer to an object of type 'MDIClientWindow', derived from 'Window'.
+type MDIClientWindow a  = Window (CMDIClientWindow a)
+-- | Inheritance type of the MDIClientWindow class.
+type TMDIClientWindow a  = TWindow (CMDIClientWindow a)
+-- | Abstract type of the MDIClientWindow class.
+data CMDIClientWindow a  = CMDIClientWindow
+
+-- | Pointer to an object of type 'GLCanvas', derived from 'Window'.
+type GLCanvas a  = Window (CGLCanvas a)
+-- | Inheritance type of the GLCanvas class.
+type TGLCanvas a  = TWindow (CGLCanvas a)
+-- | Abstract type of the GLCanvas class.
+data CGLCanvas a  = CGLCanvas
+
+-- | Pointer to an object of type 'DrawWindow', derived from 'Window'.
+type DrawWindow a  = Window (CDrawWindow a)
+-- | Inheritance type of the DrawWindow class.
+type TDrawWindow a  = TWindow (CDrawWindow a)
+-- | Abstract type of the DrawWindow class.
+data CDrawWindow a  = CDrawWindow
+
+-- | Pointer to an object of type 'Control', derived from 'Window'.
+type Control a  = Window (CControl a)
+-- | Inheritance type of the Control class.
+type TControl a  = TWindow (CControl a)
+-- | Abstract type of the Control class.
+data CControl a  = CControl
+
+-- | Pointer to an object of type 'Slider', derived from 'Control'.
+type Slider a  = Control (CSlider a)
+-- | Inheritance type of the Slider class.
+type TSlider a  = TControl (CSlider a)
+-- | Abstract type of the Slider class.
+data CSlider a  = CSlider
+
+-- | Pointer to an object of type 'SliderMSW', derived from 'Slider'.
+type SliderMSW a  = Slider (CSliderMSW a)
+-- | Inheritance type of the SliderMSW class.
+type TSliderMSW a  = TSlider (CSliderMSW a)
+-- | Abstract type of the SliderMSW class.
+data CSliderMSW a  = CSliderMSW
+
+-- | Pointer to an object of type 'Slider95', derived from 'Slider'.
+type Slider95 a  = Slider (CSlider95 a)
+-- | Inheritance type of the Slider95 class.
+type TSlider95 a  = TSlider (CSlider95 a)
+-- | Abstract type of the Slider95 class.
+data CSlider95 a  = CSlider95
+
+-- | Pointer to an object of type 'Gauge', derived from 'Control'.
+type Gauge a  = Control (CGauge a)
+-- | Inheritance type of the Gauge class.
+type TGauge a  = TControl (CGauge a)
+-- | Abstract type of the Gauge class.
+data CGauge a  = CGauge
+
+-- | Pointer to an object of type 'GaugeMSW', derived from 'Gauge'.
+type GaugeMSW a  = Gauge (CGaugeMSW a)
+-- | Inheritance type of the GaugeMSW class.
+type TGaugeMSW a  = TGauge (CGaugeMSW a)
+-- | Abstract type of the GaugeMSW class.
+data CGaugeMSW a  = CGaugeMSW
+
+-- | Pointer to an object of type 'Gauge95', derived from 'Gauge'.
+type Gauge95 a  = Gauge (CGauge95 a)
+-- | Inheritance type of the Gauge95 class.
+type TGauge95 a  = TGauge (CGauge95 a)
+-- | Abstract type of the Gauge95 class.
+data CGauge95 a  = CGauge95
+
+-- | Pointer to an object of type 'StyledTextCtrl', derived from 'Control'.
+type StyledTextCtrl a  = Control (CStyledTextCtrl a)
+-- | Inheritance type of the StyledTextCtrl class.
+type TStyledTextCtrl a  = TControl (CStyledTextCtrl a)
+-- | Abstract type of the StyledTextCtrl class.
+data CStyledTextCtrl a  = CStyledTextCtrl
+
+-- | Pointer to an object of type 'PickerBase', derived from 'Control'.
+type PickerBase a  = Control (CPickerBase a)
+-- | Inheritance type of the PickerBase class.
+type TPickerBase a  = TControl (CPickerBase a)
+-- | Abstract type of the PickerBase class.
+data CPickerBase a  = CPickerBase
+
+-- | Pointer to an object of type 'ColourPickerCtrl', derived from 'PickerBase'.
+type ColourPickerCtrl a  = PickerBase (CColourPickerCtrl a)
+-- | Inheritance type of the ColourPickerCtrl class.
+type TColourPickerCtrl a  = TPickerBase (CColourPickerCtrl a)
+-- | Abstract type of the ColourPickerCtrl class.
+data CColourPickerCtrl a  = CColourPickerCtrl
+
+-- | Pointer to an object of type 'HyperlinkCtrl', derived from 'Control'.
+type HyperlinkCtrl a  = Control (CHyperlinkCtrl a)
+-- | Inheritance type of the HyperlinkCtrl class.
+type THyperlinkCtrl a  = TControl (CHyperlinkCtrl a)
+-- | Abstract type of the HyperlinkCtrl class.
+data CHyperlinkCtrl a  = CHyperlinkCtrl
+
+-- | Pointer to an object of type 'PropertyGrid', derived from 'Control'.
+type PropertyGrid a  = Control (CPropertyGrid a)
+-- | Inheritance type of the PropertyGrid class.
+type TPropertyGrid a  = TControl (CPropertyGrid a)
+-- | Abstract type of the PropertyGrid class.
+data CPropertyGrid a  = CPropertyGrid
+
+-- | Pointer to an object of type 'TreeCtrl', derived from 'Control'.
+type TreeCtrl a  = Control (CTreeCtrl a)
+-- | Inheritance type of the TreeCtrl class.
+type TTreeCtrl a  = TControl (CTreeCtrl a)
+-- | Abstract type of the TreeCtrl class.
+data CTreeCtrl a  = CTreeCtrl
+
+-- | Pointer to an object of type 'RemotelyScrolledTreeCtrl', derived from 'TreeCtrl'.
+type RemotelyScrolledTreeCtrl a  = TreeCtrl (CRemotelyScrolledTreeCtrl a)
+-- | Inheritance type of the RemotelyScrolledTreeCtrl class.
+type TRemotelyScrolledTreeCtrl a  = TTreeCtrl (CRemotelyScrolledTreeCtrl a)
+-- | Abstract type of the RemotelyScrolledTreeCtrl class.
+data CRemotelyScrolledTreeCtrl a  = CRemotelyScrolledTreeCtrl
+
+-- | Pointer to an object of type 'ToolBarBase', derived from 'Control'.
+type ToolBarBase a  = Control (CToolBarBase a)
+-- | Inheritance type of the ToolBarBase class.
+type TToolBarBase a  = TControl (CToolBarBase a)
+-- | Abstract type of the ToolBarBase class.
+data CToolBarBase a  = CToolBarBase
+
+-- | Pointer to an object of type 'DynamicToolBar', derived from 'ToolBarBase'.
+type DynamicToolBar a  = ToolBarBase (CDynamicToolBar a)
+-- | Inheritance type of the DynamicToolBar class.
+type TDynamicToolBar a  = TToolBarBase (CDynamicToolBar a)
+-- | Abstract type of the DynamicToolBar class.
+data CDynamicToolBar a  = CDynamicToolBar
+
+-- | Pointer to an object of type 'ToolBar', derived from 'ToolBarBase'.
+type ToolBar a  = ToolBarBase (CToolBar a)
+-- | Inheritance type of the ToolBar class.
+type TToolBar a  = TToolBarBase (CToolBar a)
+-- | Abstract type of the ToolBar class.
+data CToolBar a  = CToolBar
+
+-- | Pointer to an object of type 'ToggleButton', derived from 'Control'.
+type ToggleButton a  = Control (CToggleButton a)
+-- | Inheritance type of the ToggleButton class.
+type TToggleButton a  = TControl (CToggleButton a)
+-- | Abstract type of the ToggleButton class.
+data CToggleButton a  = CToggleButton
+
+-- | Pointer to an object of type 'BitmapToggleButton', derived from 'ToggleButton'.
+type BitmapToggleButton a  = ToggleButton (CBitmapToggleButton a)
+-- | Inheritance type of the BitmapToggleButton class.
+type TBitmapToggleButton a  = TToggleButton (CBitmapToggleButton a)
+-- | Abstract type of the BitmapToggleButton class.
+data CBitmapToggleButton a  = CBitmapToggleButton
+
+-- | Pointer to an object of type 'TextCtrl', derived from 'Control'.
+type TextCtrl a  = Control (CTextCtrl a)
+-- | Inheritance type of the TextCtrl class.
+type TTextCtrl a  = TControl (CTextCtrl a)
+-- | Abstract type of the TextCtrl class.
+data CTextCtrl a  = CTextCtrl
+
+-- | Pointer to an object of type 'TabCtrl', derived from 'Control'.
+type TabCtrl a  = Control (CTabCtrl a)
+-- | Inheritance type of the TabCtrl class.
+type TTabCtrl a  = TControl (CTabCtrl a)
+-- | Abstract type of the TabCtrl class.
+data CTabCtrl a  = CTabCtrl
+
+-- | Pointer to an object of type 'StaticText', derived from 'Control'.
+type StaticText a  = Control (CStaticText a)
+-- | Inheritance type of the StaticText class.
+type TStaticText a  = TControl (CStaticText a)
+-- | Abstract type of the StaticText class.
+data CStaticText a  = CStaticText
+
+-- | Pointer to an object of type 'StaticLine', derived from 'Control'.
+type StaticLine a  = Control (CStaticLine a)
+-- | Inheritance type of the StaticLine class.
+type TStaticLine a  = TControl (CStaticLine a)
+-- | Abstract type of the StaticLine class.
+data CStaticLine a  = CStaticLine
+
+-- | Pointer to an object of type 'StaticBox', derived from 'Control'.
+type StaticBox a  = Control (CStaticBox a)
+-- | Inheritance type of the StaticBox class.
+type TStaticBox a  = TControl (CStaticBox a)
+-- | Abstract type of the StaticBox class.
+data CStaticBox a  = CStaticBox
+
+-- | Pointer to an object of type 'StaticBitmap', derived from 'Control'.
+type StaticBitmap a  = Control (CStaticBitmap a)
+-- | Inheritance type of the StaticBitmap class.
+type TStaticBitmap a  = TControl (CStaticBitmap a)
+-- | Abstract type of the StaticBitmap class.
+data CStaticBitmap a  = CStaticBitmap
+
+-- | Pointer to an object of type 'SpinCtrl', derived from 'Control'.
+type SpinCtrl a  = Control (CSpinCtrl a)
+-- | Inheritance type of the SpinCtrl class.
+type TSpinCtrl a  = TControl (CSpinCtrl a)
+-- | Abstract type of the SpinCtrl class.
+data CSpinCtrl a  = CSpinCtrl
+
+-- | Pointer to an object of type 'SpinButton', derived from 'Control'.
+type SpinButton a  = Control (CSpinButton a)
+-- | Inheritance type of the SpinButton class.
+type TSpinButton a  = TControl (CSpinButton a)
+-- | Abstract type of the SpinButton class.
+data CSpinButton a  = CSpinButton
+
+-- | Pointer to an object of type 'ScrollBar', derived from 'Control'.
+type ScrollBar a  = Control (CScrollBar a)
+-- | Inheritance type of the ScrollBar class.
+type TScrollBar a  = TControl (CScrollBar a)
+-- | Abstract type of the ScrollBar class.
+data CScrollBar a  = CScrollBar
+
+-- | Pointer to an object of type 'RadioButton', derived from 'Control'.
+type RadioButton a  = Control (CRadioButton a)
+-- | Inheritance type of the RadioButton class.
+type TRadioButton a  = TControl (CRadioButton a)
+-- | Abstract type of the RadioButton class.
+data CRadioButton a  = CRadioButton
+
+-- | Pointer to an object of type 'RadioBox', derived from 'Control'.
+type RadioBox a  = Control (CRadioBox a)
+-- | Inheritance type of the RadioBox class.
+type TRadioBox a  = TControl (CRadioBox a)
+-- | Abstract type of the RadioBox class.
+data CRadioBox a  = CRadioBox
+
+-- | Pointer to an object of type 'Notebook', derived from 'Control'.
+type Notebook a  = Control (CNotebook a)
+-- | Inheritance type of the Notebook class.
+type TNotebook a  = TControl (CNotebook a)
+-- | Abstract type of the Notebook class.
+data CNotebook a  = CNotebook
+
+-- | Pointer to an object of type 'ListCtrl', derived from 'Control'.
+type ListCtrl a  = Control (CListCtrl a)
+-- | Inheritance type of the ListCtrl class.
+type TListCtrl a  = TControl (CListCtrl a)
+-- | Abstract type of the ListCtrl class.
+data CListCtrl a  = CListCtrl
+
+-- | Pointer to an object of type 'ListBox', derived from 'Control'.
+type ListBox a  = Control (CListBox a)
+-- | Inheritance type of the ListBox class.
+type TListBox a  = TControl (CListBox a)
+-- | Abstract type of the ListBox class.
+data CListBox a  = CListBox
+
+-- | Pointer to an object of type 'CheckListBox', derived from 'ListBox'.
+type CheckListBox a  = ListBox (CCheckListBox a)
+-- | Inheritance type of the CheckListBox class.
+type TCheckListBox a  = TListBox (CCheckListBox a)
+-- | Abstract type of the CheckListBox class.
+data CCheckListBox a  = CCheckListBox
+
+-- | Pointer to an object of type 'LEDNumberCtrl', derived from 'Control'.
+type LEDNumberCtrl a  = Control (CLEDNumberCtrl a)
+-- | Inheritance type of the LEDNumberCtrl class.
+type TLEDNumberCtrl a  = TControl (CLEDNumberCtrl a)
+-- | Abstract type of the LEDNumberCtrl class.
+data CLEDNumberCtrl a  = CLEDNumberCtrl
+
+-- | Pointer to an object of type 'GenericDirCtrl', derived from 'Control'.
+type GenericDirCtrl a  = Control (CGenericDirCtrl a)
+-- | Inheritance type of the GenericDirCtrl class.
+type TGenericDirCtrl a  = TControl (CGenericDirCtrl a)
+-- | Abstract type of the GenericDirCtrl class.
+data CGenericDirCtrl a  = CGenericDirCtrl
+
+-- | Pointer to an object of type 'DrawControl', derived from 'Control'.
+type DrawControl a  = Control (CDrawControl a)
+-- | Inheritance type of the DrawControl class.
+type TDrawControl a  = TControl (CDrawControl a)
+-- | Abstract type of the DrawControl class.
+data CDrawControl a  = CDrawControl
+
+-- | Pointer to an object of type 'Button', derived from 'Control'.
+type Button a  = Control (CButton a)
+-- | Inheritance type of the Button class.
+type TButton a  = TControl (CButton a)
+-- | Abstract type of the Button class.
+data CButton a  = CButton
+
+-- | Pointer to an object of type 'BitmapButton', derived from 'Button'.
+type BitmapButton a  = Button (CBitmapButton a)
+-- | Inheritance type of the BitmapButton class.
+type TBitmapButton a  = TButton (CBitmapButton a)
+-- | Abstract type of the BitmapButton class.
+data CBitmapButton a  = CBitmapButton
+
+-- | Pointer to an object of type 'ContextHelpButton', derived from 'BitmapButton'.
+type ContextHelpButton a  = BitmapButton (CContextHelpButton a)
+-- | Inheritance type of the ContextHelpButton class.
+type TContextHelpButton a  = TBitmapButton (CContextHelpButton a)
+-- | Abstract type of the ContextHelpButton class.
+data CContextHelpButton a  = CContextHelpButton
+
+-- | Pointer to an object of type 'Choice', derived from 'Control'.
+type Choice a  = Control (CChoice a)
+-- | Inheritance type of the Choice class.
+type TChoice a  = TControl (CChoice a)
+-- | Abstract type of the Choice class.
+data CChoice a  = CChoice
+
+-- | Pointer to an object of type 'ComboBox', derived from 'Choice'.
+type ComboBox a  = Choice (CComboBox a)
+-- | Inheritance type of the ComboBox class.
+type TComboBox a  = TChoice (CComboBox a)
+-- | Abstract type of the ComboBox class.
+data CComboBox a  = CComboBox
+
+-- | Pointer to an object of type 'CheckBox', derived from 'Control'.
+type CheckBox a  = Control (CCheckBox a)
+-- | Inheritance type of the CheckBox class.
+type TCheckBox a  = TControl (CCheckBox a)
+-- | Abstract type of the CheckBox class.
+data CCheckBox a  = CCheckBox
+
+-- | Pointer to an object of type 'CalendarCtrl', derived from 'Control'.
+type CalendarCtrl a  = Control (CCalendarCtrl a)
+-- | Inheritance type of the CalendarCtrl class.
+type TCalendarCtrl a  = TControl (CCalendarCtrl a)
+-- | Abstract type of the CalendarCtrl class.
+data CCalendarCtrl a  = CCalendarCtrl
+
+-- | Pointer to an object of type 'BookCtrlBase', derived from 'Control'.
+type BookCtrlBase a  = Control (CBookCtrlBase a)
+-- | Inheritance type of the BookCtrlBase class.
+type TBookCtrlBase a  = TControl (CBookCtrlBase a)
+-- | Abstract type of the BookCtrlBase class.
+data CBookCtrlBase a  = CBookCtrlBase
+
+-- | Pointer to an object of type 'AuiNotebook', derived from 'BookCtrlBase'.
+type AuiNotebook a  = BookCtrlBase (CAuiNotebook a)
+-- | Inheritance type of the AuiNotebook class.
+type TAuiNotebook a  = TBookCtrlBase (CAuiNotebook a)
+-- | Abstract type of the AuiNotebook class.
+data CAuiNotebook a  = CAuiNotebook
+
+-- | Pointer to an object of type 'AuiTabCtrl', derived from 'Control'.
+type AuiTabCtrl a  = Control (CAuiTabCtrl a)
+-- | Inheritance type of the AuiTabCtrl class.
+type TAuiTabCtrl a  = TControl (CAuiTabCtrl a)
+-- | Abstract type of the AuiTabCtrl class.
+data CAuiTabCtrl a  = CAuiTabCtrl
+
+-- | Pointer to an object of type 'AuiToolBar', derived from 'Control'.
+type AuiToolBar a  = Control (CAuiToolBar a)
+-- | Inheritance type of the AuiToolBar class.
+type TAuiToolBar a  = TControl (CAuiToolBar a)
+-- | Abstract type of the AuiToolBar class.
+data CAuiToolBar a  = CAuiToolBar
+
+-- | Pointer to an object of type 'TopLevelWindow', derived from 'Window'.
+type TopLevelWindow a  = Window (CTopLevelWindow a)
+-- | Inheritance type of the TopLevelWindow class.
+type TTopLevelWindow a  = TWindow (CTopLevelWindow a)
+-- | Abstract type of the TopLevelWindow class.
+data CTopLevelWindow a  = CTopLevelWindow
+
+-- | Pointer to an object of type 'Frame', derived from 'TopLevelWindow'.
+type Frame a  = TopLevelWindow (CFrame a)
+-- | Inheritance type of the Frame class.
+type TFrame a  = TTopLevelWindow (CFrame a)
+-- | Abstract type of the Frame class.
+data CFrame a  = CFrame
+
+-- | Pointer to an object of type 'PreviewFrame', derived from 'Frame'.
+type PreviewFrame a  = Frame (CPreviewFrame a)
+-- | Inheritance type of the PreviewFrame class.
+type TPreviewFrame a  = TFrame (CPreviewFrame a)
+-- | Abstract type of the PreviewFrame class.
+data CPreviewFrame a  = CPreviewFrame
+
+-- | Pointer to an object of type 'WXCPreviewFrame', derived from 'PreviewFrame'.
+type WXCPreviewFrame a  = PreviewFrame (CWXCPreviewFrame a)
+-- | Inheritance type of the WXCPreviewFrame class.
+type TWXCPreviewFrame a  = TPreviewFrame (CWXCPreviewFrame a)
+-- | Abstract type of the WXCPreviewFrame class.
+data CWXCPreviewFrame a  = CWXCPreviewFrame
+
+-- | Pointer to an object of type 'DocChildFrame', derived from 'Frame'.
+type DocChildFrame a  = Frame (CDocChildFrame a)
+-- | Inheritance type of the DocChildFrame class.
+type TDocChildFrame a  = TFrame (CDocChildFrame a)
+-- | Abstract type of the DocChildFrame class.
+data CDocChildFrame a  = CDocChildFrame
+
+-- | Pointer to an object of type 'MDIParentFrame', derived from 'Frame'.
+type MDIParentFrame a  = Frame (CMDIParentFrame a)
+-- | Inheritance type of the MDIParentFrame class.
+type TMDIParentFrame a  = TFrame (CMDIParentFrame a)
+-- | Abstract type of the MDIParentFrame class.
+data CMDIParentFrame a  = CMDIParentFrame
+
+-- | Pointer to an object of type 'DocMDIParentFrame', derived from 'MDIParentFrame'.
+type DocMDIParentFrame a  = MDIParentFrame (CDocMDIParentFrame a)
+-- | Inheritance type of the DocMDIParentFrame class.
+type TDocMDIParentFrame a  = TMDIParentFrame (CDocMDIParentFrame a)
+-- | Abstract type of the DocMDIParentFrame class.
+data CDocMDIParentFrame a  = CDocMDIParentFrame
+
+-- | Pointer to an object of type 'MiniFrame', derived from 'Frame'.
+type MiniFrame a  = Frame (CMiniFrame a)
+-- | Inheritance type of the MiniFrame class.
+type TMiniFrame a  = TFrame (CMiniFrame a)
+-- | Abstract type of the MiniFrame class.
+data CMiniFrame a  = CMiniFrame
+
+-- | Pointer to an object of type 'ProgressDialog', derived from 'Frame'.
+type ProgressDialog a  = Frame (CProgressDialog a)
+-- | Inheritance type of the ProgressDialog class.
+type TProgressDialog a  = TFrame (CProgressDialog a)
+-- | Abstract type of the ProgressDialog class.
+data CProgressDialog a  = CProgressDialog
+
+-- | Pointer to an object of type 'SplashScreen', derived from 'Frame'.
+type SplashScreen a  = Frame (CSplashScreen a)
+-- | Inheritance type of the SplashScreen class.
+type TSplashScreen a  = TFrame (CSplashScreen a)
+-- | Abstract type of the SplashScreen class.
+data CSplashScreen a  = CSplashScreen
+
+-- | Pointer to an object of type 'HtmlHelpFrame', derived from 'Frame'.
+type HtmlHelpFrame a  = Frame (CHtmlHelpFrame a)
+-- | Inheritance type of the HtmlHelpFrame class.
+type THtmlHelpFrame a  = TFrame (CHtmlHelpFrame a)
+-- | Abstract type of the HtmlHelpFrame class.
+data CHtmlHelpFrame a  = CHtmlHelpFrame
+
+-- | Pointer to an object of type 'DocParentFrame', derived from 'Frame'.
+type DocParentFrame a  = Frame (CDocParentFrame a)
+-- | Inheritance type of the DocParentFrame class.
+type TDocParentFrame a  = TFrame (CDocParentFrame a)
+-- | Abstract type of the DocParentFrame class.
+data CDocParentFrame a  = CDocParentFrame
+
+-- | Pointer to an object of type 'MDIChildFrame', derived from 'Frame'.
+type MDIChildFrame a  = Frame (CMDIChildFrame a)
+-- | Inheritance type of the MDIChildFrame class.
+type TMDIChildFrame a  = TFrame (CMDIChildFrame a)
+-- | Abstract type of the MDIChildFrame class.
+data CMDIChildFrame a  = CMDIChildFrame
+
+-- | Pointer to an object of type 'DocMDIChildFrame', derived from 'MDIChildFrame'.
+type DocMDIChildFrame a  = MDIChildFrame (CDocMDIChildFrame a)
+-- | Inheritance type of the DocMDIChildFrame class.
+type TDocMDIChildFrame a  = TMDIChildFrame (CDocMDIChildFrame a)
+-- | Abstract type of the DocMDIChildFrame class.
+data CDocMDIChildFrame a  = CDocMDIChildFrame
+
+-- | Pointer to an object of type 'ToolWindow', derived from 'Frame'.
+type ToolWindow a  = Frame (CToolWindow a)
+-- | Inheritance type of the ToolWindow class.
+type TToolWindow a  = TFrame (CToolWindow a)
+-- | Abstract type of the ToolWindow class.
+data CToolWindow a  = CToolWindow
+
+-- | Pointer to an object of type 'CbFloatedBarWindow', derived from 'ToolWindow'.
+type CbFloatedBarWindow a  = ToolWindow (CCbFloatedBarWindow a)
+-- | Inheritance type of the CbFloatedBarWindow class.
+type TCbFloatedBarWindow a  = TToolWindow (CCbFloatedBarWindow a)
+-- | Abstract type of the CbFloatedBarWindow class.
+data CCbFloatedBarWindow a  = CCbFloatedBarWindow
+
+-- | Pointer to an object of type 'Dialog', derived from 'TopLevelWindow'.
+type Dialog a  = TopLevelWindow (CDialog a)
+-- | Inheritance type of the Dialog class.
+type TDialog a  = TTopLevelWindow (CDialog a)
+-- | Abstract type of the Dialog class.
+data CDialog a  = CDialog
+
+-- | Pointer to an object of type 'ColourDialog', derived from 'Dialog'.
+type ColourDialog a  = Dialog (CColourDialog a)
+-- | Inheritance type of the ColourDialog class.
+type TColourDialog a  = TDialog (CColourDialog a)
+-- | Abstract type of the ColourDialog class.
+data CColourDialog a  = CColourDialog
+
+-- | Pointer to an object of type 'DirDialog', derived from 'Dialog'.
+type DirDialog a  = Dialog (CDirDialog a)
+-- | Inheritance type of the DirDialog class.
+type TDirDialog a  = TDialog (CDirDialog a)
+-- | Abstract type of the DirDialog class.
+data CDirDialog a  = CDirDialog
+
+-- | Pointer to an object of type 'FindReplaceDialog', derived from 'Dialog'.
+type FindReplaceDialog a  = Dialog (CFindReplaceDialog a)
+-- | Inheritance type of the FindReplaceDialog class.
+type TFindReplaceDialog a  = TDialog (CFindReplaceDialog a)
+-- | Abstract type of the FindReplaceDialog class.
+data CFindReplaceDialog a  = CFindReplaceDialog
+
+-- | Pointer to an object of type 'MessageDialog', derived from 'Dialog'.
+type MessageDialog a  = Dialog (CMessageDialog a)
+-- | Inheritance type of the MessageDialog class.
+type TMessageDialog a  = TDialog (CMessageDialog a)
+-- | Abstract type of the MessageDialog class.
+data CMessageDialog a  = CMessageDialog
+
+-- | Pointer to an object of type 'SingleChoiceDialog', derived from 'Dialog'.
+type SingleChoiceDialog a  = Dialog (CSingleChoiceDialog a)
+-- | Inheritance type of the SingleChoiceDialog class.
+type TSingleChoiceDialog a  = TDialog (CSingleChoiceDialog a)
+-- | Abstract type of the SingleChoiceDialog class.
+data CSingleChoiceDialog a  = CSingleChoiceDialog
+
+-- | Pointer to an object of type 'Wizard', derived from 'Dialog'.
+type Wizard a  = Dialog (CWizard a)
+-- | Inheritance type of the Wizard class.
+type TWizard a  = TDialog (CWizard a)
+-- | Abstract type of the Wizard class.
+data CWizard a  = CWizard
+
+-- | Pointer to an object of type 'TextEntryDialog', derived from 'Dialog'.
+type TextEntryDialog a  = Dialog (CTextEntryDialog a)
+-- | Inheritance type of the TextEntryDialog class.
+type TTextEntryDialog a  = TDialog (CTextEntryDialog a)
+-- | Abstract type of the TextEntryDialog class.
+data CTextEntryDialog a  = CTextEntryDialog
+
+-- | Pointer to an object of type 'PrintDialog', derived from 'Dialog'.
+type PrintDialog a  = Dialog (CPrintDialog a)
+-- | Inheritance type of the PrintDialog class.
+type TPrintDialog a  = TDialog (CPrintDialog a)
+-- | Abstract type of the PrintDialog class.
+data CPrintDialog a  = CPrintDialog
+
+-- | Pointer to an object of type 'FontDialog', derived from 'Dialog'.
+type FontDialog a  = Dialog (CFontDialog a)
+-- | Inheritance type of the FontDialog class.
+type TFontDialog a  = TDialog (CFontDialog a)
+-- | Abstract type of the FontDialog class.
+data CFontDialog a  = CFontDialog
+
+-- | Pointer to an object of type 'FileDialog', derived from 'Dialog'.
+type FileDialog a  = Dialog (CFileDialog a)
+-- | Inheritance type of the FileDialog class.
+type TFileDialog a  = TDialog (CFileDialog a)
+-- | Abstract type of the FileDialog class.
+data CFileDialog a  = CFileDialog
+
+-- | Pointer to an object of type 'WXCPrintoutHandler', derived from 'EvtHandler'.
+type WXCPrintoutHandler a  = EvtHandler (CWXCPrintoutHandler a)
+-- | Inheritance type of the WXCPrintoutHandler class.
+type TWXCPrintoutHandler a  = TEvtHandler (CWXCPrintoutHandler a)
+-- | Abstract type of the WXCPrintoutHandler class.
+data CWXCPrintoutHandler a  = CWXCPrintoutHandler
+
+-- | Pointer to an object of type 'View', derived from 'EvtHandler'.
+type View a  = EvtHandler (CView a)
+-- | Inheritance type of the View class.
+type TView a  = TEvtHandler (CView a)
+-- | Abstract type of the View class.
+data CView a  = CView
+
+-- | Pointer to an object of type 'Validator', derived from 'EvtHandler'.
+type Validator a  = EvtHandler (CValidator a)
+-- | Inheritance type of the Validator class.
+type TValidator a  = TEvtHandler (CValidator a)
+-- | Abstract type of the Validator class.
+data CValidator a  = CValidator
+
+-- | Pointer to an object of type 'TextValidator', derived from 'Validator'.
+type TextValidator a  = Validator (CTextValidator a)
+-- | Inheritance type of the TextValidator class.
+type TTextValidator a  = TValidator (CTextValidator a)
+-- | Abstract type of the TextValidator class.
+data CTextValidator a  = CTextValidator
+
+-- | Pointer to an object of type 'WXCTextValidator', derived from 'TextValidator'.
+type WXCTextValidator a  = TextValidator (CWXCTextValidator a)
+-- | Inheritance type of the WXCTextValidator class.
+type TWXCTextValidator a  = TTextValidator (CWXCTextValidator a)
+-- | Abstract type of the WXCTextValidator class.
+data CWXCTextValidator a  = CWXCTextValidator
+
+-- | Pointer to an object of type 'GenericValidator', derived from 'Validator'.
+type GenericValidator a  = Validator (CGenericValidator a)
+-- | Inheritance type of the GenericValidator class.
+type TGenericValidator a  = TValidator (CGenericValidator a)
+-- | Abstract type of the GenericValidator class.
+data CGenericValidator a  = CGenericValidator
+
+-- | Pointer to an object of type 'TaskBarIcon', derived from 'EvtHandler'.
+type TaskBarIcon a  = EvtHandler (CTaskBarIcon a)
+-- | Inheritance type of the TaskBarIcon class.
+type TTaskBarIcon a  = TEvtHandler (CTaskBarIcon a)
+-- | Abstract type of the TaskBarIcon class.
+data CTaskBarIcon a  = CTaskBarIcon
+
+-- | Pointer to an object of type 'Process', derived from 'EvtHandler'.
+type Process a  = EvtHandler (CProcess a)
+-- | Inheritance type of the Process class.
+type TProcess a  = TEvtHandler (CProcess a)
+-- | Abstract type of the Process class.
+data CProcess a  = CProcess
+
+-- | Pointer to an object of type 'MenuBar', derived from 'EvtHandler'.
+type MenuBar a  = EvtHandler (CMenuBar a)
+-- | Inheritance type of the MenuBar class.
+type TMenuBar a  = TEvtHandler (CMenuBar a)
+-- | Abstract type of the MenuBar class.
+data CMenuBar a  = CMenuBar
+
+-- | Pointer to an object of type 'Menu', derived from 'EvtHandler'.
+type Menu a  = EvtHandler (CMenu a)
+-- | Inheritance type of the Menu class.
+type TMenu a  = TEvtHandler (CMenu a)
+-- | Abstract type of the Menu class.
+data CMenu a  = CMenu
+
+-- | Pointer to an object of type 'FrameLayout', derived from 'EvtHandler'.
+type FrameLayout a  = EvtHandler (CFrameLayout a)
+-- | Inheritance type of the FrameLayout class.
+type TFrameLayout a  = TEvtHandler (CFrameLayout a)
+-- | Abstract type of the FrameLayout class.
+data CFrameLayout a  = CFrameLayout
+
+-- | Pointer to an object of type 'Document', derived from 'EvtHandler'.
+type Document a  = EvtHandler (CDocument a)
+-- | Inheritance type of the Document class.
+type TDocument a  = TEvtHandler (CDocument a)
+-- | Abstract type of the Document class.
+data CDocument a  = CDocument
+
+-- | Pointer to an object of type 'DocManager', derived from 'EvtHandler'.
+type DocManager a  = EvtHandler (CDocManager a)
+-- | Inheritance type of the DocManager class.
+type TDocManager a  = TEvtHandler (CDocManager a)
+-- | Abstract type of the DocManager class.
+data CDocManager a  = CDocManager
+
+-- | Pointer to an object of type 'AuiManagerEvent', derived from 'EvtHandler'.
+type AuiManagerEvent a  = EvtHandler (CAuiManagerEvent a)
+-- | Inheritance type of the AuiManagerEvent class.
+type TAuiManagerEvent a  = TEvtHandler (CAuiManagerEvent a)
+-- | Abstract type of the AuiManagerEvent class.
+data CAuiManagerEvent a  = CAuiManagerEvent
+
+-- | Pointer to an object of type 'AuiManager', derived from 'EvtHandler'.
+type AuiManager a  = EvtHandler (CAuiManager a)
+-- | Inheritance type of the AuiManager class.
+type TAuiManager a  = TEvtHandler (CAuiManager a)
+-- | Abstract type of the AuiManager class.
+data CAuiManager a  = CAuiManager
+
+-- | Pointer to an object of type 'App', derived from 'EvtHandler'.
+type App a  = EvtHandler (CApp a)
+-- | Inheritance type of the App class.
+type TApp a  = TEvtHandler (CApp a)
+-- | Abstract type of the App class.
+data CApp a  = CApp
+
+-- | Pointer to an object of type 'WXCApp', derived from 'App'.
+type WXCApp a  = App (CWXCApp a)
+-- | Inheritance type of the WXCApp class.
+type TWXCApp a  = TApp (CWXCApp a)
+-- | Abstract type of the WXCApp class.
+data CWXCApp a  = CWXCApp
+
+-- | Pointer to an object of type 'CbPluginBase', derived from 'EvtHandler'.
+type CbPluginBase a  = EvtHandler (CCbPluginBase a)
+-- | Inheritance type of the CbPluginBase class.
+type TCbPluginBase a  = TEvtHandler (CCbPluginBase a)
+-- | Abstract type of the CbPluginBase class.
+data CCbPluginBase a  = CCbPluginBase
+
+-- | Pointer to an object of type 'CbAntiflickerPlugin', derived from 'CbPluginBase'.
+type CbAntiflickerPlugin a  = CbPluginBase (CCbAntiflickerPlugin a)
+-- | Inheritance type of the CbAntiflickerPlugin class.
+type TCbAntiflickerPlugin a  = TCbPluginBase (CCbAntiflickerPlugin a)
+-- | Abstract type of the CbAntiflickerPlugin class.
+data CCbAntiflickerPlugin a  = CCbAntiflickerPlugin
+
+-- | Pointer to an object of type 'CbBarHintsPlugin', derived from 'CbPluginBase'.
+type CbBarHintsPlugin a  = CbPluginBase (CCbBarHintsPlugin a)
+-- | Inheritance type of the CbBarHintsPlugin class.
+type TCbBarHintsPlugin a  = TCbPluginBase (CCbBarHintsPlugin a)
+-- | Abstract type of the CbBarHintsPlugin class.
+data CCbBarHintsPlugin a  = CCbBarHintsPlugin
+
+-- | Pointer to an object of type 'CbPaneDrawPlugin', derived from 'CbPluginBase'.
+type CbPaneDrawPlugin a  = CbPluginBase (CCbPaneDrawPlugin a)
+-- | Inheritance type of the CbPaneDrawPlugin class.
+type TCbPaneDrawPlugin a  = TCbPluginBase (CCbPaneDrawPlugin a)
+-- | Abstract type of the CbPaneDrawPlugin class.
+data CCbPaneDrawPlugin a  = CCbPaneDrawPlugin
+
+-- | Pointer to an object of type 'CbRowDragPlugin', derived from 'CbPluginBase'.
+type CbRowDragPlugin a  = CbPluginBase (CCbRowDragPlugin a)
+-- | Inheritance type of the CbRowDragPlugin class.
+type TCbRowDragPlugin a  = TCbPluginBase (CCbRowDragPlugin a)
+-- | Abstract type of the CbRowDragPlugin class.
+data CCbRowDragPlugin a  = CCbRowDragPlugin
+
+-- | Pointer to an object of type 'CbSimpleCustomizationPlugin', derived from 'CbPluginBase'.
+type CbSimpleCustomizationPlugin a  = CbPluginBase (CCbSimpleCustomizationPlugin a)
+-- | Inheritance type of the CbSimpleCustomizationPlugin class.
+type TCbSimpleCustomizationPlugin a  = TCbPluginBase (CCbSimpleCustomizationPlugin a)
+-- | Abstract type of the CbSimpleCustomizationPlugin class.
+data CCbSimpleCustomizationPlugin a  = CCbSimpleCustomizationPlugin
+
+-- | Pointer to an object of type 'CbRowLayoutPlugin', derived from 'CbPluginBase'.
+type CbRowLayoutPlugin a  = CbPluginBase (CCbRowLayoutPlugin a)
+-- | Inheritance type of the CbRowLayoutPlugin class.
+type TCbRowLayoutPlugin a  = TCbPluginBase (CCbRowLayoutPlugin a)
+-- | Abstract type of the CbRowLayoutPlugin class.
+data CCbRowLayoutPlugin a  = CCbRowLayoutPlugin
+
+-- | Pointer to an object of type 'CbHintAnimationPlugin', derived from 'CbPluginBase'.
+type CbHintAnimationPlugin a  = CbPluginBase (CCbHintAnimationPlugin a)
+-- | Inheritance type of the CbHintAnimationPlugin class.
+type TCbHintAnimationPlugin a  = TCbPluginBase (CCbHintAnimationPlugin a)
+-- | Abstract type of the CbHintAnimationPlugin class.
+data CCbHintAnimationPlugin a  = CCbHintAnimationPlugin
+
+-- | Pointer to an object of type 'CbBarDragPlugin', derived from 'CbPluginBase'.
+type CbBarDragPlugin a  = CbPluginBase (CCbBarDragPlugin a)
+-- | Inheritance type of the CbBarDragPlugin class.
+type TCbBarDragPlugin a  = TCbPluginBase (CCbBarDragPlugin a)
+-- | Abstract type of the CbBarDragPlugin class.
+data CCbBarDragPlugin a  = CCbBarDragPlugin
+
+-- | Pointer to an object of type 'CbBarSpy', derived from 'EvtHandler'.
+type CbBarSpy a  = EvtHandler (CCbBarSpy a)
+-- | Inheritance type of the CbBarSpy class.
+type TCbBarSpy a  = TEvtHandler (CCbBarSpy a)
+-- | Abstract type of the CbBarSpy class.
+data CCbBarSpy a  = CCbBarSpy
+
+-- | Pointer to an object of type 'ClientBase', derived from 'WxObject'.
+type ClientBase a  = WxObject (CClientBase a)
+-- | Inheritance type of the ClientBase class.
+type TClientBase a  = TWxObject (CClientBase a)
+-- | Abstract type of the ClientBase class.
+data CClientBase a  = CClientBase
+
+-- | Pointer to an object of type 'DDEClient', derived from 'ClientBase'.
+type DDEClient a  = ClientBase (CDDEClient a)
+-- | Inheritance type of the DDEClient class.
+type TDDEClient a  = TClientBase (CDDEClient a)
+-- | Abstract type of the DDEClient class.
+data CDDEClient a  = CDDEClient
+
+-- | Pointer to an object of type 'Client', derived from 'ClientBase'.
+type Client a  = ClientBase (CClient a)
+-- | Inheritance type of the Client class.
+type TClient a  = TClientBase (CClient a)
+-- | Abstract type of the Client class.
+data CClient a  = CClient
+
+-- | Pointer to an object of type 'WXCClient', derived from 'Client'.
+type WXCClient a  = Client (CWXCClient a)
+-- | Inheritance type of the WXCClient class.
+type TWXCClient a  = TClient (CWXCClient a)
+-- | Abstract type of the WXCClient class.
+data CWXCClient a  = CWXCClient
+
+-- | Pointer to an object of type 'ConnectionBase', derived from 'WxObject'.
+type ConnectionBase a  = WxObject (CConnectionBase a)
+-- | Inheritance type of the ConnectionBase class.
+type TConnectionBase a  = TWxObject (CConnectionBase a)
+-- | Abstract type of the ConnectionBase class.
+data CConnectionBase a  = CConnectionBase
+
+-- | Pointer to an object of type 'DDEConnection', derived from 'ConnectionBase'.
+type DDEConnection a  = ConnectionBase (CDDEConnection a)
+-- | Inheritance type of the DDEConnection class.
+type TDDEConnection a  = TConnectionBase (CDDEConnection a)
+-- | Abstract type of the DDEConnection class.
+data CDDEConnection a  = CDDEConnection
+
+-- | Pointer to an object of type 'Connection', derived from 'ConnectionBase'.
+type Connection a  = ConnectionBase (CConnection a)
+-- | Inheritance type of the Connection class.
+type TConnection a  = TConnectionBase (CConnection a)
+-- | Abstract type of the Connection class.
+data CConnection a  = CConnection
+
+-- | Pointer to an object of type 'WXCConnection', derived from 'Connection'.
+type WXCConnection a  = Connection (CWXCConnection a)
+-- | Inheritance type of the WXCConnection class.
+type TWXCConnection a  = TConnection (CWXCConnection a)
+-- | Abstract type of the WXCConnection class.
+data CWXCConnection a  = CWXCConnection
+
+-- | Pointer to an object of type 'PlotCurve', derived from 'WxObject'.
+type PlotCurve a  = WxObject (CPlotCurve a)
+-- | Inheritance type of the PlotCurve class.
+type TPlotCurve a  = TWxObject (CPlotCurve a)
+-- | Abstract type of the PlotCurve class.
+data CPlotCurve a  = CPlotCurve
+
+-- | Pointer to an object of type 'WXCPlotCurve', derived from 'PlotCurve'.
+type WXCPlotCurve a  = PlotCurve (CWXCPlotCurve a)
+-- | Inheritance type of the WXCPlotCurve class.
+type TWXCPlotCurve a  = TPlotCurve (CWXCPlotCurve a)
+-- | Abstract type of the WXCPlotCurve class.
+data CWXCPlotCurve a  = CWXCPlotCurve
+
+-- | Pointer to an object of type 'CbBarInfo', derived from 'WxObject'.
+type CbBarInfo a  = WxObject (CCbBarInfo a)
+-- | Inheritance type of the CbBarInfo class.
+type TCbBarInfo a  = TWxObject (CCbBarInfo a)
+-- | Abstract type of the CbBarInfo class.
+data CCbBarInfo a  = CCbBarInfo
+
+-- | Pointer to an object of type 'CbMiniButton', derived from 'WxObject'.
+type CbMiniButton a  = WxObject (CCbMiniButton a)
+-- | Inheritance type of the CbMiniButton class.
+type TCbMiniButton a  = TWxObject (CCbMiniButton a)
+-- | Abstract type of the CbMiniButton class.
+data CCbMiniButton a  = CCbMiniButton
+
+-- | Pointer to an object of type 'CbDockBox', derived from 'CbMiniButton'.
+type CbDockBox a  = CbMiniButton (CCbDockBox a)
+-- | Inheritance type of the CbDockBox class.
+type TCbDockBox a  = TCbMiniButton (CCbDockBox a)
+-- | Abstract type of the CbDockBox class.
+data CCbDockBox a  = CCbDockBox
+
+-- | Pointer to an object of type 'CbCollapseBox', derived from 'CbMiniButton'.
+type CbCollapseBox a  = CbMiniButton (CCbCollapseBox a)
+-- | Inheritance type of the CbCollapseBox class.
+type TCbCollapseBox a  = TCbMiniButton (CCbCollapseBox a)
+-- | Abstract type of the CbCollapseBox class.
+data CCbCollapseBox a  = CCbCollapseBox
+
+-- | Pointer to an object of type 'CbCloseBox', derived from 'CbMiniButton'.
+type CbCloseBox a  = CbMiniButton (CCbCloseBox a)
+-- | Inheritance type of the CbCloseBox class.
+type TCbCloseBox a  = TCbMiniButton (CCbCloseBox a)
+-- | Abstract type of the CbCloseBox class.
+data CCbCloseBox a  = CCbCloseBox
+
+-- | Pointer to an object of type 'CbCommonPaneProperties', derived from 'WxObject'.
+type CbCommonPaneProperties a  = WxObject (CCbCommonPaneProperties a)
+-- | Inheritance type of the CbCommonPaneProperties class.
+type TCbCommonPaneProperties a  = TWxObject (CCbCommonPaneProperties a)
+-- | Abstract type of the CbCommonPaneProperties class.
+data CCbCommonPaneProperties a  = CCbCommonPaneProperties
+
+-- | Pointer to an object of type 'CbDimInfo', derived from 'WxObject'.
+type CbDimInfo a  = WxObject (CCbDimInfo a)
+-- | Inheritance type of the CbDimInfo class.
+type TCbDimInfo a  = TWxObject (CCbDimInfo a)
+-- | Abstract type of the CbDimInfo class.
+data CCbDimInfo a  = CCbDimInfo
+
+-- | Pointer to an object of type 'CbDockPane', derived from 'WxObject'.
+type CbDockPane a  = WxObject (CCbDockPane a)
+-- | Inheritance type of the CbDockPane class.
+type TCbDockPane a  = TWxObject (CCbDockPane a)
+-- | Abstract type of the CbDockPane class.
+data CCbDockPane a  = CCbDockPane
+
+-- | Pointer to an object of type 'CbUpdatesManagerBase', derived from 'WxObject'.
+type CbUpdatesManagerBase a  = WxObject (CCbUpdatesManagerBase a)
+-- | Inheritance type of the CbUpdatesManagerBase class.
+type TCbUpdatesManagerBase a  = TWxObject (CCbUpdatesManagerBase a)
+-- | Abstract type of the CbUpdatesManagerBase class.
+data CCbUpdatesManagerBase a  = CCbUpdatesManagerBase
+
+-- | Pointer to an object of type 'CbSimpleUpdatesMgr', derived from 'CbUpdatesManagerBase'.
+type CbSimpleUpdatesMgr a  = CbUpdatesManagerBase (CCbSimpleUpdatesMgr a)
+-- | Inheritance type of the CbSimpleUpdatesMgr class.
+type TCbSimpleUpdatesMgr a  = TCbUpdatesManagerBase (CCbSimpleUpdatesMgr a)
+-- | Abstract type of the CbSimpleUpdatesMgr class.
+data CCbSimpleUpdatesMgr a  = CCbSimpleUpdatesMgr
+
+-- | Pointer to an object of type 'CbGCUpdatesMgr', derived from 'CbSimpleUpdatesMgr'.
+type CbGCUpdatesMgr a  = CbSimpleUpdatesMgr (CCbGCUpdatesMgr a)
+-- | Inheritance type of the CbGCUpdatesMgr class.
+type TCbGCUpdatesMgr a  = TCbSimpleUpdatesMgr (CCbGCUpdatesMgr a)
+-- | Abstract type of the CbGCUpdatesMgr class.
+data CCbGCUpdatesMgr a  = CCbGCUpdatesMgr
+
+-- | Pointer to an object of type 'CbRowInfo', derived from 'WxObject'.
+type CbRowInfo a  = WxObject (CCbRowInfo a)
+-- | Inheritance type of the CbRowInfo class.
+type TCbRowInfo a  = TWxObject (CCbRowInfo a)
+-- | Abstract type of the CbRowInfo class.
+data CCbRowInfo a  = CCbRowInfo
+
+-- | Pointer to an object of type 'DC', derived from 'WxObject'.
+type DC a  = WxObject (CDC a)
+-- | Inheritance type of the DC class.
+type TDC a  = TWxObject (CDC a)
+-- | Abstract type of the DC class.
+data CDC a  = CDC
+
+-- | Pointer to an object of type 'GCDC', derived from 'DC'.
+type GCDC a  = DC (CGCDC a)
+-- | Inheritance type of the GCDC class.
+type TGCDC a  = TDC (CGCDC a)
+-- | Abstract type of the GCDC class.
+data CGCDC a  = CGCDC
+
+-- | Pointer to an object of type 'WindowDC', derived from 'DC'.
+type WindowDC a  = DC (CWindowDC a)
+-- | Inheritance type of the WindowDC class.
+type TWindowDC a  = TDC (CWindowDC a)
+-- | Abstract type of the WindowDC class.
+data CWindowDC a  = CWindowDC
+
+-- | Pointer to an object of type 'ClientDC', derived from 'WindowDC'.
+type ClientDC a  = WindowDC (CClientDC a)
+-- | Inheritance type of the ClientDC class.
+type TClientDC a  = TWindowDC (CClientDC a)
+-- | Abstract type of the ClientDC class.
+data CClientDC a  = CClientDC
+
+-- | Pointer to an object of type 'PaintDC', derived from 'WindowDC'.
+type PaintDC a  = WindowDC (CPaintDC a)
+-- | Inheritance type of the PaintDC class.
+type TPaintDC a  = TWindowDC (CPaintDC a)
+-- | Abstract type of the PaintDC class.
+data CPaintDC a  = CPaintDC
+
+-- | Pointer to an object of type 'ScreenDC', derived from 'DC'.
+type ScreenDC a  = DC (CScreenDC a)
+-- | Inheritance type of the ScreenDC class.
+type TScreenDC a  = TDC (CScreenDC a)
+-- | Abstract type of the ScreenDC class.
+data CScreenDC a  = CScreenDC
+
+-- | Pointer to an object of type 'SVGFileDC', derived from 'DC'.
+type SVGFileDC a  = DC (CSVGFileDC a)
+-- | Inheritance type of the SVGFileDC class.
+type TSVGFileDC a  = TDC (CSVGFileDC a)
+-- | Abstract type of the SVGFileDC class.
+data CSVGFileDC a  = CSVGFileDC
+
+-- | Pointer to an object of type 'PrinterDC', derived from 'DC'.
+type PrinterDC a  = DC (CPrinterDC a)
+-- | Inheritance type of the PrinterDC class.
+type TPrinterDC a  = TDC (CPrinterDC a)
+-- | Abstract type of the PrinterDC class.
+data CPrinterDC a  = CPrinterDC
+
+-- | Pointer to an object of type 'PostScriptDC', derived from 'DC'.
+type PostScriptDC a  = DC (CPostScriptDC a)
+-- | Inheritance type of the PostScriptDC class.
+type TPostScriptDC a  = TDC (CPostScriptDC a)
+-- | Abstract type of the PostScriptDC class.
+data CPostScriptDC a  = CPostScriptDC
+
+-- | Pointer to an object of type 'MirrorDC', derived from 'DC'.
+type MirrorDC a  = DC (CMirrorDC a)
+-- | Inheritance type of the MirrorDC class.
+type TMirrorDC a  = TDC (CMirrorDC a)
+-- | Abstract type of the MirrorDC class.
+data CMirrorDC a  = CMirrorDC
+
+-- | Pointer to an object of type 'MetafileDC', derived from 'DC'.
+type MetafileDC a  = DC (CMetafileDC a)
+-- | Inheritance type of the MetafileDC class.
+type TMetafileDC a  = TDC (CMetafileDC a)
+-- | Abstract type of the MetafileDC class.
+data CMetafileDC a  = CMetafileDC
+
+-- | Pointer to an object of type 'MemoryDC', derived from 'DC'.
+type MemoryDC a  = DC (CMemoryDC a)
+-- | Inheritance type of the MemoryDC class.
+type TMemoryDC a  = TDC (CMemoryDC a)
+-- | Abstract type of the MemoryDC class.
+data CMemoryDC a  = CMemoryDC
+
+-- | Pointer to an object of type 'BufferedPaintDC', derived from 'DC'.
+type BufferedPaintDC a  = DC (CBufferedPaintDC a)
+-- | Inheritance type of the BufferedPaintDC class.
+type TBufferedPaintDC a  = TDC (CBufferedPaintDC a)
+-- | Abstract type of the BufferedPaintDC class.
+data CBufferedPaintDC a  = CBufferedPaintDC
+
+-- | Pointer to an object of type 'BufferedDC', derived from 'DC'.
+type BufferedDC a  = DC (CBufferedDC a)
+-- | Inheritance type of the BufferedDC class.
+type TBufferedDC a  = TDC (CBufferedDC a)
+-- | Abstract type of the BufferedDC class.
+data CBufferedDC a  = CBufferedDC
+
+-- | Pointer to an object of type 'AutoBufferedPaintDC', derived from 'DC'.
+type AutoBufferedPaintDC a  = DC (CAutoBufferedPaintDC a)
+-- | Inheritance type of the AutoBufferedPaintDC class.
+type TAutoBufferedPaintDC a  = TDC (CAutoBufferedPaintDC a)
+-- | Abstract type of the AutoBufferedPaintDC class.
+data CAutoBufferedPaintDC a  = CAutoBufferedPaintDC
+
+-- | Pointer to an object of type 'GDIObject', derived from 'WxObject'.
+type GDIObject a  = WxObject (CGDIObject a)
+-- | Inheritance type of the GDIObject class.
+type TGDIObject a  = TWxObject (CGDIObject a)
+-- | Abstract type of the GDIObject class.
+data CGDIObject a  = CGDIObject
+
+-- | Pointer to an object of type 'Region', derived from 'GDIObject'.
+type Region a  = GDIObject (CRegion a)
+-- | Inheritance type of the Region class.
+type TRegion a  = TGDIObject (CRegion a)
+-- | Abstract type of the Region class.
+data CRegion a  = CRegion
+
+-- | Pointer to an object of type 'Pen', derived from 'GDIObject'.
+type Pen a  = GDIObject (CPen a)
+-- | Inheritance type of the Pen class.
+type TPen a  = TGDIObject (CPen a)
+-- | Abstract type of the Pen class.
+data CPen a  = CPen
+
+-- | Pointer to an object of type 'Palette', derived from 'GDIObject'.
+type Palette a  = GDIObject (CPalette a)
+-- | Inheritance type of the Palette class.
+type TPalette a  = TGDIObject (CPalette a)
+-- | Abstract type of the Palette class.
+data CPalette a  = CPalette
+
+-- | Pointer to an object of type 'Bitmap', derived from 'GDIObject'.
+type Bitmap a  = GDIObject (CBitmap a)
+-- | Inheritance type of the Bitmap class.
+type TBitmap a  = TGDIObject (CBitmap a)
+-- | Abstract type of the Bitmap class.
+data CBitmap a  = CBitmap
+
+-- | Pointer to an object of type 'Icon', derived from 'Bitmap'.
+type Icon a  = Bitmap (CIcon a)
+-- | Inheritance type of the Icon class.
+type TIcon a  = TBitmap (CIcon a)
+-- | Abstract type of the Icon class.
+data CIcon a  = CIcon
+
+-- | Pointer to an object of type 'Cursor', derived from 'Bitmap'.
+type Cursor a  = Bitmap (CCursor a)
+-- | Inheritance type of the Cursor class.
+type TCursor a  = TBitmap (CCursor a)
+-- | Abstract type of the Cursor class.
+data CCursor a  = CCursor
+
+-- | Pointer to an object of type 'Font', derived from 'GDIObject'.
+type Font a  = GDIObject (CFont a)
+-- | Inheritance type of the Font class.
+type TFont a  = TGDIObject (CFont a)
+-- | Abstract type of the Font class.
+data CFont a  = CFont
+
+-- | Pointer to an object of type 'Brush', derived from 'GDIObject'.
+type Brush a  = GDIObject (CBrush a)
+-- | Inheritance type of the Brush class.
+type TBrush a  = TGDIObject (CBrush a)
+-- | Abstract type of the Brush class.
+data CBrush a  = CBrush
+
+-- | Pointer to an object of type 'Sizer', derived from 'WxObject'.
+type Sizer a  = WxObject (CSizer a)
+-- | Inheritance type of the Sizer class.
+type TSizer a  = TWxObject (CSizer a)
+-- | Abstract type of the Sizer class.
+data CSizer a  = CSizer
+
+-- | Pointer to an object of type 'BoxSizer', derived from 'Sizer'.
+type BoxSizer a  = Sizer (CBoxSizer a)
+-- | Inheritance type of the BoxSizer class.
+type TBoxSizer a  = TSizer (CBoxSizer a)
+-- | Abstract type of the BoxSizer class.
+data CBoxSizer a  = CBoxSizer
+
+-- | Pointer to an object of type 'StaticBoxSizer', derived from 'BoxSizer'.
+type StaticBoxSizer a  = BoxSizer (CStaticBoxSizer a)
+-- | Inheritance type of the StaticBoxSizer class.
+type TStaticBoxSizer a  = TBoxSizer (CStaticBoxSizer a)
+-- | Abstract type of the StaticBoxSizer class.
+data CStaticBoxSizer a  = CStaticBoxSizer
+
+-- | Pointer to an object of type 'MultiCellSizer', derived from 'Sizer'.
+type MultiCellSizer a  = Sizer (CMultiCellSizer a)
+-- | Inheritance type of the MultiCellSizer class.
+type TMultiCellSizer a  = TSizer (CMultiCellSizer a)
+-- | Abstract type of the MultiCellSizer class.
+data CMultiCellSizer a  = CMultiCellSizer
+
+-- | Pointer to an object of type 'GridSizer', derived from 'Sizer'.
+type GridSizer a  = Sizer (CGridSizer a)
+-- | Inheritance type of the GridSizer class.
+type TGridSizer a  = TSizer (CGridSizer a)
+-- | Abstract type of the GridSizer class.
+data CGridSizer a  = CGridSizer
+
+-- | Pointer to an object of type 'FlexGridSizer', derived from 'GridSizer'.
+type FlexGridSizer a  = GridSizer (CFlexGridSizer a)
+-- | Inheritance type of the FlexGridSizer class.
+type TFlexGridSizer a  = TGridSizer (CFlexGridSizer a)
+-- | Abstract type of the FlexGridSizer class.
+data CFlexGridSizer a  = CFlexGridSizer
+
+-- | Pointer to an object of type 'MultiCellCanvas', derived from 'FlexGridSizer'.
+type MultiCellCanvas a  = FlexGridSizer (CMultiCellCanvas a)
+-- | Inheritance type of the MultiCellCanvas class.
+type TMultiCellCanvas a  = TFlexGridSizer (CMultiCellCanvas a)
+-- | Abstract type of the MultiCellCanvas class.
+data CMultiCellCanvas a  = CMultiCellCanvas
+
+-- | Pointer to an object of type 'List', derived from 'WxObject'.
+type List a  = WxObject (CList a)
+-- | Inheritance type of the List class.
+type TList a  = TWxObject (CList a)
+-- | Abstract type of the List class.
+data CList a  = CList
+
+-- | Pointer to an object of type 'StringList', derived from 'List'.
+type StringList a  = List (CStringList a)
+-- | Inheritance type of the StringList class.
+type TStringList a  = TList (CStringList a)
+-- | Abstract type of the StringList class.
+data CStringList a  = CStringList
+
+-- | Pointer to an object of type 'PenList', derived from 'List'.
+type PenList a  = List (CPenList a)
+-- | Inheritance type of the PenList class.
+type TPenList a  = TList (CPenList a)
+-- | Abstract type of the PenList class.
+data CPenList a  = CPenList
+
+-- | Pointer to an object of type 'PathList', derived from 'List'.
+type PathList a  = List (CPathList a)
+-- | Inheritance type of the PathList class.
+type TPathList a  = TList (CPathList a)
+-- | Abstract type of the PathList class.
+data CPathList a  = CPathList
+
+-- | Pointer to an object of type 'FontList', derived from 'List'.
+type FontList a  = List (CFontList a)
+-- | Inheritance type of the FontList class.
+type TFontList a  = TList (CFontList a)
+-- | Abstract type of the FontList class.
+data CFontList a  = CFontList
+
+-- | Pointer to an object of type 'ExprDatabase', derived from 'List'.
+type ExprDatabase a  = List (CExprDatabase a)
+-- | Inheritance type of the ExprDatabase class.
+type TExprDatabase a  = TList (CExprDatabase a)
+-- | Abstract type of the ExprDatabase class.
+data CExprDatabase a  = CExprDatabase
+
+-- | Pointer to an object of type 'ColourDatabase', derived from 'List'.
+type ColourDatabase a  = List (CColourDatabase a)
+-- | Inheritance type of the ColourDatabase class.
+type TColourDatabase a  = TList (CColourDatabase a)
+-- | Abstract type of the ColourDatabase class.
+data CColourDatabase a  = CColourDatabase
+
+-- | Pointer to an object of type 'BrushList', derived from 'List'.
+type BrushList a  = List (CBrushList a)
+-- | Inheritance type of the BrushList class.
+type TBrushList a  = TList (CBrushList a)
+-- | Abstract type of the BrushList class.
+data CBrushList a  = CBrushList
+
+-- | Pointer to an object of type 'Colour', derived from 'WxObject'.
+type Colour a  = WxObject (CColour a)
+-- | Inheritance type of the Colour class.
+type TColour a  = TWxObject (CColour a)
+-- | Abstract type of the Colour class.
+data CColour a  = CColour
+
+-- | Pointer to an object of type 'ContextHelp', derived from 'WxObject'.
+type ContextHelp a  = WxObject (CContextHelp a)
+-- | Inheritance type of the ContextHelp class.
+type TContextHelp a  = TWxObject (CContextHelp a)
+-- | Abstract type of the ContextHelp class.
+data CContextHelp a  = CContextHelp
+
+-- | Pointer to an object of type 'Database', derived from 'WxObject'.
+type Database a  = WxObject (CDatabase a)
+-- | Inheritance type of the Database class.
+type TDatabase a  = TWxObject (CDatabase a)
+-- | Abstract type of the Database class.
+data CDatabase a  = CDatabase
+
+-- | Pointer to an object of type 'FSFile', derived from 'WxObject'.
+type FSFile a  = WxObject (CFSFile a)
+-- | Inheritance type of the FSFile class.
+type TFSFile a  = TWxObject (CFSFile a)
+-- | Abstract type of the FSFile class.
+data CFSFile a  = CFSFile
+
+-- | Pointer to an object of type 'FileSystem', derived from 'WxObject'.
+type FileSystem a  = WxObject (CFileSystem a)
+-- | Inheritance type of the FileSystem class.
+type TFileSystem a  = TWxObject (CFileSystem a)
+-- | Abstract type of the FileSystem class.
+data CFileSystem a  = CFileSystem
+
+-- | Pointer to an object of type 'FontData', derived from 'WxObject'.
+type FontData a  = WxObject (CFontData a)
+-- | Inheritance type of the FontData class.
+type TFontData a  = TWxObject (CFontData a)
+-- | Abstract type of the FontData class.
+data CFontData a  = CFontData
+
+-- | Pointer to an object of type 'HelpControllerBase', derived from 'WxObject'.
+type HelpControllerBase a  = WxObject (CHelpControllerBase a)
+-- | Inheritance type of the HelpControllerBase class.
+type THelpControllerBase a  = TWxObject (CHelpControllerBase a)
+-- | Abstract type of the HelpControllerBase class.
+data CHelpControllerBase a  = CHelpControllerBase
+
+-- | Pointer to an object of type 'HtmlHelpController', derived from 'HelpControllerBase'.
+type HtmlHelpController a  = HelpControllerBase (CHtmlHelpController a)
+-- | Inheritance type of the HtmlHelpController class.
+type THtmlHelpController a  = THelpControllerBase (CHtmlHelpController a)
+-- | Abstract type of the HtmlHelpController class.
+data CHtmlHelpController a  = CHtmlHelpController
+
+-- | Pointer to an object of type 'HelpController', derived from 'HelpControllerBase'.
+type HelpController a  = HelpControllerBase (CHelpController a)
+-- | Inheritance type of the HelpController class.
+type THelpController a  = THelpControllerBase (CHelpController a)
+-- | Abstract type of the HelpController class.
+data CHelpController a  = CHelpController
+
+-- | Pointer to an object of type 'HtmlDCRenderer', derived from 'WxObject'.
+type HtmlDCRenderer a  = WxObject (CHtmlDCRenderer a)
+-- | Inheritance type of the HtmlDCRenderer class.
+type THtmlDCRenderer a  = TWxObject (CHtmlDCRenderer a)
+-- | Abstract type of the HtmlDCRenderer class.
+data CHtmlDCRenderer a  = CHtmlDCRenderer
+
+-- | Pointer to an object of type 'HtmlFilter', derived from 'WxObject'.
+type HtmlFilter a  = WxObject (CHtmlFilter a)
+-- | Inheritance type of the HtmlFilter class.
+type THtmlFilter a  = TWxObject (CHtmlFilter a)
+-- | Abstract type of the HtmlFilter class.
+data CHtmlFilter a  = CHtmlFilter
+
+-- | Pointer to an object of type 'HtmlHelpData', derived from 'WxObject'.
+type HtmlHelpData a  = WxObject (CHtmlHelpData a)
+-- | Inheritance type of the HtmlHelpData class.
+type THtmlHelpData a  = TWxObject (CHtmlHelpData a)
+-- | Abstract type of the HtmlHelpData class.
+data CHtmlHelpData a  = CHtmlHelpData
+
+-- | Pointer to an object of type 'HtmlLinkInfo', derived from 'WxObject'.
+type HtmlLinkInfo a  = WxObject (CHtmlLinkInfo a)
+-- | Inheritance type of the HtmlLinkInfo class.
+type THtmlLinkInfo a  = TWxObject (CHtmlLinkInfo a)
+-- | Abstract type of the HtmlLinkInfo class.
+data CHtmlLinkInfo a  = CHtmlLinkInfo
+
+-- | Pointer to an object of type 'Printout', derived from 'WxObject'.
+type Printout a  = WxObject (CPrintout a)
+-- | Inheritance type of the Printout class.
+type TPrintout a  = TWxObject (CPrintout a)
+-- | Abstract type of the Printout class.
+data CPrintout a  = CPrintout
+
+-- | Pointer to an object of type 'WXCPrintout', derived from 'Printout'.
+type WXCPrintout a  = Printout (CWXCPrintout a)
+-- | Inheritance type of the WXCPrintout class.
+type TWXCPrintout a  = TPrintout (CWXCPrintout a)
+-- | Abstract type of the WXCPrintout class.
+data CWXCPrintout a  = CWXCPrintout
+
+-- | Pointer to an object of type 'HtmlPrintout', derived from 'Printout'.
+type HtmlPrintout a  = Printout (CHtmlPrintout a)
+-- | Inheritance type of the HtmlPrintout class.
+type THtmlPrintout a  = TPrintout (CHtmlPrintout a)
+-- | Abstract type of the HtmlPrintout class.
+data CHtmlPrintout a  = CHtmlPrintout
+
+-- | Pointer to an object of type 'HtmlTagHandler', derived from 'WxObject'.
+type HtmlTagHandler a  = WxObject (CHtmlTagHandler a)
+-- | Inheritance type of the HtmlTagHandler class.
+type THtmlTagHandler a  = TWxObject (CHtmlTagHandler a)
+-- | Abstract type of the HtmlTagHandler class.
+data CHtmlTagHandler a  = CHtmlTagHandler
+
+-- | Pointer to an object of type 'HtmlWinTagHandler', derived from 'HtmlTagHandler'.
+type HtmlWinTagHandler a  = HtmlTagHandler (CHtmlWinTagHandler a)
+-- | Inheritance type of the HtmlWinTagHandler class.
+type THtmlWinTagHandler a  = THtmlTagHandler (CHtmlWinTagHandler a)
+-- | Abstract type of the HtmlWinTagHandler class.
+data CHtmlWinTagHandler a  = CHtmlWinTagHandler
+
+-- | Pointer to an object of type 'SockAddress', derived from 'WxObject'.
+type SockAddress a  = WxObject (CSockAddress a)
+-- | Inheritance type of the SockAddress class.
+type TSockAddress a  = TWxObject (CSockAddress a)
+-- | Abstract type of the SockAddress class.
+data CSockAddress a  = CSockAddress
+
+-- | Pointer to an object of type 'IPV4address', derived from 'SockAddress'.
+type IPV4address a  = SockAddress (CIPV4address a)
+-- | Inheritance type of the IPV4address class.
+type TIPV4address a  = TSockAddress (CIPV4address a)
+-- | Abstract type of the IPV4address class.
+data CIPV4address a  = CIPV4address
+
+-- | Pointer to an object of type 'Image', derived from 'WxObject'.
+type Image a  = WxObject (CImage a)
+-- | Inheritance type of the Image class.
+type TImage a  = TWxObject (CImage a)
+-- | Abstract type of the Image class.
+data CImage a  = CImage
+
+-- | Pointer to an object of type 'ImageList', derived from 'WxObject'.
+type ImageList a  = WxObject (CImageList a)
+-- | Inheritance type of the ImageList class.
+type TImageList a  = TWxObject (CImageList a)
+-- | Abstract type of the ImageList class.
+data CImageList a  = CImageList
+
+-- | Pointer to an object of type 'LayoutConstraints', derived from 'WxObject'.
+type LayoutConstraints a  = WxObject (CLayoutConstraints a)
+-- | Inheritance type of the LayoutConstraints class.
+type TLayoutConstraints a  = TWxObject (CLayoutConstraints a)
+-- | Abstract type of the LayoutConstraints class.
+data CLayoutConstraints a  = CLayoutConstraints
+
+-- | Pointer to an object of type 'MenuItem', derived from 'WxObject'.
+type MenuItem a  = WxObject (CMenuItem a)
+-- | Inheritance type of the MenuItem class.
+type TMenuItem a  = TWxObject (CMenuItem a)
+-- | Abstract type of the MenuItem class.
+data CMenuItem a  = CMenuItem
+
+-- | Pointer to an object of type 'Metafile', derived from 'WxObject'.
+type Metafile a  = WxObject (CMetafile a)
+-- | Inheritance type of the Metafile class.
+type TMetafile a  = TWxObject (CMetafile a)
+-- | Abstract type of the Metafile class.
+data CMetafile a  = CMetafile
+
+-- | Pointer to an object of type 'PageSetupDialogData', derived from 'WxObject'.
+type PageSetupDialogData a  = WxObject (CPageSetupDialogData a)
+-- | Inheritance type of the PageSetupDialogData class.
+type TPageSetupDialogData a  = TWxObject (CPageSetupDialogData a)
+-- | Abstract type of the PageSetupDialogData class.
+data CPageSetupDialogData a  = CPageSetupDialogData
+
+-- | Pointer to an object of type 'PostScriptPrintNativeData', derived from 'WxObject'.
+type PostScriptPrintNativeData a  = WxObject (CPostScriptPrintNativeData a)
+-- | Inheritance type of the PostScriptPrintNativeData class.
+type TPostScriptPrintNativeData a  = TWxObject (CPostScriptPrintNativeData a)
+-- | Abstract type of the PostScriptPrintNativeData class.
+data CPostScriptPrintNativeData a  = CPostScriptPrintNativeData
+
+-- | Pointer to an object of type 'PrintDialogData', derived from 'WxObject'.
+type PrintDialogData a  = WxObject (CPrintDialogData a)
+-- | Inheritance type of the PrintDialogData class.
+type TPrintDialogData a  = TWxObject (CPrintDialogData a)
+-- | Abstract type of the PrintDialogData class.
+data CPrintDialogData a  = CPrintDialogData
+
+-- | Pointer to an object of type 'Printer', derived from 'WxObject'.
+type Printer a  = WxObject (CPrinter a)
+-- | Inheritance type of the Printer class.
+type TPrinter a  = TWxObject (CPrinter a)
+-- | Abstract type of the Printer class.
+data CPrinter a  = CPrinter
+
+-- | Pointer to an object of type 'QueryCol', derived from 'WxObject'.
+type QueryCol a  = WxObject (CQueryCol a)
+-- | Inheritance type of the QueryCol class.
+type TQueryCol a  = TWxObject (CQueryCol a)
+-- | Abstract type of the QueryCol class.
+data CQueryCol a  = CQueryCol
+
+-- | Pointer to an object of type 'RecordSet', derived from 'WxObject'.
+type RecordSet a  = WxObject (CRecordSet a)
+-- | Inheritance type of the RecordSet class.
+type TRecordSet a  = TWxObject (CRecordSet a)
+-- | Abstract type of the RecordSet class.
+data CRecordSet a  = CRecordSet
+
+-- | Pointer to an object of type 'RegionIterator', derived from 'WxObject'.
+type RegionIterator a  = WxObject (CRegionIterator a)
+-- | Inheritance type of the RegionIterator class.
+type TRegionIterator a  = TWxObject (CRegionIterator a)
+-- | Abstract type of the RegionIterator class.
+data CRegionIterator a  = CRegionIterator
+
+-- | Pointer to an object of type 'SizerItem', derived from 'WxObject'.
+type SizerItem a  = WxObject (CSizerItem a)
+-- | Inheritance type of the SizerItem class.
+type TSizerItem a  = TWxObject (CSizerItem a)
+-- | Abstract type of the SizerItem class.
+data CSizerItem a  = CSizerItem
+
+-- | Pointer to an object of type 'SystemSettings', derived from 'WxObject'.
+type SystemSettings a  = WxObject (CSystemSettings a)
+-- | Inheritance type of the SystemSettings class.
+type TSystemSettings a  = TWxObject (CSystemSettings a)
+-- | Abstract type of the SystemSettings class.
+data CSystemSettings a  = CSystemSettings
+
+-- | Pointer to an object of type 'Timer', derived from 'WxObject'.
+type Timer a  = WxObject (CTimer a)
+-- | Inheritance type of the Timer class.
+type TTimer a  = TWxObject (CTimer a)
+-- | Abstract type of the Timer class.
+data CTimer a  = CTimer
+
+-- | Pointer to an object of type 'TimerEx', derived from 'Timer'.
+type TimerEx a  = Timer (CTimerEx a)
+-- | Inheritance type of the TimerEx class.
+type TTimerEx a  = TTimer (CTimerEx a)
+-- | Abstract type of the TimerEx class.
+data CTimerEx a  = CTimerEx
+
+-- | Pointer to an object of type 'Variant', derived from 'WxObject'.
+type Variant a  = WxObject (CVariant a)
+-- | Inheritance type of the Variant class.
+type TVariant a  = TWxObject (CVariant a)
+-- | Abstract type of the Variant class.
+data CVariant a  = CVariant
+
+-- | Pointer to an object of type 'XmlResource', derived from 'WxObject'.
+type XmlResource a  = WxObject (CXmlResource a)
+-- | Inheritance type of the XmlResource class.
+type TXmlResource a  = TWxObject (CXmlResource a)
+-- | Abstract type of the XmlResource class.
+data CXmlResource a  = CXmlResource
+
+-- | Pointer to an object of type 'PGProperty', derived from 'WxObject'.
+type PGProperty a  = WxObject (CPGProperty a)
+-- | Inheritance type of the PGProperty class.
+type TPGProperty a  = TWxObject (CPGProperty a)
+-- | Abstract type of the PGProperty class.
+data CPGProperty a  = CPGProperty
+
+-- | Pointer to an object of type 'PropertyCategory', derived from 'PGProperty'.
+type PropertyCategory a  = PGProperty (CPropertyCategory a)
+-- | Inheritance type of the PropertyCategory class.
+type TPropertyCategory a  = TPGProperty (CPropertyCategory a)
+-- | Abstract type of the PropertyCategory class.
+data CPropertyCategory a  = CPropertyCategory
+
+-- | Pointer to an object of type 'FileProperty', derived from 'PGProperty'.
+type FileProperty a  = PGProperty (CFileProperty a)
+-- | Inheritance type of the FileProperty class.
+type TFileProperty a  = TPGProperty (CFileProperty a)
+-- | Abstract type of the FileProperty class.
+data CFileProperty a  = CFileProperty
+
+-- | Pointer to an object of type 'DateProperty', derived from 'PGProperty'.
+type DateProperty a  = PGProperty (CDateProperty a)
+-- | Inheritance type of the DateProperty class.
+type TDateProperty a  = TPGProperty (CDateProperty a)
+-- | Abstract type of the DateProperty class.
+data CDateProperty a  = CDateProperty
+
+-- | Pointer to an object of type 'FloatProperty', derived from 'PGProperty'.
+type FloatProperty a  = PGProperty (CFloatProperty a)
+-- | Inheritance type of the FloatProperty class.
+type TFloatProperty a  = TPGProperty (CFloatProperty a)
+-- | Abstract type of the FloatProperty class.
+data CFloatProperty a  = CFloatProperty
+
+-- | Pointer to an object of type 'BoolProperty', derived from 'PGProperty'.
+type BoolProperty a  = PGProperty (CBoolProperty a)
+-- | Inheritance type of the BoolProperty class.
+type TBoolProperty a  = TPGProperty (CBoolProperty a)
+-- | Abstract type of the BoolProperty class.
+data CBoolProperty a  = CBoolProperty
+
+-- | Pointer to an object of type 'IntProperty', derived from 'PGProperty'.
+type IntProperty a  = PGProperty (CIntProperty a)
+-- | Inheritance type of the IntProperty class.
+type TIntProperty a  = TPGProperty (CIntProperty a)
+-- | Abstract type of the IntProperty class.
+data CIntProperty a  = CIntProperty
+
+-- | Pointer to an object of type 'StringProperty', derived from 'PGProperty'.
+type StringProperty a  = PGProperty (CStringProperty a)
+-- | Inheritance type of the StringProperty class.
+type TStringProperty a  = TPGProperty (CStringProperty a)
+-- | Abstract type of the StringProperty class.
+data CStringProperty a  = CStringProperty
+
+-- | Pointer to an object of type 'GraphicsObject', derived from 'WxObject'.
+type GraphicsObject a  = WxObject (CGraphicsObject a)
+-- | Inheritance type of the GraphicsObject class.
+type TGraphicsObject a  = TWxObject (CGraphicsObject a)
+-- | Abstract type of the GraphicsObject class.
+data CGraphicsObject a  = CGraphicsObject
+
+-- | Pointer to an object of type 'GraphicsRenderer', derived from 'GraphicsObject'.
+type GraphicsRenderer a  = GraphicsObject (CGraphicsRenderer a)
+-- | Inheritance type of the GraphicsRenderer class.
+type TGraphicsRenderer a  = TGraphicsObject (CGraphicsRenderer a)
+-- | Abstract type of the GraphicsRenderer class.
+data CGraphicsRenderer a  = CGraphicsRenderer
+
+-- | Pointer to an object of type 'GraphicsPen', derived from 'GraphicsObject'.
+type GraphicsPen a  = GraphicsObject (CGraphicsPen a)
+-- | Inheritance type of the GraphicsPen class.
+type TGraphicsPen a  = TGraphicsObject (CGraphicsPen a)
+-- | Abstract type of the GraphicsPen class.
+data CGraphicsPen a  = CGraphicsPen
+
+-- | Pointer to an object of type 'GraphicsPath', derived from 'GraphicsObject'.
+type GraphicsPath a  = GraphicsObject (CGraphicsPath a)
+-- | Inheritance type of the GraphicsPath class.
+type TGraphicsPath a  = TGraphicsObject (CGraphicsPath a)
+-- | Abstract type of the GraphicsPath class.
+data CGraphicsPath a  = CGraphicsPath
+
+-- | Pointer to an object of type 'GraphicsMatrix', derived from 'GraphicsObject'.
+type GraphicsMatrix a  = GraphicsObject (CGraphicsMatrix a)
+-- | Inheritance type of the GraphicsMatrix class.
+type TGraphicsMatrix a  = TGraphicsObject (CGraphicsMatrix a)
+-- | Abstract type of the GraphicsMatrix class.
+data CGraphicsMatrix a  = CGraphicsMatrix
+
+-- | Pointer to an object of type 'GraphicsFont', derived from 'GraphicsObject'.
+type GraphicsFont a  = GraphicsObject (CGraphicsFont a)
+-- | Inheritance type of the GraphicsFont class.
+type TGraphicsFont a  = TGraphicsObject (CGraphicsFont a)
+-- | Abstract type of the GraphicsFont class.
+data CGraphicsFont a  = CGraphicsFont
+
+-- | Pointer to an object of type 'GraphicsContext', derived from 'GraphicsObject'.
+type GraphicsContext a  = GraphicsObject (CGraphicsContext a)
+-- | Inheritance type of the GraphicsContext class.
+type TGraphicsContext a  = TGraphicsObject (CGraphicsContext a)
+-- | Abstract type of the GraphicsContext class.
+data CGraphicsContext a  = CGraphicsContext
+
+-- | Pointer to an object of type 'GraphicsBrush', derived from 'GraphicsObject'.
+type GraphicsBrush a  = GraphicsObject (CGraphicsBrush a)
+-- | Inheritance type of the GraphicsBrush class.
+type TGraphicsBrush a  = TGraphicsObject (CGraphicsBrush a)
+-- | Abstract type of the GraphicsBrush class.
+data CGraphicsBrush a  = CGraphicsBrush
+
+-- | Pointer to an object of type 'GLContext', derived from 'WxObject'.
+type GLContext a  = WxObject (CGLContext a)
+-- | Inheritance type of the GLContext class.
+type TGLContext a  = TWxObject (CGLContext a)
+-- | Abstract type of the GLContext class.
+data CGLContext a  = CGLContext
+
+-- | Pointer to an object of type 'XmlResourceHandler', derived from 'WxObject'.
+type XmlResourceHandler a  = WxObject (CXmlResourceHandler a)
+-- | Inheritance type of the XmlResourceHandler class.
+type TXmlResourceHandler a  = TWxObject (CXmlResourceHandler a)
+-- | Abstract type of the XmlResourceHandler class.
+data CXmlResourceHandler a  = CXmlResourceHandler
+
+-- | Pointer to an object of type 'Sound', derived from 'WxObject'.
+type Sound a  = WxObject (CSound a)
+-- | Inheritance type of the Sound class.
+type TSound a  = TWxObject (CSound a)
+-- | Abstract type of the Sound class.
+data CSound a  = CSound
+
+-- | Pointer to an object of type 'VariantData', derived from 'WxObject'.
+type VariantData a  = WxObject (CVariantData a)
+-- | Inheritance type of the VariantData class.
+type TVariantData a  = TWxObject (CVariantData a)
+-- | Abstract type of the VariantData class.
+data CVariantData a  = CVariantData
+
+-- | Pointer to an object of type 'URL', derived from 'WxObject'.
+type URL a  = WxObject (CURL a)
+-- | Inheritance type of the URL class.
+type TURL a  = TWxObject (CURL a)
+-- | Abstract type of the URL class.
+data CURL a  = CURL
+
+-- | Pointer to an object of type 'TreeLayout', derived from 'WxObject'.
+type TreeLayout a  = WxObject (CTreeLayout a)
+-- | Inheritance type of the TreeLayout class.
+type TTreeLayout a  = TWxObject (CTreeLayout a)
+-- | Abstract type of the TreeLayout class.
+data CTreeLayout a  = CTreeLayout
+
+-- | Pointer to an object of type 'TreeLayoutStored', derived from 'TreeLayout'.
+type TreeLayoutStored a  = TreeLayout (CTreeLayoutStored a)
+-- | Inheritance type of the TreeLayoutStored class.
+type TTreeLayoutStored a  = TTreeLayout (CTreeLayoutStored a)
+-- | Abstract type of the TreeLayoutStored class.
+data CTreeLayoutStored a  = CTreeLayoutStored
+
+-- | Pointer to an object of type 'ToolTip', derived from 'WxObject'.
+type ToolTip a  = WxObject (CToolTip a)
+-- | Inheritance type of the ToolTip class.
+type TToolTip a  = TWxObject (CToolTip a)
+-- | Abstract type of the ToolTip class.
+data CToolTip a  = CToolTip
+
+-- | Pointer to an object of type 'TimerBase', derived from 'WxObject'.
+type TimerBase a  = WxObject (CTimerBase a)
+-- | Inheritance type of the TimerBase class.
+type TTimerBase a  = TWxObject (CTimerBase a)
+-- | Abstract type of the TimerBase class.
+data CTimerBase a  = CTimerBase
+
+-- | Pointer to an object of type 'Time', derived from 'WxObject'.
+type Time a  = WxObject (CTime a)
+-- | Inheritance type of the Time class.
+type TTime a  = TWxObject (CTime a)
+-- | Abstract type of the Time class.
+data CTime a  = CTime
+
+-- | Pointer to an object of type 'TablesInUse', derived from 'WxObject'.
+type TablesInUse a  = WxObject (CTablesInUse a)
+-- | Inheritance type of the TablesInUse class.
+type TTablesInUse a  = TWxObject (CTablesInUse a)
+-- | Abstract type of the TablesInUse class.
+data CTablesInUse a  = CTablesInUse
+
+-- | Pointer to an object of type 'SystemOptions', derived from 'WxObject'.
+type SystemOptions a  = WxObject (CSystemOptions a)
+-- | Inheritance type of the SystemOptions class.
+type TSystemOptions a  = TWxObject (CSystemOptions a)
+-- | Abstract type of the SystemOptions class.
+data CSystemOptions a  = CSystemOptions
+
+-- | Pointer to an object of type 'StringTokenizer', derived from 'WxObject'.
+type StringTokenizer a  = WxObject (CStringTokenizer a)
+-- | Inheritance type of the StringTokenizer class.
+type TStringTokenizer a  = TWxObject (CStringTokenizer a)
+-- | Abstract type of the StringTokenizer class.
+data CStringTokenizer a  = CStringTokenizer
+
+-- | Pointer to an object of type 'QueryField', derived from 'WxObject'.
+type QueryField a  = WxObject (CQueryField a)
+-- | Inheritance type of the QueryField class.
+type TQueryField a  = TWxObject (CQueryField a)
+-- | Abstract type of the QueryField class.
+data CQueryField a  = CQueryField
+
+-- | Pointer to an object of type 'Quantize', derived from 'WxObject'.
+type Quantize a  = WxObject (CQuantize a)
+-- | Inheritance type of the Quantize class.
+type TQuantize a  = TWxObject (CQuantize a)
+-- | Abstract type of the Quantize class.
+data CQuantize a  = CQuantize
+
+-- | Pointer to an object of type 'PrintPreview', derived from 'WxObject'.
+type PrintPreview a  = WxObject (CPrintPreview a)
+-- | Inheritance type of the PrintPreview class.
+type TPrintPreview a  = TWxObject (CPrintPreview a)
+-- | Abstract type of the PrintPreview class.
+data CPrintPreview a  = CPrintPreview
+
+-- | Pointer to an object of type 'PrintData', derived from 'WxObject'.
+type PrintData a  = WxObject (CPrintData a)
+-- | Inheritance type of the PrintData class.
+type TPrintData a  = TWxObject (CPrintData a)
+-- | Abstract type of the PrintData class.
+data CPrintData a  = CPrintData
+
+-- | Pointer to an object of type 'PlotOnOffCurve', derived from 'WxObject'.
+type PlotOnOffCurve a  = WxObject (CPlotOnOffCurve a)
+-- | Inheritance type of the PlotOnOffCurve class.
+type TPlotOnOffCurve a  = TWxObject (CPlotOnOffCurve a)
+-- | Abstract type of the PlotOnOffCurve class.
+data CPlotOnOffCurve a  = CPlotOnOffCurve
+
+-- | Pointer to an object of type 'PageSetupDialog', derived from 'WxObject'.
+type PageSetupDialog a  = WxObject (CPageSetupDialog a)
+-- | Inheritance type of the PageSetupDialog class.
+type TPageSetupDialog a  = TWxObject (CPageSetupDialog a)
+-- | Abstract type of the PageSetupDialog class.
+data CPageSetupDialog a  = CPageSetupDialog
+
+-- | Pointer to an object of type 'MultiCellItemHandle', derived from 'WxObject'.
+type MultiCellItemHandle a  = WxObject (CMultiCellItemHandle a)
+-- | Inheritance type of the MultiCellItemHandle class.
+type TMultiCellItemHandle a  = TWxObject (CMultiCellItemHandle a)
+-- | Abstract type of the MultiCellItemHandle class.
+data CMultiCellItemHandle a  = CMultiCellItemHandle
+
+-- | Pointer to an object of type 'Mask', derived from 'WxObject'.
+type Mask a  = WxObject (CMask a)
+-- | Inheritance type of the Mask class.
+type TMask a  = TWxObject (CMask a)
+-- | Abstract type of the Mask class.
+data CMask a  = CMask
+
+-- | Pointer to an object of type 'ListItem', derived from 'WxObject'.
+type ListItem a  = WxObject (CListItem a)
+-- | Inheritance type of the ListItem class.
+type TListItem a  = TWxObject (CListItem a)
+-- | Abstract type of the ListItem class.
+data CListItem a  = CListItem
+
+-- | Pointer to an object of type 'LayoutAlgorithm', derived from 'WxObject'.
+type LayoutAlgorithm a  = WxObject (CLayoutAlgorithm a)
+-- | Inheritance type of the LayoutAlgorithm class.
+type TLayoutAlgorithm a  = TWxObject (CLayoutAlgorithm a)
+-- | Abstract type of the LayoutAlgorithm class.
+data CLayoutAlgorithm a  = CLayoutAlgorithm
+
+-- | Pointer to an object of type 'Joystick', derived from 'WxObject'.
+type Joystick a  = WxObject (CJoystick a)
+-- | Inheritance type of the Joystick class.
+type TJoystick a  = TWxObject (CJoystick a)
+-- | Abstract type of the Joystick class.
+data CJoystick a  = CJoystick
+
+-- | Pointer to an object of type 'IndividualLayoutConstraint', derived from 'WxObject'.
+type IndividualLayoutConstraint a  = WxObject (CIndividualLayoutConstraint a)
+-- | Inheritance type of the IndividualLayoutConstraint class.
+type TIndividualLayoutConstraint a  = TWxObject (CIndividualLayoutConstraint a)
+-- | Abstract type of the IndividualLayoutConstraint class.
+data CIndividualLayoutConstraint a  = CIndividualLayoutConstraint
+
+-- | Pointer to an object of type 'ImageHandler', derived from 'WxObject'.
+type ImageHandler a  = WxObject (CImageHandler a)
+-- | Inheritance type of the ImageHandler class.
+type TImageHandler a  = TWxObject (CImageHandler a)
+-- | Abstract type of the ImageHandler class.
+data CImageHandler a  = CImageHandler
+
+-- | Pointer to an object of type 'Module', derived from 'WxObject'.
+type Module a  = WxObject (CModule a)
+-- | Inheritance type of the Module class.
+type TModule a  = TWxObject (CModule a)
+-- | Abstract type of the Module class.
+data CModule a  = CModule
+
+-- | Pointer to an object of type 'HtmlTagsModule', derived from 'Module'.
+type HtmlTagsModule a  = Module (CHtmlTagsModule a)
+-- | Inheritance type of the HtmlTagsModule class.
+type THtmlTagsModule a  = TModule (CHtmlTagsModule a)
+-- | Abstract type of the HtmlTagsModule class.
+data CHtmlTagsModule a  = CHtmlTagsModule
+
+-- | Pointer to an object of type 'HtmlTag', derived from 'WxObject'.
+type HtmlTag a  = WxObject (CHtmlTag a)
+-- | Inheritance type of the HtmlTag class.
+type THtmlTag a  = TWxObject (CHtmlTag a)
+-- | Abstract type of the HtmlTag class.
+data CHtmlTag a  = CHtmlTag
+
+-- | Pointer to an object of type 'HtmlParser', derived from 'WxObject'.
+type HtmlParser a  = WxObject (CHtmlParser a)
+-- | Inheritance type of the HtmlParser class.
+type THtmlParser a  = TWxObject (CHtmlParser a)
+-- | Abstract type of the HtmlParser class.
+data CHtmlParser a  = CHtmlParser
+
+-- | Pointer to an object of type 'HtmlWinParser', derived from 'HtmlParser'.
+type HtmlWinParser a  = HtmlParser (CHtmlWinParser a)
+-- | Inheritance type of the HtmlWinParser class.
+type THtmlWinParser a  = THtmlParser (CHtmlWinParser a)
+-- | Abstract type of the HtmlWinParser class.
+data CHtmlWinParser a  = CHtmlWinParser
+
+-- | Pointer to an object of type 'HtmlEasyPrinting', derived from 'WxObject'.
+type HtmlEasyPrinting a  = WxObject (CHtmlEasyPrinting a)
+-- | Inheritance type of the HtmlEasyPrinting class.
+type THtmlEasyPrinting a  = TWxObject (CHtmlEasyPrinting a)
+-- | Abstract type of the HtmlEasyPrinting class.
+data CHtmlEasyPrinting a  = CHtmlEasyPrinting
+
+-- | Pointer to an object of type 'HtmlCell', derived from 'WxObject'.
+type HtmlCell a  = WxObject (CHtmlCell a)
+-- | Inheritance type of the HtmlCell class.
+type THtmlCell a  = TWxObject (CHtmlCell a)
+-- | Abstract type of the HtmlCell class.
+data CHtmlCell a  = CHtmlCell
+
+-- | Pointer to an object of type 'HtmlWidgetCell', derived from 'HtmlCell'.
+type HtmlWidgetCell a  = HtmlCell (CHtmlWidgetCell a)
+-- | Inheritance type of the HtmlWidgetCell class.
+type THtmlWidgetCell a  = THtmlCell (CHtmlWidgetCell a)
+-- | Abstract type of the HtmlWidgetCell class.
+data CHtmlWidgetCell a  = CHtmlWidgetCell
+
+-- | Pointer to an object of type 'HtmlContainerCell', derived from 'HtmlCell'.
+type HtmlContainerCell a  = HtmlCell (CHtmlContainerCell a)
+-- | Inheritance type of the HtmlContainerCell class.
+type THtmlContainerCell a  = THtmlCell (CHtmlContainerCell a)
+-- | Abstract type of the HtmlContainerCell class.
+data CHtmlContainerCell a  = CHtmlContainerCell
+
+-- | Pointer to an object of type 'HtmlColourCell', derived from 'HtmlCell'.
+type HtmlColourCell a  = HtmlCell (CHtmlColourCell a)
+-- | Inheritance type of the HtmlColourCell class.
+type THtmlColourCell a  = THtmlCell (CHtmlColourCell a)
+-- | Abstract type of the HtmlColourCell class.
+data CHtmlColourCell a  = CHtmlColourCell
+
+-- | Pointer to an object of type 'FindReplaceData', derived from 'WxObject'.
+type FindReplaceData a  = WxObject (CFindReplaceData a)
+-- | Inheritance type of the FindReplaceData class.
+type TFindReplaceData a  = TWxObject (CFindReplaceData a)
+-- | Abstract type of the FindReplaceData class.
+data CFindReplaceData a  = CFindReplaceData
+
+-- | Pointer to an object of type 'FileSystemHandler', derived from 'WxObject'.
+type FileSystemHandler a  = WxObject (CFileSystemHandler a)
+-- | Inheritance type of the FileSystemHandler class.
+type TFileSystemHandler a  = TWxObject (CFileSystemHandler a)
+-- | Abstract type of the FileSystemHandler class.
+data CFileSystemHandler a  = CFileSystemHandler
+
+-- | Pointer to an object of type 'MemoryFSHandler', derived from 'FileSystemHandler'.
+type MemoryFSHandler a  = FileSystemHandler (CMemoryFSHandler a)
+-- | Inheritance type of the MemoryFSHandler class.
+type TMemoryFSHandler a  = TFileSystemHandler (CMemoryFSHandler a)
+-- | Abstract type of the MemoryFSHandler class.
+data CMemoryFSHandler a  = CMemoryFSHandler
+
+-- | Pointer to an object of type 'FileHistory', derived from 'WxObject'.
+type FileHistory a  = WxObject (CFileHistory a)
+-- | Inheritance type of the FileHistory class.
+type TFileHistory a  = TWxObject (CFileHistory a)
+-- | Abstract type of the FileHistory class.
+data CFileHistory a  = CFileHistory
+
+-- | Pointer to an object of type 'SocketBase', derived from 'WxObject'.
+type SocketBase a  = WxObject (CSocketBase a)
+-- | Inheritance type of the SocketBase class.
+type TSocketBase a  = TWxObject (CSocketBase a)
+-- | Abstract type of the SocketBase class.
+data CSocketBase a  = CSocketBase
+
+-- | Pointer to an object of type 'SocketServer', derived from 'SocketBase'.
+type SocketServer a  = SocketBase (CSocketServer a)
+-- | Inheritance type of the SocketServer class.
+type TSocketServer a  = TSocketBase (CSocketServer a)
+-- | Abstract type of the SocketServer class.
+data CSocketServer a  = CSocketServer
+
+-- | Pointer to an object of type 'SocketClient', derived from 'SocketBase'.
+type SocketClient a  = SocketBase (CSocketClient a)
+-- | Inheritance type of the SocketClient class.
+type TSocketClient a  = TSocketBase (CSocketClient a)
+-- | Abstract type of the SocketClient class.
+data CSocketClient a  = CSocketClient
+
+-- | Pointer to an object of type 'Protocol', derived from 'SocketClient'.
+type Protocol a  = SocketClient (CProtocol a)
+-- | Inheritance type of the Protocol class.
+type TProtocol a  = TSocketClient (CProtocol a)
+-- | Abstract type of the Protocol class.
+data CProtocol a  = CProtocol
+
+-- | Pointer to an object of type 'HTTP', derived from 'Protocol'.
+type HTTP a  = Protocol (CHTTP a)
+-- | Inheritance type of the HTTP class.
+type THTTP a  = TProtocol (CHTTP a)
+-- | Abstract type of the HTTP class.
+data CHTTP a  = CHTTP
+
+-- | Pointer to an object of type 'FTP', derived from 'Protocol'.
+type FTP a  = Protocol (CFTP a)
+-- | Inheritance type of the FTP class.
+type TFTP a  = TProtocol (CFTP a)
+-- | Abstract type of the FTP class.
+data CFTP a  = CFTP
+
+-- | Pointer to an object of type 'EncodingConverter', derived from 'WxObject'.
+type EncodingConverter a  = WxObject (CEncodingConverter a)
+-- | Inheritance type of the EncodingConverter class.
+type TEncodingConverter a  = TWxObject (CEncodingConverter a)
+-- | Abstract type of the EncodingConverter class.
+data CEncodingConverter a  = CEncodingConverter
+
+-- | Pointer to an object of type 'ToolLayoutItem', derived from 'WxObject'.
+type ToolLayoutItem a  = WxObject (CToolLayoutItem a)
+-- | Inheritance type of the ToolLayoutItem class.
+type TToolLayoutItem a  = TWxObject (CToolLayoutItem a)
+-- | Abstract type of the ToolLayoutItem class.
+data CToolLayoutItem a  = CToolLayoutItem
+
+-- | Pointer to an object of type 'DynToolInfo', derived from 'ToolLayoutItem'.
+type DynToolInfo a  = ToolLayoutItem (CDynToolInfo a)
+-- | Inheritance type of the DynToolInfo class.
+type TDynToolInfo a  = TToolLayoutItem (CDynToolInfo a)
+-- | Abstract type of the DynToolInfo class.
+data CDynToolInfo a  = CDynToolInfo
+
+-- | Pointer to an object of type 'DragImage', derived from 'WxObject'.
+type DragImage a  = WxObject (CDragImage a)
+-- | Inheritance type of the DragImage class.
+type TDragImage a  = TWxObject (CDragImage a)
+-- | Abstract type of the DragImage class.
+data CDragImage a  = CDragImage
+
+-- | Pointer to an object of type 'GenericDragImage', derived from 'DragImage'.
+type GenericDragImage a  = DragImage (CGenericDragImage a)
+-- | Inheritance type of the GenericDragImage class.
+type TGenericDragImage a  = TDragImage (CGenericDragImage a)
+-- | Abstract type of the GenericDragImage class.
+data CGenericDragImage a  = CGenericDragImage
+
+-- | Pointer to an object of type 'DocTemplate', derived from 'WxObject'.
+type DocTemplate a  = WxObject (CDocTemplate a)
+-- | Inheritance type of the DocTemplate class.
+type TDocTemplate a  = TWxObject (CDocTemplate a)
+-- | Abstract type of the DocTemplate class.
+data CDocTemplate a  = CDocTemplate
+
+-- | Pointer to an object of type 'CommandProcessor', derived from 'WxObject'.
+type CommandProcessor a  = WxObject (CCommandProcessor a)
+-- | Inheritance type of the CommandProcessor class.
+type TCommandProcessor a  = TWxObject (CCommandProcessor a)
+-- | Abstract type of the CommandProcessor class.
+data CCommandProcessor a  = CCommandProcessor
+
+-- | Pointer to an object of type 'ColourData', derived from 'WxObject'.
+type ColourData a  = WxObject (CColourData a)
+-- | Inheritance type of the ColourData class.
+type TColourData a  = TWxObject (CColourData a)
+-- | Abstract type of the ColourData class.
+data CColourData a  = CColourData
+
+-- | Pointer to an object of type 'Closure', derived from 'WxObject'.
+type Closure a  = WxObject (CClosure a)
+-- | Inheritance type of the Closure class.
+type TClosure a  = TWxObject (CClosure a)
+-- | Abstract type of the Closure class.
+data CClosure a  = CClosure
+
+-- | Pointer to an object of type 'Clipboard', derived from 'WxObject'.
+type Clipboard a  = WxObject (CClipboard a)
+-- | Inheritance type of the Clipboard class.
+type TClipboard a  = TWxObject (CClipboard a)
+-- | Abstract type of the Clipboard class.
+data CClipboard a  = CClipboard
+
+-- | Pointer to an object of type 'BitmapHandler', derived from 'WxObject'.
+type BitmapHandler a  = WxObject (CBitmapHandler a)
+-- | Inheritance type of the BitmapHandler class.
+type TBitmapHandler a  = TWxObject (CBitmapHandler a)
+-- | Abstract type of the BitmapHandler class.
+data CBitmapHandler a  = CBitmapHandler
+
+-- | Pointer to an object of type 'AutomationObject', derived from 'WxObject'.
+type AutomationObject a  = WxObject (CAutomationObject a)
+-- | Inheritance type of the AutomationObject class.
+type TAutomationObject a  = TWxObject (CAutomationObject a)
+-- | Abstract type of the AutomationObject class.
+data CAutomationObject a  = CAutomationObject
+
+-- | Pointer to an object of type 'CbDimHandlerBase', derived from 'WxObject'.
+type CbDimHandlerBase a  = WxObject (CCbDimHandlerBase a)
+-- | Inheritance type of the CbDimHandlerBase class.
+type TCbDimHandlerBase a  = TWxObject (CCbDimHandlerBase a)
+-- | Abstract type of the CbDimHandlerBase class.
+data CCbDimHandlerBase a  = CCbDimHandlerBase
+
+-- | Pointer to an object of type 'CbDynToolBarDimHandler', derived from 'CbDimHandlerBase'.
+type CbDynToolBarDimHandler a  = CbDimHandlerBase (CCbDynToolBarDimHandler a)
+-- | Inheritance type of the CbDynToolBarDimHandler class.
+type TCbDynToolBarDimHandler a  = TCbDimHandlerBase (CCbDynToolBarDimHandler a)
+-- | Abstract type of the CbDynToolBarDimHandler class.
+data CCbDynToolBarDimHandler a  = CCbDynToolBarDimHandler
+
+-- | Pointer to an object of type 'Event', derived from 'WxObject'.
+type Event a  = WxObject (CEvent a)
+-- | Inheritance type of the Event class.
+type TEvent a  = TWxObject (CEvent a)
+-- | Abstract type of the Event class.
+data CEvent a  = CEvent
+
+-- | Pointer to an object of type 'CommandEvent', derived from 'Event'.
+type CommandEvent a  = Event (CCommandEvent a)
+-- | Inheritance type of the CommandEvent class.
+type TCommandEvent a  = TEvent (CCommandEvent a)
+-- | Abstract type of the CommandEvent class.
+data CCommandEvent a  = CCommandEvent
+
+-- | Pointer to an object of type 'NotifyEvent', derived from 'CommandEvent'.
+type NotifyEvent a  = CommandEvent (CNotifyEvent a)
+-- | Inheritance type of the NotifyEvent class.
+type TNotifyEvent a  = TCommandEvent (CNotifyEvent a)
+-- | Abstract type of the NotifyEvent class.
+data CNotifyEvent a  = CNotifyEvent
+
+-- | Pointer to an object of type 'MediaEvent', derived from 'NotifyEvent'.
+type MediaEvent a  = NotifyEvent (CMediaEvent a)
+-- | Inheritance type of the MediaEvent class.
+type TMediaEvent a  = TNotifyEvent (CMediaEvent a)
+-- | Abstract type of the MediaEvent class.
+data CMediaEvent a  = CMediaEvent
+
+-- | Pointer to an object of type 'PropertyGridEvent', derived from 'NotifyEvent'.
+type PropertyGridEvent a  = NotifyEvent (CPropertyGridEvent a)
+-- | Inheritance type of the PropertyGridEvent class.
+type TPropertyGridEvent a  = TNotifyEvent (CPropertyGridEvent a)
+-- | Abstract type of the PropertyGridEvent class.
+data CPropertyGridEvent a  = CPropertyGridEvent
+
+-- | Pointer to an object of type 'WizardEvent', derived from 'NotifyEvent'.
+type WizardEvent a  = NotifyEvent (CWizardEvent a)
+-- | Inheritance type of the WizardEvent class.
+type TWizardEvent a  = TNotifyEvent (CWizardEvent a)
+-- | Abstract type of the WizardEvent class.
+data CWizardEvent a  = CWizardEvent
+
+-- | Pointer to an object of type 'TreeEvent', derived from 'NotifyEvent'.
+type TreeEvent a  = NotifyEvent (CTreeEvent a)
+-- | Inheritance type of the TreeEvent class.
+type TTreeEvent a  = TNotifyEvent (CTreeEvent a)
+-- | Abstract type of the TreeEvent class.
+data CTreeEvent a  = CTreeEvent
+
+-- | Pointer to an object of type 'SplitterEvent', derived from 'NotifyEvent'.
+type SplitterEvent a  = NotifyEvent (CSplitterEvent a)
+-- | Inheritance type of the SplitterEvent class.
+type TSplitterEvent a  = TNotifyEvent (CSplitterEvent a)
+-- | Abstract type of the SplitterEvent class.
+data CSplitterEvent a  = CSplitterEvent
+
+-- | Pointer to an object of type 'SpinEvent', derived from 'NotifyEvent'.
+type SpinEvent a  = NotifyEvent (CSpinEvent a)
+-- | Inheritance type of the SpinEvent class.
+type TSpinEvent a  = TNotifyEvent (CSpinEvent a)
+-- | Abstract type of the SpinEvent class.
+data CSpinEvent a  = CSpinEvent
+
+-- | Pointer to an object of type 'PlotEvent', derived from 'NotifyEvent'.
+type PlotEvent a  = NotifyEvent (CPlotEvent a)
+-- | Inheritance type of the PlotEvent class.
+type TPlotEvent a  = TNotifyEvent (CPlotEvent a)
+-- | Abstract type of the PlotEvent class.
+data CPlotEvent a  = CPlotEvent
+
+-- | Pointer to an object of type 'NotebookEvent', derived from 'NotifyEvent'.
+type NotebookEvent a  = NotifyEvent (CNotebookEvent a)
+-- | Inheritance type of the NotebookEvent class.
+type TNotebookEvent a  = TNotifyEvent (CNotebookEvent a)
+-- | Abstract type of the NotebookEvent class.
+data CNotebookEvent a  = CNotebookEvent
+
+-- | Pointer to an object of type 'ListEvent', derived from 'NotifyEvent'.
+type ListEvent a  = NotifyEvent (CListEvent a)
+-- | Inheritance type of the ListEvent class.
+type TListEvent a  = TNotifyEvent (CListEvent a)
+-- | Abstract type of the ListEvent class.
+data CListEvent a  = CListEvent
+
+-- | Pointer to an object of type 'GridSizeEvent', derived from 'NotifyEvent'.
+type GridSizeEvent a  = NotifyEvent (CGridSizeEvent a)
+-- | Inheritance type of the GridSizeEvent class.
+type TGridSizeEvent a  = TNotifyEvent (CGridSizeEvent a)
+-- | Abstract type of the GridSizeEvent class.
+data CGridSizeEvent a  = CGridSizeEvent
+
+-- | Pointer to an object of type 'GridRangeSelectEvent', derived from 'NotifyEvent'.
+type GridRangeSelectEvent a  = NotifyEvent (CGridRangeSelectEvent a)
+-- | Inheritance type of the GridRangeSelectEvent class.
+type TGridRangeSelectEvent a  = TNotifyEvent (CGridRangeSelectEvent a)
+-- | Abstract type of the GridRangeSelectEvent class.
+data CGridRangeSelectEvent a  = CGridRangeSelectEvent
+
+-- | Pointer to an object of type 'GridEvent', derived from 'NotifyEvent'.
+type GridEvent a  = NotifyEvent (CGridEvent a)
+-- | Inheritance type of the GridEvent class.
+type TGridEvent a  = TNotifyEvent (CGridEvent a)
+-- | Abstract type of the GridEvent class.
+data CGridEvent a  = CGridEvent
+
+-- | Pointer to an object of type 'BookCtrlEvent', derived from 'NotifyEvent'.
+type BookCtrlEvent a  = NotifyEvent (CBookCtrlEvent a)
+-- | Inheritance type of the BookCtrlEvent class.
+type TBookCtrlEvent a  = TNotifyEvent (CBookCtrlEvent a)
+-- | Abstract type of the BookCtrlEvent class.
+data CBookCtrlEvent a  = CBookCtrlEvent
+
+-- | Pointer to an object of type 'AuiNotebookEvent', derived from 'BookCtrlEvent'.
+type AuiNotebookEvent a  = BookCtrlEvent (CAuiNotebookEvent a)
+-- | Inheritance type of the AuiNotebookEvent class.
+type TAuiNotebookEvent a  = TBookCtrlEvent (CAuiNotebookEvent a)
+-- | Abstract type of the AuiNotebookEvent class.
+data CAuiNotebookEvent a  = CAuiNotebookEvent
+
+-- | Pointer to an object of type 'AuiToolBarEvent', derived from 'NotifyEvent'.
+type AuiToolBarEvent a  = NotifyEvent (CAuiToolBarEvent a)
+-- | Inheritance type of the AuiToolBarEvent class.
+type TAuiToolBarEvent a  = TNotifyEvent (CAuiToolBarEvent a)
+-- | Abstract type of the AuiToolBarEvent class.
+data CAuiToolBarEvent a  = CAuiToolBarEvent
+
+-- | Pointer to an object of type 'GridEditorCreatedEvent', derived from 'CommandEvent'.
+type GridEditorCreatedEvent a  = CommandEvent (CGridEditorCreatedEvent a)
+-- | Inheritance type of the GridEditorCreatedEvent class.
+type TGridEditorCreatedEvent a  = TCommandEvent (CGridEditorCreatedEvent a)
+-- | Abstract type of the GridEditorCreatedEvent class.
+data CGridEditorCreatedEvent a  = CGridEditorCreatedEvent
+
+-- | Pointer to an object of type 'HelpEvent', derived from 'CommandEvent'.
+type HelpEvent a  = CommandEvent (CHelpEvent a)
+-- | Inheritance type of the HelpEvent class.
+type THelpEvent a  = TCommandEvent (CHelpEvent a)
+-- | Abstract type of the HelpEvent class.
+data CHelpEvent a  = CHelpEvent
+
+-- | Pointer to an object of type 'WindowDestroyEvent', derived from 'CommandEvent'.
+type WindowDestroyEvent a  = CommandEvent (CWindowDestroyEvent a)
+-- | Inheritance type of the WindowDestroyEvent class.
+type TWindowDestroyEvent a  = TCommandEvent (CWindowDestroyEvent a)
+-- | Abstract type of the WindowDestroyEvent class.
+data CWindowDestroyEvent a  = CWindowDestroyEvent
+
+-- | Pointer to an object of type 'StyledTextEvent', derived from 'CommandEvent'.
+type StyledTextEvent a  = CommandEvent (CStyledTextEvent a)
+-- | Inheritance type of the StyledTextEvent class.
+type TStyledTextEvent a  = TCommandEvent (CStyledTextEvent a)
+-- | Abstract type of the StyledTextEvent class.
+data CStyledTextEvent a  = CStyledTextEvent
+
+-- | Pointer to an object of type 'WXCHtmlEvent', derived from 'CommandEvent'.
+type WXCHtmlEvent a  = CommandEvent (CWXCHtmlEvent a)
+-- | Inheritance type of the WXCHtmlEvent class.
+type TWXCHtmlEvent a  = TCommandEvent (CWXCHtmlEvent a)
+-- | Abstract type of the WXCHtmlEvent class.
+data CWXCHtmlEvent a  = CWXCHtmlEvent
+
+-- | Pointer to an object of type 'WindowCreateEvent', derived from 'CommandEvent'.
+type WindowCreateEvent a  = CommandEvent (CWindowCreateEvent a)
+-- | Inheritance type of the WindowCreateEvent class.
+type TWindowCreateEvent a  = TCommandEvent (CWindowCreateEvent a)
+-- | Abstract type of the WindowCreateEvent class.
+data CWindowCreateEvent a  = CWindowCreateEvent
+
+-- | Pointer to an object of type 'TabEvent', derived from 'CommandEvent'.
+type TabEvent a  = CommandEvent (CTabEvent a)
+-- | Inheritance type of the TabEvent class.
+type TTabEvent a  = TCommandEvent (CTabEvent a)
+-- | Abstract type of the TabEvent class.
+data CTabEvent a  = CTabEvent
+
+-- | Pointer to an object of type 'FindDialogEvent', derived from 'CommandEvent'.
+type FindDialogEvent a  = CommandEvent (CFindDialogEvent a)
+-- | Inheritance type of the FindDialogEvent class.
+type TFindDialogEvent a  = TCommandEvent (CFindDialogEvent a)
+-- | Abstract type of the FindDialogEvent class.
+data CFindDialogEvent a  = CFindDialogEvent
+
+-- | Pointer to an object of type 'CalendarEvent', derived from 'CommandEvent'.
+type CalendarEvent a  = CommandEvent (CCalendarEvent a)
+-- | Inheritance type of the CalendarEvent class.
+type TCalendarEvent a  = TCommandEvent (CCalendarEvent a)
+-- | Abstract type of the CalendarEvent class.
+data CCalendarEvent a  = CCalendarEvent
+
+-- | Pointer to an object of type 'InputSinkEvent', derived from 'Event'.
+type InputSinkEvent a  = Event (CInputSinkEvent a)
+-- | Inheritance type of the InputSinkEvent class.
+type TInputSinkEvent a  = TEvent (CInputSinkEvent a)
+-- | Abstract type of the InputSinkEvent class.
+data CInputSinkEvent a  = CInputSinkEvent
+
+-- | Pointer to an object of type 'WXCPrintEvent', derived from 'Event'.
+type WXCPrintEvent a  = Event (CWXCPrintEvent a)
+-- | Inheritance type of the WXCPrintEvent class.
+type TWXCPrintEvent a  = TEvent (CWXCPrintEvent a)
+-- | Abstract type of the WXCPrintEvent class.
+data CWXCPrintEvent a  = CWXCPrintEvent
+
+-- | Pointer to an object of type 'UpdateUIEvent', derived from 'Event'.
+type UpdateUIEvent a  = Event (CUpdateUIEvent a)
+-- | Inheritance type of the UpdateUIEvent class.
+type TUpdateUIEvent a  = TEvent (CUpdateUIEvent a)
+-- | Abstract type of the UpdateUIEvent class.
+data CUpdateUIEvent a  = CUpdateUIEvent
+
+-- | Pointer to an object of type 'TimerEvent', derived from 'Event'.
+type TimerEvent a  = Event (CTimerEvent a)
+-- | Inheritance type of the TimerEvent class.
+type TTimerEvent a  = TEvent (CTimerEvent a)
+-- | Abstract type of the TimerEvent class.
+data CTimerEvent a  = CTimerEvent
+
+-- | Pointer to an object of type 'SysColourChangedEvent', derived from 'Event'.
+type SysColourChangedEvent a  = Event (CSysColourChangedEvent a)
+-- | Inheritance type of the SysColourChangedEvent class.
+type TSysColourChangedEvent a  = TEvent (CSysColourChangedEvent a)
+-- | Abstract type of the SysColourChangedEvent class.
+data CSysColourChangedEvent a  = CSysColourChangedEvent
+
+-- | Pointer to an object of type 'SocketEvent', derived from 'Event'.
+type SocketEvent a  = Event (CSocketEvent a)
+-- | Inheritance type of the SocketEvent class.
+type TSocketEvent a  = TEvent (CSocketEvent a)
+-- | Abstract type of the SocketEvent class.
+data CSocketEvent a  = CSocketEvent
+
+-- | Pointer to an object of type 'SizeEvent', derived from 'Event'.
+type SizeEvent a  = Event (CSizeEvent a)
+-- | Inheritance type of the SizeEvent class.
+type TSizeEvent a  = TEvent (CSizeEvent a)
+-- | Abstract type of the SizeEvent class.
+data CSizeEvent a  = CSizeEvent
+
+-- | Pointer to an object of type 'ShowEvent', derived from 'Event'.
+type ShowEvent a  = Event (CShowEvent a)
+-- | Inheritance type of the ShowEvent class.
+type TShowEvent a  = TEvent (CShowEvent a)
+-- | Abstract type of the ShowEvent class.
+data CShowEvent a  = CShowEvent
+
+-- | Pointer to an object of type 'SetCursorEvent', derived from 'Event'.
+type SetCursorEvent a  = Event (CSetCursorEvent a)
+-- | Inheritance type of the SetCursorEvent class.
+type TSetCursorEvent a  = TEvent (CSetCursorEvent a)
+-- | Abstract type of the SetCursorEvent class.
+data CSetCursorEvent a  = CSetCursorEvent
+
+-- | Pointer to an object of type 'ScrollWinEvent', derived from 'Event'.
+type ScrollWinEvent a  = Event (CScrollWinEvent a)
+-- | Inheritance type of the ScrollWinEvent class.
+type TScrollWinEvent a  = TEvent (CScrollWinEvent a)
+-- | Abstract type of the ScrollWinEvent class.
+data CScrollWinEvent a  = CScrollWinEvent
+
+-- | Pointer to an object of type 'ScrollEvent', derived from 'Event'.
+type ScrollEvent a  = Event (CScrollEvent a)
+-- | Inheritance type of the ScrollEvent class.
+type TScrollEvent a  = TEvent (CScrollEvent a)
+-- | Abstract type of the ScrollEvent class.
+data CScrollEvent a  = CScrollEvent
+
+-- | Pointer to an object of type 'SashEvent', derived from 'Event'.
+type SashEvent a  = Event (CSashEvent a)
+-- | Inheritance type of the SashEvent class.
+type TSashEvent a  = TEvent (CSashEvent a)
+-- | Abstract type of the SashEvent class.
+data CSashEvent a  = CSashEvent
+
+-- | Pointer to an object of type 'QueryNewPaletteEvent', derived from 'Event'.
+type QueryNewPaletteEvent a  = Event (CQueryNewPaletteEvent a)
+-- | Inheritance type of the QueryNewPaletteEvent class.
+type TQueryNewPaletteEvent a  = TEvent (CQueryNewPaletteEvent a)
+-- | Abstract type of the QueryNewPaletteEvent class.
+data CQueryNewPaletteEvent a  = CQueryNewPaletteEvent
+
+-- | Pointer to an object of type 'QueryLayoutInfoEvent', derived from 'Event'.
+type QueryLayoutInfoEvent a  = Event (CQueryLayoutInfoEvent a)
+-- | Inheritance type of the QueryLayoutInfoEvent class.
+type TQueryLayoutInfoEvent a  = TEvent (CQueryLayoutInfoEvent a)
+-- | Abstract type of the QueryLayoutInfoEvent class.
+data CQueryLayoutInfoEvent a  = CQueryLayoutInfoEvent
+
+-- | Pointer to an object of type 'ProcessEvent', derived from 'Event'.
+type ProcessEvent a  = Event (CProcessEvent a)
+-- | Inheritance type of the ProcessEvent class.
+type TProcessEvent a  = TEvent (CProcessEvent a)
+-- | Abstract type of the ProcessEvent class.
+data CProcessEvent a  = CProcessEvent
+
+-- | Pointer to an object of type 'PaletteChangedEvent', derived from 'Event'.
+type PaletteChangedEvent a  = Event (CPaletteChangedEvent a)
+-- | Inheritance type of the PaletteChangedEvent class.
+type TPaletteChangedEvent a  = TEvent (CPaletteChangedEvent a)
+-- | Abstract type of the PaletteChangedEvent class.
+data CPaletteChangedEvent a  = CPaletteChangedEvent
+
+-- | Pointer to an object of type 'PaintEvent', derived from 'Event'.
+type PaintEvent a  = Event (CPaintEvent a)
+-- | Inheritance type of the PaintEvent class.
+type TPaintEvent a  = TEvent (CPaintEvent a)
+-- | Abstract type of the PaintEvent class.
+data CPaintEvent a  = CPaintEvent
+
+-- | Pointer to an object of type 'NavigationKeyEvent', derived from 'Event'.
+type NavigationKeyEvent a  = Event (CNavigationKeyEvent a)
+-- | Inheritance type of the NavigationKeyEvent class.
+type TNavigationKeyEvent a  = TEvent (CNavigationKeyEvent a)
+-- | Abstract type of the NavigationKeyEvent class.
+data CNavigationKeyEvent a  = CNavigationKeyEvent
+
+-- | Pointer to an object of type 'MoveEvent', derived from 'Event'.
+type MoveEvent a  = Event (CMoveEvent a)
+-- | Inheritance type of the MoveEvent class.
+type TMoveEvent a  = TEvent (CMoveEvent a)
+-- | Abstract type of the MoveEvent class.
+data CMoveEvent a  = CMoveEvent
+
+-- | Pointer to an object of type 'MouseEvent', derived from 'Event'.
+type MouseEvent a  = Event (CMouseEvent a)
+-- | Inheritance type of the MouseEvent class.
+type TMouseEvent a  = TEvent (CMouseEvent a)
+-- | Abstract type of the MouseEvent class.
+data CMouseEvent a  = CMouseEvent
+
+-- | Pointer to an object of type 'MouseCaptureChangedEvent', derived from 'Event'.
+type MouseCaptureChangedEvent a  = Event (CMouseCaptureChangedEvent a)
+-- | Inheritance type of the MouseCaptureChangedEvent class.
+type TMouseCaptureChangedEvent a  = TEvent (CMouseCaptureChangedEvent a)
+-- | Abstract type of the MouseCaptureChangedEvent class.
+data CMouseCaptureChangedEvent a  = CMouseCaptureChangedEvent
+
+-- | Pointer to an object of type 'MenuEvent', derived from 'Event'.
+type MenuEvent a  = Event (CMenuEvent a)
+-- | Inheritance type of the MenuEvent class.
+type TMenuEvent a  = TEvent (CMenuEvent a)
+-- | Abstract type of the MenuEvent class.
+data CMenuEvent a  = CMenuEvent
+
+-- | Pointer to an object of type 'MaximizeEvent', derived from 'Event'.
+type MaximizeEvent a  = Event (CMaximizeEvent a)
+-- | Inheritance type of the MaximizeEvent class.
+type TMaximizeEvent a  = TEvent (CMaximizeEvent a)
+-- | Abstract type of the MaximizeEvent class.
+data CMaximizeEvent a  = CMaximizeEvent
+
+-- | Pointer to an object of type 'KeyEvent', derived from 'Event'.
+type KeyEvent a  = Event (CKeyEvent a)
+-- | Inheritance type of the KeyEvent class.
+type TKeyEvent a  = TEvent (CKeyEvent a)
+-- | Abstract type of the KeyEvent class.
+data CKeyEvent a  = CKeyEvent
+
+-- | Pointer to an object of type 'JoystickEvent', derived from 'Event'.
+type JoystickEvent a  = Event (CJoystickEvent a)
+-- | Inheritance type of the JoystickEvent class.
+type TJoystickEvent a  = TEvent (CJoystickEvent a)
+-- | Abstract type of the JoystickEvent class.
+data CJoystickEvent a  = CJoystickEvent
+
+-- | Pointer to an object of type 'InitDialogEvent', derived from 'Event'.
+type InitDialogEvent a  = Event (CInitDialogEvent a)
+-- | Inheritance type of the InitDialogEvent class.
+type TInitDialogEvent a  = TEvent (CInitDialogEvent a)
+-- | Abstract type of the InitDialogEvent class.
+data CInitDialogEvent a  = CInitDialogEvent
+
+-- | Pointer to an object of type 'IdleEvent', derived from 'Event'.
+type IdleEvent a  = Event (CIdleEvent a)
+-- | Inheritance type of the IdleEvent class.
+type TIdleEvent a  = TEvent (CIdleEvent a)
+-- | Abstract type of the IdleEvent class.
+data CIdleEvent a  = CIdleEvent
+
+-- | Pointer to an object of type 'IconizeEvent', derived from 'Event'.
+type IconizeEvent a  = Event (CIconizeEvent a)
+-- | Inheritance type of the IconizeEvent class.
+type TIconizeEvent a  = TEvent (CIconizeEvent a)
+-- | Abstract type of the IconizeEvent class.
+data CIconizeEvent a  = CIconizeEvent
+
+-- | Pointer to an object of type 'FocusEvent', derived from 'Event'.
+type FocusEvent a  = Event (CFocusEvent a)
+-- | Inheritance type of the FocusEvent class.
+type TFocusEvent a  = TEvent (CFocusEvent a)
+-- | Abstract type of the FocusEvent class.
+data CFocusEvent a  = CFocusEvent
+
+-- | Pointer to an object of type 'EraseEvent', derived from 'Event'.
+type EraseEvent a  = Event (CEraseEvent a)
+-- | Inheritance type of the EraseEvent class.
+type TEraseEvent a  = TEvent (CEraseEvent a)
+-- | Abstract type of the EraseEvent class.
+data CEraseEvent a  = CEraseEvent
+
+-- | Pointer to an object of type 'DropFilesEvent', derived from 'Event'.
+type DropFilesEvent a  = Event (CDropFilesEvent a)
+-- | Inheritance type of the DropFilesEvent class.
+type TDropFilesEvent a  = TEvent (CDropFilesEvent a)
+-- | Abstract type of the DropFilesEvent class.
+data CDropFilesEvent a  = CDropFilesEvent
+
+-- | Pointer to an object of type 'DialUpEvent', derived from 'Event'.
+type DialUpEvent a  = Event (CDialUpEvent a)
+-- | Inheritance type of the DialUpEvent class.
+type TDialUpEvent a  = TEvent (CDialUpEvent a)
+-- | Abstract type of the DialUpEvent class.
+data CDialUpEvent a  = CDialUpEvent
+
+-- | Pointer to an object of type 'CloseEvent', derived from 'Event'.
+type CloseEvent a  = Event (CCloseEvent a)
+-- | Inheritance type of the CloseEvent class.
+type TCloseEvent a  = TEvent (CCloseEvent a)
+-- | Abstract type of the CloseEvent class.
+data CCloseEvent a  = CCloseEvent
+
+-- | Pointer to an object of type 'CalculateLayoutEvent', derived from 'Event'.
+type CalculateLayoutEvent a  = Event (CCalculateLayoutEvent a)
+-- | Inheritance type of the CalculateLayoutEvent class.
+type TCalculateLayoutEvent a  = TEvent (CCalculateLayoutEvent a)
+-- | Abstract type of the CalculateLayoutEvent class.
+data CCalculateLayoutEvent a  = CCalculateLayoutEvent
+
+-- | Pointer to an object of type 'ActivateEvent', derived from 'Event'.
+type ActivateEvent a  = Event (CActivateEvent a)
+-- | Inheritance type of the ActivateEvent class.
+type TActivateEvent a  = TEvent (CActivateEvent a)
+-- | Abstract type of the ActivateEvent class.
+data CActivateEvent a  = CActivateEvent
+
+-- | Pointer to an object of type 'CbPluginEvent', derived from 'Event'.
+type CbPluginEvent a  = Event (CCbPluginEvent a)
+-- | Inheritance type of the CbPluginEvent class.
+type TCbPluginEvent a  = TEvent (CCbPluginEvent a)
+-- | Abstract type of the CbPluginEvent class.
+data CCbPluginEvent a  = CCbPluginEvent
+
+-- | Pointer to an object of type 'CbCustomizeBarEvent', derived from 'CbPluginEvent'.
+type CbCustomizeBarEvent a  = CbPluginEvent (CCbCustomizeBarEvent a)
+-- | Inheritance type of the CbCustomizeBarEvent class.
+type TCbCustomizeBarEvent a  = TCbPluginEvent (CCbCustomizeBarEvent a)
+-- | Abstract type of the CbCustomizeBarEvent class.
+data CCbCustomizeBarEvent a  = CCbCustomizeBarEvent
+
+-- | Pointer to an object of type 'CbDrawBarDecorEvent', derived from 'CbPluginEvent'.
+type CbDrawBarDecorEvent a  = CbPluginEvent (CCbDrawBarDecorEvent a)
+-- | Inheritance type of the CbDrawBarDecorEvent class.
+type TCbDrawBarDecorEvent a  = TCbPluginEvent (CCbDrawBarDecorEvent a)
+-- | Abstract type of the CbDrawBarDecorEvent class.
+data CCbDrawBarDecorEvent a  = CCbDrawBarDecorEvent
+
+-- | Pointer to an object of type 'CbDrawHintRectEvent', derived from 'CbPluginEvent'.
+type CbDrawHintRectEvent a  = CbPluginEvent (CCbDrawHintRectEvent a)
+-- | Inheritance type of the CbDrawHintRectEvent class.
+type TCbDrawHintRectEvent a  = TCbPluginEvent (CCbDrawHintRectEvent a)
+-- | Abstract type of the CbDrawHintRectEvent class.
+data CCbDrawHintRectEvent a  = CCbDrawHintRectEvent
+
+-- | Pointer to an object of type 'CbDrawPaneDecorEvent', derived from 'CbPluginEvent'.
+type CbDrawPaneDecorEvent a  = CbPluginEvent (CCbDrawPaneDecorEvent a)
+-- | Inheritance type of the CbDrawPaneDecorEvent class.
+type TCbDrawPaneDecorEvent a  = TCbPluginEvent (CCbDrawPaneDecorEvent a)
+-- | Abstract type of the CbDrawPaneDecorEvent class.
+data CCbDrawPaneDecorEvent a  = CCbDrawPaneDecorEvent
+
+-- | Pointer to an object of type 'CbDrawRowDecorEvent', derived from 'CbPluginEvent'.
+type CbDrawRowDecorEvent a  = CbPluginEvent (CCbDrawRowDecorEvent a)
+-- | Inheritance type of the CbDrawRowDecorEvent class.
+type TCbDrawRowDecorEvent a  = TCbPluginEvent (CCbDrawRowDecorEvent a)
+-- | Abstract type of the CbDrawRowDecorEvent class.
+data CCbDrawRowDecorEvent a  = CCbDrawRowDecorEvent
+
+-- | Pointer to an object of type 'CbFinishDrawInAreaEvent', derived from 'CbPluginEvent'.
+type CbFinishDrawInAreaEvent a  = CbPluginEvent (CCbFinishDrawInAreaEvent a)
+-- | Inheritance type of the CbFinishDrawInAreaEvent class.
+type TCbFinishDrawInAreaEvent a  = TCbPluginEvent (CCbFinishDrawInAreaEvent a)
+-- | Abstract type of the CbFinishDrawInAreaEvent class.
+data CCbFinishDrawInAreaEvent a  = CCbFinishDrawInAreaEvent
+
+-- | Pointer to an object of type 'CbLayoutRowEvent', derived from 'CbPluginEvent'.
+type CbLayoutRowEvent a  = CbPluginEvent (CCbLayoutRowEvent a)
+-- | Inheritance type of the CbLayoutRowEvent class.
+type TCbLayoutRowEvent a  = TCbPluginEvent (CCbLayoutRowEvent a)
+-- | Abstract type of the CbLayoutRowEvent class.
+data CCbLayoutRowEvent a  = CCbLayoutRowEvent
+
+-- | Pointer to an object of type 'CbLeftDownEvent', derived from 'CbPluginEvent'.
+type CbLeftDownEvent a  = CbPluginEvent (CCbLeftDownEvent a)
+-- | Inheritance type of the CbLeftDownEvent class.
+type TCbLeftDownEvent a  = TCbPluginEvent (CCbLeftDownEvent a)
+-- | Abstract type of the CbLeftDownEvent class.
+data CCbLeftDownEvent a  = CCbLeftDownEvent
+
+-- | Pointer to an object of type 'CbMotionEvent', derived from 'CbPluginEvent'.
+type CbMotionEvent a  = CbPluginEvent (CCbMotionEvent a)
+-- | Inheritance type of the CbMotionEvent class.
+type TCbMotionEvent a  = TCbPluginEvent (CCbMotionEvent a)
+-- | Abstract type of the CbMotionEvent class.
+data CCbMotionEvent a  = CCbMotionEvent
+
+-- | Pointer to an object of type 'CbRemoveBarEvent', derived from 'CbPluginEvent'.
+type CbRemoveBarEvent a  = CbPluginEvent (CCbRemoveBarEvent a)
+-- | Inheritance type of the CbRemoveBarEvent class.
+type TCbRemoveBarEvent a  = TCbPluginEvent (CCbRemoveBarEvent a)
+-- | Abstract type of the CbRemoveBarEvent class.
+data CCbRemoveBarEvent a  = CCbRemoveBarEvent
+
+-- | Pointer to an object of type 'CbResizeRowEvent', derived from 'CbPluginEvent'.
+type CbResizeRowEvent a  = CbPluginEvent (CCbResizeRowEvent a)
+-- | Inheritance type of the CbResizeRowEvent class.
+type TCbResizeRowEvent a  = TCbPluginEvent (CCbResizeRowEvent a)
+-- | Abstract type of the CbResizeRowEvent class.
+data CCbResizeRowEvent a  = CCbResizeRowEvent
+
+-- | Pointer to an object of type 'CbRightUpEvent', derived from 'CbPluginEvent'.
+type CbRightUpEvent a  = CbPluginEvent (CCbRightUpEvent a)
+-- | Inheritance type of the CbRightUpEvent class.
+type TCbRightUpEvent a  = TCbPluginEvent (CCbRightUpEvent a)
+-- | Abstract type of the CbRightUpEvent class.
+data CCbRightUpEvent a  = CCbRightUpEvent
+
+-- | Pointer to an object of type 'CbStartBarDraggingEvent', derived from 'CbPluginEvent'.
+type CbStartBarDraggingEvent a  = CbPluginEvent (CCbStartBarDraggingEvent a)
+-- | Inheritance type of the CbStartBarDraggingEvent class.
+type TCbStartBarDraggingEvent a  = TCbPluginEvent (CCbStartBarDraggingEvent a)
+-- | Abstract type of the CbStartBarDraggingEvent class.
+data CCbStartBarDraggingEvent a  = CCbStartBarDraggingEvent
+
+-- | Pointer to an object of type 'CbStartDrawInAreaEvent', derived from 'CbPluginEvent'.
+type CbStartDrawInAreaEvent a  = CbPluginEvent (CCbStartDrawInAreaEvent a)
+-- | Inheritance type of the CbStartDrawInAreaEvent class.
+type TCbStartDrawInAreaEvent a  = TCbPluginEvent (CCbStartDrawInAreaEvent a)
+-- | Abstract type of the CbStartDrawInAreaEvent class.
+data CCbStartDrawInAreaEvent a  = CCbStartDrawInAreaEvent
+
+-- | Pointer to an object of type 'CbSizeBarWndEvent', derived from 'CbPluginEvent'.
+type CbSizeBarWndEvent a  = CbPluginEvent (CCbSizeBarWndEvent a)
+-- | Inheritance type of the CbSizeBarWndEvent class.
+type TCbSizeBarWndEvent a  = TCbPluginEvent (CCbSizeBarWndEvent a)
+-- | Abstract type of the CbSizeBarWndEvent class.
+data CCbSizeBarWndEvent a  = CCbSizeBarWndEvent
+
+-- | Pointer to an object of type 'CbRightDownEvent', derived from 'CbPluginEvent'.
+type CbRightDownEvent a  = CbPluginEvent (CCbRightDownEvent a)
+-- | Inheritance type of the CbRightDownEvent class.
+type TCbRightDownEvent a  = TCbPluginEvent (CCbRightDownEvent a)
+-- | Abstract type of the CbRightDownEvent class.
+data CCbRightDownEvent a  = CCbRightDownEvent
+
+-- | Pointer to an object of type 'CbResizeBarEvent', derived from 'CbPluginEvent'.
+type CbResizeBarEvent a  = CbPluginEvent (CCbResizeBarEvent a)
+-- | Inheritance type of the CbResizeBarEvent class.
+type TCbResizeBarEvent a  = TCbPluginEvent (CCbResizeBarEvent a)
+-- | Abstract type of the CbResizeBarEvent class.
+data CCbResizeBarEvent a  = CCbResizeBarEvent
+
+-- | Pointer to an object of type 'CbLeftUpEvent', derived from 'CbPluginEvent'.
+type CbLeftUpEvent a  = CbPluginEvent (CCbLeftUpEvent a)
+-- | Inheritance type of the CbLeftUpEvent class.
+type TCbLeftUpEvent a  = TCbPluginEvent (CCbLeftUpEvent a)
+-- | Abstract type of the CbLeftUpEvent class.
+data CCbLeftUpEvent a  = CCbLeftUpEvent
+
+-- | Pointer to an object of type 'CbLeftDClickEvent', derived from 'CbPluginEvent'.
+type CbLeftDClickEvent a  = CbPluginEvent (CCbLeftDClickEvent a)
+-- | Inheritance type of the CbLeftDClickEvent class.
+type TCbLeftDClickEvent a  = TCbPluginEvent (CCbLeftDClickEvent a)
+-- | Abstract type of the CbLeftDClickEvent class.
+data CCbLeftDClickEvent a  = CCbLeftDClickEvent
+
+-- | Pointer to an object of type 'CbInsertBarEvent', derived from 'CbPluginEvent'.
+type CbInsertBarEvent a  = CbPluginEvent (CCbInsertBarEvent a)
+-- | Inheritance type of the CbInsertBarEvent class.
+type TCbInsertBarEvent a  = TCbPluginEvent (CCbInsertBarEvent a)
+-- | Abstract type of the CbInsertBarEvent class.
+data CCbInsertBarEvent a  = CCbInsertBarEvent
+
+-- | Pointer to an object of type 'CbDrawRowHandlesEvent', derived from 'CbPluginEvent'.
+type CbDrawRowHandlesEvent a  = CbPluginEvent (CCbDrawRowHandlesEvent a)
+-- | Inheritance type of the CbDrawRowHandlesEvent class.
+type TCbDrawRowHandlesEvent a  = TCbPluginEvent (CCbDrawRowHandlesEvent a)
+-- | Abstract type of the CbDrawRowHandlesEvent class.
+data CCbDrawRowHandlesEvent a  = CCbDrawRowHandlesEvent
+
+-- | Pointer to an object of type 'CbDrawRowBkGroundEvent', derived from 'CbPluginEvent'.
+type CbDrawRowBkGroundEvent a  = CbPluginEvent (CCbDrawRowBkGroundEvent a)
+-- | Inheritance type of the CbDrawRowBkGroundEvent class.
+type TCbDrawRowBkGroundEvent a  = TCbPluginEvent (CCbDrawRowBkGroundEvent a)
+-- | Abstract type of the CbDrawRowBkGroundEvent class.
+data CCbDrawRowBkGroundEvent a  = CCbDrawRowBkGroundEvent
+
+-- | Pointer to an object of type 'CbDrawPaneBkGroundEvent', derived from 'CbPluginEvent'.
+type CbDrawPaneBkGroundEvent a  = CbPluginEvent (CCbDrawPaneBkGroundEvent a)
+-- | Inheritance type of the CbDrawPaneBkGroundEvent class.
+type TCbDrawPaneBkGroundEvent a  = TCbPluginEvent (CCbDrawPaneBkGroundEvent a)
+-- | Abstract type of the CbDrawPaneBkGroundEvent class.
+data CCbDrawPaneBkGroundEvent a  = CCbDrawPaneBkGroundEvent
+
+-- | Pointer to an object of type 'CbDrawBarHandlesEvent', derived from 'CbPluginEvent'.
+type CbDrawBarHandlesEvent a  = CbPluginEvent (CCbDrawBarHandlesEvent a)
+-- | Inheritance type of the CbDrawBarHandlesEvent class.
+type TCbDrawBarHandlesEvent a  = TCbPluginEvent (CCbDrawBarHandlesEvent a)
+-- | Abstract type of the CbDrawBarHandlesEvent class.
+data CCbDrawBarHandlesEvent a  = CCbDrawBarHandlesEvent
+
+-- | Pointer to an object of type 'CbCustomizeLayoutEvent', derived from 'CbPluginEvent'.
+type CbCustomizeLayoutEvent a  = CbPluginEvent (CCbCustomizeLayoutEvent a)
+-- | Inheritance type of the CbCustomizeLayoutEvent class.
+type TCbCustomizeLayoutEvent a  = TCbPluginEvent (CCbCustomizeLayoutEvent a)
+-- | Abstract type of the CbCustomizeLayoutEvent class.
+data CCbCustomizeLayoutEvent a  = CCbCustomizeLayoutEvent
+
+-- | Pointer to an object of type 'ServerBase', derived from 'WxObject'.
+type ServerBase a  = WxObject (CServerBase a)
+-- | Inheritance type of the ServerBase class.
+type TServerBase a  = TWxObject (CServerBase a)
+-- | Abstract type of the ServerBase class.
+data CServerBase a  = CServerBase
+
+-- | Pointer to an object of type 'Server', derived from 'ServerBase'.
+type Server a  = ServerBase (CServer a)
+-- | Inheritance type of the Server class.
+type TServer a  = TServerBase (CServer a)
+-- | Abstract type of the Server class.
+data CServer a  = CServer
+
+-- | Pointer to an object of type 'WXCServer', derived from 'Server'.
+type WXCServer a  = Server (CWXCServer a)
+-- | Inheritance type of the WXCServer class.
+type TWXCServer a  = TServer (CWXCServer a)
+-- | Abstract type of the WXCServer class.
+data CWXCServer a  = CWXCServer
+
+-- | Pointer to an object of type 'DDEServer', derived from 'ServerBase'.
+type DDEServer a  = ServerBase (CDDEServer a)
+-- | Inheritance type of the DDEServer class.
+type TDDEServer a  = TServerBase (CDDEServer a)
+-- | Abstract type of the DDEServer class.
+data CDDEServer a  = CDDEServer
+
+-- | Pointer to an object of type 'GridTableBase', derived from 'WxObject'.
+type GridTableBase a  = WxObject (CGridTableBase a)
+-- | Inheritance type of the GridTableBase class.
+type TGridTableBase a  = TWxObject (CGridTableBase a)
+-- | Abstract type of the GridTableBase class.
+data CGridTableBase a  = CGridTableBase
+
+-- | Pointer to an object of type 'WXCGridTable', derived from 'GridTableBase'.
+type WXCGridTable a  = GridTableBase (CWXCGridTable a)
+-- | Inheritance type of the WXCGridTable class.
+type TWXCGridTable a  = TGridTableBase (CWXCGridTable a)
+-- | Abstract type of the WXCGridTable class.
+data CWXCGridTable a  = CWXCGridTable
+
+-- | Pointer to an object of type 'Command', derived from 'WxObject'.
+type Command a  = WxObject (CCommand a)
+-- | Inheritance type of the Command class.
+type TCommand a  = TWxObject (CCommand a)
+-- | Abstract type of the Command class.
+data CCommand a  = CCommand
+
+-- | Pointer to an object of type 'WXCCommand', derived from 'Command'.
+type WXCCommand a  = Command (CWXCCommand a)
+-- | Inheritance type of the WXCCommand class.
+type TWXCCommand a  = TCommand (CWXCCommand a)
+-- | Abstract type of the WXCCommand class.
+data CWXCCommand a  = CWXCCommand
+
+-- | Pointer to an object of type 'ArtProvider', derived from 'WxObject'.
+type ArtProvider a  = WxObject (CArtProvider a)
+-- | Inheritance type of the ArtProvider class.
+type TArtProvider a  = TWxObject (CArtProvider a)
+-- | Abstract type of the ArtProvider class.
+data CArtProvider a  = CArtProvider
+
+-- | Pointer to an object of type 'WXCArtProv', derived from 'ArtProvider'.
+type WXCArtProv a  = ArtProvider (CWXCArtProv a)
+-- | Inheritance type of the WXCArtProv class.
+type TWXCArtProv a  = TArtProvider (CWXCArtProv a)
+-- | Abstract type of the WXCArtProv class.
+data CWXCArtProv a  = CWXCArtProv
+
+-- | Pointer to an object of type 'Thread'.
+type Thread a  = Object (CThread a)
+-- | Inheritance type of the Thread class.
+type TThread a  = CThread a
+-- | Abstract type of the Thread class.
+data CThread a  = CThread
+
+-- | Pointer to an object of type 'InputSink', derived from 'Thread'.
+type InputSink a  = Thread (CInputSink a)
+-- | Inheritance type of the InputSink class.
+type TInputSink a  = TThread (CInputSink a)
+-- | Abstract type of the InputSink class.
+data CInputSink a  = CInputSink
+
+-- | Pointer to an object of type 'ClassInfo'.
+type ClassInfo a  = Object (CClassInfo a)
+-- | Inheritance type of the ClassInfo class.
+type TClassInfo a  = CClassInfo a
+-- | Abstract type of the ClassInfo class.
+data CClassInfo a  = CClassInfo
+
+-- | Pointer to an object of type 'ClientData'.
+type ClientData a  = Object (CClientData a)
+-- | Inheritance type of the ClientData class.
+type TClientData a  = CClientData a
+-- | Abstract type of the ClientData class.
+data CClientData a  = CClientData
+
+-- | Pointer to an object of type 'TreeItemData', derived from 'ClientData'.
+type TreeItemData a  = ClientData (CTreeItemData a)
+-- | Inheritance type of the TreeItemData class.
+type TTreeItemData a  = TClientData (CTreeItemData a)
+-- | Abstract type of the TreeItemData class.
+data CTreeItemData a  = CTreeItemData
+
+-- | Pointer to an object of type 'WXCTreeItemData', derived from 'TreeItemData'.
+type WXCTreeItemData a  = TreeItemData (CWXCTreeItemData a)
+-- | Inheritance type of the WXCTreeItemData class.
+type TWXCTreeItemData a  = TTreeItemData (CWXCTreeItemData a)
+-- | Abstract type of the WXCTreeItemData class.
+data CWXCTreeItemData a  = CWXCTreeItemData
+
+-- | Pointer to an object of type 'StringClientData', derived from 'ClientData'.
+type StringClientData a  = ClientData (CStringClientData a)
+-- | Inheritance type of the StringClientData class.
+type TStringClientData a  = TClientData (CStringClientData a)
+-- | Abstract type of the StringClientData class.
+data CStringClientData a  = CStringClientData
+
+-- | Pointer to an object of type 'MemoryBuffer'.
+type MemoryBuffer a  = Object (CMemoryBuffer a)
+-- | Inheritance type of the MemoryBuffer class.
+type TMemoryBuffer a  = CMemoryBuffer a
+-- | Abstract type of the MemoryBuffer class.
+data CMemoryBuffer a  = CMemoryBuffer
+
+-- | Pointer to an object of type 'STCDoc'.
+type STCDoc a  = Object (CSTCDoc a)
+-- | Inheritance type of the STCDoc class.
+type TSTCDoc a  = CSTCDoc a
+-- | Abstract type of the STCDoc class.
+data CSTCDoc a  = CSTCDoc
+
+-- | Pointer to an object of type 'TextOutputStream'.
+type TextOutputStream a  = Object (CTextOutputStream a)
+-- | Inheritance type of the TextOutputStream class.
+type TTextOutputStream a  = CTextOutputStream a
+-- | Abstract type of the TextOutputStream class.
+data CTextOutputStream a  = CTextOutputStream
+
+-- | Pointer to an object of type 'TextInputStream'.
+type TextInputStream a  = Object (CTextInputStream a)
+-- | Inheritance type of the TextInputStream class.
+type TTextInputStream a  = CTextInputStream a
+-- | Abstract type of the TextInputStream class.
+data CTextInputStream a  = CTextInputStream
+
+-- | Pointer to an object of type 'WxManagedPtr'.
+type WxManagedPtr a  = Object (CWxManagedPtr a)
+-- | Inheritance type of the WxManagedPtr class.
+type TWxManagedPtr a  = CWxManagedPtr a
+-- | Abstract type of the WxManagedPtr class.
+data CWxManagedPtr a  = CWxManagedPtr
+
+-- | Pointer to an object of type 'StreamBase'.
+type StreamBase a  = Object (CStreamBase a)
+-- | Inheritance type of the StreamBase class.
+type TStreamBase a  = CStreamBase a
+-- | Abstract type of the StreamBase class.
+data CStreamBase a  = CStreamBase
+
+-- | Pointer to an object of type 'InputStream', derived from 'StreamBase'.
+type InputStream a  = StreamBase (CInputStream a)
+-- | Inheritance type of the InputStream class.
+type TInputStream a  = TStreamBase (CInputStream a)
+-- | Abstract type of the InputStream class.
+data CInputStream a  = CInputStream
+
+-- | Pointer to an object of type 'FilterInputStream', derived from 'InputStream'.
+type FilterInputStream a  = InputStream (CFilterInputStream a)
+-- | Inheritance type of the FilterInputStream class.
+type TFilterInputStream a  = TInputStream (CFilterInputStream a)
+-- | Abstract type of the FilterInputStream class.
+data CFilterInputStream a  = CFilterInputStream
+
+-- | Pointer to an object of type 'BufferedInputStream', derived from 'FilterInputStream'.
+type BufferedInputStream a  = FilterInputStream (CBufferedInputStream a)
+-- | Inheritance type of the BufferedInputStream class.
+type TBufferedInputStream a  = TFilterInputStream (CBufferedInputStream a)
+-- | Abstract type of the BufferedInputStream class.
+data CBufferedInputStream a  = CBufferedInputStream
+
+-- | Pointer to an object of type 'ZlibInputStream', derived from 'FilterInputStream'.
+type ZlibInputStream a  = FilterInputStream (CZlibInputStream a)
+-- | Inheritance type of the ZlibInputStream class.
+type TZlibInputStream a  = TFilterInputStream (CZlibInputStream a)
+-- | Abstract type of the ZlibInputStream class.
+data CZlibInputStream a  = CZlibInputStream
+
+-- | Pointer to an object of type 'ZipInputStream', derived from 'InputStream'.
+type ZipInputStream a  = InputStream (CZipInputStream a)
+-- | Inheritance type of the ZipInputStream class.
+type TZipInputStream a  = TInputStream (CZipInputStream a)
+-- | Abstract type of the ZipInputStream class.
+data CZipInputStream a  = CZipInputStream
+
+-- | Pointer to an object of type 'SocketInputStream', derived from 'InputStream'.
+type SocketInputStream a  = InputStream (CSocketInputStream a)
+-- | Inheritance type of the SocketInputStream class.
+type TSocketInputStream a  = TInputStream (CSocketInputStream a)
+-- | Abstract type of the SocketInputStream class.
+data CSocketInputStream a  = CSocketInputStream
+
+-- | Pointer to an object of type 'MemoryInputStream', derived from 'InputStream'.
+type MemoryInputStream a  = InputStream (CMemoryInputStream a)
+-- | Inheritance type of the MemoryInputStream class.
+type TMemoryInputStream a  = TInputStream (CMemoryInputStream a)
+-- | Abstract type of the MemoryInputStream class.
+data CMemoryInputStream a  = CMemoryInputStream
+
+-- | Pointer to an object of type 'FileInputStream', derived from 'InputStream'.
+type FileInputStream a  = InputStream (CFileInputStream a)
+-- | Inheritance type of the FileInputStream class.
+type TFileInputStream a  = TInputStream (CFileInputStream a)
+-- | Abstract type of the FileInputStream class.
+data CFileInputStream a  = CFileInputStream
+
+-- | Pointer to an object of type 'FFileInputStream', derived from 'InputStream'.
+type FFileInputStream a  = InputStream (CFFileInputStream a)
+-- | Inheritance type of the FFileInputStream class.
+type TFFileInputStream a  = TInputStream (CFFileInputStream a)
+-- | Abstract type of the FFileInputStream class.
+data CFFileInputStream a  = CFFileInputStream
+
+-- | Pointer to an object of type 'OutputStream', derived from 'StreamBase'.
+type OutputStream a  = StreamBase (COutputStream a)
+-- | Inheritance type of the OutputStream class.
+type TOutputStream a  = TStreamBase (COutputStream a)
+-- | Abstract type of the OutputStream class.
+data COutputStream a  = COutputStream
+
+-- | Pointer to an object of type 'FilterOutputStream', derived from 'OutputStream'.
+type FilterOutputStream a  = OutputStream (CFilterOutputStream a)
+-- | Inheritance type of the FilterOutputStream class.
+type TFilterOutputStream a  = TOutputStream (CFilterOutputStream a)
+-- | Abstract type of the FilterOutputStream class.
+data CFilterOutputStream a  = CFilterOutputStream
+
+-- | Pointer to an object of type 'BufferedOutputStream', derived from 'FilterOutputStream'.
+type BufferedOutputStream a  = FilterOutputStream (CBufferedOutputStream a)
+-- | Inheritance type of the BufferedOutputStream class.
+type TBufferedOutputStream a  = TFilterOutputStream (CBufferedOutputStream a)
+-- | Abstract type of the BufferedOutputStream class.
+data CBufferedOutputStream a  = CBufferedOutputStream
+
+-- | Pointer to an object of type 'ZlibOutputStream', derived from 'FilterOutputStream'.
+type ZlibOutputStream a  = FilterOutputStream (CZlibOutputStream a)
+-- | Inheritance type of the ZlibOutputStream class.
+type TZlibOutputStream a  = TFilterOutputStream (CZlibOutputStream a)
+-- | Abstract type of the ZlibOutputStream class.
+data CZlibOutputStream a  = CZlibOutputStream
+
+-- | Pointer to an object of type 'SocketOutputStream', derived from 'OutputStream'.
+type SocketOutputStream a  = OutputStream (CSocketOutputStream a)
+-- | Inheritance type of the SocketOutputStream class.
+type TSocketOutputStream a  = TOutputStream (CSocketOutputStream a)
+-- | Abstract type of the SocketOutputStream class.
+data CSocketOutputStream a  = CSocketOutputStream
+
+-- | Pointer to an object of type 'MemoryOutputStream', derived from 'OutputStream'.
+type MemoryOutputStream a  = OutputStream (CMemoryOutputStream a)
+-- | Inheritance type of the MemoryOutputStream class.
+type TMemoryOutputStream a  = TOutputStream (CMemoryOutputStream a)
+-- | Abstract type of the MemoryOutputStream class.
+data CMemoryOutputStream a  = CMemoryOutputStream
+
+-- | Pointer to an object of type 'FileOutputStream', derived from 'OutputStream'.
+type FileOutputStream a  = OutputStream (CFileOutputStream a)
+-- | Inheritance type of the FileOutputStream class.
+type TFileOutputStream a  = TOutputStream (CFileOutputStream a)
+-- | Abstract type of the FileOutputStream class.
+data CFileOutputStream a  = CFileOutputStream
+
+-- | Pointer to an object of type 'FFileOutputStream', derived from 'OutputStream'.
+type FFileOutputStream a  = OutputStream (CFFileOutputStream a)
+-- | Inheritance type of the FFileOutputStream class.
+type TFFileOutputStream a  = TOutputStream (CFFileOutputStream a)
+-- | Abstract type of the FFileOutputStream class.
+data CFFileOutputStream a  = CFFileOutputStream
+
+-- | Pointer to an object of type 'CountingOutputStream', derived from 'OutputStream'.
+type CountingOutputStream a  = OutputStream (CCountingOutputStream a)
+-- | Inheritance type of the CountingOutputStream class.
+type TCountingOutputStream a  = TOutputStream (CCountingOutputStream a)
+-- | Abstract type of the CountingOutputStream class.
+data CCountingOutputStream a  = CCountingOutputStream
+
+-- | Pointer to an object of type 'WindowDisabler'.
+type WindowDisabler a  = Object (CWindowDisabler a)
+-- | Inheritance type of the WindowDisabler class.
+type TWindowDisabler a  = CWindowDisabler a
+-- | Abstract type of the WindowDisabler class.
+data CWindowDisabler a  = CWindowDisabler
+
+-- | Pointer to an object of type 'TreeItemId'.
+type TreeItemId a  = Object (CTreeItemId a)
+-- | Inheritance type of the TreeItemId class.
+type TTreeItemId a  = CTreeItemId a
+-- | Abstract type of the TreeItemId class.
+data CTreeItemId a  = CTreeItemId
+
+-- | Pointer to an object of type 'TipProvider'.
+type TipProvider a  = Object (CTipProvider a)
+-- | Inheritance type of the TipProvider class.
+type TTipProvider a  = CTipProvider a
+-- | Abstract type of the TipProvider class.
+data CTipProvider a  = CTipProvider
+
+-- | Pointer to an object of type 'TimerRunner'.
+type TimerRunner a  = Object (CTimerRunner a)
+-- | Inheritance type of the TimerRunner class.
+type TTimerRunner a  = CTimerRunner a
+-- | Abstract type of the TimerRunner class.
+data CTimerRunner a  = CTimerRunner
+
+-- | Pointer to an object of type 'TimeSpan'.
+type TimeSpan a  = Object (CTimeSpan a)
+-- | Inheritance type of the TimeSpan class.
+type TTimeSpan a  = CTimeSpan a
+-- | Abstract type of the TimeSpan class.
+data CTimeSpan a  = CTimeSpan
+
+-- | Pointer to an object of type 'TextFile'.
+type TextFile a  = Object (CTextFile a)
+-- | Inheritance type of the TextFile class.
+type TTextFile a  = CTextFile a
+-- | Abstract type of the TextFile class.
+data CTextFile a  = CTextFile
+
+-- | Pointer to an object of type 'DropTarget'.
+type DropTarget a  = Object (CDropTarget a)
+-- | Inheritance type of the DropTarget class.
+type TDropTarget a  = CDropTarget a
+-- | Abstract type of the DropTarget class.
+data CDropTarget a  = CDropTarget
+
+-- | Pointer to an object of type 'WXCDropTarget', derived from 'DropTarget'.
+type WXCDropTarget a  = DropTarget (CWXCDropTarget a)
+-- | Inheritance type of the WXCDropTarget class.
+type TWXCDropTarget a  = TDropTarget (CWXCDropTarget a)
+-- | Abstract type of the WXCDropTarget class.
+data CWXCDropTarget a  = CWXCDropTarget
+
+-- | Pointer to an object of type 'TextDropTarget', derived from 'DropTarget'.
+type TextDropTarget a  = DropTarget (CTextDropTarget a)
+-- | Inheritance type of the TextDropTarget class.
+type TTextDropTarget a  = TDropTarget (CTextDropTarget a)
+-- | Abstract type of the TextDropTarget class.
+data CTextDropTarget a  = CTextDropTarget
+
+-- | Pointer to an object of type 'WXCTextDropTarget', derived from 'TextDropTarget'.
+type WXCTextDropTarget a  = TextDropTarget (CWXCTextDropTarget a)
+-- | Inheritance type of the WXCTextDropTarget class.
+type TWXCTextDropTarget a  = TTextDropTarget (CWXCTextDropTarget a)
+-- | Abstract type of the WXCTextDropTarget class.
+data CWXCTextDropTarget a  = CWXCTextDropTarget
+
+-- | Pointer to an object of type 'PrivateDropTarget', derived from 'DropTarget'.
+type PrivateDropTarget a  = DropTarget (CPrivateDropTarget a)
+-- | Inheritance type of the PrivateDropTarget class.
+type TPrivateDropTarget a  = TDropTarget (CPrivateDropTarget a)
+-- | Abstract type of the PrivateDropTarget class.
+data CPrivateDropTarget a  = CPrivateDropTarget
+
+-- | Pointer to an object of type 'FileDropTarget', derived from 'DropTarget'.
+type FileDropTarget a  = DropTarget (CFileDropTarget a)
+-- | Inheritance type of the FileDropTarget class.
+type TFileDropTarget a  = TDropTarget (CFileDropTarget a)
+-- | Abstract type of the FileDropTarget class.
+data CFileDropTarget a  = CFileDropTarget
+
+-- | Pointer to an object of type 'WXCFileDropTarget', derived from 'FileDropTarget'.
+type WXCFileDropTarget a  = FileDropTarget (CWXCFileDropTarget a)
+-- | Inheritance type of the WXCFileDropTarget class.
+type TWXCFileDropTarget a  = TFileDropTarget (CWXCFileDropTarget a)
+-- | Abstract type of the WXCFileDropTarget class.
+data CWXCFileDropTarget a  = CWXCFileDropTarget
+
+-- | Pointer to an object of type 'DataObject'.
+type DataObject a  = Object (CDataObject a)
+-- | Inheritance type of the DataObject class.
+type TDataObject a  = CDataObject a
+-- | Abstract type of the DataObject class.
+data CDataObject a  = CDataObject
+
+-- | Pointer to an object of type 'DataObjectSimple', derived from 'DataObject'.
+type DataObjectSimple a  = DataObject (CDataObjectSimple a)
+-- | Inheritance type of the DataObjectSimple class.
+type TDataObjectSimple a  = TDataObject (CDataObjectSimple a)
+-- | Abstract type of the DataObjectSimple class.
+data CDataObjectSimple a  = CDataObjectSimple
+
+-- | Pointer to an object of type 'TextDataObject', derived from 'DataObjectSimple'.
+type TextDataObject a  = DataObjectSimple (CTextDataObject a)
+-- | Inheritance type of the TextDataObject class.
+type TTextDataObject a  = TDataObjectSimple (CTextDataObject a)
+-- | Abstract type of the TextDataObject class.
+data CTextDataObject a  = CTextDataObject
+
+-- | Pointer to an object of type 'FileDataObject', derived from 'DataObjectSimple'.
+type FileDataObject a  = DataObjectSimple (CFileDataObject a)
+-- | Inheritance type of the FileDataObject class.
+type TFileDataObject a  = TDataObjectSimple (CFileDataObject a)
+-- | Abstract type of the FileDataObject class.
+data CFileDataObject a  = CFileDataObject
+
+-- | Pointer to an object of type 'CustomDataObject', derived from 'DataObjectSimple'.
+type CustomDataObject a  = DataObjectSimple (CCustomDataObject a)
+-- | Inheritance type of the CustomDataObject class.
+type TCustomDataObject a  = TDataObjectSimple (CCustomDataObject a)
+-- | Abstract type of the CustomDataObject class.
+data CCustomDataObject a  = CCustomDataObject
+
+-- | Pointer to an object of type 'BitmapDataObject', derived from 'DataObjectSimple'.
+type BitmapDataObject a  = DataObjectSimple (CBitmapDataObject a)
+-- | Inheritance type of the BitmapDataObject class.
+type TBitmapDataObject a  = TDataObjectSimple (CBitmapDataObject a)
+-- | Abstract type of the BitmapDataObject class.
+data CBitmapDataObject a  = CBitmapDataObject
+
+-- | Pointer to an object of type 'DataObjectComposite', derived from 'DataObject'.
+type DataObjectComposite a  = DataObject (CDataObjectComposite a)
+-- | Inheritance type of the DataObjectComposite class.
+type TDataObjectComposite a  = TDataObject (CDataObjectComposite a)
+-- | Abstract type of the DataObjectComposite class.
+data CDataObjectComposite a  = CDataObjectComposite
+
+-- | Pointer to an object of type 'TextAttr'.
+type TextAttr a  = Object (CTextAttr a)
+-- | Inheritance type of the TextAttr class.
+type TTextAttr a  = CTextAttr a
+-- | Abstract type of the TextAttr class.
+data CTextAttr a  = CTextAttr
+
+-- | Pointer to an object of type 'TempFile'.
+type TempFile a  = Object (CTempFile a)
+-- | Inheritance type of the TempFile class.
+type TTempFile a  = CTempFile a
+-- | Abstract type of the TempFile class.
+data CTempFile a  = CTempFile
+
+-- | Pointer to an object of type 'StringBuffer'.
+type StringBuffer a  = Object (CStringBuffer a)
+-- | Inheritance type of the StringBuffer class.
+type TStringBuffer a  = CStringBuffer a
+-- | Abstract type of the StringBuffer class.
+data CStringBuffer a  = CStringBuffer
+
+-- | Pointer to an object of type 'WxString'.
+type WxString a  = Object (CWxString a)
+-- | Inheritance type of the WxString class.
+type TWxString a  = CWxString a
+-- | Abstract type of the WxString class.
+data CWxString a  = CWxString
+
+-- | Pointer to an object of type 'StreamToTextRedirector'.
+type StreamToTextRedirector a  = Object (CStreamToTextRedirector a)
+-- | Inheritance type of the StreamToTextRedirector class.
+type TStreamToTextRedirector a  = CStreamToTextRedirector a
+-- | Abstract type of the StreamToTextRedirector class.
+data CStreamToTextRedirector a  = CStreamToTextRedirector
+
+-- | Pointer to an object of type 'StreamBuffer'.
+type StreamBuffer a  = Object (CStreamBuffer a)
+-- | Inheritance type of the StreamBuffer class.
+type TStreamBuffer a  = CStreamBuffer a
+-- | Abstract type of the StreamBuffer class.
+data CStreamBuffer a  = CStreamBuffer
+
+-- | Pointer to an object of type 'StopWatch'.
+type StopWatch a  = Object (CStopWatch a)
+-- | Inheritance type of the StopWatch class.
+type TStopWatch a  = CStopWatch a
+-- | Abstract type of the StopWatch class.
+data CStopWatch a  = CStopWatch
+
+-- | Pointer to an object of type 'WxSize'.
+type WxSize a  = Object (CWxSize a)
+-- | Inheritance type of the WxSize class.
+type TWxSize a  = CWxSize a
+-- | Abstract type of the WxSize class.
+data CWxSize a  = CWxSize
+
+-- | Pointer to an object of type 'SingleInstanceChecker'.
+type SingleInstanceChecker a  = Object (CSingleInstanceChecker a)
+-- | Inheritance type of the SingleInstanceChecker class.
+type TSingleInstanceChecker a  = CSingleInstanceChecker a
+-- | Abstract type of the SingleInstanceChecker class.
+data CSingleInstanceChecker a  = CSingleInstanceChecker
+
+-- | Pointer to an object of type 'HelpProvider'.
+type HelpProvider a  = Object (CHelpProvider a)
+-- | Inheritance type of the HelpProvider class.
+type THelpProvider a  = CHelpProvider a
+-- | Abstract type of the HelpProvider class.
+data CHelpProvider a  = CHelpProvider
+
+-- | Pointer to an object of type 'SimpleHelpProvider', derived from 'HelpProvider'.
+type SimpleHelpProvider a  = HelpProvider (CSimpleHelpProvider a)
+-- | Inheritance type of the SimpleHelpProvider class.
+type TSimpleHelpProvider a  = THelpProvider (CSimpleHelpProvider a)
+-- | Abstract type of the SimpleHelpProvider class.
+data CSimpleHelpProvider a  = CSimpleHelpProvider
+
+-- | Pointer to an object of type 'HelpControllerHelpProvider', derived from 'SimpleHelpProvider'.
+type HelpControllerHelpProvider a  = SimpleHelpProvider (CHelpControllerHelpProvider a)
+-- | Inheritance type of the HelpControllerHelpProvider class.
+type THelpControllerHelpProvider a  = TSimpleHelpProvider (CHelpControllerHelpProvider a)
+-- | Abstract type of the HelpControllerHelpProvider class.
+data CHelpControllerHelpProvider a  = CHelpControllerHelpProvider
+
+-- | Pointer to an object of type 'Semaphore'.
+type Semaphore a  = Object (CSemaphore a)
+-- | Inheritance type of the Semaphore class.
+type TSemaphore a  = CSemaphore a
+-- | Abstract type of the Semaphore class.
+data CSemaphore a  = CSemaphore
+
+-- | Pointer to an object of type 'ScopedPtr'.
+type ScopedPtr a  = Object (CScopedPtr a)
+-- | Inheritance type of the ScopedPtr class.
+type TScopedPtr a  = CScopedPtr a
+-- | Abstract type of the ScopedPtr class.
+data CScopedPtr a  = CScopedPtr
+
+-- | Pointer to an object of type 'ScopedArray'.
+type ScopedArray a  = Object (CScopedArray a)
+-- | Inheritance type of the ScopedArray class.
+type TScopedArray a  = CScopedArray a
+-- | Abstract type of the ScopedArray class.
+data CScopedArray a  = CScopedArray
+
+-- | Pointer to an object of type 'RegEx'.
+type RegEx a  = Object (CRegEx a)
+-- | Inheritance type of the RegEx class.
+type TRegEx a  = CRegEx a
+-- | Abstract type of the RegEx class.
+data CRegEx a  = CRegEx
+
+-- | Pointer to an object of type 'WxRect'.
+type WxRect a  = Object (CWxRect a)
+-- | Inheritance type of the WxRect class.
+type TWxRect a  = CWxRect a
+-- | Abstract type of the WxRect class.
+data CWxRect a  = CWxRect
+
+-- | Pointer to an object of type 'RealPoint'.
+type RealPoint a  = Object (CRealPoint a)
+-- | Inheritance type of the RealPoint class.
+type TRealPoint a  = CRealPoint a
+-- | Abstract type of the RealPoint class.
+data CRealPoint a  = CRealPoint
+
+-- | Pointer to an object of type 'WxPoint'.
+type WxPoint a  = Object (CWxPoint a)
+-- | Inheritance type of the WxPoint class.
+type TWxPoint a  = CWxPoint a
+-- | Abstract type of the WxPoint class.
+data CWxPoint a  = CWxPoint
+
+-- | Pointer to an object of type 'ObjectRefData'.
+type ObjectRefData a  = Object (CObjectRefData a)
+-- | Inheritance type of the ObjectRefData class.
+type TObjectRefData a  = CObjectRefData a
+-- | Abstract type of the ObjectRefData class.
+data CObjectRefData a  = CObjectRefData
+
+-- | Pointer to an object of type 'NodeBase'.
+type NodeBase a  = Object (CNodeBase a)
+-- | Inheritance type of the NodeBase class.
+type TNodeBase a  = CNodeBase a
+-- | Abstract type of the NodeBase class.
+data CNodeBase a  = CNodeBase
+
+-- | Pointer to an object of type 'MutexLocker'.
+type MutexLocker a  = Object (CMutexLocker a)
+-- | Inheritance type of the MutexLocker class.
+type TMutexLocker a  = CMutexLocker a
+-- | Abstract type of the MutexLocker class.
+data CMutexLocker a  = CMutexLocker
+
+-- | Pointer to an object of type 'Mutex'.
+type Mutex a  = Object (CMutex a)
+-- | Inheritance type of the Mutex class.
+type TMutex a  = CMutex a
+-- | Abstract type of the Mutex class.
+data CMutex a  = CMutex
+
+-- | Pointer to an object of type 'MimeTypesManager'.
+type MimeTypesManager a  = Object (CMimeTypesManager a)
+-- | Inheritance type of the MimeTypesManager class.
+type TMimeTypesManager a  = CMimeTypesManager a
+-- | Abstract type of the MimeTypesManager class.
+data CMimeTypesManager a  = CMimeTypesManager
+
+-- | Pointer to an object of type 'MBConv'.
+type MBConv a  = Object (CMBConv a)
+-- | Inheritance type of the MBConv class.
+type TMBConv a  = CMBConv a
+-- | Abstract type of the MBConv class.
+data CMBConv a  = CMBConv
+
+-- | Pointer to an object of type 'CSConv', derived from 'MBConv'.
+type CSConv a  = MBConv (CCSConv a)
+-- | Inheritance type of the CSConv class.
+type TCSConv a  = TMBConv (CCSConv a)
+-- | Abstract type of the CSConv class.
+data CCSConv a  = CCSConv
+
+-- | Pointer to an object of type 'MBConvFile', derived from 'MBConv'.
+type MBConvFile a  = MBConv (CMBConvFile a)
+-- | Inheritance type of the MBConvFile class.
+type TMBConvFile a  = TMBConv (CMBConvFile a)
+-- | Abstract type of the MBConvFile class.
+data CMBConvFile a  = CMBConvFile
+
+-- | Pointer to an object of type 'MBConvUTF8', derived from 'MBConv'.
+type MBConvUTF8 a  = MBConv (CMBConvUTF8 a)
+-- | Inheritance type of the MBConvUTF8 class.
+type TMBConvUTF8 a  = TMBConv (CMBConvUTF8 a)
+-- | Abstract type of the MBConvUTF8 class.
+data CMBConvUTF8 a  = CMBConvUTF8
+
+-- | Pointer to an object of type 'MBConvUTF7', derived from 'MBConv'.
+type MBConvUTF7 a  = MBConv (CMBConvUTF7 a)
+-- | Inheritance type of the MBConvUTF7 class.
+type TMBConvUTF7 a  = TMBConv (CMBConvUTF7 a)
+-- | Abstract type of the MBConvUTF7 class.
+data CMBConvUTF7 a  = CMBConvUTF7
+
+-- | Pointer to an object of type 'LongLong'.
+type LongLong a  = Object (CLongLong a)
+-- | Inheritance type of the LongLong class.
+type TLongLong a  = CLongLong a
+-- | Abstract type of the LongLong class.
+data CLongLong a  = CLongLong
+
+-- | Pointer to an object of type 'Log'.
+type Log a  = Object (CLog a)
+-- | Inheritance type of the Log class.
+type TLog a  = CLog a
+-- | Abstract type of the Log class.
+data CLog a  = CLog
+
+-- | Pointer to an object of type 'WXCLog', derived from 'Log'.
+type WXCLog a  = Log (CWXCLog a)
+-- | Inheritance type of the WXCLog class.
+type TWXCLog a  = TLog (CWXCLog a)
+-- | Abstract type of the WXCLog class.
+data CWXCLog a  = CWXCLog
+
+-- | Pointer to an object of type 'LogChain', derived from 'Log'.
+type LogChain a  = Log (CLogChain a)
+-- | Inheritance type of the LogChain class.
+type TLogChain a  = TLog (CLogChain a)
+-- | Abstract type of the LogChain class.
+data CLogChain a  = CLogChain
+
+-- | Pointer to an object of type 'LogPassThrough', derived from 'LogChain'.
+type LogPassThrough a  = LogChain (CLogPassThrough a)
+-- | Inheritance type of the LogPassThrough class.
+type TLogPassThrough a  = TLogChain (CLogPassThrough a)
+-- | Abstract type of the LogPassThrough class.
+data CLogPassThrough a  = CLogPassThrough
+
+-- | Pointer to an object of type 'LogWindow', derived from 'LogPassThrough'.
+type LogWindow a  = LogPassThrough (CLogWindow a)
+-- | Inheritance type of the LogWindow class.
+type TLogWindow a  = TLogPassThrough (CLogWindow a)
+-- | Abstract type of the LogWindow class.
+data CLogWindow a  = CLogWindow
+
+-- | Pointer to an object of type 'LogNull', derived from 'Log'.
+type LogNull a  = Log (CLogNull a)
+-- | Inheritance type of the LogNull class.
+type TLogNull a  = TLog (CLogNull a)
+-- | Abstract type of the LogNull class.
+data CLogNull a  = CLogNull
+
+-- | Pointer to an object of type 'LogStderr', derived from 'Log'.
+type LogStderr a  = Log (CLogStderr a)
+-- | Inheritance type of the LogStderr class.
+type TLogStderr a  = TLog (CLogStderr a)
+-- | Abstract type of the LogStderr class.
+data CLogStderr a  = CLogStderr
+
+-- | Pointer to an object of type 'LogTextCtrl', derived from 'Log'.
+type LogTextCtrl a  = Log (CLogTextCtrl a)
+-- | Inheritance type of the LogTextCtrl class.
+type TLogTextCtrl a  = TLog (CLogTextCtrl a)
+-- | Abstract type of the LogTextCtrl class.
+data CLogTextCtrl a  = CLogTextCtrl
+
+-- | Pointer to an object of type 'LogStream', derived from 'Log'.
+type LogStream a  = Log (CLogStream a)
+-- | Inheritance type of the LogStream class.
+type TLogStream a  = TLog (CLogStream a)
+-- | Abstract type of the LogStream class.
+data CLogStream a  = CLogStream
+
+-- | Pointer to an object of type 'LogGUI', derived from 'Log'.
+type LogGUI a  = Log (CLogGUI a)
+-- | Inheritance type of the LogGUI class.
+type TLogGUI a  = TLog (CLogGUI a)
+-- | Abstract type of the LogGUI class.
+data CLogGUI a  = CLogGUI
+
+-- | Pointer to an object of type 'Locale'.
+type Locale a  = Object (CLocale a)
+-- | Inheritance type of the Locale class.
+type TLocale a  = CLocale a
+-- | Abstract type of the Locale class.
+data CLocale a  = CLocale
+
+-- | Pointer to an object of type 'WXCLocale', derived from 'Locale'.
+type WXCLocale a  = Locale (CWXCLocale a)
+-- | Inheritance type of the WXCLocale class.
+type TWXCLocale a  = TLocale (CWXCLocale a)
+-- | Abstract type of the WXCLocale class.
+data CWXCLocale a  = CWXCLocale
+
+-- | Pointer to an object of type 'IconBundle'.
+type IconBundle a  = Object (CIconBundle a)
+-- | Inheritance type of the IconBundle class.
+type TIconBundle a  = CIconBundle a
+-- | Abstract type of the IconBundle class.
+data CIconBundle a  = CIconBundle
+
+-- | Pointer to an object of type 'HashMap'.
+type HashMap a  = Object (CHashMap a)
+-- | Inheritance type of the HashMap class.
+type THashMap a  = CHashMap a
+-- | Abstract type of the HashMap class.
+data CHashMap a  = CHashMap
+
+-- | Pointer to an object of type 'GridCellCoordsArray'.
+type GridCellCoordsArray a  = Object (CGridCellCoordsArray a)
+-- | Inheritance type of the GridCellCoordsArray class.
+type TGridCellCoordsArray a  = CGridCellCoordsArray a
+-- | Abstract type of the GridCellCoordsArray class.
+data CGridCellCoordsArray a  = CGridCellCoordsArray
+
+-- | Pointer to an object of type 'GridCellAttr'.
+type GridCellAttr a  = Object (CGridCellAttr a)
+-- | Inheritance type of the GridCellAttr class.
+type TGridCellAttr a  = CGridCellAttr a
+-- | Abstract type of the GridCellAttr class.
+data CGridCellAttr a  = CGridCellAttr
+
+-- | Pointer to an object of type 'FontMapper'.
+type FontMapper a  = Object (CFontMapper a)
+-- | Inheritance type of the FontMapper class.
+type TFontMapper a  = CFontMapper a
+-- | Abstract type of the FontMapper class.
+data CFontMapper a  = CFontMapper
+
+-- | Pointer to an object of type 'FontEnumerator'.
+type FontEnumerator a  = Object (CFontEnumerator a)
+-- | Inheritance type of the FontEnumerator class.
+type TFontEnumerator a  = CFontEnumerator a
+-- | Abstract type of the FontEnumerator class.
+data CFontEnumerator a  = CFontEnumerator
+
+-- | Pointer to an object of type 'FileType'.
+type FileType a  = Object (CFileType a)
+-- | Inheritance type of the FileType class.
+type TFileType a  = CFileType a
+-- | Abstract type of the FileType class.
+data CFileType a  = CFileType
+
+-- | Pointer to an object of type 'FileName'.
+type FileName a  = Object (CFileName a)
+-- | Inheritance type of the FileName class.
+type TFileName a  = CFileName a
+-- | Abstract type of the FileName class.
+data CFileName a  = CFileName
+
+-- | Pointer to an object of type 'FFile'.
+type FFile a  = Object (CFFile a)
+-- | Inheritance type of the FFile class.
+type TFFile a  = CFFile a
+-- | Abstract type of the FFile class.
+data CFFile a  = CFFile
+
+-- | Pointer to an object of type 'WxExpr'.
+type WxExpr a  = Object (CWxExpr a)
+-- | Inheritance type of the WxExpr class.
+type TWxExpr a  = CWxExpr a
+-- | Abstract type of the WxExpr class.
+data CWxExpr a  = CWxExpr
+
+-- | Pointer to an object of type 'DynamicLibrary'.
+type DynamicLibrary a  = Object (CDynamicLibrary a)
+-- | Inheritance type of the DynamicLibrary class.
+type TDynamicLibrary a  = CDynamicLibrary a
+-- | Abstract type of the DynamicLibrary class.
+data CDynamicLibrary a  = CDynamicLibrary
+
+-- | Pointer to an object of type 'DropSource'.
+type DropSource a  = Object (CDropSource a)
+-- | Inheritance type of the DropSource class.
+type TDropSource a  = CDropSource a
+-- | Abstract type of the DropSource class.
+data CDropSource a  = CDropSource
+
+-- | Pointer to an object of type 'WxDllLoader'.
+type WxDllLoader a  = Object (CWxDllLoader a)
+-- | Inheritance type of the WxDllLoader class.
+type TWxDllLoader a  = CWxDllLoader a
+-- | Abstract type of the WxDllLoader class.
+data CWxDllLoader a  = CWxDllLoader
+
+-- | Pointer to an object of type 'DirTraverser'.
+type DirTraverser a  = Object (CDirTraverser a)
+-- | Inheritance type of the DirTraverser class.
+type TDirTraverser a  = CDirTraverser a
+-- | Abstract type of the DirTraverser class.
+data CDirTraverser a  = CDirTraverser
+
+-- | Pointer to an object of type 'DialUpManager'.
+type DialUpManager a  = Object (CDialUpManager a)
+-- | Inheritance type of the DialUpManager class.
+type TDialUpManager a  = CDialUpManager a
+-- | Abstract type of the DialUpManager class.
+data CDialUpManager a  = CDialUpManager
+
+-- | Pointer to an object of type 'DebugContext'.
+type DebugContext a  = Object (CDebugContext a)
+-- | Inheritance type of the DebugContext class.
+type TDebugContext a  = CDebugContext a
+-- | Abstract type of the DebugContext class.
+data CDebugContext a  = CDebugContext
+
+-- | Pointer to an object of type 'DbTableInfo'.
+type DbTableInfo a  = Object (CDbTableInfo a)
+-- | Inheritance type of the DbTableInfo class.
+type TDbTableInfo a  = CDbTableInfo a
+-- | Abstract type of the DbTableInfo class.
+data CDbTableInfo a  = CDbTableInfo
+
+-- | Pointer to an object of type 'DbTable'.
+type DbTable a  = Object (CDbTable a)
+-- | Inheritance type of the DbTable class.
+type TDbTable a  = CDbTable a
+-- | Abstract type of the DbTable class.
+data CDbTable a  = CDbTable
+
+-- | Pointer to an object of type 'DbSqlTypeInfo'.
+type DbSqlTypeInfo a  = Object (CDbSqlTypeInfo a)
+-- | Inheritance type of the DbSqlTypeInfo class.
+type TDbSqlTypeInfo a  = CDbSqlTypeInfo a
+-- | Abstract type of the DbSqlTypeInfo class.
+data CDbSqlTypeInfo a  = CDbSqlTypeInfo
+
+-- | Pointer to an object of type 'DbInf'.
+type DbInf a  = Object (CDbInf a)
+-- | Inheritance type of the DbInf class.
+type TDbInf a  = CDbInf a
+-- | Abstract type of the DbInf class.
+data CDbInf a  = CDbInf
+
+-- | Pointer to an object of type 'DbConnectInf'.
+type DbConnectInf a  = Object (CDbConnectInf a)
+-- | Inheritance type of the DbConnectInf class.
+type TDbConnectInf a  = CDbConnectInf a
+-- | Abstract type of the DbConnectInf class.
+data CDbConnectInf a  = CDbConnectInf
+
+-- | Pointer to an object of type 'DbColInf'.
+type DbColInf a  = Object (CDbColInf a)
+-- | Inheritance type of the DbColInf class.
+type TDbColInf a  = CDbColInf a
+-- | Abstract type of the DbColInf class.
+data CDbColInf a  = CDbColInf
+
+-- | Pointer to an object of type 'DbColFor'.
+type DbColFor a  = Object (CDbColFor a)
+-- | Inheritance type of the DbColFor class.
+type TDbColFor a  = CDbColFor a
+-- | Abstract type of the DbColFor class.
+data CDbColFor a  = CDbColFor
+
+-- | Pointer to an object of type 'DbColDef'.
+type DbColDef a  = Object (CDbColDef a)
+-- | Inheritance type of the DbColDef class.
+type TDbColDef a  = CDbColDef a
+-- | Abstract type of the DbColDef class.
+data CDbColDef a  = CDbColDef
+
+-- | Pointer to an object of type 'Db'.
+type Db a  = Object (CDb a)
+-- | Inheritance type of the Db class.
+type TDb a  = CDb a
+-- | Abstract type of the Db class.
+data CDb a  = CDb
+
+-- | Pointer to an object of type 'DateTime'.
+type DateTime a  = Object (CDateTime a)
+-- | Inheritance type of the DateTime class.
+type TDateTime a  = CDateTime a
+-- | Abstract type of the DateTime class.
+data CDateTime a  = CDateTime
+
+-- | Pointer to an object of type 'DataOutputStream'.
+type DataOutputStream a  = Object (CDataOutputStream a)
+-- | Inheritance type of the DataOutputStream class.
+type TDataOutputStream a  = CDataOutputStream a
+-- | Abstract type of the DataOutputStream class.
+data CDataOutputStream a  = CDataOutputStream
+
+-- | Pointer to an object of type 'DataInputStream'.
+type DataInputStream a  = Object (CDataInputStream a)
+-- | Inheritance type of the DataInputStream class.
+type TDataInputStream a  = CDataInputStream a
+-- | Abstract type of the DataInputStream class.
+data CDataInputStream a  = CDataInputStream
+
+-- | Pointer to an object of type 'DataFormat'.
+type DataFormat a  = Object (CDataFormat a)
+-- | Inheritance type of the DataFormat class.
+type TDataFormat a  = CDataFormat a
+-- | Abstract type of the DataFormat class.
+data CDataFormat a  = CDataFormat
+
+-- | Pointer to an object of type 'DCClipper'.
+type DCClipper a  = Object (CDCClipper a)
+-- | Inheritance type of the DCClipper class.
+type TDCClipper a  = CDCClipper a
+-- | Abstract type of the DCClipper class.
+data CDCClipper a  = CDCClipper
+
+-- | Pointer to an object of type 'CriticalSectionLocker'.
+type CriticalSectionLocker a  = Object (CCriticalSectionLocker a)
+-- | Inheritance type of the CriticalSectionLocker class.
+type TCriticalSectionLocker a  = CCriticalSectionLocker a
+-- | Abstract type of the CriticalSectionLocker class.
+data CCriticalSectionLocker a  = CCriticalSectionLocker
+
+-- | Pointer to an object of type 'CriticalSection'.
+type CriticalSection a  = Object (CCriticalSection a)
+-- | Inheritance type of the CriticalSection class.
+type TCriticalSection a  = CCriticalSection a
+-- | Abstract type of the CriticalSection class.
+data CCriticalSection a  = CCriticalSection
+
+-- | Pointer to an object of type 'Condition'.
+type Condition a  = Object (CCondition a)
+-- | Inheritance type of the Condition class.
+type TCondition a  = CCondition a
+-- | Abstract type of the Condition class.
+data CCondition a  = CCondition
+
+-- | Pointer to an object of type 'CommandLineParser'.
+type CommandLineParser a  = Object (CCommandLineParser a)
+-- | Inheritance type of the CommandLineParser class.
+type TCommandLineParser a  = CCommandLineParser a
+-- | Abstract type of the CommandLineParser class.
+data CCommandLineParser a  = CCommandLineParser
+
+-- | Pointer to an object of type 'ClientDataContainer'.
+type ClientDataContainer a  = Object (CClientDataContainer a)
+-- | Inheritance type of the ClientDataContainer class.
+type TClientDataContainer a  = CClientDataContainer a
+-- | Abstract type of the ClientDataContainer class.
+data CClientDataContainer a  = CClientDataContainer
+
+-- | Pointer to an object of type 'Caret'.
+type Caret a  = Object (CCaret a)
+-- | Inheritance type of the Caret class.
+type TCaret a  = CCaret a
+-- | Abstract type of the Caret class.
+data CCaret a  = CCaret
+
+-- | Pointer to an object of type 'CalendarDateAttr'.
+type CalendarDateAttr a  = Object (CCalendarDateAttr a)
+-- | Inheritance type of the CalendarDateAttr class.
+type TCalendarDateAttr a  = CCalendarDateAttr a
+-- | Abstract type of the CalendarDateAttr class.
+data CCalendarDateAttr a  = CCalendarDateAttr
+
+-- | Pointer to an object of type 'BusyInfo'.
+type BusyInfo a  = Object (CBusyInfo a)
+-- | Inheritance type of the BusyInfo class.
+type TBusyInfo a  = CBusyInfo a
+-- | Abstract type of the BusyInfo class.
+data CBusyInfo a  = CBusyInfo
+
+-- | Pointer to an object of type 'BusyCursor'.
+type BusyCursor a  = Object (CBusyCursor a)
+-- | Inheritance type of the BusyCursor class.
+type TBusyCursor a  = CBusyCursor a
+-- | Abstract type of the BusyCursor class.
+data CBusyCursor a  = CBusyCursor
+
+-- | Pointer to an object of type 'AuiPaneInfoArray'.
+type AuiPaneInfoArray a  = Object (CAuiPaneInfoArray a)
+-- | Inheritance type of the AuiPaneInfoArray class.
+type TAuiPaneInfoArray a  = CAuiPaneInfoArray a
+-- | Abstract type of the AuiPaneInfoArray class.
+data CAuiPaneInfoArray a  = CAuiPaneInfoArray
+
+-- | Pointer to an object of type 'AuiToolBarItemArray'.
+type AuiToolBarItemArray a  = Object (CAuiToolBarItemArray a)
+-- | Inheritance type of the AuiToolBarItemArray class.
+type TAuiToolBarItemArray a  = CAuiToolBarItemArray a
+-- | Abstract type of the AuiToolBarItemArray class.
+data CAuiToolBarItemArray a  = CAuiToolBarItemArray
+
+-- | Pointer to an object of type 'AuiNotebookPageArray'.
+type AuiNotebookPageArray a  = Object (CAuiNotebookPageArray a)
+-- | Inheritance type of the AuiNotebookPageArray class.
+type TAuiNotebookPageArray a  = CAuiNotebookPageArray a
+-- | Abstract type of the AuiNotebookPageArray class.
+data CAuiNotebookPageArray a  = CAuiNotebookPageArray
+
+-- | Pointer to an object of type 'AuiNotebookPage'.
+type AuiNotebookPage a  = Object (CAuiNotebookPage a)
+-- | Inheritance type of the AuiNotebookPage class.
+type TAuiNotebookPage a  = CAuiNotebookPage a
+-- | Abstract type of the AuiNotebookPage class.
+data CAuiNotebookPage a  = CAuiNotebookPage
+
+-- | Pointer to an object of type 'AuiPaneInfo'.
+type AuiPaneInfo a  = Object (CAuiPaneInfo a)
+-- | Inheritance type of the AuiPaneInfo class.
+type TAuiPaneInfo a  = CAuiPaneInfo a
+-- | Abstract type of the AuiPaneInfo class.
+data CAuiPaneInfo a  = CAuiPaneInfo
+
+-- | Pointer to an object of type 'AuiDockArt'.
+type AuiDockArt a  = Object (CAuiDockArt a)
+-- | Inheritance type of the AuiDockArt class.
+type TAuiDockArt a  = CAuiDockArt a
+-- | Abstract type of the AuiDockArt class.
+data CAuiDockArt a  = CAuiDockArt
+
+-- | Pointer to an object of type 'AuiTabArt'.
+type AuiTabArt a  = Object (CAuiTabArt a)
+-- | Inheritance type of the AuiTabArt class.
+type TAuiTabArt a  = CAuiTabArt a
+-- | Abstract type of the AuiTabArt class.
+data CAuiTabArt a  = CAuiTabArt
+
+-- | Pointer to an object of type 'AuiDefaultTabArt', derived from 'AuiTabArt'.
+type AuiDefaultTabArt a  = AuiTabArt (CAuiDefaultTabArt a)
+-- | Inheritance type of the AuiDefaultTabArt class.
+type TAuiDefaultTabArt a  = TAuiTabArt (CAuiDefaultTabArt a)
+-- | Abstract type of the AuiDefaultTabArt class.
+data CAuiDefaultTabArt a  = CAuiDefaultTabArt
+
+-- | Pointer to an object of type 'AuiSimpleTabArt', derived from 'AuiTabArt'.
+type AuiSimpleTabArt a  = AuiTabArt (CAuiSimpleTabArt a)
+-- | Inheritance type of the AuiSimpleTabArt class.
+type TAuiSimpleTabArt a  = TAuiTabArt (CAuiSimpleTabArt a)
+-- | Abstract type of the AuiSimpleTabArt class.
+data CAuiSimpleTabArt a  = CAuiSimpleTabArt
+
+-- | Pointer to an object of type 'AuiTabContainer'.
+type AuiTabContainer a  = Object (CAuiTabContainer a)
+-- | Inheritance type of the AuiTabContainer class.
+type TAuiTabContainer a  = CAuiTabContainer a
+-- | Abstract type of the AuiTabContainer class.
+data CAuiTabContainer a  = CAuiTabContainer
+
+-- | Pointer to an object of type 'AuiTabContainerButton'.
+type AuiTabContainerButton a  = Object (CAuiTabContainerButton a)
+-- | Inheritance type of the AuiTabContainerButton class.
+type TAuiTabContainerButton a  = CAuiTabContainerButton a
+-- | Abstract type of the AuiTabContainerButton class.
+data CAuiTabContainerButton a  = CAuiTabContainerButton
+
+-- | Pointer to an object of type 'AuiToolBarArt'.
+type AuiToolBarArt a  = Object (CAuiToolBarArt a)
+-- | Inheritance type of the AuiToolBarArt class.
+type TAuiToolBarArt a  = CAuiToolBarArt a
+-- | Abstract type of the AuiToolBarArt class.
+data CAuiToolBarArt a  = CAuiToolBarArt
+
+-- | Pointer to an object of type 'AuiDefaultToolBarArt', derived from 'AuiToolBarArt'.
+type AuiDefaultToolBarArt a  = AuiToolBarArt (CAuiDefaultToolBarArt a)
+-- | Inheritance type of the AuiDefaultToolBarArt class.
+type TAuiDefaultToolBarArt a  = TAuiToolBarArt (CAuiDefaultToolBarArt a)
+-- | Abstract type of the AuiDefaultToolBarArt class.
+data CAuiDefaultToolBarArt a  = CAuiDefaultToolBarArt
+
+-- | Pointer to an object of type 'AuiToolBarItem'.
+type AuiToolBarItem a  = Object (CAuiToolBarItem a)
+-- | Inheritance type of the AuiToolBarItem class.
+type TAuiToolBarItem a  = CAuiToolBarItem a
+-- | Abstract type of the AuiToolBarItem class.
+data CAuiToolBarItem a  = CAuiToolBarItem
+
+-- | Pointer to an object of type 'WxArray'.
+type WxArray a  = Object (CWxArray a)
+-- | Inheritance type of the WxArray class.
+type TWxArray a  = CWxArray a
+-- | Abstract type of the WxArray class.
+data CWxArray a  = CWxArray
+
+-- | Pointer to an object of type 'ArrayString', derived from 'WxArray'.
+type ArrayString a  = WxArray (CArrayString a)
+-- | Inheritance type of the ArrayString class.
+type TArrayString a  = TWxArray (CArrayString a)
+-- | Abstract type of the ArrayString class.
+data CArrayString a  = CArrayString
+
+-- | Pointer to an object of type 'AcceleratorTable'.
+type AcceleratorTable a  = Object (CAcceleratorTable a)
+-- | Inheritance type of the AcceleratorTable class.
+type TAcceleratorTable a  = CAcceleratorTable a
+-- | Abstract type of the AcceleratorTable class.
+data CAcceleratorTable a  = CAcceleratorTable
+
+-- | Pointer to an object of type 'AcceleratorEntry'.
+type AcceleratorEntry a  = Object (CAcceleratorEntry a)
+-- | Inheritance type of the AcceleratorEntry class.
+type TAcceleratorEntry a  = CAcceleratorEntry a
+-- | Abstract type of the AcceleratorEntry class.
+data CAcceleratorEntry a  = CAcceleratorEntry
+
+-- | Pointer to an object of type 'WXCMessageParameters'.
+type WXCMessageParameters a  = Object (CWXCMessageParameters a)
+-- | Inheritance type of the WXCMessageParameters class.
+type TWXCMessageParameters a  = CWXCMessageParameters a
+-- | Abstract type of the WXCMessageParameters class.
+data CWXCMessageParameters a  = CWXCMessageParameters
+
+-- | Pointer to an object of type 'WXCDragDataObject'.
+type WXCDragDataObject a  = Object (CWXCDragDataObject a)
+-- | Inheritance type of the WXCDragDataObject class.
+type TWXCDragDataObject a  = CWXCDragDataObject a
+-- | Abstract type of the WXCDragDataObject class.
+data CWXCDragDataObject a  = CWXCDragDataObject
+
diff --git a/src/haskell/Graphics/UI/WxcClasses.hs b/src/haskell/Graphics/UI/WxcClasses.hs
new file mode 100644
index 0000000..7a94037
--- /dev/null
+++ b/src/haskell/Graphics/UI/WxcClasses.hs
@@ -0,0 +1,33 @@
+--------------------------------------------------------------------------------
+{-|
+Module      :  WxcClasses
+Copyright   :  Copyright (c) Daan Leijen 2003, 2004
+License     :  wxWindows
+
+Maintainer  :  wxhaskell-devel@lists.sourceforge.net
+Stability   :  provisional
+Portability :  portable
+
+Haskell class definitions for the wxWidgets C library (@wxc.dll@).
+
+Do not edit this file manually!
+This file was automatically generated by wxDirect.
+
+From the files:
+
+  * @wxc.h@
+
+And contains 4353 methods for 281 classes.
+-}
+--------------------------------------------------------------------------------
+module Graphics.UI.WXCore.WxcClasses
+    ( -- * Re-export
+      module Graphics.UI.WXCore.WxcClassesAL
+    , module Graphics.UI.WXCore.WxcClassesMZ
+    , module Graphics.UI.WXCore.WxcClassTypes
+    ) where
+
+import Graphics.UI.WXCore.WxcClassesAL
+import Graphics.UI.WXCore.WxcClassesMZ
+import Graphics.UI.WXCore.WxcClassTypes
+
diff --git a/src/haskell/Graphics/UI/WxcClassesAL.hs b/src/haskell/Graphics/UI/WxcClassesAL.hs
new file mode 100644
index 0000000..4cf9dca
--- /dev/null
+++ b/src/haskell/Graphics/UI/WxcClassesAL.hs
@@ -0,0 +1,18074 @@
+{-# OPTIONS_HADDOCK prune #-}
+{-# LANGUAGE ForeignFunctionInterface #-}
+--------------------------------------------------------------------------------
+{-|
+Module      :  WxcClassesAL
+Copyright   :  Copyright (c) Daan Leijen 2003, 2004
+License     :  wxWindows
+
+Maintainer  :  wxhaskell-devel@lists.sourceforge.net
+Stability   :  provisional
+Portability :  portable
+
+Haskell class definitions for the wxWidgets C library (@wxc.dll@).
+
+Do not edit this file manually!
+This file was automatically generated by wxDirect.
+
+From the files:
+
+  * @wxc.h@
+
+And contains 2014 methods for 150 classes.
+-}
+--------------------------------------------------------------------------------
+module Graphics.UI.WXCore.WxcClassesAL
+    ( -- * Global
+     -- ** Misc.
+      bitmapDataObjectCreate
+     ,bitmapDataObjectCreateEmpty
+     ,bitmapDataObjectDelete
+     ,bitmapDataObjectGetBitmap
+     ,bitmapDataObjectSetBitmap
+     ,cFree
+     ,colorPickerCtrlCreate
+     ,colorPickerCtrlGetColour
+     ,colorPickerCtrlSetColour
+     ,cursorCreateFromImage
+     ,cursorCreateFromStock
+     ,cursorCreateLoad
+     ,dragIcon
+     ,dragListItem
+     ,dragString
+     ,dragTreeItem
+     ,dropSourceCreate
+     ,dropSourceDelete
+     ,dropSourceDoDragDrop
+     ,fileDataObjectAddFile
+     ,fileDataObjectCreate
+     ,fileDataObjectDelete
+     ,fileDataObjectGetFilenames
+     ,gcdcCreate
+     ,gcdcCreateFromMemory
+     ,gcdcCreateFromPrinter
+     ,gcdcDelete
+     ,gcdcGetGraphicsContext
+     ,gcdcSetGraphicsContext
+     ,genericDragIcon
+     ,genericDragListItem
+     ,genericDragString
+     ,genericDragTreeItem
+     ,getApplicationDir
+     ,getApplicationPath
+     ,getColourFromUser
+     ,getELJLocale
+     ,getELJTranslation
+     ,getFontFromUser
+     ,getNumberFromUser
+     ,getPasswordFromUser
+     ,getTextFromUser
+     ,isDefined
+     ,kill
+     ,logDebug
+     ,logError
+     ,logErrorMsg
+     ,logFatalError
+     ,logFatalErrorMsg
+     ,logMessage
+     ,logMessageMsg
+     ,logStatus
+     ,logSysError
+     ,logTrace
+     ,logVerbose
+     ,logWarning
+     ,logWarningMsg
+      -- * Classes
+     -- ** AcceleratorEntry
+     ,acceleratorEntryCreate
+     ,acceleratorEntryDelete
+     ,acceleratorEntryGetCommand
+     ,acceleratorEntryGetFlags
+     ,acceleratorEntryGetKeyCode
+     ,acceleratorEntrySet
+     -- ** AcceleratorTable
+     ,acceleratorTableCreate
+     ,acceleratorTableDelete
+     -- ** ActivateEvent
+     ,activateEventCopyObject
+     ,activateEventGetActive
+     -- ** AuiDefaultTabArt
+     ,auiDefaultTabArtClone
+     ,auiDefaultTabArtCreate
+     ,auiDefaultTabArtDrawBackground
+     ,auiDefaultTabArtDrawButton
+     ,auiDefaultTabArtDrawTab
+     ,auiDefaultTabArtGetBestTabCtrlSize
+     ,auiDefaultTabArtGetIndentSize
+     ,auiDefaultTabArtGetTabSize
+     ,auiDefaultTabArtSetActiveColour
+     ,auiDefaultTabArtSetColour
+     ,auiDefaultTabArtSetFlags
+     ,auiDefaultTabArtSetMeasuringFont
+     ,auiDefaultTabArtSetNormalFont
+     ,auiDefaultTabArtSetSelectedFont
+     ,auiDefaultTabArtSetSizingInfo
+     ,auiDefaultTabArtShowDropDown
+     -- ** AuiDefaultToolBarArt
+     ,auiDefaultToolBarArtClone
+     ,auiDefaultToolBarArtCreate
+     ,auiDefaultToolBarArtDrawBackground
+     ,auiDefaultToolBarArtDrawButton
+     ,auiDefaultToolBarArtDrawControlLabel
+     ,auiDefaultToolBarArtDrawDropDownButton
+     ,auiDefaultToolBarArtDrawGripper
+     ,auiDefaultToolBarArtDrawLabel
+     ,auiDefaultToolBarArtDrawOverflowButton
+     ,auiDefaultToolBarArtDrawPlainBackground
+     ,auiDefaultToolBarArtDrawSeparator
+     ,auiDefaultToolBarArtGetElementSize
+     ,auiDefaultToolBarArtGetFlags
+     ,auiDefaultToolBarArtGetFont
+     ,auiDefaultToolBarArtGetLabelSize
+     ,auiDefaultToolBarArtGetTextOrientation
+     ,auiDefaultToolBarArtGetToolSize
+     ,auiDefaultToolBarArtSetElementSize
+     ,auiDefaultToolBarArtSetFlags
+     ,auiDefaultToolBarArtSetFont
+     ,auiDefaultToolBarArtSetTextOrientation
+     ,auiDefaultToolBarArtShowDropDown
+     -- ** AuiDockArt
+     ,auiDockArtDrawBackground
+     ,auiDockArtDrawBorder
+     ,auiDockArtDrawCaption
+     ,auiDockArtDrawGripper
+     ,auiDockArtDrawPaneButton
+     ,auiDockArtDrawSash
+     ,auiDockArtGetColour
+     ,auiDockArtGetFont
+     ,auiDockArtGetMetric
+     ,auiDockArtSetColour
+     ,auiDockArtSetFont
+     ,auiDockArtSetMetric
+     -- ** AuiManager
+     ,auiManagerAddPane
+     ,auiManagerAddPaneByPaneInfo
+     ,auiManagerAddPaneByPaneInfoAndDropPosition
+     ,auiManagerCreate
+     ,auiManagerDelete
+     ,auiManagerDetachPane
+     ,auiManagerGetAllPanes
+     ,auiManagerGetArtProvider
+     ,auiManagerGetDockSizeConstraint
+     ,auiManagerGetFlags
+     ,auiManagerGetManagedWindow
+     ,auiManagerGetManager
+     ,auiManagerGetPaneByName
+     ,auiManagerGetPaneByWindow
+     ,auiManagerHideHint
+     ,auiManagerInsertPane
+     ,auiManagerLoadPaneInfo
+     ,auiManagerLoadPerspective
+     ,auiManagerSavePaneInfo
+     ,auiManagerSavePerspective
+     ,auiManagerSetArtProvider
+     ,auiManagerSetDockSizeConstraint
+     ,auiManagerSetFlags
+     ,auiManagerSetManagedWindow
+     ,auiManagerShowHint
+     ,auiManagerUnInit
+     ,auiManagerUpdate
+     -- ** AuiManagerEvent
+     ,auiManagerEventCanVeto
+     ,auiManagerEventCreate
+     ,auiManagerEventGetButton
+     ,auiManagerEventGetDC
+     ,auiManagerEventGetManager
+     ,auiManagerEventGetPane
+     ,auiManagerEventGetVeto
+     ,auiManagerEventSetButton
+     ,auiManagerEventSetCanVeto
+     ,auiManagerEventSetDC
+     ,auiManagerEventSetManager
+     ,auiManagerEventSetPane
+     ,auiManagerEventVeto
+     -- ** AuiNotebook
+     ,auiNotebookAddPage
+     ,auiNotebookAddPageWithBitmap
+     ,auiNotebookAdvanceSelection
+     ,auiNotebookChangeSelection
+     ,auiNotebookCreate
+     ,auiNotebookCreateDefault
+     ,auiNotebookCreateFromDefault
+     ,auiNotebookDeleteAllPages
+     ,auiNotebookDeletePage
+     ,auiNotebookGetArtProvider
+     ,auiNotebookGetCurrentPage
+     ,auiNotebookGetHeightForPageHeight
+     ,auiNotebookGetPage
+     ,auiNotebookGetPageBitmap
+     ,auiNotebookGetPageCount
+     ,auiNotebookGetPageIndex
+     ,auiNotebookGetPageText
+     ,auiNotebookGetPageToolTip
+     ,auiNotebookGetSelection
+     ,auiNotebookGetTabCtrlHeight
+     ,auiNotebookInsertPage
+     ,auiNotebookInsertPageWithBitmap
+     ,auiNotebookRemovePage
+     ,auiNotebookSetArtProvider
+     ,auiNotebookSetFont
+     ,auiNotebookSetMeasuringFont
+     ,auiNotebookSetNormalFont
+     ,auiNotebookSetPageBitmap
+     ,auiNotebookSetPageImage
+     ,auiNotebookSetPageText
+     ,auiNotebookSetPageToolTip
+     ,auiNotebookSetSelectedFont
+     ,auiNotebookSetSelection
+     ,auiNotebookSetTabCtrlHeight
+     ,auiNotebookSetUniformBitmapSize
+     ,auiNotebookShowWindowMenu
+     ,auiNotebookSplit
+     -- ** AuiNotebookEvent
+     ,auiNotebookEventCreate
+     ,auiNotebookEventGetDragSource
+     -- ** AuiNotebookPage
+     ,auiNotebookPageActive
+     ,auiNotebookPageBitmap
+     ,auiNotebookPageCaption
+     ,auiNotebookPageRect
+     ,auiNotebookPageTooltip
+     ,auiNotebookPageWindow
+     -- ** AuiNotebookPageArray
+     ,auiNotebookPageArrayCreate
+     ,auiNotebookPageArrayDelete
+     ,auiNotebookPageArrayGetCount
+     ,auiNotebookPageArrayItem
+     -- ** AuiPaneInfo
+     ,auiPaneInfoBestSize
+     ,auiPaneInfoBestSizeXY
+     ,auiPaneInfoBottom
+     ,auiPaneInfoBottomDockable
+     ,auiPaneInfoCaption
+     ,auiPaneInfoCaptionVisible
+     ,auiPaneInfoCenter
+     ,auiPaneInfoCenterPane
+     ,auiPaneInfoCentre
+     ,auiPaneInfoCentrePane
+     ,auiPaneInfoCloseButton
+     ,auiPaneInfoCopy
+     ,auiPaneInfoCreate
+     ,auiPaneInfoCreateDefault
+     ,auiPaneInfoDefaultPane
+     ,auiPaneInfoDestroyOnClose
+     ,auiPaneInfoDirection
+     ,auiPaneInfoDock
+     ,auiPaneInfoDockFixed
+     ,auiPaneInfoDockable
+     ,auiPaneInfoFixed
+     ,auiPaneInfoFloat
+     ,auiPaneInfoFloatable
+     ,auiPaneInfoFloatingPosition
+     ,auiPaneInfoFloatingPositionXY
+     ,auiPaneInfoFloatingSize
+     ,auiPaneInfoFloatingSizeXY
+     ,auiPaneInfoGripper
+     ,auiPaneInfoGripperTop
+     ,auiPaneInfoHasBorder
+     ,auiPaneInfoHasCaption
+     ,auiPaneInfoHasCloseButton
+     ,auiPaneInfoHasFlag
+     ,auiPaneInfoHasGripper
+     ,auiPaneInfoHasGripperTop
+     ,auiPaneInfoHasMaximizeButton
+     ,auiPaneInfoHasMinimizeButton
+     ,auiPaneInfoHasPinButton
+     ,auiPaneInfoHide
+     ,auiPaneInfoIcon
+     ,auiPaneInfoIsBottomDockable
+     ,auiPaneInfoIsDockable
+     ,auiPaneInfoIsDocked
+     ,auiPaneInfoIsFixed
+     ,auiPaneInfoIsFloatable
+     ,auiPaneInfoIsFloating
+     ,auiPaneInfoIsLeftDockable
+     ,auiPaneInfoIsMovable
+     ,auiPaneInfoIsOk
+     ,auiPaneInfoIsResizable
+     ,auiPaneInfoIsRightDockable
+     ,auiPaneInfoIsShown
+     ,auiPaneInfoIsToolbar
+     ,auiPaneInfoIsTopDockable
+     ,auiPaneInfoLayer
+     ,auiPaneInfoLeft
+     ,auiPaneInfoLeftDockable
+     ,auiPaneInfoMaxSize
+     ,auiPaneInfoMaxSizeXY
+     ,auiPaneInfoMaximizeButton
+     ,auiPaneInfoMinSize
+     ,auiPaneInfoMinSizeXY
+     ,auiPaneInfoMinimizeButton
+     ,auiPaneInfoMovable
+     ,auiPaneInfoName
+     ,auiPaneInfoPaneBorder
+     ,auiPaneInfoPinButton
+     ,auiPaneInfoPosition
+     ,auiPaneInfoResizable
+     ,auiPaneInfoRight
+     ,auiPaneInfoRightDockable
+     ,auiPaneInfoRow
+     ,auiPaneInfoSafeSet
+     ,auiPaneInfoSetFlag
+     ,auiPaneInfoShow
+     ,auiPaneInfoToolbarPane
+     ,auiPaneInfoTop
+     ,auiPaneInfoTopDockable
+     ,auiPaneInfoWindow
+     -- ** AuiPaneInfoArray
+     ,auiPaneInfoArrayCreate
+     ,auiPaneInfoArrayDelete
+     ,auiPaneInfoArrayGetCount
+     ,auiPaneInfoArrayItem
+     -- ** AuiSimpleTabArt
+     ,auiSimpleTabArtClone
+     ,auiSimpleTabArtCreate
+     ,auiSimpleTabArtDrawBackground
+     ,auiSimpleTabArtDrawButton
+     ,auiSimpleTabArtDrawTab
+     ,auiSimpleTabArtGetBestTabCtrlSize
+     ,auiSimpleTabArtGetIndentSize
+     ,auiSimpleTabArtGetTabSize
+     ,auiSimpleTabArtSetActiveColour
+     ,auiSimpleTabArtSetColour
+     ,auiSimpleTabArtSetFlags
+     ,auiSimpleTabArtSetMeasuringFont
+     ,auiSimpleTabArtSetNormalFont
+     ,auiSimpleTabArtSetSelectedFont
+     ,auiSimpleTabArtSetSizingInfo
+     ,auiSimpleTabArtShowDropDown
+     -- ** AuiTabArt
+     ,auiTabArtClone
+     ,auiTabArtDrawBackground
+     ,auiTabArtDrawButton
+     ,auiTabArtDrawTab
+     ,auiTabArtGetBestTabCtrlSize
+     ,auiTabArtGetIndentSize
+     ,auiTabArtGetTabSize
+     ,auiTabArtSetActiveColour
+     ,auiTabArtSetColour
+     ,auiTabArtSetFlags
+     ,auiTabArtSetMeasuringFont
+     ,auiTabArtSetNormalFont
+     ,auiTabArtSetSelectedFont
+     ,auiTabArtSetSizingInfo
+     -- ** AuiTabContainer
+     ,auiTabContainerAddButton
+     ,auiTabContainerAddPage
+     ,auiTabContainerCreate
+     ,auiTabContainerDoShowHide
+     ,auiTabContainerGetActivePage
+     ,auiTabContainerGetArtProvider
+     ,auiTabContainerGetFlags
+     ,auiTabContainerGetIdxFromWindow
+     ,auiTabContainerGetPage
+     ,auiTabContainerGetPageCount
+     ,auiTabContainerGetPages
+     ,auiTabContainerGetTabOffset
+     ,auiTabContainerGetWindowFromIdx
+     ,auiTabContainerInsertPage
+     ,auiTabContainerIsTabVisible
+     ,auiTabContainerMakeTabVisible
+     ,auiTabContainerMovePage
+     ,auiTabContainerRemoveButton
+     ,auiTabContainerRemovePage
+     ,auiTabContainerSetActiveColour
+     ,auiTabContainerSetActivePage
+     ,auiTabContainerSetActivePageByWindow
+     ,auiTabContainerSetArtProvider
+     ,auiTabContainerSetColour
+     ,auiTabContainerSetFlags
+     ,auiTabContainerSetMeasuringFont
+     ,auiTabContainerSetNoneActive
+     ,auiTabContainerSetNormalFont
+     ,auiTabContainerSetRect
+     ,auiTabContainerSetSelectedFont
+     ,auiTabContainerSetTabOffset
+     -- ** AuiTabContainerButton
+     ,auiTabContainerButtonBitmap
+     ,auiTabContainerButtonCurState
+     ,auiTabContainerButtonDisBitmap
+     ,auiTabContainerButtonId
+     ,auiTabContainerButtonLocation
+     ,auiTabContainerButtonRect
+     -- ** AuiTabCtrl
+     ,auiTabCtrlAddButton
+     ,auiTabCtrlAddPage
+     ,auiTabCtrlDoShowHide
+     ,auiTabCtrlGetActivePage
+     ,auiTabCtrlGetArtProvider
+     ,auiTabCtrlGetFlags
+     ,auiTabCtrlGetIdxFromWindow
+     ,auiTabCtrlGetPage
+     ,auiTabCtrlGetPageCount
+     ,auiTabCtrlGetPages
+     ,auiTabCtrlGetTabOffset
+     ,auiTabCtrlGetWindowFromIdx
+     ,auiTabCtrlInsertPage
+     ,auiTabCtrlIsTabVisible
+     ,auiTabCtrlMakeTabVisible
+     ,auiTabCtrlMovePage
+     ,auiTabCtrlRemoveButton
+     ,auiTabCtrlRemovePage
+     ,auiTabCtrlSetActiveColour
+     ,auiTabCtrlSetActivePage
+     ,auiTabCtrlSetActivePageByWindow
+     ,auiTabCtrlSetArtProvider
+     ,auiTabCtrlSetColour
+     ,auiTabCtrlSetFlags
+     ,auiTabCtrlSetMeasuringFont
+     ,auiTabCtrlSetNoneActive
+     ,auiTabCtrlSetNormalFont
+     ,auiTabCtrlSetRect
+     ,auiTabCtrlSetSelectedFont
+     ,auiTabCtrlSetTabOffset
+     -- ** AuiToolBar
+     ,auiToolBarAddControl
+     ,auiToolBarAddLabel
+     ,auiToolBarAddSeparator
+     ,auiToolBarAddSpacer
+     ,auiToolBarAddStretchSpacer
+     ,auiToolBarAddTool
+     ,auiToolBarAddToolByBitmap
+     ,auiToolBarAddToolByLabel
+     ,auiToolBarClear
+     ,auiToolBarClearTools
+     ,auiToolBarCreate
+     ,auiToolBarCreateDefault
+     ,auiToolBarCreateFromDefault
+     ,auiToolBarDelete
+     ,auiToolBarDeleteByIndex
+     ,auiToolBarDeleteTool
+     ,auiToolBarEnableTool
+     ,auiToolBarFindControl
+     ,auiToolBarFindTool
+     ,auiToolBarFindToolByIndex
+     ,auiToolBarFindToolByPosition
+     ,auiToolBarGetArtProvider
+     ,auiToolBarGetGripperVisible
+     ,auiToolBarGetHintSize
+     ,auiToolBarGetOverflowVisible
+     ,auiToolBarGetToolBarFits
+     ,auiToolBarGetToolBitmap
+     ,auiToolBarGetToolBitmapSize
+     ,auiToolBarGetToolBorderPadding
+     ,auiToolBarGetToolCount
+     ,auiToolBarGetToolDropDown
+     ,auiToolBarGetToolEnabled
+     ,auiToolBarGetToolFits
+     ,auiToolBarGetToolFitsByIndex
+     ,auiToolBarGetToolIndex
+     ,auiToolBarGetToolLabel
+     ,auiToolBarGetToolLongHelp
+     ,auiToolBarGetToolPacking
+     ,auiToolBarGetToolPos
+     ,auiToolBarGetToolProportion
+     ,auiToolBarGetToolRect
+     ,auiToolBarGetToolSeparation
+     ,auiToolBarGetToolShortHelp
+     ,auiToolBarGetToolSticky
+     ,auiToolBarGetToolTextOrientation
+     ,auiToolBarGetToolToggled
+     ,auiToolBarGetWindowStyleFlag
+     ,auiToolBarIsPaneValid
+     ,auiToolBarRealize
+     ,auiToolBarSetArtProvider
+     ,auiToolBarSetCustomOverflowItems
+     ,auiToolBarSetFont
+     ,auiToolBarSetGripperVisible
+     ,auiToolBarSetMargins
+     ,auiToolBarSetMarginsDetailed
+     ,auiToolBarSetMarginsXY
+     ,auiToolBarSetOverflowVisible
+     ,auiToolBarSetToolBitmap
+     ,auiToolBarSetToolBitmapSize
+     ,auiToolBarSetToolBorderPadding
+     ,auiToolBarSetToolDropDown
+     ,auiToolBarSetToolLabel
+     ,auiToolBarSetToolLongHelp
+     ,auiToolBarSetToolPacking
+     ,auiToolBarSetToolProportion
+     ,auiToolBarSetToolSeparation
+     ,auiToolBarSetToolShortHelp
+     ,auiToolBarSetToolSticky
+     ,auiToolBarSetToolTextOrientation
+     ,auiToolBarSetWindowStyleFlag
+     ,auiToolBarToggleTool
+     -- ** AuiToolBarArt
+     ,auiToolBarArtClone
+     ,auiToolBarArtDrawBackground
+     ,auiToolBarArtDrawButton
+     ,auiToolBarArtDrawControlLabel
+     ,auiToolBarArtDrawDropDownButton
+     ,auiToolBarArtDrawGripper
+     ,auiToolBarArtDrawLabel
+     ,auiToolBarArtDrawOverflowButton
+     ,auiToolBarArtDrawPlainBackground
+     ,auiToolBarArtDrawSeparator
+     ,auiToolBarArtGetElementSize
+     ,auiToolBarArtGetFlags
+     ,auiToolBarArtGetFont
+     ,auiToolBarArtGetLabelSize
+     ,auiToolBarArtGetTextOrientation
+     ,auiToolBarArtGetToolSize
+     ,auiToolBarArtSetElementSize
+     ,auiToolBarArtSetFlags
+     ,auiToolBarArtSetFont
+     ,auiToolBarArtSetTextOrientation
+     ,auiToolBarArtShowDropDown
+     -- ** AuiToolBarEvent
+     ,auiToolBarEventGetClickPoint
+     ,auiToolBarEventGetItemRect
+     ,auiToolBarEventGetToolId
+     ,auiToolBarEventIsDropDownClicked
+     -- ** AuiToolBarItem
+     ,auiToolBarItemAssign
+     ,auiToolBarItemCopy
+     ,auiToolBarItemCreate
+     ,auiToolBarItemCreateDefault
+     ,auiToolBarItemGetAlignment
+     ,auiToolBarItemGetBitmap
+     ,auiToolBarItemGetDisabledBitmap
+     ,auiToolBarItemGetHoverBitmap
+     ,auiToolBarItemGetId
+     ,auiToolBarItemGetKind
+     ,auiToolBarItemGetLabel
+     ,auiToolBarItemGetLongHelp
+     ,auiToolBarItemGetMinSize
+     ,auiToolBarItemGetProportion
+     ,auiToolBarItemGetShortHelp
+     ,auiToolBarItemGetSizerItem
+     ,auiToolBarItemGetSpacerPixels
+     ,auiToolBarItemGetState
+     ,auiToolBarItemGetUserData
+     ,auiToolBarItemGetWindow
+     ,auiToolBarItemHasDropDown
+     ,auiToolBarItemIsActive
+     ,auiToolBarItemIsSticky
+     ,auiToolBarItemSetActive
+     ,auiToolBarItemSetAlignment
+     ,auiToolBarItemSetBitmap
+     ,auiToolBarItemSetDisabledBitmap
+     ,auiToolBarItemSetHasDropDown
+     ,auiToolBarItemSetHoverBitmap
+     ,auiToolBarItemSetId
+     ,auiToolBarItemSetKind
+     ,auiToolBarItemSetLabel
+     ,auiToolBarItemSetLongHelp
+     ,auiToolBarItemSetMinSize
+     ,auiToolBarItemSetProportion
+     ,auiToolBarItemSetShortHelp
+     ,auiToolBarItemSetSizerItem
+     ,auiToolBarItemSetSpacerPixels
+     ,auiToolBarItemSetState
+     ,auiToolBarItemSetSticky
+     ,auiToolBarItemSetUserData
+     ,auiToolBarItemSetWindow
+     -- ** AuiToolBarItemArray
+     ,auiToolBarItemArrayCreate
+     ,auiToolBarItemArrayDelete
+     ,auiToolBarItemArrayGetCount
+     ,auiToolBarItemArrayItem
+     -- ** AutoBufferedPaintDC
+     ,autoBufferedPaintDCCreate
+     ,autoBufferedPaintDCDelete
+     -- ** Bitmap
+     ,bitmapAddHandler
+     ,bitmapCleanUpHandlers
+     ,bitmapCreate
+     ,bitmapCreateDefault
+     ,bitmapCreateEmpty
+     ,bitmapCreateFromImage
+     ,bitmapCreateFromXPM
+     ,bitmapCreateLoad
+     ,bitmapDelete
+     ,bitmapFindHandlerByExtension
+     ,bitmapFindHandlerByName
+     ,bitmapFindHandlerByType
+     ,bitmapGetDepth
+     ,bitmapGetHeight
+     ,bitmapGetMask
+     ,bitmapGetSubBitmap
+     ,bitmapGetWidth
+     ,bitmapInitStandardHandlers
+     ,bitmapInsertHandler
+     ,bitmapIsOk
+     ,bitmapIsStatic
+     ,bitmapLoadFile
+     ,bitmapRemoveHandler
+     ,bitmapSafeDelete
+     ,bitmapSaveFile
+     ,bitmapSetDepth
+     ,bitmapSetHeight
+     ,bitmapSetMask
+     ,bitmapSetWidth
+     -- ** BitmapButton
+     ,bitmapButtonCreate
+     ,bitmapButtonGetBitmapDisabled
+     ,bitmapButtonGetBitmapFocus
+     ,bitmapButtonGetBitmapLabel
+     ,bitmapButtonGetBitmapSelected
+     ,bitmapButtonGetMarginX
+     ,bitmapButtonGetMarginY
+     ,bitmapButtonSetBitmapDisabled
+     ,bitmapButtonSetBitmapFocus
+     ,bitmapButtonSetBitmapLabel
+     ,bitmapButtonSetBitmapSelected
+     ,bitmapButtonSetMargins
+     -- ** BitmapToggleButton
+     ,bitmapToggleButtonCreate
+     ,bitmapToggleButtonEnable
+     ,bitmapToggleButtonGetValue
+     ,bitmapToggleButtonSetBitmapLabel
+     ,bitmapToggleButtonSetValue
+     -- ** BookCtrlBase
+     ,bookCtrlBaseAddPage
+     ,bookCtrlBaseAdvanceSelection
+     ,bookCtrlBaseAssignImageList
+     ,bookCtrlBaseChangeSelection
+     ,bookCtrlBaseCreateFromDefault
+     ,bookCtrlBaseDeleteAllPages
+     ,bookCtrlBaseDeletePage
+     ,bookCtrlBaseFindPage
+     ,bookCtrlBaseGetCurrentPage
+     ,bookCtrlBaseGetImageList
+     ,bookCtrlBaseGetPage
+     ,bookCtrlBaseGetPageCount
+     ,bookCtrlBaseGetPageImage
+     ,bookCtrlBaseGetPageText
+     ,bookCtrlBaseGetSelection
+     ,bookCtrlBaseHitTest
+     ,bookCtrlBaseInsertPage
+     ,bookCtrlBaseRemovePage
+     ,bookCtrlBaseSetImageList
+     ,bookCtrlBaseSetPageImage
+     ,bookCtrlBaseSetPageSize
+     ,bookCtrlBaseSetPageText
+     ,bookCtrlBaseSetSelection
+     -- ** BookCtrlEvent
+     ,bookCtrlEventCreate
+     ,bookCtrlEventGetOldSelection
+     ,bookCtrlEventGetSelection
+     -- ** BoolProperty
+     ,boolPropertyCreate
+     -- ** BoxSizer
+     ,boxSizerCalcMin
+     ,boxSizerCreate
+     ,boxSizerGetOrientation
+     ,boxSizerRecalcSizes
+     -- ** Brush
+     ,brushAssign
+     ,brushCreateDefault
+     ,brushCreateFromBitmap
+     ,brushCreateFromColour
+     ,brushCreateFromStock
+     ,brushDelete
+     ,brushGetColour
+     ,brushGetStipple
+     ,brushGetStyle
+     ,brushIsEqual
+     ,brushIsOk
+     ,brushIsStatic
+     ,brushSafeDelete
+     ,brushSetColour
+     ,brushSetColourSingle
+     ,brushSetStipple
+     ,brushSetStyle
+     -- ** BufferedDC
+     ,bufferedDCCreateByDCAndBitmap
+     ,bufferedDCCreateByDCAndSize
+     ,bufferedDCDelete
+     -- ** BufferedPaintDC
+     ,bufferedPaintDCCreate
+     ,bufferedPaintDCCreateWithBitmap
+     ,bufferedPaintDCDelete
+     -- ** BusyCursor
+     ,busyCursorCreate
+     ,busyCursorCreateWithCursor
+     ,busyCursorDelete
+     -- ** BusyInfo
+     ,busyInfoCreate
+     ,busyInfoDelete
+     -- ** Button
+     ,buttonCreate
+     ,buttonSetBackgroundColour
+     ,buttonSetDefault
+     -- ** CalculateLayoutEvent
+     ,calculateLayoutEventCreate
+     ,calculateLayoutEventGetFlags
+     ,calculateLayoutEventGetRect
+     ,calculateLayoutEventSetFlags
+     ,calculateLayoutEventSetRect
+     -- ** CalendarCtrl
+     ,calendarCtrlCreate
+     ,calendarCtrlEnableHolidayDisplay
+     ,calendarCtrlEnableMonthChange
+     ,calendarCtrlGetAttr
+     ,calendarCtrlGetDate
+     ,calendarCtrlGetHeaderColourBg
+     ,calendarCtrlGetHeaderColourFg
+     ,calendarCtrlGetHighlightColourBg
+     ,calendarCtrlGetHighlightColourFg
+     ,calendarCtrlGetHolidayColourBg
+     ,calendarCtrlGetHolidayColourFg
+     ,calendarCtrlHitTest
+     ,calendarCtrlResetAttr
+     ,calendarCtrlSetAttr
+     ,calendarCtrlSetDate
+     ,calendarCtrlSetHeaderColours
+     ,calendarCtrlSetHighlightColours
+     ,calendarCtrlSetHoliday
+     ,calendarCtrlSetHolidayColours
+     -- ** CalendarDateAttr
+     ,calendarDateAttrCreate
+     ,calendarDateAttrCreateDefault
+     ,calendarDateAttrDelete
+     ,calendarDateAttrGetBackgroundColour
+     ,calendarDateAttrGetBorder
+     ,calendarDateAttrGetBorderColour
+     ,calendarDateAttrGetFont
+     ,calendarDateAttrGetTextColour
+     ,calendarDateAttrHasBackgroundColour
+     ,calendarDateAttrHasBorder
+     ,calendarDateAttrHasBorderColour
+     ,calendarDateAttrHasFont
+     ,calendarDateAttrHasTextColour
+     ,calendarDateAttrIsHoliday
+     ,calendarDateAttrSetBackgroundColour
+     ,calendarDateAttrSetBorder
+     ,calendarDateAttrSetBorderColour
+     ,calendarDateAttrSetFont
+     ,calendarDateAttrSetHoliday
+     ,calendarDateAttrSetTextColour
+     -- ** CalendarEvent
+     ,calendarEventGetDate
+     ,calendarEventGetWeekDay
+     -- ** Caret
+     ,caretCreate
+     ,caretGetBlinkTime
+     ,caretGetPosition
+     ,caretGetSize
+     ,caretGetWindow
+     ,caretHide
+     ,caretIsOk
+     ,caretIsVisible
+     ,caretMove
+     ,caretSetBlinkTime
+     ,caretSetSize
+     ,caretShow
+     -- ** CheckBox
+     ,checkBoxCreate
+     ,checkBoxDelete
+     ,checkBoxGetValue
+     ,checkBoxSetValue
+     -- ** CheckListBox
+     ,checkListBoxCheck
+     ,checkListBoxCreate
+     ,checkListBoxDelete
+     ,checkListBoxIsChecked
+     -- ** Choice
+     ,choiceAppend
+     ,choiceClear
+     ,choiceCreate
+     ,choiceDelete
+     ,choiceFindString
+     ,choiceGetCount
+     ,choiceGetSelection
+     ,choiceGetString
+     ,choiceSetSelection
+     ,choiceSetString
+     -- ** ClassInfo
+     ,classInfoCreateClassByName
+     ,classInfoFindClass
+     ,classInfoGetBaseClassName1
+     ,classInfoGetBaseClassName2
+     ,classInfoGetClassName
+     ,classInfoGetClassNameEx
+     ,classInfoGetSize
+     ,classInfoIsKindOf
+     ,classInfoIsKindOfEx
+     -- ** ClientDC
+     ,clientDCCreate
+     ,clientDCDelete
+     -- ** Clipboard
+     ,clipboardAddData
+     ,clipboardClear
+     ,clipboardClose
+     ,clipboardCreate
+     ,clipboardFlush
+     ,clipboardGetData
+     ,clipboardIsOpened
+     ,clipboardIsSupported
+     ,clipboardOpen
+     ,clipboardSetData
+     ,clipboardUsePrimarySelection
+     -- ** CloseEvent
+     ,closeEventCanVeto
+     ,closeEventCopyObject
+     ,closeEventGetLoggingOff
+     ,closeEventGetVeto
+     ,closeEventSetCanVeto
+     ,closeEventSetLoggingOff
+     ,closeEventVeto
+     -- ** Closure
+     ,closureCreate
+     ,closureGetData
+     -- ** ComboBox
+     ,comboBoxAppend
+     ,comboBoxAppendData
+     ,comboBoxClear
+     ,comboBoxCopy
+     ,comboBoxCreate
+     ,comboBoxCut
+     ,comboBoxDelete
+     ,comboBoxFindString
+     ,comboBoxGetClientData
+     ,comboBoxGetCount
+     ,comboBoxGetInsertionPoint
+     ,comboBoxGetLastPosition
+     ,comboBoxGetSelection
+     ,comboBoxGetString
+     ,comboBoxGetStringSelection
+     ,comboBoxGetValue
+     ,comboBoxPaste
+     ,comboBoxRemove
+     ,comboBoxReplace
+     ,comboBoxSetClientData
+     ,comboBoxSetEditable
+     ,comboBoxSetInsertionPoint
+     ,comboBoxSetInsertionPointEnd
+     ,comboBoxSetSelection
+     ,comboBoxSetTextSelection
+     ,comboBoxSetValue
+     -- ** CommandEvent
+     ,commandEventCopyObject
+     ,commandEventCreate
+     ,commandEventDelete
+     ,commandEventGetClientData
+     ,commandEventGetClientObject
+     ,commandEventGetExtraLong
+     ,commandEventGetInt
+     ,commandEventGetSelection
+     ,commandEventGetString
+     ,commandEventIsChecked
+     ,commandEventIsSelection
+     ,commandEventSetClientData
+     ,commandEventSetClientObject
+     ,commandEventSetExtraLong
+     ,commandEventSetInt
+     ,commandEventSetString
+     -- ** ConfigBase
+     ,configBaseCreate
+     ,configBaseDelete
+     ,configBaseDeleteAll
+     ,configBaseDeleteEntry
+     ,configBaseDeleteGroup
+     ,configBaseExists
+     ,configBaseExpandEnvVars
+     ,configBaseFlush
+     ,configBaseGet
+     ,configBaseGetAppName
+     ,configBaseGetEntryType
+     ,configBaseGetFirstEntry
+     ,configBaseGetFirstGroup
+     ,configBaseGetNextEntry
+     ,configBaseGetNextGroup
+     ,configBaseGetNumberOfEntries
+     ,configBaseGetNumberOfGroups
+     ,configBaseGetPath
+     ,configBaseGetStyle
+     ,configBaseGetVendorName
+     ,configBaseHasEntry
+     ,configBaseHasGroup
+     ,configBaseIsExpandingEnvVars
+     ,configBaseIsRecordingDefaults
+     ,configBaseReadBool
+     ,configBaseReadDouble
+     ,configBaseReadInteger
+     ,configBaseReadString
+     ,configBaseRenameEntry
+     ,configBaseRenameGroup
+     ,configBaseSet
+     ,configBaseSetAppName
+     ,configBaseSetExpandEnvVars
+     ,configBaseSetPath
+     ,configBaseSetRecordDefaults
+     ,configBaseSetStyle
+     ,configBaseSetVendorName
+     ,configBaseWriteBool
+     ,configBaseWriteDouble
+     ,configBaseWriteInteger
+     ,configBaseWriteLong
+     ,configBaseWriteString
+     -- ** ContextHelp
+     ,contextHelpBeginContextHelp
+     ,contextHelpCreate
+     ,contextHelpDelete
+     ,contextHelpEndContextHelp
+     -- ** ContextHelpButton
+     ,contextHelpButtonCreate
+     -- ** Control
+     ,controlCommand
+     ,controlGetLabel
+     ,controlSetLabel
+     -- ** Cursor
+     ,cursorDelete
+     ,cursorIsStatic
+     ,cursorSafeDelete
+     -- ** DC
+     ,dcBlit
+     ,dcCalcBoundingBox
+     ,dcCanDrawBitmap
+     ,dcCanGetTextExtent
+     ,dcClear
+     ,dcComputeScaleAndOrigin
+     ,dcCrossHair
+     ,dcDelete
+     ,dcDestroyClippingRegion
+     ,dcDeviceToLogicalX
+     ,dcDeviceToLogicalXRel
+     ,dcDeviceToLogicalY
+     ,dcDeviceToLogicalYRel
+     ,dcDrawArc
+     ,dcDrawBitmap
+     ,dcDrawCheckMark
+     ,dcDrawCircle
+     ,dcDrawEllipse
+     ,dcDrawEllipticArc
+     ,dcDrawIcon
+     ,dcDrawLabel
+     ,dcDrawLabelBitmap
+     ,dcDrawLine
+     ,dcDrawLines
+     ,dcDrawPoint
+     ,dcDrawPolyPolygon
+     ,dcDrawPolygon
+     ,dcDrawRectangle
+     ,dcDrawRotatedText
+     ,dcDrawRoundedRectangle
+     ,dcDrawText
+     ,dcEndDoc
+     ,dcEndPage
+     ,dcFloodFill
+     ,dcGetBackground
+     ,dcGetBackgroundMode
+     ,dcGetBrush
+     ,dcGetCharHeight
+     ,dcGetCharWidth
+     ,dcGetClippingBox
+     ,dcGetDepth
+     ,dcGetDeviceOrigin
+     ,dcGetFont
+     ,dcGetLogicalFunction
+     ,dcGetLogicalOrigin
+     ,dcGetLogicalScale
+     ,dcGetMapMode
+     ,dcGetMultiLineTextExtent
+     ,dcGetPPI
+     ,dcGetPen
+     ,dcGetPixel
+     ,dcGetPixel2
+     ,dcGetSize
+     ,dcGetSizeMM
+     ,dcGetTextBackground
+     ,dcGetTextExtent
+     ,dcGetTextForeground
+     ,dcGetUserScale
+     ,dcGetUserScaleX
+     ,dcGetUserScaleY
+     ,dcIsOk
+     ,dcLogicalToDeviceX
+     ,dcLogicalToDeviceXRel
+     ,dcLogicalToDeviceY
+     ,dcLogicalToDeviceYRel
+     ,dcMaxX
+     ,dcMaxY
+     ,dcMinX
+     ,dcMinY
+     ,dcResetBoundingBox
+     ,dcSetAxisOrientation
+     ,dcSetBackground
+     ,dcSetBackgroundMode
+     ,dcSetBrush
+     ,dcSetClippingRegion
+     ,dcSetClippingRegionFromRegion
+     ,dcSetDeviceClippingRegion
+     ,dcSetDeviceOrigin
+     ,dcSetFont
+     ,dcSetLogicalFunction
+     ,dcSetLogicalOrigin
+     ,dcSetLogicalScale
+     ,dcSetMapMode
+     ,dcSetPalette
+     ,dcSetPen
+     ,dcSetTextBackground
+     ,dcSetTextForeground
+     ,dcSetUserScale
+     ,dcStartDoc
+     ,dcStartPage
+     -- ** DataFormat
+     ,dataFormatCreateFromId
+     ,dataFormatCreateFromType
+     ,dataFormatDelete
+     ,dataFormatGetId
+     ,dataFormatGetType
+     ,dataFormatIsEqual
+     ,dataFormatSetId
+     ,dataFormatSetType
+     -- ** DataObjectComposite
+     ,dataObjectCompositeAdd
+     ,dataObjectCompositeCreate
+     ,dataObjectCompositeDelete
+     -- ** DateProperty
+     ,datePropertyCreate
+     -- ** DateTime
+     ,dateTimeAddDate
+     ,dateTimeAddDateValues
+     ,dateTimeAddTime
+     ,dateTimeAddTimeValues
+     ,dateTimeConvertYearToBC
+     ,dateTimeCreate
+     ,dateTimeDelete
+     ,dateTimeFormat
+     ,dateTimeFormatDate
+     ,dateTimeFormatISODate
+     ,dateTimeFormatISOTime
+     ,dateTimeFormatTime
+     ,dateTimeGetAmString
+     ,dateTimeGetBeginDST
+     ,dateTimeGetCentury
+     ,dateTimeGetCountry
+     ,dateTimeGetCurrentMonth
+     ,dateTimeGetCurrentYear
+     ,dateTimeGetDay
+     ,dateTimeGetDayOfYear
+     ,dateTimeGetEndDST
+     ,dateTimeGetHour
+     ,dateTimeGetLastMonthDay
+     ,dateTimeGetLastWeekDay
+     ,dateTimeGetMillisecond
+     ,dateTimeGetMinute
+     ,dateTimeGetMonth
+     ,dateTimeGetMonthName
+     ,dateTimeGetNextWeekDay
+     ,dateTimeGetNumberOfDays
+     ,dateTimeGetNumberOfDaysMonth
+     ,dateTimeGetPmString
+     ,dateTimeGetPrevWeekDay
+     ,dateTimeGetSecond
+     ,dateTimeGetTicks
+     ,dateTimeGetTimeNow
+     ,dateTimeGetValue
+     ,dateTimeGetWeekDay
+     ,dateTimeGetWeekDayInSameWeek
+     ,dateTimeGetWeekDayName
+     ,dateTimeGetWeekDayTZ
+     ,dateTimeGetWeekOfMonth
+     ,dateTimeGetWeekOfYear
+     ,dateTimeGetYear
+     ,dateTimeIsBetween
+     ,dateTimeIsDST
+     ,dateTimeIsDSTApplicable
+     ,dateTimeIsEarlierThan
+     ,dateTimeIsEqualTo
+     ,dateTimeIsEqualUpTo
+     ,dateTimeIsLaterThan
+     ,dateTimeIsLeapYear
+     ,dateTimeIsSameDate
+     ,dateTimeIsSameTime
+     ,dateTimeIsStrictlyBetween
+     ,dateTimeIsValid
+     ,dateTimeIsWestEuropeanCountry
+     ,dateTimeIsWorkDay
+     ,dateTimeMakeGMT
+     ,dateTimeMakeTimezone
+     ,dateTimeNow
+     ,dateTimeParseDate
+     ,dateTimeParseDateTime
+     ,dateTimeParseFormat
+     ,dateTimeParseRfc822Date
+     ,dateTimeParseTime
+     ,dateTimeResetTime
+     ,dateTimeSet
+     ,dateTimeSetCountry
+     ,dateTimeSetDay
+     ,dateTimeSetHour
+     ,dateTimeSetMillisecond
+     ,dateTimeSetMinute
+     ,dateTimeSetMonth
+     ,dateTimeSetSecond
+     ,dateTimeSetTime
+     ,dateTimeSetToCurrent
+     ,dateTimeSetToLastMonthDay
+     ,dateTimeSetToLastWeekDay
+     ,dateTimeSetToNextWeekDay
+     ,dateTimeSetToPrevWeekDay
+     ,dateTimeSetToWeekDay
+     ,dateTimeSetToWeekDayInSameWeek
+     ,dateTimeSetYear
+     ,dateTimeSubtractDate
+     ,dateTimeSubtractTime
+     ,dateTimeToGMT
+     ,dateTimeToTimezone
+     ,dateTimeToday
+     ,dateTimeUNow
+     ,dateTimewxDateTime
+     -- ** Dialog
+     ,dialogCreate
+     ,dialogEndModal
+     ,dialogGetReturnCode
+     ,dialogIsModal
+     ,dialogSetReturnCode
+     ,dialogShowModal
+     -- ** DirDialog
+     ,dirDialogCreate
+     ,dirDialogGetMessage
+     ,dirDialogGetPath
+     ,dirDialogGetStyle
+     ,dirDialogSetMessage
+     ,dirDialogSetPath
+     ,dirDialogSetStyle
+     -- ** DragImage
+     ,dragImageBeginDrag
+     ,dragImageBeginDragFullScreen
+     ,dragImageCreate
+     ,dragImageDelete
+     ,dragImageEndDrag
+     ,dragImageHide
+     ,dragImageMove
+     ,dragImageShow
+     -- ** DrawControl
+     ,drawControlCreate
+     -- ** DrawWindow
+     ,drawWindowCreate
+     -- ** DropTarget
+     ,dropTargetGetData
+     ,dropTargetSetDataObject
+     -- ** EncodingConverter
+     ,encodingConverterConvert
+     ,encodingConverterCreate
+     ,encodingConverterDelete
+     ,encodingConverterGetAllEquivalents
+     ,encodingConverterGetPlatformEquivalents
+     ,encodingConverterInit
+     -- ** EraseEvent
+     ,eraseEventCopyObject
+     ,eraseEventGetDC
+     -- ** Event
+     ,eventCopyObject
+     ,eventGetEventObject
+     ,eventGetEventType
+     ,eventGetId
+     ,eventGetSkipped
+     ,eventGetTimestamp
+     ,eventIsCommandEvent
+     ,eventNewEventType
+     ,eventSetEventObject
+     ,eventSetEventType
+     ,eventSetId
+     ,eventSetTimestamp
+     ,eventSkip
+     -- ** EvtHandler
+     ,evtHandlerAddPendingEvent
+     ,evtHandlerConnect
+     ,evtHandlerCreate
+     ,evtHandlerDelete
+     ,evtHandlerDisconnect
+     ,evtHandlerGetClientClosure
+     ,evtHandlerGetClosure
+     ,evtHandlerGetEvtHandlerEnabled
+     ,evtHandlerGetNextHandler
+     ,evtHandlerGetPreviousHandler
+     ,evtHandlerProcessEvent
+     ,evtHandlerProcessPendingEvents
+     ,evtHandlerSetClientClosure
+     ,evtHandlerSetEvtHandlerEnabled
+     ,evtHandlerSetNextHandler
+     ,evtHandlerSetPreviousHandler
+     -- ** FileConfig
+     ,fileConfigCreate
+     -- ** FileDialog
+     ,fileDialogCreate
+     ,fileDialogGetDirectory
+     ,fileDialogGetFilename
+     ,fileDialogGetFilenames
+     ,fileDialogGetFilterIndex
+     ,fileDialogGetMessage
+     ,fileDialogGetPath
+     ,fileDialogGetPaths
+     ,fileDialogGetStyle
+     ,fileDialogGetWildcard
+     ,fileDialogSetDirectory
+     ,fileDialogSetFilename
+     ,fileDialogSetFilterIndex
+     ,fileDialogSetMessage
+     ,fileDialogSetPath
+     ,fileDialogSetStyle
+     ,fileDialogSetWildcard
+     -- ** FileHistory
+     ,fileHistoryAddFileToHistory
+     ,fileHistoryAddFilesToMenu
+     ,fileHistoryCreate
+     ,fileHistoryDelete
+     ,fileHistoryGetCount
+     ,fileHistoryGetHistoryFile
+     ,fileHistoryGetMaxFiles
+     ,fileHistoryGetMenus
+     ,fileHistoryLoad
+     ,fileHistoryRemoveFileFromHistory
+     ,fileHistoryRemoveMenu
+     ,fileHistorySave
+     ,fileHistoryUseMenu
+     -- ** FileInputStream
+     ,fileInputStreamCreate
+     ,fileInputStreamDelete
+     ,fileInputStreamIsOk
+     -- ** FileOutputStream
+     ,fileOutputStreamCreate
+     ,fileOutputStreamDelete
+     ,fileOutputStreamIsOk
+     -- ** FileProperty
+     ,filePropertyCreate
+     -- ** FileType
+     ,fileTypeDelete
+     ,fileTypeExpandCommand
+     ,fileTypeGetDescription
+     ,fileTypeGetExtensions
+     ,fileTypeGetIcon
+     ,fileTypeGetMimeType
+     ,fileTypeGetMimeTypes
+     ,fileTypeGetOpenCommand
+     ,fileTypeGetPrintCommand
+     -- ** FindDialogEvent
+     ,findDialogEventGetFindString
+     ,findDialogEventGetFlags
+     ,findDialogEventGetReplaceString
+     -- ** FindReplaceData
+     ,findReplaceDataCreate
+     ,findReplaceDataCreateDefault
+     ,findReplaceDataDelete
+     ,findReplaceDataGetFindString
+     ,findReplaceDataGetFlags
+     ,findReplaceDataGetReplaceString
+     ,findReplaceDataSetFindString
+     ,findReplaceDataSetFlags
+     ,findReplaceDataSetReplaceString
+     -- ** FindReplaceDialog
+     ,findReplaceDialogCreate
+     ,findReplaceDialogGetData
+     ,findReplaceDialogSetData
+     -- ** FlexGridSizer
+     ,flexGridSizerAddGrowableCol
+     ,flexGridSizerAddGrowableRow
+     ,flexGridSizerCalcMin
+     ,flexGridSizerCreate
+     ,flexGridSizerRecalcSizes
+     ,flexGridSizerRemoveGrowableCol
+     ,flexGridSizerRemoveGrowableRow
+     -- ** FloatProperty
+     ,floatPropertyCreate
+     -- ** Font
+     ,fontCreate
+     ,fontCreateDefault
+     ,fontCreateFromStock
+     ,fontDelete
+     ,fontGetDefaultEncoding
+     ,fontGetEncoding
+     ,fontGetFaceName
+     ,fontGetFamily
+     ,fontGetFamilyString
+     ,fontGetPointSize
+     ,fontGetStyle
+     ,fontGetStyleString
+     ,fontGetUnderlined
+     ,fontGetWeight
+     ,fontGetWeightString
+     ,fontIsOk
+     ,fontIsStatic
+     ,fontSafeDelete
+     ,fontSetDefaultEncoding
+     ,fontSetEncoding
+     ,fontSetFaceName
+     ,fontSetFamily
+     ,fontSetPointSize
+     ,fontSetStyle
+     ,fontSetUnderlined
+     ,fontSetWeight
+     -- ** FontData
+     ,fontDataCreate
+     ,fontDataDelete
+     ,fontDataEnableEffects
+     ,fontDataGetAllowSymbols
+     ,fontDataGetChosenFont
+     ,fontDataGetColour
+     ,fontDataGetEnableEffects
+     ,fontDataGetEncoding
+     ,fontDataGetInitialFont
+     ,fontDataGetShowHelp
+     ,fontDataSetAllowSymbols
+     ,fontDataSetChosenFont
+     ,fontDataSetColour
+     ,fontDataSetEncoding
+     ,fontDataSetInitialFont
+     ,fontDataSetRange
+     ,fontDataSetShowHelp
+     -- ** FontDialog
+     ,fontDialogCreate
+     ,fontDialogGetFontData
+     -- ** FontEnumerator
+     ,fontEnumeratorCreate
+     ,fontEnumeratorDelete
+     ,fontEnumeratorEnumerateEncodings
+     ,fontEnumeratorEnumerateFacenames
+     -- ** FontMapper
+     ,fontMapperCreate
+     ,fontMapperGetAltForEncoding
+     ,fontMapperIsEncodingAvailable
+     -- ** Frame
+     ,frameCentre
+     ,frameCreate
+     ,frameCreateStatusBar
+     ,frameCreateToolBar
+     ,frameGetClientAreaOriginleft
+     ,frameGetClientAreaOrigintop
+     ,frameGetMenuBar
+     ,frameGetStatusBar
+     ,frameGetTitle
+     ,frameGetToolBar
+     ,frameIsFullScreen
+     ,frameRestore
+     ,frameSetMenuBar
+     ,frameSetShape
+     ,frameSetStatusBar
+     ,frameSetStatusText
+     ,frameSetStatusWidths
+     ,frameSetTitle
+     ,frameSetToolBar
+     ,frameShowFullScreen
+     -- ** GLCanvas
+     ,glCanvasCreate
+     ,glCanvasIsDisplaySupported
+     ,glCanvasIsExtensionSupported
+     ,glCanvasSetColour
+     ,glCanvasSetCurrent
+     ,glCanvasSwapBuffers
+     -- ** GLContext
+     ,glContextCreate
+     ,glContextCreateFromNull
+     ,glContextSetCurrent
+     -- ** Gauge
+     ,gaugeCreate
+     ,gaugeGetBezelFace
+     ,gaugeGetRange
+     ,gaugeGetShadowWidth
+     ,gaugeGetValue
+     ,gaugeSetBezelFace
+     ,gaugeSetRange
+     ,gaugeSetShadowWidth
+     ,gaugeSetValue
+     -- ** GenericDragImage
+     ,genericDragImageCreate
+     ,genericDragImageDoDrawImage
+     ,genericDragImageGetImageRect
+     ,genericDragImageUpdateBackingFromWindow
+     -- ** GraphicsBrush
+     ,graphicsBrushCreate
+     ,graphicsBrushDelete
+     -- ** GraphicsContext
+     ,graphicsContextClip
+     ,graphicsContextClipByRectangle
+     ,graphicsContextConcatTransform
+     ,graphicsContextCreate
+     ,graphicsContextCreateDefaultMatrix
+     ,graphicsContextCreateFromMemory
+     ,graphicsContextCreateFromNative
+     ,graphicsContextCreateFromNativeWindow
+     ,graphicsContextCreateFromPrinter
+     ,graphicsContextCreateFromWindow
+     ,graphicsContextCreateMatrix
+     ,graphicsContextCreatePath
+     ,graphicsContextDelete
+     ,graphicsContextDrawBitmap
+     ,graphicsContextDrawEllipse
+     ,graphicsContextDrawIcon
+     ,graphicsContextDrawLines
+     ,graphicsContextDrawPath
+     ,graphicsContextDrawRectangle
+     ,graphicsContextDrawRoundedRectangle
+     ,graphicsContextDrawText
+     ,graphicsContextDrawTextWithAngle
+     ,graphicsContextFillPath
+     ,graphicsContextGetNativeContext
+     ,graphicsContextGetTextExtent
+     ,graphicsContextPopState
+     ,graphicsContextPushState
+     ,graphicsContextResetClip
+     ,graphicsContextRotate
+     ,graphicsContextScale
+     ,graphicsContextSetBrush
+     ,graphicsContextSetFont
+     ,graphicsContextSetGraphicsBrush
+     ,graphicsContextSetGraphicsFont
+     ,graphicsContextSetGraphicsPen
+     ,graphicsContextSetPen
+     ,graphicsContextSetTransform
+     ,graphicsContextStrokeLine
+     ,graphicsContextStrokeLines
+     ,graphicsContextStrokePath
+     ,graphicsContextTranslate
+     -- ** GraphicsFont
+     ,graphicsFontCreate
+     ,graphicsFontDelete
+     -- ** GraphicsMatrix
+     ,graphicsMatrixConcat
+     ,graphicsMatrixCreate
+     ,graphicsMatrixDelete
+     ,graphicsMatrixGet
+     ,graphicsMatrixGetNativeMatrix
+     ,graphicsMatrixInvert
+     ,graphicsMatrixIsEqual
+     ,graphicsMatrixIsIdentity
+     ,graphicsMatrixRotate
+     ,graphicsMatrixScale
+     ,graphicsMatrixSet
+     ,graphicsMatrixTransformDistance
+     ,graphicsMatrixTransformPoint
+     ,graphicsMatrixTranslate
+     -- ** GraphicsObject
+     ,graphicsObjectGetRenderer
+     ,graphicsObjectIsNull
+     -- ** GraphicsPath
+     ,graphicsPathAddArc
+     ,graphicsPathAddArcToPoint
+     ,graphicsPathAddCircle
+     ,graphicsPathAddCurveToPoint
+     ,graphicsPathAddEllipse
+     ,graphicsPathAddLineToPoint
+     ,graphicsPathAddPath
+     ,graphicsPathAddQuadCurveToPoint
+     ,graphicsPathAddRectangle
+     ,graphicsPathAddRoundedRectangle
+     ,graphicsPathCloseSubpath
+     ,graphicsPathContains
+     ,graphicsPathDelete
+     ,graphicsPathGetBox
+     ,graphicsPathGetCurrentPoint
+     ,graphicsPathGetNativePath
+     ,graphicsPathMoveToPoint
+     ,graphicsPathTransform
+     ,graphicsPathUnGetNativePath
+     -- ** GraphicsPen
+     ,graphicsPenCreate
+     ,graphicsPenDelete
+     -- ** GraphicsRenderer
+     ,graphicsRendererCreateContext
+     ,graphicsRendererCreateContextFromNativeContext
+     ,graphicsRendererCreateContextFromNativeWindow
+     ,graphicsRendererCreateContextFromWindow
+     ,graphicsRendererCreatePath
+     ,graphicsRendererDelete
+     ,graphicsRendererGetDefaultRenderer
+     -- ** Grid
+     ,gridAppendCols
+     ,gridAppendRows
+     ,gridAutoSize
+     ,gridAutoSizeColumn
+     ,gridAutoSizeColumns
+     ,gridAutoSizeRow
+     ,gridAutoSizeRows
+     ,gridBeginBatch
+     ,gridBlockToDeviceRect
+     ,gridCanDragColSize
+     ,gridCanDragGridSize
+     ,gridCanDragRowSize
+     ,gridCanEnableCellControl
+     ,gridCellToRect
+     ,gridClearGrid
+     ,gridClearSelection
+     ,gridCreate
+     ,gridCreateGrid
+     ,gridDeleteCols
+     ,gridDeleteRows
+     ,gridDisableCellEditControl
+     ,gridDisableDragColSize
+     ,gridDisableDragGridSize
+     ,gridDisableDragRowSize
+     ,gridDrawAllGridLines
+     ,gridDrawCell
+     ,gridDrawCellBorder
+     ,gridDrawCellHighlight
+     ,gridDrawColLabel
+     ,gridDrawColLabels
+     ,gridDrawGridSpace
+     ,gridDrawRowLabel
+     ,gridDrawRowLabels
+     ,gridDrawTextRectangle
+     ,gridEnableCellEditControl
+     ,gridEnableDragColSize
+     ,gridEnableDragGridSize
+     ,gridEnableDragRowSize
+     ,gridEnableEditing
+     ,gridEnableGridLines
+     ,gridEndBatch
+     ,gridGetBatchCount
+     ,gridGetCellAlignment
+     ,gridGetCellBackgroundColour
+     ,gridGetCellEditor
+     ,gridGetCellFont
+     ,gridGetCellHighlightColour
+     ,gridGetCellRenderer
+     ,gridGetCellSize
+     ,gridGetCellTextColour
+     ,gridGetCellValue
+     ,gridGetColLabelAlignment
+     ,gridGetColLabelSize
+     ,gridGetColLabelValue
+     ,gridGetColSize
+     ,gridGetDefaultCellAlignment
+     ,gridGetDefaultCellBackgroundColour
+     ,gridGetDefaultCellFont
+     ,gridGetDefaultCellTextColour
+     ,gridGetDefaultColLabelSize
+     ,gridGetDefaultColSize
+     ,gridGetDefaultEditor
+     ,gridGetDefaultEditorForCell
+     ,gridGetDefaultEditorForType
+     ,gridGetDefaultRenderer
+     ,gridGetDefaultRendererForCell
+     ,gridGetDefaultRendererForType
+     ,gridGetDefaultRowLabelSize
+     ,gridGetDefaultRowSize
+     ,gridGetGridCursorCol
+     ,gridGetGridCursorRow
+     ,gridGetGridLineColour
+     ,gridGetLabelBackgroundColour
+     ,gridGetLabelFont
+     ,gridGetLabelTextColour
+     ,gridGetNumberCols
+     ,gridGetNumberRows
+     ,gridGetRowLabelAlignment
+     ,gridGetRowLabelSize
+     ,gridGetRowLabelValue
+     ,gridGetRowSize
+     ,gridGetSelectedCells
+     ,gridGetSelectedCols
+     ,gridGetSelectedRows
+     ,gridGetSelectionBackground
+     ,gridGetSelectionBlockBottomRight
+     ,gridGetSelectionBlockTopLeft
+     ,gridGetSelectionForeground
+     ,gridGetTable
+     ,gridGetTextBoxSize
+     ,gridGridLinesEnabled
+     ,gridHideCellEditControl
+     ,gridInsertCols
+     ,gridInsertRows
+     ,gridIsCellEditControlEnabled
+     ,gridIsCellEditControlShown
+     ,gridIsCurrentCellReadOnly
+     ,gridIsEditable
+     ,gridIsInSelection
+     ,gridIsReadOnly
+     ,gridIsSelection
+     ,gridIsVisible
+     ,gridMakeCellVisible
+     ,gridMoveCursorDown
+     ,gridMoveCursorDownBlock
+     ,gridMoveCursorLeft
+     ,gridMoveCursorLeftBlock
+     ,gridMoveCursorRight
+     ,gridMoveCursorRightBlock
+     ,gridMoveCursorUp
+     ,gridMoveCursorUpBlock
+     ,gridMovePageDown
+     ,gridMovePageUp
+     ,gridProcessTableMessage
+     ,gridRegisterDataType
+     ,gridSaveEditControlValue
+     ,gridSelectAll
+     ,gridSelectBlock
+     ,gridSelectCol
+     ,gridSelectRow
+     ,gridSetCellAlignment
+     ,gridSetCellBackgroundColour
+     ,gridSetCellEditor
+     ,gridSetCellFont
+     ,gridSetCellHighlightColour
+     ,gridSetCellRenderer
+     ,gridSetCellSize
+     ,gridSetCellTextColour
+     ,gridSetCellValue
+     ,gridSetColAttr
+     ,gridSetColFormatBool
+     ,gridSetColFormatCustom
+     ,gridSetColFormatFloat
+     ,gridSetColFormatNumber
+     ,gridSetColLabelAlignment
+     ,gridSetColLabelSize
+     ,gridSetColLabelValue
+     ,gridSetColMinimalWidth
+     ,gridSetColSize
+     ,gridSetDefaultCellAlignment
+     ,gridSetDefaultCellBackgroundColour
+     ,gridSetDefaultCellFont
+     ,gridSetDefaultCellTextColour
+     ,gridSetDefaultColSize
+     ,gridSetDefaultEditor
+     ,gridSetDefaultRenderer
+     ,gridSetDefaultRowSize
+     ,gridSetGridCursor
+     ,gridSetGridLineColour
+     ,gridSetLabelBackgroundColour
+     ,gridSetLabelFont
+     ,gridSetLabelTextColour
+     ,gridSetMargins
+     ,gridSetReadOnly
+     ,gridSetRowAttr
+     ,gridSetRowLabelAlignment
+     ,gridSetRowLabelSize
+     ,gridSetRowLabelValue
+     ,gridSetRowMinimalHeight
+     ,gridSetRowSize
+     ,gridSetSelectionBackground
+     ,gridSetSelectionForeground
+     ,gridSetSelectionMode
+     ,gridSetTable
+     ,gridShowCellEditControl
+     ,gridStringToLines
+     ,gridXToCol
+     ,gridXToEdgeOfCol
+     ,gridXYToCell
+     ,gridYToEdgeOfRow
+     ,gridYToRow
+     -- ** GridCellAttr
+     ,gridCellAttrCtor
+     ,gridCellAttrDecRef
+     ,gridCellAttrGetAlignment
+     ,gridCellAttrGetBackgroundColour
+     ,gridCellAttrGetEditor
+     ,gridCellAttrGetFont
+     ,gridCellAttrGetRenderer
+     ,gridCellAttrGetTextColour
+     ,gridCellAttrHasAlignment
+     ,gridCellAttrHasBackgroundColour
+     ,gridCellAttrHasEditor
+     ,gridCellAttrHasFont
+     ,gridCellAttrHasRenderer
+     ,gridCellAttrHasTextColour
+     ,gridCellAttrIncRef
+     ,gridCellAttrIsReadOnly
+     ,gridCellAttrSetAlignment
+     ,gridCellAttrSetBackgroundColour
+     ,gridCellAttrSetDefAttr
+     ,gridCellAttrSetEditor
+     ,gridCellAttrSetFont
+     ,gridCellAttrSetReadOnly
+     ,gridCellAttrSetRenderer
+     ,gridCellAttrSetTextColour
+     -- ** GridCellAutoWrapStringRenderer
+     ,gridCellAutoWrapStringRendererCtor
+     -- ** GridCellBoolEditor
+     ,gridCellBoolEditorCtor
+     -- ** GridCellChoiceEditor
+     ,gridCellChoiceEditorCtor
+     -- ** GridCellCoordsArray
+     ,gridCellCoordsArrayCreate
+     ,gridCellCoordsArrayDelete
+     ,gridCellCoordsArrayGetCount
+     ,gridCellCoordsArrayItem
+     -- ** GridCellEditor
+     ,gridCellEditorBeginEdit
+     ,gridCellEditorCreate
+     ,gridCellEditorDestroy
+     ,gridCellEditorEndEdit
+     ,gridCellEditorGetControl
+     ,gridCellEditorHandleReturn
+     ,gridCellEditorIsAcceptedKey
+     ,gridCellEditorIsCreated
+     ,gridCellEditorPaintBackground
+     ,gridCellEditorReset
+     ,gridCellEditorSetControl
+     ,gridCellEditorSetParameters
+     ,gridCellEditorSetSize
+     ,gridCellEditorShow
+     ,gridCellEditorStartingClick
+     ,gridCellEditorStartingKey
+     -- ** GridCellFloatEditor
+     ,gridCellFloatEditorCtor
+     -- ** GridCellNumberEditor
+     ,gridCellNumberEditorCtor
+     -- ** GridCellNumberRenderer
+     ,gridCellNumberRendererCtor
+     -- ** GridCellTextEditor
+     ,gridCellTextEditorCtor
+     -- ** GridCellTextEnterEditor
+     ,gridCellTextEnterEditorCtor
+     -- ** GridEditorCreatedEvent
+     ,gridEditorCreatedEventGetCol
+     ,gridEditorCreatedEventGetControl
+     ,gridEditorCreatedEventGetRow
+     ,gridEditorCreatedEventSetCol
+     ,gridEditorCreatedEventSetControl
+     ,gridEditorCreatedEventSetRow
+     -- ** GridEvent
+     ,gridEventAltDown
+     ,gridEventControlDown
+     ,gridEventGetCol
+     ,gridEventGetPosition
+     ,gridEventGetRow
+     ,gridEventMetaDown
+     ,gridEventSelecting
+     ,gridEventShiftDown
+     -- ** GridRangeSelectEvent
+     ,gridRangeSelectEventAltDown
+     ,gridRangeSelectEventControlDown
+     ,gridRangeSelectEventGetBottomRightCoords
+     ,gridRangeSelectEventGetBottomRow
+     ,gridRangeSelectEventGetLeftCol
+     ,gridRangeSelectEventGetRightCol
+     ,gridRangeSelectEventGetTopLeftCoords
+     ,gridRangeSelectEventGetTopRow
+     ,gridRangeSelectEventMetaDown
+     ,gridRangeSelectEventSelecting
+     ,gridRangeSelectEventShiftDown
+     -- ** GridSizeEvent
+     ,gridSizeEventAltDown
+     ,gridSizeEventControlDown
+     ,gridSizeEventGetPosition
+     ,gridSizeEventGetRowOrCol
+     ,gridSizeEventMetaDown
+     ,gridSizeEventShiftDown
+     -- ** GridSizer
+     ,gridSizerCalcMin
+     ,gridSizerCreate
+     ,gridSizerGetCols
+     ,gridSizerGetHGap
+     ,gridSizerGetRows
+     ,gridSizerGetVGap
+     ,gridSizerRecalcSizes
+     ,gridSizerSetCols
+     ,gridSizerSetHGap
+     ,gridSizerSetRows
+     ,gridSizerSetVGap
+     -- ** HelpControllerHelpProvider
+     ,helpControllerHelpProviderCreate
+     ,helpControllerHelpProviderGetHelpController
+     ,helpControllerHelpProviderSetHelpController
+     -- ** HelpEvent
+     ,helpEventGetLink
+     ,helpEventGetPosition
+     ,helpEventGetTarget
+     ,helpEventSetLink
+     ,helpEventSetPosition
+     ,helpEventSetTarget
+     -- ** HelpProvider
+     ,helpProviderAddHelp
+     ,helpProviderAddHelpById
+     ,helpProviderDelete
+     ,helpProviderGet
+     ,helpProviderGetHelp
+     ,helpProviderRemoveHelp
+     ,helpProviderSet
+     ,helpProviderShowHelp
+     -- ** HtmlHelpController
+     ,htmlHelpControllerAddBook
+     ,htmlHelpControllerCreate
+     ,htmlHelpControllerDelete
+     ,htmlHelpControllerDisplay
+     ,htmlHelpControllerDisplayBlock
+     ,htmlHelpControllerDisplayContents
+     ,htmlHelpControllerDisplayIndex
+     ,htmlHelpControllerDisplayNumber
+     ,htmlHelpControllerDisplaySection
+     ,htmlHelpControllerDisplaySectionNumber
+     ,htmlHelpControllerGetFrame
+     ,htmlHelpControllerGetFrameParameters
+     ,htmlHelpControllerInitialize
+     ,htmlHelpControllerKeywordSearch
+     ,htmlHelpControllerLoadFile
+     ,htmlHelpControllerQuit
+     ,htmlHelpControllerReadCustomization
+     ,htmlHelpControllerSetFrameParameters
+     ,htmlHelpControllerSetTempDir
+     ,htmlHelpControllerSetTitleFormat
+     ,htmlHelpControllerSetViewer
+     ,htmlHelpControllerUseConfig
+     ,htmlHelpControllerWriteCustomization
+     -- ** HtmlWindow
+     ,htmlWindowAppendToPage
+     ,htmlWindowCreate
+     ,htmlWindowGetInternalRepresentation
+     ,htmlWindowGetOpenedAnchor
+     ,htmlWindowGetOpenedPage
+     ,htmlWindowGetOpenedPageTitle
+     ,htmlWindowGetRelatedFrame
+     ,htmlWindowHistoryBack
+     ,htmlWindowHistoryCanBack
+     ,htmlWindowHistoryCanForward
+     ,htmlWindowHistoryClear
+     ,htmlWindowHistoryForward
+     ,htmlWindowLoadPage
+     ,htmlWindowReadCustomization
+     ,htmlWindowSetBorders
+     ,htmlWindowSetFonts
+     ,htmlWindowSetPage
+     ,htmlWindowSetRelatedFrame
+     ,htmlWindowSetRelatedStatusBar
+     ,htmlWindowWriteCustomization
+     -- ** HyperlinkCtrl
+     ,hyperlinkCtrlCreate
+     ,hyperlinkCtrlGetHoverColour
+     ,hyperlinkCtrlGetNormalColour
+     ,hyperlinkCtrlGetURL
+     ,hyperlinkCtrlGetVisited
+     ,hyperlinkCtrlGetVisitedColour
+     ,hyperlinkCtrlSetHoverColour
+     ,hyperlinkCtrlSetNormalColour
+     ,hyperlinkCtrlSetURL
+     ,hyperlinkCtrlSetVisited
+     ,hyperlinkCtrlSetVisitedColour
+     -- ** Icon
+     ,iconAssign
+     ,iconCopyFromBitmap
+     ,iconCreateDefault
+     ,iconCreateLoad
+     ,iconDelete
+     ,iconFromRaw
+     ,iconFromXPM
+     ,iconGetDepth
+     ,iconGetHeight
+     ,iconGetWidth
+     ,iconIsEqual
+     ,iconIsOk
+     ,iconIsStatic
+     ,iconLoad
+     ,iconSafeDelete
+     ,iconSetDepth
+     ,iconSetHeight
+     ,iconSetWidth
+     -- ** IconBundle
+     ,iconBundleAddIcon
+     ,iconBundleAddIconFromFile
+     ,iconBundleCreateDefault
+     ,iconBundleCreateFromFile
+     ,iconBundleCreateFromIcon
+     ,iconBundleDelete
+     ,iconBundleGetIcon
+     -- ** IdleEvent
+     ,idleEventCopyObject
+     ,idleEventMoreRequested
+     ,idleEventRequestMore
+     -- ** Image
+     ,imageCanRead
+     ,imageConvertToBitmap
+     ,imageConvertToByteString
+     ,imageConvertToLazyByteString
+     ,imageCopy
+     ,imageCountColours
+     ,imageCreateDefault
+     ,imageCreateFromBitmap
+     ,imageCreateFromByteString
+     ,imageCreateFromData
+     ,imageCreateFromDataEx
+     ,imageCreateFromFile
+     ,imageCreateFromLazyByteString
+     ,imageCreateSized
+     ,imageDelete
+     ,imageDestroy
+     ,imageGetBlue
+     ,imageGetData
+     ,imageGetGreen
+     ,imageGetHeight
+     ,imageGetMaskBlue
+     ,imageGetMaskGreen
+     ,imageGetMaskRed
+     ,imageGetOption
+     ,imageGetOptionInt
+     ,imageGetRed
+     ,imageGetSubImage
+     ,imageGetType
+     ,imageGetWidth
+     ,imageHasMask
+     ,imageHasOption
+     ,imageInitialize
+     ,imageInitializeFromData
+     ,imageIsOk
+     ,imageLoadFile
+     ,imageLoadStream
+     ,imageMirror
+     ,imagePaste
+     ,imageReplace
+     ,imageRescale
+     ,imageRescaleEx
+     ,imageRotate
+     ,imageRotate90
+     ,imageSaveFile
+     ,imageSaveStream
+     ,imageScale
+     ,imageScaleEx
+     ,imageSetData
+     ,imageSetDataAndSize
+     ,imageSetMask
+     ,imageSetMaskColour
+     ,imageSetOption
+     ,imageSetOptionInt
+     ,imageSetRGB
+     ,imageSetType
+     -- ** ImageList
+     ,imageListAddBitmap
+     ,imageListAddIcon
+     ,imageListAddMasked
+     ,imageListCreate
+     ,imageListDelete
+     ,imageListDraw
+     ,imageListGetImageCount
+     ,imageListGetSize
+     ,imageListRemove
+     ,imageListRemoveAll
+     ,imageListReplace
+     ,imageListReplaceIcon
+     -- ** IndividualLayoutConstraint
+     ,individualLayoutConstraintAbove
+     ,individualLayoutConstraintAbsolute
+     ,individualLayoutConstraintAsIs
+     ,individualLayoutConstraintBelow
+     ,individualLayoutConstraintGetDone
+     ,individualLayoutConstraintGetEdge
+     ,individualLayoutConstraintGetMargin
+     ,individualLayoutConstraintGetMyEdge
+     ,individualLayoutConstraintGetOtherEdge
+     ,individualLayoutConstraintGetOtherWindow
+     ,individualLayoutConstraintGetPercent
+     ,individualLayoutConstraintGetRelationship
+     ,individualLayoutConstraintGetValue
+     ,individualLayoutConstraintLeftOf
+     ,individualLayoutConstraintPercentOf
+     ,individualLayoutConstraintResetIfWin
+     ,individualLayoutConstraintRightOf
+     ,individualLayoutConstraintSameAs
+     ,individualLayoutConstraintSatisfyConstraint
+     ,individualLayoutConstraintSet
+     ,individualLayoutConstraintSetDone
+     ,individualLayoutConstraintSetEdge
+     ,individualLayoutConstraintSetMargin
+     ,individualLayoutConstraintSetRelationship
+     ,individualLayoutConstraintSetValue
+     ,individualLayoutConstraintUnconstrained
+     -- ** InputSink
+     ,inputSinkCreate
+     ,inputSinkGetId
+     ,inputSinkStart
+     -- ** InputSinkEvent
+     ,inputSinkEventLastError
+     ,inputSinkEventLastInput
+     ,inputSinkEventLastRead
+     -- ** InputStream
+     ,inputStreamCanRead
+     ,inputStreamDelete
+     ,inputStreamEof
+     ,inputStreamGetC
+     ,inputStreamLastRead
+     ,inputStreamPeek
+     ,inputStreamRead
+     ,inputStreamSeekI
+     ,inputStreamTell
+     ,inputStreamUngetBuffer
+     ,inputStreamUngetch
+     -- ** IntProperty
+     ,intPropertyCreate
+     -- ** KeyEvent
+     ,keyEventAltDown
+     ,keyEventControlDown
+     ,keyEventCopyObject
+     ,keyEventGetKeyCode
+     ,keyEventGetModifiers
+     ,keyEventGetPosition
+     ,keyEventGetX
+     ,keyEventGetY
+     ,keyEventHasModifiers
+     ,keyEventMetaDown
+     ,keyEventSetKeyCode
+     ,keyEventShiftDown
+     -- ** LayoutAlgorithm
+     ,layoutAlgorithmCreate
+     ,layoutAlgorithmDelete
+     ,layoutAlgorithmLayoutFrame
+     ,layoutAlgorithmLayoutMDIFrame
+     ,layoutAlgorithmLayoutWindow
+     -- ** LayoutConstraints
+     ,layoutConstraintsCreate
+     ,layoutConstraintsbottom
+     ,layoutConstraintscentreX
+     ,layoutConstraintscentreY
+     ,layoutConstraintsheight
+     ,layoutConstraintsleft
+     ,layoutConstraintsright
+     ,layoutConstraintstop
+     ,layoutConstraintswidth
+     -- ** ListBox
+     ,listBoxAppend
+     ,listBoxAppendData
+     ,listBoxClear
+     ,listBoxCreate
+     ,listBoxDelete
+     ,listBoxFindString
+     ,listBoxGetClientData
+     ,listBoxGetCount
+     ,listBoxGetSelection
+     ,listBoxGetSelections
+     ,listBoxGetString
+     ,listBoxInsertItems
+     ,listBoxIsSelected
+     ,listBoxSetClientData
+     ,listBoxSetFirstItem
+     ,listBoxSetSelection
+     ,listBoxSetString
+     ,listBoxSetStringSelection
+     -- ** ListCtrl
+     ,listCtrlArrange
+     ,listCtrlAssignImageList
+     ,listCtrlClearAll
+     ,listCtrlCreate
+     ,listCtrlDeleteAllColumns
+     ,listCtrlDeleteAllItems
+     ,listCtrlDeleteColumn
+     ,listCtrlDeleteItem
+     ,listCtrlEditLabel
+     ,listCtrlEndEditLabel
+     ,listCtrlEnsureVisible
+     ,listCtrlFindItem
+     ,listCtrlFindItemByData
+     ,listCtrlFindItemByPosition
+     ,listCtrlGetColumn
+     ,listCtrlGetColumn2
+     ,listCtrlGetColumnCount
+     ,listCtrlGetColumnWidth
+     ,listCtrlGetCountPerPage
+     ,listCtrlGetEditControl
+     ,listCtrlGetImageList
+     ,listCtrlGetItem
+     ,listCtrlGetItem2
+     ,listCtrlGetItemCount
+     ,listCtrlGetItemData
+     ,listCtrlGetItemFont
+     ,listCtrlGetItemPosition
+     ,listCtrlGetItemPosition2
+     ,listCtrlGetItemRect
+     ,listCtrlGetItemSpacing
+     ,listCtrlGetItemState
+     ,listCtrlGetItemText
+     ,listCtrlGetNextItem
+     ,listCtrlGetSelectedItemCount
+     ,listCtrlGetTextColour
+     ,listCtrlGetTopItem
+     ,listCtrlHitTest
+     ,listCtrlInsertColumn
+     ,listCtrlInsertColumnFromInfo
+     ,listCtrlInsertItem
+     ,listCtrlInsertItemWithData
+     ,listCtrlInsertItemWithImage
+     ,listCtrlInsertItemWithLabel
+     ,listCtrlIsVirtual
+     ,listCtrlRefreshItem
+     ,listCtrlScrollList
+     ,listCtrlSetBackgroundColour
+     ,listCtrlSetColumn
+     ,listCtrlSetColumnWidth
+     ,listCtrlSetForegroundColour
+     ,listCtrlSetImageList
+     ,listCtrlSetItem
+     ,listCtrlSetItemData
+     ,listCtrlSetItemFromInfo
+     ,listCtrlSetItemImage
+     ,listCtrlSetItemPosition
+     ,listCtrlSetItemState
+     ,listCtrlSetItemText
+     ,listCtrlSetSingleStyle
+     ,listCtrlSetTextColour
+     ,listCtrlSetWindowStyleFlag
+     ,listCtrlSortItems
+     ,listCtrlSortItems2
+     ,listCtrlUpdateStyle
+     -- ** ListEvent
+     ,listEventCancelled
+     ,listEventGetCacheFrom
+     ,listEventGetCacheTo
+     ,listEventGetCode
+     ,listEventGetColumn
+     ,listEventGetData
+     ,listEventGetImage
+     ,listEventGetIndex
+     ,listEventGetItem
+     ,listEventGetLabel
+     ,listEventGetMask
+     ,listEventGetPoint
+     ,listEventGetText
+     -- ** ListItem
+     ,listItemClear
+     ,listItemClearAttributes
+     ,listItemCreate
+     ,listItemDelete
+     ,listItemGetAlign
+     ,listItemGetAttributes
+     ,listItemGetBackgroundColour
+     ,listItemGetColumn
+     ,listItemGetData
+     ,listItemGetFont
+     ,listItemGetId
+     ,listItemGetImage
+     ,listItemGetMask
+     ,listItemGetState
+     ,listItemGetText
+     ,listItemGetTextColour
+     ,listItemGetWidth
+     ,listItemHasAttributes
+     ,listItemSetAlign
+     ,listItemSetBackgroundColour
+     ,listItemSetColumn
+     ,listItemSetData
+     ,listItemSetDataPointer
+     ,listItemSetFont
+     ,listItemSetId
+     ,listItemSetImage
+     ,listItemSetMask
+     ,listItemSetState
+     ,listItemSetStateMask
+     ,listItemSetText
+     ,listItemSetTextColour
+     ,listItemSetWidth
+     -- ** Locale
+     ,localeAddCatalog
+     ,localeAddCatalogLookupPathPrefix
+     ,localeCreate
+     ,localeDelete
+     ,localeGetLocale
+     ,localeGetName
+     ,localeGetString
+     ,localeIsLoaded
+     ,localeIsOk
+     -- ** Log
+     ,logAddTraceMask
+     ,logDelete
+     ,logDontCreateOnDemand
+     ,logFlush
+     ,logFlushActive
+     ,logGetActiveTarget
+     ,logGetTimestamp
+     ,logGetVerbose
+     ,logHasPendingMessages
+     ,logIsAllowedTraceMask
+     ,logOnLog
+     ,logRemoveTraceMask
+     ,logResume
+     ,logSetActiveTarget
+     ,logSetTimestamp
+     ,logSetVerbose
+     ,logSuspend
+     -- ** LogChain
+     ,logChainCreate
+     ,logChainDelete
+     ,logChainGetOldLog
+     ,logChainIsPassingMessages
+     ,logChainPassMessages
+     ,logChainSetLog
+     -- ** LogNull
+     ,logNullCreate
+     -- ** LogStderr
+     ,logStderrCreate
+     ,logStderrCreateStdOut
+     -- ** LogTextCtrl
+     ,logTextCtrlCreate
+     -- ** LogWindow
+     ,logWindowCreate
+     ,logWindowGetFrame
+    ) where
+
+import Prelude hiding (id, last, length, lines, max, min, show)
+import qualified Data.ByteString as B (ByteString, useAsCStringLen)
+import qualified Data.ByteString.Lazy as LB (ByteString, length, unpack)
+import Graphics.UI.WXCore.WxcTypes hiding (rect, rgb, rgba, sz)
+import Graphics.UI.WXCore.WxcClassTypes
+
+-- | usage: (@acceleratorEntryCreate flags keyCode cmd@).
+acceleratorEntryCreate :: Int -> Int -> Int ->  IO (AcceleratorEntry  ())
+acceleratorEntryCreate flags keyCode cmd 
+  = withObjectResult $
+    wxAcceleratorEntry_Create (toCInt flags)  (toCInt keyCode)  (toCInt cmd)  
+foreign import ccall "wxAcceleratorEntry_Create" wxAcceleratorEntry_Create :: CInt -> CInt -> CInt -> IO (Ptr (TAcceleratorEntry ()))
+
+-- | usage: (@acceleratorEntryDelete obj@).
+acceleratorEntryDelete :: AcceleratorEntry  a ->  IO ()
+acceleratorEntryDelete _obj 
+  = withObjectRef "acceleratorEntryDelete" _obj $ \cobj__obj -> 
+    wxAcceleratorEntry_Delete cobj__obj  
+foreign import ccall "wxAcceleratorEntry_Delete" wxAcceleratorEntry_Delete :: Ptr (TAcceleratorEntry a) -> IO ()
+
+-- | usage: (@acceleratorEntryGetCommand obj@).
+acceleratorEntryGetCommand :: AcceleratorEntry  a ->  IO Int
+acceleratorEntryGetCommand _obj 
+  = withIntResult $
+    withObjectRef "acceleratorEntryGetCommand" _obj $ \cobj__obj -> 
+    wxAcceleratorEntry_GetCommand cobj__obj  
+foreign import ccall "wxAcceleratorEntry_GetCommand" wxAcceleratorEntry_GetCommand :: Ptr (TAcceleratorEntry a) -> IO CInt
+
+-- | usage: (@acceleratorEntryGetFlags obj@).
+acceleratorEntryGetFlags :: AcceleratorEntry  a ->  IO Int
+acceleratorEntryGetFlags _obj 
+  = withIntResult $
+    withObjectRef "acceleratorEntryGetFlags" _obj $ \cobj__obj -> 
+    wxAcceleratorEntry_GetFlags cobj__obj  
+foreign import ccall "wxAcceleratorEntry_GetFlags" wxAcceleratorEntry_GetFlags :: Ptr (TAcceleratorEntry a) -> IO CInt
+
+-- | usage: (@acceleratorEntryGetKeyCode obj@).
+acceleratorEntryGetKeyCode :: AcceleratorEntry  a ->  IO Int
+acceleratorEntryGetKeyCode _obj 
+  = withIntResult $
+    withObjectRef "acceleratorEntryGetKeyCode" _obj $ \cobj__obj -> 
+    wxAcceleratorEntry_GetKeyCode cobj__obj  
+foreign import ccall "wxAcceleratorEntry_GetKeyCode" wxAcceleratorEntry_GetKeyCode :: Ptr (TAcceleratorEntry a) -> IO CInt
+
+-- | usage: (@acceleratorEntrySet obj flags keyCode cmd@).
+acceleratorEntrySet :: AcceleratorEntry  a -> Int -> Int -> Int ->  IO ()
+acceleratorEntrySet _obj flags keyCode cmd 
+  = withObjectRef "acceleratorEntrySet" _obj $ \cobj__obj -> 
+    wxAcceleratorEntry_Set cobj__obj  (toCInt flags)  (toCInt keyCode)  (toCInt cmd)  
+foreign import ccall "wxAcceleratorEntry_Set" wxAcceleratorEntry_Set :: Ptr (TAcceleratorEntry a) -> CInt -> CInt -> CInt -> IO ()
+
+-- | usage: (@acceleratorTableCreate n entries@).
+acceleratorTableCreate :: Int -> Ptr  b ->  IO (AcceleratorTable  ())
+acceleratorTableCreate n entries 
+  = withObjectResult $
+    wxAcceleratorTable_Create (toCInt n)  entries  
+foreign import ccall "wxAcceleratorTable_Create" wxAcceleratorTable_Create :: CInt -> Ptr  b -> IO (Ptr (TAcceleratorTable ()))
+
+-- | usage: (@acceleratorTableDelete obj@).
+acceleratorTableDelete :: AcceleratorTable  a ->  IO ()
+acceleratorTableDelete _obj 
+  = withObjectRef "acceleratorTableDelete" _obj $ \cobj__obj -> 
+    wxAcceleratorTable_Delete cobj__obj  
+foreign import ccall "wxAcceleratorTable_Delete" wxAcceleratorTable_Delete :: Ptr (TAcceleratorTable a) -> IO ()
+
+-- | usage: (@activateEventCopyObject obj obj@).
+activateEventCopyObject :: ActivateEvent  a -> Ptr  b ->  IO ()
+activateEventCopyObject _obj obj 
+  = withObjectRef "activateEventCopyObject" _obj $ \cobj__obj -> 
+    wxActivateEvent_CopyObject cobj__obj  obj  
+foreign import ccall "wxActivateEvent_CopyObject" wxActivateEvent_CopyObject :: Ptr (TActivateEvent a) -> Ptr  b -> IO ()
+
+-- | usage: (@activateEventGetActive obj@).
+activateEventGetActive :: ActivateEvent  a ->  IO Bool
+activateEventGetActive _obj 
+  = withBoolResult $
+    withObjectRef "activateEventGetActive" _obj $ \cobj__obj -> 
+    wxActivateEvent_GetActive cobj__obj  
+foreign import ccall "wxActivateEvent_GetActive" wxActivateEvent_GetActive :: Ptr (TActivateEvent a) -> IO CBool
+
+-- | usage: (@auiDefaultTabArtClone obj@).
+auiDefaultTabArtClone :: AuiDefaultTabArt  a ->  IO (AuiTabArt  ())
+auiDefaultTabArtClone _obj 
+  = withObjectResult $
+    withObjectRef "auiDefaultTabArtClone" _obj $ \cobj__obj -> 
+    wxAuiDefaultTabArt_Clone cobj__obj  
+foreign import ccall "wxAuiDefaultTabArt_Clone" wxAuiDefaultTabArt_Clone :: Ptr (TAuiDefaultTabArt a) -> IO (Ptr (TAuiTabArt ()))
+
+-- | usage: (@auiDefaultTabArtCreate@).
+auiDefaultTabArtCreate ::  IO (AuiDefaultTabArt  ())
+auiDefaultTabArtCreate 
+  = withObjectResult $
+    wxAuiDefaultTabArt_Create 
+foreign import ccall "wxAuiDefaultTabArt_Create" wxAuiDefaultTabArt_Create :: IO (Ptr (TAuiDefaultTabArt ()))
+
+-- | usage: (@auiDefaultTabArtDrawBackground obj dc wnd rect@).
+auiDefaultTabArtDrawBackground :: AuiDefaultTabArt  a -> DC  b -> Window  c -> Rect ->  IO ()
+auiDefaultTabArtDrawBackground _obj _dc _wnd _rect 
+  = withObjectRef "auiDefaultTabArtDrawBackground" _obj $ \cobj__obj -> 
+    withObjectPtr _dc $ \cobj__dc -> 
+    withObjectPtr _wnd $ \cobj__wnd -> 
+    withWxRectPtr _rect $ \cobj__rect -> 
+    wxAuiDefaultTabArt_DrawBackground cobj__obj  cobj__dc  cobj__wnd  cobj__rect  
+foreign import ccall "wxAuiDefaultTabArt_DrawBackground" wxAuiDefaultTabArt_DrawBackground :: Ptr (TAuiDefaultTabArt a) -> Ptr (TDC b) -> Ptr (TWindow c) -> Ptr (TWxRect d) -> IO ()
+
+-- | usage: (@auiDefaultTabArtDrawButton obj dc wnd inRect bitmapId buttonState orientation outRect@).
+auiDefaultTabArtDrawButton :: AuiDefaultTabArt  a -> DC  b -> Window  c -> Rect -> Int -> Int -> Int -> Rect ->  IO ()
+auiDefaultTabArtDrawButton _obj _dc _wnd _inRect bitmapId buttonState orientation _outRect 
+  = withObjectRef "auiDefaultTabArtDrawButton" _obj $ \cobj__obj -> 
+    withObjectPtr _dc $ \cobj__dc -> 
+    withObjectPtr _wnd $ \cobj__wnd -> 
+    withWxRectPtr _inRect $ \cobj__inRect -> 
+    withWxRectPtr _outRect $ \cobj__outRect -> 
+    wxAuiDefaultTabArt_DrawButton cobj__obj  cobj__dc  cobj__wnd  cobj__inRect  (toCInt bitmapId)  (toCInt buttonState)  (toCInt orientation)  cobj__outRect  
+foreign import ccall "wxAuiDefaultTabArt_DrawButton" wxAuiDefaultTabArt_DrawButton :: Ptr (TAuiDefaultTabArt a) -> Ptr (TDC b) -> Ptr (TWindow c) -> Ptr (TWxRect d) -> CInt -> CInt -> CInt -> Ptr (TWxRect h) -> IO ()
+
+-- | usage: (@auiDefaultTabArtDrawTab obj dc wnd pane inRect closeButtonState outTabRect outButtonRect xExtent@).
+auiDefaultTabArtDrawTab :: AuiDefaultTabArt  a -> DC  b -> Window  c -> AuiNotebookPage  d -> Rect -> Int -> Rect -> Rect -> Ptr CInt ->  IO ()
+auiDefaultTabArtDrawTab _obj _dc _wnd _pane _inRect closeButtonState _outTabRect _outButtonRect xExtent 
+  = withObjectRef "auiDefaultTabArtDrawTab" _obj $ \cobj__obj -> 
+    withObjectPtr _dc $ \cobj__dc -> 
+    withObjectPtr _wnd $ \cobj__wnd -> 
+    withObjectPtr _pane $ \cobj__pane -> 
+    withWxRectPtr _inRect $ \cobj__inRect -> 
+    withWxRectPtr _outTabRect $ \cobj__outTabRect -> 
+    withWxRectPtr _outButtonRect $ \cobj__outButtonRect -> 
+    wxAuiDefaultTabArt_DrawTab cobj__obj  cobj__dc  cobj__wnd  cobj__pane  cobj__inRect  (toCInt closeButtonState)  cobj__outTabRect  cobj__outButtonRect  xExtent  
+foreign import ccall "wxAuiDefaultTabArt_DrawTab" wxAuiDefaultTabArt_DrawTab :: Ptr (TAuiDefaultTabArt a) -> Ptr (TDC b) -> Ptr (TWindow c) -> Ptr (TAuiNotebookPage d) -> Ptr (TWxRect e) -> CInt -> Ptr (TWxRect g) -> Ptr (TWxRect h) -> Ptr CInt -> IO ()
+
+-- | usage: (@auiDefaultTabArtGetBestTabCtrlSize obj wnd pages widthheight@).
+auiDefaultTabArtGetBestTabCtrlSize :: AuiDefaultTabArt  a -> Window  b -> AuiNotebookPageArray  c -> Size ->  IO Int
+auiDefaultTabArtGetBestTabCtrlSize _obj _wnd _pages _widthheight 
+  = withIntResult $
+    withObjectRef "auiDefaultTabArtGetBestTabCtrlSize" _obj $ \cobj__obj -> 
+    withObjectPtr _wnd $ \cobj__wnd -> 
+    withObjectPtr _pages $ \cobj__pages -> 
+    wxAuiDefaultTabArt_GetBestTabCtrlSize cobj__obj  cobj__wnd  cobj__pages  (toCIntSizeW _widthheight) (toCIntSizeH _widthheight)  
+foreign import ccall "wxAuiDefaultTabArt_GetBestTabCtrlSize" wxAuiDefaultTabArt_GetBestTabCtrlSize :: Ptr (TAuiDefaultTabArt a) -> Ptr (TWindow b) -> Ptr (TAuiNotebookPageArray c) -> CInt -> CInt -> IO CInt
+
+-- | usage: (@auiDefaultTabArtGetIndentSize obj@).
+auiDefaultTabArtGetIndentSize :: AuiDefaultTabArt  a ->  IO Int
+auiDefaultTabArtGetIndentSize _obj 
+  = withIntResult $
+    withObjectRef "auiDefaultTabArtGetIndentSize" _obj $ \cobj__obj -> 
+    wxAuiDefaultTabArt_GetIndentSize cobj__obj  
+foreign import ccall "wxAuiDefaultTabArt_GetIndentSize" wxAuiDefaultTabArt_GetIndentSize :: Ptr (TAuiDefaultTabArt a) -> IO CInt
+
+-- | usage: (@auiDefaultTabArtGetTabSize obj dc wnd caption bitmap active closeButtonState xExtent@).
+auiDefaultTabArtGetTabSize :: AuiDefaultTabArt  a -> DC  b -> Window  c -> String -> Bitmap  e -> Bool -> Int -> Ptr CInt ->  IO (Size)
+auiDefaultTabArtGetTabSize _obj _dc _wnd _caption _bitmap active closeButtonState xExtent 
+  = withWxSizeResult $
+    withObjectRef "auiDefaultTabArtGetTabSize" _obj $ \cobj__obj -> 
+    withObjectPtr _dc $ \cobj__dc -> 
+    withObjectPtr _wnd $ \cobj__wnd -> 
+    withStringPtr _caption $ \cobj__caption -> 
+    withObjectPtr _bitmap $ \cobj__bitmap -> 
+    wxAuiDefaultTabArt_GetTabSize cobj__obj  cobj__dc  cobj__wnd  cobj__caption  cobj__bitmap  (toCBool active)  (toCInt closeButtonState)  xExtent  
+foreign import ccall "wxAuiDefaultTabArt_GetTabSize" wxAuiDefaultTabArt_GetTabSize :: Ptr (TAuiDefaultTabArt a) -> Ptr (TDC b) -> Ptr (TWindow c) -> Ptr (TWxString d) -> Ptr (TBitmap e) -> CBool -> CInt -> Ptr CInt -> IO (Ptr (TWxSize ()))
+
+-- | usage: (@auiDefaultTabArtSetActiveColour obj colour@).
+auiDefaultTabArtSetActiveColour :: AuiDefaultTabArt  a -> Color ->  IO ()
+auiDefaultTabArtSetActiveColour _obj _colour 
+  = withObjectRef "auiDefaultTabArtSetActiveColour" _obj $ \cobj__obj -> 
+    withColourPtr _colour $ \cobj__colour -> 
+    wxAuiDefaultTabArt_SetActiveColour cobj__obj  cobj__colour  
+foreign import ccall "wxAuiDefaultTabArt_SetActiveColour" wxAuiDefaultTabArt_SetActiveColour :: Ptr (TAuiDefaultTabArt a) -> Ptr (TColour b) -> IO ()
+
+-- | usage: (@auiDefaultTabArtSetColour obj colour@).
+auiDefaultTabArtSetColour :: AuiDefaultTabArt  a -> Color ->  IO ()
+auiDefaultTabArtSetColour _obj _colour 
+  = withObjectRef "auiDefaultTabArtSetColour" _obj $ \cobj__obj -> 
+    withColourPtr _colour $ \cobj__colour -> 
+    wxAuiDefaultTabArt_SetColour cobj__obj  cobj__colour  
+foreign import ccall "wxAuiDefaultTabArt_SetColour" wxAuiDefaultTabArt_SetColour :: Ptr (TAuiDefaultTabArt a) -> Ptr (TColour b) -> IO ()
+
+-- | usage: (@auiDefaultTabArtSetFlags obj flags@).
+auiDefaultTabArtSetFlags :: AuiDefaultTabArt  a -> Int ->  IO ()
+auiDefaultTabArtSetFlags _obj _flags 
+  = withObjectRef "auiDefaultTabArtSetFlags" _obj $ \cobj__obj -> 
+    wxAuiDefaultTabArt_SetFlags cobj__obj  (toCInt _flags)  
+foreign import ccall "wxAuiDefaultTabArt_SetFlags" wxAuiDefaultTabArt_SetFlags :: Ptr (TAuiDefaultTabArt a) -> CInt -> IO ()
+
+-- | usage: (@auiDefaultTabArtSetMeasuringFont obj font@).
+auiDefaultTabArtSetMeasuringFont :: AuiDefaultTabArt  a -> Font  b ->  IO ()
+auiDefaultTabArtSetMeasuringFont _obj _font 
+  = withObjectRef "auiDefaultTabArtSetMeasuringFont" _obj $ \cobj__obj -> 
+    withObjectPtr _font $ \cobj__font -> 
+    wxAuiDefaultTabArt_SetMeasuringFont cobj__obj  cobj__font  
+foreign import ccall "wxAuiDefaultTabArt_SetMeasuringFont" wxAuiDefaultTabArt_SetMeasuringFont :: Ptr (TAuiDefaultTabArt a) -> Ptr (TFont b) -> IO ()
+
+-- | usage: (@auiDefaultTabArtSetNormalFont obj font@).
+auiDefaultTabArtSetNormalFont :: AuiDefaultTabArt  a -> Font  b ->  IO ()
+auiDefaultTabArtSetNormalFont _obj _font 
+  = withObjectRef "auiDefaultTabArtSetNormalFont" _obj $ \cobj__obj -> 
+    withObjectPtr _font $ \cobj__font -> 
+    wxAuiDefaultTabArt_SetNormalFont cobj__obj  cobj__font  
+foreign import ccall "wxAuiDefaultTabArt_SetNormalFont" wxAuiDefaultTabArt_SetNormalFont :: Ptr (TAuiDefaultTabArt a) -> Ptr (TFont b) -> IO ()
+
+-- | usage: (@auiDefaultTabArtSetSelectedFont obj font@).
+auiDefaultTabArtSetSelectedFont :: AuiDefaultTabArt  a -> Font  b ->  IO ()
+auiDefaultTabArtSetSelectedFont _obj _font 
+  = withObjectRef "auiDefaultTabArtSetSelectedFont" _obj $ \cobj__obj -> 
+    withObjectPtr _font $ \cobj__font -> 
+    wxAuiDefaultTabArt_SetSelectedFont cobj__obj  cobj__font  
+foreign import ccall "wxAuiDefaultTabArt_SetSelectedFont" wxAuiDefaultTabArt_SetSelectedFont :: Ptr (TAuiDefaultTabArt a) -> Ptr (TFont b) -> IO ()
+
+-- | usage: (@auiDefaultTabArtSetSizingInfo obj widthheight tabCount@).
+auiDefaultTabArtSetSizingInfo :: AuiDefaultTabArt  a -> Size -> Int ->  IO ()
+auiDefaultTabArtSetSizingInfo _obj _widthheight tabCount 
+  = withObjectRef "auiDefaultTabArtSetSizingInfo" _obj $ \cobj__obj -> 
+    wxAuiDefaultTabArt_SetSizingInfo cobj__obj  (toCIntSizeW _widthheight) (toCIntSizeH _widthheight)  (toCInt tabCount)  
+foreign import ccall "wxAuiDefaultTabArt_SetSizingInfo" wxAuiDefaultTabArt_SetSizingInfo :: Ptr (TAuiDefaultTabArt a) -> CInt -> CInt -> CInt -> IO ()
+
+-- | usage: (@auiDefaultTabArtShowDropDown obj wnd items activeIdx@).
+auiDefaultTabArtShowDropDown :: AuiDefaultTabArt  a -> Window  b -> AuiNotebookPageArray  c -> Int ->  IO Int
+auiDefaultTabArtShowDropDown _obj _wnd _items activeIdx 
+  = withIntResult $
+    withObjectRef "auiDefaultTabArtShowDropDown" _obj $ \cobj__obj -> 
+    withObjectPtr _wnd $ \cobj__wnd -> 
+    withObjectPtr _items $ \cobj__items -> 
+    wxAuiDefaultTabArt_ShowDropDown cobj__obj  cobj__wnd  cobj__items  (toCInt activeIdx)  
+foreign import ccall "wxAuiDefaultTabArt_ShowDropDown" wxAuiDefaultTabArt_ShowDropDown :: Ptr (TAuiDefaultTabArt a) -> Ptr (TWindow b) -> Ptr (TAuiNotebookPageArray c) -> CInt -> IO CInt
+
+-- | usage: (@auiDefaultToolBarArtClone obj@).
+auiDefaultToolBarArtClone :: AuiDefaultToolBarArt  a ->  IO (AuiToolBarArt  ())
+auiDefaultToolBarArtClone _obj 
+  = withObjectResult $
+    withObjectRef "auiDefaultToolBarArtClone" _obj $ \cobj__obj -> 
+    wxAuiDefaultToolBarArt_Clone cobj__obj  
+foreign import ccall "wxAuiDefaultToolBarArt_Clone" wxAuiDefaultToolBarArt_Clone :: Ptr (TAuiDefaultToolBarArt a) -> IO (Ptr (TAuiToolBarArt ()))
+
+-- | usage: (@auiDefaultToolBarArtCreate@).
+auiDefaultToolBarArtCreate ::  IO (AuiDefaultToolBarArt  ())
+auiDefaultToolBarArtCreate 
+  = withObjectResult $
+    wxAuiDefaultToolBarArt_Create 
+foreign import ccall "wxAuiDefaultToolBarArt_Create" wxAuiDefaultToolBarArt_Create :: IO (Ptr (TAuiDefaultToolBarArt ()))
+
+-- | usage: (@auiDefaultToolBarArtDrawBackground obj dc wnd rect@).
+auiDefaultToolBarArtDrawBackground :: AuiDefaultToolBarArt  a -> DC  b -> Window  c -> Rect ->  IO ()
+auiDefaultToolBarArtDrawBackground _obj _dc _wnd _rect 
+  = withObjectRef "auiDefaultToolBarArtDrawBackground" _obj $ \cobj__obj -> 
+    withObjectPtr _dc $ \cobj__dc -> 
+    withObjectPtr _wnd $ \cobj__wnd -> 
+    withWxRectPtr _rect $ \cobj__rect -> 
+    wxAuiDefaultToolBarArt_DrawBackground cobj__obj  cobj__dc  cobj__wnd  cobj__rect  
+foreign import ccall "wxAuiDefaultToolBarArt_DrawBackground" wxAuiDefaultToolBarArt_DrawBackground :: Ptr (TAuiDefaultToolBarArt a) -> Ptr (TDC b) -> Ptr (TWindow c) -> Ptr (TWxRect d) -> IO ()
+
+-- | usage: (@auiDefaultToolBarArtDrawButton obj dc wnd item rect@).
+auiDefaultToolBarArtDrawButton :: AuiDefaultToolBarArt  a -> DC  b -> Window  c -> AuiToolBarItem  d -> Rect ->  IO ()
+auiDefaultToolBarArtDrawButton _obj _dc _wnd _item _rect 
+  = withObjectRef "auiDefaultToolBarArtDrawButton" _obj $ \cobj__obj -> 
+    withObjectPtr _dc $ \cobj__dc -> 
+    withObjectPtr _wnd $ \cobj__wnd -> 
+    withObjectPtr _item $ \cobj__item -> 
+    withWxRectPtr _rect $ \cobj__rect -> 
+    wxAuiDefaultToolBarArt_DrawButton cobj__obj  cobj__dc  cobj__wnd  cobj__item  cobj__rect  
+foreign import ccall "wxAuiDefaultToolBarArt_DrawButton" wxAuiDefaultToolBarArt_DrawButton :: Ptr (TAuiDefaultToolBarArt a) -> Ptr (TDC b) -> Ptr (TWindow c) -> Ptr (TAuiToolBarItem d) -> Ptr (TWxRect e) -> IO ()
+
+-- | usage: (@auiDefaultToolBarArtDrawControlLabel obj dc wnd item rect@).
+auiDefaultToolBarArtDrawControlLabel :: AuiDefaultToolBarArt  a -> DC  b -> Window  c -> AuiToolBarItem  d -> Rect ->  IO ()
+auiDefaultToolBarArtDrawControlLabel _obj _dc _wnd _item _rect 
+  = withObjectRef "auiDefaultToolBarArtDrawControlLabel" _obj $ \cobj__obj -> 
+    withObjectPtr _dc $ \cobj__dc -> 
+    withObjectPtr _wnd $ \cobj__wnd -> 
+    withObjectPtr _item $ \cobj__item -> 
+    withWxRectPtr _rect $ \cobj__rect -> 
+    wxAuiDefaultToolBarArt_DrawControlLabel cobj__obj  cobj__dc  cobj__wnd  cobj__item  cobj__rect  
+foreign import ccall "wxAuiDefaultToolBarArt_DrawControlLabel" wxAuiDefaultToolBarArt_DrawControlLabel :: Ptr (TAuiDefaultToolBarArt a) -> Ptr (TDC b) -> Ptr (TWindow c) -> Ptr (TAuiToolBarItem d) -> Ptr (TWxRect e) -> IO ()
+
+-- | usage: (@auiDefaultToolBarArtDrawDropDownButton obj dc wnd item rect@).
+auiDefaultToolBarArtDrawDropDownButton :: AuiDefaultToolBarArt  a -> DC  b -> Window  c -> AuiToolBarItem  d -> Rect ->  IO ()
+auiDefaultToolBarArtDrawDropDownButton _obj _dc _wnd _item _rect 
+  = withObjectRef "auiDefaultToolBarArtDrawDropDownButton" _obj $ \cobj__obj -> 
+    withObjectPtr _dc $ \cobj__dc -> 
+    withObjectPtr _wnd $ \cobj__wnd -> 
+    withObjectPtr _item $ \cobj__item -> 
+    withWxRectPtr _rect $ \cobj__rect -> 
+    wxAuiDefaultToolBarArt_DrawDropDownButton cobj__obj  cobj__dc  cobj__wnd  cobj__item  cobj__rect  
+foreign import ccall "wxAuiDefaultToolBarArt_DrawDropDownButton" wxAuiDefaultToolBarArt_DrawDropDownButton :: Ptr (TAuiDefaultToolBarArt a) -> Ptr (TDC b) -> Ptr (TWindow c) -> Ptr (TAuiToolBarItem d) -> Ptr (TWxRect e) -> IO ()
+
+-- | usage: (@auiDefaultToolBarArtDrawGripper obj dc wnd rect@).
+auiDefaultToolBarArtDrawGripper :: AuiDefaultToolBarArt  a -> DC  b -> Window  c -> Rect ->  IO ()
+auiDefaultToolBarArtDrawGripper _obj _dc _wnd _rect 
+  = withObjectRef "auiDefaultToolBarArtDrawGripper" _obj $ \cobj__obj -> 
+    withObjectPtr _dc $ \cobj__dc -> 
+    withObjectPtr _wnd $ \cobj__wnd -> 
+    withWxRectPtr _rect $ \cobj__rect -> 
+    wxAuiDefaultToolBarArt_DrawGripper cobj__obj  cobj__dc  cobj__wnd  cobj__rect  
+foreign import ccall "wxAuiDefaultToolBarArt_DrawGripper" wxAuiDefaultToolBarArt_DrawGripper :: Ptr (TAuiDefaultToolBarArt a) -> Ptr (TDC b) -> Ptr (TWindow c) -> Ptr (TWxRect d) -> IO ()
+
+-- | usage: (@auiDefaultToolBarArtDrawLabel obj dc wnd item rect@).
+auiDefaultToolBarArtDrawLabel :: AuiDefaultToolBarArt  a -> DC  b -> Window  c -> AuiToolBarItem  d -> Rect ->  IO ()
+auiDefaultToolBarArtDrawLabel _obj _dc _wnd _item _rect 
+  = withObjectRef "auiDefaultToolBarArtDrawLabel" _obj $ \cobj__obj -> 
+    withObjectPtr _dc $ \cobj__dc -> 
+    withObjectPtr _wnd $ \cobj__wnd -> 
+    withObjectPtr _item $ \cobj__item -> 
+    withWxRectPtr _rect $ \cobj__rect -> 
+    wxAuiDefaultToolBarArt_DrawLabel cobj__obj  cobj__dc  cobj__wnd  cobj__item  cobj__rect  
+foreign import ccall "wxAuiDefaultToolBarArt_DrawLabel" wxAuiDefaultToolBarArt_DrawLabel :: Ptr (TAuiDefaultToolBarArt a) -> Ptr (TDC b) -> Ptr (TWindow c) -> Ptr (TAuiToolBarItem d) -> Ptr (TWxRect e) -> IO ()
+
+-- | usage: (@auiDefaultToolBarArtDrawOverflowButton obj dc wnd rect state@).
+auiDefaultToolBarArtDrawOverflowButton :: AuiDefaultToolBarArt  a -> DC  b -> Window  c -> Rect -> Int ->  IO ()
+auiDefaultToolBarArtDrawOverflowButton _obj _dc _wnd _rect state 
+  = withObjectRef "auiDefaultToolBarArtDrawOverflowButton" _obj $ \cobj__obj -> 
+    withObjectPtr _dc $ \cobj__dc -> 
+    withObjectPtr _wnd $ \cobj__wnd -> 
+    withWxRectPtr _rect $ \cobj__rect -> 
+    wxAuiDefaultToolBarArt_DrawOverflowButton cobj__obj  cobj__dc  cobj__wnd  cobj__rect  (toCInt state)  
+foreign import ccall "wxAuiDefaultToolBarArt_DrawOverflowButton" wxAuiDefaultToolBarArt_DrawOverflowButton :: Ptr (TAuiDefaultToolBarArt a) -> Ptr (TDC b) -> Ptr (TWindow c) -> Ptr (TWxRect d) -> CInt -> IO ()
+
+-- | usage: (@auiDefaultToolBarArtDrawPlainBackground obj dc wnd rect@).
+auiDefaultToolBarArtDrawPlainBackground :: AuiDefaultToolBarArt  a -> DC  b -> Window  c -> Rect ->  IO ()
+auiDefaultToolBarArtDrawPlainBackground _obj _dc _wnd _rect 
+  = withObjectRef "auiDefaultToolBarArtDrawPlainBackground" _obj $ \cobj__obj -> 
+    withObjectPtr _dc $ \cobj__dc -> 
+    withObjectPtr _wnd $ \cobj__wnd -> 
+    withWxRectPtr _rect $ \cobj__rect -> 
+    wxAuiDefaultToolBarArt_DrawPlainBackground cobj__obj  cobj__dc  cobj__wnd  cobj__rect  
+foreign import ccall "wxAuiDefaultToolBarArt_DrawPlainBackground" wxAuiDefaultToolBarArt_DrawPlainBackground :: Ptr (TAuiDefaultToolBarArt a) -> Ptr (TDC b) -> Ptr (TWindow c) -> Ptr (TWxRect d) -> IO ()
+
+-- | usage: (@auiDefaultToolBarArtDrawSeparator obj dc wnd rect@).
+auiDefaultToolBarArtDrawSeparator :: AuiDefaultToolBarArt  a -> DC  b -> Window  c -> Rect ->  IO ()
+auiDefaultToolBarArtDrawSeparator _obj _dc _wnd _rect 
+  = withObjectRef "auiDefaultToolBarArtDrawSeparator" _obj $ \cobj__obj -> 
+    withObjectPtr _dc $ \cobj__dc -> 
+    withObjectPtr _wnd $ \cobj__wnd -> 
+    withWxRectPtr _rect $ \cobj__rect -> 
+    wxAuiDefaultToolBarArt_DrawSeparator cobj__obj  cobj__dc  cobj__wnd  cobj__rect  
+foreign import ccall "wxAuiDefaultToolBarArt_DrawSeparator" wxAuiDefaultToolBarArt_DrawSeparator :: Ptr (TAuiDefaultToolBarArt a) -> Ptr (TDC b) -> Ptr (TWindow c) -> Ptr (TWxRect d) -> IO ()
+
+-- | usage: (@auiDefaultToolBarArtGetElementSize obj element@).
+auiDefaultToolBarArtGetElementSize :: AuiDefaultToolBarArt  a -> Int ->  IO Int
+auiDefaultToolBarArtGetElementSize _obj element 
+  = withIntResult $
+    withObjectRef "auiDefaultToolBarArtGetElementSize" _obj $ \cobj__obj -> 
+    wxAuiDefaultToolBarArt_GetElementSize cobj__obj  (toCInt element)  
+foreign import ccall "wxAuiDefaultToolBarArt_GetElementSize" wxAuiDefaultToolBarArt_GetElementSize :: Ptr (TAuiDefaultToolBarArt a) -> CInt -> IO CInt
+
+-- | usage: (@auiDefaultToolBarArtGetFlags obj@).
+auiDefaultToolBarArtGetFlags :: AuiDefaultToolBarArt  a ->  IO Int
+auiDefaultToolBarArtGetFlags _obj 
+  = withIntResult $
+    withObjectRef "auiDefaultToolBarArtGetFlags" _obj $ \cobj__obj -> 
+    wxAuiDefaultToolBarArt_GetFlags cobj__obj  
+foreign import ccall "wxAuiDefaultToolBarArt_GetFlags" wxAuiDefaultToolBarArt_GetFlags :: Ptr (TAuiDefaultToolBarArt a) -> IO CInt
+
+-- | usage: (@auiDefaultToolBarArtGetFont obj@).
+auiDefaultToolBarArtGetFont :: AuiDefaultToolBarArt  a ->  IO (Font  ())
+auiDefaultToolBarArtGetFont _obj 
+  = withManagedFontResult $
+    withObjectRef "auiDefaultToolBarArtGetFont" _obj $ \cobj__obj -> 
+    wxAuiDefaultToolBarArt_GetFont cobj__obj  
+foreign import ccall "wxAuiDefaultToolBarArt_GetFont" wxAuiDefaultToolBarArt_GetFont :: Ptr (TAuiDefaultToolBarArt a) -> IO (Ptr (TFont ()))
+
+-- | usage: (@auiDefaultToolBarArtGetLabelSize obj dc wnd item@).
+auiDefaultToolBarArtGetLabelSize :: AuiDefaultToolBarArt  a -> DC  b -> Window  c -> AuiToolBarItem  d ->  IO (Size)
+auiDefaultToolBarArtGetLabelSize _obj _dc _wnd _item 
+  = withWxSizeResult $
+    withObjectRef "auiDefaultToolBarArtGetLabelSize" _obj $ \cobj__obj -> 
+    withObjectPtr _dc $ \cobj__dc -> 
+    withObjectPtr _wnd $ \cobj__wnd -> 
+    withObjectPtr _item $ \cobj__item -> 
+    wxAuiDefaultToolBarArt_GetLabelSize cobj__obj  cobj__dc  cobj__wnd  cobj__item  
+foreign import ccall "wxAuiDefaultToolBarArt_GetLabelSize" wxAuiDefaultToolBarArt_GetLabelSize :: Ptr (TAuiDefaultToolBarArt a) -> Ptr (TDC b) -> Ptr (TWindow c) -> Ptr (TAuiToolBarItem d) -> IO (Ptr (TWxSize ()))
+
+-- | usage: (@auiDefaultToolBarArtGetTextOrientation obj@).
+auiDefaultToolBarArtGetTextOrientation :: AuiDefaultToolBarArt  a ->  IO Int
+auiDefaultToolBarArtGetTextOrientation _obj 
+  = withIntResult $
+    withObjectRef "auiDefaultToolBarArtGetTextOrientation" _obj $ \cobj__obj -> 
+    wxAuiDefaultToolBarArt_GetTextOrientation cobj__obj  
+foreign import ccall "wxAuiDefaultToolBarArt_GetTextOrientation" wxAuiDefaultToolBarArt_GetTextOrientation :: Ptr (TAuiDefaultToolBarArt a) -> IO CInt
+
+-- | usage: (@auiDefaultToolBarArtGetToolSize obj dc wnd item@).
+auiDefaultToolBarArtGetToolSize :: AuiDefaultToolBarArt  a -> DC  b -> Window  c -> AuiToolBarItem  d ->  IO (Size)
+auiDefaultToolBarArtGetToolSize _obj _dc _wnd _item 
+  = withWxSizeResult $
+    withObjectRef "auiDefaultToolBarArtGetToolSize" _obj $ \cobj__obj -> 
+    withObjectPtr _dc $ \cobj__dc -> 
+    withObjectPtr _wnd $ \cobj__wnd -> 
+    withObjectPtr _item $ \cobj__item -> 
+    wxAuiDefaultToolBarArt_GetToolSize cobj__obj  cobj__dc  cobj__wnd  cobj__item  
+foreign import ccall "wxAuiDefaultToolBarArt_GetToolSize" wxAuiDefaultToolBarArt_GetToolSize :: Ptr (TAuiDefaultToolBarArt a) -> Ptr (TDC b) -> Ptr (TWindow c) -> Ptr (TAuiToolBarItem d) -> IO (Ptr (TWxSize ()))
+
+-- | usage: (@auiDefaultToolBarArtSetElementSize obj elementid size@).
+auiDefaultToolBarArtSetElementSize :: AuiDefaultToolBarArt  a -> Int -> Int ->  IO ()
+auiDefaultToolBarArtSetElementSize _obj elementid size 
+  = withObjectRef "auiDefaultToolBarArtSetElementSize" _obj $ \cobj__obj -> 
+    wxAuiDefaultToolBarArt_SetElementSize cobj__obj  (toCInt elementid)  (toCInt size)  
+foreign import ccall "wxAuiDefaultToolBarArt_SetElementSize" wxAuiDefaultToolBarArt_SetElementSize :: Ptr (TAuiDefaultToolBarArt a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@auiDefaultToolBarArtSetFlags obj flags@).
+auiDefaultToolBarArtSetFlags :: AuiDefaultToolBarArt  a -> Int ->  IO ()
+auiDefaultToolBarArtSetFlags _obj _flags 
+  = withObjectRef "auiDefaultToolBarArtSetFlags" _obj $ \cobj__obj -> 
+    wxAuiDefaultToolBarArt_SetFlags cobj__obj  (toCInt _flags)  
+foreign import ccall "wxAuiDefaultToolBarArt_SetFlags" wxAuiDefaultToolBarArt_SetFlags :: Ptr (TAuiDefaultToolBarArt a) -> CInt -> IO ()
+
+-- | usage: (@auiDefaultToolBarArtSetFont obj font@).
+auiDefaultToolBarArtSetFont :: AuiDefaultToolBarArt  a -> Font  b ->  IO ()
+auiDefaultToolBarArtSetFont _obj _font 
+  = withObjectRef "auiDefaultToolBarArtSetFont" _obj $ \cobj__obj -> 
+    withObjectPtr _font $ \cobj__font -> 
+    wxAuiDefaultToolBarArt_SetFont cobj__obj  cobj__font  
+foreign import ccall "wxAuiDefaultToolBarArt_SetFont" wxAuiDefaultToolBarArt_SetFont :: Ptr (TAuiDefaultToolBarArt a) -> Ptr (TFont b) -> IO ()
+
+-- | usage: (@auiDefaultToolBarArtSetTextOrientation obj orientation@).
+auiDefaultToolBarArtSetTextOrientation :: AuiDefaultToolBarArt  a -> Int ->  IO ()
+auiDefaultToolBarArtSetTextOrientation _obj orientation 
+  = withObjectRef "auiDefaultToolBarArtSetTextOrientation" _obj $ \cobj__obj -> 
+    wxAuiDefaultToolBarArt_SetTextOrientation cobj__obj  (toCInt orientation)  
+foreign import ccall "wxAuiDefaultToolBarArt_SetTextOrientation" wxAuiDefaultToolBarArt_SetTextOrientation :: Ptr (TAuiDefaultToolBarArt a) -> CInt -> IO ()
+
+-- | usage: (@auiDefaultToolBarArtShowDropDown obj wnd items@).
+auiDefaultToolBarArtShowDropDown :: AuiDefaultToolBarArt  a -> Window  b -> AuiToolBarItemArray  c ->  IO Int
+auiDefaultToolBarArtShowDropDown _obj _wnd _items 
+  = withIntResult $
+    withObjectRef "auiDefaultToolBarArtShowDropDown" _obj $ \cobj__obj -> 
+    withObjectPtr _wnd $ \cobj__wnd -> 
+    withObjectPtr _items $ \cobj__items -> 
+    wxAuiDefaultToolBarArt_ShowDropDown cobj__obj  cobj__wnd  cobj__items  
+foreign import ccall "wxAuiDefaultToolBarArt_ShowDropDown" wxAuiDefaultToolBarArt_ShowDropDown :: Ptr (TAuiDefaultToolBarArt a) -> Ptr (TWindow b) -> Ptr (TAuiToolBarItemArray c) -> IO CInt
+
+-- | usage: (@auiDockArtDrawBackground obj dc window orientation rect@).
+auiDockArtDrawBackground :: AuiDockArt  a -> DC  b -> Window  c -> Int -> Rect ->  IO ()
+auiDockArtDrawBackground _obj _dc _window orientation _rect 
+  = withObjectRef "auiDockArtDrawBackground" _obj $ \cobj__obj -> 
+    withObjectPtr _dc $ \cobj__dc -> 
+    withObjectPtr _window $ \cobj__window -> 
+    withWxRectPtr _rect $ \cobj__rect -> 
+    wxAuiDockArt_DrawBackground cobj__obj  cobj__dc  cobj__window  (toCInt orientation)  cobj__rect  
+foreign import ccall "wxAuiDockArt_DrawBackground" wxAuiDockArt_DrawBackground :: Ptr (TAuiDockArt a) -> Ptr (TDC b) -> Ptr (TWindow c) -> CInt -> Ptr (TWxRect e) -> IO ()
+
+-- | usage: (@auiDockArtDrawBorder obj dc window rect pane@).
+auiDockArtDrawBorder :: AuiDockArt  a -> DC  b -> Window  c -> Rect -> AuiPaneInfo  e ->  IO ()
+auiDockArtDrawBorder _obj _dc _window _rect _pane 
+  = withObjectRef "auiDockArtDrawBorder" _obj $ \cobj__obj -> 
+    withObjectPtr _dc $ \cobj__dc -> 
+    withObjectPtr _window $ \cobj__window -> 
+    withWxRectPtr _rect $ \cobj__rect -> 
+    withObjectPtr _pane $ \cobj__pane -> 
+    wxAuiDockArt_DrawBorder cobj__obj  cobj__dc  cobj__window  cobj__rect  cobj__pane  
+foreign import ccall "wxAuiDockArt_DrawBorder" wxAuiDockArt_DrawBorder :: Ptr (TAuiDockArt a) -> Ptr (TDC b) -> Ptr (TWindow c) -> Ptr (TWxRect d) -> Ptr (TAuiPaneInfo e) -> IO ()
+
+-- | usage: (@auiDockArtDrawCaption obj dc window text rect pane@).
+auiDockArtDrawCaption :: AuiDockArt  a -> DC  b -> Window  c -> String -> Rect -> AuiPaneInfo  f ->  IO ()
+auiDockArtDrawCaption _obj _dc _window _text _rect _pane 
+  = withObjectRef "auiDockArtDrawCaption" _obj $ \cobj__obj -> 
+    withObjectPtr _dc $ \cobj__dc -> 
+    withObjectPtr _window $ \cobj__window -> 
+    withStringPtr _text $ \cobj__text -> 
+    withWxRectPtr _rect $ \cobj__rect -> 
+    withObjectPtr _pane $ \cobj__pane -> 
+    wxAuiDockArt_DrawCaption cobj__obj  cobj__dc  cobj__window  cobj__text  cobj__rect  cobj__pane  
+foreign import ccall "wxAuiDockArt_DrawCaption" wxAuiDockArt_DrawCaption :: Ptr (TAuiDockArt a) -> Ptr (TDC b) -> Ptr (TWindow c) -> Ptr (TWxString d) -> Ptr (TWxRect e) -> Ptr (TAuiPaneInfo f) -> IO ()
+
+-- | usage: (@auiDockArtDrawGripper obj dc window rect pane@).
+auiDockArtDrawGripper :: AuiDockArt  a -> DC  b -> Window  c -> Rect -> AuiPaneInfo  e ->  IO ()
+auiDockArtDrawGripper _obj _dc _window _rect _pane 
+  = withObjectRef "auiDockArtDrawGripper" _obj $ \cobj__obj -> 
+    withObjectPtr _dc $ \cobj__dc -> 
+    withObjectPtr _window $ \cobj__window -> 
+    withWxRectPtr _rect $ \cobj__rect -> 
+    withObjectPtr _pane $ \cobj__pane -> 
+    wxAuiDockArt_DrawGripper cobj__obj  cobj__dc  cobj__window  cobj__rect  cobj__pane  
+foreign import ccall "wxAuiDockArt_DrawGripper" wxAuiDockArt_DrawGripper :: Ptr (TAuiDockArt a) -> Ptr (TDC b) -> Ptr (TWindow c) -> Ptr (TWxRect d) -> Ptr (TAuiPaneInfo e) -> IO ()
+
+-- | usage: (@auiDockArtDrawPaneButton obj dc window button buttonstate rect pane@).
+auiDockArtDrawPaneButton :: AuiDockArt  a -> DC  b -> Window  c -> Int -> Int -> Rect -> AuiPaneInfo  g ->  IO ()
+auiDockArtDrawPaneButton _obj _dc _window button buttonstate _rect _pane 
+  = withObjectRef "auiDockArtDrawPaneButton" _obj $ \cobj__obj -> 
+    withObjectPtr _dc $ \cobj__dc -> 
+    withObjectPtr _window $ \cobj__window -> 
+    withWxRectPtr _rect $ \cobj__rect -> 
+    withObjectPtr _pane $ \cobj__pane -> 
+    wxAuiDockArt_DrawPaneButton cobj__obj  cobj__dc  cobj__window  (toCInt button)  (toCInt buttonstate)  cobj__rect  cobj__pane  
+foreign import ccall "wxAuiDockArt_DrawPaneButton" wxAuiDockArt_DrawPaneButton :: Ptr (TAuiDockArt a) -> Ptr (TDC b) -> Ptr (TWindow c) -> CInt -> CInt -> Ptr (TWxRect f) -> Ptr (TAuiPaneInfo g) -> IO ()
+
+-- | usage: (@auiDockArtDrawSash obj dc window orientation rect@).
+auiDockArtDrawSash :: AuiDockArt  a -> DC  b -> Window  c -> Int -> Rect ->  IO ()
+auiDockArtDrawSash _obj _dc _window orientation _rect 
+  = withObjectRef "auiDockArtDrawSash" _obj $ \cobj__obj -> 
+    withObjectPtr _dc $ \cobj__dc -> 
+    withObjectPtr _window $ \cobj__window -> 
+    withWxRectPtr _rect $ \cobj__rect -> 
+    wxAuiDockArt_DrawSash cobj__obj  cobj__dc  cobj__window  (toCInt orientation)  cobj__rect  
+foreign import ccall "wxAuiDockArt_DrawSash" wxAuiDockArt_DrawSash :: Ptr (TAuiDockArt a) -> Ptr (TDC b) -> Ptr (TWindow c) -> CInt -> Ptr (TWxRect e) -> IO ()
+
+-- | usage: (@auiDockArtGetColour obj id@).
+auiDockArtGetColour :: AuiDockArt  a -> Id ->  IO (Color)
+auiDockArtGetColour _obj id 
+  = withManagedColourResult $
+    withObjectRef "auiDockArtGetColour" _obj $ \cobj__obj -> 
+    wxAuiDockArt_GetColour cobj__obj  (toCInt id)  
+foreign import ccall "wxAuiDockArt_GetColour" wxAuiDockArt_GetColour :: Ptr (TAuiDockArt a) -> CInt -> IO (Ptr (TColour ()))
+
+-- | usage: (@auiDockArtGetFont obj id@).
+auiDockArtGetFont :: AuiDockArt  a -> Id ->  IO (Font  ())
+auiDockArtGetFont _obj id 
+  = withManagedFontResult $
+    withObjectRef "auiDockArtGetFont" _obj $ \cobj__obj -> 
+    wxAuiDockArt_GetFont cobj__obj  (toCInt id)  
+foreign import ccall "wxAuiDockArt_GetFont" wxAuiDockArt_GetFont :: Ptr (TAuiDockArt a) -> CInt -> IO (Ptr (TFont ()))
+
+-- | usage: (@auiDockArtGetMetric obj id@).
+auiDockArtGetMetric :: AuiDockArt  a -> Id ->  IO Int
+auiDockArtGetMetric _obj id 
+  = withIntResult $
+    withObjectRef "auiDockArtGetMetric" _obj $ \cobj__obj -> 
+    wxAuiDockArt_GetMetric cobj__obj  (toCInt id)  
+foreign import ccall "wxAuiDockArt_GetMetric" wxAuiDockArt_GetMetric :: Ptr (TAuiDockArt a) -> CInt -> IO CInt
+
+-- | usage: (@auiDockArtSetColour obj id colour@).
+auiDockArtSetColour :: AuiDockArt  a -> Id -> Color ->  IO ()
+auiDockArtSetColour _obj id _colour 
+  = withObjectRef "auiDockArtSetColour" _obj $ \cobj__obj -> 
+    withColourPtr _colour $ \cobj__colour -> 
+    wxAuiDockArt_SetColour cobj__obj  (toCInt id)  cobj__colour  
+foreign import ccall "wxAuiDockArt_SetColour" wxAuiDockArt_SetColour :: Ptr (TAuiDockArt a) -> CInt -> Ptr (TColour c) -> IO ()
+
+-- | usage: (@auiDockArtSetFont obj id font@).
+auiDockArtSetFont :: AuiDockArt  a -> Id -> Font  c ->  IO ()
+auiDockArtSetFont _obj id _font 
+  = withObjectRef "auiDockArtSetFont" _obj $ \cobj__obj -> 
+    withObjectPtr _font $ \cobj__font -> 
+    wxAuiDockArt_SetFont cobj__obj  (toCInt id)  cobj__font  
+foreign import ccall "wxAuiDockArt_SetFont" wxAuiDockArt_SetFont :: Ptr (TAuiDockArt a) -> CInt -> Ptr (TFont c) -> IO ()
+
+-- | usage: (@auiDockArtSetMetric obj id newval@).
+auiDockArtSetMetric :: AuiDockArt  a -> Id -> Int ->  IO ()
+auiDockArtSetMetric _obj id newval 
+  = withObjectRef "auiDockArtSetMetric" _obj $ \cobj__obj -> 
+    wxAuiDockArt_SetMetric cobj__obj  (toCInt id)  (toCInt newval)  
+foreign import ccall "wxAuiDockArt_SetMetric" wxAuiDockArt_SetMetric :: Ptr (TAuiDockArt a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@auiManagerAddPane obj window direction caption@).
+auiManagerAddPane :: AuiManager  a -> Window  b -> Int -> String ->  IO Bool
+auiManagerAddPane _obj _window _direction _caption 
+  = withBoolResult $
+    withObjectRef "auiManagerAddPane" _obj $ \cobj__obj -> 
+    withObjectPtr _window $ \cobj__window -> 
+    withStringPtr _caption $ \cobj__caption -> 
+    wxAuiManager_AddPane cobj__obj  cobj__window  (toCInt _direction)  cobj__caption  
+foreign import ccall "wxAuiManager_AddPane" wxAuiManager_AddPane :: Ptr (TAuiManager a) -> Ptr (TWindow b) -> CInt -> Ptr (TWxString d) -> IO CBool
+
+-- | usage: (@auiManagerAddPaneByPaneInfo obj window paneinfo@).
+auiManagerAddPaneByPaneInfo :: AuiManager  a -> Window  b -> AuiPaneInfo  c ->  IO Bool
+auiManagerAddPaneByPaneInfo _obj _window _paneinfo 
+  = withBoolResult $
+    withObjectRef "auiManagerAddPaneByPaneInfo" _obj $ \cobj__obj -> 
+    withObjectPtr _window $ \cobj__window -> 
+    withObjectPtr _paneinfo $ \cobj__paneinfo -> 
+    wxAuiManager_AddPaneByPaneInfo cobj__obj  cobj__window  cobj__paneinfo  
+foreign import ccall "wxAuiManager_AddPaneByPaneInfo" wxAuiManager_AddPaneByPaneInfo :: Ptr (TAuiManager a) -> Ptr (TWindow b) -> Ptr (TAuiPaneInfo c) -> IO CBool
+
+-- | usage: (@auiManagerAddPaneByPaneInfoAndDropPosition obj window paneinfo xy@).
+auiManagerAddPaneByPaneInfoAndDropPosition :: AuiManager  a -> Window  b -> AuiPaneInfo  c -> Point ->  IO Bool
+auiManagerAddPaneByPaneInfoAndDropPosition _obj _window _paneinfo xy 
+  = withBoolResult $
+    withObjectRef "auiManagerAddPaneByPaneInfoAndDropPosition" _obj $ \cobj__obj -> 
+    withObjectPtr _window $ \cobj__window -> 
+    withObjectPtr _paneinfo $ \cobj__paneinfo -> 
+    wxAuiManager_AddPaneByPaneInfoAndDropPosition cobj__obj  cobj__window  cobj__paneinfo  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxAuiManager_AddPaneByPaneInfoAndDropPosition" wxAuiManager_AddPaneByPaneInfoAndDropPosition :: Ptr (TAuiManager a) -> Ptr (TWindow b) -> Ptr (TAuiPaneInfo c) -> CInt -> CInt -> IO CBool
+
+-- | usage: (@auiManagerCreate managedwnd flags@).
+auiManagerCreate :: Window  a -> Int ->  IO (AuiManager  ())
+auiManagerCreate _managedwnd _flags 
+  = withObjectResult $
+    withObjectPtr _managedwnd $ \cobj__managedwnd -> 
+    wxAuiManager_Create cobj__managedwnd  (toCInt _flags)  
+foreign import ccall "wxAuiManager_Create" wxAuiManager_Create :: Ptr (TWindow a) -> CInt -> IO (Ptr (TAuiManager ()))
+
+-- | usage: (@auiManagerDelete obj@).
+auiManagerDelete :: AuiManager  a ->  IO ()
+auiManagerDelete
+  = objectDelete
+
+
+-- | usage: (@auiManagerDetachPane obj window@).
+auiManagerDetachPane :: AuiManager  a -> Window  b ->  IO Bool
+auiManagerDetachPane _obj _window 
+  = withBoolResult $
+    withObjectRef "auiManagerDetachPane" _obj $ \cobj__obj -> 
+    withObjectPtr _window $ \cobj__window -> 
+    wxAuiManager_DetachPane cobj__obj  cobj__window  
+foreign import ccall "wxAuiManager_DetachPane" wxAuiManager_DetachPane :: Ptr (TAuiManager a) -> Ptr (TWindow b) -> IO CBool
+
+-- | usage: (@auiManagerEventCanVeto obj@).
+auiManagerEventCanVeto :: AuiManagerEvent  a ->  IO Bool
+auiManagerEventCanVeto _obj 
+  = withBoolResult $
+    withObjectRef "auiManagerEventCanVeto" _obj $ \cobj__obj -> 
+    wxAuiManagerEvent_CanVeto cobj__obj  
+foreign import ccall "wxAuiManagerEvent_CanVeto" wxAuiManagerEvent_CanVeto :: Ptr (TAuiManagerEvent a) -> IO CBool
+
+-- | usage: (@auiManagerEventCreate wxtype@).
+auiManagerEventCreate :: Int ->  IO (AuiManagerEvent  ())
+auiManagerEventCreate wxtype 
+  = withObjectResult $
+    wxAuiManagerEvent_Create (toCInt wxtype)  
+foreign import ccall "wxAuiManagerEvent_Create" wxAuiManagerEvent_Create :: CInt -> IO (Ptr (TAuiManagerEvent ()))
+
+-- | usage: (@auiManagerEventGetButton obj@).
+auiManagerEventGetButton :: AuiManagerEvent  a ->  IO Int
+auiManagerEventGetButton _obj 
+  = withIntResult $
+    withObjectRef "auiManagerEventGetButton" _obj $ \cobj__obj -> 
+    wxAuiManagerEvent_GetButton cobj__obj  
+foreign import ccall "wxAuiManagerEvent_GetButton" wxAuiManagerEvent_GetButton :: Ptr (TAuiManagerEvent a) -> IO CInt
+
+-- | usage: (@auiManagerEventGetDC obj@).
+auiManagerEventGetDC :: AuiManagerEvent  a ->  IO (DC  ())
+auiManagerEventGetDC _obj 
+  = withObjectResult $
+    withObjectRef "auiManagerEventGetDC" _obj $ \cobj__obj -> 
+    wxAuiManagerEvent_GetDC cobj__obj  
+foreign import ccall "wxAuiManagerEvent_GetDC" wxAuiManagerEvent_GetDC :: Ptr (TAuiManagerEvent a) -> IO (Ptr (TDC ()))
+
+-- | usage: (@auiManagerEventGetManager obj@).
+auiManagerEventGetManager :: AuiManagerEvent  a ->  IO (AuiManager  ())
+auiManagerEventGetManager _obj 
+  = withObjectResult $
+    withObjectRef "auiManagerEventGetManager" _obj $ \cobj__obj -> 
+    wxAuiManagerEvent_GetManager cobj__obj  
+foreign import ccall "wxAuiManagerEvent_GetManager" wxAuiManagerEvent_GetManager :: Ptr (TAuiManagerEvent a) -> IO (Ptr (TAuiManager ()))
+
+-- | usage: (@auiManagerEventGetPane obj@).
+auiManagerEventGetPane :: AuiManagerEvent  a ->  IO (AuiPaneInfo  ())
+auiManagerEventGetPane _obj 
+  = withObjectResult $
+    withObjectRef "auiManagerEventGetPane" _obj $ \cobj__obj -> 
+    wxAuiManagerEvent_GetPane cobj__obj  
+foreign import ccall "wxAuiManagerEvent_GetPane" wxAuiManagerEvent_GetPane :: Ptr (TAuiManagerEvent a) -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiManagerEventGetVeto obj@).
+auiManagerEventGetVeto :: AuiManagerEvent  a ->  IO Bool
+auiManagerEventGetVeto _obj 
+  = withBoolResult $
+    withObjectRef "auiManagerEventGetVeto" _obj $ \cobj__obj -> 
+    wxAuiManagerEvent_GetVeto cobj__obj  
+foreign import ccall "wxAuiManagerEvent_GetVeto" wxAuiManagerEvent_GetVeto :: Ptr (TAuiManagerEvent a) -> IO CBool
+
+-- | usage: (@auiManagerEventSetButton obj button@).
+auiManagerEventSetButton :: AuiManagerEvent  a -> Int ->  IO ()
+auiManagerEventSetButton _obj button 
+  = withObjectRef "auiManagerEventSetButton" _obj $ \cobj__obj -> 
+    wxAuiManagerEvent_SetButton cobj__obj  (toCInt button)  
+foreign import ccall "wxAuiManagerEvent_SetButton" wxAuiManagerEvent_SetButton :: Ptr (TAuiManagerEvent a) -> CInt -> IO ()
+
+-- | usage: (@auiManagerEventSetCanVeto obj canveto@).
+auiManagerEventSetCanVeto :: AuiManagerEvent  a -> Bool ->  IO ()
+auiManagerEventSetCanVeto _obj canveto 
+  = withObjectRef "auiManagerEventSetCanVeto" _obj $ \cobj__obj -> 
+    wxAuiManagerEvent_SetCanVeto cobj__obj  (toCBool canveto)  
+foreign import ccall "wxAuiManagerEvent_SetCanVeto" wxAuiManagerEvent_SetCanVeto :: Ptr (TAuiManagerEvent a) -> CBool -> IO ()
+
+-- | usage: (@auiManagerEventSetDC obj pdc@).
+auiManagerEventSetDC :: AuiManagerEvent  a -> DC  b ->  IO ()
+auiManagerEventSetDC _obj _pdc 
+  = withObjectRef "auiManagerEventSetDC" _obj $ \cobj__obj -> 
+    withObjectPtr _pdc $ \cobj__pdc -> 
+    wxAuiManagerEvent_SetDC cobj__obj  cobj__pdc  
+foreign import ccall "wxAuiManagerEvent_SetDC" wxAuiManagerEvent_SetDC :: Ptr (TAuiManagerEvent a) -> Ptr (TDC b) -> IO ()
+
+-- | usage: (@auiManagerEventSetManager obj manager@).
+auiManagerEventSetManager :: AuiManagerEvent  a -> AuiManager  b ->  IO ()
+auiManagerEventSetManager _obj _manager 
+  = withObjectRef "auiManagerEventSetManager" _obj $ \cobj__obj -> 
+    withObjectPtr _manager $ \cobj__manager -> 
+    wxAuiManagerEvent_SetManager cobj__obj  cobj__manager  
+foreign import ccall "wxAuiManagerEvent_SetManager" wxAuiManagerEvent_SetManager :: Ptr (TAuiManagerEvent a) -> Ptr (TAuiManager b) -> IO ()
+
+-- | usage: (@auiManagerEventSetPane obj pane@).
+auiManagerEventSetPane :: AuiManagerEvent  a -> AuiPaneInfo  b ->  IO ()
+auiManagerEventSetPane _obj _pane 
+  = withObjectRef "auiManagerEventSetPane" _obj $ \cobj__obj -> 
+    withObjectPtr _pane $ \cobj__pane -> 
+    wxAuiManagerEvent_SetPane cobj__obj  cobj__pane  
+foreign import ccall "wxAuiManagerEvent_SetPane" wxAuiManagerEvent_SetPane :: Ptr (TAuiManagerEvent a) -> Ptr (TAuiPaneInfo b) -> IO ()
+
+-- | usage: (@auiManagerEventVeto obj veto@).
+auiManagerEventVeto :: AuiManagerEvent  a -> Bool ->  IO ()
+auiManagerEventVeto _obj veto 
+  = withObjectRef "auiManagerEventVeto" _obj $ \cobj__obj -> 
+    wxAuiManagerEvent_Veto cobj__obj  (toCBool veto)  
+foreign import ccall "wxAuiManagerEvent_Veto" wxAuiManagerEvent_Veto :: Ptr (TAuiManagerEvent a) -> CBool -> IO ()
+
+-- | usage: (@auiManagerGetAllPanes obj@).
+auiManagerGetAllPanes :: AuiManager  a ->  IO (AuiPaneInfoArray  ())
+auiManagerGetAllPanes _obj 
+  = withObjectResult $
+    withObjectRef "auiManagerGetAllPanes" _obj $ \cobj__obj -> 
+    wxAuiManager_GetAllPanes cobj__obj  
+foreign import ccall "wxAuiManager_GetAllPanes" wxAuiManager_GetAllPanes :: Ptr (TAuiManager a) -> IO (Ptr (TAuiPaneInfoArray ()))
+
+-- | usage: (@auiManagerGetArtProvider obj@).
+auiManagerGetArtProvider :: AuiManager  a ->  IO (AuiDockArt  ())
+auiManagerGetArtProvider _obj 
+  = withObjectResult $
+    withObjectRef "auiManagerGetArtProvider" _obj $ \cobj__obj -> 
+    wxAuiManager_GetArtProvider cobj__obj  
+foreign import ccall "wxAuiManager_GetArtProvider" wxAuiManager_GetArtProvider :: Ptr (TAuiManager a) -> IO (Ptr (TAuiDockArt ()))
+
+-- | usage: (@auiManagerGetDockSizeConstraint obj widthpct heightpct@).
+auiManagerGetDockSizeConstraint :: AuiManager  a -> Ptr Double -> Ptr Double ->  IO ()
+auiManagerGetDockSizeConstraint _obj _widthpct _heightpct 
+  = withObjectRef "auiManagerGetDockSizeConstraint" _obj $ \cobj__obj -> 
+    wxAuiManager_GetDockSizeConstraint cobj__obj  _widthpct  _heightpct  
+foreign import ccall "wxAuiManager_GetDockSizeConstraint" wxAuiManager_GetDockSizeConstraint :: Ptr (TAuiManager a) -> Ptr Double -> Ptr Double -> IO ()
+
+-- | usage: (@auiManagerGetFlags obj@).
+auiManagerGetFlags :: AuiManager  a ->  IO Int
+auiManagerGetFlags _obj 
+  = withIntResult $
+    withObjectRef "auiManagerGetFlags" _obj $ \cobj__obj -> 
+    wxAuiManager_GetFlags cobj__obj  
+foreign import ccall "wxAuiManager_GetFlags" wxAuiManager_GetFlags :: Ptr (TAuiManager a) -> IO CInt
+
+-- | usage: (@auiManagerGetManagedWindow obj@).
+auiManagerGetManagedWindow :: AuiManager  a ->  IO (Window  ())
+auiManagerGetManagedWindow _obj 
+  = withObjectResult $
+    withObjectRef "auiManagerGetManagedWindow" _obj $ \cobj__obj -> 
+    wxAuiManager_GetManagedWindow cobj__obj  
+foreign import ccall "wxAuiManager_GetManagedWindow" wxAuiManager_GetManagedWindow :: Ptr (TAuiManager a) -> IO (Ptr (TWindow ()))
+
+-- | usage: (@auiManagerGetManager window@).
+auiManagerGetManager :: Window  a ->  IO (AuiManager  ())
+auiManagerGetManager _window 
+  = withObjectResult $
+    withObjectPtr _window $ \cobj__window -> 
+    wxAuiManager_GetManager cobj__window  
+foreign import ccall "wxAuiManager_GetManager" wxAuiManager_GetManager :: Ptr (TWindow a) -> IO (Ptr (TAuiManager ()))
+
+-- | usage: (@auiManagerGetPaneByName obj name@).
+auiManagerGetPaneByName :: AuiManager  a -> String ->  IO (AuiPaneInfo  ())
+auiManagerGetPaneByName _obj _name 
+  = withObjectResult $
+    withObjectRef "auiManagerGetPaneByName" _obj $ \cobj__obj -> 
+    withStringPtr _name $ \cobj__name -> 
+    wxAuiManager_GetPaneByName cobj__obj  cobj__name  
+foreign import ccall "wxAuiManager_GetPaneByName" wxAuiManager_GetPaneByName :: Ptr (TAuiManager a) -> Ptr (TWxString b) -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiManagerGetPaneByWindow obj window@).
+auiManagerGetPaneByWindow :: AuiManager  a -> Window  b ->  IO (AuiPaneInfo  ())
+auiManagerGetPaneByWindow _obj _window 
+  = withObjectResult $
+    withObjectRef "auiManagerGetPaneByWindow" _obj $ \cobj__obj -> 
+    withObjectPtr _window $ \cobj__window -> 
+    wxAuiManager_GetPaneByWindow cobj__obj  cobj__window  
+foreign import ccall "wxAuiManager_GetPaneByWindow" wxAuiManager_GetPaneByWindow :: Ptr (TAuiManager a) -> Ptr (TWindow b) -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiManagerHideHint obj@).
+auiManagerHideHint :: AuiManager  a ->  IO ()
+auiManagerHideHint _obj 
+  = withObjectRef "auiManagerHideHint" _obj $ \cobj__obj -> 
+    wxAuiManager_HideHint cobj__obj  
+foreign import ccall "wxAuiManager_HideHint" wxAuiManager_HideHint :: Ptr (TAuiManager a) -> IO ()
+
+-- | usage: (@auiManagerInsertPane obj window insertlocation insertlevel@).
+auiManagerInsertPane :: AuiManager  a -> Window  b -> AuiPaneInfo  c -> Int ->  IO Bool
+auiManagerInsertPane _obj _window _insertlocation _insertlevel 
+  = withBoolResult $
+    withObjectRef "auiManagerInsertPane" _obj $ \cobj__obj -> 
+    withObjectPtr _window $ \cobj__window -> 
+    withObjectPtr _insertlocation $ \cobj__insertlocation -> 
+    wxAuiManager_InsertPane cobj__obj  cobj__window  cobj__insertlocation  (toCInt _insertlevel)  
+foreign import ccall "wxAuiManager_InsertPane" wxAuiManager_InsertPane :: Ptr (TAuiManager a) -> Ptr (TWindow b) -> Ptr (TAuiPaneInfo c) -> CInt -> IO CBool
+
+-- | usage: (@auiManagerLoadPaneInfo obj panepart pane@).
+auiManagerLoadPaneInfo :: AuiManager  a -> String -> AuiPaneInfo  c ->  IO ()
+auiManagerLoadPaneInfo _obj _panepart _pane 
+  = withObjectRef "auiManagerLoadPaneInfo" _obj $ \cobj__obj -> 
+    withStringPtr _panepart $ \cobj__panepart -> 
+    withObjectPtr _pane $ \cobj__pane -> 
+    wxAuiManager_LoadPaneInfo cobj__obj  cobj__panepart  cobj__pane  
+foreign import ccall "wxAuiManager_LoadPaneInfo" wxAuiManager_LoadPaneInfo :: Ptr (TAuiManager a) -> Ptr (TWxString b) -> Ptr (TAuiPaneInfo c) -> IO ()
+
+-- | usage: (@auiManagerLoadPerspective obj perspective update@).
+auiManagerLoadPerspective :: AuiManager  a -> String -> Bool ->  IO Bool
+auiManagerLoadPerspective _obj _perspective update 
+  = withBoolResult $
+    withObjectRef "auiManagerLoadPerspective" _obj $ \cobj__obj -> 
+    withStringPtr _perspective $ \cobj__perspective -> 
+    wxAuiManager_LoadPerspective cobj__obj  cobj__perspective  (toCBool update)  
+foreign import ccall "wxAuiManager_LoadPerspective" wxAuiManager_LoadPerspective :: Ptr (TAuiManager a) -> Ptr (TWxString b) -> CBool -> IO CBool
+
+-- | usage: (@auiManagerSavePaneInfo obj pane@).
+auiManagerSavePaneInfo :: AuiManager  a -> AuiPaneInfo  b ->  IO (String)
+auiManagerSavePaneInfo _obj _pane 
+  = withManagedStringResult $
+    withObjectRef "auiManagerSavePaneInfo" _obj $ \cobj__obj -> 
+    withObjectPtr _pane $ \cobj__pane -> 
+    wxAuiManager_SavePaneInfo cobj__obj  cobj__pane  
+foreign import ccall "wxAuiManager_SavePaneInfo" wxAuiManager_SavePaneInfo :: Ptr (TAuiManager a) -> Ptr (TAuiPaneInfo b) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@auiManagerSavePerspective obj@).
+auiManagerSavePerspective :: AuiManager  a ->  IO (String)
+auiManagerSavePerspective _obj 
+  = withManagedStringResult $
+    withObjectRef "auiManagerSavePerspective" _obj $ \cobj__obj -> 
+    wxAuiManager_SavePerspective cobj__obj  
+foreign import ccall "wxAuiManager_SavePerspective" wxAuiManager_SavePerspective :: Ptr (TAuiManager a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@auiManagerSetArtProvider obj artprovider@).
+auiManagerSetArtProvider :: AuiManager  a -> AuiDockArt  b ->  IO ()
+auiManagerSetArtProvider _obj _artprovider 
+  = withObjectRef "auiManagerSetArtProvider" _obj $ \cobj__obj -> 
+    withObjectPtr _artprovider $ \cobj__artprovider -> 
+    wxAuiManager_SetArtProvider cobj__obj  cobj__artprovider  
+foreign import ccall "wxAuiManager_SetArtProvider" wxAuiManager_SetArtProvider :: Ptr (TAuiManager a) -> Ptr (TAuiDockArt b) -> IO ()
+
+-- | usage: (@auiManagerSetDockSizeConstraint obj widthpct heightpct@).
+auiManagerSetDockSizeConstraint :: AuiManager  a -> Double -> Double ->  IO ()
+auiManagerSetDockSizeConstraint _obj widthpct heightpct 
+  = withObjectRef "auiManagerSetDockSizeConstraint" _obj $ \cobj__obj -> 
+    wxAuiManager_SetDockSizeConstraint cobj__obj  widthpct  heightpct  
+foreign import ccall "wxAuiManager_SetDockSizeConstraint" wxAuiManager_SetDockSizeConstraint :: Ptr (TAuiManager a) -> Double -> Double -> IO ()
+
+-- | usage: (@auiManagerSetFlags obj flags@).
+auiManagerSetFlags :: AuiManager  a -> Int ->  IO ()
+auiManagerSetFlags _obj flags 
+  = withObjectRef "auiManagerSetFlags" _obj $ \cobj__obj -> 
+    wxAuiManager_SetFlags cobj__obj  (toCInt flags)  
+foreign import ccall "wxAuiManager_SetFlags" wxAuiManager_SetFlags :: Ptr (TAuiManager a) -> CInt -> IO ()
+
+-- | usage: (@auiManagerSetManagedWindow obj managedwnd@).
+auiManagerSetManagedWindow :: AuiManager  a -> Window  b ->  IO ()
+auiManagerSetManagedWindow _obj _managedwnd 
+  = withObjectRef "auiManagerSetManagedWindow" _obj $ \cobj__obj -> 
+    withObjectPtr _managedwnd $ \cobj__managedwnd -> 
+    wxAuiManager_SetManagedWindow cobj__obj  cobj__managedwnd  
+foreign import ccall "wxAuiManager_SetManagedWindow" wxAuiManager_SetManagedWindow :: Ptr (TAuiManager a) -> Ptr (TWindow b) -> IO ()
+
+-- | usage: (@auiManagerShowHint obj rect@).
+auiManagerShowHint :: AuiManager  a -> Rect ->  IO ()
+auiManagerShowHint _obj _rect 
+  = withObjectRef "auiManagerShowHint" _obj $ \cobj__obj -> 
+    withWxRectPtr _rect $ \cobj__rect -> 
+    wxAuiManager_ShowHint cobj__obj  cobj__rect  
+foreign import ccall "wxAuiManager_ShowHint" wxAuiManager_ShowHint :: Ptr (TAuiManager a) -> Ptr (TWxRect b) -> IO ()
+
+-- | usage: (@auiManagerUnInit obj@).
+auiManagerUnInit :: AuiManager  a ->  IO ()
+auiManagerUnInit _obj 
+  = withObjectRef "auiManagerUnInit" _obj $ \cobj__obj -> 
+    wxAuiManager_UnInit cobj__obj  
+foreign import ccall "wxAuiManager_UnInit" wxAuiManager_UnInit :: Ptr (TAuiManager a) -> IO ()
+
+-- | usage: (@auiManagerUpdate obj@).
+auiManagerUpdate :: AuiManager  a ->  IO ()
+auiManagerUpdate _obj 
+  = withObjectRef "auiManagerUpdate" _obj $ \cobj__obj -> 
+    wxAuiManager_Update cobj__obj  
+foreign import ccall "wxAuiManager_Update" wxAuiManager_Update :: Ptr (TAuiManager a) -> IO ()
+
+-- | usage: (@auiNotebookAddPage obj page text select imageId@).
+auiNotebookAddPage :: AuiNotebook  a -> Window  b -> String -> Bool -> Int ->  IO Bool
+auiNotebookAddPage _obj _page _text select imageId 
+  = withBoolResult $
+    withObjectRef "auiNotebookAddPage" _obj $ \cobj__obj -> 
+    withObjectPtr _page $ \cobj__page -> 
+    withStringPtr _text $ \cobj__text -> 
+    wxAuiNotebook_AddPage cobj__obj  cobj__page  cobj__text  (toCBool select)  (toCInt imageId)  
+foreign import ccall "wxAuiNotebook_AddPage" wxAuiNotebook_AddPage :: Ptr (TAuiNotebook a) -> Ptr (TWindow b) -> Ptr (TWxString c) -> CBool -> CInt -> IO CBool
+
+-- | usage: (@auiNotebookAddPageWithBitmap obj page caption select bitmap@).
+auiNotebookAddPageWithBitmap :: AuiNotebook  a -> Window  b -> String -> Bool -> Bitmap  e ->  IO Bool
+auiNotebookAddPageWithBitmap _obj _page _caption select _bitmap 
+  = withBoolResult $
+    withObjectRef "auiNotebookAddPageWithBitmap" _obj $ \cobj__obj -> 
+    withObjectPtr _page $ \cobj__page -> 
+    withStringPtr _caption $ \cobj__caption -> 
+    withObjectPtr _bitmap $ \cobj__bitmap -> 
+    wxAuiNotebook_AddPageWithBitmap cobj__obj  cobj__page  cobj__caption  (toCBool select)  cobj__bitmap  
+foreign import ccall "wxAuiNotebook_AddPageWithBitmap" wxAuiNotebook_AddPageWithBitmap :: Ptr (TAuiNotebook a) -> Ptr (TWindow b) -> Ptr (TWxString c) -> CBool -> Ptr (TBitmap e) -> IO CBool
+
+-- | usage: (@auiNotebookAdvanceSelection obj forward@).
+auiNotebookAdvanceSelection :: AuiNotebook  a -> Bool ->  IO ()
+auiNotebookAdvanceSelection _obj forward 
+  = withObjectRef "auiNotebookAdvanceSelection" _obj $ \cobj__obj -> 
+    wxAuiNotebook_AdvanceSelection cobj__obj  (toCBool forward)  
+foreign import ccall "wxAuiNotebook_AdvanceSelection" wxAuiNotebook_AdvanceSelection :: Ptr (TAuiNotebook a) -> CBool -> IO ()
+
+-- | usage: (@auiNotebookChangeSelection obj n@).
+auiNotebookChangeSelection :: AuiNotebook  a -> Int ->  IO Int
+auiNotebookChangeSelection _obj n 
+  = withIntResult $
+    withObjectRef "auiNotebookChangeSelection" _obj $ \cobj__obj -> 
+    wxAuiNotebook_ChangeSelection cobj__obj  (toCInt n)  
+foreign import ccall "wxAuiNotebook_ChangeSelection" wxAuiNotebook_ChangeSelection :: Ptr (TAuiNotebook a) -> CInt -> IO CInt
+
+-- | usage: (@auiNotebookCreate parent id xy widthheight style@).
+auiNotebookCreate :: Window  a -> Id -> Point -> Size -> Int ->  IO (AuiNotebook  ())
+auiNotebookCreate _parent id xy _widthheight style 
+  = withObjectResult $
+    withObjectPtr _parent $ \cobj__parent -> 
+    wxAuiNotebook_Create cobj__parent  (toCInt id)  (toCIntPointX xy) (toCIntPointY xy)  (toCIntSizeW _widthheight) (toCIntSizeH _widthheight)  (toCInt style)  
+foreign import ccall "wxAuiNotebook_Create" wxAuiNotebook_Create :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TAuiNotebook ()))
+
+-- | usage: (@auiNotebookCreateDefault@).
+auiNotebookCreateDefault ::  IO (AuiNotebook  ())
+auiNotebookCreateDefault 
+  = withObjectResult $
+    wxAuiNotebook_CreateDefault 
+foreign import ccall "wxAuiNotebook_CreateDefault" wxAuiNotebook_CreateDefault :: IO (Ptr (TAuiNotebook ()))
+
+-- | usage: (@auiNotebookCreateFromDefault obj parent id xy widthheight style@).
+auiNotebookCreateFromDefault :: AuiNotebook  a -> Window  b -> Id -> Point -> Size -> Int ->  IO Bool
+auiNotebookCreateFromDefault _obj _parent id xy _widthheight style 
+  = withBoolResult $
+    withObjectRef "auiNotebookCreateFromDefault" _obj $ \cobj__obj -> 
+    withObjectPtr _parent $ \cobj__parent -> 
+    wxAuiNotebook_CreateFromDefault cobj__obj  cobj__parent  (toCInt id)  (toCIntPointX xy) (toCIntPointY xy)  (toCIntSizeW _widthheight) (toCIntSizeH _widthheight)  (toCInt style)  
+foreign import ccall "wxAuiNotebook_CreateFromDefault" wxAuiNotebook_CreateFromDefault :: Ptr (TAuiNotebook a) -> Ptr (TWindow b) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO CBool
+
+-- | usage: (@auiNotebookDeleteAllPages obj@).
+auiNotebookDeleteAllPages :: AuiNotebook  a ->  IO Bool
+auiNotebookDeleteAllPages _obj 
+  = withBoolResult $
+    withObjectRef "auiNotebookDeleteAllPages" _obj $ \cobj__obj -> 
+    wxAuiNotebook_DeleteAllPages cobj__obj  
+foreign import ccall "wxAuiNotebook_DeleteAllPages" wxAuiNotebook_DeleteAllPages :: Ptr (TAuiNotebook a) -> IO CBool
+
+-- | usage: (@auiNotebookDeletePage obj page@).
+auiNotebookDeletePage :: AuiNotebook  a -> Int ->  IO Bool
+auiNotebookDeletePage _obj page 
+  = withBoolResult $
+    withObjectRef "auiNotebookDeletePage" _obj $ \cobj__obj -> 
+    wxAuiNotebook_DeletePage cobj__obj  (toCInt page)  
+foreign import ccall "wxAuiNotebook_DeletePage" wxAuiNotebook_DeletePage :: Ptr (TAuiNotebook a) -> CInt -> IO CBool
+
+-- | usage: (@auiNotebookEventCreate commandtype winid@).
+auiNotebookEventCreate :: Int -> Int ->  IO (AuiNotebookEvent  ())
+auiNotebookEventCreate commandtype winid 
+  = withObjectResult $
+    wxAuiNotebookEvent_Create (toCInt commandtype)  (toCInt winid)  
+foreign import ccall "wxAuiNotebookEvent_Create" wxAuiNotebookEvent_Create :: CInt -> CInt -> IO (Ptr (TAuiNotebookEvent ()))
+
+-- | usage: (@auiNotebookEventGetDragSource obj@).
+auiNotebookEventGetDragSource :: AuiNotebookEvent  a ->  IO (AuiNotebook  ())
+auiNotebookEventGetDragSource _obj 
+  = withObjectResult $
+    withObjectRef "auiNotebookEventGetDragSource" _obj $ \cobj__obj -> 
+    wxAuiNotebookEvent_GetDragSource cobj__obj  
+foreign import ccall "wxAuiNotebookEvent_GetDragSource" wxAuiNotebookEvent_GetDragSource :: Ptr (TAuiNotebookEvent a) -> IO (Ptr (TAuiNotebook ()))
+
+-- | usage: (@auiNotebookGetArtProvider obj@).
+auiNotebookGetArtProvider :: AuiNotebook  a ->  IO (AuiTabArt  ())
+auiNotebookGetArtProvider _obj 
+  = withObjectResult $
+    withObjectRef "auiNotebookGetArtProvider" _obj $ \cobj__obj -> 
+    wxAuiNotebook_GetArtProvider cobj__obj  
+foreign import ccall "wxAuiNotebook_GetArtProvider" wxAuiNotebook_GetArtProvider :: Ptr (TAuiNotebook a) -> IO (Ptr (TAuiTabArt ()))
+
+-- | usage: (@auiNotebookGetCurrentPage obj@).
+auiNotebookGetCurrentPage :: AuiNotebook  a ->  IO (Window  ())
+auiNotebookGetCurrentPage _obj 
+  = withObjectResult $
+    withObjectRef "auiNotebookGetCurrentPage" _obj $ \cobj__obj -> 
+    wxAuiNotebook_GetCurrentPage cobj__obj  
+foreign import ccall "wxAuiNotebook_GetCurrentPage" wxAuiNotebook_GetCurrentPage :: Ptr (TAuiNotebook a) -> IO (Ptr (TWindow ()))
+
+-- | usage: (@auiNotebookGetHeightForPageHeight obj pageHeight@).
+auiNotebookGetHeightForPageHeight :: AuiNotebook  a -> Int ->  IO Int
+auiNotebookGetHeightForPageHeight _obj pageHeight 
+  = withIntResult $
+    withObjectRef "auiNotebookGetHeightForPageHeight" _obj $ \cobj__obj -> 
+    wxAuiNotebook_GetHeightForPageHeight cobj__obj  (toCInt pageHeight)  
+foreign import ccall "wxAuiNotebook_GetHeightForPageHeight" wxAuiNotebook_GetHeightForPageHeight :: Ptr (TAuiNotebook a) -> CInt -> IO CInt
+
+-- | usage: (@auiNotebookGetPage obj pageidx@).
+auiNotebookGetPage :: AuiNotebook  a -> Int ->  IO (Window  ())
+auiNotebookGetPage _obj pageidx 
+  = withObjectResult $
+    withObjectRef "auiNotebookGetPage" _obj $ \cobj__obj -> 
+    wxAuiNotebook_GetPage cobj__obj  (toCInt pageidx)  
+foreign import ccall "wxAuiNotebook_GetPage" wxAuiNotebook_GetPage :: Ptr (TAuiNotebook a) -> CInt -> IO (Ptr (TWindow ()))
+
+-- | usage: (@auiNotebookGetPageBitmap obj page@).
+auiNotebookGetPageBitmap :: AuiNotebook  a -> Int ->  IO (Bitmap  ())
+auiNotebookGetPageBitmap _obj page 
+  = withRefBitmap $ \pref -> 
+    withObjectRef "auiNotebookGetPageBitmap" _obj $ \cobj__obj -> 
+    wxAuiNotebook_GetPageBitmap cobj__obj  (toCInt page)   pref
+foreign import ccall "wxAuiNotebook_GetPageBitmap" wxAuiNotebook_GetPageBitmap :: Ptr (TAuiNotebook a) -> CInt -> Ptr (TBitmap ()) -> IO ()
+
+-- | usage: (@auiNotebookGetPageCount obj@).
+auiNotebookGetPageCount :: AuiNotebook  a ->  IO Int
+auiNotebookGetPageCount _obj 
+  = withIntResult $
+    withObjectRef "auiNotebookGetPageCount" _obj $ \cobj__obj -> 
+    wxAuiNotebook_GetPageCount cobj__obj  
+foreign import ccall "wxAuiNotebook_GetPageCount" wxAuiNotebook_GetPageCount :: Ptr (TAuiNotebook a) -> IO CInt
+
+-- | usage: (@auiNotebookGetPageIndex obj pagewnd@).
+auiNotebookGetPageIndex :: AuiNotebook  a -> Window  b ->  IO Int
+auiNotebookGetPageIndex _obj _pagewnd 
+  = withIntResult $
+    withObjectRef "auiNotebookGetPageIndex" _obj $ \cobj__obj -> 
+    withObjectPtr _pagewnd $ \cobj__pagewnd -> 
+    wxAuiNotebook_GetPageIndex cobj__obj  cobj__pagewnd  
+foreign import ccall "wxAuiNotebook_GetPageIndex" wxAuiNotebook_GetPageIndex :: Ptr (TAuiNotebook a) -> Ptr (TWindow b) -> IO CInt
+
+-- | usage: (@auiNotebookGetPageText obj page@).
+auiNotebookGetPageText :: AuiNotebook  a -> Int ->  IO (String)
+auiNotebookGetPageText _obj page 
+  = withManagedStringResult $
+    withObjectRef "auiNotebookGetPageText" _obj $ \cobj__obj -> 
+    wxAuiNotebook_GetPageText cobj__obj  (toCInt page)  
+foreign import ccall "wxAuiNotebook_GetPageText" wxAuiNotebook_GetPageText :: Ptr (TAuiNotebook a) -> CInt -> IO (Ptr (TWxString ()))
+
+-- | usage: (@auiNotebookGetPageToolTip obj pageIdx@).
+auiNotebookGetPageToolTip :: AuiNotebook  a -> Int ->  IO (String)
+auiNotebookGetPageToolTip _obj pageIdx 
+  = withManagedStringResult $
+    withObjectRef "auiNotebookGetPageToolTip" _obj $ \cobj__obj -> 
+    wxAuiNotebook_GetPageToolTip cobj__obj  (toCInt pageIdx)  
+foreign import ccall "wxAuiNotebook_GetPageToolTip" wxAuiNotebook_GetPageToolTip :: Ptr (TAuiNotebook a) -> CInt -> IO (Ptr (TWxString ()))
+
+-- | usage: (@auiNotebookGetSelection obj@).
+auiNotebookGetSelection :: AuiNotebook  a ->  IO Int
+auiNotebookGetSelection _obj 
+  = withIntResult $
+    withObjectRef "auiNotebookGetSelection" _obj $ \cobj__obj -> 
+    wxAuiNotebook_GetSelection cobj__obj  
+foreign import ccall "wxAuiNotebook_GetSelection" wxAuiNotebook_GetSelection :: Ptr (TAuiNotebook a) -> IO CInt
+
+-- | usage: (@auiNotebookGetTabCtrlHeight obj@).
+auiNotebookGetTabCtrlHeight :: AuiNotebook  a ->  IO Int
+auiNotebookGetTabCtrlHeight _obj 
+  = withIntResult $
+    withObjectRef "auiNotebookGetTabCtrlHeight" _obj $ \cobj__obj -> 
+    wxAuiNotebook_GetTabCtrlHeight cobj__obj  
+foreign import ccall "wxAuiNotebook_GetTabCtrlHeight" wxAuiNotebook_GetTabCtrlHeight :: Ptr (TAuiNotebook a) -> IO CInt
+
+-- | usage: (@auiNotebookInsertPage obj index page text select imageId@).
+auiNotebookInsertPage :: AuiNotebook  a -> Int -> Window  c -> String -> Bool -> Int ->  IO Bool
+auiNotebookInsertPage _obj index _page _text select imageId 
+  = withBoolResult $
+    withObjectRef "auiNotebookInsertPage" _obj $ \cobj__obj -> 
+    withObjectPtr _page $ \cobj__page -> 
+    withStringPtr _text $ \cobj__text -> 
+    wxAuiNotebook_InsertPage cobj__obj  (toCInt index)  cobj__page  cobj__text  (toCBool select)  (toCInt imageId)  
+foreign import ccall "wxAuiNotebook_InsertPage" wxAuiNotebook_InsertPage :: Ptr (TAuiNotebook a) -> CInt -> Ptr (TWindow c) -> Ptr (TWxString d) -> CBool -> CInt -> IO CBool
+
+-- | usage: (@auiNotebookInsertPageWithBitmap obj pageidx page caption select bitmap@).
+auiNotebookInsertPageWithBitmap :: AuiNotebook  a -> Int -> Window  c -> String -> Bool -> Bitmap  f ->  IO Bool
+auiNotebookInsertPageWithBitmap _obj pageidx _page _caption select _bitmap 
+  = withBoolResult $
+    withObjectRef "auiNotebookInsertPageWithBitmap" _obj $ \cobj__obj -> 
+    withObjectPtr _page $ \cobj__page -> 
+    withStringPtr _caption $ \cobj__caption -> 
+    withObjectPtr _bitmap $ \cobj__bitmap -> 
+    wxAuiNotebook_InsertPageWithBitmap cobj__obj  (toCInt pageidx)  cobj__page  cobj__caption  (toCBool select)  cobj__bitmap  
+foreign import ccall "wxAuiNotebook_InsertPageWithBitmap" wxAuiNotebook_InsertPageWithBitmap :: Ptr (TAuiNotebook a) -> CInt -> Ptr (TWindow c) -> Ptr (TWxString d) -> CBool -> Ptr (TBitmap f) -> IO CBool
+
+-- | usage: (@auiNotebookPageActive obj@).
+auiNotebookPageActive :: AuiNotebookPage  a ->  IO Bool
+auiNotebookPageActive _obj 
+  = withBoolResult $
+    withObjectRef "auiNotebookPageActive" _obj $ \cobj__obj -> 
+    wxAuiNotebookPage_Active cobj__obj  
+foreign import ccall "wxAuiNotebookPage_Active" wxAuiNotebookPage_Active :: Ptr (TAuiNotebookPage a) -> IO CBool
+
+-- | usage: (@auiNotebookPageArrayCreate@).
+auiNotebookPageArrayCreate ::  IO (AuiNotebookPageArray  ())
+auiNotebookPageArrayCreate 
+  = withObjectResult $
+    wxAuiNotebookPageArray_Create 
+foreign import ccall "wxAuiNotebookPageArray_Create" wxAuiNotebookPageArray_Create :: IO (Ptr (TAuiNotebookPageArray ()))
+
+-- | usage: (@auiNotebookPageArrayDelete obj@).
+auiNotebookPageArrayDelete :: AuiNotebookPageArray  a ->  IO ()
+auiNotebookPageArrayDelete _obj 
+  = withObjectRef "auiNotebookPageArrayDelete" _obj $ \cobj__obj -> 
+    wxAuiNotebookPageArray_Delete cobj__obj  
+foreign import ccall "wxAuiNotebookPageArray_Delete" wxAuiNotebookPageArray_Delete :: Ptr (TAuiNotebookPageArray a) -> IO ()
+
+-- | usage: (@auiNotebookPageArrayGetCount obj@).
+auiNotebookPageArrayGetCount :: AuiNotebookPageArray  a ->  IO Int
+auiNotebookPageArrayGetCount _obj 
+  = withIntResult $
+    withObjectRef "auiNotebookPageArrayGetCount" _obj $ \cobj__obj -> 
+    wxAuiNotebookPageArray_GetCount cobj__obj  
+foreign import ccall "wxAuiNotebookPageArray_GetCount" wxAuiNotebookPageArray_GetCount :: Ptr (TAuiNotebookPageArray a) -> IO CInt
+
+-- | usage: (@auiNotebookPageArrayItem obj idx@).
+auiNotebookPageArrayItem :: AuiNotebookPageArray  a -> Int ->  IO (AuiNotebookPage  ())
+auiNotebookPageArrayItem _obj _idx 
+  = withObjectResult $
+    withObjectRef "auiNotebookPageArrayItem" _obj $ \cobj__obj -> 
+    wxAuiNotebookPageArray_Item cobj__obj  (toCInt _idx)  
+foreign import ccall "wxAuiNotebookPageArray_Item" wxAuiNotebookPageArray_Item :: Ptr (TAuiNotebookPageArray a) -> CInt -> IO (Ptr (TAuiNotebookPage ()))
+
+-- | usage: (@auiNotebookPageBitmap obj@).
+auiNotebookPageBitmap :: AuiNotebookPage  a ->  IO (Bitmap  ())
+auiNotebookPageBitmap _obj 
+  = withManagedBitmapResult $
+    withObjectRef "auiNotebookPageBitmap" _obj $ \cobj__obj -> 
+    wxAuiNotebookPage_Bitmap cobj__obj  
+foreign import ccall "wxAuiNotebookPage_Bitmap" wxAuiNotebookPage_Bitmap :: Ptr (TAuiNotebookPage a) -> IO (Ptr (TBitmap ()))
+
+-- | usage: (@auiNotebookPageCaption obj@).
+auiNotebookPageCaption :: AuiNotebookPage  a ->  IO (String)
+auiNotebookPageCaption _obj 
+  = withManagedStringResult $
+    withObjectRef "auiNotebookPageCaption" _obj $ \cobj__obj -> 
+    wxAuiNotebookPage_Caption cobj__obj  
+foreign import ccall "wxAuiNotebookPage_Caption" wxAuiNotebookPage_Caption :: Ptr (TAuiNotebookPage a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@auiNotebookPageRect obj@).
+auiNotebookPageRect :: AuiNotebookPage  a ->  IO (Rect)
+auiNotebookPageRect _obj 
+  = withWxRectResult $
+    withObjectRef "auiNotebookPageRect" _obj $ \cobj__obj -> 
+    wxAuiNotebookPage_Rect cobj__obj  
+foreign import ccall "wxAuiNotebookPage_Rect" wxAuiNotebookPage_Rect :: Ptr (TAuiNotebookPage a) -> IO (Ptr (TWxRect ()))
+
+-- | usage: (@auiNotebookPageTooltip obj@).
+auiNotebookPageTooltip :: AuiNotebookPage  a ->  IO (String)
+auiNotebookPageTooltip _obj 
+  = withManagedStringResult $
+    withObjectRef "auiNotebookPageTooltip" _obj $ \cobj__obj -> 
+    wxAuiNotebookPage_Tooltip cobj__obj  
+foreign import ccall "wxAuiNotebookPage_Tooltip" wxAuiNotebookPage_Tooltip :: Ptr (TAuiNotebookPage a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@auiNotebookPageWindow obj@).
+auiNotebookPageWindow :: AuiNotebookPage  a ->  IO (Window  ())
+auiNotebookPageWindow _obj 
+  = withObjectResult $
+    withObjectRef "auiNotebookPageWindow" _obj $ \cobj__obj -> 
+    wxAuiNotebookPage_Window cobj__obj  
+foreign import ccall "wxAuiNotebookPage_Window" wxAuiNotebookPage_Window :: Ptr (TAuiNotebookPage a) -> IO (Ptr (TWindow ()))
+
+-- | usage: (@auiNotebookRemovePage obj page@).
+auiNotebookRemovePage :: AuiNotebook  a -> Int ->  IO Bool
+auiNotebookRemovePage _obj page 
+  = withBoolResult $
+    withObjectRef "auiNotebookRemovePage" _obj $ \cobj__obj -> 
+    wxAuiNotebook_RemovePage cobj__obj  (toCInt page)  
+foreign import ccall "wxAuiNotebook_RemovePage" wxAuiNotebook_RemovePage :: Ptr (TAuiNotebook a) -> CInt -> IO CBool
+
+-- | usage: (@auiNotebookSetArtProvider obj art@).
+auiNotebookSetArtProvider :: AuiNotebook  a -> AuiTabArt  b ->  IO ()
+auiNotebookSetArtProvider _obj _art 
+  = withObjectRef "auiNotebookSetArtProvider" _obj $ \cobj__obj -> 
+    withObjectPtr _art $ \cobj__art -> 
+    wxAuiNotebook_SetArtProvider cobj__obj  cobj__art  
+foreign import ccall "wxAuiNotebook_SetArtProvider" wxAuiNotebook_SetArtProvider :: Ptr (TAuiNotebook a) -> Ptr (TAuiTabArt b) -> IO ()
+
+-- | usage: (@auiNotebookSetFont obj font@).
+auiNotebookSetFont :: AuiNotebook  a -> Font  b ->  IO Bool
+auiNotebookSetFont _obj _font 
+  = withBoolResult $
+    withObjectRef "auiNotebookSetFont" _obj $ \cobj__obj -> 
+    withObjectPtr _font $ \cobj__font -> 
+    wxAuiNotebook_SetFont cobj__obj  cobj__font  
+foreign import ccall "wxAuiNotebook_SetFont" wxAuiNotebook_SetFont :: Ptr (TAuiNotebook a) -> Ptr (TFont b) -> IO CBool
+
+-- | usage: (@auiNotebookSetMeasuringFont obj font@).
+auiNotebookSetMeasuringFont :: AuiNotebook  a -> Font  b ->  IO ()
+auiNotebookSetMeasuringFont _obj _font 
+  = withObjectRef "auiNotebookSetMeasuringFont" _obj $ \cobj__obj -> 
+    withObjectPtr _font $ \cobj__font -> 
+    wxAuiNotebook_SetMeasuringFont cobj__obj  cobj__font  
+foreign import ccall "wxAuiNotebook_SetMeasuringFont" wxAuiNotebook_SetMeasuringFont :: Ptr (TAuiNotebook a) -> Ptr (TFont b) -> IO ()
+
+-- | usage: (@auiNotebookSetNormalFont obj font@).
+auiNotebookSetNormalFont :: AuiNotebook  a -> Font  b ->  IO ()
+auiNotebookSetNormalFont _obj _font 
+  = withObjectRef "auiNotebookSetNormalFont" _obj $ \cobj__obj -> 
+    withObjectPtr _font $ \cobj__font -> 
+    wxAuiNotebook_SetNormalFont cobj__obj  cobj__font  
+foreign import ccall "wxAuiNotebook_SetNormalFont" wxAuiNotebook_SetNormalFont :: Ptr (TAuiNotebook a) -> Ptr (TFont b) -> IO ()
+
+-- | usage: (@auiNotebookSetPageBitmap obj page bitmap@).
+auiNotebookSetPageBitmap :: AuiNotebook  a -> Int -> Bitmap  c ->  IO Bool
+auiNotebookSetPageBitmap _obj page _bitmap 
+  = withBoolResult $
+    withObjectRef "auiNotebookSetPageBitmap" _obj $ \cobj__obj -> 
+    withObjectPtr _bitmap $ \cobj__bitmap -> 
+    wxAuiNotebook_SetPageBitmap cobj__obj  (toCInt page)  cobj__bitmap  
+foreign import ccall "wxAuiNotebook_SetPageBitmap" wxAuiNotebook_SetPageBitmap :: Ptr (TAuiNotebook a) -> CInt -> Ptr (TBitmap c) -> IO CBool
+
+-- | usage: (@auiNotebookSetPageImage obj n imageId@).
+auiNotebookSetPageImage :: AuiNotebook  a -> Int -> Int ->  IO Bool
+auiNotebookSetPageImage _obj n imageId 
+  = withBoolResult $
+    withObjectRef "auiNotebookSetPageImage" _obj $ \cobj__obj -> 
+    wxAuiNotebook_SetPageImage cobj__obj  (toCInt n)  (toCInt imageId)  
+foreign import ccall "wxAuiNotebook_SetPageImage" wxAuiNotebook_SetPageImage :: Ptr (TAuiNotebook a) -> CInt -> CInt -> IO CBool
+
+-- | usage: (@auiNotebookSetPageText obj page text@).
+auiNotebookSetPageText :: AuiNotebook  a -> Int -> String ->  IO Bool
+auiNotebookSetPageText _obj page _text 
+  = withBoolResult $
+    withObjectRef "auiNotebookSetPageText" _obj $ \cobj__obj -> 
+    withStringPtr _text $ \cobj__text -> 
+    wxAuiNotebook_SetPageText cobj__obj  (toCInt page)  cobj__text  
+foreign import ccall "wxAuiNotebook_SetPageText" wxAuiNotebook_SetPageText :: Ptr (TAuiNotebook a) -> CInt -> Ptr (TWxString c) -> IO CBool
+
+-- | usage: (@auiNotebookSetPageToolTip obj page text@).
+auiNotebookSetPageToolTip :: AuiNotebook  a -> Int -> String ->  IO Bool
+auiNotebookSetPageToolTip _obj page _text 
+  = withBoolResult $
+    withObjectRef "auiNotebookSetPageToolTip" _obj $ \cobj__obj -> 
+    withStringPtr _text $ \cobj__text -> 
+    wxAuiNotebook_SetPageToolTip cobj__obj  (toCInt page)  cobj__text  
+foreign import ccall "wxAuiNotebook_SetPageToolTip" wxAuiNotebook_SetPageToolTip :: Ptr (TAuiNotebook a) -> CInt -> Ptr (TWxString c) -> IO CBool
+
+-- | usage: (@auiNotebookSetSelectedFont obj font@).
+auiNotebookSetSelectedFont :: AuiNotebook  a -> Font  b ->  IO ()
+auiNotebookSetSelectedFont _obj _font 
+  = withObjectRef "auiNotebookSetSelectedFont" _obj $ \cobj__obj -> 
+    withObjectPtr _font $ \cobj__font -> 
+    wxAuiNotebook_SetSelectedFont cobj__obj  cobj__font  
+foreign import ccall "wxAuiNotebook_SetSelectedFont" wxAuiNotebook_SetSelectedFont :: Ptr (TAuiNotebook a) -> Ptr (TFont b) -> IO ()
+
+-- | usage: (@auiNotebookSetSelection obj newpage@).
+auiNotebookSetSelection :: AuiNotebook  a -> Int ->  IO Int
+auiNotebookSetSelection _obj newpage 
+  = withIntResult $
+    withObjectRef "auiNotebookSetSelection" _obj $ \cobj__obj -> 
+    wxAuiNotebook_SetSelection cobj__obj  (toCInt newpage)  
+foreign import ccall "wxAuiNotebook_SetSelection" wxAuiNotebook_SetSelection :: Ptr (TAuiNotebook a) -> CInt -> IO CInt
+
+-- | usage: (@auiNotebookSetTabCtrlHeight obj height@).
+auiNotebookSetTabCtrlHeight :: AuiNotebook  a -> Int ->  IO ()
+auiNotebookSetTabCtrlHeight _obj height 
+  = withObjectRef "auiNotebookSetTabCtrlHeight" _obj $ \cobj__obj -> 
+    wxAuiNotebook_SetTabCtrlHeight cobj__obj  (toCInt height)  
+foreign import ccall "wxAuiNotebook_SetTabCtrlHeight" wxAuiNotebook_SetTabCtrlHeight :: Ptr (TAuiNotebook a) -> CInt -> IO ()
+
+-- | usage: (@auiNotebookSetUniformBitmapSize obj widthheight@).
+auiNotebookSetUniformBitmapSize :: AuiNotebook  a -> Size ->  IO ()
+auiNotebookSetUniformBitmapSize _obj _widthheight 
+  = withObjectRef "auiNotebookSetUniformBitmapSize" _obj $ \cobj__obj -> 
+    wxAuiNotebook_SetUniformBitmapSize cobj__obj  (toCIntSizeW _widthheight) (toCIntSizeH _widthheight)  
+foreign import ccall "wxAuiNotebook_SetUniformBitmapSize" wxAuiNotebook_SetUniformBitmapSize :: Ptr (TAuiNotebook a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@auiNotebookShowWindowMenu obj@).
+auiNotebookShowWindowMenu :: AuiNotebook  a ->  IO Bool
+auiNotebookShowWindowMenu _obj 
+  = withBoolResult $
+    withObjectRef "auiNotebookShowWindowMenu" _obj $ \cobj__obj -> 
+    wxAuiNotebook_ShowWindowMenu cobj__obj  
+foreign import ccall "wxAuiNotebook_ShowWindowMenu" wxAuiNotebook_ShowWindowMenu :: Ptr (TAuiNotebook a) -> IO CBool
+
+-- | usage: (@auiNotebookSplit obj page direction@).
+auiNotebookSplit :: AuiNotebook  a -> Int -> Int ->  IO ()
+auiNotebookSplit _obj page direction 
+  = withObjectRef "auiNotebookSplit" _obj $ \cobj__obj -> 
+    wxAuiNotebook_Split cobj__obj  (toCInt page)  (toCInt direction)  
+foreign import ccall "wxAuiNotebook_Split" wxAuiNotebook_Split :: Ptr (TAuiNotebook a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@auiPaneInfoArrayCreate@).
+auiPaneInfoArrayCreate ::  IO (AuiPaneInfoArray  ())
+auiPaneInfoArrayCreate 
+  = withObjectResult $
+    wxAuiPaneInfoArray_Create 
+foreign import ccall "wxAuiPaneInfoArray_Create" wxAuiPaneInfoArray_Create :: IO (Ptr (TAuiPaneInfoArray ()))
+
+-- | usage: (@auiPaneInfoArrayDelete obj@).
+auiPaneInfoArrayDelete :: AuiPaneInfoArray  a ->  IO ()
+auiPaneInfoArrayDelete _obj 
+  = withObjectRef "auiPaneInfoArrayDelete" _obj $ \cobj__obj -> 
+    wxAuiPaneInfoArray_Delete cobj__obj  
+foreign import ccall "wxAuiPaneInfoArray_Delete" wxAuiPaneInfoArray_Delete :: Ptr (TAuiPaneInfoArray a) -> IO ()
+
+-- | usage: (@auiPaneInfoArrayGetCount obj@).
+auiPaneInfoArrayGetCount :: AuiPaneInfoArray  a ->  IO Int
+auiPaneInfoArrayGetCount _obj 
+  = withIntResult $
+    withObjectRef "auiPaneInfoArrayGetCount" _obj $ \cobj__obj -> 
+    wxAuiPaneInfoArray_GetCount cobj__obj  
+foreign import ccall "wxAuiPaneInfoArray_GetCount" wxAuiPaneInfoArray_GetCount :: Ptr (TAuiPaneInfoArray a) -> IO CInt
+
+-- | usage: (@auiPaneInfoArrayItem obj idx@).
+auiPaneInfoArrayItem :: AuiPaneInfoArray  a -> Int ->  IO (AuiPaneInfo  ())
+auiPaneInfoArrayItem _obj _idx 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoArrayItem" _obj $ \cobj__obj -> 
+    wxAuiPaneInfoArray_Item cobj__obj  (toCInt _idx)  
+foreign import ccall "wxAuiPaneInfoArray_Item" wxAuiPaneInfoArray_Item :: Ptr (TAuiPaneInfoArray a) -> CInt -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoBestSize obj widthheight@).
+auiPaneInfoBestSize :: AuiPaneInfo  a -> Size ->  IO (AuiPaneInfo  ())
+auiPaneInfoBestSize _obj _widthheight 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoBestSize" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_BestSize cobj__obj  (toCIntSizeW _widthheight) (toCIntSizeH _widthheight)  
+foreign import ccall "wxAuiPaneInfo_BestSize" wxAuiPaneInfo_BestSize :: Ptr (TAuiPaneInfo a) -> CInt -> CInt -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoBestSizeXY obj xy@).
+auiPaneInfoBestSizeXY :: AuiPaneInfo  a -> Point ->  IO (AuiPaneInfo  ())
+auiPaneInfoBestSizeXY _obj xy 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoBestSizeXY" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_BestSizeXY cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxAuiPaneInfo_BestSizeXY" wxAuiPaneInfo_BestSizeXY :: Ptr (TAuiPaneInfo a) -> CInt -> CInt -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoBottom obj@).
+auiPaneInfoBottom :: AuiPaneInfo  a ->  IO (AuiPaneInfo  ())
+auiPaneInfoBottom _obj 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoBottom" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_Bottom cobj__obj  
+foreign import ccall "wxAuiPaneInfo_Bottom" wxAuiPaneInfo_Bottom :: Ptr (TAuiPaneInfo a) -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoBottomDockable obj b@).
+auiPaneInfoBottomDockable :: AuiPaneInfo  a -> Bool ->  IO (AuiPaneInfo  ())
+auiPaneInfoBottomDockable _obj b 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoBottomDockable" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_BottomDockable cobj__obj  (toCBool b)  
+foreign import ccall "wxAuiPaneInfo_BottomDockable" wxAuiPaneInfo_BottomDockable :: Ptr (TAuiPaneInfo a) -> CBool -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoCaption obj c@).
+auiPaneInfoCaption :: AuiPaneInfo  a -> String ->  IO (AuiPaneInfo  ())
+auiPaneInfoCaption _obj _c 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoCaption" _obj $ \cobj__obj -> 
+    withStringPtr _c $ \cobj__c -> 
+    wxAuiPaneInfo_Caption cobj__obj  cobj__c  
+foreign import ccall "wxAuiPaneInfo_Caption" wxAuiPaneInfo_Caption :: Ptr (TAuiPaneInfo a) -> Ptr (TWxString b) -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoCaptionVisible obj visible@).
+auiPaneInfoCaptionVisible :: AuiPaneInfo  a -> Bool ->  IO (AuiPaneInfo  ())
+auiPaneInfoCaptionVisible _obj visible 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoCaptionVisible" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_CaptionVisible cobj__obj  (toCBool visible)  
+foreign import ccall "wxAuiPaneInfo_CaptionVisible" wxAuiPaneInfo_CaptionVisible :: Ptr (TAuiPaneInfo a) -> CBool -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoCenter obj@).
+auiPaneInfoCenter :: AuiPaneInfo  a ->  IO (AuiPaneInfo  ())
+auiPaneInfoCenter _obj 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoCenter" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_Center cobj__obj  
+foreign import ccall "wxAuiPaneInfo_Center" wxAuiPaneInfo_Center :: Ptr (TAuiPaneInfo a) -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoCenterPane obj@).
+auiPaneInfoCenterPane :: AuiPaneInfo  a ->  IO (AuiPaneInfo  ())
+auiPaneInfoCenterPane _obj 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoCenterPane" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_CenterPane cobj__obj  
+foreign import ccall "wxAuiPaneInfo_CenterPane" wxAuiPaneInfo_CenterPane :: Ptr (TAuiPaneInfo a) -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoCentre obj@).
+auiPaneInfoCentre :: AuiPaneInfo  a ->  IO (AuiPaneInfo  ())
+auiPaneInfoCentre _obj 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoCentre" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_Centre cobj__obj  
+foreign import ccall "wxAuiPaneInfo_Centre" wxAuiPaneInfo_Centre :: Ptr (TAuiPaneInfo a) -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoCentrePane obj@).
+auiPaneInfoCentrePane :: AuiPaneInfo  a ->  IO (AuiPaneInfo  ())
+auiPaneInfoCentrePane _obj 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoCentrePane" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_CentrePane cobj__obj  
+foreign import ccall "wxAuiPaneInfo_CentrePane" wxAuiPaneInfo_CentrePane :: Ptr (TAuiPaneInfo a) -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoCloseButton obj visible@).
+auiPaneInfoCloseButton :: AuiPaneInfo  a -> Bool ->  IO (AuiPaneInfo  ())
+auiPaneInfoCloseButton _obj visible 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoCloseButton" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_CloseButton cobj__obj  (toCBool visible)  
+foreign import ccall "wxAuiPaneInfo_CloseButton" wxAuiPaneInfo_CloseButton :: Ptr (TAuiPaneInfo a) -> CBool -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoCopy obj c@).
+auiPaneInfoCopy :: AuiPaneInfo  a -> AuiPaneInfo  b ->  IO (AuiPaneInfo  ())
+auiPaneInfoCopy _obj _c 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoCopy" _obj $ \cobj__obj -> 
+    withObjectPtr _c $ \cobj__c -> 
+    wxAuiPaneInfo_Copy cobj__obj  cobj__c  
+foreign import ccall "wxAuiPaneInfo_Copy" wxAuiPaneInfo_Copy :: Ptr (TAuiPaneInfo a) -> Ptr (TAuiPaneInfo b) -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoCreate c@).
+auiPaneInfoCreate :: AuiPaneInfo  a ->  IO (AuiPaneInfo  ())
+auiPaneInfoCreate _c 
+  = withObjectResult $
+    withObjectPtr _c $ \cobj__c -> 
+    wxAuiPaneInfo_Create cobj__c  
+foreign import ccall "wxAuiPaneInfo_Create" wxAuiPaneInfo_Create :: Ptr (TAuiPaneInfo a) -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoCreateDefault@).
+auiPaneInfoCreateDefault ::  IO (AuiPaneInfo  ())
+auiPaneInfoCreateDefault 
+  = withObjectResult $
+    wxAuiPaneInfo_CreateDefault 
+foreign import ccall "wxAuiPaneInfo_CreateDefault" wxAuiPaneInfo_CreateDefault :: IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoDefaultPane obj@).
+auiPaneInfoDefaultPane :: AuiPaneInfo  a ->  IO (AuiPaneInfo  ())
+auiPaneInfoDefaultPane _obj 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoDefaultPane" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_DefaultPane cobj__obj  
+foreign import ccall "wxAuiPaneInfo_DefaultPane" wxAuiPaneInfo_DefaultPane :: Ptr (TAuiPaneInfo a) -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoDestroyOnClose obj b@).
+auiPaneInfoDestroyOnClose :: AuiPaneInfo  a -> Bool ->  IO (AuiPaneInfo  ())
+auiPaneInfoDestroyOnClose _obj b 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoDestroyOnClose" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_DestroyOnClose cobj__obj  (toCBool b)  
+foreign import ccall "wxAuiPaneInfo_DestroyOnClose" wxAuiPaneInfo_DestroyOnClose :: Ptr (TAuiPaneInfo a) -> CBool -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoDirection obj direction@).
+auiPaneInfoDirection :: AuiPaneInfo  a -> Int ->  IO (AuiPaneInfo  ())
+auiPaneInfoDirection _obj direction 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoDirection" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_Direction cobj__obj  (toCInt direction)  
+foreign import ccall "wxAuiPaneInfo_Direction" wxAuiPaneInfo_Direction :: Ptr (TAuiPaneInfo a) -> CInt -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoDock obj@).
+auiPaneInfoDock :: AuiPaneInfo  a ->  IO (AuiPaneInfo  ())
+auiPaneInfoDock _obj 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoDock" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_Dock cobj__obj  
+foreign import ccall "wxAuiPaneInfo_Dock" wxAuiPaneInfo_Dock :: Ptr (TAuiPaneInfo a) -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoDockFixed obj b@).
+auiPaneInfoDockFixed :: AuiPaneInfo  a -> Bool ->  IO (AuiPaneInfo  ())
+auiPaneInfoDockFixed _obj b 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoDockFixed" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_DockFixed cobj__obj  (toCBool b)  
+foreign import ccall "wxAuiPaneInfo_DockFixed" wxAuiPaneInfo_DockFixed :: Ptr (TAuiPaneInfo a) -> CBool -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoDockable obj b@).
+auiPaneInfoDockable :: AuiPaneInfo  a -> Bool ->  IO (AuiPaneInfo  ())
+auiPaneInfoDockable _obj b 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoDockable" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_Dockable cobj__obj  (toCBool b)  
+foreign import ccall "wxAuiPaneInfo_Dockable" wxAuiPaneInfo_Dockable :: Ptr (TAuiPaneInfo a) -> CBool -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoFixed obj@).
+auiPaneInfoFixed :: AuiPaneInfo  a ->  IO (AuiPaneInfo  ())
+auiPaneInfoFixed _obj 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoFixed" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_Fixed cobj__obj  
+foreign import ccall "wxAuiPaneInfo_Fixed" wxAuiPaneInfo_Fixed :: Ptr (TAuiPaneInfo a) -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoFloat obj@).
+auiPaneInfoFloat :: AuiPaneInfo  a ->  IO (AuiPaneInfo  ())
+auiPaneInfoFloat _obj 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoFloat" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_Float cobj__obj  
+foreign import ccall "wxAuiPaneInfo_Float" wxAuiPaneInfo_Float :: Ptr (TAuiPaneInfo a) -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoFloatable obj b@).
+auiPaneInfoFloatable :: AuiPaneInfo  a -> Bool ->  IO (AuiPaneInfo  ())
+auiPaneInfoFloatable _obj b 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoFloatable" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_Floatable cobj__obj  (toCBool b)  
+foreign import ccall "wxAuiPaneInfo_Floatable" wxAuiPaneInfo_Floatable :: Ptr (TAuiPaneInfo a) -> CBool -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoFloatingPosition obj xy@).
+auiPaneInfoFloatingPosition :: AuiPaneInfo  a -> Point ->  IO (AuiPaneInfo  ())
+auiPaneInfoFloatingPosition _obj xy 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoFloatingPosition" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_FloatingPosition cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxAuiPaneInfo_FloatingPosition" wxAuiPaneInfo_FloatingPosition :: Ptr (TAuiPaneInfo a) -> CInt -> CInt -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoFloatingPositionXY obj xy@).
+auiPaneInfoFloatingPositionXY :: AuiPaneInfo  a -> Point ->  IO (AuiPaneInfo  ())
+auiPaneInfoFloatingPositionXY _obj xy 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoFloatingPositionXY" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_FloatingPositionXY cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxAuiPaneInfo_FloatingPositionXY" wxAuiPaneInfo_FloatingPositionXY :: Ptr (TAuiPaneInfo a) -> CInt -> CInt -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoFloatingSize obj widthheight@).
+auiPaneInfoFloatingSize :: AuiPaneInfo  a -> Size ->  IO (AuiPaneInfo  ())
+auiPaneInfoFloatingSize _obj _widthheight 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoFloatingSize" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_FloatingSize cobj__obj  (toCIntSizeW _widthheight) (toCIntSizeH _widthheight)  
+foreign import ccall "wxAuiPaneInfo_FloatingSize" wxAuiPaneInfo_FloatingSize :: Ptr (TAuiPaneInfo a) -> CInt -> CInt -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoFloatingSizeXY obj xy@).
+auiPaneInfoFloatingSizeXY :: AuiPaneInfo  a -> Point ->  IO (AuiPaneInfo  ())
+auiPaneInfoFloatingSizeXY _obj xy 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoFloatingSizeXY" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_FloatingSizeXY cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxAuiPaneInfo_FloatingSizeXY" wxAuiPaneInfo_FloatingSizeXY :: Ptr (TAuiPaneInfo a) -> CInt -> CInt -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoGripper obj visible@).
+auiPaneInfoGripper :: AuiPaneInfo  a -> Bool ->  IO (AuiPaneInfo  ())
+auiPaneInfoGripper _obj visible 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoGripper" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_Gripper cobj__obj  (toCBool visible)  
+foreign import ccall "wxAuiPaneInfo_Gripper" wxAuiPaneInfo_Gripper :: Ptr (TAuiPaneInfo a) -> CBool -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoGripperTop obj attop@).
+auiPaneInfoGripperTop :: AuiPaneInfo  a -> Bool ->  IO (AuiPaneInfo  ())
+auiPaneInfoGripperTop _obj attop 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoGripperTop" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_GripperTop cobj__obj  (toCBool attop)  
+foreign import ccall "wxAuiPaneInfo_GripperTop" wxAuiPaneInfo_GripperTop :: Ptr (TAuiPaneInfo a) -> CBool -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoHasBorder obj@).
+auiPaneInfoHasBorder :: AuiPaneInfo  a ->  IO Bool
+auiPaneInfoHasBorder _obj 
+  = withBoolResult $
+    withObjectRef "auiPaneInfoHasBorder" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_HasBorder cobj__obj  
+foreign import ccall "wxAuiPaneInfo_HasBorder" wxAuiPaneInfo_HasBorder :: Ptr (TAuiPaneInfo a) -> IO CBool
+
+-- | usage: (@auiPaneInfoHasCaption obj@).
+auiPaneInfoHasCaption :: AuiPaneInfo  a ->  IO Bool
+auiPaneInfoHasCaption _obj 
+  = withBoolResult $
+    withObjectRef "auiPaneInfoHasCaption" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_HasCaption cobj__obj  
+foreign import ccall "wxAuiPaneInfo_HasCaption" wxAuiPaneInfo_HasCaption :: Ptr (TAuiPaneInfo a) -> IO CBool
+
+-- | usage: (@auiPaneInfoHasCloseButton obj@).
+auiPaneInfoHasCloseButton :: AuiPaneInfo  a ->  IO Bool
+auiPaneInfoHasCloseButton _obj 
+  = withBoolResult $
+    withObjectRef "auiPaneInfoHasCloseButton" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_HasCloseButton cobj__obj  
+foreign import ccall "wxAuiPaneInfo_HasCloseButton" wxAuiPaneInfo_HasCloseButton :: Ptr (TAuiPaneInfo a) -> IO CBool
+
+-- | usage: (@auiPaneInfoHasFlag obj flag@).
+auiPaneInfoHasFlag :: AuiPaneInfo  a -> Int ->  IO Bool
+auiPaneInfoHasFlag _obj flag 
+  = withBoolResult $
+    withObjectRef "auiPaneInfoHasFlag" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_HasFlag cobj__obj  (toCInt flag)  
+foreign import ccall "wxAuiPaneInfo_HasFlag" wxAuiPaneInfo_HasFlag :: Ptr (TAuiPaneInfo a) -> CInt -> IO CBool
+
+-- | usage: (@auiPaneInfoHasGripper obj@).
+auiPaneInfoHasGripper :: AuiPaneInfo  a ->  IO Bool
+auiPaneInfoHasGripper _obj 
+  = withBoolResult $
+    withObjectRef "auiPaneInfoHasGripper" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_HasGripper cobj__obj  
+foreign import ccall "wxAuiPaneInfo_HasGripper" wxAuiPaneInfo_HasGripper :: Ptr (TAuiPaneInfo a) -> IO CBool
+
+-- | usage: (@auiPaneInfoHasGripperTop obj@).
+auiPaneInfoHasGripperTop :: AuiPaneInfo  a ->  IO Bool
+auiPaneInfoHasGripperTop _obj 
+  = withBoolResult $
+    withObjectRef "auiPaneInfoHasGripperTop" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_HasGripperTop cobj__obj  
+foreign import ccall "wxAuiPaneInfo_HasGripperTop" wxAuiPaneInfo_HasGripperTop :: Ptr (TAuiPaneInfo a) -> IO CBool
+
+-- | usage: (@auiPaneInfoHasMaximizeButton obj@).
+auiPaneInfoHasMaximizeButton :: AuiPaneInfo  a ->  IO Bool
+auiPaneInfoHasMaximizeButton _obj 
+  = withBoolResult $
+    withObjectRef "auiPaneInfoHasMaximizeButton" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_HasMaximizeButton cobj__obj  
+foreign import ccall "wxAuiPaneInfo_HasMaximizeButton" wxAuiPaneInfo_HasMaximizeButton :: Ptr (TAuiPaneInfo a) -> IO CBool
+
+-- | usage: (@auiPaneInfoHasMinimizeButton obj@).
+auiPaneInfoHasMinimizeButton :: AuiPaneInfo  a ->  IO Bool
+auiPaneInfoHasMinimizeButton _obj 
+  = withBoolResult $
+    withObjectRef "auiPaneInfoHasMinimizeButton" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_HasMinimizeButton cobj__obj  
+foreign import ccall "wxAuiPaneInfo_HasMinimizeButton" wxAuiPaneInfo_HasMinimizeButton :: Ptr (TAuiPaneInfo a) -> IO CBool
+
+-- | usage: (@auiPaneInfoHasPinButton obj@).
+auiPaneInfoHasPinButton :: AuiPaneInfo  a ->  IO Bool
+auiPaneInfoHasPinButton _obj 
+  = withBoolResult $
+    withObjectRef "auiPaneInfoHasPinButton" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_HasPinButton cobj__obj  
+foreign import ccall "wxAuiPaneInfo_HasPinButton" wxAuiPaneInfo_HasPinButton :: Ptr (TAuiPaneInfo a) -> IO CBool
+
+-- | usage: (@auiPaneInfoHide obj@).
+auiPaneInfoHide :: AuiPaneInfo  a ->  IO (AuiPaneInfo  ())
+auiPaneInfoHide _obj 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoHide" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_Hide cobj__obj  
+foreign import ccall "wxAuiPaneInfo_Hide" wxAuiPaneInfo_Hide :: Ptr (TAuiPaneInfo a) -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoIcon obj b@).
+auiPaneInfoIcon :: AuiPaneInfo  a -> Bitmap  b ->  IO (AuiPaneInfo  ())
+auiPaneInfoIcon _obj _b 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoIcon" _obj $ \cobj__obj -> 
+    withObjectPtr _b $ \cobj__b -> 
+    wxAuiPaneInfo_Icon cobj__obj  cobj__b  
+foreign import ccall "wxAuiPaneInfo_Icon" wxAuiPaneInfo_Icon :: Ptr (TAuiPaneInfo a) -> Ptr (TBitmap b) -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoIsBottomDockable obj@).
+auiPaneInfoIsBottomDockable :: AuiPaneInfo  a ->  IO Bool
+auiPaneInfoIsBottomDockable _obj 
+  = withBoolResult $
+    withObjectRef "auiPaneInfoIsBottomDockable" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_IsBottomDockable cobj__obj  
+foreign import ccall "wxAuiPaneInfo_IsBottomDockable" wxAuiPaneInfo_IsBottomDockable :: Ptr (TAuiPaneInfo a) -> IO CBool
+
+-- | usage: (@auiPaneInfoIsDockable obj@).
+auiPaneInfoIsDockable :: AuiPaneInfo  a ->  IO Bool
+auiPaneInfoIsDockable _obj 
+  = withBoolResult $
+    withObjectRef "auiPaneInfoIsDockable" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_IsDockable cobj__obj  
+foreign import ccall "wxAuiPaneInfo_IsDockable" wxAuiPaneInfo_IsDockable :: Ptr (TAuiPaneInfo a) -> IO CBool
+
+-- | usage: (@auiPaneInfoIsDocked obj@).
+auiPaneInfoIsDocked :: AuiPaneInfo  a ->  IO Bool
+auiPaneInfoIsDocked _obj 
+  = withBoolResult $
+    withObjectRef "auiPaneInfoIsDocked" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_IsDocked cobj__obj  
+foreign import ccall "wxAuiPaneInfo_IsDocked" wxAuiPaneInfo_IsDocked :: Ptr (TAuiPaneInfo a) -> IO CBool
+
+-- | usage: (@auiPaneInfoIsFixed obj@).
+auiPaneInfoIsFixed :: AuiPaneInfo  a ->  IO Bool
+auiPaneInfoIsFixed _obj 
+  = withBoolResult $
+    withObjectRef "auiPaneInfoIsFixed" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_IsFixed cobj__obj  
+foreign import ccall "wxAuiPaneInfo_IsFixed" wxAuiPaneInfo_IsFixed :: Ptr (TAuiPaneInfo a) -> IO CBool
+
+-- | usage: (@auiPaneInfoIsFloatable obj@).
+auiPaneInfoIsFloatable :: AuiPaneInfo  a ->  IO Bool
+auiPaneInfoIsFloatable _obj 
+  = withBoolResult $
+    withObjectRef "auiPaneInfoIsFloatable" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_IsFloatable cobj__obj  
+foreign import ccall "wxAuiPaneInfo_IsFloatable" wxAuiPaneInfo_IsFloatable :: Ptr (TAuiPaneInfo a) -> IO CBool
+
+-- | usage: (@auiPaneInfoIsFloating obj@).
+auiPaneInfoIsFloating :: AuiPaneInfo  a ->  IO Bool
+auiPaneInfoIsFloating _obj 
+  = withBoolResult $
+    withObjectRef "auiPaneInfoIsFloating" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_IsFloating cobj__obj  
+foreign import ccall "wxAuiPaneInfo_IsFloating" wxAuiPaneInfo_IsFloating :: Ptr (TAuiPaneInfo a) -> IO CBool
+
+-- | usage: (@auiPaneInfoIsLeftDockable obj@).
+auiPaneInfoIsLeftDockable :: AuiPaneInfo  a ->  IO Bool
+auiPaneInfoIsLeftDockable _obj 
+  = withBoolResult $
+    withObjectRef "auiPaneInfoIsLeftDockable" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_IsLeftDockable cobj__obj  
+foreign import ccall "wxAuiPaneInfo_IsLeftDockable" wxAuiPaneInfo_IsLeftDockable :: Ptr (TAuiPaneInfo a) -> IO CBool
+
+-- | usage: (@auiPaneInfoIsMovable obj@).
+auiPaneInfoIsMovable :: AuiPaneInfo  a ->  IO Bool
+auiPaneInfoIsMovable _obj 
+  = withBoolResult $
+    withObjectRef "auiPaneInfoIsMovable" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_IsMovable cobj__obj  
+foreign import ccall "wxAuiPaneInfo_IsMovable" wxAuiPaneInfo_IsMovable :: Ptr (TAuiPaneInfo a) -> IO CBool
+
+-- | usage: (@auiPaneInfoIsOk obj@).
+auiPaneInfoIsOk :: AuiPaneInfo  a ->  IO Bool
+auiPaneInfoIsOk _obj 
+  = withBoolResult $
+    withObjectRef "auiPaneInfoIsOk" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_IsOk cobj__obj  
+foreign import ccall "wxAuiPaneInfo_IsOk" wxAuiPaneInfo_IsOk :: Ptr (TAuiPaneInfo a) -> IO CBool
+
+-- | usage: (@auiPaneInfoIsResizable obj@).
+auiPaneInfoIsResizable :: AuiPaneInfo  a ->  IO Bool
+auiPaneInfoIsResizable _obj 
+  = withBoolResult $
+    withObjectRef "auiPaneInfoIsResizable" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_IsResizable cobj__obj  
+foreign import ccall "wxAuiPaneInfo_IsResizable" wxAuiPaneInfo_IsResizable :: Ptr (TAuiPaneInfo a) -> IO CBool
+
+-- | usage: (@auiPaneInfoIsRightDockable obj@).
+auiPaneInfoIsRightDockable :: AuiPaneInfo  a ->  IO Bool
+auiPaneInfoIsRightDockable _obj 
+  = withBoolResult $
+    withObjectRef "auiPaneInfoIsRightDockable" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_IsRightDockable cobj__obj  
+foreign import ccall "wxAuiPaneInfo_IsRightDockable" wxAuiPaneInfo_IsRightDockable :: Ptr (TAuiPaneInfo a) -> IO CBool
+
+-- | usage: (@auiPaneInfoIsShown obj@).
+auiPaneInfoIsShown :: AuiPaneInfo  a ->  IO Bool
+auiPaneInfoIsShown _obj 
+  = withBoolResult $
+    withObjectRef "auiPaneInfoIsShown" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_IsShown cobj__obj  
+foreign import ccall "wxAuiPaneInfo_IsShown" wxAuiPaneInfo_IsShown :: Ptr (TAuiPaneInfo a) -> IO CBool
+
+-- | usage: (@auiPaneInfoIsToolbar obj@).
+auiPaneInfoIsToolbar :: AuiPaneInfo  a ->  IO Bool
+auiPaneInfoIsToolbar _obj 
+  = withBoolResult $
+    withObjectRef "auiPaneInfoIsToolbar" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_IsToolbar cobj__obj  
+foreign import ccall "wxAuiPaneInfo_IsToolbar" wxAuiPaneInfo_IsToolbar :: Ptr (TAuiPaneInfo a) -> IO CBool
+
+-- | usage: (@auiPaneInfoIsTopDockable obj@).
+auiPaneInfoIsTopDockable :: AuiPaneInfo  a ->  IO Bool
+auiPaneInfoIsTopDockable _obj 
+  = withBoolResult $
+    withObjectRef "auiPaneInfoIsTopDockable" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_IsTopDockable cobj__obj  
+foreign import ccall "wxAuiPaneInfo_IsTopDockable" wxAuiPaneInfo_IsTopDockable :: Ptr (TAuiPaneInfo a) -> IO CBool
+
+-- | usage: (@auiPaneInfoLayer obj layer@).
+auiPaneInfoLayer :: AuiPaneInfo  a -> Int ->  IO (AuiPaneInfo  ())
+auiPaneInfoLayer _obj layer 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoLayer" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_Layer cobj__obj  (toCInt layer)  
+foreign import ccall "wxAuiPaneInfo_Layer" wxAuiPaneInfo_Layer :: Ptr (TAuiPaneInfo a) -> CInt -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoLeft obj@).
+auiPaneInfoLeft :: AuiPaneInfo  a ->  IO (AuiPaneInfo  ())
+auiPaneInfoLeft _obj 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoLeft" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_Left cobj__obj  
+foreign import ccall "wxAuiPaneInfo_Left" wxAuiPaneInfo_Left :: Ptr (TAuiPaneInfo a) -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoLeftDockable obj b@).
+auiPaneInfoLeftDockable :: AuiPaneInfo  a -> Bool ->  IO (AuiPaneInfo  ())
+auiPaneInfoLeftDockable _obj b 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoLeftDockable" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_LeftDockable cobj__obj  (toCBool b)  
+foreign import ccall "wxAuiPaneInfo_LeftDockable" wxAuiPaneInfo_LeftDockable :: Ptr (TAuiPaneInfo a) -> CBool -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoMaxSize obj widthheight@).
+auiPaneInfoMaxSize :: AuiPaneInfo  a -> Size ->  IO (AuiPaneInfo  ())
+auiPaneInfoMaxSize _obj _widthheight 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoMaxSize" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_MaxSize cobj__obj  (toCIntSizeW _widthheight) (toCIntSizeH _widthheight)  
+foreign import ccall "wxAuiPaneInfo_MaxSize" wxAuiPaneInfo_MaxSize :: Ptr (TAuiPaneInfo a) -> CInt -> CInt -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoMaxSizeXY obj xy@).
+auiPaneInfoMaxSizeXY :: AuiPaneInfo  a -> Point ->  IO (AuiPaneInfo  ())
+auiPaneInfoMaxSizeXY _obj xy 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoMaxSizeXY" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_MaxSizeXY cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxAuiPaneInfo_MaxSizeXY" wxAuiPaneInfo_MaxSizeXY :: Ptr (TAuiPaneInfo a) -> CInt -> CInt -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoMaximizeButton obj visible@).
+auiPaneInfoMaximizeButton :: AuiPaneInfo  a -> Bool ->  IO (AuiPaneInfo  ())
+auiPaneInfoMaximizeButton _obj visible 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoMaximizeButton" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_MaximizeButton cobj__obj  (toCBool visible)  
+foreign import ccall "wxAuiPaneInfo_MaximizeButton" wxAuiPaneInfo_MaximizeButton :: Ptr (TAuiPaneInfo a) -> CBool -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoMinSize obj widthheight@).
+auiPaneInfoMinSize :: AuiPaneInfo  a -> Size ->  IO (AuiPaneInfo  ())
+auiPaneInfoMinSize _obj _widthheight 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoMinSize" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_MinSize cobj__obj  (toCIntSizeW _widthheight) (toCIntSizeH _widthheight)  
+foreign import ccall "wxAuiPaneInfo_MinSize" wxAuiPaneInfo_MinSize :: Ptr (TAuiPaneInfo a) -> CInt -> CInt -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoMinSizeXY obj xy@).
+auiPaneInfoMinSizeXY :: AuiPaneInfo  a -> Point ->  IO (AuiPaneInfo  ())
+auiPaneInfoMinSizeXY _obj xy 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoMinSizeXY" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_MinSizeXY cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxAuiPaneInfo_MinSizeXY" wxAuiPaneInfo_MinSizeXY :: Ptr (TAuiPaneInfo a) -> CInt -> CInt -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoMinimizeButton obj visible@).
+auiPaneInfoMinimizeButton :: AuiPaneInfo  a -> Bool ->  IO (AuiPaneInfo  ())
+auiPaneInfoMinimizeButton _obj visible 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoMinimizeButton" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_MinimizeButton cobj__obj  (toCBool visible)  
+foreign import ccall "wxAuiPaneInfo_MinimizeButton" wxAuiPaneInfo_MinimizeButton :: Ptr (TAuiPaneInfo a) -> CBool -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoMovable obj b@).
+auiPaneInfoMovable :: AuiPaneInfo  a -> Bool ->  IO (AuiPaneInfo  ())
+auiPaneInfoMovable _obj b 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoMovable" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_Movable cobj__obj  (toCBool b)  
+foreign import ccall "wxAuiPaneInfo_Movable" wxAuiPaneInfo_Movable :: Ptr (TAuiPaneInfo a) -> CBool -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoName obj n@).
+auiPaneInfoName :: AuiPaneInfo  a -> String ->  IO (AuiPaneInfo  ())
+auiPaneInfoName _obj _n 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoName" _obj $ \cobj__obj -> 
+    withStringPtr _n $ \cobj__n -> 
+    wxAuiPaneInfo_Name cobj__obj  cobj__n  
+foreign import ccall "wxAuiPaneInfo_Name" wxAuiPaneInfo_Name :: Ptr (TAuiPaneInfo a) -> Ptr (TWxString b) -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoPaneBorder obj visible@).
+auiPaneInfoPaneBorder :: AuiPaneInfo  a -> Bool ->  IO (AuiPaneInfo  ())
+auiPaneInfoPaneBorder _obj visible 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoPaneBorder" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_PaneBorder cobj__obj  (toCBool visible)  
+foreign import ccall "wxAuiPaneInfo_PaneBorder" wxAuiPaneInfo_PaneBorder :: Ptr (TAuiPaneInfo a) -> CBool -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoPinButton obj visible@).
+auiPaneInfoPinButton :: AuiPaneInfo  a -> Bool ->  IO (AuiPaneInfo  ())
+auiPaneInfoPinButton _obj visible 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoPinButton" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_PinButton cobj__obj  (toCBool visible)  
+foreign import ccall "wxAuiPaneInfo_PinButton" wxAuiPaneInfo_PinButton :: Ptr (TAuiPaneInfo a) -> CBool -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoPosition obj pos@).
+auiPaneInfoPosition :: AuiPaneInfo  a -> Int ->  IO (AuiPaneInfo  ())
+auiPaneInfoPosition _obj pos 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoPosition" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_Position cobj__obj  (toCInt pos)  
+foreign import ccall "wxAuiPaneInfo_Position" wxAuiPaneInfo_Position :: Ptr (TAuiPaneInfo a) -> CInt -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoResizable obj resizable@).
+auiPaneInfoResizable :: AuiPaneInfo  a -> Bool ->  IO (AuiPaneInfo  ())
+auiPaneInfoResizable _obj resizable 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoResizable" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_Resizable cobj__obj  (toCBool resizable)  
+foreign import ccall "wxAuiPaneInfo_Resizable" wxAuiPaneInfo_Resizable :: Ptr (TAuiPaneInfo a) -> CBool -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoRight obj@).
+auiPaneInfoRight :: AuiPaneInfo  a ->  IO (AuiPaneInfo  ())
+auiPaneInfoRight _obj 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoRight" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_Right cobj__obj  
+foreign import ccall "wxAuiPaneInfo_Right" wxAuiPaneInfo_Right :: Ptr (TAuiPaneInfo a) -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoRightDockable obj b@).
+auiPaneInfoRightDockable :: AuiPaneInfo  a -> Bool ->  IO (AuiPaneInfo  ())
+auiPaneInfoRightDockable _obj b 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoRightDockable" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_RightDockable cobj__obj  (toCBool b)  
+foreign import ccall "wxAuiPaneInfo_RightDockable" wxAuiPaneInfo_RightDockable :: Ptr (TAuiPaneInfo a) -> CBool -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoRow obj row@).
+auiPaneInfoRow :: AuiPaneInfo  a -> Int ->  IO (AuiPaneInfo  ())
+auiPaneInfoRow _obj row 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoRow" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_Row cobj__obj  (toCInt row)  
+foreign import ccall "wxAuiPaneInfo_Row" wxAuiPaneInfo_Row :: Ptr (TAuiPaneInfo a) -> CInt -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoSafeSet obj source@).
+auiPaneInfoSafeSet :: AuiPaneInfo  a -> AuiPaneInfo  b ->  IO ()
+auiPaneInfoSafeSet _obj source 
+  = withObjectRef "auiPaneInfoSafeSet" _obj $ \cobj__obj -> 
+    withObjectPtr source $ \cobj_source -> 
+    wxAuiPaneInfo_SafeSet cobj__obj  cobj_source  
+foreign import ccall "wxAuiPaneInfo_SafeSet" wxAuiPaneInfo_SafeSet :: Ptr (TAuiPaneInfo a) -> Ptr (TAuiPaneInfo b) -> IO ()
+
+-- | usage: (@auiPaneInfoSetFlag obj flag optionstate@).
+auiPaneInfoSetFlag :: AuiPaneInfo  a -> Int -> Bool ->  IO (AuiPaneInfo  ())
+auiPaneInfoSetFlag _obj flag optionstate 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoSetFlag" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_SetFlag cobj__obj  (toCInt flag)  (toCBool optionstate)  
+foreign import ccall "wxAuiPaneInfo_SetFlag" wxAuiPaneInfo_SetFlag :: Ptr (TAuiPaneInfo a) -> CInt -> CBool -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoShow obj show@).
+auiPaneInfoShow :: AuiPaneInfo  a -> Bool ->  IO (AuiPaneInfo  ())
+auiPaneInfoShow _obj show 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoShow" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_Show cobj__obj  (toCBool show)  
+foreign import ccall "wxAuiPaneInfo_Show" wxAuiPaneInfo_Show :: Ptr (TAuiPaneInfo a) -> CBool -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoToolbarPane obj@).
+auiPaneInfoToolbarPane :: AuiPaneInfo  a ->  IO (AuiPaneInfo  ())
+auiPaneInfoToolbarPane _obj 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoToolbarPane" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_ToolbarPane cobj__obj  
+foreign import ccall "wxAuiPaneInfo_ToolbarPane" wxAuiPaneInfo_ToolbarPane :: Ptr (TAuiPaneInfo a) -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoTop obj@).
+auiPaneInfoTop :: AuiPaneInfo  a ->  IO (AuiPaneInfo  ())
+auiPaneInfoTop _obj 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoTop" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_Top cobj__obj  
+foreign import ccall "wxAuiPaneInfo_Top" wxAuiPaneInfo_Top :: Ptr (TAuiPaneInfo a) -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoTopDockable obj b@).
+auiPaneInfoTopDockable :: AuiPaneInfo  a -> Bool ->  IO (AuiPaneInfo  ())
+auiPaneInfoTopDockable _obj b 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoTopDockable" _obj $ \cobj__obj -> 
+    wxAuiPaneInfo_TopDockable cobj__obj  (toCBool b)  
+foreign import ccall "wxAuiPaneInfo_TopDockable" wxAuiPaneInfo_TopDockable :: Ptr (TAuiPaneInfo a) -> CBool -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiPaneInfoWindow obj w@).
+auiPaneInfoWindow :: AuiPaneInfo  a -> Window  b ->  IO (AuiPaneInfo  ())
+auiPaneInfoWindow _obj _w 
+  = withObjectResult $
+    withObjectRef "auiPaneInfoWindow" _obj $ \cobj__obj -> 
+    withObjectPtr _w $ \cobj__w -> 
+    wxAuiPaneInfo_Window cobj__obj  cobj__w  
+foreign import ccall "wxAuiPaneInfo_Window" wxAuiPaneInfo_Window :: Ptr (TAuiPaneInfo a) -> Ptr (TWindow b) -> IO (Ptr (TAuiPaneInfo ()))
+
+-- | usage: (@auiSimpleTabArtClone obj@).
+auiSimpleTabArtClone :: AuiSimpleTabArt  a ->  IO (AuiTabArt  ())
+auiSimpleTabArtClone _obj 
+  = withObjectResult $
+    withObjectRef "auiSimpleTabArtClone" _obj $ \cobj__obj -> 
+    wxAuiSimpleTabArt_Clone cobj__obj  
+foreign import ccall "wxAuiSimpleTabArt_Clone" wxAuiSimpleTabArt_Clone :: Ptr (TAuiSimpleTabArt a) -> IO (Ptr (TAuiTabArt ()))
+
+-- | usage: (@auiSimpleTabArtCreate@).
+auiSimpleTabArtCreate ::  IO (AuiSimpleTabArt  ())
+auiSimpleTabArtCreate 
+  = withObjectResult $
+    wxAuiSimpleTabArt_Create 
+foreign import ccall "wxAuiSimpleTabArt_Create" wxAuiSimpleTabArt_Create :: IO (Ptr (TAuiSimpleTabArt ()))
+
+-- | usage: (@auiSimpleTabArtDrawBackground obj dc wnd rect@).
+auiSimpleTabArtDrawBackground :: AuiSimpleTabArt  a -> DC  b -> Window  c -> Rect ->  IO ()
+auiSimpleTabArtDrawBackground _obj _dc _wnd _rect 
+  = withObjectRef "auiSimpleTabArtDrawBackground" _obj $ \cobj__obj -> 
+    withObjectPtr _dc $ \cobj__dc -> 
+    withObjectPtr _wnd $ \cobj__wnd -> 
+    withWxRectPtr _rect $ \cobj__rect -> 
+    wxAuiSimpleTabArt_DrawBackground cobj__obj  cobj__dc  cobj__wnd  cobj__rect  
+foreign import ccall "wxAuiSimpleTabArt_DrawBackground" wxAuiSimpleTabArt_DrawBackground :: Ptr (TAuiSimpleTabArt a) -> Ptr (TDC b) -> Ptr (TWindow c) -> Ptr (TWxRect d) -> IO ()
+
+-- | usage: (@auiSimpleTabArtDrawButton obj dc wnd inRect bitmapId buttonState orientation outRect@).
+auiSimpleTabArtDrawButton :: AuiSimpleTabArt  a -> DC  b -> Window  c -> Rect -> Int -> Int -> Int -> Rect ->  IO ()
+auiSimpleTabArtDrawButton _obj _dc _wnd _inRect bitmapId buttonState orientation _outRect 
+  = withObjectRef "auiSimpleTabArtDrawButton" _obj $ \cobj__obj -> 
+    withObjectPtr _dc $ \cobj__dc -> 
+    withObjectPtr _wnd $ \cobj__wnd -> 
+    withWxRectPtr _inRect $ \cobj__inRect -> 
+    withWxRectPtr _outRect $ \cobj__outRect -> 
+    wxAuiSimpleTabArt_DrawButton cobj__obj  cobj__dc  cobj__wnd  cobj__inRect  (toCInt bitmapId)  (toCInt buttonState)  (toCInt orientation)  cobj__outRect  
+foreign import ccall "wxAuiSimpleTabArt_DrawButton" wxAuiSimpleTabArt_DrawButton :: Ptr (TAuiSimpleTabArt a) -> Ptr (TDC b) -> Ptr (TWindow c) -> Ptr (TWxRect d) -> CInt -> CInt -> CInt -> Ptr (TWxRect h) -> IO ()
+
+-- | usage: (@auiSimpleTabArtDrawTab obj dc wnd pane inRect closeButtonState outTabRect outButtonRect xExtent@).
+auiSimpleTabArtDrawTab :: AuiSimpleTabArt  a -> DC  b -> Window  c -> AuiNotebookPage  d -> Rect -> Int -> Rect -> Rect -> Ptr CInt ->  IO ()
+auiSimpleTabArtDrawTab _obj _dc _wnd _pane _inRect closeButtonState _outTabRect _outButtonRect xExtent 
+  = withObjectRef "auiSimpleTabArtDrawTab" _obj $ \cobj__obj -> 
+    withObjectPtr _dc $ \cobj__dc -> 
+    withObjectPtr _wnd $ \cobj__wnd -> 
+    withObjectPtr _pane $ \cobj__pane -> 
+    withWxRectPtr _inRect $ \cobj__inRect -> 
+    withWxRectPtr _outTabRect $ \cobj__outTabRect -> 
+    withWxRectPtr _outButtonRect $ \cobj__outButtonRect -> 
+    wxAuiSimpleTabArt_DrawTab cobj__obj  cobj__dc  cobj__wnd  cobj__pane  cobj__inRect  (toCInt closeButtonState)  cobj__outTabRect  cobj__outButtonRect  xExtent  
+foreign import ccall "wxAuiSimpleTabArt_DrawTab" wxAuiSimpleTabArt_DrawTab :: Ptr (TAuiSimpleTabArt a) -> Ptr (TDC b) -> Ptr (TWindow c) -> Ptr (TAuiNotebookPage d) -> Ptr (TWxRect e) -> CInt -> Ptr (TWxRect g) -> Ptr (TWxRect h) -> Ptr CInt -> IO ()
+
+-- | usage: (@auiSimpleTabArtGetBestTabCtrlSize obj wnd pages widthheight@).
+auiSimpleTabArtGetBestTabCtrlSize :: AuiSimpleTabArt  a -> Window  b -> AuiNotebookPageArray  c -> Size ->  IO Int
+auiSimpleTabArtGetBestTabCtrlSize _obj _wnd _pages _widthheight 
+  = withIntResult $
+    withObjectRef "auiSimpleTabArtGetBestTabCtrlSize" _obj $ \cobj__obj -> 
+    withObjectPtr _wnd $ \cobj__wnd -> 
+    withObjectPtr _pages $ \cobj__pages -> 
+    wxAuiSimpleTabArt_GetBestTabCtrlSize cobj__obj  cobj__wnd  cobj__pages  (toCIntSizeW _widthheight) (toCIntSizeH _widthheight)  
+foreign import ccall "wxAuiSimpleTabArt_GetBestTabCtrlSize" wxAuiSimpleTabArt_GetBestTabCtrlSize :: Ptr (TAuiSimpleTabArt a) -> Ptr (TWindow b) -> Ptr (TAuiNotebookPageArray c) -> CInt -> CInt -> IO CInt
+
+-- | usage: (@auiSimpleTabArtGetIndentSize obj@).
+auiSimpleTabArtGetIndentSize :: AuiSimpleTabArt  a ->  IO Int
+auiSimpleTabArtGetIndentSize _obj 
+  = withIntResult $
+    withObjectRef "auiSimpleTabArtGetIndentSize" _obj $ \cobj__obj -> 
+    wxAuiSimpleTabArt_GetIndentSize cobj__obj  
+foreign import ccall "wxAuiSimpleTabArt_GetIndentSize" wxAuiSimpleTabArt_GetIndentSize :: Ptr (TAuiSimpleTabArt a) -> IO CInt
+
+-- | usage: (@auiSimpleTabArtGetTabSize obj dc wnd caption bitmap active closeButtonState xExtent@).
+auiSimpleTabArtGetTabSize :: AuiSimpleTabArt  a -> DC  b -> Window  c -> String -> Bitmap  e -> Bool -> Int -> Ptr CInt ->  IO (Size)
+auiSimpleTabArtGetTabSize _obj _dc _wnd _caption _bitmap active closeButtonState xExtent 
+  = withWxSizeResult $
+    withObjectRef "auiSimpleTabArtGetTabSize" _obj $ \cobj__obj -> 
+    withObjectPtr _dc $ \cobj__dc -> 
+    withObjectPtr _wnd $ \cobj__wnd -> 
+    withStringPtr _caption $ \cobj__caption -> 
+    withObjectPtr _bitmap $ \cobj__bitmap -> 
+    wxAuiSimpleTabArt_GetTabSize cobj__obj  cobj__dc  cobj__wnd  cobj__caption  cobj__bitmap  (toCBool active)  (toCInt closeButtonState)  xExtent  
+foreign import ccall "wxAuiSimpleTabArt_GetTabSize" wxAuiSimpleTabArt_GetTabSize :: Ptr (TAuiSimpleTabArt a) -> Ptr (TDC b) -> Ptr (TWindow c) -> Ptr (TWxString d) -> Ptr (TBitmap e) -> CBool -> CInt -> Ptr CInt -> IO (Ptr (TWxSize ()))
+
+-- | usage: (@auiSimpleTabArtSetActiveColour obj colour@).
+auiSimpleTabArtSetActiveColour :: AuiSimpleTabArt  a -> Color ->  IO ()
+auiSimpleTabArtSetActiveColour _obj _colour 
+  = withObjectRef "auiSimpleTabArtSetActiveColour" _obj $ \cobj__obj -> 
+    withColourPtr _colour $ \cobj__colour -> 
+    wxAuiSimpleTabArt_SetActiveColour cobj__obj  cobj__colour  
+foreign import ccall "wxAuiSimpleTabArt_SetActiveColour" wxAuiSimpleTabArt_SetActiveColour :: Ptr (TAuiSimpleTabArt a) -> Ptr (TColour b) -> IO ()
+
+-- | usage: (@auiSimpleTabArtSetColour obj colour@).
+auiSimpleTabArtSetColour :: AuiSimpleTabArt  a -> Color ->  IO ()
+auiSimpleTabArtSetColour _obj _colour 
+  = withObjectRef "auiSimpleTabArtSetColour" _obj $ \cobj__obj -> 
+    withColourPtr _colour $ \cobj__colour -> 
+    wxAuiSimpleTabArt_SetColour cobj__obj  cobj__colour  
+foreign import ccall "wxAuiSimpleTabArt_SetColour" wxAuiSimpleTabArt_SetColour :: Ptr (TAuiSimpleTabArt a) -> Ptr (TColour b) -> IO ()
+
+-- | usage: (@auiSimpleTabArtSetFlags obj flags@).
+auiSimpleTabArtSetFlags :: AuiSimpleTabArt  a -> Int ->  IO ()
+auiSimpleTabArtSetFlags _obj _flags 
+  = withObjectRef "auiSimpleTabArtSetFlags" _obj $ \cobj__obj -> 
+    wxAuiSimpleTabArt_SetFlags cobj__obj  (toCInt _flags)  
+foreign import ccall "wxAuiSimpleTabArt_SetFlags" wxAuiSimpleTabArt_SetFlags :: Ptr (TAuiSimpleTabArt a) -> CInt -> IO ()
+
+-- | usage: (@auiSimpleTabArtSetMeasuringFont obj font@).
+auiSimpleTabArtSetMeasuringFont :: AuiSimpleTabArt  a -> Font  b ->  IO ()
+auiSimpleTabArtSetMeasuringFont _obj _font 
+  = withObjectRef "auiSimpleTabArtSetMeasuringFont" _obj $ \cobj__obj -> 
+    withObjectPtr _font $ \cobj__font -> 
+    wxAuiSimpleTabArt_SetMeasuringFont cobj__obj  cobj__font  
+foreign import ccall "wxAuiSimpleTabArt_SetMeasuringFont" wxAuiSimpleTabArt_SetMeasuringFont :: Ptr (TAuiSimpleTabArt a) -> Ptr (TFont b) -> IO ()
+
+-- | usage: (@auiSimpleTabArtSetNormalFont obj font@).
+auiSimpleTabArtSetNormalFont :: AuiSimpleTabArt  a -> Font  b ->  IO ()
+auiSimpleTabArtSetNormalFont _obj _font 
+  = withObjectRef "auiSimpleTabArtSetNormalFont" _obj $ \cobj__obj -> 
+    withObjectPtr _font $ \cobj__font -> 
+    wxAuiSimpleTabArt_SetNormalFont cobj__obj  cobj__font  
+foreign import ccall "wxAuiSimpleTabArt_SetNormalFont" wxAuiSimpleTabArt_SetNormalFont :: Ptr (TAuiSimpleTabArt a) -> Ptr (TFont b) -> IO ()
+
+-- | usage: (@auiSimpleTabArtSetSelectedFont obj font@).
+auiSimpleTabArtSetSelectedFont :: AuiSimpleTabArt  a -> Font  b ->  IO ()
+auiSimpleTabArtSetSelectedFont _obj _font 
+  = withObjectRef "auiSimpleTabArtSetSelectedFont" _obj $ \cobj__obj -> 
+    withObjectPtr _font $ \cobj__font -> 
+    wxAuiSimpleTabArt_SetSelectedFont cobj__obj  cobj__font  
+foreign import ccall "wxAuiSimpleTabArt_SetSelectedFont" wxAuiSimpleTabArt_SetSelectedFont :: Ptr (TAuiSimpleTabArt a) -> Ptr (TFont b) -> IO ()
+
+-- | usage: (@auiSimpleTabArtSetSizingInfo obj widthheight tabCount@).
+auiSimpleTabArtSetSizingInfo :: AuiSimpleTabArt  a -> Size -> Int ->  IO ()
+auiSimpleTabArtSetSizingInfo _obj _widthheight tabCount 
+  = withObjectRef "auiSimpleTabArtSetSizingInfo" _obj $ \cobj__obj -> 
+    wxAuiSimpleTabArt_SetSizingInfo cobj__obj  (toCIntSizeW _widthheight) (toCIntSizeH _widthheight)  (toCInt tabCount)  
+foreign import ccall "wxAuiSimpleTabArt_SetSizingInfo" wxAuiSimpleTabArt_SetSizingInfo :: Ptr (TAuiSimpleTabArt a) -> CInt -> CInt -> CInt -> IO ()
+
+-- | usage: (@auiSimpleTabArtShowDropDown obj wnd items activeIdx@).
+auiSimpleTabArtShowDropDown :: AuiSimpleTabArt  a -> Window  b -> AuiNotebookPageArray  c -> Int ->  IO Int
+auiSimpleTabArtShowDropDown _obj _wnd _items activeIdx 
+  = withIntResult $
+    withObjectRef "auiSimpleTabArtShowDropDown" _obj $ \cobj__obj -> 
+    withObjectPtr _wnd $ \cobj__wnd -> 
+    withObjectPtr _items $ \cobj__items -> 
+    wxAuiSimpleTabArt_ShowDropDown cobj__obj  cobj__wnd  cobj__items  (toCInt activeIdx)  
+foreign import ccall "wxAuiSimpleTabArt_ShowDropDown" wxAuiSimpleTabArt_ShowDropDown :: Ptr (TAuiSimpleTabArt a) -> Ptr (TWindow b) -> Ptr (TAuiNotebookPageArray c) -> CInt -> IO CInt
+
+-- | usage: (@auiTabArtClone obj@).
+auiTabArtClone :: AuiTabArt  a ->  IO (AuiTabArt  ())
+auiTabArtClone _obj 
+  = withObjectResult $
+    withObjectRef "auiTabArtClone" _obj $ \cobj__obj -> 
+    wxAuiTabArt_Clone cobj__obj  
+foreign import ccall "wxAuiTabArt_Clone" wxAuiTabArt_Clone :: Ptr (TAuiTabArt a) -> IO (Ptr (TAuiTabArt ()))
+
+-- | usage: (@auiTabArtDrawBackground obj dc wnd rect@).
+auiTabArtDrawBackground :: AuiTabArt  a -> DC  b -> Window  c -> Rect ->  IO ()
+auiTabArtDrawBackground _obj _dc _wnd _rect 
+  = withObjectRef "auiTabArtDrawBackground" _obj $ \cobj__obj -> 
+    withObjectPtr _dc $ \cobj__dc -> 
+    withObjectPtr _wnd $ \cobj__wnd -> 
+    withWxRectPtr _rect $ \cobj__rect -> 
+    wxAuiTabArt_DrawBackground cobj__obj  cobj__dc  cobj__wnd  cobj__rect  
+foreign import ccall "wxAuiTabArt_DrawBackground" wxAuiTabArt_DrawBackground :: Ptr (TAuiTabArt a) -> Ptr (TDC b) -> Ptr (TWindow c) -> Ptr (TWxRect d) -> IO ()
+
+-- | usage: (@auiTabArtDrawButton obj dc wnd inrect bitmapid buttonstate orientation outrect@).
+auiTabArtDrawButton :: AuiTabArt  a -> DC  b -> Window  c -> Rect -> Int -> Int -> Int -> Rect ->  IO ()
+auiTabArtDrawButton _obj _dc _wnd _inrect bitmapid buttonstate orientation _outrect 
+  = withObjectRef "auiTabArtDrawButton" _obj $ \cobj__obj -> 
+    withObjectPtr _dc $ \cobj__dc -> 
+    withObjectPtr _wnd $ \cobj__wnd -> 
+    withWxRectPtr _inrect $ \cobj__inrect -> 
+    withWxRectPtr _outrect $ \cobj__outrect -> 
+    wxAuiTabArt_DrawButton cobj__obj  cobj__dc  cobj__wnd  cobj__inrect  (toCInt bitmapid)  (toCInt buttonstate)  (toCInt orientation)  cobj__outrect  
+foreign import ccall "wxAuiTabArt_DrawButton" wxAuiTabArt_DrawButton :: Ptr (TAuiTabArt a) -> Ptr (TDC b) -> Ptr (TWindow c) -> Ptr (TWxRect d) -> CInt -> CInt -> CInt -> Ptr (TWxRect h) -> IO ()
+
+-- | usage: (@auiTabArtDrawTab obj dc wnd page rect closebuttonstate outtabrect outbuttonrect xextent@).
+auiTabArtDrawTab :: AuiTabArt  a -> DC  b -> Window  c -> AuiNotebookPage  d -> Rect -> Int -> Rect -> Rect -> Ptr CInt ->  IO ()
+auiTabArtDrawTab _obj _dc _wnd _page _rect closebuttonstate _outtabrect _outbuttonrect xextent 
+  = withObjectRef "auiTabArtDrawTab" _obj $ \cobj__obj -> 
+    withObjectPtr _dc $ \cobj__dc -> 
+    withObjectPtr _wnd $ \cobj__wnd -> 
+    withObjectPtr _page $ \cobj__page -> 
+    withWxRectPtr _rect $ \cobj__rect -> 
+    withWxRectPtr _outtabrect $ \cobj__outtabrect -> 
+    withWxRectPtr _outbuttonrect $ \cobj__outbuttonrect -> 
+    wxAuiTabArt_DrawTab cobj__obj  cobj__dc  cobj__wnd  cobj__page  cobj__rect  (toCInt closebuttonstate)  cobj__outtabrect  cobj__outbuttonrect  xextent  
+foreign import ccall "wxAuiTabArt_DrawTab" wxAuiTabArt_DrawTab :: Ptr (TAuiTabArt a) -> Ptr (TDC b) -> Ptr (TWindow c) -> Ptr (TAuiNotebookPage d) -> Ptr (TWxRect e) -> CInt -> Ptr (TWxRect g) -> Ptr (TWxRect h) -> Ptr CInt -> IO ()
+
+-- | usage: (@auiTabArtGetBestTabCtrlSize obj wnd pages widthheight@).
+auiTabArtGetBestTabCtrlSize :: AuiTabArt  a -> Window  b -> AuiNotebookPageArray  c -> Size ->  IO Int
+auiTabArtGetBestTabCtrlSize _obj _wnd _pages _widthheight 
+  = withIntResult $
+    withObjectRef "auiTabArtGetBestTabCtrlSize" _obj $ \cobj__obj -> 
+    withObjectPtr _wnd $ \cobj__wnd -> 
+    withObjectPtr _pages $ \cobj__pages -> 
+    wxAuiTabArt_GetBestTabCtrlSize cobj__obj  cobj__wnd  cobj__pages  (toCIntSizeW _widthheight) (toCIntSizeH _widthheight)  
+foreign import ccall "wxAuiTabArt_GetBestTabCtrlSize" wxAuiTabArt_GetBestTabCtrlSize :: Ptr (TAuiTabArt a) -> Ptr (TWindow b) -> Ptr (TAuiNotebookPageArray c) -> CInt -> CInt -> IO CInt
+
+-- | usage: (@auiTabArtGetIndentSize obj@).
+auiTabArtGetIndentSize :: AuiTabArt  a ->  IO Int
+auiTabArtGetIndentSize _obj 
+  = withIntResult $
+    withObjectRef "auiTabArtGetIndentSize" _obj $ \cobj__obj -> 
+    wxAuiTabArt_GetIndentSize cobj__obj  
+foreign import ccall "wxAuiTabArt_GetIndentSize" wxAuiTabArt_GetIndentSize :: Ptr (TAuiTabArt a) -> IO CInt
+
+-- | usage: (@auiTabArtGetTabSize obj dc wnd caption bitmap active closebuttonstate xextent@).
+auiTabArtGetTabSize :: AuiTabArt  a -> DC  b -> Window  c -> String -> Bitmap  e -> Bool -> Int -> Ptr CInt ->  IO (Size)
+auiTabArtGetTabSize _obj _dc _wnd _caption _bitmap active closebuttonstate xextent 
+  = withWxSizeResult $
+    withObjectRef "auiTabArtGetTabSize" _obj $ \cobj__obj -> 
+    withObjectPtr _dc $ \cobj__dc -> 
+    withObjectPtr _wnd $ \cobj__wnd -> 
+    withStringPtr _caption $ \cobj__caption -> 
+    withObjectPtr _bitmap $ \cobj__bitmap -> 
+    wxAuiTabArt_GetTabSize cobj__obj  cobj__dc  cobj__wnd  cobj__caption  cobj__bitmap  (toCBool active)  (toCInt closebuttonstate)  xextent  
+foreign import ccall "wxAuiTabArt_GetTabSize" wxAuiTabArt_GetTabSize :: Ptr (TAuiTabArt a) -> Ptr (TDC b) -> Ptr (TWindow c) -> Ptr (TWxString d) -> Ptr (TBitmap e) -> CBool -> CInt -> Ptr CInt -> IO (Ptr (TWxSize ()))
+
+-- | usage: (@auiTabArtSetActiveColour obj colour@).
+auiTabArtSetActiveColour :: AuiTabArt  a -> Color ->  IO ()
+auiTabArtSetActiveColour _obj _colour 
+  = withObjectRef "auiTabArtSetActiveColour" _obj $ \cobj__obj -> 
+    withColourPtr _colour $ \cobj__colour -> 
+    wxAuiTabArt_SetActiveColour cobj__obj  cobj__colour  
+foreign import ccall "wxAuiTabArt_SetActiveColour" wxAuiTabArt_SetActiveColour :: Ptr (TAuiTabArt a) -> Ptr (TColour b) -> IO ()
+
+-- | usage: (@auiTabArtSetColour obj colour@).
+auiTabArtSetColour :: AuiTabArt  a -> Color ->  IO ()
+auiTabArtSetColour _obj _colour 
+  = withObjectRef "auiTabArtSetColour" _obj $ \cobj__obj -> 
+    withColourPtr _colour $ \cobj__colour -> 
+    wxAuiTabArt_SetColour cobj__obj  cobj__colour  
+foreign import ccall "wxAuiTabArt_SetColour" wxAuiTabArt_SetColour :: Ptr (TAuiTabArt a) -> Ptr (TColour b) -> IO ()
+
+-- | usage: (@auiTabArtSetFlags obj flags@).
+auiTabArtSetFlags :: AuiTabArt  a -> Int ->  IO ()
+auiTabArtSetFlags _obj _flags 
+  = withObjectRef "auiTabArtSetFlags" _obj $ \cobj__obj -> 
+    wxAuiTabArt_SetFlags cobj__obj  (toCInt _flags)  
+foreign import ccall "wxAuiTabArt_SetFlags" wxAuiTabArt_SetFlags :: Ptr (TAuiTabArt a) -> CInt -> IO ()
+
+-- | usage: (@auiTabArtSetMeasuringFont obj font@).
+auiTabArtSetMeasuringFont :: AuiTabArt  a -> Font  b ->  IO ()
+auiTabArtSetMeasuringFont _obj _font 
+  = withObjectRef "auiTabArtSetMeasuringFont" _obj $ \cobj__obj -> 
+    withObjectPtr _font $ \cobj__font -> 
+    wxAuiTabArt_SetMeasuringFont cobj__obj  cobj__font  
+foreign import ccall "wxAuiTabArt_SetMeasuringFont" wxAuiTabArt_SetMeasuringFont :: Ptr (TAuiTabArt a) -> Ptr (TFont b) -> IO ()
+
+-- | usage: (@auiTabArtSetNormalFont obj font@).
+auiTabArtSetNormalFont :: AuiTabArt  a -> Font  b ->  IO ()
+auiTabArtSetNormalFont _obj _font 
+  = withObjectRef "auiTabArtSetNormalFont" _obj $ \cobj__obj -> 
+    withObjectPtr _font $ \cobj__font -> 
+    wxAuiTabArt_SetNormalFont cobj__obj  cobj__font  
+foreign import ccall "wxAuiTabArt_SetNormalFont" wxAuiTabArt_SetNormalFont :: Ptr (TAuiTabArt a) -> Ptr (TFont b) -> IO ()
+
+-- | usage: (@auiTabArtSetSelectedFont obj font@).
+auiTabArtSetSelectedFont :: AuiTabArt  a -> Font  b ->  IO ()
+auiTabArtSetSelectedFont _obj _font 
+  = withObjectRef "auiTabArtSetSelectedFont" _obj $ \cobj__obj -> 
+    withObjectPtr _font $ \cobj__font -> 
+    wxAuiTabArt_SetSelectedFont cobj__obj  cobj__font  
+foreign import ccall "wxAuiTabArt_SetSelectedFont" wxAuiTabArt_SetSelectedFont :: Ptr (TAuiTabArt a) -> Ptr (TFont b) -> IO ()
+
+-- | usage: (@auiTabArtSetSizingInfo obj widthheight tabcount@).
+auiTabArtSetSizingInfo :: AuiTabArt  a -> Size -> Int ->  IO ()
+auiTabArtSetSizingInfo _obj _widthheight tabcount 
+  = withObjectRef "auiTabArtSetSizingInfo" _obj $ \cobj__obj -> 
+    wxAuiTabArt_SetSizingInfo cobj__obj  (toCIntSizeW _widthheight) (toCIntSizeH _widthheight)  (toCInt tabcount)  
+foreign import ccall "wxAuiTabArt_SetSizingInfo" wxAuiTabArt_SetSizingInfo :: Ptr (TAuiTabArt a) -> CInt -> CInt -> CInt -> IO ()
+
+-- | usage: (@auiTabContainerAddButton obj id location normalBitmap disabledBitmap@).
+auiTabContainerAddButton :: AuiTabContainer  a -> Id -> Int -> Bitmap  d -> Bitmap  e ->  IO ()
+auiTabContainerAddButton _obj id location _normalBitmap _disabledBitmap 
+  = withObjectRef "auiTabContainerAddButton" _obj $ \cobj__obj -> 
+    withObjectPtr _normalBitmap $ \cobj__normalBitmap -> 
+    withObjectPtr _disabledBitmap $ \cobj__disabledBitmap -> 
+    wxAuiTabContainer_AddButton cobj__obj  (toCInt id)  (toCInt location)  cobj__normalBitmap  cobj__disabledBitmap  
+foreign import ccall "wxAuiTabContainer_AddButton" wxAuiTabContainer_AddButton :: Ptr (TAuiTabContainer a) -> CInt -> CInt -> Ptr (TBitmap d) -> Ptr (TBitmap e) -> IO ()
+
+-- | usage: (@auiTabContainerAddPage obj page info@).
+auiTabContainerAddPage :: AuiTabContainer  a -> Window  b -> AuiNotebookPage  c ->  IO Bool
+auiTabContainerAddPage _obj _page _info 
+  = withBoolResult $
+    withObjectRef "auiTabContainerAddPage" _obj $ \cobj__obj -> 
+    withObjectPtr _page $ \cobj__page -> 
+    withObjectPtr _info $ \cobj__info -> 
+    wxAuiTabContainer_AddPage cobj__obj  cobj__page  cobj__info  
+foreign import ccall "wxAuiTabContainer_AddPage" wxAuiTabContainer_AddPage :: Ptr (TAuiTabContainer a) -> Ptr (TWindow b) -> Ptr (TAuiNotebookPage c) -> IO CBool
+
+-- | usage: (@auiTabContainerButtonBitmap obj@).
+auiTabContainerButtonBitmap :: AuiTabContainerButton  a ->  IO (Bitmap  ())
+auiTabContainerButtonBitmap _obj 
+  = withRefBitmap $ \pref -> 
+    withObjectRef "auiTabContainerButtonBitmap" _obj $ \cobj__obj -> 
+    wxAuiTabContainerButton_Bitmap cobj__obj   pref
+foreign import ccall "wxAuiTabContainerButton_Bitmap" wxAuiTabContainerButton_Bitmap :: Ptr (TAuiTabContainerButton a) -> Ptr (TBitmap ()) -> IO ()
+
+-- | usage: (@auiTabContainerButtonCurState obj@).
+auiTabContainerButtonCurState :: AuiTabContainerButton  a ->  IO Int
+auiTabContainerButtonCurState _obj 
+  = withIntResult $
+    withObjectRef "auiTabContainerButtonCurState" _obj $ \cobj__obj -> 
+    wxAuiTabContainerButton_CurState cobj__obj  
+foreign import ccall "wxAuiTabContainerButton_CurState" wxAuiTabContainerButton_CurState :: Ptr (TAuiTabContainerButton a) -> IO CInt
+
+-- | usage: (@auiTabContainerButtonDisBitmap obj@).
+auiTabContainerButtonDisBitmap :: AuiTabContainerButton  a ->  IO (Bitmap  ())
+auiTabContainerButtonDisBitmap _obj 
+  = withRefBitmap $ \pref -> 
+    withObjectRef "auiTabContainerButtonDisBitmap" _obj $ \cobj__obj -> 
+    wxAuiTabContainerButton_DisBitmap cobj__obj   pref
+foreign import ccall "wxAuiTabContainerButton_DisBitmap" wxAuiTabContainerButton_DisBitmap :: Ptr (TAuiTabContainerButton a) -> Ptr (TBitmap ()) -> IO ()
+
+-- | usage: (@auiTabContainerButtonId obj@).
+auiTabContainerButtonId :: AuiTabContainerButton  a ->  IO Int
+auiTabContainerButtonId _obj 
+  = withIntResult $
+    withObjectRef "auiTabContainerButtonId" _obj $ \cobj__obj -> 
+    wxAuiTabContainerButton_Id cobj__obj  
+foreign import ccall "wxAuiTabContainerButton_Id" wxAuiTabContainerButton_Id :: Ptr (TAuiTabContainerButton a) -> IO CInt
+
+-- | usage: (@auiTabContainerButtonLocation obj@).
+auiTabContainerButtonLocation :: AuiTabContainerButton  a ->  IO Int
+auiTabContainerButtonLocation _obj 
+  = withIntResult $
+    withObjectRef "auiTabContainerButtonLocation" _obj $ \cobj__obj -> 
+    wxAuiTabContainerButton_Location cobj__obj  
+foreign import ccall "wxAuiTabContainerButton_Location" wxAuiTabContainerButton_Location :: Ptr (TAuiTabContainerButton a) -> IO CInt
+
+-- | usage: (@auiTabContainerButtonRect obj@).
+auiTabContainerButtonRect :: AuiTabContainerButton  a ->  IO (Rect)
+auiTabContainerButtonRect _obj 
+  = withWxRectResult $
+    withObjectRef "auiTabContainerButtonRect" _obj $ \cobj__obj -> 
+    wxAuiTabContainerButton_Rect cobj__obj  
+foreign import ccall "wxAuiTabContainerButton_Rect" wxAuiTabContainerButton_Rect :: Ptr (TAuiTabContainerButton a) -> IO (Ptr (TWxRect ()))
+
+-- | usage: (@auiTabContainerCreate@).
+auiTabContainerCreate ::  IO (AuiTabContainer  ())
+auiTabContainerCreate 
+  = withObjectResult $
+    wxAuiTabContainer_Create 
+foreign import ccall "wxAuiTabContainer_Create" wxAuiTabContainer_Create :: IO (Ptr (TAuiTabContainer ()))
+
+-- | usage: (@auiTabContainerDoShowHide obj@).
+auiTabContainerDoShowHide :: AuiTabContainer  a ->  IO ()
+auiTabContainerDoShowHide _obj 
+  = withObjectRef "auiTabContainerDoShowHide" _obj $ \cobj__obj -> 
+    wxAuiTabContainer_DoShowHide cobj__obj  
+foreign import ccall "wxAuiTabContainer_DoShowHide" wxAuiTabContainer_DoShowHide :: Ptr (TAuiTabContainer a) -> IO ()
+
+-- | usage: (@auiTabContainerGetActivePage obj@).
+auiTabContainerGetActivePage :: AuiTabContainer  a ->  IO Int
+auiTabContainerGetActivePage _obj 
+  = withIntResult $
+    withObjectRef "auiTabContainerGetActivePage" _obj $ \cobj__obj -> 
+    wxAuiTabContainer_GetActivePage cobj__obj  
+foreign import ccall "wxAuiTabContainer_GetActivePage" wxAuiTabContainer_GetActivePage :: Ptr (TAuiTabContainer a) -> IO CInt
+
+-- | usage: (@auiTabContainerGetArtProvider obj@).
+auiTabContainerGetArtProvider :: AuiTabContainer  a ->  IO (AuiTabArt  ())
+auiTabContainerGetArtProvider _obj 
+  = withObjectResult $
+    withObjectRef "auiTabContainerGetArtProvider" _obj $ \cobj__obj -> 
+    wxAuiTabContainer_GetArtProvider cobj__obj  
+foreign import ccall "wxAuiTabContainer_GetArtProvider" wxAuiTabContainer_GetArtProvider :: Ptr (TAuiTabContainer a) -> IO (Ptr (TAuiTabArt ()))
+
+-- | usage: (@auiTabContainerGetFlags obj@).
+auiTabContainerGetFlags :: AuiTabContainer  a ->  IO Int
+auiTabContainerGetFlags _obj 
+  = withIntResult $
+    withObjectRef "auiTabContainerGetFlags" _obj $ \cobj__obj -> 
+    wxAuiTabContainer_GetFlags cobj__obj  
+foreign import ccall "wxAuiTabContainer_GetFlags" wxAuiTabContainer_GetFlags :: Ptr (TAuiTabContainer a) -> IO CInt
+
+-- | usage: (@auiTabContainerGetIdxFromWindow obj page@).
+auiTabContainerGetIdxFromWindow :: AuiTabContainer  a -> Window  b ->  IO Int
+auiTabContainerGetIdxFromWindow _obj _page 
+  = withIntResult $
+    withObjectRef "auiTabContainerGetIdxFromWindow" _obj $ \cobj__obj -> 
+    withObjectPtr _page $ \cobj__page -> 
+    wxAuiTabContainer_GetIdxFromWindow cobj__obj  cobj__page  
+foreign import ccall "wxAuiTabContainer_GetIdxFromWindow" wxAuiTabContainer_GetIdxFromWindow :: Ptr (TAuiTabContainer a) -> Ptr (TWindow b) -> IO CInt
+
+-- | usage: (@auiTabContainerGetPage obj idx@).
+auiTabContainerGetPage :: AuiTabContainer  a -> Int ->  IO (AuiNotebookPage  ())
+auiTabContainerGetPage _obj idx 
+  = withObjectResult $
+    withObjectRef "auiTabContainerGetPage" _obj $ \cobj__obj -> 
+    wxAuiTabContainer_GetPage cobj__obj  (toCInt idx)  
+foreign import ccall "wxAuiTabContainer_GetPage" wxAuiTabContainer_GetPage :: Ptr (TAuiTabContainer a) -> CInt -> IO (Ptr (TAuiNotebookPage ()))
+
+-- | usage: (@auiTabContainerGetPageCount obj@).
+auiTabContainerGetPageCount :: AuiTabContainer  a ->  IO Int
+auiTabContainerGetPageCount _obj 
+  = withIntResult $
+    withObjectRef "auiTabContainerGetPageCount" _obj $ \cobj__obj -> 
+    wxAuiTabContainer_GetPageCount cobj__obj  
+foreign import ccall "wxAuiTabContainer_GetPageCount" wxAuiTabContainer_GetPageCount :: Ptr (TAuiTabContainer a) -> IO CInt
+
+-- | usage: (@auiTabContainerGetPages obj@).
+auiTabContainerGetPages :: AuiTabContainer  a ->  IO (AuiNotebookPageArray  ())
+auiTabContainerGetPages _obj 
+  = withObjectResult $
+    withObjectRef "auiTabContainerGetPages" _obj $ \cobj__obj -> 
+    wxAuiTabContainer_GetPages cobj__obj  
+foreign import ccall "wxAuiTabContainer_GetPages" wxAuiTabContainer_GetPages :: Ptr (TAuiTabContainer a) -> IO (Ptr (TAuiNotebookPageArray ()))
+
+-- | usage: (@auiTabContainerGetTabOffset obj@).
+auiTabContainerGetTabOffset :: AuiTabContainer  a ->  IO Int
+auiTabContainerGetTabOffset _obj 
+  = withIntResult $
+    withObjectRef "auiTabContainerGetTabOffset" _obj $ \cobj__obj -> 
+    wxAuiTabContainer_GetTabOffset cobj__obj  
+foreign import ccall "wxAuiTabContainer_GetTabOffset" wxAuiTabContainer_GetTabOffset :: Ptr (TAuiTabContainer a) -> IO CInt
+
+-- | usage: (@auiTabContainerGetWindowFromIdx obj idx@).
+auiTabContainerGetWindowFromIdx :: AuiTabContainer  a -> Int ->  IO (Window  ())
+auiTabContainerGetWindowFromIdx _obj idx 
+  = withObjectResult $
+    withObjectRef "auiTabContainerGetWindowFromIdx" _obj $ \cobj__obj -> 
+    wxAuiTabContainer_GetWindowFromIdx cobj__obj  (toCInt idx)  
+foreign import ccall "wxAuiTabContainer_GetWindowFromIdx" wxAuiTabContainer_GetWindowFromIdx :: Ptr (TAuiTabContainer a) -> CInt -> IO (Ptr (TWindow ()))
+
+-- | usage: (@auiTabContainerInsertPage obj page info idx@).
+auiTabContainerInsertPage :: AuiTabContainer  a -> Window  b -> AuiNotebookPage  c -> Int ->  IO Bool
+auiTabContainerInsertPage _obj _page _info idx 
+  = withBoolResult $
+    withObjectRef "auiTabContainerInsertPage" _obj $ \cobj__obj -> 
+    withObjectPtr _page $ \cobj__page -> 
+    withObjectPtr _info $ \cobj__info -> 
+    wxAuiTabContainer_InsertPage cobj__obj  cobj__page  cobj__info  (toCInt idx)  
+foreign import ccall "wxAuiTabContainer_InsertPage" wxAuiTabContainer_InsertPage :: Ptr (TAuiTabContainer a) -> Ptr (TWindow b) -> Ptr (TAuiNotebookPage c) -> CInt -> IO CBool
+
+-- | usage: (@auiTabContainerIsTabVisible obj tabPage tabOffset dc wnd@).
+auiTabContainerIsTabVisible :: AuiTabContainer  a -> Int -> Int -> DC  d -> Window  e ->  IO Bool
+auiTabContainerIsTabVisible _obj tabPage tabOffset _dc _wnd 
+  = withBoolResult $
+    withObjectRef "auiTabContainerIsTabVisible" _obj $ \cobj__obj -> 
+    withObjectPtr _dc $ \cobj__dc -> 
+    withObjectPtr _wnd $ \cobj__wnd -> 
+    wxAuiTabContainer_IsTabVisible cobj__obj  (toCInt tabPage)  (toCInt tabOffset)  cobj__dc  cobj__wnd  
+foreign import ccall "wxAuiTabContainer_IsTabVisible" wxAuiTabContainer_IsTabVisible :: Ptr (TAuiTabContainer a) -> CInt -> CInt -> Ptr (TDC d) -> Ptr (TWindow e) -> IO CBool
+
+-- | usage: (@auiTabContainerMakeTabVisible obj tabPage win@).
+auiTabContainerMakeTabVisible :: AuiTabContainer  a -> Int -> Window  c ->  IO ()
+auiTabContainerMakeTabVisible _obj tabPage _win 
+  = withObjectRef "auiTabContainerMakeTabVisible" _obj $ \cobj__obj -> 
+    withObjectPtr _win $ \cobj__win -> 
+    wxAuiTabContainer_MakeTabVisible cobj__obj  (toCInt tabPage)  cobj__win  
+foreign import ccall "wxAuiTabContainer_MakeTabVisible" wxAuiTabContainer_MakeTabVisible :: Ptr (TAuiTabContainer a) -> CInt -> Ptr (TWindow c) -> IO ()
+
+-- | usage: (@auiTabContainerMovePage obj page newIdx@).
+auiTabContainerMovePage :: AuiTabContainer  a -> Window  b -> Int ->  IO Bool
+auiTabContainerMovePage _obj _page newIdx 
+  = withBoolResult $
+    withObjectRef "auiTabContainerMovePage" _obj $ \cobj__obj -> 
+    withObjectPtr _page $ \cobj__page -> 
+    wxAuiTabContainer_MovePage cobj__obj  cobj__page  (toCInt newIdx)  
+foreign import ccall "wxAuiTabContainer_MovePage" wxAuiTabContainer_MovePage :: Ptr (TAuiTabContainer a) -> Ptr (TWindow b) -> CInt -> IO CBool
+
+-- | usage: (@auiTabContainerRemoveButton obj id@).
+auiTabContainerRemoveButton :: AuiTabContainer  a -> Id ->  IO ()
+auiTabContainerRemoveButton _obj id 
+  = withObjectRef "auiTabContainerRemoveButton" _obj $ \cobj__obj -> 
+    wxAuiTabContainer_RemoveButton cobj__obj  (toCInt id)  
+foreign import ccall "wxAuiTabContainer_RemoveButton" wxAuiTabContainer_RemoveButton :: Ptr (TAuiTabContainer a) -> CInt -> IO ()
+
+-- | usage: (@auiTabContainerRemovePage obj page@).
+auiTabContainerRemovePage :: AuiTabContainer  a -> Window  b ->  IO Bool
+auiTabContainerRemovePage _obj _page 
+  = withBoolResult $
+    withObjectRef "auiTabContainerRemovePage" _obj $ \cobj__obj -> 
+    withObjectPtr _page $ \cobj__page -> 
+    wxAuiTabContainer_RemovePage cobj__obj  cobj__page  
+foreign import ccall "wxAuiTabContainer_RemovePage" wxAuiTabContainer_RemovePage :: Ptr (TAuiTabContainer a) -> Ptr (TWindow b) -> IO CBool
+
+-- | usage: (@auiTabContainerSetActiveColour obj colour@).
+auiTabContainerSetActiveColour :: AuiTabContainer  a -> Color ->  IO ()
+auiTabContainerSetActiveColour _obj _colour 
+  = withObjectRef "auiTabContainerSetActiveColour" _obj $ \cobj__obj -> 
+    withColourPtr _colour $ \cobj__colour -> 
+    wxAuiTabContainer_SetActiveColour cobj__obj  cobj__colour  
+foreign import ccall "wxAuiTabContainer_SetActiveColour" wxAuiTabContainer_SetActiveColour :: Ptr (TAuiTabContainer a) -> Ptr (TColour b) -> IO ()
+
+-- | usage: (@auiTabContainerSetActivePage obj page@).
+auiTabContainerSetActivePage :: AuiTabContainer  a -> Int ->  IO Bool
+auiTabContainerSetActivePage _obj page 
+  = withBoolResult $
+    withObjectRef "auiTabContainerSetActivePage" _obj $ \cobj__obj -> 
+    wxAuiTabContainer_SetActivePage cobj__obj  (toCInt page)  
+foreign import ccall "wxAuiTabContainer_SetActivePage" wxAuiTabContainer_SetActivePage :: Ptr (TAuiTabContainer a) -> CInt -> IO CBool
+
+-- | usage: (@auiTabContainerSetActivePageByWindow obj page@).
+auiTabContainerSetActivePageByWindow :: AuiTabContainer  a -> Window  b ->  IO Bool
+auiTabContainerSetActivePageByWindow _obj _page 
+  = withBoolResult $
+    withObjectRef "auiTabContainerSetActivePageByWindow" _obj $ \cobj__obj -> 
+    withObjectPtr _page $ \cobj__page -> 
+    wxAuiTabContainer_SetActivePageByWindow cobj__obj  cobj__page  
+foreign import ccall "wxAuiTabContainer_SetActivePageByWindow" wxAuiTabContainer_SetActivePageByWindow :: Ptr (TAuiTabContainer a) -> Ptr (TWindow b) -> IO CBool
+
+-- | usage: (@auiTabContainerSetArtProvider obj art@).
+auiTabContainerSetArtProvider :: AuiTabContainer  a -> AuiTabArt  b ->  IO ()
+auiTabContainerSetArtProvider _obj _art 
+  = withObjectRef "auiTabContainerSetArtProvider" _obj $ \cobj__obj -> 
+    withObjectPtr _art $ \cobj__art -> 
+    wxAuiTabContainer_SetArtProvider cobj__obj  cobj__art  
+foreign import ccall "wxAuiTabContainer_SetArtProvider" wxAuiTabContainer_SetArtProvider :: Ptr (TAuiTabContainer a) -> Ptr (TAuiTabArt b) -> IO ()
+
+-- | usage: (@auiTabContainerSetColour obj colour@).
+auiTabContainerSetColour :: AuiTabContainer  a -> Color ->  IO ()
+auiTabContainerSetColour _obj _colour 
+  = withObjectRef "auiTabContainerSetColour" _obj $ \cobj__obj -> 
+    withColourPtr _colour $ \cobj__colour -> 
+    wxAuiTabContainer_SetColour cobj__obj  cobj__colour  
+foreign import ccall "wxAuiTabContainer_SetColour" wxAuiTabContainer_SetColour :: Ptr (TAuiTabContainer a) -> Ptr (TColour b) -> IO ()
+
+-- | usage: (@auiTabContainerSetFlags obj flags@).
+auiTabContainerSetFlags :: AuiTabContainer  a -> Int ->  IO ()
+auiTabContainerSetFlags _obj _flags 
+  = withObjectRef "auiTabContainerSetFlags" _obj $ \cobj__obj -> 
+    wxAuiTabContainer_SetFlags cobj__obj  (toCInt _flags)  
+foreign import ccall "wxAuiTabContainer_SetFlags" wxAuiTabContainer_SetFlags :: Ptr (TAuiTabContainer a) -> CInt -> IO ()
+
+-- | usage: (@auiTabContainerSetMeasuringFont obj measuringFont@).
+auiTabContainerSetMeasuringFont :: AuiTabContainer  a -> Font  b ->  IO ()
+auiTabContainerSetMeasuringFont _obj _measuringFont 
+  = withObjectRef "auiTabContainerSetMeasuringFont" _obj $ \cobj__obj -> 
+    withObjectPtr _measuringFont $ \cobj__measuringFont -> 
+    wxAuiTabContainer_SetMeasuringFont cobj__obj  cobj__measuringFont  
+foreign import ccall "wxAuiTabContainer_SetMeasuringFont" wxAuiTabContainer_SetMeasuringFont :: Ptr (TAuiTabContainer a) -> Ptr (TFont b) -> IO ()
+
+-- | usage: (@auiTabContainerSetNoneActive obj@).
+auiTabContainerSetNoneActive :: AuiTabContainer  a ->  IO ()
+auiTabContainerSetNoneActive _obj 
+  = withObjectRef "auiTabContainerSetNoneActive" _obj $ \cobj__obj -> 
+    wxAuiTabContainer_SetNoneActive cobj__obj  
+foreign import ccall "wxAuiTabContainer_SetNoneActive" wxAuiTabContainer_SetNoneActive :: Ptr (TAuiTabContainer a) -> IO ()
+
+-- | usage: (@auiTabContainerSetNormalFont obj normalFont@).
+auiTabContainerSetNormalFont :: AuiTabContainer  a -> Font  b ->  IO ()
+auiTabContainerSetNormalFont _obj _normalFont 
+  = withObjectRef "auiTabContainerSetNormalFont" _obj $ \cobj__obj -> 
+    withObjectPtr _normalFont $ \cobj__normalFont -> 
+    wxAuiTabContainer_SetNormalFont cobj__obj  cobj__normalFont  
+foreign import ccall "wxAuiTabContainer_SetNormalFont" wxAuiTabContainer_SetNormalFont :: Ptr (TAuiTabContainer a) -> Ptr (TFont b) -> IO ()
+
+-- | usage: (@auiTabContainerSetRect obj rect@).
+auiTabContainerSetRect :: AuiTabContainer  a -> Rect ->  IO ()
+auiTabContainerSetRect _obj _rect 
+  = withObjectRef "auiTabContainerSetRect" _obj $ \cobj__obj -> 
+    withWxRectPtr _rect $ \cobj__rect -> 
+    wxAuiTabContainer_SetRect cobj__obj  cobj__rect  
+foreign import ccall "wxAuiTabContainer_SetRect" wxAuiTabContainer_SetRect :: Ptr (TAuiTabContainer a) -> Ptr (TWxRect b) -> IO ()
+
+-- | usage: (@auiTabContainerSetSelectedFont obj selectedFont@).
+auiTabContainerSetSelectedFont :: AuiTabContainer  a -> Font  b ->  IO ()
+auiTabContainerSetSelectedFont _obj _selectedFont 
+  = withObjectRef "auiTabContainerSetSelectedFont" _obj $ \cobj__obj -> 
+    withObjectPtr _selectedFont $ \cobj__selectedFont -> 
+    wxAuiTabContainer_SetSelectedFont cobj__obj  cobj__selectedFont  
+foreign import ccall "wxAuiTabContainer_SetSelectedFont" wxAuiTabContainer_SetSelectedFont :: Ptr (TAuiTabContainer a) -> Ptr (TFont b) -> IO ()
+
+-- | usage: (@auiTabContainerSetTabOffset obj offset@).
+auiTabContainerSetTabOffset :: AuiTabContainer  a -> Int ->  IO ()
+auiTabContainerSetTabOffset _obj offset 
+  = withObjectRef "auiTabContainerSetTabOffset" _obj $ \cobj__obj -> 
+    wxAuiTabContainer_SetTabOffset cobj__obj  (toCInt offset)  
+foreign import ccall "wxAuiTabContainer_SetTabOffset" wxAuiTabContainer_SetTabOffset :: Ptr (TAuiTabContainer a) -> CInt -> IO ()
+
+-- | usage: (@auiTabCtrlAddButton obj id location normalBitmap disabledBitmap@).
+auiTabCtrlAddButton :: AuiTabCtrl  a -> Id -> Int -> Bitmap  d -> Bitmap  e ->  IO ()
+auiTabCtrlAddButton _obj id location _normalBitmap _disabledBitmap 
+  = withObjectRef "auiTabCtrlAddButton" _obj $ \cobj__obj -> 
+    withObjectPtr _normalBitmap $ \cobj__normalBitmap -> 
+    withObjectPtr _disabledBitmap $ \cobj__disabledBitmap -> 
+    wxAuiTabCtrl_AddButton cobj__obj  (toCInt id)  (toCInt location)  cobj__normalBitmap  cobj__disabledBitmap  
+foreign import ccall "wxAuiTabCtrl_AddButton" wxAuiTabCtrl_AddButton :: Ptr (TAuiTabCtrl a) -> CInt -> CInt -> Ptr (TBitmap d) -> Ptr (TBitmap e) -> IO ()
+
+-- | usage: (@auiTabCtrlAddPage obj page info@).
+auiTabCtrlAddPage :: AuiTabCtrl  a -> Window  b -> AuiNotebookPage  c ->  IO Bool
+auiTabCtrlAddPage _obj _page _info 
+  = withBoolResult $
+    withObjectRef "auiTabCtrlAddPage" _obj $ \cobj__obj -> 
+    withObjectPtr _page $ \cobj__page -> 
+    withObjectPtr _info $ \cobj__info -> 
+    wxAuiTabCtrl_AddPage cobj__obj  cobj__page  cobj__info  
+foreign import ccall "wxAuiTabCtrl_AddPage" wxAuiTabCtrl_AddPage :: Ptr (TAuiTabCtrl a) -> Ptr (TWindow b) -> Ptr (TAuiNotebookPage c) -> IO CBool
+
+-- | usage: (@auiTabCtrlDoShowHide obj@).
+auiTabCtrlDoShowHide :: AuiTabCtrl  a ->  IO ()
+auiTabCtrlDoShowHide _obj 
+  = withObjectRef "auiTabCtrlDoShowHide" _obj $ \cobj__obj -> 
+    wxAuiTabCtrl_DoShowHide cobj__obj  
+foreign import ccall "wxAuiTabCtrl_DoShowHide" wxAuiTabCtrl_DoShowHide :: Ptr (TAuiTabCtrl a) -> IO ()
+
+-- | usage: (@auiTabCtrlGetActivePage obj@).
+auiTabCtrlGetActivePage :: AuiTabCtrl  a ->  IO Int
+auiTabCtrlGetActivePage _obj 
+  = withIntResult $
+    withObjectRef "auiTabCtrlGetActivePage" _obj $ \cobj__obj -> 
+    wxAuiTabCtrl_GetActivePage cobj__obj  
+foreign import ccall "wxAuiTabCtrl_GetActivePage" wxAuiTabCtrl_GetActivePage :: Ptr (TAuiTabCtrl a) -> IO CInt
+
+-- | usage: (@auiTabCtrlGetArtProvider obj@).
+auiTabCtrlGetArtProvider :: AuiTabCtrl  a ->  IO (AuiTabArt  ())
+auiTabCtrlGetArtProvider _obj 
+  = withObjectResult $
+    withObjectRef "auiTabCtrlGetArtProvider" _obj $ \cobj__obj -> 
+    wxAuiTabCtrl_GetArtProvider cobj__obj  
+foreign import ccall "wxAuiTabCtrl_GetArtProvider" wxAuiTabCtrl_GetArtProvider :: Ptr (TAuiTabCtrl a) -> IO (Ptr (TAuiTabArt ()))
+
+-- | usage: (@auiTabCtrlGetFlags obj@).
+auiTabCtrlGetFlags :: AuiTabCtrl  a ->  IO Int
+auiTabCtrlGetFlags _obj 
+  = withIntResult $
+    withObjectRef "auiTabCtrlGetFlags" _obj $ \cobj__obj -> 
+    wxAuiTabCtrl_GetFlags cobj__obj  
+foreign import ccall "wxAuiTabCtrl_GetFlags" wxAuiTabCtrl_GetFlags :: Ptr (TAuiTabCtrl a) -> IO CInt
+
+-- | usage: (@auiTabCtrlGetIdxFromWindow obj page@).
+auiTabCtrlGetIdxFromWindow :: AuiTabCtrl  a -> Window  b ->  IO Int
+auiTabCtrlGetIdxFromWindow _obj _page 
+  = withIntResult $
+    withObjectRef "auiTabCtrlGetIdxFromWindow" _obj $ \cobj__obj -> 
+    withObjectPtr _page $ \cobj__page -> 
+    wxAuiTabCtrl_GetIdxFromWindow cobj__obj  cobj__page  
+foreign import ccall "wxAuiTabCtrl_GetIdxFromWindow" wxAuiTabCtrl_GetIdxFromWindow :: Ptr (TAuiTabCtrl a) -> Ptr (TWindow b) -> IO CInt
+
+-- | usage: (@auiTabCtrlGetPage obj idx@).
+auiTabCtrlGetPage :: AuiTabCtrl  a -> Int ->  IO (AuiNotebookPage  ())
+auiTabCtrlGetPage _obj idx 
+  = withObjectResult $
+    withObjectRef "auiTabCtrlGetPage" _obj $ \cobj__obj -> 
+    wxAuiTabCtrl_GetPage cobj__obj  (toCInt idx)  
+foreign import ccall "wxAuiTabCtrl_GetPage" wxAuiTabCtrl_GetPage :: Ptr (TAuiTabCtrl a) -> CInt -> IO (Ptr (TAuiNotebookPage ()))
+
+-- | usage: (@auiTabCtrlGetPageCount obj@).
+auiTabCtrlGetPageCount :: AuiTabCtrl  a ->  IO Int
+auiTabCtrlGetPageCount _obj 
+  = withIntResult $
+    withObjectRef "auiTabCtrlGetPageCount" _obj $ \cobj__obj -> 
+    wxAuiTabCtrl_GetPageCount cobj__obj  
+foreign import ccall "wxAuiTabCtrl_GetPageCount" wxAuiTabCtrl_GetPageCount :: Ptr (TAuiTabCtrl a) -> IO CInt
+
+-- | usage: (@auiTabCtrlGetPages obj@).
+auiTabCtrlGetPages :: AuiTabCtrl  a ->  IO (AuiNotebookPageArray  ())
+auiTabCtrlGetPages _obj 
+  = withObjectResult $
+    withObjectRef "auiTabCtrlGetPages" _obj $ \cobj__obj -> 
+    wxAuiTabCtrl_GetPages cobj__obj  
+foreign import ccall "wxAuiTabCtrl_GetPages" wxAuiTabCtrl_GetPages :: Ptr (TAuiTabCtrl a) -> IO (Ptr (TAuiNotebookPageArray ()))
+
+-- | usage: (@auiTabCtrlGetTabOffset obj@).
+auiTabCtrlGetTabOffset :: AuiTabCtrl  a ->  IO Int
+auiTabCtrlGetTabOffset _obj 
+  = withIntResult $
+    withObjectRef "auiTabCtrlGetTabOffset" _obj $ \cobj__obj -> 
+    wxAuiTabCtrl_GetTabOffset cobj__obj  
+foreign import ccall "wxAuiTabCtrl_GetTabOffset" wxAuiTabCtrl_GetTabOffset :: Ptr (TAuiTabCtrl a) -> IO CInt
+
+-- | usage: (@auiTabCtrlGetWindowFromIdx obj idx@).
+auiTabCtrlGetWindowFromIdx :: AuiTabCtrl  a -> Int ->  IO (Window  ())
+auiTabCtrlGetWindowFromIdx _obj idx 
+  = withObjectResult $
+    withObjectRef "auiTabCtrlGetWindowFromIdx" _obj $ \cobj__obj -> 
+    wxAuiTabCtrl_GetWindowFromIdx cobj__obj  (toCInt idx)  
+foreign import ccall "wxAuiTabCtrl_GetWindowFromIdx" wxAuiTabCtrl_GetWindowFromIdx :: Ptr (TAuiTabCtrl a) -> CInt -> IO (Ptr (TWindow ()))
+
+-- | usage: (@auiTabCtrlInsertPage obj page info idx@).
+auiTabCtrlInsertPage :: AuiTabCtrl  a -> Window  b -> AuiNotebookPage  c -> Int ->  IO Bool
+auiTabCtrlInsertPage _obj _page _info idx 
+  = withBoolResult $
+    withObjectRef "auiTabCtrlInsertPage" _obj $ \cobj__obj -> 
+    withObjectPtr _page $ \cobj__page -> 
+    withObjectPtr _info $ \cobj__info -> 
+    wxAuiTabCtrl_InsertPage cobj__obj  cobj__page  cobj__info  (toCInt idx)  
+foreign import ccall "wxAuiTabCtrl_InsertPage" wxAuiTabCtrl_InsertPage :: Ptr (TAuiTabCtrl a) -> Ptr (TWindow b) -> Ptr (TAuiNotebookPage c) -> CInt -> IO CBool
+
+-- | usage: (@auiTabCtrlIsTabVisible obj tabPage tabOffset dc wnd@).
+auiTabCtrlIsTabVisible :: AuiTabCtrl  a -> Int -> Int -> DC  d -> Window  e ->  IO Bool
+auiTabCtrlIsTabVisible _obj tabPage tabOffset _dc _wnd 
+  = withBoolResult $
+    withObjectRef "auiTabCtrlIsTabVisible" _obj $ \cobj__obj -> 
+    withObjectPtr _dc $ \cobj__dc -> 
+    withObjectPtr _wnd $ \cobj__wnd -> 
+    wxAuiTabCtrl_IsTabVisible cobj__obj  (toCInt tabPage)  (toCInt tabOffset)  cobj__dc  cobj__wnd  
+foreign import ccall "wxAuiTabCtrl_IsTabVisible" wxAuiTabCtrl_IsTabVisible :: Ptr (TAuiTabCtrl a) -> CInt -> CInt -> Ptr (TDC d) -> Ptr (TWindow e) -> IO CBool
+
+-- | usage: (@auiTabCtrlMakeTabVisible obj tabPage win@).
+auiTabCtrlMakeTabVisible :: AuiTabCtrl  a -> Int -> Window  c ->  IO ()
+auiTabCtrlMakeTabVisible _obj tabPage _win 
+  = withObjectRef "auiTabCtrlMakeTabVisible" _obj $ \cobj__obj -> 
+    withObjectPtr _win $ \cobj__win -> 
+    wxAuiTabCtrl_MakeTabVisible cobj__obj  (toCInt tabPage)  cobj__win  
+foreign import ccall "wxAuiTabCtrl_MakeTabVisible" wxAuiTabCtrl_MakeTabVisible :: Ptr (TAuiTabCtrl a) -> CInt -> Ptr (TWindow c) -> IO ()
+
+-- | usage: (@auiTabCtrlMovePage obj page newIdx@).
+auiTabCtrlMovePage :: AuiTabCtrl  a -> Window  b -> Int ->  IO Bool
+auiTabCtrlMovePage _obj _page newIdx 
+  = withBoolResult $
+    withObjectRef "auiTabCtrlMovePage" _obj $ \cobj__obj -> 
+    withObjectPtr _page $ \cobj__page -> 
+    wxAuiTabCtrl_MovePage cobj__obj  cobj__page  (toCInt newIdx)  
+foreign import ccall "wxAuiTabCtrl_MovePage" wxAuiTabCtrl_MovePage :: Ptr (TAuiTabCtrl a) -> Ptr (TWindow b) -> CInt -> IO CBool
+
+-- | usage: (@auiTabCtrlRemoveButton obj id@).
+auiTabCtrlRemoveButton :: AuiTabCtrl  a -> Id ->  IO ()
+auiTabCtrlRemoveButton _obj id 
+  = withObjectRef "auiTabCtrlRemoveButton" _obj $ \cobj__obj -> 
+    wxAuiTabCtrl_RemoveButton cobj__obj  (toCInt id)  
+foreign import ccall "wxAuiTabCtrl_RemoveButton" wxAuiTabCtrl_RemoveButton :: Ptr (TAuiTabCtrl a) -> CInt -> IO ()
+
+-- | usage: (@auiTabCtrlRemovePage obj page@).
+auiTabCtrlRemovePage :: AuiTabCtrl  a -> Window  b ->  IO Bool
+auiTabCtrlRemovePage _obj _page 
+  = withBoolResult $
+    withObjectRef "auiTabCtrlRemovePage" _obj $ \cobj__obj -> 
+    withObjectPtr _page $ \cobj__page -> 
+    wxAuiTabCtrl_RemovePage cobj__obj  cobj__page  
+foreign import ccall "wxAuiTabCtrl_RemovePage" wxAuiTabCtrl_RemovePage :: Ptr (TAuiTabCtrl a) -> Ptr (TWindow b) -> IO CBool
+
+-- | usage: (@auiTabCtrlSetActiveColour obj colour@).
+auiTabCtrlSetActiveColour :: AuiTabCtrl  a -> Color ->  IO ()
+auiTabCtrlSetActiveColour _obj _colour 
+  = withObjectRef "auiTabCtrlSetActiveColour" _obj $ \cobj__obj -> 
+    withColourPtr _colour $ \cobj__colour -> 
+    wxAuiTabCtrl_SetActiveColour cobj__obj  cobj__colour  
+foreign import ccall "wxAuiTabCtrl_SetActiveColour" wxAuiTabCtrl_SetActiveColour :: Ptr (TAuiTabCtrl a) -> Ptr (TColour b) -> IO ()
+
+-- | usage: (@auiTabCtrlSetActivePage obj page@).
+auiTabCtrlSetActivePage :: AuiTabCtrl  a -> Int ->  IO Bool
+auiTabCtrlSetActivePage _obj page 
+  = withBoolResult $
+    withObjectRef "auiTabCtrlSetActivePage" _obj $ \cobj__obj -> 
+    wxAuiTabCtrl_SetActivePage cobj__obj  (toCInt page)  
+foreign import ccall "wxAuiTabCtrl_SetActivePage" wxAuiTabCtrl_SetActivePage :: Ptr (TAuiTabCtrl a) -> CInt -> IO CBool
+
+-- | usage: (@auiTabCtrlSetActivePageByWindow obj page@).
+auiTabCtrlSetActivePageByWindow :: AuiTabCtrl  a -> Window  b ->  IO Bool
+auiTabCtrlSetActivePageByWindow _obj _page 
+  = withBoolResult $
+    withObjectRef "auiTabCtrlSetActivePageByWindow" _obj $ \cobj__obj -> 
+    withObjectPtr _page $ \cobj__page -> 
+    wxAuiTabCtrl_SetActivePageByWindow cobj__obj  cobj__page  
+foreign import ccall "wxAuiTabCtrl_SetActivePageByWindow" wxAuiTabCtrl_SetActivePageByWindow :: Ptr (TAuiTabCtrl a) -> Ptr (TWindow b) -> IO CBool
+
+-- | usage: (@auiTabCtrlSetArtProvider obj art@).
+auiTabCtrlSetArtProvider :: AuiTabCtrl  a -> AuiTabArt  b ->  IO ()
+auiTabCtrlSetArtProvider _obj _art 
+  = withObjectRef "auiTabCtrlSetArtProvider" _obj $ \cobj__obj -> 
+    withObjectPtr _art $ \cobj__art -> 
+    wxAuiTabCtrl_SetArtProvider cobj__obj  cobj__art  
+foreign import ccall "wxAuiTabCtrl_SetArtProvider" wxAuiTabCtrl_SetArtProvider :: Ptr (TAuiTabCtrl a) -> Ptr (TAuiTabArt b) -> IO ()
+
+-- | usage: (@auiTabCtrlSetColour obj colour@).
+auiTabCtrlSetColour :: AuiTabCtrl  a -> Color ->  IO ()
+auiTabCtrlSetColour _obj _colour 
+  = withObjectRef "auiTabCtrlSetColour" _obj $ \cobj__obj -> 
+    withColourPtr _colour $ \cobj__colour -> 
+    wxAuiTabCtrl_SetColour cobj__obj  cobj__colour  
+foreign import ccall "wxAuiTabCtrl_SetColour" wxAuiTabCtrl_SetColour :: Ptr (TAuiTabCtrl a) -> Ptr (TColour b) -> IO ()
+
+-- | usage: (@auiTabCtrlSetFlags obj flags@).
+auiTabCtrlSetFlags :: AuiTabCtrl  a -> Int ->  IO ()
+auiTabCtrlSetFlags _obj _flags 
+  = withObjectRef "auiTabCtrlSetFlags" _obj $ \cobj__obj -> 
+    wxAuiTabCtrl_SetFlags cobj__obj  (toCInt _flags)  
+foreign import ccall "wxAuiTabCtrl_SetFlags" wxAuiTabCtrl_SetFlags :: Ptr (TAuiTabCtrl a) -> CInt -> IO ()
+
+-- | usage: (@auiTabCtrlSetMeasuringFont obj measuringFont@).
+auiTabCtrlSetMeasuringFont :: AuiTabCtrl  a -> Font  b ->  IO ()
+auiTabCtrlSetMeasuringFont _obj _measuringFont 
+  = withObjectRef "auiTabCtrlSetMeasuringFont" _obj $ \cobj__obj -> 
+    withObjectPtr _measuringFont $ \cobj__measuringFont -> 
+    wxAuiTabCtrl_SetMeasuringFont cobj__obj  cobj__measuringFont  
+foreign import ccall "wxAuiTabCtrl_SetMeasuringFont" wxAuiTabCtrl_SetMeasuringFont :: Ptr (TAuiTabCtrl a) -> Ptr (TFont b) -> IO ()
+
+-- | usage: (@auiTabCtrlSetNoneActive obj@).
+auiTabCtrlSetNoneActive :: AuiTabCtrl  a ->  IO ()
+auiTabCtrlSetNoneActive _obj 
+  = withObjectRef "auiTabCtrlSetNoneActive" _obj $ \cobj__obj -> 
+    wxAuiTabCtrl_SetNoneActive cobj__obj  
+foreign import ccall "wxAuiTabCtrl_SetNoneActive" wxAuiTabCtrl_SetNoneActive :: Ptr (TAuiTabCtrl a) -> IO ()
+
+-- | usage: (@auiTabCtrlSetNormalFont obj normalFont@).
+auiTabCtrlSetNormalFont :: AuiTabCtrl  a -> Font  b ->  IO ()
+auiTabCtrlSetNormalFont _obj _normalFont 
+  = withObjectRef "auiTabCtrlSetNormalFont" _obj $ \cobj__obj -> 
+    withObjectPtr _normalFont $ \cobj__normalFont -> 
+    wxAuiTabCtrl_SetNormalFont cobj__obj  cobj__normalFont  
+foreign import ccall "wxAuiTabCtrl_SetNormalFont" wxAuiTabCtrl_SetNormalFont :: Ptr (TAuiTabCtrl a) -> Ptr (TFont b) -> IO ()
+
+-- | usage: (@auiTabCtrlSetRect obj rect@).
+auiTabCtrlSetRect :: AuiTabCtrl  a -> Rect ->  IO ()
+auiTabCtrlSetRect _obj _rect 
+  = withObjectRef "auiTabCtrlSetRect" _obj $ \cobj__obj -> 
+    withWxRectPtr _rect $ \cobj__rect -> 
+    wxAuiTabCtrl_SetRect cobj__obj  cobj__rect  
+foreign import ccall "wxAuiTabCtrl_SetRect" wxAuiTabCtrl_SetRect :: Ptr (TAuiTabCtrl a) -> Ptr (TWxRect b) -> IO ()
+
+-- | usage: (@auiTabCtrlSetSelectedFont obj selectedFont@).
+auiTabCtrlSetSelectedFont :: AuiTabCtrl  a -> Font  b ->  IO ()
+auiTabCtrlSetSelectedFont _obj _selectedFont 
+  = withObjectRef "auiTabCtrlSetSelectedFont" _obj $ \cobj__obj -> 
+    withObjectPtr _selectedFont $ \cobj__selectedFont -> 
+    wxAuiTabCtrl_SetSelectedFont cobj__obj  cobj__selectedFont  
+foreign import ccall "wxAuiTabCtrl_SetSelectedFont" wxAuiTabCtrl_SetSelectedFont :: Ptr (TAuiTabCtrl a) -> Ptr (TFont b) -> IO ()
+
+-- | usage: (@auiTabCtrlSetTabOffset obj offset@).
+auiTabCtrlSetTabOffset :: AuiTabCtrl  a -> Int ->  IO ()
+auiTabCtrlSetTabOffset _obj offset 
+  = withObjectRef "auiTabCtrlSetTabOffset" _obj $ \cobj__obj -> 
+    wxAuiTabCtrl_SetTabOffset cobj__obj  (toCInt offset)  
+foreign import ccall "wxAuiTabCtrl_SetTabOffset" wxAuiTabCtrl_SetTabOffset :: Ptr (TAuiTabCtrl a) -> CInt -> IO ()
+
+-- | usage: (@auiToolBarAddControl obj control label@).
+auiToolBarAddControl :: AuiToolBar  a -> Control  b -> String ->  IO (AuiToolBarItem  ())
+auiToolBarAddControl _obj _control _label 
+  = withObjectResult $
+    withObjectRef "auiToolBarAddControl" _obj $ \cobj__obj -> 
+    withObjectPtr _control $ \cobj__control -> 
+    withStringPtr _label $ \cobj__label -> 
+    wxAuiToolBar_AddControl cobj__obj  cobj__control  cobj__label  
+foreign import ccall "wxAuiToolBar_AddControl" wxAuiToolBar_AddControl :: Ptr (TAuiToolBar a) -> Ptr (TControl b) -> Ptr (TWxString c) -> IO (Ptr (TAuiToolBarItem ()))
+
+-- | usage: (@auiToolBarAddLabel obj toolid label width@).
+auiToolBarAddLabel :: AuiToolBar  a -> Int -> String -> Int ->  IO (AuiToolBarItem  ())
+auiToolBarAddLabel _obj toolid _label width 
+  = withObjectResult $
+    withObjectRef "auiToolBarAddLabel" _obj $ \cobj__obj -> 
+    withStringPtr _label $ \cobj__label -> 
+    wxAuiToolBar_AddLabel cobj__obj  (toCInt toolid)  cobj__label  (toCInt width)  
+foreign import ccall "wxAuiToolBar_AddLabel" wxAuiToolBar_AddLabel :: Ptr (TAuiToolBar a) -> CInt -> Ptr (TWxString c) -> CInt -> IO (Ptr (TAuiToolBarItem ()))
+
+-- | usage: (@auiToolBarAddSeparator obj@).
+auiToolBarAddSeparator :: AuiToolBar  a ->  IO (AuiToolBarItem  ())
+auiToolBarAddSeparator _obj 
+  = withObjectResult $
+    withObjectRef "auiToolBarAddSeparator" _obj $ \cobj__obj -> 
+    wxAuiToolBar_AddSeparator cobj__obj  
+foreign import ccall "wxAuiToolBar_AddSeparator" wxAuiToolBar_AddSeparator :: Ptr (TAuiToolBar a) -> IO (Ptr (TAuiToolBarItem ()))
+
+-- | usage: (@auiToolBarAddSpacer obj pixels@).
+auiToolBarAddSpacer :: AuiToolBar  a -> Int ->  IO (AuiToolBarItem  ())
+auiToolBarAddSpacer _obj pixels 
+  = withObjectResult $
+    withObjectRef "auiToolBarAddSpacer" _obj $ \cobj__obj -> 
+    wxAuiToolBar_AddSpacer cobj__obj  (toCInt pixels)  
+foreign import ccall "wxAuiToolBar_AddSpacer" wxAuiToolBar_AddSpacer :: Ptr (TAuiToolBar a) -> CInt -> IO (Ptr (TAuiToolBarItem ()))
+
+-- | usage: (@auiToolBarAddStretchSpacer obj proportion@).
+auiToolBarAddStretchSpacer :: AuiToolBar  a -> Int ->  IO (AuiToolBarItem  ())
+auiToolBarAddStretchSpacer _obj proportion 
+  = withObjectResult $
+    withObjectRef "auiToolBarAddStretchSpacer" _obj $ \cobj__obj -> 
+    wxAuiToolBar_AddStretchSpacer cobj__obj  (toCInt proportion)  
+foreign import ccall "wxAuiToolBar_AddStretchSpacer" wxAuiToolBar_AddStretchSpacer :: Ptr (TAuiToolBar a) -> CInt -> IO (Ptr (TAuiToolBarItem ()))
+
+-- | usage: (@auiToolBarAddTool obj toolid label bitmap disabledbitmap kind shorthelpstring longhelpstring clientdata@).
+auiToolBarAddTool :: AuiToolBar  a -> Int -> String -> Bitmap  d -> Bitmap  e -> Int -> String -> String -> WxObject  i ->  IO (AuiToolBarItem  ())
+auiToolBarAddTool _obj toolid _label _bitmap _disabledbitmap kind _shorthelpstring _longhelpstring _clientdata 
+  = withObjectResult $
+    withObjectRef "auiToolBarAddTool" _obj $ \cobj__obj -> 
+    withStringPtr _label $ \cobj__label -> 
+    withObjectPtr _bitmap $ \cobj__bitmap -> 
+    withObjectPtr _disabledbitmap $ \cobj__disabledbitmap -> 
+    withStringPtr _shorthelpstring $ \cobj__shorthelpstring -> 
+    withStringPtr _longhelpstring $ \cobj__longhelpstring -> 
+    withObjectPtr _clientdata $ \cobj__clientdata -> 
+    wxAuiToolBar_AddTool cobj__obj  (toCInt toolid)  cobj__label  cobj__bitmap  cobj__disabledbitmap  (toCInt kind)  cobj__shorthelpstring  cobj__longhelpstring  cobj__clientdata  
+foreign import ccall "wxAuiToolBar_AddTool" wxAuiToolBar_AddTool :: Ptr (TAuiToolBar a) -> CInt -> Ptr (TWxString c) -> Ptr (TBitmap d) -> Ptr (TBitmap e) -> CInt -> Ptr (TWxString g) -> Ptr (TWxString h) -> Ptr (TWxObject i) -> IO (Ptr (TAuiToolBarItem ()))
+
+-- | usage: (@auiToolBarAddToolByBitmap obj toolid bitmap disabledbitmap toggle clientdata shorthelpstring longhelpstring@).
+auiToolBarAddToolByBitmap :: AuiToolBar  a -> Int -> Bitmap  c -> Bitmap  d -> Bool -> WxObject  f -> String -> String ->  IO (AuiToolBarItem  ())
+auiToolBarAddToolByBitmap _obj toolid _bitmap _disabledbitmap toggle _clientdata _shorthelpstring _longhelpstring 
+  = withObjectResult $
+    withObjectRef "auiToolBarAddToolByBitmap" _obj $ \cobj__obj -> 
+    withObjectPtr _bitmap $ \cobj__bitmap -> 
+    withObjectPtr _disabledbitmap $ \cobj__disabledbitmap -> 
+    withObjectPtr _clientdata $ \cobj__clientdata -> 
+    withStringPtr _shorthelpstring $ \cobj__shorthelpstring -> 
+    withStringPtr _longhelpstring $ \cobj__longhelpstring -> 
+    wxAuiToolBar_AddToolByBitmap cobj__obj  (toCInt toolid)  cobj__bitmap  cobj__disabledbitmap  (toCBool toggle)  cobj__clientdata  cobj__shorthelpstring  cobj__longhelpstring  
+foreign import ccall "wxAuiToolBar_AddToolByBitmap" wxAuiToolBar_AddToolByBitmap :: Ptr (TAuiToolBar a) -> CInt -> Ptr (TBitmap c) -> Ptr (TBitmap d) -> CBool -> Ptr (TWxObject f) -> Ptr (TWxString g) -> Ptr (TWxString h) -> IO (Ptr (TAuiToolBarItem ()))
+
+-- | usage: (@auiToolBarAddToolByLabel obj toolid label bitmap shorthelpstring kind@).
+auiToolBarAddToolByLabel :: AuiToolBar  a -> Int -> String -> Bitmap  d -> String -> Int ->  IO (AuiToolBarItem  ())
+auiToolBarAddToolByLabel _obj toolid _label _bitmap _shorthelpstring kind 
+  = withObjectResult $
+    withObjectRef "auiToolBarAddToolByLabel" _obj $ \cobj__obj -> 
+    withStringPtr _label $ \cobj__label -> 
+    withObjectPtr _bitmap $ \cobj__bitmap -> 
+    withStringPtr _shorthelpstring $ \cobj__shorthelpstring -> 
+    wxAuiToolBar_AddToolByLabel cobj__obj  (toCInt toolid)  cobj__label  cobj__bitmap  cobj__shorthelpstring  (toCInt kind)  
+foreign import ccall "wxAuiToolBar_AddToolByLabel" wxAuiToolBar_AddToolByLabel :: Ptr (TAuiToolBar a) -> CInt -> Ptr (TWxString c) -> Ptr (TBitmap d) -> Ptr (TWxString e) -> CInt -> IO (Ptr (TAuiToolBarItem ()))
+
+-- | usage: (@auiToolBarArtClone obj@).
+auiToolBarArtClone :: AuiToolBarArt  a ->  IO (AuiToolBarArt  ())
+auiToolBarArtClone _obj 
+  = withObjectResult $
+    withObjectRef "auiToolBarArtClone" _obj $ \cobj__obj -> 
+    wxAuiToolBarArt_Clone cobj__obj  
+foreign import ccall "wxAuiToolBarArt_Clone" wxAuiToolBarArt_Clone :: Ptr (TAuiToolBarArt a) -> IO (Ptr (TAuiToolBarArt ()))
+
+-- | usage: (@auiToolBarArtDrawBackground obj dc wnd rect@).
+auiToolBarArtDrawBackground :: AuiToolBarArt  a -> DC  b -> Window  c -> Rect ->  IO ()
+auiToolBarArtDrawBackground _obj _dc _wnd _rect 
+  = withObjectRef "auiToolBarArtDrawBackground" _obj $ \cobj__obj -> 
+    withObjectPtr _dc $ \cobj__dc -> 
+    withObjectPtr _wnd $ \cobj__wnd -> 
+    withWxRectPtr _rect $ \cobj__rect -> 
+    wxAuiToolBarArt_DrawBackground cobj__obj  cobj__dc  cobj__wnd  cobj__rect  
+foreign import ccall "wxAuiToolBarArt_DrawBackground" wxAuiToolBarArt_DrawBackground :: Ptr (TAuiToolBarArt a) -> Ptr (TDC b) -> Ptr (TWindow c) -> Ptr (TWxRect d) -> IO ()
+
+-- | usage: (@auiToolBarArtDrawButton obj dc wnd item rect@).
+auiToolBarArtDrawButton :: AuiToolBarArt  a -> DC  b -> Window  c -> AuiToolBarItem  d -> Rect ->  IO ()
+auiToolBarArtDrawButton _obj _dc _wnd _item _rect 
+  = withObjectRef "auiToolBarArtDrawButton" _obj $ \cobj__obj -> 
+    withObjectPtr _dc $ \cobj__dc -> 
+    withObjectPtr _wnd $ \cobj__wnd -> 
+    withObjectPtr _item $ \cobj__item -> 
+    withWxRectPtr _rect $ \cobj__rect -> 
+    wxAuiToolBarArt_DrawButton cobj__obj  cobj__dc  cobj__wnd  cobj__item  cobj__rect  
+foreign import ccall "wxAuiToolBarArt_DrawButton" wxAuiToolBarArt_DrawButton :: Ptr (TAuiToolBarArt a) -> Ptr (TDC b) -> Ptr (TWindow c) -> Ptr (TAuiToolBarItem d) -> Ptr (TWxRect e) -> IO ()
+
+-- | usage: (@auiToolBarArtDrawControlLabel obj dc wnd item rect@).
+auiToolBarArtDrawControlLabel :: AuiToolBarArt  a -> DC  b -> Window  c -> AuiToolBarItem  d -> Rect ->  IO ()
+auiToolBarArtDrawControlLabel _obj _dc _wnd _item _rect 
+  = withObjectRef "auiToolBarArtDrawControlLabel" _obj $ \cobj__obj -> 
+    withObjectPtr _dc $ \cobj__dc -> 
+    withObjectPtr _wnd $ \cobj__wnd -> 
+    withObjectPtr _item $ \cobj__item -> 
+    withWxRectPtr _rect $ \cobj__rect -> 
+    wxAuiToolBarArt_DrawControlLabel cobj__obj  cobj__dc  cobj__wnd  cobj__item  cobj__rect  
+foreign import ccall "wxAuiToolBarArt_DrawControlLabel" wxAuiToolBarArt_DrawControlLabel :: Ptr (TAuiToolBarArt a) -> Ptr (TDC b) -> Ptr (TWindow c) -> Ptr (TAuiToolBarItem d) -> Ptr (TWxRect e) -> IO ()
+
+-- | usage: (@auiToolBarArtDrawDropDownButton obj dc wnd item rect@).
+auiToolBarArtDrawDropDownButton :: AuiToolBarArt  a -> DC  b -> Window  c -> AuiToolBarItem  d -> Rect ->  IO ()
+auiToolBarArtDrawDropDownButton _obj _dc _wnd _item _rect 
+  = withObjectRef "auiToolBarArtDrawDropDownButton" _obj $ \cobj__obj -> 
+    withObjectPtr _dc $ \cobj__dc -> 
+    withObjectPtr _wnd $ \cobj__wnd -> 
+    withObjectPtr _item $ \cobj__item -> 
+    withWxRectPtr _rect $ \cobj__rect -> 
+    wxAuiToolBarArt_DrawDropDownButton cobj__obj  cobj__dc  cobj__wnd  cobj__item  cobj__rect  
+foreign import ccall "wxAuiToolBarArt_DrawDropDownButton" wxAuiToolBarArt_DrawDropDownButton :: Ptr (TAuiToolBarArt a) -> Ptr (TDC b) -> Ptr (TWindow c) -> Ptr (TAuiToolBarItem d) -> Ptr (TWxRect e) -> IO ()
+
+-- | usage: (@auiToolBarArtDrawGripper obj dc wnd rect@).
+auiToolBarArtDrawGripper :: AuiToolBarArt  a -> DC  b -> Window  c -> Rect ->  IO ()
+auiToolBarArtDrawGripper _obj _dc _wnd _rect 
+  = withObjectRef "auiToolBarArtDrawGripper" _obj $ \cobj__obj -> 
+    withObjectPtr _dc $ \cobj__dc -> 
+    withObjectPtr _wnd $ \cobj__wnd -> 
+    withWxRectPtr _rect $ \cobj__rect -> 
+    wxAuiToolBarArt_DrawGripper cobj__obj  cobj__dc  cobj__wnd  cobj__rect  
+foreign import ccall "wxAuiToolBarArt_DrawGripper" wxAuiToolBarArt_DrawGripper :: Ptr (TAuiToolBarArt a) -> Ptr (TDC b) -> Ptr (TWindow c) -> Ptr (TWxRect d) -> IO ()
+
+-- | usage: (@auiToolBarArtDrawLabel obj dc wnd item rect@).
+auiToolBarArtDrawLabel :: AuiToolBarArt  a -> DC  b -> Window  c -> AuiToolBarItem  d -> Rect ->  IO ()
+auiToolBarArtDrawLabel _obj _dc _wnd _item _rect 
+  = withObjectRef "auiToolBarArtDrawLabel" _obj $ \cobj__obj -> 
+    withObjectPtr _dc $ \cobj__dc -> 
+    withObjectPtr _wnd $ \cobj__wnd -> 
+    withObjectPtr _item $ \cobj__item -> 
+    withWxRectPtr _rect $ \cobj__rect -> 
+    wxAuiToolBarArt_DrawLabel cobj__obj  cobj__dc  cobj__wnd  cobj__item  cobj__rect  
+foreign import ccall "wxAuiToolBarArt_DrawLabel" wxAuiToolBarArt_DrawLabel :: Ptr (TAuiToolBarArt a) -> Ptr (TDC b) -> Ptr (TWindow c) -> Ptr (TAuiToolBarItem d) -> Ptr (TWxRect e) -> IO ()
+
+-- | usage: (@auiToolBarArtDrawOverflowButton obj dc wnd rect state@).
+auiToolBarArtDrawOverflowButton :: AuiToolBarArt  a -> DC  b -> Window  c -> Rect -> Int ->  IO ()
+auiToolBarArtDrawOverflowButton _obj _dc _wnd _rect state 
+  = withObjectRef "auiToolBarArtDrawOverflowButton" _obj $ \cobj__obj -> 
+    withObjectPtr _dc $ \cobj__dc -> 
+    withObjectPtr _wnd $ \cobj__wnd -> 
+    withWxRectPtr _rect $ \cobj__rect -> 
+    wxAuiToolBarArt_DrawOverflowButton cobj__obj  cobj__dc  cobj__wnd  cobj__rect  (toCInt state)  
+foreign import ccall "wxAuiToolBarArt_DrawOverflowButton" wxAuiToolBarArt_DrawOverflowButton :: Ptr (TAuiToolBarArt a) -> Ptr (TDC b) -> Ptr (TWindow c) -> Ptr (TWxRect d) -> CInt -> IO ()
+
+-- | usage: (@auiToolBarArtDrawPlainBackground obj dc wnd rect@).
+auiToolBarArtDrawPlainBackground :: AuiToolBarArt  a -> DC  b -> Window  c -> Rect ->  IO ()
+auiToolBarArtDrawPlainBackground _obj _dc _wnd _rect 
+  = withObjectRef "auiToolBarArtDrawPlainBackground" _obj $ \cobj__obj -> 
+    withObjectPtr _dc $ \cobj__dc -> 
+    withObjectPtr _wnd $ \cobj__wnd -> 
+    withWxRectPtr _rect $ \cobj__rect -> 
+    wxAuiToolBarArt_DrawPlainBackground cobj__obj  cobj__dc  cobj__wnd  cobj__rect  
+foreign import ccall "wxAuiToolBarArt_DrawPlainBackground" wxAuiToolBarArt_DrawPlainBackground :: Ptr (TAuiToolBarArt a) -> Ptr (TDC b) -> Ptr (TWindow c) -> Ptr (TWxRect d) -> IO ()
+
+-- | usage: (@auiToolBarArtDrawSeparator obj dc wnd rect@).
+auiToolBarArtDrawSeparator :: AuiToolBarArt  a -> DC  b -> Window  c -> Rect ->  IO ()
+auiToolBarArtDrawSeparator _obj _dc _wnd _rect 
+  = withObjectRef "auiToolBarArtDrawSeparator" _obj $ \cobj__obj -> 
+    withObjectPtr _dc $ \cobj__dc -> 
+    withObjectPtr _wnd $ \cobj__wnd -> 
+    withWxRectPtr _rect $ \cobj__rect -> 
+    wxAuiToolBarArt_DrawSeparator cobj__obj  cobj__dc  cobj__wnd  cobj__rect  
+foreign import ccall "wxAuiToolBarArt_DrawSeparator" wxAuiToolBarArt_DrawSeparator :: Ptr (TAuiToolBarArt a) -> Ptr (TDC b) -> Ptr (TWindow c) -> Ptr (TWxRect d) -> IO ()
+
+-- | usage: (@auiToolBarArtGetElementSize obj elementid@).
+auiToolBarArtGetElementSize :: AuiToolBarArt  a -> Int ->  IO Int
+auiToolBarArtGetElementSize _obj elementid 
+  = withIntResult $
+    withObjectRef "auiToolBarArtGetElementSize" _obj $ \cobj__obj -> 
+    wxAuiToolBarArt_GetElementSize cobj__obj  (toCInt elementid)  
+foreign import ccall "wxAuiToolBarArt_GetElementSize" wxAuiToolBarArt_GetElementSize :: Ptr (TAuiToolBarArt a) -> CInt -> IO CInt
+
+-- | usage: (@auiToolBarArtGetFlags obj@).
+auiToolBarArtGetFlags :: AuiToolBarArt  a ->  IO Int
+auiToolBarArtGetFlags _obj 
+  = withIntResult $
+    withObjectRef "auiToolBarArtGetFlags" _obj $ \cobj__obj -> 
+    wxAuiToolBarArt_GetFlags cobj__obj  
+foreign import ccall "wxAuiToolBarArt_GetFlags" wxAuiToolBarArt_GetFlags :: Ptr (TAuiToolBarArt a) -> IO CInt
+
+-- | usage: (@auiToolBarArtGetFont obj@).
+auiToolBarArtGetFont :: AuiToolBarArt  a ->  IO (Font  ())
+auiToolBarArtGetFont _obj 
+  = withManagedFontResult $
+    withObjectRef "auiToolBarArtGetFont" _obj $ \cobj__obj -> 
+    wxAuiToolBarArt_GetFont cobj__obj  
+foreign import ccall "wxAuiToolBarArt_GetFont" wxAuiToolBarArt_GetFont :: Ptr (TAuiToolBarArt a) -> IO (Ptr (TFont ()))
+
+-- | usage: (@auiToolBarArtGetLabelSize obj dc wnd item@).
+auiToolBarArtGetLabelSize :: AuiToolBarArt  a -> DC  b -> Window  c -> AuiToolBarItem  d ->  IO (Size)
+auiToolBarArtGetLabelSize _obj _dc _wnd _item 
+  = withWxSizeResult $
+    withObjectRef "auiToolBarArtGetLabelSize" _obj $ \cobj__obj -> 
+    withObjectPtr _dc $ \cobj__dc -> 
+    withObjectPtr _wnd $ \cobj__wnd -> 
+    withObjectPtr _item $ \cobj__item -> 
+    wxAuiToolBarArt_GetLabelSize cobj__obj  cobj__dc  cobj__wnd  cobj__item  
+foreign import ccall "wxAuiToolBarArt_GetLabelSize" wxAuiToolBarArt_GetLabelSize :: Ptr (TAuiToolBarArt a) -> Ptr (TDC b) -> Ptr (TWindow c) -> Ptr (TAuiToolBarItem d) -> IO (Ptr (TWxSize ()))
+
+-- | usage: (@auiToolBarArtGetTextOrientation obj@).
+auiToolBarArtGetTextOrientation :: AuiToolBarArt  a ->  IO Int
+auiToolBarArtGetTextOrientation _obj 
+  = withIntResult $
+    withObjectRef "auiToolBarArtGetTextOrientation" _obj $ \cobj__obj -> 
+    wxAuiToolBarArt_GetTextOrientation cobj__obj  
+foreign import ccall "wxAuiToolBarArt_GetTextOrientation" wxAuiToolBarArt_GetTextOrientation :: Ptr (TAuiToolBarArt a) -> IO CInt
+
+-- | usage: (@auiToolBarArtGetToolSize obj dc wnd item@).
+auiToolBarArtGetToolSize :: AuiToolBarArt  a -> DC  b -> Window  c -> AuiToolBarItem  d ->  IO (Size)
+auiToolBarArtGetToolSize _obj _dc _wnd _item 
+  = withWxSizeResult $
+    withObjectRef "auiToolBarArtGetToolSize" _obj $ \cobj__obj -> 
+    withObjectPtr _dc $ \cobj__dc -> 
+    withObjectPtr _wnd $ \cobj__wnd -> 
+    withObjectPtr _item $ \cobj__item -> 
+    wxAuiToolBarArt_GetToolSize cobj__obj  cobj__dc  cobj__wnd  cobj__item  
+foreign import ccall "wxAuiToolBarArt_GetToolSize" wxAuiToolBarArt_GetToolSize :: Ptr (TAuiToolBarArt a) -> Ptr (TDC b) -> Ptr (TWindow c) -> Ptr (TAuiToolBarItem d) -> IO (Ptr (TWxSize ()))
+
+-- | usage: (@auiToolBarArtSetElementSize obj elementid size@).
+auiToolBarArtSetElementSize :: AuiToolBarArt  a -> Int -> Int ->  IO ()
+auiToolBarArtSetElementSize _obj elementid size 
+  = withObjectRef "auiToolBarArtSetElementSize" _obj $ \cobj__obj -> 
+    wxAuiToolBarArt_SetElementSize cobj__obj  (toCInt elementid)  (toCInt size)  
+foreign import ccall "wxAuiToolBarArt_SetElementSize" wxAuiToolBarArt_SetElementSize :: Ptr (TAuiToolBarArt a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@auiToolBarArtSetFlags obj flags@).
+auiToolBarArtSetFlags :: AuiToolBarArt  a -> Int ->  IO ()
+auiToolBarArtSetFlags _obj _flags 
+  = withObjectRef "auiToolBarArtSetFlags" _obj $ \cobj__obj -> 
+    wxAuiToolBarArt_SetFlags cobj__obj  (toCInt _flags)  
+foreign import ccall "wxAuiToolBarArt_SetFlags" wxAuiToolBarArt_SetFlags :: Ptr (TAuiToolBarArt a) -> CInt -> IO ()
+
+-- | usage: (@auiToolBarArtSetFont obj font@).
+auiToolBarArtSetFont :: AuiToolBarArt  a -> Font  b ->  IO ()
+auiToolBarArtSetFont _obj _font 
+  = withObjectRef "auiToolBarArtSetFont" _obj $ \cobj__obj -> 
+    withObjectPtr _font $ \cobj__font -> 
+    wxAuiToolBarArt_SetFont cobj__obj  cobj__font  
+foreign import ccall "wxAuiToolBarArt_SetFont" wxAuiToolBarArt_SetFont :: Ptr (TAuiToolBarArt a) -> Ptr (TFont b) -> IO ()
+
+-- | usage: (@auiToolBarArtSetTextOrientation obj orientation@).
+auiToolBarArtSetTextOrientation :: AuiToolBarArt  a -> Int ->  IO ()
+auiToolBarArtSetTextOrientation _obj orientation 
+  = withObjectRef "auiToolBarArtSetTextOrientation" _obj $ \cobj__obj -> 
+    wxAuiToolBarArt_SetTextOrientation cobj__obj  (toCInt orientation)  
+foreign import ccall "wxAuiToolBarArt_SetTextOrientation" wxAuiToolBarArt_SetTextOrientation :: Ptr (TAuiToolBarArt a) -> CInt -> IO ()
+
+-- | usage: (@auiToolBarArtShowDropDown obj wnd items@).
+auiToolBarArtShowDropDown :: AuiToolBarArt  a -> Window  b -> AuiToolBarItemArray  c ->  IO Int
+auiToolBarArtShowDropDown _obj _wnd _items 
+  = withIntResult $
+    withObjectRef "auiToolBarArtShowDropDown" _obj $ \cobj__obj -> 
+    withObjectPtr _wnd $ \cobj__wnd -> 
+    withObjectPtr _items $ \cobj__items -> 
+    wxAuiToolBarArt_ShowDropDown cobj__obj  cobj__wnd  cobj__items  
+foreign import ccall "wxAuiToolBarArt_ShowDropDown" wxAuiToolBarArt_ShowDropDown :: Ptr (TAuiToolBarArt a) -> Ptr (TWindow b) -> Ptr (TAuiToolBarItemArray c) -> IO CInt
+
+-- | usage: (@auiToolBarClear obj@).
+auiToolBarClear :: AuiToolBar  a ->  IO ()
+auiToolBarClear _obj 
+  = withObjectRef "auiToolBarClear" _obj $ \cobj__obj -> 
+    wxAuiToolBar_Clear cobj__obj  
+foreign import ccall "wxAuiToolBar_Clear" wxAuiToolBar_Clear :: Ptr (TAuiToolBar a) -> IO ()
+
+-- | usage: (@auiToolBarClearTools obj@).
+auiToolBarClearTools :: AuiToolBar  a ->  IO ()
+auiToolBarClearTools _obj 
+  = withObjectRef "auiToolBarClearTools" _obj $ \cobj__obj -> 
+    wxAuiToolBar_ClearTools cobj__obj  
+foreign import ccall "wxAuiToolBar_ClearTools" wxAuiToolBar_ClearTools :: Ptr (TAuiToolBar a) -> IO ()
+
+-- | usage: (@auiToolBarCreate parent id xy widthheight style@).
+auiToolBarCreate :: Window  a -> Id -> Point -> Size -> Int ->  IO (AuiToolBar  ())
+auiToolBarCreate _parent id xy _widthheight style 
+  = withObjectResult $
+    withObjectPtr _parent $ \cobj__parent -> 
+    wxAuiToolBar_Create cobj__parent  (toCInt id)  (toCIntPointX xy) (toCIntPointY xy)  (toCIntSizeW _widthheight) (toCIntSizeH _widthheight)  (toCInt style)  
+foreign import ccall "wxAuiToolBar_Create" wxAuiToolBar_Create :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TAuiToolBar ()))
+
+-- | usage: (@auiToolBarCreateDefault@).
+auiToolBarCreateDefault ::  IO (AuiToolBar  ())
+auiToolBarCreateDefault 
+  = withObjectResult $
+    wxAuiToolBar_CreateDefault 
+foreign import ccall "wxAuiToolBar_CreateDefault" wxAuiToolBar_CreateDefault :: IO (Ptr (TAuiToolBar ()))
+
+-- | usage: (@auiToolBarCreateFromDefault obj parent id xy widthheight style@).
+auiToolBarCreateFromDefault :: AuiToolBar  a -> Window  b -> Id -> Point -> Size -> Int ->  IO Bool
+auiToolBarCreateFromDefault _obj _parent id xy _widthheight style 
+  = withBoolResult $
+    withObjectRef "auiToolBarCreateFromDefault" _obj $ \cobj__obj -> 
+    withObjectPtr _parent $ \cobj__parent -> 
+    wxAuiToolBar_CreateFromDefault cobj__obj  cobj__parent  (toCInt id)  (toCIntPointX xy) (toCIntPointY xy)  (toCIntSizeW _widthheight) (toCIntSizeH _widthheight)  (toCInt style)  
+foreign import ccall "wxAuiToolBar_CreateFromDefault" wxAuiToolBar_CreateFromDefault :: Ptr (TAuiToolBar a) -> Ptr (TWindow b) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO CBool
+
+-- | usage: (@auiToolBarDelete obj@).
+auiToolBarDelete :: AuiToolBar  a ->  IO ()
+auiToolBarDelete
+  = objectDelete
+
+
+-- | usage: (@auiToolBarDeleteByIndex obj toolid@).
+auiToolBarDeleteByIndex :: AuiToolBar  a -> Int ->  IO Bool
+auiToolBarDeleteByIndex _obj toolid 
+  = withBoolResult $
+    withObjectRef "auiToolBarDeleteByIndex" _obj $ \cobj__obj -> 
+    wxAuiToolBar_DeleteByIndex cobj__obj  (toCInt toolid)  
+foreign import ccall "wxAuiToolBar_DeleteByIndex" wxAuiToolBar_DeleteByIndex :: Ptr (TAuiToolBar a) -> CInt -> IO CBool
+
+-- | usage: (@auiToolBarDeleteTool obj toolid@).
+auiToolBarDeleteTool :: AuiToolBar  a -> Int ->  IO Bool
+auiToolBarDeleteTool _obj toolid 
+  = withBoolResult $
+    withObjectRef "auiToolBarDeleteTool" _obj $ \cobj__obj -> 
+    wxAuiToolBar_DeleteTool cobj__obj  (toCInt toolid)  
+foreign import ccall "wxAuiToolBar_DeleteTool" wxAuiToolBar_DeleteTool :: Ptr (TAuiToolBar a) -> CInt -> IO CBool
+
+-- | usage: (@auiToolBarEnableTool obj toolid state@).
+auiToolBarEnableTool :: AuiToolBar  a -> Int -> Bool ->  IO ()
+auiToolBarEnableTool _obj toolid state 
+  = withObjectRef "auiToolBarEnableTool" _obj $ \cobj__obj -> 
+    wxAuiToolBar_EnableTool cobj__obj  (toCInt toolid)  (toCBool state)  
+foreign import ccall "wxAuiToolBar_EnableTool" wxAuiToolBar_EnableTool :: Ptr (TAuiToolBar a) -> CInt -> CBool -> IO ()
+
+-- | usage: (@auiToolBarEventGetClickPoint obj@).
+auiToolBarEventGetClickPoint :: AuiToolBarEvent  a ->  IO (Point)
+auiToolBarEventGetClickPoint _obj 
+  = withWxPointResult $
+    withObjectRef "auiToolBarEventGetClickPoint" _obj $ \cobj__obj -> 
+    wxAuiToolBarEvent_GetClickPoint cobj__obj  
+foreign import ccall "wxAuiToolBarEvent_GetClickPoint" wxAuiToolBarEvent_GetClickPoint :: Ptr (TAuiToolBarEvent a) -> IO (Ptr (TWxPoint ()))
+
+-- | usage: (@auiToolBarEventGetItemRect obj@).
+auiToolBarEventGetItemRect :: AuiToolBarEvent  a ->  IO (Rect)
+auiToolBarEventGetItemRect _obj 
+  = withWxRectResult $
+    withObjectRef "auiToolBarEventGetItemRect" _obj $ \cobj__obj -> 
+    wxAuiToolBarEvent_GetItemRect cobj__obj  
+foreign import ccall "wxAuiToolBarEvent_GetItemRect" wxAuiToolBarEvent_GetItemRect :: Ptr (TAuiToolBarEvent a) -> IO (Ptr (TWxRect ()))
+
+-- | usage: (@auiToolBarEventGetToolId obj@).
+auiToolBarEventGetToolId :: AuiToolBarEvent  a ->  IO Int
+auiToolBarEventGetToolId _obj 
+  = withIntResult $
+    withObjectRef "auiToolBarEventGetToolId" _obj $ \cobj__obj -> 
+    wxAuiToolBarEvent_GetToolId cobj__obj  
+foreign import ccall "wxAuiToolBarEvent_GetToolId" wxAuiToolBarEvent_GetToolId :: Ptr (TAuiToolBarEvent a) -> IO CInt
+
+-- | usage: (@auiToolBarEventIsDropDownClicked obj@).
+auiToolBarEventIsDropDownClicked :: AuiToolBarEvent  a ->  IO Bool
+auiToolBarEventIsDropDownClicked _obj 
+  = withBoolResult $
+    withObjectRef "auiToolBarEventIsDropDownClicked" _obj $ \cobj__obj -> 
+    wxAuiToolBarEvent_IsDropDownClicked cobj__obj  
+foreign import ccall "wxAuiToolBarEvent_IsDropDownClicked" wxAuiToolBarEvent_IsDropDownClicked :: Ptr (TAuiToolBarEvent a) -> IO CBool
+
+-- | usage: (@auiToolBarFindControl obj windowid@).
+auiToolBarFindControl :: AuiToolBar  a -> Int ->  IO (Control  ())
+auiToolBarFindControl _obj windowid 
+  = withObjectResult $
+    withObjectRef "auiToolBarFindControl" _obj $ \cobj__obj -> 
+    wxAuiToolBar_FindControl cobj__obj  (toCInt windowid)  
+foreign import ccall "wxAuiToolBar_FindControl" wxAuiToolBar_FindControl :: Ptr (TAuiToolBar a) -> CInt -> IO (Ptr (TControl ()))
+
+-- | usage: (@auiToolBarFindTool obj toolid@).
+auiToolBarFindTool :: AuiToolBar  a -> Int ->  IO (AuiToolBarItem  ())
+auiToolBarFindTool _obj toolid 
+  = withObjectResult $
+    withObjectRef "auiToolBarFindTool" _obj $ \cobj__obj -> 
+    wxAuiToolBar_FindTool cobj__obj  (toCInt toolid)  
+foreign import ccall "wxAuiToolBar_FindTool" wxAuiToolBar_FindTool :: Ptr (TAuiToolBar a) -> CInt -> IO (Ptr (TAuiToolBarItem ()))
+
+-- | usage: (@auiToolBarFindToolByIndex obj idx@).
+auiToolBarFindToolByIndex :: AuiToolBar  a -> Int ->  IO (AuiToolBarItem  ())
+auiToolBarFindToolByIndex _obj idx 
+  = withObjectResult $
+    withObjectRef "auiToolBarFindToolByIndex" _obj $ \cobj__obj -> 
+    wxAuiToolBar_FindToolByIndex cobj__obj  (toCInt idx)  
+foreign import ccall "wxAuiToolBar_FindToolByIndex" wxAuiToolBar_FindToolByIndex :: Ptr (TAuiToolBar a) -> CInt -> IO (Ptr (TAuiToolBarItem ()))
+
+-- | usage: (@auiToolBarFindToolByPosition obj xy@).
+auiToolBarFindToolByPosition :: AuiToolBar  a -> Point ->  IO (AuiToolBarItem  ())
+auiToolBarFindToolByPosition _obj xy 
+  = withObjectResult $
+    withObjectRef "auiToolBarFindToolByPosition" _obj $ \cobj__obj -> 
+    wxAuiToolBar_FindToolByPosition cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxAuiToolBar_FindToolByPosition" wxAuiToolBar_FindToolByPosition :: Ptr (TAuiToolBar a) -> CInt -> CInt -> IO (Ptr (TAuiToolBarItem ()))
+
+-- | usage: (@auiToolBarGetArtProvider obj@).
+auiToolBarGetArtProvider :: AuiToolBar  a ->  IO (AuiToolBarArt  ())
+auiToolBarGetArtProvider _obj 
+  = withObjectResult $
+    withObjectRef "auiToolBarGetArtProvider" _obj $ \cobj__obj -> 
+    wxAuiToolBar_GetArtProvider cobj__obj  
+foreign import ccall "wxAuiToolBar_GetArtProvider" wxAuiToolBar_GetArtProvider :: Ptr (TAuiToolBar a) -> IO (Ptr (TAuiToolBarArt ()))
+
+-- | usage: (@auiToolBarGetGripperVisible obj@).
+auiToolBarGetGripperVisible :: AuiToolBar  a ->  IO Bool
+auiToolBarGetGripperVisible _obj 
+  = withBoolResult $
+    withObjectRef "auiToolBarGetGripperVisible" _obj $ \cobj__obj -> 
+    wxAuiToolBar_GetGripperVisible cobj__obj  
+foreign import ccall "wxAuiToolBar_GetGripperVisible" wxAuiToolBar_GetGripperVisible :: Ptr (TAuiToolBar a) -> IO CBool
+
+-- | usage: (@auiToolBarGetHintSize obj dockdirection@).
+auiToolBarGetHintSize :: AuiToolBar  a -> Int ->  IO (Size)
+auiToolBarGetHintSize _obj dockdirection 
+  = withWxSizeResult $
+    withObjectRef "auiToolBarGetHintSize" _obj $ \cobj__obj -> 
+    wxAuiToolBar_GetHintSize cobj__obj  (toCInt dockdirection)  
+foreign import ccall "wxAuiToolBar_GetHintSize" wxAuiToolBar_GetHintSize :: Ptr (TAuiToolBar a) -> CInt -> IO (Ptr (TWxSize ()))
+
+-- | usage: (@auiToolBarGetOverflowVisible obj@).
+auiToolBarGetOverflowVisible :: AuiToolBar  a ->  IO Bool
+auiToolBarGetOverflowVisible _obj 
+  = withBoolResult $
+    withObjectRef "auiToolBarGetOverflowVisible" _obj $ \cobj__obj -> 
+    wxAuiToolBar_GetOverflowVisible cobj__obj  
+foreign import ccall "wxAuiToolBar_GetOverflowVisible" wxAuiToolBar_GetOverflowVisible :: Ptr (TAuiToolBar a) -> IO CBool
+
+-- | usage: (@auiToolBarGetToolBarFits obj@).
+auiToolBarGetToolBarFits :: AuiToolBar  a ->  IO Bool
+auiToolBarGetToolBarFits _obj 
+  = withBoolResult $
+    withObjectRef "auiToolBarGetToolBarFits" _obj $ \cobj__obj -> 
+    wxAuiToolBar_GetToolBarFits cobj__obj  
+foreign import ccall "wxAuiToolBar_GetToolBarFits" wxAuiToolBar_GetToolBarFits :: Ptr (TAuiToolBar a) -> IO CBool
+
+-- | usage: (@auiToolBarGetToolBitmap obj toolid@).
+auiToolBarGetToolBitmap :: AuiToolBar  a -> Int ->  IO (Bitmap  ())
+auiToolBarGetToolBitmap _obj toolid 
+  = withRefBitmap $ \pref -> 
+    withObjectRef "auiToolBarGetToolBitmap" _obj $ \cobj__obj -> 
+    wxAuiToolBar_GetToolBitmap cobj__obj  (toCInt toolid)   pref
+foreign import ccall "wxAuiToolBar_GetToolBitmap" wxAuiToolBar_GetToolBitmap :: Ptr (TAuiToolBar a) -> CInt -> Ptr (TBitmap ()) -> IO ()
+
+-- | usage: (@auiToolBarGetToolBitmapSize obj@).
+auiToolBarGetToolBitmapSize :: AuiToolBar  a ->  IO (Size)
+auiToolBarGetToolBitmapSize _obj 
+  = withWxSizeResult $
+    withObjectRef "auiToolBarGetToolBitmapSize" _obj $ \cobj__obj -> 
+    wxAuiToolBar_GetToolBitmapSize cobj__obj  
+foreign import ccall "wxAuiToolBar_GetToolBitmapSize" wxAuiToolBar_GetToolBitmapSize :: Ptr (TAuiToolBar a) -> IO (Ptr (TWxSize ()))
+
+-- | usage: (@auiToolBarGetToolBorderPadding obj@).
+auiToolBarGetToolBorderPadding :: AuiToolBar  a ->  IO Int
+auiToolBarGetToolBorderPadding _obj 
+  = withIntResult $
+    withObjectRef "auiToolBarGetToolBorderPadding" _obj $ \cobj__obj -> 
+    wxAuiToolBar_GetToolBorderPadding cobj__obj  
+foreign import ccall "wxAuiToolBar_GetToolBorderPadding" wxAuiToolBar_GetToolBorderPadding :: Ptr (TAuiToolBar a) -> IO CInt
+
+-- | usage: (@auiToolBarGetToolCount obj@).
+auiToolBarGetToolCount :: AuiToolBar  a ->  IO Int
+auiToolBarGetToolCount _obj 
+  = withIntResult $
+    withObjectRef "auiToolBarGetToolCount" _obj $ \cobj__obj -> 
+    wxAuiToolBar_GetToolCount cobj__obj  
+foreign import ccall "wxAuiToolBar_GetToolCount" wxAuiToolBar_GetToolCount :: Ptr (TAuiToolBar a) -> IO CInt
+
+-- | usage: (@auiToolBarGetToolDropDown obj toolid@).
+auiToolBarGetToolDropDown :: AuiToolBar  a -> Int ->  IO Bool
+auiToolBarGetToolDropDown _obj toolid 
+  = withBoolResult $
+    withObjectRef "auiToolBarGetToolDropDown" _obj $ \cobj__obj -> 
+    wxAuiToolBar_GetToolDropDown cobj__obj  (toCInt toolid)  
+foreign import ccall "wxAuiToolBar_GetToolDropDown" wxAuiToolBar_GetToolDropDown :: Ptr (TAuiToolBar a) -> CInt -> IO CBool
+
+-- | usage: (@auiToolBarGetToolEnabled obj toolid@).
+auiToolBarGetToolEnabled :: AuiToolBar  a -> Int ->  IO Bool
+auiToolBarGetToolEnabled _obj toolid 
+  = withBoolResult $
+    withObjectRef "auiToolBarGetToolEnabled" _obj $ \cobj__obj -> 
+    wxAuiToolBar_GetToolEnabled cobj__obj  (toCInt toolid)  
+foreign import ccall "wxAuiToolBar_GetToolEnabled" wxAuiToolBar_GetToolEnabled :: Ptr (TAuiToolBar a) -> CInt -> IO CBool
+
+-- | usage: (@auiToolBarGetToolFits obj toolid@).
+auiToolBarGetToolFits :: AuiToolBar  a -> Int ->  IO Bool
+auiToolBarGetToolFits _obj toolid 
+  = withBoolResult $
+    withObjectRef "auiToolBarGetToolFits" _obj $ \cobj__obj -> 
+    wxAuiToolBar_GetToolFits cobj__obj  (toCInt toolid)  
+foreign import ccall "wxAuiToolBar_GetToolFits" wxAuiToolBar_GetToolFits :: Ptr (TAuiToolBar a) -> CInt -> IO CBool
+
+-- | usage: (@auiToolBarGetToolFitsByIndex obj toolid@).
+auiToolBarGetToolFitsByIndex :: AuiToolBar  a -> Int ->  IO Bool
+auiToolBarGetToolFitsByIndex _obj toolid 
+  = withBoolResult $
+    withObjectRef "auiToolBarGetToolFitsByIndex" _obj $ \cobj__obj -> 
+    wxAuiToolBar_GetToolFitsByIndex cobj__obj  (toCInt toolid)  
+foreign import ccall "wxAuiToolBar_GetToolFitsByIndex" wxAuiToolBar_GetToolFitsByIndex :: Ptr (TAuiToolBar a) -> CInt -> IO CBool
+
+-- | usage: (@auiToolBarGetToolIndex obj toolid@).
+auiToolBarGetToolIndex :: AuiToolBar  a -> Int ->  IO Int
+auiToolBarGetToolIndex _obj toolid 
+  = withIntResult $
+    withObjectRef "auiToolBarGetToolIndex" _obj $ \cobj__obj -> 
+    wxAuiToolBar_GetToolIndex cobj__obj  (toCInt toolid)  
+foreign import ccall "wxAuiToolBar_GetToolIndex" wxAuiToolBar_GetToolIndex :: Ptr (TAuiToolBar a) -> CInt -> IO CInt
+
+-- | usage: (@auiToolBarGetToolLabel obj toolid@).
+auiToolBarGetToolLabel :: AuiToolBar  a -> Int ->  IO (String)
+auiToolBarGetToolLabel _obj toolid 
+  = withManagedStringResult $
+    withObjectRef "auiToolBarGetToolLabel" _obj $ \cobj__obj -> 
+    wxAuiToolBar_GetToolLabel cobj__obj  (toCInt toolid)  
+foreign import ccall "wxAuiToolBar_GetToolLabel" wxAuiToolBar_GetToolLabel :: Ptr (TAuiToolBar a) -> CInt -> IO (Ptr (TWxString ()))
+
+-- | usage: (@auiToolBarGetToolLongHelp obj toolid@).
+auiToolBarGetToolLongHelp :: AuiToolBar  a -> Int ->  IO (String)
+auiToolBarGetToolLongHelp _obj toolid 
+  = withManagedStringResult $
+    withObjectRef "auiToolBarGetToolLongHelp" _obj $ \cobj__obj -> 
+    wxAuiToolBar_GetToolLongHelp cobj__obj  (toCInt toolid)  
+foreign import ccall "wxAuiToolBar_GetToolLongHelp" wxAuiToolBar_GetToolLongHelp :: Ptr (TAuiToolBar a) -> CInt -> IO (Ptr (TWxString ()))
+
+-- | usage: (@auiToolBarGetToolPacking obj@).
+auiToolBarGetToolPacking :: AuiToolBar  a ->  IO Int
+auiToolBarGetToolPacking _obj 
+  = withIntResult $
+    withObjectRef "auiToolBarGetToolPacking" _obj $ \cobj__obj -> 
+    wxAuiToolBar_GetToolPacking cobj__obj  
+foreign import ccall "wxAuiToolBar_GetToolPacking" wxAuiToolBar_GetToolPacking :: Ptr (TAuiToolBar a) -> IO CInt
+
+-- | usage: (@auiToolBarGetToolPos obj toolid@).
+auiToolBarGetToolPos :: AuiToolBar  a -> Int ->  IO Int
+auiToolBarGetToolPos _obj toolid 
+  = withIntResult $
+    withObjectRef "auiToolBarGetToolPos" _obj $ \cobj__obj -> 
+    wxAuiToolBar_GetToolPos cobj__obj  (toCInt toolid)  
+foreign import ccall "wxAuiToolBar_GetToolPos" wxAuiToolBar_GetToolPos :: Ptr (TAuiToolBar a) -> CInt -> IO CInt
+
+-- | usage: (@auiToolBarGetToolProportion obj toolid@).
+auiToolBarGetToolProportion :: AuiToolBar  a -> Int ->  IO Int
+auiToolBarGetToolProportion _obj toolid 
+  = withIntResult $
+    withObjectRef "auiToolBarGetToolProportion" _obj $ \cobj__obj -> 
+    wxAuiToolBar_GetToolProportion cobj__obj  (toCInt toolid)  
+foreign import ccall "wxAuiToolBar_GetToolProportion" wxAuiToolBar_GetToolProportion :: Ptr (TAuiToolBar a) -> CInt -> IO CInt
+
+-- | usage: (@auiToolBarGetToolRect obj toolid@).
+auiToolBarGetToolRect :: AuiToolBar  a -> Int ->  IO (Rect)
+auiToolBarGetToolRect _obj toolid 
+  = withWxRectResult $
+    withObjectRef "auiToolBarGetToolRect" _obj $ \cobj__obj -> 
+    wxAuiToolBar_GetToolRect cobj__obj  (toCInt toolid)  
+foreign import ccall "wxAuiToolBar_GetToolRect" wxAuiToolBar_GetToolRect :: Ptr (TAuiToolBar a) -> CInt -> IO (Ptr (TWxRect ()))
+
+-- | usage: (@auiToolBarGetToolSeparation obj@).
+auiToolBarGetToolSeparation :: AuiToolBar  a ->  IO Int
+auiToolBarGetToolSeparation _obj 
+  = withIntResult $
+    withObjectRef "auiToolBarGetToolSeparation" _obj $ \cobj__obj -> 
+    wxAuiToolBar_GetToolSeparation cobj__obj  
+foreign import ccall "wxAuiToolBar_GetToolSeparation" wxAuiToolBar_GetToolSeparation :: Ptr (TAuiToolBar a) -> IO CInt
+
+-- | usage: (@auiToolBarGetToolShortHelp obj toolid@).
+auiToolBarGetToolShortHelp :: AuiToolBar  a -> Int ->  IO (String)
+auiToolBarGetToolShortHelp _obj toolid 
+  = withManagedStringResult $
+    withObjectRef "auiToolBarGetToolShortHelp" _obj $ \cobj__obj -> 
+    wxAuiToolBar_GetToolShortHelp cobj__obj  (toCInt toolid)  
+foreign import ccall "wxAuiToolBar_GetToolShortHelp" wxAuiToolBar_GetToolShortHelp :: Ptr (TAuiToolBar a) -> CInt -> IO (Ptr (TWxString ()))
+
+-- | usage: (@auiToolBarGetToolSticky obj toolid@).
+auiToolBarGetToolSticky :: AuiToolBar  a -> Int ->  IO Bool
+auiToolBarGetToolSticky _obj toolid 
+  = withBoolResult $
+    withObjectRef "auiToolBarGetToolSticky" _obj $ \cobj__obj -> 
+    wxAuiToolBar_GetToolSticky cobj__obj  (toCInt toolid)  
+foreign import ccall "wxAuiToolBar_GetToolSticky" wxAuiToolBar_GetToolSticky :: Ptr (TAuiToolBar a) -> CInt -> IO CBool
+
+-- | usage: (@auiToolBarGetToolTextOrientation obj@).
+auiToolBarGetToolTextOrientation :: AuiToolBar  a ->  IO Int
+auiToolBarGetToolTextOrientation _obj 
+  = withIntResult $
+    withObjectRef "auiToolBarGetToolTextOrientation" _obj $ \cobj__obj -> 
+    wxAuiToolBar_GetToolTextOrientation cobj__obj  
+foreign import ccall "wxAuiToolBar_GetToolTextOrientation" wxAuiToolBar_GetToolTextOrientation :: Ptr (TAuiToolBar a) -> IO CInt
+
+-- | usage: (@auiToolBarGetToolToggled obj toolid@).
+auiToolBarGetToolToggled :: AuiToolBar  a -> Int ->  IO Bool
+auiToolBarGetToolToggled _obj toolid 
+  = withBoolResult $
+    withObjectRef "auiToolBarGetToolToggled" _obj $ \cobj__obj -> 
+    wxAuiToolBar_GetToolToggled cobj__obj  (toCInt toolid)  
+foreign import ccall "wxAuiToolBar_GetToolToggled" wxAuiToolBar_GetToolToggled :: Ptr (TAuiToolBar a) -> CInt -> IO CBool
+
+-- | usage: (@auiToolBarGetWindowStyleFlag obj@).
+auiToolBarGetWindowStyleFlag :: AuiToolBar  a ->  IO Int
+auiToolBarGetWindowStyleFlag _obj 
+  = withIntResult $
+    withObjectRef "auiToolBarGetWindowStyleFlag" _obj $ \cobj__obj -> 
+    wxAuiToolBar_GetWindowStyleFlag cobj__obj  
+foreign import ccall "wxAuiToolBar_GetWindowStyleFlag" wxAuiToolBar_GetWindowStyleFlag :: Ptr (TAuiToolBar a) -> IO CInt
+
+-- | usage: (@auiToolBarIsPaneValid obj pane@).
+auiToolBarIsPaneValid :: AuiToolBar  a -> AuiPaneInfo  b ->  IO Bool
+auiToolBarIsPaneValid _obj _pane 
+  = withBoolResult $
+    withObjectRef "auiToolBarIsPaneValid" _obj $ \cobj__obj -> 
+    withObjectPtr _pane $ \cobj__pane -> 
+    wxAuiToolBar_IsPaneValid cobj__obj  cobj__pane  
+foreign import ccall "wxAuiToolBar_IsPaneValid" wxAuiToolBar_IsPaneValid :: Ptr (TAuiToolBar a) -> Ptr (TAuiPaneInfo b) -> IO CBool
+
+-- | usage: (@auiToolBarItemArrayCreate@).
+auiToolBarItemArrayCreate ::  IO (AuiToolBarItemArray  ())
+auiToolBarItemArrayCreate 
+  = withObjectResult $
+    wxAuiToolBarItemArray_Create 
+foreign import ccall "wxAuiToolBarItemArray_Create" wxAuiToolBarItemArray_Create :: IO (Ptr (TAuiToolBarItemArray ()))
+
+-- | usage: (@auiToolBarItemArrayDelete obj@).
+auiToolBarItemArrayDelete :: AuiToolBarItemArray  a ->  IO ()
+auiToolBarItemArrayDelete _obj 
+  = withObjectRef "auiToolBarItemArrayDelete" _obj $ \cobj__obj -> 
+    wxAuiToolBarItemArray_Delete cobj__obj  
+foreign import ccall "wxAuiToolBarItemArray_Delete" wxAuiToolBarItemArray_Delete :: Ptr (TAuiToolBarItemArray a) -> IO ()
+
+-- | usage: (@auiToolBarItemArrayGetCount obj@).
+auiToolBarItemArrayGetCount :: AuiToolBarItemArray  a ->  IO Int
+auiToolBarItemArrayGetCount _obj 
+  = withIntResult $
+    withObjectRef "auiToolBarItemArrayGetCount" _obj $ \cobj__obj -> 
+    wxAuiToolBarItemArray_GetCount cobj__obj  
+foreign import ccall "wxAuiToolBarItemArray_GetCount" wxAuiToolBarItemArray_GetCount :: Ptr (TAuiToolBarItemArray a) -> IO CInt
+
+-- | usage: (@auiToolBarItemArrayItem obj idx@).
+auiToolBarItemArrayItem :: AuiToolBarItemArray  a -> Int ->  IO (AuiToolBarItem  ())
+auiToolBarItemArrayItem _obj _idx 
+  = withObjectResult $
+    withObjectRef "auiToolBarItemArrayItem" _obj $ \cobj__obj -> 
+    wxAuiToolBarItemArray_Item cobj__obj  (toCInt _idx)  
+foreign import ccall "wxAuiToolBarItemArray_Item" wxAuiToolBarItemArray_Item :: Ptr (TAuiToolBarItemArray a) -> CInt -> IO (Ptr (TAuiToolBarItem ()))
+
+-- | usage: (@auiToolBarItemAssign obj c@).
+auiToolBarItemAssign :: AuiToolBarItem  a -> AuiToolBarItem  b ->  IO ()
+auiToolBarItemAssign _obj _c 
+  = withObjectRef "auiToolBarItemAssign" _obj $ \cobj__obj -> 
+    withObjectPtr _c $ \cobj__c -> 
+    wxAuiToolBarItem_Assign cobj__obj  cobj__c  
+foreign import ccall "wxAuiToolBarItem_Assign" wxAuiToolBarItem_Assign :: Ptr (TAuiToolBarItem a) -> Ptr (TAuiToolBarItem b) -> IO ()
+
+-- | usage: (@auiToolBarItemCopy obj c@).
+auiToolBarItemCopy :: AuiToolBarItem  a -> AuiToolBarItem  b ->  IO (AuiToolBarItem  ())
+auiToolBarItemCopy _obj _c 
+  = withObjectResult $
+    withObjectRef "auiToolBarItemCopy" _obj $ \cobj__obj -> 
+    withObjectPtr _c $ \cobj__c -> 
+    wxAuiToolBarItem_Copy cobj__obj  cobj__c  
+foreign import ccall "wxAuiToolBarItem_Copy" wxAuiToolBarItem_Copy :: Ptr (TAuiToolBarItem a) -> Ptr (TAuiToolBarItem b) -> IO (Ptr (TAuiToolBarItem ()))
+
+-- | usage: (@auiToolBarItemCreate c@).
+auiToolBarItemCreate :: AuiToolBarItem  a ->  IO (AuiToolBarItem  ())
+auiToolBarItemCreate _c 
+  = withObjectResult $
+    withObjectPtr _c $ \cobj__c -> 
+    wxAuiToolBarItem_Create cobj__c  
+foreign import ccall "wxAuiToolBarItem_Create" wxAuiToolBarItem_Create :: Ptr (TAuiToolBarItem a) -> IO (Ptr (TAuiToolBarItem ()))
+
+-- | usage: (@auiToolBarItemCreateDefault@).
+auiToolBarItemCreateDefault ::  IO (AuiToolBarItem  ())
+auiToolBarItemCreateDefault 
+  = withObjectResult $
+    wxAuiToolBarItem_CreateDefault 
+foreign import ccall "wxAuiToolBarItem_CreateDefault" wxAuiToolBarItem_CreateDefault :: IO (Ptr (TAuiToolBarItem ()))
+
+-- | usage: (@auiToolBarItemGetAlignment obj@).
+auiToolBarItemGetAlignment :: AuiToolBarItem  a ->  IO Int
+auiToolBarItemGetAlignment _obj 
+  = withIntResult $
+    withObjectRef "auiToolBarItemGetAlignment" _obj $ \cobj__obj -> 
+    wxAuiToolBarItem_GetAlignment cobj__obj  
+foreign import ccall "wxAuiToolBarItem_GetAlignment" wxAuiToolBarItem_GetAlignment :: Ptr (TAuiToolBarItem a) -> IO CInt
+
+-- | usage: (@auiToolBarItemGetBitmap obj@).
+auiToolBarItemGetBitmap :: AuiToolBarItem  a ->  IO (Bitmap  ())
+auiToolBarItemGetBitmap _obj 
+  = withRefBitmap $ \pref -> 
+    withObjectRef "auiToolBarItemGetBitmap" _obj $ \cobj__obj -> 
+    wxAuiToolBarItem_GetBitmap cobj__obj   pref
+foreign import ccall "wxAuiToolBarItem_GetBitmap" wxAuiToolBarItem_GetBitmap :: Ptr (TAuiToolBarItem a) -> Ptr (TBitmap ()) -> IO ()
+
+-- | usage: (@auiToolBarItemGetDisabledBitmap obj@).
+auiToolBarItemGetDisabledBitmap :: AuiToolBarItem  a ->  IO (Bitmap  ())
+auiToolBarItemGetDisabledBitmap _obj 
+  = withRefBitmap $ \pref -> 
+    withObjectRef "auiToolBarItemGetDisabledBitmap" _obj $ \cobj__obj -> 
+    wxAuiToolBarItem_GetDisabledBitmap cobj__obj   pref
+foreign import ccall "wxAuiToolBarItem_GetDisabledBitmap" wxAuiToolBarItem_GetDisabledBitmap :: Ptr (TAuiToolBarItem a) -> Ptr (TBitmap ()) -> IO ()
+
+-- | usage: (@auiToolBarItemGetHoverBitmap obj@).
+auiToolBarItemGetHoverBitmap :: AuiToolBarItem  a ->  IO (Bitmap  ())
+auiToolBarItemGetHoverBitmap _obj 
+  = withRefBitmap $ \pref -> 
+    withObjectRef "auiToolBarItemGetHoverBitmap" _obj $ \cobj__obj -> 
+    wxAuiToolBarItem_GetHoverBitmap cobj__obj   pref
+foreign import ccall "wxAuiToolBarItem_GetHoverBitmap" wxAuiToolBarItem_GetHoverBitmap :: Ptr (TAuiToolBarItem a) -> Ptr (TBitmap ()) -> IO ()
+
+-- | usage: (@auiToolBarItemGetId obj@).
+auiToolBarItemGetId :: AuiToolBarItem  a ->  IO Int
+auiToolBarItemGetId _obj 
+  = withIntResult $
+    withObjectRef "auiToolBarItemGetId" _obj $ \cobj__obj -> 
+    wxAuiToolBarItem_GetId cobj__obj  
+foreign import ccall "wxAuiToolBarItem_GetId" wxAuiToolBarItem_GetId :: Ptr (TAuiToolBarItem a) -> IO CInt
+
+-- | usage: (@auiToolBarItemGetKind obj@).
+auiToolBarItemGetKind :: AuiToolBarItem  a ->  IO Int
+auiToolBarItemGetKind _obj 
+  = withIntResult $
+    withObjectRef "auiToolBarItemGetKind" _obj $ \cobj__obj -> 
+    wxAuiToolBarItem_GetKind cobj__obj  
+foreign import ccall "wxAuiToolBarItem_GetKind" wxAuiToolBarItem_GetKind :: Ptr (TAuiToolBarItem a) -> IO CInt
+
+-- | usage: (@auiToolBarItemGetLabel obj@).
+auiToolBarItemGetLabel :: AuiToolBarItem  a ->  IO (String)
+auiToolBarItemGetLabel _obj 
+  = withManagedStringResult $
+    withObjectRef "auiToolBarItemGetLabel" _obj $ \cobj__obj -> 
+    wxAuiToolBarItem_GetLabel cobj__obj  
+foreign import ccall "wxAuiToolBarItem_GetLabel" wxAuiToolBarItem_GetLabel :: Ptr (TAuiToolBarItem a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@auiToolBarItemGetLongHelp obj@).
+auiToolBarItemGetLongHelp :: AuiToolBarItem  a ->  IO (String)
+auiToolBarItemGetLongHelp _obj 
+  = withManagedStringResult $
+    withObjectRef "auiToolBarItemGetLongHelp" _obj $ \cobj__obj -> 
+    wxAuiToolBarItem_GetLongHelp cobj__obj  
+foreign import ccall "wxAuiToolBarItem_GetLongHelp" wxAuiToolBarItem_GetLongHelp :: Ptr (TAuiToolBarItem a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@auiToolBarItemGetMinSize obj@).
+auiToolBarItemGetMinSize :: AuiToolBarItem  a ->  IO (Size)
+auiToolBarItemGetMinSize _obj 
+  = withWxSizeResult $
+    withObjectRef "auiToolBarItemGetMinSize" _obj $ \cobj__obj -> 
+    wxAuiToolBarItem_GetMinSize cobj__obj  
+foreign import ccall "wxAuiToolBarItem_GetMinSize" wxAuiToolBarItem_GetMinSize :: Ptr (TAuiToolBarItem a) -> IO (Ptr (TWxSize ()))
+
+-- | usage: (@auiToolBarItemGetProportion obj@).
+auiToolBarItemGetProportion :: AuiToolBarItem  a ->  IO Int
+auiToolBarItemGetProportion _obj 
+  = withIntResult $
+    withObjectRef "auiToolBarItemGetProportion" _obj $ \cobj__obj -> 
+    wxAuiToolBarItem_GetProportion cobj__obj  
+foreign import ccall "wxAuiToolBarItem_GetProportion" wxAuiToolBarItem_GetProportion :: Ptr (TAuiToolBarItem a) -> IO CInt
+
+-- | usage: (@auiToolBarItemGetShortHelp obj@).
+auiToolBarItemGetShortHelp :: AuiToolBarItem  a ->  IO (String)
+auiToolBarItemGetShortHelp _obj 
+  = withManagedStringResult $
+    withObjectRef "auiToolBarItemGetShortHelp" _obj $ \cobj__obj -> 
+    wxAuiToolBarItem_GetShortHelp cobj__obj  
+foreign import ccall "wxAuiToolBarItem_GetShortHelp" wxAuiToolBarItem_GetShortHelp :: Ptr (TAuiToolBarItem a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@auiToolBarItemGetSizerItem obj@).
+auiToolBarItemGetSizerItem :: AuiToolBarItem  a ->  IO (SizerItem  ())
+auiToolBarItemGetSizerItem _obj 
+  = withObjectResult $
+    withObjectRef "auiToolBarItemGetSizerItem" _obj $ \cobj__obj -> 
+    wxAuiToolBarItem_GetSizerItem cobj__obj  
+foreign import ccall "wxAuiToolBarItem_GetSizerItem" wxAuiToolBarItem_GetSizerItem :: Ptr (TAuiToolBarItem a) -> IO (Ptr (TSizerItem ()))
+
+-- | usage: (@auiToolBarItemGetSpacerPixels obj@).
+auiToolBarItemGetSpacerPixels :: AuiToolBarItem  a ->  IO Int
+auiToolBarItemGetSpacerPixels _obj 
+  = withIntResult $
+    withObjectRef "auiToolBarItemGetSpacerPixels" _obj $ \cobj__obj -> 
+    wxAuiToolBarItem_GetSpacerPixels cobj__obj  
+foreign import ccall "wxAuiToolBarItem_GetSpacerPixels" wxAuiToolBarItem_GetSpacerPixels :: Ptr (TAuiToolBarItem a) -> IO CInt
+
+-- | usage: (@auiToolBarItemGetState obj@).
+auiToolBarItemGetState :: AuiToolBarItem  a ->  IO Int
+auiToolBarItemGetState _obj 
+  = withIntResult $
+    withObjectRef "auiToolBarItemGetState" _obj $ \cobj__obj -> 
+    wxAuiToolBarItem_GetState cobj__obj  
+foreign import ccall "wxAuiToolBarItem_GetState" wxAuiToolBarItem_GetState :: Ptr (TAuiToolBarItem a) -> IO CInt
+
+-- | usage: (@auiToolBarItemGetUserData obj@).
+auiToolBarItemGetUserData :: AuiToolBarItem  a ->  IO Int
+auiToolBarItemGetUserData _obj 
+  = withIntResult $
+    withObjectRef "auiToolBarItemGetUserData" _obj $ \cobj__obj -> 
+    wxAuiToolBarItem_GetUserData cobj__obj  
+foreign import ccall "wxAuiToolBarItem_GetUserData" wxAuiToolBarItem_GetUserData :: Ptr (TAuiToolBarItem a) -> IO CInt
+
+-- | usage: (@auiToolBarItemGetWindow obj@).
+auiToolBarItemGetWindow :: AuiToolBarItem  a ->  IO (Window  ())
+auiToolBarItemGetWindow _obj 
+  = withObjectResult $
+    withObjectRef "auiToolBarItemGetWindow" _obj $ \cobj__obj -> 
+    wxAuiToolBarItem_GetWindow cobj__obj  
+foreign import ccall "wxAuiToolBarItem_GetWindow" wxAuiToolBarItem_GetWindow :: Ptr (TAuiToolBarItem a) -> IO (Ptr (TWindow ()))
+
+-- | usage: (@auiToolBarItemHasDropDown obj@).
+auiToolBarItemHasDropDown :: AuiToolBarItem  a ->  IO Bool
+auiToolBarItemHasDropDown _obj 
+  = withBoolResult $
+    withObjectRef "auiToolBarItemHasDropDown" _obj $ \cobj__obj -> 
+    wxAuiToolBarItem_HasDropDown cobj__obj  
+foreign import ccall "wxAuiToolBarItem_HasDropDown" wxAuiToolBarItem_HasDropDown :: Ptr (TAuiToolBarItem a) -> IO CBool
+
+-- | usage: (@auiToolBarItemIsActive obj@).
+auiToolBarItemIsActive :: AuiToolBarItem  a ->  IO Bool
+auiToolBarItemIsActive _obj 
+  = withBoolResult $
+    withObjectRef "auiToolBarItemIsActive" _obj $ \cobj__obj -> 
+    wxAuiToolBarItem_IsActive cobj__obj  
+foreign import ccall "wxAuiToolBarItem_IsActive" wxAuiToolBarItem_IsActive :: Ptr (TAuiToolBarItem a) -> IO CBool
+
+-- | usage: (@auiToolBarItemIsSticky obj@).
+auiToolBarItemIsSticky :: AuiToolBarItem  a ->  IO Bool
+auiToolBarItemIsSticky _obj 
+  = withBoolResult $
+    withObjectRef "auiToolBarItemIsSticky" _obj $ \cobj__obj -> 
+    wxAuiToolBarItem_IsSticky cobj__obj  
+foreign import ccall "wxAuiToolBarItem_IsSticky" wxAuiToolBarItem_IsSticky :: Ptr (TAuiToolBarItem a) -> IO CBool
+
+-- | usage: (@auiToolBarItemSetActive obj b@).
+auiToolBarItemSetActive :: AuiToolBarItem  a -> Bool ->  IO ()
+auiToolBarItemSetActive _obj b 
+  = withObjectRef "auiToolBarItemSetActive" _obj $ \cobj__obj -> 
+    wxAuiToolBarItem_SetActive cobj__obj  (toCBool b)  
+foreign import ccall "wxAuiToolBarItem_SetActive" wxAuiToolBarItem_SetActive :: Ptr (TAuiToolBarItem a) -> CBool -> IO ()
+
+-- | usage: (@auiToolBarItemSetAlignment obj l@).
+auiToolBarItemSetAlignment :: AuiToolBarItem  a -> Int ->  IO ()
+auiToolBarItemSetAlignment _obj l 
+  = withObjectRef "auiToolBarItemSetAlignment" _obj $ \cobj__obj -> 
+    wxAuiToolBarItem_SetAlignment cobj__obj  (toCInt l)  
+foreign import ccall "wxAuiToolBarItem_SetAlignment" wxAuiToolBarItem_SetAlignment :: Ptr (TAuiToolBarItem a) -> CInt -> IO ()
+
+-- | usage: (@auiToolBarItemSetBitmap obj bmp@).
+auiToolBarItemSetBitmap :: AuiToolBarItem  a -> Bitmap  b ->  IO ()
+auiToolBarItemSetBitmap _obj _bmp 
+  = withObjectRef "auiToolBarItemSetBitmap" _obj $ \cobj__obj -> 
+    withObjectPtr _bmp $ \cobj__bmp -> 
+    wxAuiToolBarItem_SetBitmap cobj__obj  cobj__bmp  
+foreign import ccall "wxAuiToolBarItem_SetBitmap" wxAuiToolBarItem_SetBitmap :: Ptr (TAuiToolBarItem a) -> Ptr (TBitmap b) -> IO ()
+
+-- | usage: (@auiToolBarItemSetDisabledBitmap obj bmp@).
+auiToolBarItemSetDisabledBitmap :: AuiToolBarItem  a -> Bitmap  b ->  IO ()
+auiToolBarItemSetDisabledBitmap _obj _bmp 
+  = withObjectRef "auiToolBarItemSetDisabledBitmap" _obj $ \cobj__obj -> 
+    withObjectPtr _bmp $ \cobj__bmp -> 
+    wxAuiToolBarItem_SetDisabledBitmap cobj__obj  cobj__bmp  
+foreign import ccall "wxAuiToolBarItem_SetDisabledBitmap" wxAuiToolBarItem_SetDisabledBitmap :: Ptr (TAuiToolBarItem a) -> Ptr (TBitmap b) -> IO ()
+
+-- | usage: (@auiToolBarItemSetHasDropDown obj b@).
+auiToolBarItemSetHasDropDown :: AuiToolBarItem  a -> Bool ->  IO ()
+auiToolBarItemSetHasDropDown _obj b 
+  = withObjectRef "auiToolBarItemSetHasDropDown" _obj $ \cobj__obj -> 
+    wxAuiToolBarItem_SetHasDropDown cobj__obj  (toCBool b)  
+foreign import ccall "wxAuiToolBarItem_SetHasDropDown" wxAuiToolBarItem_SetHasDropDown :: Ptr (TAuiToolBarItem a) -> CBool -> IO ()
+
+-- | usage: (@auiToolBarItemSetHoverBitmap obj bmp@).
+auiToolBarItemSetHoverBitmap :: AuiToolBarItem  a -> Bitmap  b ->  IO ()
+auiToolBarItemSetHoverBitmap _obj _bmp 
+  = withObjectRef "auiToolBarItemSetHoverBitmap" _obj $ \cobj__obj -> 
+    withObjectPtr _bmp $ \cobj__bmp -> 
+    wxAuiToolBarItem_SetHoverBitmap cobj__obj  cobj__bmp  
+foreign import ccall "wxAuiToolBarItem_SetHoverBitmap" wxAuiToolBarItem_SetHoverBitmap :: Ptr (TAuiToolBarItem a) -> Ptr (TBitmap b) -> IO ()
+
+-- | usage: (@auiToolBarItemSetId obj newid@).
+auiToolBarItemSetId :: AuiToolBarItem  a -> Int ->  IO ()
+auiToolBarItemSetId _obj newid 
+  = withObjectRef "auiToolBarItemSetId" _obj $ \cobj__obj -> 
+    wxAuiToolBarItem_SetId cobj__obj  (toCInt newid)  
+foreign import ccall "wxAuiToolBarItem_SetId" wxAuiToolBarItem_SetId :: Ptr (TAuiToolBarItem a) -> CInt -> IO ()
+
+-- | usage: (@auiToolBarItemSetKind obj newkind@).
+auiToolBarItemSetKind :: AuiToolBarItem  a -> Int ->  IO ()
+auiToolBarItemSetKind _obj newkind 
+  = withObjectRef "auiToolBarItemSetKind" _obj $ \cobj__obj -> 
+    wxAuiToolBarItem_SetKind cobj__obj  (toCInt newkind)  
+foreign import ccall "wxAuiToolBarItem_SetKind" wxAuiToolBarItem_SetKind :: Ptr (TAuiToolBarItem a) -> CInt -> IO ()
+
+-- | usage: (@auiToolBarItemSetLabel obj s@).
+auiToolBarItemSetLabel :: AuiToolBarItem  a -> String ->  IO ()
+auiToolBarItemSetLabel _obj _s 
+  = withObjectRef "auiToolBarItemSetLabel" _obj $ \cobj__obj -> 
+    withStringPtr _s $ \cobj__s -> 
+    wxAuiToolBarItem_SetLabel cobj__obj  cobj__s  
+foreign import ccall "wxAuiToolBarItem_SetLabel" wxAuiToolBarItem_SetLabel :: Ptr (TAuiToolBarItem a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@auiToolBarItemSetLongHelp obj s@).
+auiToolBarItemSetLongHelp :: AuiToolBarItem  a -> String ->  IO ()
+auiToolBarItemSetLongHelp _obj _s 
+  = withObjectRef "auiToolBarItemSetLongHelp" _obj $ \cobj__obj -> 
+    withStringPtr _s $ \cobj__s -> 
+    wxAuiToolBarItem_SetLongHelp cobj__obj  cobj__s  
+foreign import ccall "wxAuiToolBarItem_SetLongHelp" wxAuiToolBarItem_SetLongHelp :: Ptr (TAuiToolBarItem a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@auiToolBarItemSetMinSize obj widthheight@).
+auiToolBarItemSetMinSize :: AuiToolBarItem  a -> Size ->  IO ()
+auiToolBarItemSetMinSize _obj _widthheight 
+  = withObjectRef "auiToolBarItemSetMinSize" _obj $ \cobj__obj -> 
+    wxAuiToolBarItem_SetMinSize cobj__obj  (toCIntSizeW _widthheight) (toCIntSizeH _widthheight)  
+foreign import ccall "wxAuiToolBarItem_SetMinSize" wxAuiToolBarItem_SetMinSize :: Ptr (TAuiToolBarItem a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@auiToolBarItemSetProportion obj p@).
+auiToolBarItemSetProportion :: AuiToolBarItem  a -> Int ->  IO ()
+auiToolBarItemSetProportion _obj p 
+  = withObjectRef "auiToolBarItemSetProportion" _obj $ \cobj__obj -> 
+    wxAuiToolBarItem_SetProportion cobj__obj  (toCInt p)  
+foreign import ccall "wxAuiToolBarItem_SetProportion" wxAuiToolBarItem_SetProportion :: Ptr (TAuiToolBarItem a) -> CInt -> IO ()
+
+-- | usage: (@auiToolBarItemSetShortHelp obj s@).
+auiToolBarItemSetShortHelp :: AuiToolBarItem  a -> String ->  IO ()
+auiToolBarItemSetShortHelp _obj _s 
+  = withObjectRef "auiToolBarItemSetShortHelp" _obj $ \cobj__obj -> 
+    withStringPtr _s $ \cobj__s -> 
+    wxAuiToolBarItem_SetShortHelp cobj__obj  cobj__s  
+foreign import ccall "wxAuiToolBarItem_SetShortHelp" wxAuiToolBarItem_SetShortHelp :: Ptr (TAuiToolBarItem a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@auiToolBarItemSetSizerItem obj s@).
+auiToolBarItemSetSizerItem :: AuiToolBarItem  a -> SizerItem  b ->  IO ()
+auiToolBarItemSetSizerItem _obj _s 
+  = withObjectRef "auiToolBarItemSetSizerItem" _obj $ \cobj__obj -> 
+    withObjectPtr _s $ \cobj__s -> 
+    wxAuiToolBarItem_SetSizerItem cobj__obj  cobj__s  
+foreign import ccall "wxAuiToolBarItem_SetSizerItem" wxAuiToolBarItem_SetSizerItem :: Ptr (TAuiToolBarItem a) -> Ptr (TSizerItem b) -> IO ()
+
+-- | usage: (@auiToolBarItemSetSpacerPixels obj s@).
+auiToolBarItemSetSpacerPixels :: AuiToolBarItem  a -> Int ->  IO ()
+auiToolBarItemSetSpacerPixels _obj s 
+  = withObjectRef "auiToolBarItemSetSpacerPixels" _obj $ \cobj__obj -> 
+    wxAuiToolBarItem_SetSpacerPixels cobj__obj  (toCInt s)  
+foreign import ccall "wxAuiToolBarItem_SetSpacerPixels" wxAuiToolBarItem_SetSpacerPixels :: Ptr (TAuiToolBarItem a) -> CInt -> IO ()
+
+-- | usage: (@auiToolBarItemSetState obj newstate@).
+auiToolBarItemSetState :: AuiToolBarItem  a -> Int ->  IO ()
+auiToolBarItemSetState _obj newstate 
+  = withObjectRef "auiToolBarItemSetState" _obj $ \cobj__obj -> 
+    wxAuiToolBarItem_SetState cobj__obj  (toCInt newstate)  
+foreign import ccall "wxAuiToolBarItem_SetState" wxAuiToolBarItem_SetState :: Ptr (TAuiToolBarItem a) -> CInt -> IO ()
+
+-- | usage: (@auiToolBarItemSetSticky obj b@).
+auiToolBarItemSetSticky :: AuiToolBarItem  a -> Bool ->  IO ()
+auiToolBarItemSetSticky _obj b 
+  = withObjectRef "auiToolBarItemSetSticky" _obj $ \cobj__obj -> 
+    wxAuiToolBarItem_SetSticky cobj__obj  (toCBool b)  
+foreign import ccall "wxAuiToolBarItem_SetSticky" wxAuiToolBarItem_SetSticky :: Ptr (TAuiToolBarItem a) -> CBool -> IO ()
+
+-- | usage: (@auiToolBarItemSetUserData obj l@).
+auiToolBarItemSetUserData :: AuiToolBarItem  a -> Int ->  IO ()
+auiToolBarItemSetUserData _obj l 
+  = withObjectRef "auiToolBarItemSetUserData" _obj $ \cobj__obj -> 
+    wxAuiToolBarItem_SetUserData cobj__obj  (toCInt l)  
+foreign import ccall "wxAuiToolBarItem_SetUserData" wxAuiToolBarItem_SetUserData :: Ptr (TAuiToolBarItem a) -> CInt -> IO ()
+
+-- | usage: (@auiToolBarItemSetWindow obj w@).
+auiToolBarItemSetWindow :: AuiToolBarItem  a -> Window  b ->  IO ()
+auiToolBarItemSetWindow _obj _w 
+  = withObjectRef "auiToolBarItemSetWindow" _obj $ \cobj__obj -> 
+    withObjectPtr _w $ \cobj__w -> 
+    wxAuiToolBarItem_SetWindow cobj__obj  cobj__w  
+foreign import ccall "wxAuiToolBarItem_SetWindow" wxAuiToolBarItem_SetWindow :: Ptr (TAuiToolBarItem a) -> Ptr (TWindow b) -> IO ()
+
+-- | usage: (@auiToolBarRealize obj@).
+auiToolBarRealize :: AuiToolBar  a ->  IO Bool
+auiToolBarRealize _obj 
+  = withBoolResult $
+    withObjectRef "auiToolBarRealize" _obj $ \cobj__obj -> 
+    wxAuiToolBar_Realize cobj__obj  
+foreign import ccall "wxAuiToolBar_Realize" wxAuiToolBar_Realize :: Ptr (TAuiToolBar a) -> IO CBool
+
+-- | usage: (@auiToolBarSetArtProvider obj art@).
+auiToolBarSetArtProvider :: AuiToolBar  a -> AuiToolBarArt  b ->  IO ()
+auiToolBarSetArtProvider _obj _art 
+  = withObjectRef "auiToolBarSetArtProvider" _obj $ \cobj__obj -> 
+    withObjectPtr _art $ \cobj__art -> 
+    wxAuiToolBar_SetArtProvider cobj__obj  cobj__art  
+foreign import ccall "wxAuiToolBar_SetArtProvider" wxAuiToolBar_SetArtProvider :: Ptr (TAuiToolBar a) -> Ptr (TAuiToolBarArt b) -> IO ()
+
+-- | usage: (@auiToolBarSetCustomOverflowItems obj prepend append@).
+auiToolBarSetCustomOverflowItems :: AuiToolBar  a -> AuiToolBarItemArray  b -> AuiToolBarItemArray  c ->  IO ()
+auiToolBarSetCustomOverflowItems _obj _prepend _append 
+  = withObjectRef "auiToolBarSetCustomOverflowItems" _obj $ \cobj__obj -> 
+    withObjectPtr _prepend $ \cobj__prepend -> 
+    withObjectPtr _append $ \cobj__append -> 
+    wxAuiToolBar_SetCustomOverflowItems cobj__obj  cobj__prepend  cobj__append  
+foreign import ccall "wxAuiToolBar_SetCustomOverflowItems" wxAuiToolBar_SetCustomOverflowItems :: Ptr (TAuiToolBar a) -> Ptr (TAuiToolBarItemArray b) -> Ptr (TAuiToolBarItemArray c) -> IO ()
+
+-- | usage: (@auiToolBarSetFont obj font@).
+auiToolBarSetFont :: AuiToolBar  a -> Font  b ->  IO Bool
+auiToolBarSetFont _obj _font 
+  = withBoolResult $
+    withObjectRef "auiToolBarSetFont" _obj $ \cobj__obj -> 
+    withObjectPtr _font $ \cobj__font -> 
+    wxAuiToolBar_SetFont cobj__obj  cobj__font  
+foreign import ccall "wxAuiToolBar_SetFont" wxAuiToolBar_SetFont :: Ptr (TAuiToolBar a) -> Ptr (TFont b) -> IO CBool
+
+-- | usage: (@auiToolBarSetGripperVisible obj visible@).
+auiToolBarSetGripperVisible :: AuiToolBar  a -> Bool ->  IO ()
+auiToolBarSetGripperVisible _obj visible 
+  = withObjectRef "auiToolBarSetGripperVisible" _obj $ \cobj__obj -> 
+    wxAuiToolBar_SetGripperVisible cobj__obj  (toCBool visible)  
+foreign import ccall "wxAuiToolBar_SetGripperVisible" wxAuiToolBar_SetGripperVisible :: Ptr (TAuiToolBar a) -> CBool -> IO ()
+
+-- | usage: (@auiToolBarSetMargins obj widthheight@).
+auiToolBarSetMargins :: AuiToolBar  a -> Size ->  IO ()
+auiToolBarSetMargins _obj _widthheight 
+  = withObjectRef "auiToolBarSetMargins" _obj $ \cobj__obj -> 
+    wxAuiToolBar_SetMargins cobj__obj  (toCIntSizeW _widthheight) (toCIntSizeH _widthheight)  
+foreign import ccall "wxAuiToolBar_SetMargins" wxAuiToolBar_SetMargins :: Ptr (TAuiToolBar a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@auiToolBarSetMarginsDetailed obj left right top bottom@).
+auiToolBarSetMarginsDetailed :: AuiToolBar  a -> Int -> Int -> Int -> Int ->  IO ()
+auiToolBarSetMarginsDetailed _obj left right top bottom 
+  = withObjectRef "auiToolBarSetMarginsDetailed" _obj $ \cobj__obj -> 
+    wxAuiToolBar_SetMarginsDetailed cobj__obj  (toCInt left)  (toCInt right)  (toCInt top)  (toCInt bottom)  
+foreign import ccall "wxAuiToolBar_SetMarginsDetailed" wxAuiToolBar_SetMarginsDetailed :: Ptr (TAuiToolBar a) -> CInt -> CInt -> CInt -> CInt -> IO ()
+
+-- | usage: (@auiToolBarSetMarginsXY obj xy@).
+auiToolBarSetMarginsXY :: AuiToolBar  a -> Point ->  IO ()
+auiToolBarSetMarginsXY _obj xy 
+  = withObjectRef "auiToolBarSetMarginsXY" _obj $ \cobj__obj -> 
+    wxAuiToolBar_SetMarginsXY cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxAuiToolBar_SetMarginsXY" wxAuiToolBar_SetMarginsXY :: Ptr (TAuiToolBar a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@auiToolBarSetOverflowVisible obj visible@).
+auiToolBarSetOverflowVisible :: AuiToolBar  a -> Bool ->  IO ()
+auiToolBarSetOverflowVisible _obj visible 
+  = withObjectRef "auiToolBarSetOverflowVisible" _obj $ \cobj__obj -> 
+    wxAuiToolBar_SetOverflowVisible cobj__obj  (toCBool visible)  
+foreign import ccall "wxAuiToolBar_SetOverflowVisible" wxAuiToolBar_SetOverflowVisible :: Ptr (TAuiToolBar a) -> CBool -> IO ()
+
+-- | usage: (@auiToolBarSetToolBitmap obj toolid bitmap@).
+auiToolBarSetToolBitmap :: AuiToolBar  a -> Int -> Bitmap  c ->  IO ()
+auiToolBarSetToolBitmap _obj toolid _bitmap 
+  = withObjectRef "auiToolBarSetToolBitmap" _obj $ \cobj__obj -> 
+    withObjectPtr _bitmap $ \cobj__bitmap -> 
+    wxAuiToolBar_SetToolBitmap cobj__obj  (toCInt toolid)  cobj__bitmap  
+foreign import ccall "wxAuiToolBar_SetToolBitmap" wxAuiToolBar_SetToolBitmap :: Ptr (TAuiToolBar a) -> CInt -> Ptr (TBitmap c) -> IO ()
+
+-- | usage: (@auiToolBarSetToolBitmapSize obj widthheight@).
+auiToolBarSetToolBitmapSize :: AuiToolBar  a -> Size ->  IO ()
+auiToolBarSetToolBitmapSize _obj _widthheight 
+  = withObjectRef "auiToolBarSetToolBitmapSize" _obj $ \cobj__obj -> 
+    wxAuiToolBar_SetToolBitmapSize cobj__obj  (toCIntSizeW _widthheight) (toCIntSizeH _widthheight)  
+foreign import ccall "wxAuiToolBar_SetToolBitmapSize" wxAuiToolBar_SetToolBitmapSize :: Ptr (TAuiToolBar a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@auiToolBarSetToolBorderPadding obj padding@).
+auiToolBarSetToolBorderPadding :: AuiToolBar  a -> Int ->  IO ()
+auiToolBarSetToolBorderPadding _obj padding 
+  = withObjectRef "auiToolBarSetToolBorderPadding" _obj $ \cobj__obj -> 
+    wxAuiToolBar_SetToolBorderPadding cobj__obj  (toCInt padding)  
+foreign import ccall "wxAuiToolBar_SetToolBorderPadding" wxAuiToolBar_SetToolBorderPadding :: Ptr (TAuiToolBar a) -> CInt -> IO ()
+
+-- | usage: (@auiToolBarSetToolDropDown obj toolid dropdown@).
+auiToolBarSetToolDropDown :: AuiToolBar  a -> Int -> Bool ->  IO ()
+auiToolBarSetToolDropDown _obj toolid dropdown 
+  = withObjectRef "auiToolBarSetToolDropDown" _obj $ \cobj__obj -> 
+    wxAuiToolBar_SetToolDropDown cobj__obj  (toCInt toolid)  (toCBool dropdown)  
+foreign import ccall "wxAuiToolBar_SetToolDropDown" wxAuiToolBar_SetToolDropDown :: Ptr (TAuiToolBar a) -> CInt -> CBool -> IO ()
+
+-- | usage: (@auiToolBarSetToolLabel obj toolid label@).
+auiToolBarSetToolLabel :: AuiToolBar  a -> Int -> String ->  IO ()
+auiToolBarSetToolLabel _obj toolid _label 
+  = withObjectRef "auiToolBarSetToolLabel" _obj $ \cobj__obj -> 
+    withStringPtr _label $ \cobj__label -> 
+    wxAuiToolBar_SetToolLabel cobj__obj  (toCInt toolid)  cobj__label  
+foreign import ccall "wxAuiToolBar_SetToolLabel" wxAuiToolBar_SetToolLabel :: Ptr (TAuiToolBar a) -> CInt -> Ptr (TWxString c) -> IO ()
+
+-- | usage: (@auiToolBarSetToolLongHelp obj toolid helpstring@).
+auiToolBarSetToolLongHelp :: AuiToolBar  a -> Int -> String ->  IO ()
+auiToolBarSetToolLongHelp _obj toolid _helpstring 
+  = withObjectRef "auiToolBarSetToolLongHelp" _obj $ \cobj__obj -> 
+    withStringPtr _helpstring $ \cobj__helpstring -> 
+    wxAuiToolBar_SetToolLongHelp cobj__obj  (toCInt toolid)  cobj__helpstring  
+foreign import ccall "wxAuiToolBar_SetToolLongHelp" wxAuiToolBar_SetToolLongHelp :: Ptr (TAuiToolBar a) -> CInt -> Ptr (TWxString c) -> IO ()
+
+-- | usage: (@auiToolBarSetToolPacking obj packing@).
+auiToolBarSetToolPacking :: AuiToolBar  a -> Int ->  IO ()
+auiToolBarSetToolPacking _obj packing 
+  = withObjectRef "auiToolBarSetToolPacking" _obj $ \cobj__obj -> 
+    wxAuiToolBar_SetToolPacking cobj__obj  (toCInt packing)  
+foreign import ccall "wxAuiToolBar_SetToolPacking" wxAuiToolBar_SetToolPacking :: Ptr (TAuiToolBar a) -> CInt -> IO ()
+
+-- | usage: (@auiToolBarSetToolProportion obj toolid proportion@).
+auiToolBarSetToolProportion :: AuiToolBar  a -> Int -> Int ->  IO ()
+auiToolBarSetToolProportion _obj toolid proportion 
+  = withObjectRef "auiToolBarSetToolProportion" _obj $ \cobj__obj -> 
+    wxAuiToolBar_SetToolProportion cobj__obj  (toCInt toolid)  (toCInt proportion)  
+foreign import ccall "wxAuiToolBar_SetToolProportion" wxAuiToolBar_SetToolProportion :: Ptr (TAuiToolBar a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@auiToolBarSetToolSeparation obj separation@).
+auiToolBarSetToolSeparation :: AuiToolBar  a -> Int ->  IO ()
+auiToolBarSetToolSeparation _obj separation 
+  = withObjectRef "auiToolBarSetToolSeparation" _obj $ \cobj__obj -> 
+    wxAuiToolBar_SetToolSeparation cobj__obj  (toCInt separation)  
+foreign import ccall "wxAuiToolBar_SetToolSeparation" wxAuiToolBar_SetToolSeparation :: Ptr (TAuiToolBar a) -> CInt -> IO ()
+
+-- | usage: (@auiToolBarSetToolShortHelp obj toolid helpstring@).
+auiToolBarSetToolShortHelp :: AuiToolBar  a -> Int -> String ->  IO ()
+auiToolBarSetToolShortHelp _obj toolid _helpstring 
+  = withObjectRef "auiToolBarSetToolShortHelp" _obj $ \cobj__obj -> 
+    withStringPtr _helpstring $ \cobj__helpstring -> 
+    wxAuiToolBar_SetToolShortHelp cobj__obj  (toCInt toolid)  cobj__helpstring  
+foreign import ccall "wxAuiToolBar_SetToolShortHelp" wxAuiToolBar_SetToolShortHelp :: Ptr (TAuiToolBar a) -> CInt -> Ptr (TWxString c) -> IO ()
+
+-- | usage: (@auiToolBarSetToolSticky obj toolid sticky@).
+auiToolBarSetToolSticky :: AuiToolBar  a -> Int -> Bool ->  IO ()
+auiToolBarSetToolSticky _obj toolid sticky 
+  = withObjectRef "auiToolBarSetToolSticky" _obj $ \cobj__obj -> 
+    wxAuiToolBar_SetToolSticky cobj__obj  (toCInt toolid)  (toCBool sticky)  
+foreign import ccall "wxAuiToolBar_SetToolSticky" wxAuiToolBar_SetToolSticky :: Ptr (TAuiToolBar a) -> CInt -> CBool -> IO ()
+
+-- | usage: (@auiToolBarSetToolTextOrientation obj orientation@).
+auiToolBarSetToolTextOrientation :: AuiToolBar  a -> Int ->  IO ()
+auiToolBarSetToolTextOrientation _obj orientation 
+  = withObjectRef "auiToolBarSetToolTextOrientation" _obj $ \cobj__obj -> 
+    wxAuiToolBar_SetToolTextOrientation cobj__obj  (toCInt orientation)  
+foreign import ccall "wxAuiToolBar_SetToolTextOrientation" wxAuiToolBar_SetToolTextOrientation :: Ptr (TAuiToolBar a) -> CInt -> IO ()
+
+-- | usage: (@auiToolBarSetWindowStyleFlag obj style@).
+auiToolBarSetWindowStyleFlag :: AuiToolBar  a -> Int ->  IO ()
+auiToolBarSetWindowStyleFlag _obj style 
+  = withObjectRef "auiToolBarSetWindowStyleFlag" _obj $ \cobj__obj -> 
+    wxAuiToolBar_SetWindowStyleFlag cobj__obj  (toCInt style)  
+foreign import ccall "wxAuiToolBar_SetWindowStyleFlag" wxAuiToolBar_SetWindowStyleFlag :: Ptr (TAuiToolBar a) -> CInt -> IO ()
+
+-- | usage: (@auiToolBarToggleTool obj toolid state@).
+auiToolBarToggleTool :: AuiToolBar  a -> Int -> Bool ->  IO ()
+auiToolBarToggleTool _obj toolid state 
+  = withObjectRef "auiToolBarToggleTool" _obj $ \cobj__obj -> 
+    wxAuiToolBar_ToggleTool cobj__obj  (toCInt toolid)  (toCBool state)  
+foreign import ccall "wxAuiToolBar_ToggleTool" wxAuiToolBar_ToggleTool :: Ptr (TAuiToolBar a) -> CInt -> CBool -> IO ()
+
+-- | usage: (@autoBufferedPaintDCCreate window@).
+autoBufferedPaintDCCreate :: Window  a ->  IO (AutoBufferedPaintDC  ())
+autoBufferedPaintDCCreate window 
+  = withObjectResult $
+    withObjectPtr window $ \cobj_window -> 
+    wxAutoBufferedPaintDC_Create cobj_window  
+foreign import ccall "wxAutoBufferedPaintDC_Create" wxAutoBufferedPaintDC_Create :: Ptr (TWindow a) -> IO (Ptr (TAutoBufferedPaintDC ()))
+
+-- | usage: (@autoBufferedPaintDCDelete self@).
+autoBufferedPaintDCDelete :: AutoBufferedPaintDC  a ->  IO ()
+autoBufferedPaintDCDelete
+  = objectDelete
+
+
+-- | usage: (@bitmapAddHandler handler@).
+bitmapAddHandler :: EvtHandler  a ->  IO ()
+bitmapAddHandler handler 
+  = withObjectPtr handler $ \cobj_handler -> 
+    wxBitmap_AddHandler cobj_handler  
+foreign import ccall "wxBitmap_AddHandler" wxBitmap_AddHandler :: Ptr (TEvtHandler a) -> IO ()
+
+-- | usage: (@bitmapButtonCreate prt id bmp lfttopwdthgt stl@).
+bitmapButtonCreate :: Window  a -> Id -> Bitmap  c -> Rect -> Style ->  IO (BitmapButton  ())
+bitmapButtonCreate _prt _id _bmp _lfttopwdthgt _stl 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    withObjectPtr _bmp $ \cobj__bmp -> 
+    wxBitmapButton_Create cobj__prt  (toCInt _id)  cobj__bmp  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
+foreign import ccall "wxBitmapButton_Create" wxBitmapButton_Create :: Ptr (TWindow a) -> CInt -> Ptr (TBitmap c) -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TBitmapButton ()))
+
+-- | usage: (@bitmapButtonGetBitmapDisabled obj@).
+bitmapButtonGetBitmapDisabled :: BitmapButton  a ->  IO (Bitmap  ())
+bitmapButtonGetBitmapDisabled _obj 
+  = withRefBitmap $ \pref -> 
+    withObjectRef "bitmapButtonGetBitmapDisabled" _obj $ \cobj__obj -> 
+    wxBitmapButton_GetBitmapDisabled cobj__obj   pref
+foreign import ccall "wxBitmapButton_GetBitmapDisabled" wxBitmapButton_GetBitmapDisabled :: Ptr (TBitmapButton a) -> Ptr (TBitmap ()) -> IO ()
+
+-- | usage: (@bitmapButtonGetBitmapFocus obj@).
+bitmapButtonGetBitmapFocus :: BitmapButton  a ->  IO (Bitmap  ())
+bitmapButtonGetBitmapFocus _obj 
+  = withRefBitmap $ \pref -> 
+    withObjectRef "bitmapButtonGetBitmapFocus" _obj $ \cobj__obj -> 
+    wxBitmapButton_GetBitmapFocus cobj__obj   pref
+foreign import ccall "wxBitmapButton_GetBitmapFocus" wxBitmapButton_GetBitmapFocus :: Ptr (TBitmapButton a) -> Ptr (TBitmap ()) -> IO ()
+
+-- | usage: (@bitmapButtonGetBitmapLabel obj@).
+bitmapButtonGetBitmapLabel :: BitmapButton  a ->  IO (Bitmap  ())
+bitmapButtonGetBitmapLabel _obj 
+  = withRefBitmap $ \pref -> 
+    withObjectRef "bitmapButtonGetBitmapLabel" _obj $ \cobj__obj -> 
+    wxBitmapButton_GetBitmapLabel cobj__obj   pref
+foreign import ccall "wxBitmapButton_GetBitmapLabel" wxBitmapButton_GetBitmapLabel :: Ptr (TBitmapButton a) -> Ptr (TBitmap ()) -> IO ()
+
+-- | usage: (@bitmapButtonGetBitmapSelected obj@).
+bitmapButtonGetBitmapSelected :: BitmapButton  a ->  IO (Bitmap  ())
+bitmapButtonGetBitmapSelected _obj 
+  = withRefBitmap $ \pref -> 
+    withObjectRef "bitmapButtonGetBitmapSelected" _obj $ \cobj__obj -> 
+    wxBitmapButton_GetBitmapSelected cobj__obj   pref
+foreign import ccall "wxBitmapButton_GetBitmapSelected" wxBitmapButton_GetBitmapSelected :: Ptr (TBitmapButton a) -> Ptr (TBitmap ()) -> IO ()
+
+-- | usage: (@bitmapButtonGetMarginX obj@).
+bitmapButtonGetMarginX :: BitmapButton  a ->  IO Int
+bitmapButtonGetMarginX _obj 
+  = withIntResult $
+    withObjectRef "bitmapButtonGetMarginX" _obj $ \cobj__obj -> 
+    wxBitmapButton_GetMarginX cobj__obj  
+foreign import ccall "wxBitmapButton_GetMarginX" wxBitmapButton_GetMarginX :: Ptr (TBitmapButton a) -> IO CInt
+
+-- | usage: (@bitmapButtonGetMarginY obj@).
+bitmapButtonGetMarginY :: BitmapButton  a ->  IO Int
+bitmapButtonGetMarginY _obj 
+  = withIntResult $
+    withObjectRef "bitmapButtonGetMarginY" _obj $ \cobj__obj -> 
+    wxBitmapButton_GetMarginY cobj__obj  
+foreign import ccall "wxBitmapButton_GetMarginY" wxBitmapButton_GetMarginY :: Ptr (TBitmapButton a) -> IO CInt
+
+-- | usage: (@bitmapButtonSetBitmapDisabled obj disabled@).
+bitmapButtonSetBitmapDisabled :: BitmapButton  a -> Bitmap  b ->  IO ()
+bitmapButtonSetBitmapDisabled _obj disabled 
+  = withObjectRef "bitmapButtonSetBitmapDisabled" _obj $ \cobj__obj -> 
+    withObjectPtr disabled $ \cobj_disabled -> 
+    wxBitmapButton_SetBitmapDisabled cobj__obj  cobj_disabled  
+foreign import ccall "wxBitmapButton_SetBitmapDisabled" wxBitmapButton_SetBitmapDisabled :: Ptr (TBitmapButton a) -> Ptr (TBitmap b) -> IO ()
+
+-- | usage: (@bitmapButtonSetBitmapFocus obj focus@).
+bitmapButtonSetBitmapFocus :: BitmapButton  a -> Bitmap  b ->  IO ()
+bitmapButtonSetBitmapFocus _obj focus 
+  = withObjectRef "bitmapButtonSetBitmapFocus" _obj $ \cobj__obj -> 
+    withObjectPtr focus $ \cobj_focus -> 
+    wxBitmapButton_SetBitmapFocus cobj__obj  cobj_focus  
+foreign import ccall "wxBitmapButton_SetBitmapFocus" wxBitmapButton_SetBitmapFocus :: Ptr (TBitmapButton a) -> Ptr (TBitmap b) -> IO ()
+
+-- | usage: (@bitmapButtonSetBitmapLabel obj bitmap@).
+bitmapButtonSetBitmapLabel :: BitmapButton  a -> Bitmap  b ->  IO ()
+bitmapButtonSetBitmapLabel _obj bitmap 
+  = withObjectRef "bitmapButtonSetBitmapLabel" _obj $ \cobj__obj -> 
+    withObjectPtr bitmap $ \cobj_bitmap -> 
+    wxBitmapButton_SetBitmapLabel cobj__obj  cobj_bitmap  
+foreign import ccall "wxBitmapButton_SetBitmapLabel" wxBitmapButton_SetBitmapLabel :: Ptr (TBitmapButton a) -> Ptr (TBitmap b) -> IO ()
+
+-- | usage: (@bitmapButtonSetBitmapSelected obj sel@).
+bitmapButtonSetBitmapSelected :: BitmapButton  a -> Bitmap  b ->  IO ()
+bitmapButtonSetBitmapSelected _obj sel 
+  = withObjectRef "bitmapButtonSetBitmapSelected" _obj $ \cobj__obj -> 
+    withObjectPtr sel $ \cobj_sel -> 
+    wxBitmapButton_SetBitmapSelected cobj__obj  cobj_sel  
+foreign import ccall "wxBitmapButton_SetBitmapSelected" wxBitmapButton_SetBitmapSelected :: Ptr (TBitmapButton a) -> Ptr (TBitmap b) -> IO ()
+
+-- | usage: (@bitmapButtonSetMargins obj xy@).
+bitmapButtonSetMargins :: BitmapButton  a -> Point ->  IO ()
+bitmapButtonSetMargins _obj xy 
+  = withObjectRef "bitmapButtonSetMargins" _obj $ \cobj__obj -> 
+    wxBitmapButton_SetMargins cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxBitmapButton_SetMargins" wxBitmapButton_SetMargins :: Ptr (TBitmapButton a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@bitmapCleanUpHandlers@).
+bitmapCleanUpHandlers ::  IO ()
+bitmapCleanUpHandlers 
+  = wxBitmap_CleanUpHandlers 
+foreign import ccall "wxBitmap_CleanUpHandlers" wxBitmap_CleanUpHandlers :: IO ()
+
+-- | usage: (@bitmapCreate wxdata wxtype widthheight depth@).
+bitmapCreate :: Ptr  a -> Int -> Size -> Int ->  IO (Bitmap  ())
+bitmapCreate _data _type _widthheight _depth 
+  = withManagedBitmapResult $
+    wxBitmap_Create _data  (toCInt _type)  (toCIntSizeW _widthheight) (toCIntSizeH _widthheight)  (toCInt _depth)  
+foreign import ccall "wxBitmap_Create" wxBitmap_Create :: Ptr  a -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TBitmap ()))
+
+-- | usage: (@bitmapCreateDefault@).
+bitmapCreateDefault ::  IO (Bitmap  ())
+bitmapCreateDefault 
+  = withManagedBitmapResult $
+    wxBitmap_CreateDefault 
+foreign import ccall "wxBitmap_CreateDefault" wxBitmap_CreateDefault :: IO (Ptr (TBitmap ()))
+
+-- | usage: (@bitmapCreateEmpty widthheight depth@).
+bitmapCreateEmpty :: Size -> Int ->  IO (Bitmap  ())
+bitmapCreateEmpty _widthheight _depth 
+  = withManagedBitmapResult $
+    wxBitmap_CreateEmpty (toCIntSizeW _widthheight) (toCIntSizeH _widthheight)  (toCInt _depth)  
+foreign import ccall "wxBitmap_CreateEmpty" wxBitmap_CreateEmpty :: CInt -> CInt -> CInt -> IO (Ptr (TBitmap ()))
+
+-- | usage: (@bitmapCreateFromImage image depth@).
+bitmapCreateFromImage :: Image  a -> Int ->  IO (Bitmap  ())
+bitmapCreateFromImage image depth 
+  = withManagedBitmapResult $
+    withObjectPtr image $ \cobj_image -> 
+    wxBitmap_CreateFromImage cobj_image  (toCInt depth)  
+foreign import ccall "wxBitmap_CreateFromImage" wxBitmap_CreateFromImage :: Ptr (TImage a) -> CInt -> IO (Ptr (TBitmap ()))
+
+-- | usage: (@bitmapCreateFromXPM wxdata@).
+bitmapCreateFromXPM :: Bitmap  a ->  IO (Bitmap  ())
+bitmapCreateFromXPM wxdata 
+  = withManagedBitmapResult $
+    withObjectRef "bitmapCreateFromXPM" wxdata $ \cobj_wxdata -> 
+    wxBitmap_CreateFromXPM cobj_wxdata  
+foreign import ccall "wxBitmap_CreateFromXPM" wxBitmap_CreateFromXPM :: Ptr (TBitmap a) -> IO (Ptr (TBitmap ()))
+
+-- | usage: (@bitmapCreateLoad name wxtype@).
+bitmapCreateLoad :: String -> Int ->  IO (Bitmap  ())
+bitmapCreateLoad name wxtype 
+  = withManagedBitmapResult $
+    withStringPtr name $ \cobj_name -> 
+    wxBitmap_CreateLoad cobj_name  (toCInt wxtype)  
+foreign import ccall "wxBitmap_CreateLoad" wxBitmap_CreateLoad :: Ptr (TWxString a) -> CInt -> IO (Ptr (TBitmap ()))
+
+-- | usage: (@bitmapDataObjectCreate bmp@).
+bitmapDataObjectCreate :: Bitmap  a ->  IO (BitmapDataObject  ())
+bitmapDataObjectCreate _bmp 
+  = withObjectResult $
+    withObjectPtr _bmp $ \cobj__bmp -> 
+    wx_BitmapDataObject_Create cobj__bmp  
+foreign import ccall "BitmapDataObject_Create" wx_BitmapDataObject_Create :: Ptr (TBitmap a) -> IO (Ptr (TBitmapDataObject ()))
+
+-- | usage: (@bitmapDataObjectCreateEmpty@).
+bitmapDataObjectCreateEmpty ::  IO (BitmapDataObject  ())
+bitmapDataObjectCreateEmpty 
+  = withObjectResult $
+    wx_BitmapDataObject_CreateEmpty 
+foreign import ccall "BitmapDataObject_CreateEmpty" wx_BitmapDataObject_CreateEmpty :: IO (Ptr (TBitmapDataObject ()))
+
+-- | usage: (@bitmapDataObjectDelete obj@).
+bitmapDataObjectDelete :: BitmapDataObject  a ->  IO ()
+bitmapDataObjectDelete _obj 
+  = withObjectPtr _obj $ \cobj__obj -> 
+    wx_BitmapDataObject_Delete cobj__obj  
+foreign import ccall "BitmapDataObject_Delete" wx_BitmapDataObject_Delete :: Ptr (TBitmapDataObject a) -> IO ()
+
+-- | usage: (@bitmapDataObjectGetBitmap obj@).
+bitmapDataObjectGetBitmap :: BitmapDataObject  a ->  IO (Bitmap  ())
+bitmapDataObjectGetBitmap _obj 
+  = withRefBitmap $ \pref -> 
+    withObjectPtr _obj $ \cobj__obj -> 
+    wx_BitmapDataObject_GetBitmap cobj__obj   pref
+foreign import ccall "BitmapDataObject_GetBitmap" wx_BitmapDataObject_GetBitmap :: Ptr (TBitmapDataObject a) -> Ptr (TBitmap ()) -> IO ()
+
+-- | usage: (@bitmapDataObjectSetBitmap obj bmp@).
+bitmapDataObjectSetBitmap :: BitmapDataObject  a -> Bitmap  b ->  IO ()
+bitmapDataObjectSetBitmap _obj _bmp 
+  = withObjectPtr _obj $ \cobj__obj -> 
+    withObjectPtr _bmp $ \cobj__bmp -> 
+    wx_BitmapDataObject_SetBitmap cobj__obj  cobj__bmp  
+foreign import ccall "BitmapDataObject_SetBitmap" wx_BitmapDataObject_SetBitmap :: Ptr (TBitmapDataObject a) -> Ptr (TBitmap b) -> IO ()
+
+-- | usage: (@bitmapDelete obj@).
+bitmapDelete :: Bitmap  a ->  IO ()
+bitmapDelete
+  = objectDelete
+
+
+-- | usage: (@bitmapFindHandlerByExtension extension wxtype@).
+bitmapFindHandlerByExtension :: Bitmap  a -> Int ->  IO (Ptr  ())
+bitmapFindHandlerByExtension extension wxtype 
+  = withObjectRef "bitmapFindHandlerByExtension" extension $ \cobj_extension -> 
+    wxBitmap_FindHandlerByExtension cobj_extension  (toCInt wxtype)  
+foreign import ccall "wxBitmap_FindHandlerByExtension" wxBitmap_FindHandlerByExtension :: Ptr (TBitmap a) -> CInt -> IO (Ptr  ())
+
+-- | usage: (@bitmapFindHandlerByName name@).
+bitmapFindHandlerByName :: String ->  IO (Ptr  ())
+bitmapFindHandlerByName name 
+  = withStringPtr name $ \cobj_name -> 
+    wxBitmap_FindHandlerByName cobj_name  
+foreign import ccall "wxBitmap_FindHandlerByName" wxBitmap_FindHandlerByName :: Ptr (TWxString a) -> IO (Ptr  ())
+
+-- | usage: (@bitmapFindHandlerByType wxtype@).
+bitmapFindHandlerByType :: Int ->  IO (Ptr  ())
+bitmapFindHandlerByType wxtype 
+  = wxBitmap_FindHandlerByType (toCInt wxtype)  
+foreign import ccall "wxBitmap_FindHandlerByType" wxBitmap_FindHandlerByType :: CInt -> IO (Ptr  ())
+
+-- | usage: (@bitmapGetDepth obj@).
+bitmapGetDepth :: Bitmap  a ->  IO Int
+bitmapGetDepth _obj 
+  = withIntResult $
+    withObjectRef "bitmapGetDepth" _obj $ \cobj__obj -> 
+    wxBitmap_GetDepth cobj__obj  
+foreign import ccall "wxBitmap_GetDepth" wxBitmap_GetDepth :: Ptr (TBitmap a) -> IO CInt
+
+-- | usage: (@bitmapGetHeight obj@).
+bitmapGetHeight :: Bitmap  a ->  IO Int
+bitmapGetHeight _obj 
+  = withIntResult $
+    withObjectRef "bitmapGetHeight" _obj $ \cobj__obj -> 
+    wxBitmap_GetHeight cobj__obj  
+foreign import ccall "wxBitmap_GetHeight" wxBitmap_GetHeight :: Ptr (TBitmap a) -> IO CInt
+
+-- | usage: (@bitmapGetMask obj@).
+bitmapGetMask :: Bitmap  a ->  IO (Mask  ())
+bitmapGetMask _obj 
+  = withObjectResult $
+    withObjectRef "bitmapGetMask" _obj $ \cobj__obj -> 
+    wxBitmap_GetMask cobj__obj  
+foreign import ccall "wxBitmap_GetMask" wxBitmap_GetMask :: Ptr (TBitmap a) -> IO (Ptr (TMask ()))
+
+-- | usage: (@bitmapGetSubBitmap obj xywh@).
+bitmapGetSubBitmap :: Bitmap  a -> Rect ->  IO (Bitmap  ())
+bitmapGetSubBitmap _obj xywh 
+  = withRefBitmap $ \pref -> 
+    withObjectRef "bitmapGetSubBitmap" _obj $ \cobj__obj -> 
+    wxBitmap_GetSubBitmap cobj__obj  (toCIntRectX xywh) (toCIntRectY xywh)(toCIntRectW xywh) (toCIntRectH xywh)   pref
+foreign import ccall "wxBitmap_GetSubBitmap" wxBitmap_GetSubBitmap :: Ptr (TBitmap a) -> CInt -> CInt -> CInt -> CInt -> Ptr (TBitmap ()) -> IO ()
+
+-- | usage: (@bitmapGetWidth obj@).
+bitmapGetWidth :: Bitmap  a ->  IO Int
+bitmapGetWidth _obj 
+  = withIntResult $
+    withObjectRef "bitmapGetWidth" _obj $ \cobj__obj -> 
+    wxBitmap_GetWidth cobj__obj  
+foreign import ccall "wxBitmap_GetWidth" wxBitmap_GetWidth :: Ptr (TBitmap a) -> IO CInt
+
+-- | usage: (@bitmapInitStandardHandlers@).
+bitmapInitStandardHandlers ::  IO ()
+bitmapInitStandardHandlers 
+  = wxBitmap_InitStandardHandlers 
+foreign import ccall "wxBitmap_InitStandardHandlers" wxBitmap_InitStandardHandlers :: IO ()
+
+-- | usage: (@bitmapInsertHandler handler@).
+bitmapInsertHandler :: EvtHandler  a ->  IO ()
+bitmapInsertHandler handler 
+  = withObjectPtr handler $ \cobj_handler -> 
+    wxBitmap_InsertHandler cobj_handler  
+foreign import ccall "wxBitmap_InsertHandler" wxBitmap_InsertHandler :: Ptr (TEvtHandler a) -> IO ()
+
+-- | usage: (@bitmapIsOk obj@).
+bitmapIsOk :: Bitmap  a ->  IO Bool
+bitmapIsOk _obj 
+  = withBoolResult $
+    withObjectRef "bitmapIsOk" _obj $ \cobj__obj -> 
+    wxBitmap_IsOk cobj__obj  
+foreign import ccall "wxBitmap_IsOk" wxBitmap_IsOk :: Ptr (TBitmap a) -> IO CBool
+
+-- | usage: (@bitmapIsStatic self@).
+bitmapIsStatic :: Bitmap  a ->  IO Bool
+bitmapIsStatic self 
+  = withBoolResult $
+    withObjectPtr self $ \cobj_self -> 
+    wxBitmap_IsStatic cobj_self  
+foreign import ccall "wxBitmap_IsStatic" wxBitmap_IsStatic :: Ptr (TBitmap a) -> IO CBool
+
+-- | usage: (@bitmapLoadFile obj name wxtype@).
+bitmapLoadFile :: Bitmap  a -> String -> Int ->  IO Int
+bitmapLoadFile _obj name wxtype 
+  = withIntResult $
+    withObjectRef "bitmapLoadFile" _obj $ \cobj__obj -> 
+    withStringPtr name $ \cobj_name -> 
+    wxBitmap_LoadFile cobj__obj  cobj_name  (toCInt wxtype)  
+foreign import ccall "wxBitmap_LoadFile" wxBitmap_LoadFile :: Ptr (TBitmap a) -> Ptr (TWxString b) -> CInt -> IO CInt
+
+-- | usage: (@bitmapRemoveHandler name@).
+bitmapRemoveHandler :: String ->  IO Bool
+bitmapRemoveHandler name 
+  = withBoolResult $
+    withStringPtr name $ \cobj_name -> 
+    wxBitmap_RemoveHandler cobj_name  
+foreign import ccall "wxBitmap_RemoveHandler" wxBitmap_RemoveHandler :: Ptr (TWxString a) -> IO CBool
+
+-- | usage: (@bitmapSafeDelete self@).
+bitmapSafeDelete :: Bitmap  a ->  IO ()
+bitmapSafeDelete self 
+  = withObjectPtr self $ \cobj_self -> 
+    wxBitmap_SafeDelete cobj_self  
+foreign import ccall "wxBitmap_SafeDelete" wxBitmap_SafeDelete :: Ptr (TBitmap a) -> IO ()
+
+-- | usage: (@bitmapSaveFile obj name wxtype cmap@).
+bitmapSaveFile :: Bitmap  a -> String -> Int -> Palette  d ->  IO Int
+bitmapSaveFile _obj name wxtype cmap 
+  = withIntResult $
+    withObjectRef "bitmapSaveFile" _obj $ \cobj__obj -> 
+    withStringPtr name $ \cobj_name -> 
+    withObjectPtr cmap $ \cobj_cmap -> 
+    wxBitmap_SaveFile cobj__obj  cobj_name  (toCInt wxtype)  cobj_cmap  
+foreign import ccall "wxBitmap_SaveFile" wxBitmap_SaveFile :: Ptr (TBitmap a) -> Ptr (TWxString b) -> CInt -> Ptr (TPalette d) -> IO CInt
+
+-- | usage: (@bitmapSetDepth obj d@).
+bitmapSetDepth :: Bitmap  a -> Int ->  IO ()
+bitmapSetDepth _obj d 
+  = withObjectRef "bitmapSetDepth" _obj $ \cobj__obj -> 
+    wxBitmap_SetDepth cobj__obj  (toCInt d)  
+foreign import ccall "wxBitmap_SetDepth" wxBitmap_SetDepth :: Ptr (TBitmap a) -> CInt -> IO ()
+
+-- | usage: (@bitmapSetHeight obj h@).
+bitmapSetHeight :: Bitmap  a -> Int ->  IO ()
+bitmapSetHeight _obj h 
+  = withObjectRef "bitmapSetHeight" _obj $ \cobj__obj -> 
+    wxBitmap_SetHeight cobj__obj  (toCInt h)  
+foreign import ccall "wxBitmap_SetHeight" wxBitmap_SetHeight :: Ptr (TBitmap a) -> CInt -> IO ()
+
+-- | usage: (@bitmapSetMask obj mask@).
+bitmapSetMask :: Bitmap  a -> Mask  b ->  IO ()
+bitmapSetMask _obj mask 
+  = withObjectRef "bitmapSetMask" _obj $ \cobj__obj -> 
+    withObjectPtr mask $ \cobj_mask -> 
+    wxBitmap_SetMask cobj__obj  cobj_mask  
+foreign import ccall "wxBitmap_SetMask" wxBitmap_SetMask :: Ptr (TBitmap a) -> Ptr (TMask b) -> IO ()
+
+-- | usage: (@bitmapSetWidth obj w@).
+bitmapSetWidth :: Bitmap  a -> Int ->  IO ()
+bitmapSetWidth _obj w 
+  = withObjectRef "bitmapSetWidth" _obj $ \cobj__obj -> 
+    wxBitmap_SetWidth cobj__obj  (toCInt w)  
+foreign import ccall "wxBitmap_SetWidth" wxBitmap_SetWidth :: Ptr (TBitmap a) -> CInt -> IO ()
+
+-- | usage: (@bitmapToggleButtonCreate parent id bmp xywh style@).
+bitmapToggleButtonCreate :: Window  a -> Id -> Bitmap  c -> Rect -> Int ->  IO (BitmapToggleButton  ())
+bitmapToggleButtonCreate parent id _bmp xywh style 
+  = withObjectResult $
+    withObjectPtr parent $ \cobj_parent -> 
+    withObjectPtr _bmp $ \cobj__bmp -> 
+    wxBitmapToggleButton_Create cobj_parent  (toCInt id)  cobj__bmp  (toCIntRectX xywh) (toCIntRectY xywh)(toCIntRectW xywh) (toCIntRectH xywh)  (toCInt style)  
+foreign import ccall "wxBitmapToggleButton_Create" wxBitmapToggleButton_Create :: Ptr (TWindow a) -> CInt -> Ptr (TBitmap c) -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TBitmapToggleButton ()))
+
+-- | usage: (@bitmapToggleButtonEnable obj enable@).
+bitmapToggleButtonEnable :: BitmapToggleButton  a -> Bool ->  IO Bool
+bitmapToggleButtonEnable _obj enable 
+  = withBoolResult $
+    withObjectRef "bitmapToggleButtonEnable" _obj $ \cobj__obj -> 
+    wxBitmapToggleButton_Enable cobj__obj  (toCBool enable)  
+foreign import ccall "wxBitmapToggleButton_Enable" wxBitmapToggleButton_Enable :: Ptr (TBitmapToggleButton a) -> CBool -> IO CBool
+
+-- | usage: (@bitmapToggleButtonGetValue obj@).
+bitmapToggleButtonGetValue :: BitmapToggleButton  a ->  IO Bool
+bitmapToggleButtonGetValue _obj 
+  = withBoolResult $
+    withObjectRef "bitmapToggleButtonGetValue" _obj $ \cobj__obj -> 
+    wxBitmapToggleButton_GetValue cobj__obj  
+foreign import ccall "wxBitmapToggleButton_GetValue" wxBitmapToggleButton_GetValue :: Ptr (TBitmapToggleButton a) -> IO CBool
+
+-- | usage: (@bitmapToggleButtonSetBitmapLabel obj bmp@).
+bitmapToggleButtonSetBitmapLabel :: BitmapToggleButton  a -> Bitmap  b ->  IO ()
+bitmapToggleButtonSetBitmapLabel _obj _bmp 
+  = withObjectRef "bitmapToggleButtonSetBitmapLabel" _obj $ \cobj__obj -> 
+    withObjectPtr _bmp $ \cobj__bmp -> 
+    wxBitmapToggleButton_SetBitmapLabel cobj__obj  cobj__bmp  
+foreign import ccall "wxBitmapToggleButton_SetBitmapLabel" wxBitmapToggleButton_SetBitmapLabel :: Ptr (TBitmapToggleButton a) -> Ptr (TBitmap b) -> IO ()
+
+-- | usage: (@bitmapToggleButtonSetValue obj state@).
+bitmapToggleButtonSetValue :: BitmapToggleButton  a -> Bool ->  IO ()
+bitmapToggleButtonSetValue _obj state 
+  = withObjectRef "bitmapToggleButtonSetValue" _obj $ \cobj__obj -> 
+    wxBitmapToggleButton_SetValue cobj__obj  (toCBool state)  
+foreign import ccall "wxBitmapToggleButton_SetValue" wxBitmapToggleButton_SetValue :: Ptr (TBitmapToggleButton a) -> CBool -> IO ()
+
+-- | usage: (@bookCtrlBaseAddPage obj page text select imageId@).
+bookCtrlBaseAddPage :: BookCtrlBase  a -> Window  b -> String -> Bool -> Int ->  IO Bool
+bookCtrlBaseAddPage _obj _page _text select imageId 
+  = withBoolResult $
+    withObjectRef "bookCtrlBaseAddPage" _obj $ \cobj__obj -> 
+    withObjectPtr _page $ \cobj__page -> 
+    withStringPtr _text $ \cobj__text -> 
+    wxBookCtrlBase_AddPage cobj__obj  cobj__page  cobj__text  (toCBool select)  (toCInt imageId)  
+foreign import ccall "wxBookCtrlBase_AddPage" wxBookCtrlBase_AddPage :: Ptr (TBookCtrlBase a) -> Ptr (TWindow b) -> Ptr (TWxString c) -> CBool -> CInt -> IO CBool
+
+-- | usage: (@bookCtrlBaseAdvanceSelection obj forward@).
+bookCtrlBaseAdvanceSelection :: BookCtrlBase  a -> Bool ->  IO ()
+bookCtrlBaseAdvanceSelection _obj forward 
+  = withObjectRef "bookCtrlBaseAdvanceSelection" _obj $ \cobj__obj -> 
+    wxBookCtrlBase_AdvanceSelection cobj__obj  (toCBool forward)  
+foreign import ccall "wxBookCtrlBase_AdvanceSelection" wxBookCtrlBase_AdvanceSelection :: Ptr (TBookCtrlBase a) -> CBool -> IO ()
+
+-- | usage: (@bookCtrlBaseAssignImageList obj imageList@).
+bookCtrlBaseAssignImageList :: BookCtrlBase  a -> ImageList  b ->  IO ()
+bookCtrlBaseAssignImageList _obj imageList 
+  = withObjectRef "bookCtrlBaseAssignImageList" _obj $ \cobj__obj -> 
+    withObjectPtr imageList $ \cobj_imageList -> 
+    wxBookCtrlBase_AssignImageList cobj__obj  cobj_imageList  
+foreign import ccall "wxBookCtrlBase_AssignImageList" wxBookCtrlBase_AssignImageList :: Ptr (TBookCtrlBase a) -> Ptr (TImageList b) -> IO ()
+
+-- | usage: (@bookCtrlBaseChangeSelection obj page@).
+bookCtrlBaseChangeSelection :: BookCtrlBase  a -> Int ->  IO Int
+bookCtrlBaseChangeSelection _obj page 
+  = withIntResult $
+    withObjectRef "bookCtrlBaseChangeSelection" _obj $ \cobj__obj -> 
+    wxBookCtrlBase_ChangeSelection cobj__obj  (toCInt page)  
+foreign import ccall "wxBookCtrlBase_ChangeSelection" wxBookCtrlBase_ChangeSelection :: Ptr (TBookCtrlBase a) -> CInt -> IO CInt
+
+-- | usage: (@bookCtrlBaseCreateFromDefault obj parent winid xy widthheight style name@).
+bookCtrlBaseCreateFromDefault :: BookCtrlBase  a -> Window  b -> Int -> Point -> Size -> Int -> String ->  IO Bool
+bookCtrlBaseCreateFromDefault _obj _parent winid xy _widthheight style _name 
+  = withBoolResult $
+    withObjectRef "bookCtrlBaseCreateFromDefault" _obj $ \cobj__obj -> 
+    withObjectPtr _parent $ \cobj__parent -> 
+    withStringPtr _name $ \cobj__name -> 
+    wxBookCtrlBase_CreateFromDefault cobj__obj  cobj__parent  (toCInt winid)  (toCIntPointX xy) (toCIntPointY xy)  (toCIntSizeW _widthheight) (toCIntSizeH _widthheight)  (toCInt style)  cobj__name  
+foreign import ccall "wxBookCtrlBase_CreateFromDefault" wxBookCtrlBase_CreateFromDefault :: Ptr (TBookCtrlBase a) -> Ptr (TWindow b) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> Ptr (TWxString g) -> IO CBool
+
+-- | usage: (@bookCtrlBaseDeleteAllPages obj@).
+bookCtrlBaseDeleteAllPages :: BookCtrlBase  a ->  IO Bool
+bookCtrlBaseDeleteAllPages _obj 
+  = withBoolResult $
+    withObjectRef "bookCtrlBaseDeleteAllPages" _obj $ \cobj__obj -> 
+    wxBookCtrlBase_DeleteAllPages cobj__obj  
+foreign import ccall "wxBookCtrlBase_DeleteAllPages" wxBookCtrlBase_DeleteAllPages :: Ptr (TBookCtrlBase a) -> IO CBool
+
+-- | usage: (@bookCtrlBaseDeletePage obj page@).
+bookCtrlBaseDeletePage :: BookCtrlBase  a -> Int ->  IO Bool
+bookCtrlBaseDeletePage _obj page 
+  = withBoolResult $
+    withObjectRef "bookCtrlBaseDeletePage" _obj $ \cobj__obj -> 
+    wxBookCtrlBase_DeletePage cobj__obj  (toCInt page)  
+foreign import ccall "wxBookCtrlBase_DeletePage" wxBookCtrlBase_DeletePage :: Ptr (TBookCtrlBase a) -> CInt -> IO CBool
+
+-- | usage: (@bookCtrlBaseFindPage obj page@).
+bookCtrlBaseFindPage :: BookCtrlBase  a -> Window  b ->  IO Int
+bookCtrlBaseFindPage _obj _page 
+  = withIntResult $
+    withObjectRef "bookCtrlBaseFindPage" _obj $ \cobj__obj -> 
+    withObjectPtr _page $ \cobj__page -> 
+    wxBookCtrlBase_FindPage cobj__obj  cobj__page  
+foreign import ccall "wxBookCtrlBase_FindPage" wxBookCtrlBase_FindPage :: Ptr (TBookCtrlBase a) -> Ptr (TWindow b) -> IO CInt
+
+-- | usage: (@bookCtrlBaseGetCurrentPage obj@).
+bookCtrlBaseGetCurrentPage :: BookCtrlBase  a ->  IO (Window  ())
+bookCtrlBaseGetCurrentPage _obj 
+  = withObjectResult $
+    withObjectRef "bookCtrlBaseGetCurrentPage" _obj $ \cobj__obj -> 
+    wxBookCtrlBase_GetCurrentPage cobj__obj  
+foreign import ccall "wxBookCtrlBase_GetCurrentPage" wxBookCtrlBase_GetCurrentPage :: Ptr (TBookCtrlBase a) -> IO (Ptr (TWindow ()))
+
+-- | usage: (@bookCtrlBaseGetImageList obj@).
+bookCtrlBaseGetImageList :: BookCtrlBase  a ->  IO (ImageList  ())
+bookCtrlBaseGetImageList _obj 
+  = withObjectResult $
+    withObjectRef "bookCtrlBaseGetImageList" _obj $ \cobj__obj -> 
+    wxBookCtrlBase_GetImageList cobj__obj  
+foreign import ccall "wxBookCtrlBase_GetImageList" wxBookCtrlBase_GetImageList :: Ptr (TBookCtrlBase a) -> IO (Ptr (TImageList ()))
+
+-- | usage: (@bookCtrlBaseGetPage obj page@).
+bookCtrlBaseGetPage :: BookCtrlBase  a -> Int ->  IO (Window  ())
+bookCtrlBaseGetPage _obj page 
+  = withObjectResult $
+    withObjectRef "bookCtrlBaseGetPage" _obj $ \cobj__obj -> 
+    wxBookCtrlBase_GetPage cobj__obj  (toCInt page)  
+foreign import ccall "wxBookCtrlBase_GetPage" wxBookCtrlBase_GetPage :: Ptr (TBookCtrlBase a) -> CInt -> IO (Ptr (TWindow ()))
+
+-- | usage: (@bookCtrlBaseGetPageCount obj@).
+bookCtrlBaseGetPageCount :: BookCtrlBase  a ->  IO Int
+bookCtrlBaseGetPageCount _obj 
+  = withIntResult $
+    withObjectRef "bookCtrlBaseGetPageCount" _obj $ \cobj__obj -> 
+    wxBookCtrlBase_GetPageCount cobj__obj  
+foreign import ccall "wxBookCtrlBase_GetPageCount" wxBookCtrlBase_GetPageCount :: Ptr (TBookCtrlBase a) -> IO CInt
+
+-- | usage: (@bookCtrlBaseGetPageImage obj nPage@).
+bookCtrlBaseGetPageImage :: BookCtrlBase  a -> Int ->  IO Int
+bookCtrlBaseGetPageImage _obj nPage 
+  = withIntResult $
+    withObjectRef "bookCtrlBaseGetPageImage" _obj $ \cobj__obj -> 
+    wxBookCtrlBase_GetPageImage cobj__obj  (toCInt nPage)  
+foreign import ccall "wxBookCtrlBase_GetPageImage" wxBookCtrlBase_GetPageImage :: Ptr (TBookCtrlBase a) -> CInt -> IO CInt
+
+-- | usage: (@bookCtrlBaseGetPageText obj nPage@).
+bookCtrlBaseGetPageText :: BookCtrlBase  a -> Int ->  IO (String)
+bookCtrlBaseGetPageText _obj nPage 
+  = withManagedStringResult $
+    withObjectRef "bookCtrlBaseGetPageText" _obj $ \cobj__obj -> 
+    wxBookCtrlBase_GetPageText cobj__obj  (toCInt nPage)  
+foreign import ccall "wxBookCtrlBase_GetPageText" wxBookCtrlBase_GetPageText :: Ptr (TBookCtrlBase a) -> CInt -> IO (Ptr (TWxString ()))
+
+-- | usage: (@bookCtrlBaseGetSelection obj@).
+bookCtrlBaseGetSelection :: BookCtrlBase  a ->  IO Int
+bookCtrlBaseGetSelection _obj 
+  = withIntResult $
+    withObjectRef "bookCtrlBaseGetSelection" _obj $ \cobj__obj -> 
+    wxBookCtrlBase_GetSelection cobj__obj  
+foreign import ccall "wxBookCtrlBase_GetSelection" wxBookCtrlBase_GetSelection :: Ptr (TBookCtrlBase a) -> IO CInt
+
+-- | usage: (@bookCtrlBaseHitTest obj xy flags@).
+bookCtrlBaseHitTest :: BookCtrlBase  a -> Point -> Ptr CInt ->  IO Int
+bookCtrlBaseHitTest _obj xy flags 
+  = withIntResult $
+    withObjectRef "bookCtrlBaseHitTest" _obj $ \cobj__obj -> 
+    wxBookCtrlBase_HitTest cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  flags  
+foreign import ccall "wxBookCtrlBase_HitTest" wxBookCtrlBase_HitTest :: Ptr (TBookCtrlBase a) -> CInt -> CInt -> Ptr CInt -> IO CInt
+
+-- | usage: (@bookCtrlBaseInsertPage obj index page text select imageId@).
+bookCtrlBaseInsertPage :: BookCtrlBase  a -> Int -> Window  c -> String -> Bool -> Int ->  IO Bool
+bookCtrlBaseInsertPage _obj index _page _text select imageId 
+  = withBoolResult $
+    withObjectRef "bookCtrlBaseInsertPage" _obj $ \cobj__obj -> 
+    withObjectPtr _page $ \cobj__page -> 
+    withStringPtr _text $ \cobj__text -> 
+    wxBookCtrlBase_InsertPage cobj__obj  (toCInt index)  cobj__page  cobj__text  (toCBool select)  (toCInt imageId)  
+foreign import ccall "wxBookCtrlBase_InsertPage" wxBookCtrlBase_InsertPage :: Ptr (TBookCtrlBase a) -> CInt -> Ptr (TWindow c) -> Ptr (TWxString d) -> CBool -> CInt -> IO CBool
+
+-- | usage: (@bookCtrlBaseRemovePage obj page@).
+bookCtrlBaseRemovePage :: BookCtrlBase  a -> Int ->  IO Bool
+bookCtrlBaseRemovePage _obj page 
+  = withBoolResult $
+    withObjectRef "bookCtrlBaseRemovePage" _obj $ \cobj__obj -> 
+    wxBookCtrlBase_RemovePage cobj__obj  (toCInt page)  
+foreign import ccall "wxBookCtrlBase_RemovePage" wxBookCtrlBase_RemovePage :: Ptr (TBookCtrlBase a) -> CInt -> IO CBool
+
+-- | usage: (@bookCtrlBaseSetImageList obj imageList@).
+bookCtrlBaseSetImageList :: BookCtrlBase  a -> ImageList  b ->  IO ()
+bookCtrlBaseSetImageList _obj imageList 
+  = withObjectRef "bookCtrlBaseSetImageList" _obj $ \cobj__obj -> 
+    withObjectPtr imageList $ \cobj_imageList -> 
+    wxBookCtrlBase_SetImageList cobj__obj  cobj_imageList  
+foreign import ccall "wxBookCtrlBase_SetImageList" wxBookCtrlBase_SetImageList :: Ptr (TBookCtrlBase a) -> Ptr (TImageList b) -> IO ()
+
+-- | usage: (@bookCtrlBaseSetPageImage obj page image@).
+bookCtrlBaseSetPageImage :: BookCtrlBase  a -> Int -> Int ->  IO Bool
+bookCtrlBaseSetPageImage _obj page image 
+  = withBoolResult $
+    withObjectRef "bookCtrlBaseSetPageImage" _obj $ \cobj__obj -> 
+    wxBookCtrlBase_SetPageImage cobj__obj  (toCInt page)  (toCInt image)  
+foreign import ccall "wxBookCtrlBase_SetPageImage" wxBookCtrlBase_SetPageImage :: Ptr (TBookCtrlBase a) -> CInt -> CInt -> IO CBool
+
+-- | usage: (@bookCtrlBaseSetPageSize obj widthheight@).
+bookCtrlBaseSetPageSize :: BookCtrlBase  a -> Size ->  IO ()
+bookCtrlBaseSetPageSize _obj _widthheight 
+  = withObjectRef "bookCtrlBaseSetPageSize" _obj $ \cobj__obj -> 
+    wxBookCtrlBase_SetPageSize cobj__obj  (toCIntSizeW _widthheight) (toCIntSizeH _widthheight)  
+foreign import ccall "wxBookCtrlBase_SetPageSize" wxBookCtrlBase_SetPageSize :: Ptr (TBookCtrlBase a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@bookCtrlBaseSetPageText obj page text@).
+bookCtrlBaseSetPageText :: BookCtrlBase  a -> Int -> String ->  IO Bool
+bookCtrlBaseSetPageText _obj page _text 
+  = withBoolResult $
+    withObjectRef "bookCtrlBaseSetPageText" _obj $ \cobj__obj -> 
+    withStringPtr _text $ \cobj__text -> 
+    wxBookCtrlBase_SetPageText cobj__obj  (toCInt page)  cobj__text  
+foreign import ccall "wxBookCtrlBase_SetPageText" wxBookCtrlBase_SetPageText :: Ptr (TBookCtrlBase a) -> CInt -> Ptr (TWxString c) -> IO CBool
+
+-- | usage: (@bookCtrlBaseSetSelection obj page@).
+bookCtrlBaseSetSelection :: BookCtrlBase  a -> Int ->  IO Int
+bookCtrlBaseSetSelection _obj page 
+  = withIntResult $
+    withObjectRef "bookCtrlBaseSetSelection" _obj $ \cobj__obj -> 
+    wxBookCtrlBase_SetSelection cobj__obj  (toCInt page)  
+foreign import ccall "wxBookCtrlBase_SetSelection" wxBookCtrlBase_SetSelection :: Ptr (TBookCtrlBase a) -> CInt -> IO CInt
+
+-- | usage: (@bookCtrlEventCreate commandType winid nSel nOldSel@).
+bookCtrlEventCreate :: Int -> Int -> Int -> Int ->  IO (BookCtrlEvent  ())
+bookCtrlEventCreate commandType winid nSel nOldSel 
+  = withObjectResult $
+    wxBookCtrlEvent_Create (toCInt commandType)  (toCInt winid)  (toCInt nSel)  (toCInt nOldSel)  
+foreign import ccall "wxBookCtrlEvent_Create" wxBookCtrlEvent_Create :: CInt -> CInt -> CInt -> CInt -> IO (Ptr (TBookCtrlEvent ()))
+
+-- | usage: (@bookCtrlEventGetOldSelection obj@).
+bookCtrlEventGetOldSelection :: BookCtrlEvent  a ->  IO Int
+bookCtrlEventGetOldSelection _obj 
+  = withIntResult $
+    withObjectRef "bookCtrlEventGetOldSelection" _obj $ \cobj__obj -> 
+    wxBookCtrlEvent_GetOldSelection cobj__obj  
+foreign import ccall "wxBookCtrlEvent_GetOldSelection" wxBookCtrlEvent_GetOldSelection :: Ptr (TBookCtrlEvent a) -> IO CInt
+
+-- | usage: (@bookCtrlEventGetSelection obj@).
+bookCtrlEventGetSelection :: BookCtrlEvent  a ->  IO Int
+bookCtrlEventGetSelection _obj 
+  = withIntResult $
+    withObjectRef "bookCtrlEventGetSelection" _obj $ \cobj__obj -> 
+    wxBookCtrlEvent_GetSelection cobj__obj  
+foreign import ccall "wxBookCtrlEvent_GetSelection" wxBookCtrlEvent_GetSelection :: Ptr (TBookCtrlEvent a) -> IO CInt
+
+-- | usage: (@boolPropertyCreate label name value@).
+boolPropertyCreate :: String -> String -> Bool ->  IO (BoolProperty  ())
+boolPropertyCreate label name value 
+  = withObjectResult $
+    withStringPtr label $ \cobj_label -> 
+    withStringPtr name $ \cobj_name -> 
+    wxBoolProperty_Create cobj_label  cobj_name  (toCBool value)  
+foreign import ccall "wxBoolProperty_Create" wxBoolProperty_Create :: Ptr (TWxString a) -> Ptr (TWxString b) -> CBool -> IO (Ptr (TBoolProperty ()))
+
+-- | usage: (@boxSizerCalcMin obj@).
+boxSizerCalcMin :: BoxSizer  a ->  IO (Size)
+boxSizerCalcMin _obj 
+  = withWxSizeResult $
+    withObjectRef "boxSizerCalcMin" _obj $ \cobj__obj -> 
+    wxBoxSizer_CalcMin cobj__obj  
+foreign import ccall "wxBoxSizer_CalcMin" wxBoxSizer_CalcMin :: Ptr (TBoxSizer a) -> IO (Ptr (TWxSize ()))
+
+-- | usage: (@boxSizerCreate orient@).
+boxSizerCreate :: Int ->  IO (BoxSizer  ())
+boxSizerCreate orient 
+  = withObjectResult $
+    wxBoxSizer_Create (toCInt orient)  
+foreign import ccall "wxBoxSizer_Create" wxBoxSizer_Create :: CInt -> IO (Ptr (TBoxSizer ()))
+
+-- | usage: (@boxSizerGetOrientation obj@).
+boxSizerGetOrientation :: BoxSizer  a ->  IO Int
+boxSizerGetOrientation _obj 
+  = withIntResult $
+    withObjectRef "boxSizerGetOrientation" _obj $ \cobj__obj -> 
+    wxBoxSizer_GetOrientation cobj__obj  
+foreign import ccall "wxBoxSizer_GetOrientation" wxBoxSizer_GetOrientation :: Ptr (TBoxSizer a) -> IO CInt
+
+-- | usage: (@boxSizerRecalcSizes obj@).
+boxSizerRecalcSizes :: BoxSizer  a ->  IO ()
+boxSizerRecalcSizes _obj 
+  = withObjectRef "boxSizerRecalcSizes" _obj $ \cobj__obj -> 
+    wxBoxSizer_RecalcSizes cobj__obj  
+foreign import ccall "wxBoxSizer_RecalcSizes" wxBoxSizer_RecalcSizes :: Ptr (TBoxSizer a) -> IO ()
+
+-- | usage: (@brushAssign obj brush@).
+brushAssign :: Brush  a -> Brush  b ->  IO ()
+brushAssign _obj brush 
+  = withObjectRef "brushAssign" _obj $ \cobj__obj -> 
+    withObjectPtr brush $ \cobj_brush -> 
+    wxBrush_Assign cobj__obj  cobj_brush  
+foreign import ccall "wxBrush_Assign" wxBrush_Assign :: Ptr (TBrush a) -> Ptr (TBrush b) -> IO ()
+
+-- | usage: (@brushCreateDefault@).
+brushCreateDefault ::  IO (Brush  ())
+brushCreateDefault 
+  = withManagedBrushResult $
+    wxBrush_CreateDefault 
+foreign import ccall "wxBrush_CreateDefault" wxBrush_CreateDefault :: IO (Ptr (TBrush ()))
+
+-- | usage: (@brushCreateFromBitmap bitmap@).
+brushCreateFromBitmap :: Bitmap  a ->  IO (Brush  ())
+brushCreateFromBitmap bitmap 
+  = withManagedBrushResult $
+    withObjectPtr bitmap $ \cobj_bitmap -> 
+    wxBrush_CreateFromBitmap cobj_bitmap  
+foreign import ccall "wxBrush_CreateFromBitmap" wxBrush_CreateFromBitmap :: Ptr (TBitmap a) -> IO (Ptr (TBrush ()))
+
+-- | usage: (@brushCreateFromColour col style@).
+brushCreateFromColour :: Color -> Int ->  IO (Brush  ())
+brushCreateFromColour col style 
+  = withManagedBrushResult $
+    withColourPtr col $ \cobj_col -> 
+    wxBrush_CreateFromColour cobj_col  (toCInt style)  
+foreign import ccall "wxBrush_CreateFromColour" wxBrush_CreateFromColour :: Ptr (TColour a) -> CInt -> IO (Ptr (TBrush ()))
+
+-- | usage: (@brushCreateFromStock id@).
+brushCreateFromStock :: Id ->  IO (Brush  ())
+brushCreateFromStock id 
+  = withManagedBrushResult $
+    wxBrush_CreateFromStock (toCInt id)  
+foreign import ccall "wxBrush_CreateFromStock" wxBrush_CreateFromStock :: CInt -> IO (Ptr (TBrush ()))
+
+-- | usage: (@brushDelete obj@).
+brushDelete :: Brush  a ->  IO ()
+brushDelete
+  = objectDelete
+
+
+-- | usage: (@brushGetColour obj@).
+brushGetColour :: Brush  a ->  IO (Color)
+brushGetColour _obj 
+  = withRefColour $ \pref -> 
+    withObjectRef "brushGetColour" _obj $ \cobj__obj -> 
+    wxBrush_GetColour cobj__obj   pref
+foreign import ccall "wxBrush_GetColour" wxBrush_GetColour :: Ptr (TBrush a) -> Ptr (TColour ()) -> IO ()
+
+-- | usage: (@brushGetStipple obj@).
+brushGetStipple :: Brush  a ->  IO (Bitmap  ())
+brushGetStipple _obj 
+  = withRefBitmap $ \pref -> 
+    withObjectRef "brushGetStipple" _obj $ \cobj__obj -> 
+    wxBrush_GetStipple cobj__obj   pref
+foreign import ccall "wxBrush_GetStipple" wxBrush_GetStipple :: Ptr (TBrush a) -> Ptr (TBitmap ()) -> IO ()
+
+-- | usage: (@brushGetStyle obj@).
+brushGetStyle :: Brush  a ->  IO Int
+brushGetStyle _obj 
+  = withIntResult $
+    withObjectRef "brushGetStyle" _obj $ \cobj__obj -> 
+    wxBrush_GetStyle cobj__obj  
+foreign import ccall "wxBrush_GetStyle" wxBrush_GetStyle :: Ptr (TBrush a) -> IO CInt
+
+-- | usage: (@brushIsEqual obj brush@).
+brushIsEqual :: Brush  a -> Brush  b ->  IO Bool
+brushIsEqual _obj brush 
+  = withBoolResult $
+    withObjectRef "brushIsEqual" _obj $ \cobj__obj -> 
+    withObjectPtr brush $ \cobj_brush -> 
+    wxBrush_IsEqual cobj__obj  cobj_brush  
+foreign import ccall "wxBrush_IsEqual" wxBrush_IsEqual :: Ptr (TBrush a) -> Ptr (TBrush b) -> IO CBool
+
+-- | usage: (@brushIsOk obj@).
+brushIsOk :: Brush  a ->  IO Bool
+brushIsOk _obj 
+  = withBoolResult $
+    withObjectRef "brushIsOk" _obj $ \cobj__obj -> 
+    wxBrush_IsOk cobj__obj  
+foreign import ccall "wxBrush_IsOk" wxBrush_IsOk :: Ptr (TBrush a) -> IO CBool
+
+-- | usage: (@brushIsStatic self@).
+brushIsStatic :: Brush  a ->  IO Bool
+brushIsStatic self 
+  = withBoolResult $
+    withObjectPtr self $ \cobj_self -> 
+    wxBrush_IsStatic cobj_self  
+foreign import ccall "wxBrush_IsStatic" wxBrush_IsStatic :: Ptr (TBrush a) -> IO CBool
+
+-- | usage: (@brushSafeDelete self@).
+brushSafeDelete :: Brush  a ->  IO ()
+brushSafeDelete self 
+  = withObjectPtr self $ \cobj_self -> 
+    wxBrush_SafeDelete cobj_self  
+foreign import ccall "wxBrush_SafeDelete" wxBrush_SafeDelete :: Ptr (TBrush a) -> IO ()
+
+-- | usage: (@brushSetColour obj col@).
+brushSetColour :: Brush  a -> Color ->  IO ()
+brushSetColour _obj col 
+  = withObjectRef "brushSetColour" _obj $ \cobj__obj -> 
+    withColourPtr col $ \cobj_col -> 
+    wxBrush_SetColour cobj__obj  cobj_col  
+foreign import ccall "wxBrush_SetColour" wxBrush_SetColour :: Ptr (TBrush a) -> Ptr (TColour b) -> IO ()
+
+-- | usage: (@brushSetColourSingle obj r g b@).
+brushSetColourSingle :: Brush  a -> Char -> Char -> Char ->  IO ()
+brushSetColourSingle _obj r g b 
+  = withObjectRef "brushSetColourSingle" _obj $ \cobj__obj -> 
+    wxBrush_SetColourSingle cobj__obj  (toCWchar r)  (toCWchar g)  (toCWchar b)  
+foreign import ccall "wxBrush_SetColourSingle" wxBrush_SetColourSingle :: Ptr (TBrush a) -> CWchar -> CWchar -> CWchar -> IO ()
+
+-- | usage: (@brushSetStipple obj stipple@).
+brushSetStipple :: Brush  a -> Bitmap  b ->  IO ()
+brushSetStipple _obj stipple 
+  = withObjectRef "brushSetStipple" _obj $ \cobj__obj -> 
+    withObjectPtr stipple $ \cobj_stipple -> 
+    wxBrush_SetStipple cobj__obj  cobj_stipple  
+foreign import ccall "wxBrush_SetStipple" wxBrush_SetStipple :: Ptr (TBrush a) -> Ptr (TBitmap b) -> IO ()
+
+-- | usage: (@brushSetStyle obj style@).
+brushSetStyle :: Brush  a -> Int ->  IO ()
+brushSetStyle _obj style 
+  = withObjectRef "brushSetStyle" _obj $ \cobj__obj -> 
+    wxBrush_SetStyle cobj__obj  (toCInt style)  
+foreign import ccall "wxBrush_SetStyle" wxBrush_SetStyle :: Ptr (TBrush a) -> CInt -> IO ()
+
+-- | usage: (@bufferedDCCreateByDCAndBitmap dc bitmap style@).
+bufferedDCCreateByDCAndBitmap :: DC  a -> Bitmap  b -> Int ->  IO (BufferedDC  ())
+bufferedDCCreateByDCAndBitmap dc bitmap style 
+  = withObjectResult $
+    withObjectPtr dc $ \cobj_dc -> 
+    withObjectPtr bitmap $ \cobj_bitmap -> 
+    wxBufferedDC_CreateByDCAndBitmap cobj_dc  cobj_bitmap  (toCInt style)  
+foreign import ccall "wxBufferedDC_CreateByDCAndBitmap" wxBufferedDC_CreateByDCAndBitmap :: Ptr (TDC a) -> Ptr (TBitmap b) -> CInt -> IO (Ptr (TBufferedDC ()))
+
+-- | usage: (@bufferedDCCreateByDCAndSize dc widthhight style@).
+bufferedDCCreateByDCAndSize :: DC  a -> Size -> Int ->  IO (BufferedDC  ())
+bufferedDCCreateByDCAndSize dc widthhight style 
+  = withObjectResult $
+    withObjectPtr dc $ \cobj_dc -> 
+    wxBufferedDC_CreateByDCAndSize cobj_dc  (toCIntSizeW widthhight) (toCIntSizeH widthhight)  (toCInt style)  
+foreign import ccall "wxBufferedDC_CreateByDCAndSize" wxBufferedDC_CreateByDCAndSize :: Ptr (TDC a) -> CInt -> CInt -> CInt -> IO (Ptr (TBufferedDC ()))
+
+-- | usage: (@bufferedDCDelete self@).
+bufferedDCDelete :: BufferedDC  a ->  IO ()
+bufferedDCDelete
+  = objectDelete
+
+
+-- | usage: (@bufferedPaintDCCreate window style@).
+bufferedPaintDCCreate :: Window  a -> Int ->  IO (BufferedPaintDC  ())
+bufferedPaintDCCreate window style 
+  = withObjectResult $
+    withObjectPtr window $ \cobj_window -> 
+    wxBufferedPaintDC_Create cobj_window  (toCInt style)  
+foreign import ccall "wxBufferedPaintDC_Create" wxBufferedPaintDC_Create :: Ptr (TWindow a) -> CInt -> IO (Ptr (TBufferedPaintDC ()))
+
+-- | usage: (@bufferedPaintDCCreateWithBitmap window bitmap style@).
+bufferedPaintDCCreateWithBitmap :: Window  a -> Bitmap  b -> Int ->  IO (BufferedPaintDC  ())
+bufferedPaintDCCreateWithBitmap window bitmap style 
+  = withObjectResult $
+    withObjectPtr window $ \cobj_window -> 
+    withObjectPtr bitmap $ \cobj_bitmap -> 
+    wxBufferedPaintDC_CreateWithBitmap cobj_window  cobj_bitmap  (toCInt style)  
+foreign import ccall "wxBufferedPaintDC_CreateWithBitmap" wxBufferedPaintDC_CreateWithBitmap :: Ptr (TWindow a) -> Ptr (TBitmap b) -> CInt -> IO (Ptr (TBufferedPaintDC ()))
+
+-- | usage: (@bufferedPaintDCDelete self@).
+bufferedPaintDCDelete :: BufferedPaintDC  a ->  IO ()
+bufferedPaintDCDelete
+  = objectDelete
+
+
+-- | usage: (@busyCursorCreate@).
+busyCursorCreate ::  IO (BusyCursor  ())
+busyCursorCreate 
+  = withObjectResult $
+    wxBusyCursor_Create 
+foreign import ccall "wxBusyCursor_Create" wxBusyCursor_Create :: IO (Ptr (TBusyCursor ()))
+
+-- | usage: (@busyCursorCreateWithCursor cur@).
+busyCursorCreateWithCursor :: BusyCursor  a ->  IO (Ptr  ())
+busyCursorCreateWithCursor _cur 
+  = withObjectRef "busyCursorCreateWithCursor" _cur $ \cobj__cur -> 
+    wxBusyCursor_CreateWithCursor cobj__cur  
+foreign import ccall "wxBusyCursor_CreateWithCursor" wxBusyCursor_CreateWithCursor :: Ptr (TBusyCursor a) -> IO (Ptr  ())
+
+-- | usage: (@busyCursorDelete obj@).
+busyCursorDelete :: BusyCursor  a ->  IO ()
+busyCursorDelete _obj 
+  = withObjectRef "busyCursorDelete" _obj $ \cobj__obj -> 
+    wxBusyCursor_Delete cobj__obj  
+foreign import ccall "wxBusyCursor_Delete" wxBusyCursor_Delete :: Ptr (TBusyCursor a) -> IO ()
+
+-- | usage: (@busyInfoCreate txt@).
+busyInfoCreate :: String ->  IO (BusyInfo  ())
+busyInfoCreate _txt 
+  = withObjectResult $
+    withStringPtr _txt $ \cobj__txt -> 
+    wxBusyInfo_Create cobj__txt  
+foreign import ccall "wxBusyInfo_Create" wxBusyInfo_Create :: Ptr (TWxString a) -> IO (Ptr (TBusyInfo ()))
+
+-- | usage: (@busyInfoDelete obj@).
+busyInfoDelete :: BusyInfo  a ->  IO ()
+busyInfoDelete _obj 
+  = withObjectRef "busyInfoDelete" _obj $ \cobj__obj -> 
+    wxBusyInfo_Delete cobj__obj  
+foreign import ccall "wxBusyInfo_Delete" wxBusyInfo_Delete :: Ptr (TBusyInfo a) -> IO ()
+
+-- | usage: (@buttonCreate prt id txt lfttopwdthgt stl@).
+buttonCreate :: Window  a -> Id -> String -> Rect -> Style ->  IO (Button  ())
+buttonCreate _prt _id _txt _lfttopwdthgt _stl 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    withStringPtr _txt $ \cobj__txt -> 
+    wxButton_Create cobj__prt  (toCInt _id)  cobj__txt  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
+foreign import ccall "wxButton_Create" wxButton_Create :: Ptr (TWindow a) -> CInt -> Ptr (TWxString c) -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TButton ()))
+
+-- | usage: (@buttonSetBackgroundColour obj colour@).
+buttonSetBackgroundColour :: Button  a -> Color ->  IO Int
+buttonSetBackgroundColour _obj colour 
+  = withIntResult $
+    withObjectRef "buttonSetBackgroundColour" _obj $ \cobj__obj -> 
+    withColourPtr colour $ \cobj_colour -> 
+    wxButton_SetBackgroundColour cobj__obj  cobj_colour  
+foreign import ccall "wxButton_SetBackgroundColour" wxButton_SetBackgroundColour :: Ptr (TButton a) -> Ptr (TColour b) -> IO CInt
+
+-- | usage: (@buttonSetDefault obj@).
+buttonSetDefault :: Button  a ->  IO ()
+buttonSetDefault _obj 
+  = withObjectRef "buttonSetDefault" _obj $ \cobj__obj -> 
+    wxButton_SetDefault cobj__obj  
+foreign import ccall "wxButton_SetDefault" wxButton_SetDefault :: Ptr (TButton a) -> IO ()
+
+-- | usage: (@cFree ptr@).
+cFree :: Ptr  a ->  IO ()
+cFree _ptr 
+  = wx_wxCFree _ptr  
+foreign import ccall "wxCFree" wx_wxCFree :: Ptr  a -> IO ()
+
+-- | usage: (@calculateLayoutEventCreate id@).
+calculateLayoutEventCreate :: Id ->  IO (CalculateLayoutEvent  ())
+calculateLayoutEventCreate id 
+  = withObjectResult $
+    wxCalculateLayoutEvent_Create (toCInt id)  
+foreign import ccall "wxCalculateLayoutEvent_Create" wxCalculateLayoutEvent_Create :: CInt -> IO (Ptr (TCalculateLayoutEvent ()))
+
+-- | usage: (@calculateLayoutEventGetFlags obj@).
+calculateLayoutEventGetFlags :: CalculateLayoutEvent  a ->  IO Int
+calculateLayoutEventGetFlags _obj 
+  = withIntResult $
+    withObjectRef "calculateLayoutEventGetFlags" _obj $ \cobj__obj -> 
+    wxCalculateLayoutEvent_GetFlags cobj__obj  
+foreign import ccall "wxCalculateLayoutEvent_GetFlags" wxCalculateLayoutEvent_GetFlags :: Ptr (TCalculateLayoutEvent a) -> IO CInt
+
+-- | usage: (@calculateLayoutEventGetRect obj@).
+calculateLayoutEventGetRect :: CalculateLayoutEvent  a ->  IO (Rect)
+calculateLayoutEventGetRect _obj 
+  = withWxRectResult $
+    withObjectRef "calculateLayoutEventGetRect" _obj $ \cobj__obj -> 
+    wxCalculateLayoutEvent_GetRect cobj__obj  
+foreign import ccall "wxCalculateLayoutEvent_GetRect" wxCalculateLayoutEvent_GetRect :: Ptr (TCalculateLayoutEvent a) -> IO (Ptr (TWxRect ()))
+
+-- | usage: (@calculateLayoutEventSetFlags obj flags@).
+calculateLayoutEventSetFlags :: CalculateLayoutEvent  a -> Int ->  IO ()
+calculateLayoutEventSetFlags _obj flags 
+  = withObjectRef "calculateLayoutEventSetFlags" _obj $ \cobj__obj -> 
+    wxCalculateLayoutEvent_SetFlags cobj__obj  (toCInt flags)  
+foreign import ccall "wxCalculateLayoutEvent_SetFlags" wxCalculateLayoutEvent_SetFlags :: Ptr (TCalculateLayoutEvent a) -> CInt -> IO ()
+
+-- | usage: (@calculateLayoutEventSetRect obj xywh@).
+calculateLayoutEventSetRect :: CalculateLayoutEvent  a -> Rect ->  IO ()
+calculateLayoutEventSetRect _obj xywh 
+  = withObjectRef "calculateLayoutEventSetRect" _obj $ \cobj__obj -> 
+    wxCalculateLayoutEvent_SetRect cobj__obj  (toCIntRectX xywh) (toCIntRectY xywh)(toCIntRectW xywh) (toCIntRectH xywh)  
+foreign import ccall "wxCalculateLayoutEvent_SetRect" wxCalculateLayoutEvent_SetRect :: Ptr (TCalculateLayoutEvent a) -> CInt -> CInt -> CInt -> CInt -> IO ()
+
+-- | usage: (@calendarCtrlCreate prt id dat lfttopwdthgt stl@).
+calendarCtrlCreate :: Window  a -> Id -> DateTime  c -> Rect -> Style ->  IO (CalendarCtrl  ())
+calendarCtrlCreate _prt _id _dat _lfttopwdthgt _stl 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    withObjectPtr _dat $ \cobj__dat -> 
+    wxCalendarCtrl_Create cobj__prt  (toCInt _id)  cobj__dat  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
+foreign import ccall "wxCalendarCtrl_Create" wxCalendarCtrl_Create :: Ptr (TWindow a) -> CInt -> Ptr (TDateTime c) -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TCalendarCtrl ()))
+
+-- | usage: (@calendarCtrlEnableHolidayDisplay obj display@).
+calendarCtrlEnableHolidayDisplay :: CalendarCtrl  a -> Int ->  IO ()
+calendarCtrlEnableHolidayDisplay _obj display 
+  = withObjectRef "calendarCtrlEnableHolidayDisplay" _obj $ \cobj__obj -> 
+    wxCalendarCtrl_EnableHolidayDisplay cobj__obj  (toCInt display)  
+foreign import ccall "wxCalendarCtrl_EnableHolidayDisplay" wxCalendarCtrl_EnableHolidayDisplay :: Ptr (TCalendarCtrl a) -> CInt -> IO ()
+
+-- | usage: (@calendarCtrlEnableMonthChange obj enable@).
+calendarCtrlEnableMonthChange :: CalendarCtrl  a -> Bool ->  IO ()
+calendarCtrlEnableMonthChange _obj enable 
+  = withObjectRef "calendarCtrlEnableMonthChange" _obj $ \cobj__obj -> 
+    wxCalendarCtrl_EnableMonthChange cobj__obj  (toCBool enable)  
+foreign import ccall "wxCalendarCtrl_EnableMonthChange" wxCalendarCtrl_EnableMonthChange :: Ptr (TCalendarCtrl a) -> CBool -> IO ()
+
+-- | usage: (@calendarCtrlGetAttr obj day@).
+calendarCtrlGetAttr :: CalendarCtrl  a -> Int ->  IO (Ptr  ())
+calendarCtrlGetAttr _obj day 
+  = withObjectRef "calendarCtrlGetAttr" _obj $ \cobj__obj -> 
+    wxCalendarCtrl_GetAttr cobj__obj  (toCInt day)  
+foreign import ccall "wxCalendarCtrl_GetAttr" wxCalendarCtrl_GetAttr :: Ptr (TCalendarCtrl a) -> CInt -> IO (Ptr  ())
+
+-- | usage: (@calendarCtrlGetDate obj date@).
+calendarCtrlGetDate :: CalendarCtrl  a -> Ptr  b ->  IO ()
+calendarCtrlGetDate _obj date 
+  = withObjectRef "calendarCtrlGetDate" _obj $ \cobj__obj -> 
+    wxCalendarCtrl_GetDate cobj__obj  date  
+foreign import ccall "wxCalendarCtrl_GetDate" wxCalendarCtrl_GetDate :: Ptr (TCalendarCtrl a) -> Ptr  b -> IO ()
+
+-- | usage: (@calendarCtrlGetHeaderColourBg obj@).
+calendarCtrlGetHeaderColourBg :: CalendarCtrl  a ->  IO (Color)
+calendarCtrlGetHeaderColourBg _obj 
+  = withRefColour $ \pref -> 
+    withObjectRef "calendarCtrlGetHeaderColourBg" _obj $ \cobj__obj -> 
+    wxCalendarCtrl_GetHeaderColourBg cobj__obj   pref
+foreign import ccall "wxCalendarCtrl_GetHeaderColourBg" wxCalendarCtrl_GetHeaderColourBg :: Ptr (TCalendarCtrl a) -> Ptr (TColour ()) -> IO ()
+
+-- | usage: (@calendarCtrlGetHeaderColourFg obj@).
+calendarCtrlGetHeaderColourFg :: CalendarCtrl  a ->  IO (Color)
+calendarCtrlGetHeaderColourFg _obj 
+  = withRefColour $ \pref -> 
+    withObjectRef "calendarCtrlGetHeaderColourFg" _obj $ \cobj__obj -> 
+    wxCalendarCtrl_GetHeaderColourFg cobj__obj   pref
+foreign import ccall "wxCalendarCtrl_GetHeaderColourFg" wxCalendarCtrl_GetHeaderColourFg :: Ptr (TCalendarCtrl a) -> Ptr (TColour ()) -> IO ()
+
+-- | usage: (@calendarCtrlGetHighlightColourBg obj@).
+calendarCtrlGetHighlightColourBg :: CalendarCtrl  a ->  IO (Color)
+calendarCtrlGetHighlightColourBg _obj 
+  = withRefColour $ \pref -> 
+    withObjectRef "calendarCtrlGetHighlightColourBg" _obj $ \cobj__obj -> 
+    wxCalendarCtrl_GetHighlightColourBg cobj__obj   pref
+foreign import ccall "wxCalendarCtrl_GetHighlightColourBg" wxCalendarCtrl_GetHighlightColourBg :: Ptr (TCalendarCtrl a) -> Ptr (TColour ()) -> IO ()
+
+-- | usage: (@calendarCtrlGetHighlightColourFg obj@).
+calendarCtrlGetHighlightColourFg :: CalendarCtrl  a ->  IO (Color)
+calendarCtrlGetHighlightColourFg _obj 
+  = withRefColour $ \pref -> 
+    withObjectRef "calendarCtrlGetHighlightColourFg" _obj $ \cobj__obj -> 
+    wxCalendarCtrl_GetHighlightColourFg cobj__obj   pref
+foreign import ccall "wxCalendarCtrl_GetHighlightColourFg" wxCalendarCtrl_GetHighlightColourFg :: Ptr (TCalendarCtrl a) -> Ptr (TColour ()) -> IO ()
+
+-- | usage: (@calendarCtrlGetHolidayColourBg obj@).
+calendarCtrlGetHolidayColourBg :: CalendarCtrl  a ->  IO (Color)
+calendarCtrlGetHolidayColourBg _obj 
+  = withRefColour $ \pref -> 
+    withObjectRef "calendarCtrlGetHolidayColourBg" _obj $ \cobj__obj -> 
+    wxCalendarCtrl_GetHolidayColourBg cobj__obj   pref
+foreign import ccall "wxCalendarCtrl_GetHolidayColourBg" wxCalendarCtrl_GetHolidayColourBg :: Ptr (TCalendarCtrl a) -> Ptr (TColour ()) -> IO ()
+
+-- | usage: (@calendarCtrlGetHolidayColourFg obj@).
+calendarCtrlGetHolidayColourFg :: CalendarCtrl  a ->  IO (Color)
+calendarCtrlGetHolidayColourFg _obj 
+  = withRefColour $ \pref -> 
+    withObjectRef "calendarCtrlGetHolidayColourFg" _obj $ \cobj__obj -> 
+    wxCalendarCtrl_GetHolidayColourFg cobj__obj   pref
+foreign import ccall "wxCalendarCtrl_GetHolidayColourFg" wxCalendarCtrl_GetHolidayColourFg :: Ptr (TCalendarCtrl a) -> Ptr (TColour ()) -> IO ()
+
+-- | usage: (@calendarCtrlHitTest obj xy date wd@).
+calendarCtrlHitTest :: CalendarCtrl  a -> Point -> Ptr  c -> Ptr  d ->  IO Int
+calendarCtrlHitTest _obj xy date wd 
+  = withIntResult $
+    withObjectRef "calendarCtrlHitTest" _obj $ \cobj__obj -> 
+    wxCalendarCtrl_HitTest cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  date  wd  
+foreign import ccall "wxCalendarCtrl_HitTest" wxCalendarCtrl_HitTest :: Ptr (TCalendarCtrl a) -> CInt -> CInt -> Ptr  c -> Ptr  d -> IO CInt
+
+-- | usage: (@calendarCtrlResetAttr obj day@).
+calendarCtrlResetAttr :: CalendarCtrl  a -> Int ->  IO ()
+calendarCtrlResetAttr _obj day 
+  = withObjectRef "calendarCtrlResetAttr" _obj $ \cobj__obj -> 
+    wxCalendarCtrl_ResetAttr cobj__obj  (toCInt day)  
+foreign import ccall "wxCalendarCtrl_ResetAttr" wxCalendarCtrl_ResetAttr :: Ptr (TCalendarCtrl a) -> CInt -> IO ()
+
+-- | usage: (@calendarCtrlSetAttr obj day attr@).
+calendarCtrlSetAttr :: CalendarCtrl  a -> Int -> Ptr  c ->  IO ()
+calendarCtrlSetAttr _obj day attr 
+  = withObjectRef "calendarCtrlSetAttr" _obj $ \cobj__obj -> 
+    wxCalendarCtrl_SetAttr cobj__obj  (toCInt day)  attr  
+foreign import ccall "wxCalendarCtrl_SetAttr" wxCalendarCtrl_SetAttr :: Ptr (TCalendarCtrl a) -> CInt -> Ptr  c -> IO ()
+
+-- | usage: (@calendarCtrlSetDate obj date@).
+calendarCtrlSetDate :: CalendarCtrl  a -> Ptr  b ->  IO ()
+calendarCtrlSetDate _obj date 
+  = withObjectRef "calendarCtrlSetDate" _obj $ \cobj__obj -> 
+    wxCalendarCtrl_SetDate cobj__obj  date  
+foreign import ccall "wxCalendarCtrl_SetDate" wxCalendarCtrl_SetDate :: Ptr (TCalendarCtrl a) -> Ptr  b -> IO ()
+
+-- | usage: (@calendarCtrlSetHeaderColours obj colFg colBg@).
+calendarCtrlSetHeaderColours :: CalendarCtrl  a -> Ptr  b -> Ptr  c ->  IO ()
+calendarCtrlSetHeaderColours _obj colFg colBg 
+  = withObjectRef "calendarCtrlSetHeaderColours" _obj $ \cobj__obj -> 
+    wxCalendarCtrl_SetHeaderColours cobj__obj  colFg  colBg  
+foreign import ccall "wxCalendarCtrl_SetHeaderColours" wxCalendarCtrl_SetHeaderColours :: Ptr (TCalendarCtrl a) -> Ptr  b -> Ptr  c -> IO ()
+
+-- | usage: (@calendarCtrlSetHighlightColours obj colFg colBg@).
+calendarCtrlSetHighlightColours :: CalendarCtrl  a -> Ptr  b -> Ptr  c ->  IO ()
+calendarCtrlSetHighlightColours _obj colFg colBg 
+  = withObjectRef "calendarCtrlSetHighlightColours" _obj $ \cobj__obj -> 
+    wxCalendarCtrl_SetHighlightColours cobj__obj  colFg  colBg  
+foreign import ccall "wxCalendarCtrl_SetHighlightColours" wxCalendarCtrl_SetHighlightColours :: Ptr (TCalendarCtrl a) -> Ptr  b -> Ptr  c -> IO ()
+
+-- | usage: (@calendarCtrlSetHoliday obj day@).
+calendarCtrlSetHoliday :: CalendarCtrl  a -> Int ->  IO ()
+calendarCtrlSetHoliday _obj day 
+  = withObjectRef "calendarCtrlSetHoliday" _obj $ \cobj__obj -> 
+    wxCalendarCtrl_SetHoliday cobj__obj  (toCInt day)  
+foreign import ccall "wxCalendarCtrl_SetHoliday" wxCalendarCtrl_SetHoliday :: Ptr (TCalendarCtrl a) -> CInt -> IO ()
+
+-- | usage: (@calendarCtrlSetHolidayColours obj colFg colBg@).
+calendarCtrlSetHolidayColours :: CalendarCtrl  a -> Ptr  b -> Ptr  c ->  IO ()
+calendarCtrlSetHolidayColours _obj colFg colBg 
+  = withObjectRef "calendarCtrlSetHolidayColours" _obj $ \cobj__obj -> 
+    wxCalendarCtrl_SetHolidayColours cobj__obj  colFg  colBg  
+foreign import ccall "wxCalendarCtrl_SetHolidayColours" wxCalendarCtrl_SetHolidayColours :: Ptr (TCalendarCtrl a) -> Ptr  b -> Ptr  c -> IO ()
+
+-- | usage: (@calendarDateAttrCreate ctxt cbck cbrd fnt brd@).
+calendarDateAttrCreate :: Ptr  a -> Ptr  b -> Ptr  c -> Ptr  d -> Int ->  IO (CalendarDateAttr  ())
+calendarDateAttrCreate _ctxt _cbck _cbrd _fnt _brd 
+  = withObjectResult $
+    wxCalendarDateAttr_Create _ctxt  _cbck  _cbrd  _fnt  (toCInt _brd)  
+foreign import ccall "wxCalendarDateAttr_Create" wxCalendarDateAttr_Create :: Ptr  a -> Ptr  b -> Ptr  c -> Ptr  d -> CInt -> IO (Ptr (TCalendarDateAttr ()))
+
+-- | usage: (@calendarDateAttrCreateDefault@).
+calendarDateAttrCreateDefault ::  IO (CalendarDateAttr  ())
+calendarDateAttrCreateDefault 
+  = withObjectResult $
+    wxCalendarDateAttr_CreateDefault 
+foreign import ccall "wxCalendarDateAttr_CreateDefault" wxCalendarDateAttr_CreateDefault :: IO (Ptr (TCalendarDateAttr ()))
+
+-- | usage: (@calendarDateAttrDelete obj@).
+calendarDateAttrDelete :: CalendarDateAttr  a ->  IO ()
+calendarDateAttrDelete _obj 
+  = withObjectRef "calendarDateAttrDelete" _obj $ \cobj__obj -> 
+    wxCalendarDateAttr_Delete cobj__obj  
+foreign import ccall "wxCalendarDateAttr_Delete" wxCalendarDateAttr_Delete :: Ptr (TCalendarDateAttr a) -> IO ()
+
+-- | usage: (@calendarDateAttrGetBackgroundColour obj@).
+calendarDateAttrGetBackgroundColour :: CalendarDateAttr  a ->  IO (Color)
+calendarDateAttrGetBackgroundColour _obj 
+  = withRefColour $ \pref -> 
+    withObjectRef "calendarDateAttrGetBackgroundColour" _obj $ \cobj__obj -> 
+    wxCalendarDateAttr_GetBackgroundColour cobj__obj   pref
+foreign import ccall "wxCalendarDateAttr_GetBackgroundColour" wxCalendarDateAttr_GetBackgroundColour :: Ptr (TCalendarDateAttr a) -> Ptr (TColour ()) -> IO ()
+
+-- | usage: (@calendarDateAttrGetBorder obj@).
+calendarDateAttrGetBorder :: CalendarDateAttr  a ->  IO Int
+calendarDateAttrGetBorder _obj 
+  = withIntResult $
+    withObjectRef "calendarDateAttrGetBorder" _obj $ \cobj__obj -> 
+    wxCalendarDateAttr_GetBorder cobj__obj  
+foreign import ccall "wxCalendarDateAttr_GetBorder" wxCalendarDateAttr_GetBorder :: Ptr (TCalendarDateAttr a) -> IO CInt
+
+-- | usage: (@calendarDateAttrGetBorderColour obj@).
+calendarDateAttrGetBorderColour :: CalendarDateAttr  a ->  IO (Color)
+calendarDateAttrGetBorderColour _obj 
+  = withRefColour $ \pref -> 
+    withObjectRef "calendarDateAttrGetBorderColour" _obj $ \cobj__obj -> 
+    wxCalendarDateAttr_GetBorderColour cobj__obj   pref
+foreign import ccall "wxCalendarDateAttr_GetBorderColour" wxCalendarDateAttr_GetBorderColour :: Ptr (TCalendarDateAttr a) -> Ptr (TColour ()) -> IO ()
+
+-- | usage: (@calendarDateAttrGetFont obj@).
+calendarDateAttrGetFont :: CalendarDateAttr  a ->  IO (Font  ())
+calendarDateAttrGetFont _obj 
+  = withRefFont $ \pref -> 
+    withObjectRef "calendarDateAttrGetFont" _obj $ \cobj__obj -> 
+    wxCalendarDateAttr_GetFont cobj__obj   pref
+foreign import ccall "wxCalendarDateAttr_GetFont" wxCalendarDateAttr_GetFont :: Ptr (TCalendarDateAttr a) -> Ptr (TFont ()) -> IO ()
+
+-- | usage: (@calendarDateAttrGetTextColour obj@).
+calendarDateAttrGetTextColour :: CalendarDateAttr  a ->  IO (Color)
+calendarDateAttrGetTextColour _obj 
+  = withRefColour $ \pref -> 
+    withObjectRef "calendarDateAttrGetTextColour" _obj $ \cobj__obj -> 
+    wxCalendarDateAttr_GetTextColour cobj__obj   pref
+foreign import ccall "wxCalendarDateAttr_GetTextColour" wxCalendarDateAttr_GetTextColour :: Ptr (TCalendarDateAttr a) -> Ptr (TColour ()) -> IO ()
+
+-- | usage: (@calendarDateAttrHasBackgroundColour obj@).
+calendarDateAttrHasBackgroundColour :: CalendarDateAttr  a ->  IO Bool
+calendarDateAttrHasBackgroundColour _obj 
+  = withBoolResult $
+    withObjectRef "calendarDateAttrHasBackgroundColour" _obj $ \cobj__obj -> 
+    wxCalendarDateAttr_HasBackgroundColour cobj__obj  
+foreign import ccall "wxCalendarDateAttr_HasBackgroundColour" wxCalendarDateAttr_HasBackgroundColour :: Ptr (TCalendarDateAttr a) -> IO CBool
+
+-- | usage: (@calendarDateAttrHasBorder obj@).
+calendarDateAttrHasBorder :: CalendarDateAttr  a ->  IO Bool
+calendarDateAttrHasBorder _obj 
+  = withBoolResult $
+    withObjectRef "calendarDateAttrHasBorder" _obj $ \cobj__obj -> 
+    wxCalendarDateAttr_HasBorder cobj__obj  
+foreign import ccall "wxCalendarDateAttr_HasBorder" wxCalendarDateAttr_HasBorder :: Ptr (TCalendarDateAttr a) -> IO CBool
+
+-- | usage: (@calendarDateAttrHasBorderColour obj@).
+calendarDateAttrHasBorderColour :: CalendarDateAttr  a ->  IO Bool
+calendarDateAttrHasBorderColour _obj 
+  = withBoolResult $
+    withObjectRef "calendarDateAttrHasBorderColour" _obj $ \cobj__obj -> 
+    wxCalendarDateAttr_HasBorderColour cobj__obj  
+foreign import ccall "wxCalendarDateAttr_HasBorderColour" wxCalendarDateAttr_HasBorderColour :: Ptr (TCalendarDateAttr a) -> IO CBool
+
+-- | usage: (@calendarDateAttrHasFont obj@).
+calendarDateAttrHasFont :: CalendarDateAttr  a ->  IO Bool
+calendarDateAttrHasFont _obj 
+  = withBoolResult $
+    withObjectRef "calendarDateAttrHasFont" _obj $ \cobj__obj -> 
+    wxCalendarDateAttr_HasFont cobj__obj  
+foreign import ccall "wxCalendarDateAttr_HasFont" wxCalendarDateAttr_HasFont :: Ptr (TCalendarDateAttr a) -> IO CBool
+
+-- | usage: (@calendarDateAttrHasTextColour obj@).
+calendarDateAttrHasTextColour :: CalendarDateAttr  a ->  IO Bool
+calendarDateAttrHasTextColour _obj 
+  = withBoolResult $
+    withObjectRef "calendarDateAttrHasTextColour" _obj $ \cobj__obj -> 
+    wxCalendarDateAttr_HasTextColour cobj__obj  
+foreign import ccall "wxCalendarDateAttr_HasTextColour" wxCalendarDateAttr_HasTextColour :: Ptr (TCalendarDateAttr a) -> IO CBool
+
+-- | usage: (@calendarDateAttrIsHoliday obj@).
+calendarDateAttrIsHoliday :: CalendarDateAttr  a ->  IO Bool
+calendarDateAttrIsHoliday _obj 
+  = withBoolResult $
+    withObjectRef "calendarDateAttrIsHoliday" _obj $ \cobj__obj -> 
+    wxCalendarDateAttr_IsHoliday cobj__obj  
+foreign import ccall "wxCalendarDateAttr_IsHoliday" wxCalendarDateAttr_IsHoliday :: Ptr (TCalendarDateAttr a) -> IO CBool
+
+-- | usage: (@calendarDateAttrSetBackgroundColour obj col@).
+calendarDateAttrSetBackgroundColour :: CalendarDateAttr  a -> Color ->  IO ()
+calendarDateAttrSetBackgroundColour _obj col 
+  = withObjectRef "calendarDateAttrSetBackgroundColour" _obj $ \cobj__obj -> 
+    withColourPtr col $ \cobj_col -> 
+    wxCalendarDateAttr_SetBackgroundColour cobj__obj  cobj_col  
+foreign import ccall "wxCalendarDateAttr_SetBackgroundColour" wxCalendarDateAttr_SetBackgroundColour :: Ptr (TCalendarDateAttr a) -> Ptr (TColour b) -> IO ()
+
+-- | usage: (@calendarDateAttrSetBorder obj border@).
+calendarDateAttrSetBorder :: CalendarDateAttr  a -> Int ->  IO ()
+calendarDateAttrSetBorder _obj border 
+  = withObjectRef "calendarDateAttrSetBorder" _obj $ \cobj__obj -> 
+    wxCalendarDateAttr_SetBorder cobj__obj  (toCInt border)  
+foreign import ccall "wxCalendarDateAttr_SetBorder" wxCalendarDateAttr_SetBorder :: Ptr (TCalendarDateAttr a) -> CInt -> IO ()
+
+-- | usage: (@calendarDateAttrSetBorderColour obj col@).
+calendarDateAttrSetBorderColour :: CalendarDateAttr  a -> Color ->  IO ()
+calendarDateAttrSetBorderColour _obj col 
+  = withObjectRef "calendarDateAttrSetBorderColour" _obj $ \cobj__obj -> 
+    withColourPtr col $ \cobj_col -> 
+    wxCalendarDateAttr_SetBorderColour cobj__obj  cobj_col  
+foreign import ccall "wxCalendarDateAttr_SetBorderColour" wxCalendarDateAttr_SetBorderColour :: Ptr (TCalendarDateAttr a) -> Ptr (TColour b) -> IO ()
+
+-- | usage: (@calendarDateAttrSetFont obj font@).
+calendarDateAttrSetFont :: CalendarDateAttr  a -> Font  b ->  IO ()
+calendarDateAttrSetFont _obj font 
+  = withObjectRef "calendarDateAttrSetFont" _obj $ \cobj__obj -> 
+    withObjectPtr font $ \cobj_font -> 
+    wxCalendarDateAttr_SetFont cobj__obj  cobj_font  
+foreign import ccall "wxCalendarDateAttr_SetFont" wxCalendarDateAttr_SetFont :: Ptr (TCalendarDateAttr a) -> Ptr (TFont b) -> IO ()
+
+-- | usage: (@calendarDateAttrSetHoliday obj holiday@).
+calendarDateAttrSetHoliday :: CalendarDateAttr  a -> Int ->  IO ()
+calendarDateAttrSetHoliday _obj holiday 
+  = withObjectRef "calendarDateAttrSetHoliday" _obj $ \cobj__obj -> 
+    wxCalendarDateAttr_SetHoliday cobj__obj  (toCInt holiday)  
+foreign import ccall "wxCalendarDateAttr_SetHoliday" wxCalendarDateAttr_SetHoliday :: Ptr (TCalendarDateAttr a) -> CInt -> IO ()
+
+-- | usage: (@calendarDateAttrSetTextColour obj col@).
+calendarDateAttrSetTextColour :: CalendarDateAttr  a -> Color ->  IO ()
+calendarDateAttrSetTextColour _obj col 
+  = withObjectRef "calendarDateAttrSetTextColour" _obj $ \cobj__obj -> 
+    withColourPtr col $ \cobj_col -> 
+    wxCalendarDateAttr_SetTextColour cobj__obj  cobj_col  
+foreign import ccall "wxCalendarDateAttr_SetTextColour" wxCalendarDateAttr_SetTextColour :: Ptr (TCalendarDateAttr a) -> Ptr (TColour b) -> IO ()
+
+-- | usage: (@calendarEventGetDate obj dte@).
+calendarEventGetDate :: CalendarEvent  a -> Ptr  b ->  IO ()
+calendarEventGetDate _obj _dte 
+  = withObjectRef "calendarEventGetDate" _obj $ \cobj__obj -> 
+    wxCalendarEvent_GetDate cobj__obj  _dte  
+foreign import ccall "wxCalendarEvent_GetDate" wxCalendarEvent_GetDate :: Ptr (TCalendarEvent a) -> Ptr  b -> IO ()
+
+-- | usage: (@calendarEventGetWeekDay obj@).
+calendarEventGetWeekDay :: CalendarEvent  a ->  IO Int
+calendarEventGetWeekDay _obj 
+  = withIntResult $
+    withObjectRef "calendarEventGetWeekDay" _obj $ \cobj__obj -> 
+    wxCalendarEvent_GetWeekDay cobj__obj  
+foreign import ccall "wxCalendarEvent_GetWeekDay" wxCalendarEvent_GetWeekDay :: Ptr (TCalendarEvent a) -> IO CInt
+
+-- | usage: (@caretCreate wnd wth hgt@).
+caretCreate :: Window  a -> Int -> Int ->  IO (Caret  ())
+caretCreate _wnd _wth _hgt 
+  = withObjectResult $
+    withObjectPtr _wnd $ \cobj__wnd -> 
+    wxCaret_Create cobj__wnd  (toCInt _wth)  (toCInt _hgt)  
+foreign import ccall "wxCaret_Create" wxCaret_Create :: Ptr (TWindow a) -> CInt -> CInt -> IO (Ptr (TCaret ()))
+
+-- | usage: (@caretGetBlinkTime@).
+caretGetBlinkTime ::  IO Int
+caretGetBlinkTime 
+  = withIntResult $
+    wxCaret_GetBlinkTime 
+foreign import ccall "wxCaret_GetBlinkTime" wxCaret_GetBlinkTime :: IO CInt
+
+-- | usage: (@caretGetPosition obj@).
+caretGetPosition :: Caret  a ->  IO (Point)
+caretGetPosition _obj 
+  = withWxPointResult $
+    withObjectRef "caretGetPosition" _obj $ \cobj__obj -> 
+    wxCaret_GetPosition cobj__obj  
+foreign import ccall "wxCaret_GetPosition" wxCaret_GetPosition :: Ptr (TCaret a) -> IO (Ptr (TWxPoint ()))
+
+-- | usage: (@caretGetSize obj@).
+caretGetSize :: Caret  a ->  IO (Size)
+caretGetSize _obj 
+  = withWxSizeResult $
+    withObjectRef "caretGetSize" _obj $ \cobj__obj -> 
+    wxCaret_GetSize cobj__obj  
+foreign import ccall "wxCaret_GetSize" wxCaret_GetSize :: Ptr (TCaret a) -> IO (Ptr (TWxSize ()))
+
+-- | usage: (@caretGetWindow obj@).
+caretGetWindow :: Caret  a ->  IO (Window  ())
+caretGetWindow _obj 
+  = withObjectResult $
+    withObjectRef "caretGetWindow" _obj $ \cobj__obj -> 
+    wxCaret_GetWindow cobj__obj  
+foreign import ccall "wxCaret_GetWindow" wxCaret_GetWindow :: Ptr (TCaret a) -> IO (Ptr (TWindow ()))
+
+-- | usage: (@caretHide obj@).
+caretHide :: Caret  a ->  IO ()
+caretHide _obj 
+  = withObjectRef "caretHide" _obj $ \cobj__obj -> 
+    wxCaret_Hide cobj__obj  
+foreign import ccall "wxCaret_Hide" wxCaret_Hide :: Ptr (TCaret a) -> IO ()
+
+-- | usage: (@caretIsOk obj@).
+caretIsOk :: Caret  a ->  IO Bool
+caretIsOk _obj 
+  = withBoolResult $
+    withObjectRef "caretIsOk" _obj $ \cobj__obj -> 
+    wxCaret_IsOk cobj__obj  
+foreign import ccall "wxCaret_IsOk" wxCaret_IsOk :: Ptr (TCaret a) -> IO CBool
+
+-- | usage: (@caretIsVisible obj@).
+caretIsVisible :: Caret  a ->  IO Bool
+caretIsVisible _obj 
+  = withBoolResult $
+    withObjectRef "caretIsVisible" _obj $ \cobj__obj -> 
+    wxCaret_IsVisible cobj__obj  
+foreign import ccall "wxCaret_IsVisible" wxCaret_IsVisible :: Ptr (TCaret a) -> IO CBool
+
+-- | usage: (@caretMove obj xy@).
+caretMove :: Caret  a -> Point ->  IO ()
+caretMove _obj xy 
+  = withObjectRef "caretMove" _obj $ \cobj__obj -> 
+    wxCaret_Move cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxCaret_Move" wxCaret_Move :: Ptr (TCaret a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@caretSetBlinkTime milliseconds@).
+caretSetBlinkTime :: Int ->  IO ()
+caretSetBlinkTime milliseconds 
+  = wxCaret_SetBlinkTime (toCInt milliseconds)  
+foreign import ccall "wxCaret_SetBlinkTime" wxCaret_SetBlinkTime :: CInt -> IO ()
+
+-- | usage: (@caretSetSize obj widthheight@).
+caretSetSize :: Caret  a -> Size ->  IO ()
+caretSetSize _obj widthheight 
+  = withObjectRef "caretSetSize" _obj $ \cobj__obj -> 
+    wxCaret_SetSize cobj__obj  (toCIntSizeW widthheight) (toCIntSizeH widthheight)  
+foreign import ccall "wxCaret_SetSize" wxCaret_SetSize :: Ptr (TCaret a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@caretShow obj@).
+caretShow :: Caret  a ->  IO ()
+caretShow _obj 
+  = withObjectRef "caretShow" _obj $ \cobj__obj -> 
+    wxCaret_Show cobj__obj  
+foreign import ccall "wxCaret_Show" wxCaret_Show :: Ptr (TCaret a) -> IO ()
+
+-- | usage: (@checkBoxCreate prt id txt lfttopwdthgt stl@).
+checkBoxCreate :: Window  a -> Id -> String -> Rect -> Style ->  IO (CheckBox  ())
+checkBoxCreate _prt _id _txt _lfttopwdthgt _stl 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    withStringPtr _txt $ \cobj__txt -> 
+    wxCheckBox_Create cobj__prt  (toCInt _id)  cobj__txt  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
+foreign import ccall "wxCheckBox_Create" wxCheckBox_Create :: Ptr (TWindow a) -> CInt -> Ptr (TWxString c) -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TCheckBox ()))
+
+-- | usage: (@checkBoxDelete obj@).
+checkBoxDelete :: CheckBox  a ->  IO ()
+checkBoxDelete
+  = objectDelete
+
+
+-- | usage: (@checkBoxGetValue obj@).
+checkBoxGetValue :: CheckBox  a ->  IO Bool
+checkBoxGetValue _obj 
+  = withBoolResult $
+    withObjectRef "checkBoxGetValue" _obj $ \cobj__obj -> 
+    wxCheckBox_GetValue cobj__obj  
+foreign import ccall "wxCheckBox_GetValue" wxCheckBox_GetValue :: Ptr (TCheckBox a) -> IO CBool
+
+-- | usage: (@checkBoxSetValue obj value@).
+checkBoxSetValue :: CheckBox  a -> Bool ->  IO ()
+checkBoxSetValue _obj value 
+  = withObjectRef "checkBoxSetValue" _obj $ \cobj__obj -> 
+    wxCheckBox_SetValue cobj__obj  (toCBool value)  
+foreign import ccall "wxCheckBox_SetValue" wxCheckBox_SetValue :: Ptr (TCheckBox a) -> CBool -> IO ()
+
+-- | usage: (@checkListBoxCheck obj item check@).
+checkListBoxCheck :: CheckListBox  a -> Int -> Bool ->  IO ()
+checkListBoxCheck _obj item check 
+  = withObjectRef "checkListBoxCheck" _obj $ \cobj__obj -> 
+    wxCheckListBox_Check cobj__obj  (toCInt item)  (toCBool check)  
+foreign import ccall "wxCheckListBox_Check" wxCheckListBox_Check :: Ptr (TCheckListBox a) -> CInt -> CBool -> IO ()
+
+-- | usage: (@checkListBoxCreate prt id lfttopwdthgt nstr stl@).
+checkListBoxCreate :: Window  a -> Id -> Rect -> [String] -> Style ->  IO (CheckListBox  ())
+checkListBoxCreate _prt _id _lfttopwdthgt nstr _stl 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    withArrayWString nstr $ \carrlen_nstr carr_nstr -> 
+    wxCheckListBox_Create cobj__prt  (toCInt _id)  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  carrlen_nstr carr_nstr  (toCInt _stl)  
+foreign import ccall "wxCheckListBox_Create" wxCheckListBox_Create :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> Ptr (Ptr CWchar) -> CInt -> IO (Ptr (TCheckListBox ()))
+
+-- | usage: (@checkListBoxDelete obj@).
+checkListBoxDelete :: CheckListBox  a ->  IO ()
+checkListBoxDelete
+  = objectDelete
+
+
+-- | usage: (@checkListBoxIsChecked obj item@).
+checkListBoxIsChecked :: CheckListBox  a -> Int ->  IO Bool
+checkListBoxIsChecked _obj item 
+  = withBoolResult $
+    withObjectRef "checkListBoxIsChecked" _obj $ \cobj__obj -> 
+    wxCheckListBox_IsChecked cobj__obj  (toCInt item)  
+foreign import ccall "wxCheckListBox_IsChecked" wxCheckListBox_IsChecked :: Ptr (TCheckListBox a) -> CInt -> IO CBool
+
+-- | usage: (@choiceAppend obj item@).
+choiceAppend :: Choice  a -> String ->  IO ()
+choiceAppend _obj item 
+  = withObjectRef "choiceAppend" _obj $ \cobj__obj -> 
+    withStringPtr item $ \cobj_item -> 
+    wxChoice_Append cobj__obj  cobj_item  
+foreign import ccall "wxChoice_Append" wxChoice_Append :: Ptr (TChoice a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@choiceClear obj@).
+choiceClear :: Choice  a ->  IO ()
+choiceClear _obj 
+  = withObjectRef "choiceClear" _obj $ \cobj__obj -> 
+    wxChoice_Clear cobj__obj  
+foreign import ccall "wxChoice_Clear" wxChoice_Clear :: Ptr (TChoice a) -> IO ()
+
+-- | usage: (@choiceCreate prt id lfttopwdthgt nstr stl@).
+choiceCreate :: Window  a -> Id -> Rect -> [String] -> Style ->  IO (Choice  ())
+choiceCreate _prt _id _lfttopwdthgt nstr _stl 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    withArrayWString nstr $ \carrlen_nstr carr_nstr -> 
+    wxChoice_Create cobj__prt  (toCInt _id)  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  carrlen_nstr carr_nstr  (toCInt _stl)  
+foreign import ccall "wxChoice_Create" wxChoice_Create :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> Ptr (Ptr CWchar) -> CInt -> IO (Ptr (TChoice ()))
+
+-- | usage: (@choiceDelete obj n@).
+choiceDelete :: Choice  a -> Int ->  IO ()
+choiceDelete _obj n 
+  = withObjectRef "choiceDelete" _obj $ \cobj__obj -> 
+    wxChoice_Delete cobj__obj  (toCInt n)  
+foreign import ccall "wxChoice_Delete" wxChoice_Delete :: Ptr (TChoice a) -> CInt -> IO ()
+
+-- | usage: (@choiceFindString obj s@).
+choiceFindString :: Choice  a -> String ->  IO Int
+choiceFindString _obj s 
+  = withIntResult $
+    withObjectRef "choiceFindString" _obj $ \cobj__obj -> 
+    withStringPtr s $ \cobj_s -> 
+    wxChoice_FindString cobj__obj  cobj_s  
+foreign import ccall "wxChoice_FindString" wxChoice_FindString :: Ptr (TChoice a) -> Ptr (TWxString b) -> IO CInt
+
+-- | usage: (@choiceGetCount obj@).
+choiceGetCount :: Choice  a ->  IO Int
+choiceGetCount _obj 
+  = withIntResult $
+    withObjectRef "choiceGetCount" _obj $ \cobj__obj -> 
+    wxChoice_GetCount cobj__obj  
+foreign import ccall "wxChoice_GetCount" wxChoice_GetCount :: Ptr (TChoice a) -> IO CInt
+
+-- | usage: (@choiceGetSelection obj@).
+choiceGetSelection :: Choice  a ->  IO Int
+choiceGetSelection _obj 
+  = withIntResult $
+    withObjectRef "choiceGetSelection" _obj $ \cobj__obj -> 
+    wxChoice_GetSelection cobj__obj  
+foreign import ccall "wxChoice_GetSelection" wxChoice_GetSelection :: Ptr (TChoice a) -> IO CInt
+
+-- | usage: (@choiceGetString obj n@).
+choiceGetString :: Choice  a -> Int ->  IO (String)
+choiceGetString _obj n 
+  = withManagedStringResult $
+    withObjectRef "choiceGetString" _obj $ \cobj__obj -> 
+    wxChoice_GetString cobj__obj  (toCInt n)  
+foreign import ccall "wxChoice_GetString" wxChoice_GetString :: Ptr (TChoice a) -> CInt -> IO (Ptr (TWxString ()))
+
+-- | usage: (@choiceSetSelection obj n@).
+choiceSetSelection :: Choice  a -> Int ->  IO ()
+choiceSetSelection _obj n 
+  = withObjectRef "choiceSetSelection" _obj $ \cobj__obj -> 
+    wxChoice_SetSelection cobj__obj  (toCInt n)  
+foreign import ccall "wxChoice_SetSelection" wxChoice_SetSelection :: Ptr (TChoice a) -> CInt -> IO ()
+
+-- | usage: (@choiceSetString obj n s@).
+choiceSetString :: Choice  a -> Int -> String ->  IO ()
+choiceSetString _obj n s 
+  = withObjectRef "choiceSetString" _obj $ \cobj__obj -> 
+    withStringPtr s $ \cobj_s -> 
+    wxChoice_SetString cobj__obj  (toCInt n)  cobj_s  
+foreign import ccall "wxChoice_SetString" wxChoice_SetString :: Ptr (TChoice a) -> CInt -> Ptr (TWxString c) -> IO ()
+
+-- | usage: (@classInfoCreateClassByName inf@).
+classInfoCreateClassByName :: ClassInfo  a ->  IO (Ptr  ())
+classInfoCreateClassByName _inf 
+  = withObjectRef "classInfoCreateClassByName" _inf $ \cobj__inf -> 
+    wxClassInfo_CreateClassByName cobj__inf  
+foreign import ccall "wxClassInfo_CreateClassByName" wxClassInfo_CreateClassByName :: Ptr (TClassInfo a) -> IO (Ptr  ())
+
+-- | usage: (@classInfoFindClass txt@).
+classInfoFindClass :: String ->  IO (ClassInfo  ())
+classInfoFindClass _txt 
+  = withObjectResult $
+    withStringPtr _txt $ \cobj__txt -> 
+    wxClassInfo_FindClass cobj__txt  
+foreign import ccall "wxClassInfo_FindClass" wxClassInfo_FindClass :: Ptr (TWxString a) -> IO (Ptr (TClassInfo ()))
+
+-- | usage: (@classInfoGetBaseClassName1 obj@).
+classInfoGetBaseClassName1 :: ClassInfo  a ->  IO (String)
+classInfoGetBaseClassName1 _obj 
+  = withManagedStringResult $
+    withObjectRef "classInfoGetBaseClassName1" _obj $ \cobj__obj -> 
+    wxClassInfo_GetBaseClassName1 cobj__obj  
+foreign import ccall "wxClassInfo_GetBaseClassName1" wxClassInfo_GetBaseClassName1 :: Ptr (TClassInfo a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@classInfoGetBaseClassName2 obj@).
+classInfoGetBaseClassName2 :: ClassInfo  a ->  IO (String)
+classInfoGetBaseClassName2 _obj 
+  = withManagedStringResult $
+    withObjectRef "classInfoGetBaseClassName2" _obj $ \cobj__obj -> 
+    wxClassInfo_GetBaseClassName2 cobj__obj  
+foreign import ccall "wxClassInfo_GetBaseClassName2" wxClassInfo_GetBaseClassName2 :: Ptr (TClassInfo a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@classInfoGetClassName inf@).
+classInfoGetClassName :: ClassInfo  a ->  IO (Ptr  ())
+classInfoGetClassName _inf 
+  = withObjectRef "classInfoGetClassName" _inf $ \cobj__inf -> 
+    wxClassInfo_GetClassName cobj__inf  
+foreign import ccall "wxClassInfo_GetClassName" wxClassInfo_GetClassName :: Ptr (TClassInfo a) -> IO (Ptr  ())
+
+-- | usage: (@classInfoGetClassNameEx obj@).
+classInfoGetClassNameEx :: ClassInfo  a ->  IO (String)
+classInfoGetClassNameEx _obj 
+  = withManagedStringResult $
+    withObjectRef "classInfoGetClassNameEx" _obj $ \cobj__obj -> 
+    wxClassInfo_GetClassNameEx cobj__obj  
+foreign import ccall "wxClassInfo_GetClassNameEx" wxClassInfo_GetClassNameEx :: Ptr (TClassInfo a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@classInfoGetSize obj@).
+classInfoGetSize :: ClassInfo  a ->  IO Int
+classInfoGetSize _obj 
+  = withIntResult $
+    withObjectRef "classInfoGetSize" _obj $ \cobj__obj -> 
+    wxClassInfo_GetSize cobj__obj  
+foreign import ccall "wxClassInfo_GetSize" wxClassInfo_GetSize :: Ptr (TClassInfo a) -> IO CInt
+
+-- | usage: (@classInfoIsKindOf obj name@).
+classInfoIsKindOf :: ClassInfo  a -> String ->  IO Bool
+classInfoIsKindOf _obj _name 
+  = withBoolResult $
+    withObjectRef "classInfoIsKindOf" _obj $ \cobj__obj -> 
+    withStringPtr _name $ \cobj__name -> 
+    wxClassInfo_IsKindOf cobj__obj  cobj__name  
+foreign import ccall "wxClassInfo_IsKindOf" wxClassInfo_IsKindOf :: Ptr (TClassInfo a) -> Ptr (TWxString b) -> IO CBool
+
+-- | usage: (@classInfoIsKindOfEx obj classInfo@).
+classInfoIsKindOfEx :: ClassInfo  a -> ClassInfo  b ->  IO Bool
+classInfoIsKindOfEx _obj classInfo 
+  = withBoolResult $
+    withObjectRef "classInfoIsKindOfEx" _obj $ \cobj__obj -> 
+    withObjectPtr classInfo $ \cobj_classInfo -> 
+    wxClassInfo_IsKindOfEx cobj__obj  cobj_classInfo  
+foreign import ccall "wxClassInfo_IsKindOfEx" wxClassInfo_IsKindOfEx :: Ptr (TClassInfo a) -> Ptr (TClassInfo b) -> IO CBool
+
+-- | usage: (@clientDCCreate win@).
+clientDCCreate :: Window  a ->  IO (ClientDC  ())
+clientDCCreate win 
+  = withObjectResult $
+    withObjectPtr win $ \cobj_win -> 
+    wxClientDC_Create cobj_win  
+foreign import ccall "wxClientDC_Create" wxClientDC_Create :: Ptr (TWindow a) -> IO (Ptr (TClientDC ()))
+
+-- | usage: (@clientDCDelete obj@).
+clientDCDelete :: ClientDC  a ->  IO ()
+clientDCDelete
+  = objectDelete
+
+
+-- | usage: (@clipboardAddData obj wxdata@).
+clipboardAddData :: Clipboard  a -> DataObject  b ->  IO Bool
+clipboardAddData _obj wxdata 
+  = withBoolResult $
+    withObjectRef "clipboardAddData" _obj $ \cobj__obj -> 
+    withObjectPtr wxdata $ \cobj_wxdata -> 
+    wxClipboard_AddData cobj__obj  cobj_wxdata  
+foreign import ccall "wxClipboard_AddData" wxClipboard_AddData :: Ptr (TClipboard a) -> Ptr (TDataObject b) -> IO CBool
+
+-- | usage: (@clipboardClear obj@).
+clipboardClear :: Clipboard  a ->  IO ()
+clipboardClear _obj 
+  = withObjectRef "clipboardClear" _obj $ \cobj__obj -> 
+    wxClipboard_Clear cobj__obj  
+foreign import ccall "wxClipboard_Clear" wxClipboard_Clear :: Ptr (TClipboard a) -> IO ()
+
+-- | usage: (@clipboardClose obj@).
+clipboardClose :: Clipboard  a ->  IO ()
+clipboardClose _obj 
+  = withObjectRef "clipboardClose" _obj $ \cobj__obj -> 
+    wxClipboard_Close cobj__obj  
+foreign import ccall "wxClipboard_Close" wxClipboard_Close :: Ptr (TClipboard a) -> IO ()
+
+-- | usage: (@clipboardCreate@).
+clipboardCreate ::  IO (Clipboard  ())
+clipboardCreate 
+  = withObjectResult $
+    wxClipboard_Create 
+foreign import ccall "wxClipboard_Create" wxClipboard_Create :: IO (Ptr (TClipboard ()))
+
+-- | usage: (@clipboardFlush obj@).
+clipboardFlush :: Clipboard  a ->  IO Bool
+clipboardFlush _obj 
+  = withBoolResult $
+    withObjectRef "clipboardFlush" _obj $ \cobj__obj -> 
+    wxClipboard_Flush cobj__obj  
+foreign import ccall "wxClipboard_Flush" wxClipboard_Flush :: Ptr (TClipboard a) -> IO CBool
+
+-- | usage: (@clipboardGetData obj wxdata@).
+clipboardGetData :: Clipboard  a -> DataObject  b ->  IO Bool
+clipboardGetData _obj wxdata 
+  = withBoolResult $
+    withObjectRef "clipboardGetData" _obj $ \cobj__obj -> 
+    withObjectPtr wxdata $ \cobj_wxdata -> 
+    wxClipboard_GetData cobj__obj  cobj_wxdata  
+foreign import ccall "wxClipboard_GetData" wxClipboard_GetData :: Ptr (TClipboard a) -> Ptr (TDataObject b) -> IO CBool
+
+-- | usage: (@clipboardIsOpened obj@).
+clipboardIsOpened :: Clipboard  a ->  IO Bool
+clipboardIsOpened _obj 
+  = withBoolResult $
+    withObjectRef "clipboardIsOpened" _obj $ \cobj__obj -> 
+    wxClipboard_IsOpened cobj__obj  
+foreign import ccall "wxClipboard_IsOpened" wxClipboard_IsOpened :: Ptr (TClipboard a) -> IO CBool
+
+-- | usage: (@clipboardIsSupported obj format@).
+clipboardIsSupported :: Clipboard  a -> DataFormat  b ->  IO Bool
+clipboardIsSupported _obj format 
+  = withBoolResult $
+    withObjectRef "clipboardIsSupported" _obj $ \cobj__obj -> 
+    withObjectPtr format $ \cobj_format -> 
+    wxClipboard_IsSupported cobj__obj  cobj_format  
+foreign import ccall "wxClipboard_IsSupported" wxClipboard_IsSupported :: Ptr (TClipboard a) -> Ptr (TDataFormat b) -> IO CBool
+
+-- | usage: (@clipboardOpen obj@).
+clipboardOpen :: Clipboard  a ->  IO Bool
+clipboardOpen _obj 
+  = withBoolResult $
+    withObjectRef "clipboardOpen" _obj $ \cobj__obj -> 
+    wxClipboard_Open cobj__obj  
+foreign import ccall "wxClipboard_Open" wxClipboard_Open :: Ptr (TClipboard a) -> IO CBool
+
+-- | usage: (@clipboardSetData obj wxdata@).
+clipboardSetData :: Clipboard  a -> DataObject  b ->  IO Bool
+clipboardSetData _obj wxdata 
+  = withBoolResult $
+    withObjectRef "clipboardSetData" _obj $ \cobj__obj -> 
+    withObjectPtr wxdata $ \cobj_wxdata -> 
+    wxClipboard_SetData cobj__obj  cobj_wxdata  
+foreign import ccall "wxClipboard_SetData" wxClipboard_SetData :: Ptr (TClipboard a) -> Ptr (TDataObject b) -> IO CBool
+
+-- | usage: (@clipboardUsePrimarySelection obj primary@).
+clipboardUsePrimarySelection :: Clipboard  a -> Bool ->  IO ()
+clipboardUsePrimarySelection _obj primary 
+  = withObjectRef "clipboardUsePrimarySelection" _obj $ \cobj__obj -> 
+    wxClipboard_UsePrimarySelection cobj__obj  (toCBool primary)  
+foreign import ccall "wxClipboard_UsePrimarySelection" wxClipboard_UsePrimarySelection :: Ptr (TClipboard a) -> CBool -> IO ()
+
+-- | usage: (@closeEventCanVeto obj@).
+closeEventCanVeto :: CloseEvent  a ->  IO Bool
+closeEventCanVeto _obj 
+  = withBoolResult $
+    withObjectRef "closeEventCanVeto" _obj $ \cobj__obj -> 
+    wxCloseEvent_CanVeto cobj__obj  
+foreign import ccall "wxCloseEvent_CanVeto" wxCloseEvent_CanVeto :: Ptr (TCloseEvent a) -> IO CBool
+
+-- | usage: (@closeEventCopyObject obj obj@).
+closeEventCopyObject :: CloseEvent  a -> WxObject  b ->  IO ()
+closeEventCopyObject _obj obj 
+  = withObjectRef "closeEventCopyObject" _obj $ \cobj__obj -> 
+    withObjectPtr obj $ \cobj_obj -> 
+    wxCloseEvent_CopyObject cobj__obj  cobj_obj  
+foreign import ccall "wxCloseEvent_CopyObject" wxCloseEvent_CopyObject :: Ptr (TCloseEvent a) -> Ptr (TWxObject b) -> IO ()
+
+-- | usage: (@closeEventGetLoggingOff obj@).
+closeEventGetLoggingOff :: CloseEvent  a ->  IO Bool
+closeEventGetLoggingOff _obj 
+  = withBoolResult $
+    withObjectRef "closeEventGetLoggingOff" _obj $ \cobj__obj -> 
+    wxCloseEvent_GetLoggingOff cobj__obj  
+foreign import ccall "wxCloseEvent_GetLoggingOff" wxCloseEvent_GetLoggingOff :: Ptr (TCloseEvent a) -> IO CBool
+
+-- | usage: (@closeEventGetVeto obj@).
+closeEventGetVeto :: CloseEvent  a ->  IO Bool
+closeEventGetVeto _obj 
+  = withBoolResult $
+    withObjectRef "closeEventGetVeto" _obj $ \cobj__obj -> 
+    wxCloseEvent_GetVeto cobj__obj  
+foreign import ccall "wxCloseEvent_GetVeto" wxCloseEvent_GetVeto :: Ptr (TCloseEvent a) -> IO CBool
+
+-- | usage: (@closeEventSetCanVeto obj canVeto@).
+closeEventSetCanVeto :: CloseEvent  a -> Bool ->  IO ()
+closeEventSetCanVeto _obj canVeto 
+  = withObjectRef "closeEventSetCanVeto" _obj $ \cobj__obj -> 
+    wxCloseEvent_SetCanVeto cobj__obj  (toCBool canVeto)  
+foreign import ccall "wxCloseEvent_SetCanVeto" wxCloseEvent_SetCanVeto :: Ptr (TCloseEvent a) -> CBool -> IO ()
+
+-- | usage: (@closeEventSetLoggingOff obj logOff@).
+closeEventSetLoggingOff :: CloseEvent  a -> Bool ->  IO ()
+closeEventSetLoggingOff _obj logOff 
+  = withObjectRef "closeEventSetLoggingOff" _obj $ \cobj__obj -> 
+    wxCloseEvent_SetLoggingOff cobj__obj  (toCBool logOff)  
+foreign import ccall "wxCloseEvent_SetLoggingOff" wxCloseEvent_SetLoggingOff :: Ptr (TCloseEvent a) -> CBool -> IO ()
+
+-- | usage: (@closeEventVeto obj veto@).
+closeEventVeto :: CloseEvent  a -> Bool ->  IO ()
+closeEventVeto _obj veto 
+  = withObjectRef "closeEventVeto" _obj $ \cobj__obj -> 
+    wxCloseEvent_Veto cobj__obj  (toCBool veto)  
+foreign import ccall "wxCloseEvent_Veto" wxCloseEvent_Veto :: Ptr (TCloseEvent a) -> CBool -> IO ()
+
+-- | usage: (@closureCreate funCEvent wxdata@).
+closureCreate :: FunPtr (Ptr fun -> Ptr state -> Ptr (TEvent evt) -> IO ()) -> Ptr  b ->  IO (Closure  ())
+closureCreate _funCEvent _data 
+  = withObjectResult $
+    wxClosure_Create (toCFunPtr _funCEvent)  _data  
+foreign import ccall "wxClosure_Create" wxClosure_Create :: Ptr (Ptr fun -> Ptr state -> Ptr (TEvent evt) -> IO ()) -> Ptr  b -> IO (Ptr (TClosure ()))
+
+-- | usage: (@closureGetData obj@).
+closureGetData :: Closure  a ->  IO (Ptr  ())
+closureGetData _obj 
+  = withObjectRef "closureGetData" _obj $ \cobj__obj -> 
+    wxClosure_GetData cobj__obj  
+foreign import ccall "wxClosure_GetData" wxClosure_GetData :: Ptr (TClosure a) -> IO (Ptr  ())
+
+-- | usage: (@colorPickerCtrlCreate parent id colour xywh style@).
+colorPickerCtrlCreate :: Window  a -> Id -> Color -> Rect -> Int ->  IO (ColourPickerCtrl  ())
+colorPickerCtrlCreate parent id colour xywh style 
+  = withObjectResult $
+    withObjectPtr parent $ \cobj_parent -> 
+    withColourPtr colour $ \cobj_colour -> 
+    wxColorPickerCtrl_Create cobj_parent  (toCInt id)  cobj_colour  (toCIntRectX xywh) (toCIntRectY xywh)(toCIntRectW xywh) (toCIntRectH xywh)  (toCInt style)  
+foreign import ccall "wxColorPickerCtrl_Create" wxColorPickerCtrl_Create :: Ptr (TWindow a) -> CInt -> Ptr (TColour c) -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TColourPickerCtrl ()))
+
+-- | usage: (@colorPickerCtrlGetColour self@).
+colorPickerCtrlGetColour :: ColourPickerCtrl  a ->  IO (Color)
+colorPickerCtrlGetColour self 
+  = withRefColour $ \pref -> 
+    withObjectPtr self $ \cobj_self -> 
+    wxColorPickerCtrl_GetColour cobj_self   pref
+foreign import ccall "wxColorPickerCtrl_GetColour" wxColorPickerCtrl_GetColour :: Ptr (TColourPickerCtrl a) -> Ptr (TColour ()) -> IO ()
+
+-- | usage: (@colorPickerCtrlSetColour self colour@).
+colorPickerCtrlSetColour :: ColourPickerCtrl  a -> Color ->  IO ()
+colorPickerCtrlSetColour self colour 
+  = withObjectPtr self $ \cobj_self -> 
+    withColourPtr colour $ \cobj_colour -> 
+    wxColorPickerCtrl_SetColour cobj_self  cobj_colour  
+foreign import ccall "wxColorPickerCtrl_SetColour" wxColorPickerCtrl_SetColour :: Ptr (TColourPickerCtrl a) -> Ptr (TColour b) -> IO ()
+
+-- | usage: (@comboBoxAppend obj item@).
+comboBoxAppend :: ComboBox  a -> String ->  IO ()
+comboBoxAppend _obj item 
+  = withObjectRef "comboBoxAppend" _obj $ \cobj__obj -> 
+    withStringPtr item $ \cobj_item -> 
+    wxComboBox_Append cobj__obj  cobj_item  
+foreign import ccall "wxComboBox_Append" wxComboBox_Append :: Ptr (TComboBox a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@comboBoxAppendData obj item d@).
+comboBoxAppendData :: ComboBox  a -> String -> Ptr  c ->  IO ()
+comboBoxAppendData _obj item d 
+  = withObjectRef "comboBoxAppendData" _obj $ \cobj__obj -> 
+    withStringPtr item $ \cobj_item -> 
+    wxComboBox_AppendData cobj__obj  cobj_item  d  
+foreign import ccall "wxComboBox_AppendData" wxComboBox_AppendData :: Ptr (TComboBox a) -> Ptr (TWxString b) -> Ptr  c -> IO ()
+
+-- | usage: (@comboBoxClear obj@).
+comboBoxClear :: ComboBox  a ->  IO ()
+comboBoxClear _obj 
+  = withObjectRef "comboBoxClear" _obj $ \cobj__obj -> 
+    wxComboBox_Clear cobj__obj  
+foreign import ccall "wxComboBox_Clear" wxComboBox_Clear :: Ptr (TComboBox a) -> IO ()
+
+-- | usage: (@comboBoxCopy obj@).
+comboBoxCopy :: ComboBox  a ->  IO ()
+comboBoxCopy _obj 
+  = withObjectRef "comboBoxCopy" _obj $ \cobj__obj -> 
+    wxComboBox_Copy cobj__obj  
+foreign import ccall "wxComboBox_Copy" wxComboBox_Copy :: Ptr (TComboBox a) -> IO ()
+
+-- | usage: (@comboBoxCreate prt id txt lfttopwdthgt nstr stl@).
+comboBoxCreate :: Window  a -> Id -> String -> Rect -> [String] -> Style ->  IO (ComboBox  ())
+comboBoxCreate _prt _id _txt _lfttopwdthgt nstr _stl 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    withStringPtr _txt $ \cobj__txt -> 
+    withArrayWString nstr $ \carrlen_nstr carr_nstr -> 
+    wxComboBox_Create cobj__prt  (toCInt _id)  cobj__txt  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  carrlen_nstr carr_nstr  (toCInt _stl)  
+foreign import ccall "wxComboBox_Create" wxComboBox_Create :: Ptr (TWindow a) -> CInt -> Ptr (TWxString c) -> CInt -> CInt -> CInt -> CInt -> CInt -> Ptr (Ptr CWchar) -> CInt -> IO (Ptr (TComboBox ()))
+
+-- | usage: (@comboBoxCut obj@).
+comboBoxCut :: ComboBox  a ->  IO ()
+comboBoxCut _obj 
+  = withObjectRef "comboBoxCut" _obj $ \cobj__obj -> 
+    wxComboBox_Cut cobj__obj  
+foreign import ccall "wxComboBox_Cut" wxComboBox_Cut :: Ptr (TComboBox a) -> IO ()
+
+-- | usage: (@comboBoxDelete obj n@).
+comboBoxDelete :: ComboBox  a -> Int ->  IO ()
+comboBoxDelete _obj n 
+  = withObjectRef "comboBoxDelete" _obj $ \cobj__obj -> 
+    wxComboBox_Delete cobj__obj  (toCInt n)  
+foreign import ccall "wxComboBox_Delete" wxComboBox_Delete :: Ptr (TComboBox a) -> CInt -> IO ()
+
+-- | usage: (@comboBoxFindString obj s@).
+comboBoxFindString :: ComboBox  a -> String ->  IO Int
+comboBoxFindString _obj s 
+  = withIntResult $
+    withObjectRef "comboBoxFindString" _obj $ \cobj__obj -> 
+    withStringPtr s $ \cobj_s -> 
+    wxComboBox_FindString cobj__obj  cobj_s  
+foreign import ccall "wxComboBox_FindString" wxComboBox_FindString :: Ptr (TComboBox a) -> Ptr (TWxString b) -> IO CInt
+
+-- | usage: (@comboBoxGetClientData obj n@).
+comboBoxGetClientData :: ComboBox  a -> Int ->  IO (ClientData  ())
+comboBoxGetClientData _obj n 
+  = withObjectResult $
+    withObjectRef "comboBoxGetClientData" _obj $ \cobj__obj -> 
+    wxComboBox_GetClientData cobj__obj  (toCInt n)  
+foreign import ccall "wxComboBox_GetClientData" wxComboBox_GetClientData :: Ptr (TComboBox a) -> CInt -> IO (Ptr (TClientData ()))
+
+-- | usage: (@comboBoxGetCount obj@).
+comboBoxGetCount :: ComboBox  a ->  IO Int
+comboBoxGetCount _obj 
+  = withIntResult $
+    withObjectRef "comboBoxGetCount" _obj $ \cobj__obj -> 
+    wxComboBox_GetCount cobj__obj  
+foreign import ccall "wxComboBox_GetCount" wxComboBox_GetCount :: Ptr (TComboBox a) -> IO CInt
+
+-- | usage: (@comboBoxGetInsertionPoint obj@).
+comboBoxGetInsertionPoint :: ComboBox  a ->  IO Int
+comboBoxGetInsertionPoint _obj 
+  = withIntResult $
+    withObjectRef "comboBoxGetInsertionPoint" _obj $ \cobj__obj -> 
+    wxComboBox_GetInsertionPoint cobj__obj  
+foreign import ccall "wxComboBox_GetInsertionPoint" wxComboBox_GetInsertionPoint :: Ptr (TComboBox a) -> IO CInt
+
+-- | usage: (@comboBoxGetLastPosition obj@).
+comboBoxGetLastPosition :: ComboBox  a ->  IO Int
+comboBoxGetLastPosition _obj 
+  = withIntResult $
+    withObjectRef "comboBoxGetLastPosition" _obj $ \cobj__obj -> 
+    wxComboBox_GetLastPosition cobj__obj  
+foreign import ccall "wxComboBox_GetLastPosition" wxComboBox_GetLastPosition :: Ptr (TComboBox a) -> IO CInt
+
+-- | usage: (@comboBoxGetSelection obj@).
+comboBoxGetSelection :: ComboBox  a ->  IO Int
+comboBoxGetSelection _obj 
+  = withIntResult $
+    withObjectRef "comboBoxGetSelection" _obj $ \cobj__obj -> 
+    wxComboBox_GetSelection cobj__obj  
+foreign import ccall "wxComboBox_GetSelection" wxComboBox_GetSelection :: Ptr (TComboBox a) -> IO CInt
+
+-- | usage: (@comboBoxGetString obj n@).
+comboBoxGetString :: ComboBox  a -> Int ->  IO (String)
+comboBoxGetString _obj n 
+  = withManagedStringResult $
+    withObjectRef "comboBoxGetString" _obj $ \cobj__obj -> 
+    wxComboBox_GetString cobj__obj  (toCInt n)  
+foreign import ccall "wxComboBox_GetString" wxComboBox_GetString :: Ptr (TComboBox a) -> CInt -> IO (Ptr (TWxString ()))
+
+-- | usage: (@comboBoxGetStringSelection obj@).
+comboBoxGetStringSelection :: ComboBox  a ->  IO (String)
+comboBoxGetStringSelection _obj 
+  = withManagedStringResult $
+    withObjectRef "comboBoxGetStringSelection" _obj $ \cobj__obj -> 
+    wxComboBox_GetStringSelection cobj__obj  
+foreign import ccall "wxComboBox_GetStringSelection" wxComboBox_GetStringSelection :: Ptr (TComboBox a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@comboBoxGetValue obj@).
+comboBoxGetValue :: ComboBox  a ->  IO (String)
+comboBoxGetValue _obj 
+  = withManagedStringResult $
+    withObjectRef "comboBoxGetValue" _obj $ \cobj__obj -> 
+    wxComboBox_GetValue cobj__obj  
+foreign import ccall "wxComboBox_GetValue" wxComboBox_GetValue :: Ptr (TComboBox a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@comboBoxPaste obj@).
+comboBoxPaste :: ComboBox  a ->  IO ()
+comboBoxPaste _obj 
+  = withObjectRef "comboBoxPaste" _obj $ \cobj__obj -> 
+    wxComboBox_Paste cobj__obj  
+foreign import ccall "wxComboBox_Paste" wxComboBox_Paste :: Ptr (TComboBox a) -> IO ()
+
+-- | usage: (@comboBoxRemove obj from to@).
+comboBoxRemove :: ComboBox  a -> Int -> Int ->  IO ()
+comboBoxRemove _obj from to 
+  = withObjectRef "comboBoxRemove" _obj $ \cobj__obj -> 
+    wxComboBox_Remove cobj__obj  (toCInt from)  (toCInt to)  
+foreign import ccall "wxComboBox_Remove" wxComboBox_Remove :: Ptr (TComboBox a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@comboBoxReplace obj from to value@).
+comboBoxReplace :: ComboBox  a -> Int -> Int -> String ->  IO ()
+comboBoxReplace _obj from to value 
+  = withObjectRef "comboBoxReplace" _obj $ \cobj__obj -> 
+    withStringPtr value $ \cobj_value -> 
+    wxComboBox_Replace cobj__obj  (toCInt from)  (toCInt to)  cobj_value  
+foreign import ccall "wxComboBox_Replace" wxComboBox_Replace :: Ptr (TComboBox a) -> CInt -> CInt -> Ptr (TWxString d) -> IO ()
+
+-- | usage: (@comboBoxSetClientData obj n clientData@).
+comboBoxSetClientData :: ComboBox  a -> Int -> ClientData  c ->  IO ()
+comboBoxSetClientData _obj n clientData 
+  = withObjectRef "comboBoxSetClientData" _obj $ \cobj__obj -> 
+    withObjectPtr clientData $ \cobj_clientData -> 
+    wxComboBox_SetClientData cobj__obj  (toCInt n)  cobj_clientData  
+foreign import ccall "wxComboBox_SetClientData" wxComboBox_SetClientData :: Ptr (TComboBox a) -> CInt -> Ptr (TClientData c) -> IO ()
+
+-- | usage: (@comboBoxSetEditable obj editable@).
+comboBoxSetEditable :: ComboBox  a -> Bool ->  IO ()
+comboBoxSetEditable _obj editable 
+  = withObjectRef "comboBoxSetEditable" _obj $ \cobj__obj -> 
+    wxComboBox_SetEditable cobj__obj  (toCBool editable)  
+foreign import ccall "wxComboBox_SetEditable" wxComboBox_SetEditable :: Ptr (TComboBox a) -> CBool -> IO ()
+
+-- | usage: (@comboBoxSetInsertionPoint obj pos@).
+comboBoxSetInsertionPoint :: ComboBox  a -> Int ->  IO ()
+comboBoxSetInsertionPoint _obj pos 
+  = withObjectRef "comboBoxSetInsertionPoint" _obj $ \cobj__obj -> 
+    wxComboBox_SetInsertionPoint cobj__obj  (toCInt pos)  
+foreign import ccall "wxComboBox_SetInsertionPoint" wxComboBox_SetInsertionPoint :: Ptr (TComboBox a) -> CInt -> IO ()
+
+-- | usage: (@comboBoxSetInsertionPointEnd obj@).
+comboBoxSetInsertionPointEnd :: ComboBox  a ->  IO ()
+comboBoxSetInsertionPointEnd _obj 
+  = withObjectRef "comboBoxSetInsertionPointEnd" _obj $ \cobj__obj -> 
+    wxComboBox_SetInsertionPointEnd cobj__obj  
+foreign import ccall "wxComboBox_SetInsertionPointEnd" wxComboBox_SetInsertionPointEnd :: Ptr (TComboBox a) -> IO ()
+
+-- | usage: (@comboBoxSetSelection obj n@).
+comboBoxSetSelection :: ComboBox  a -> Int ->  IO ()
+comboBoxSetSelection _obj n 
+  = withObjectRef "comboBoxSetSelection" _obj $ \cobj__obj -> 
+    wxComboBox_SetSelection cobj__obj  (toCInt n)  
+foreign import ccall "wxComboBox_SetSelection" wxComboBox_SetSelection :: Ptr (TComboBox a) -> CInt -> IO ()
+
+-- | usage: (@comboBoxSetTextSelection obj from to@).
+comboBoxSetTextSelection :: ComboBox  a -> Int -> Int ->  IO ()
+comboBoxSetTextSelection _obj from to 
+  = withObjectRef "comboBoxSetTextSelection" _obj $ \cobj__obj -> 
+    wxComboBox_SetTextSelection cobj__obj  (toCInt from)  (toCInt to)  
+foreign import ccall "wxComboBox_SetTextSelection" wxComboBox_SetTextSelection :: Ptr (TComboBox a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@comboBoxSetValue obj value@).
+comboBoxSetValue :: ComboBox  a -> String ->  IO ()
+comboBoxSetValue _obj value 
+  = withObjectRef "comboBoxSetValue" _obj $ \cobj__obj -> 
+    withStringPtr value $ \cobj_value -> 
+    wxComboBox_SetValue cobj__obj  cobj_value  
+foreign import ccall "wxComboBox_SetValue" wxComboBox_SetValue :: Ptr (TComboBox a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@commandEventCopyObject obj objectdest@).
+commandEventCopyObject :: CommandEvent  a -> Ptr  b ->  IO ()
+commandEventCopyObject _obj objectdest 
+  = withObjectRef "commandEventCopyObject" _obj $ \cobj__obj -> 
+    wxCommandEvent_CopyObject cobj__obj  objectdest  
+foreign import ccall "wxCommandEvent_CopyObject" wxCommandEvent_CopyObject :: Ptr (TCommandEvent a) -> Ptr  b -> IO ()
+
+-- | usage: (@commandEventCreate typ id@).
+commandEventCreate :: Int -> Id ->  IO (CommandEvent  ())
+commandEventCreate _typ _id 
+  = withObjectResult $
+    wxCommandEvent_Create (toCInt _typ)  (toCInt _id)  
+foreign import ccall "wxCommandEvent_Create" wxCommandEvent_Create :: CInt -> CInt -> IO (Ptr (TCommandEvent ()))
+
+-- | usage: (@commandEventDelete obj@).
+commandEventDelete :: CommandEvent  a ->  IO ()
+commandEventDelete
+  = objectDelete
+
+
+-- | usage: (@commandEventGetClientData obj@).
+commandEventGetClientData :: CommandEvent  a ->  IO (ClientData  ())
+commandEventGetClientData _obj 
+  = withObjectResult $
+    withObjectRef "commandEventGetClientData" _obj $ \cobj__obj -> 
+    wxCommandEvent_GetClientData cobj__obj  
+foreign import ccall "wxCommandEvent_GetClientData" wxCommandEvent_GetClientData :: Ptr (TCommandEvent a) -> IO (Ptr (TClientData ()))
+
+-- | usage: (@commandEventGetClientObject obj@).
+commandEventGetClientObject :: CommandEvent  a ->  IO (ClientData  ())
+commandEventGetClientObject _obj 
+  = withObjectResult $
+    withObjectRef "commandEventGetClientObject" _obj $ \cobj__obj -> 
+    wxCommandEvent_GetClientObject cobj__obj  
+foreign import ccall "wxCommandEvent_GetClientObject" wxCommandEvent_GetClientObject :: Ptr (TCommandEvent a) -> IO (Ptr (TClientData ()))
+
+-- | usage: (@commandEventGetExtraLong obj@).
+commandEventGetExtraLong :: CommandEvent  a ->  IO Int
+commandEventGetExtraLong _obj 
+  = withIntResult $
+    withObjectRef "commandEventGetExtraLong" _obj $ \cobj__obj -> 
+    wxCommandEvent_GetExtraLong cobj__obj  
+foreign import ccall "wxCommandEvent_GetExtraLong" wxCommandEvent_GetExtraLong :: Ptr (TCommandEvent a) -> IO CInt
+
+-- | usage: (@commandEventGetInt obj@).
+commandEventGetInt :: CommandEvent  a ->  IO Int
+commandEventGetInt _obj 
+  = withIntResult $
+    withObjectRef "commandEventGetInt" _obj $ \cobj__obj -> 
+    wxCommandEvent_GetInt cobj__obj  
+foreign import ccall "wxCommandEvent_GetInt" wxCommandEvent_GetInt :: Ptr (TCommandEvent a) -> IO CInt
+
+-- | usage: (@commandEventGetSelection obj@).
+commandEventGetSelection :: CommandEvent  a ->  IO Int
+commandEventGetSelection _obj 
+  = withIntResult $
+    withObjectRef "commandEventGetSelection" _obj $ \cobj__obj -> 
+    wxCommandEvent_GetSelection cobj__obj  
+foreign import ccall "wxCommandEvent_GetSelection" wxCommandEvent_GetSelection :: Ptr (TCommandEvent a) -> IO CInt
+
+-- | usage: (@commandEventGetString obj@).
+commandEventGetString :: CommandEvent  a ->  IO (String)
+commandEventGetString _obj 
+  = withManagedStringResult $
+    withObjectRef "commandEventGetString" _obj $ \cobj__obj -> 
+    wxCommandEvent_GetString cobj__obj  
+foreign import ccall "wxCommandEvent_GetString" wxCommandEvent_GetString :: Ptr (TCommandEvent a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@commandEventIsChecked obj@).
+commandEventIsChecked :: CommandEvent  a ->  IO Bool
+commandEventIsChecked _obj 
+  = withBoolResult $
+    withObjectRef "commandEventIsChecked" _obj $ \cobj__obj -> 
+    wxCommandEvent_IsChecked cobj__obj  
+foreign import ccall "wxCommandEvent_IsChecked" wxCommandEvent_IsChecked :: Ptr (TCommandEvent a) -> IO CBool
+
+-- | usage: (@commandEventIsSelection obj@).
+commandEventIsSelection :: CommandEvent  a ->  IO Bool
+commandEventIsSelection _obj 
+  = withBoolResult $
+    withObjectRef "commandEventIsSelection" _obj $ \cobj__obj -> 
+    wxCommandEvent_IsSelection cobj__obj  
+foreign import ccall "wxCommandEvent_IsSelection" wxCommandEvent_IsSelection :: Ptr (TCommandEvent a) -> IO CBool
+
+-- | usage: (@commandEventSetClientData obj clientData@).
+commandEventSetClientData :: CommandEvent  a -> ClientData  b ->  IO ()
+commandEventSetClientData _obj clientData 
+  = withObjectRef "commandEventSetClientData" _obj $ \cobj__obj -> 
+    withObjectPtr clientData $ \cobj_clientData -> 
+    wxCommandEvent_SetClientData cobj__obj  cobj_clientData  
+foreign import ccall "wxCommandEvent_SetClientData" wxCommandEvent_SetClientData :: Ptr (TCommandEvent a) -> Ptr (TClientData b) -> IO ()
+
+-- | usage: (@commandEventSetClientObject obj clientObject@).
+commandEventSetClientObject :: CommandEvent  a -> ClientData  b ->  IO ()
+commandEventSetClientObject _obj clientObject 
+  = withObjectRef "commandEventSetClientObject" _obj $ \cobj__obj -> 
+    withObjectPtr clientObject $ \cobj_clientObject -> 
+    wxCommandEvent_SetClientObject cobj__obj  cobj_clientObject  
+foreign import ccall "wxCommandEvent_SetClientObject" wxCommandEvent_SetClientObject :: Ptr (TCommandEvent a) -> Ptr (TClientData b) -> IO ()
+
+-- | usage: (@commandEventSetExtraLong obj extraLong@).
+commandEventSetExtraLong :: CommandEvent  a -> Int ->  IO ()
+commandEventSetExtraLong _obj extraLong 
+  = withObjectRef "commandEventSetExtraLong" _obj $ \cobj__obj -> 
+    wxCommandEvent_SetExtraLong cobj__obj  (toCInt extraLong)  
+foreign import ccall "wxCommandEvent_SetExtraLong" wxCommandEvent_SetExtraLong :: Ptr (TCommandEvent a) -> CInt -> IO ()
+
+-- | usage: (@commandEventSetInt obj i@).
+commandEventSetInt :: CommandEvent  a -> Int ->  IO ()
+commandEventSetInt _obj i 
+  = withObjectRef "commandEventSetInt" _obj $ \cobj__obj -> 
+    wxCommandEvent_SetInt cobj__obj  (toCInt i)  
+foreign import ccall "wxCommandEvent_SetInt" wxCommandEvent_SetInt :: Ptr (TCommandEvent a) -> CInt -> IO ()
+
+-- | usage: (@commandEventSetString obj s@).
+commandEventSetString :: CommandEvent  a -> String ->  IO ()
+commandEventSetString _obj s 
+  = withObjectRef "commandEventSetString" _obj $ \cobj__obj -> 
+    withStringPtr s $ \cobj_s -> 
+    wxCommandEvent_SetString cobj__obj  cobj_s  
+foreign import ccall "wxCommandEvent_SetString" wxCommandEvent_SetString :: Ptr (TCommandEvent a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@configBaseCreate@).
+configBaseCreate ::  IO (ConfigBase  ())
+configBaseCreate 
+  = withObjectResult $
+    wxConfigBase_Create 
+foreign import ccall "wxConfigBase_Create" wxConfigBase_Create :: IO (Ptr (TConfigBase ()))
+
+-- | usage: (@configBaseDelete obj@).
+configBaseDelete :: ConfigBase  a ->  IO ()
+configBaseDelete _obj 
+  = withObjectRef "configBaseDelete" _obj $ \cobj__obj -> 
+    wxConfigBase_Delete cobj__obj  
+foreign import ccall "wxConfigBase_Delete" wxConfigBase_Delete :: Ptr (TConfigBase a) -> IO ()
+
+-- | usage: (@configBaseDeleteAll obj@).
+configBaseDeleteAll :: ConfigBase  a ->  IO Bool
+configBaseDeleteAll _obj 
+  = withBoolResult $
+    withObjectRef "configBaseDeleteAll" _obj $ \cobj__obj -> 
+    wxConfigBase_DeleteAll cobj__obj  
+foreign import ccall "wxConfigBase_DeleteAll" wxConfigBase_DeleteAll :: Ptr (TConfigBase a) -> IO CBool
+
+-- | usage: (@configBaseDeleteEntry obj key bDeleteGroupIfEmpty@).
+configBaseDeleteEntry :: ConfigBase  a -> String -> Bool ->  IO Bool
+configBaseDeleteEntry _obj key bDeleteGroupIfEmpty 
+  = withBoolResult $
+    withObjectRef "configBaseDeleteEntry" _obj $ \cobj__obj -> 
+    withStringPtr key $ \cobj_key -> 
+    wxConfigBase_DeleteEntry cobj__obj  cobj_key  (toCBool bDeleteGroupIfEmpty)  
+foreign import ccall "wxConfigBase_DeleteEntry" wxConfigBase_DeleteEntry :: Ptr (TConfigBase a) -> Ptr (TWxString b) -> CBool -> IO CBool
+
+-- | usage: (@configBaseDeleteGroup obj key@).
+configBaseDeleteGroup :: ConfigBase  a -> String ->  IO Bool
+configBaseDeleteGroup _obj key 
+  = withBoolResult $
+    withObjectRef "configBaseDeleteGroup" _obj $ \cobj__obj -> 
+    withStringPtr key $ \cobj_key -> 
+    wxConfigBase_DeleteGroup cobj__obj  cobj_key  
+foreign import ccall "wxConfigBase_DeleteGroup" wxConfigBase_DeleteGroup :: Ptr (TConfigBase a) -> Ptr (TWxString b) -> IO CBool
+
+-- | usage: (@configBaseExists obj strName@).
+configBaseExists :: ConfigBase  a -> String ->  IO Bool
+configBaseExists _obj strName 
+  = withBoolResult $
+    withObjectRef "configBaseExists" _obj $ \cobj__obj -> 
+    withStringPtr strName $ \cobj_strName -> 
+    wxConfigBase_Exists cobj__obj  cobj_strName  
+foreign import ccall "wxConfigBase_Exists" wxConfigBase_Exists :: Ptr (TConfigBase a) -> Ptr (TWxString b) -> IO CBool
+
+-- | usage: (@configBaseExpandEnvVars obj str@).
+configBaseExpandEnvVars :: ConfigBase  a -> String ->  IO (String)
+configBaseExpandEnvVars _obj str 
+  = withManagedStringResult $
+    withObjectRef "configBaseExpandEnvVars" _obj $ \cobj__obj -> 
+    withStringPtr str $ \cobj_str -> 
+    wxConfigBase_ExpandEnvVars cobj__obj  cobj_str  
+foreign import ccall "wxConfigBase_ExpandEnvVars" wxConfigBase_ExpandEnvVars :: Ptr (TConfigBase a) -> Ptr (TWxString b) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@configBaseFlush obj bCurrentOnly@).
+configBaseFlush :: ConfigBase  a -> Bool ->  IO Bool
+configBaseFlush _obj bCurrentOnly 
+  = withBoolResult $
+    withObjectRef "configBaseFlush" _obj $ \cobj__obj -> 
+    wxConfigBase_Flush cobj__obj  (toCBool bCurrentOnly)  
+foreign import ccall "wxConfigBase_Flush" wxConfigBase_Flush :: Ptr (TConfigBase a) -> CBool -> IO CBool
+
+-- | usage: (@configBaseGet@).
+configBaseGet ::  IO (ConfigBase  ())
+configBaseGet 
+  = withObjectResult $
+    wxConfigBase_Get 
+foreign import ccall "wxConfigBase_Get" wxConfigBase_Get :: IO (Ptr (TConfigBase ()))
+
+-- | usage: (@configBaseGetAppName obj@).
+configBaseGetAppName :: ConfigBase  a ->  IO (String)
+configBaseGetAppName _obj 
+  = withManagedStringResult $
+    withObjectRef "configBaseGetAppName" _obj $ \cobj__obj -> 
+    wxConfigBase_GetAppName cobj__obj  
+foreign import ccall "wxConfigBase_GetAppName" wxConfigBase_GetAppName :: Ptr (TConfigBase a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@configBaseGetEntryType obj name@).
+configBaseGetEntryType :: ConfigBase  a -> String ->  IO Int
+configBaseGetEntryType _obj name 
+  = withIntResult $
+    withObjectRef "configBaseGetEntryType" _obj $ \cobj__obj -> 
+    withStringPtr name $ \cobj_name -> 
+    wxConfigBase_GetEntryType cobj__obj  cobj_name  
+foreign import ccall "wxConfigBase_GetEntryType" wxConfigBase_GetEntryType :: Ptr (TConfigBase a) -> Ptr (TWxString b) -> IO CInt
+
+-- | usage: (@configBaseGetFirstEntry obj lIndex@).
+configBaseGetFirstEntry :: ConfigBase  a -> Ptr  b ->  IO (String)
+configBaseGetFirstEntry _obj lIndex 
+  = withManagedStringResult $
+    withObjectRef "configBaseGetFirstEntry" _obj $ \cobj__obj -> 
+    wxConfigBase_GetFirstEntry cobj__obj  lIndex  
+foreign import ccall "wxConfigBase_GetFirstEntry" wxConfigBase_GetFirstEntry :: Ptr (TConfigBase a) -> Ptr  b -> IO (Ptr (TWxString ()))
+
+-- | usage: (@configBaseGetFirstGroup obj lIndex@).
+configBaseGetFirstGroup :: ConfigBase  a -> Ptr  b ->  IO (String)
+configBaseGetFirstGroup _obj lIndex 
+  = withManagedStringResult $
+    withObjectRef "configBaseGetFirstGroup" _obj $ \cobj__obj -> 
+    wxConfigBase_GetFirstGroup cobj__obj  lIndex  
+foreign import ccall "wxConfigBase_GetFirstGroup" wxConfigBase_GetFirstGroup :: Ptr (TConfigBase a) -> Ptr  b -> IO (Ptr (TWxString ()))
+
+-- | usage: (@configBaseGetNextEntry obj lIndex@).
+configBaseGetNextEntry :: ConfigBase  a -> Ptr  b ->  IO (String)
+configBaseGetNextEntry _obj lIndex 
+  = withManagedStringResult $
+    withObjectRef "configBaseGetNextEntry" _obj $ \cobj__obj -> 
+    wxConfigBase_GetNextEntry cobj__obj  lIndex  
+foreign import ccall "wxConfigBase_GetNextEntry" wxConfigBase_GetNextEntry :: Ptr (TConfigBase a) -> Ptr  b -> IO (Ptr (TWxString ()))
+
+-- | usage: (@configBaseGetNextGroup obj lIndex@).
+configBaseGetNextGroup :: ConfigBase  a -> Ptr  b ->  IO (String)
+configBaseGetNextGroup _obj lIndex 
+  = withManagedStringResult $
+    withObjectRef "configBaseGetNextGroup" _obj $ \cobj__obj -> 
+    wxConfigBase_GetNextGroup cobj__obj  lIndex  
+foreign import ccall "wxConfigBase_GetNextGroup" wxConfigBase_GetNextGroup :: Ptr (TConfigBase a) -> Ptr  b -> IO (Ptr (TWxString ()))
+
+-- | usage: (@configBaseGetNumberOfEntries obj bRecursive@).
+configBaseGetNumberOfEntries :: ConfigBase  a -> Bool ->  IO Int
+configBaseGetNumberOfEntries _obj bRecursive 
+  = withIntResult $
+    withObjectRef "configBaseGetNumberOfEntries" _obj $ \cobj__obj -> 
+    wxConfigBase_GetNumberOfEntries cobj__obj  (toCBool bRecursive)  
+foreign import ccall "wxConfigBase_GetNumberOfEntries" wxConfigBase_GetNumberOfEntries :: Ptr (TConfigBase a) -> CBool -> IO CInt
+
+-- | usage: (@configBaseGetNumberOfGroups obj bRecursive@).
+configBaseGetNumberOfGroups :: ConfigBase  a -> Bool ->  IO Int
+configBaseGetNumberOfGroups _obj bRecursive 
+  = withIntResult $
+    withObjectRef "configBaseGetNumberOfGroups" _obj $ \cobj__obj -> 
+    wxConfigBase_GetNumberOfGroups cobj__obj  (toCBool bRecursive)  
+foreign import ccall "wxConfigBase_GetNumberOfGroups" wxConfigBase_GetNumberOfGroups :: Ptr (TConfigBase a) -> CBool -> IO CInt
+
+-- | usage: (@configBaseGetPath obj@).
+configBaseGetPath :: ConfigBase  a ->  IO (String)
+configBaseGetPath _obj 
+  = withManagedStringResult $
+    withObjectRef "configBaseGetPath" _obj $ \cobj__obj -> 
+    wxConfigBase_GetPath cobj__obj  
+foreign import ccall "wxConfigBase_GetPath" wxConfigBase_GetPath :: Ptr (TConfigBase a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@configBaseGetStyle obj@).
+configBaseGetStyle :: ConfigBase  a ->  IO Int
+configBaseGetStyle _obj 
+  = withIntResult $
+    withObjectRef "configBaseGetStyle" _obj $ \cobj__obj -> 
+    wxConfigBase_GetStyle cobj__obj  
+foreign import ccall "wxConfigBase_GetStyle" wxConfigBase_GetStyle :: Ptr (TConfigBase a) -> IO CInt
+
+-- | usage: (@configBaseGetVendorName obj@).
+configBaseGetVendorName :: ConfigBase  a ->  IO (String)
+configBaseGetVendorName _obj 
+  = withManagedStringResult $
+    withObjectRef "configBaseGetVendorName" _obj $ \cobj__obj -> 
+    wxConfigBase_GetVendorName cobj__obj  
+foreign import ccall "wxConfigBase_GetVendorName" wxConfigBase_GetVendorName :: Ptr (TConfigBase a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@configBaseHasEntry obj strName@).
+configBaseHasEntry :: ConfigBase  a -> String ->  IO Bool
+configBaseHasEntry _obj strName 
+  = withBoolResult $
+    withObjectRef "configBaseHasEntry" _obj $ \cobj__obj -> 
+    withStringPtr strName $ \cobj_strName -> 
+    wxConfigBase_HasEntry cobj__obj  cobj_strName  
+foreign import ccall "wxConfigBase_HasEntry" wxConfigBase_HasEntry :: Ptr (TConfigBase a) -> Ptr (TWxString b) -> IO CBool
+
+-- | usage: (@configBaseHasGroup obj strName@).
+configBaseHasGroup :: ConfigBase  a -> String ->  IO Bool
+configBaseHasGroup _obj strName 
+  = withBoolResult $
+    withObjectRef "configBaseHasGroup" _obj $ \cobj__obj -> 
+    withStringPtr strName $ \cobj_strName -> 
+    wxConfigBase_HasGroup cobj__obj  cobj_strName  
+foreign import ccall "wxConfigBase_HasGroup" wxConfigBase_HasGroup :: Ptr (TConfigBase a) -> Ptr (TWxString b) -> IO CBool
+
+-- | usage: (@configBaseIsExpandingEnvVars obj@).
+configBaseIsExpandingEnvVars :: ConfigBase  a ->  IO Bool
+configBaseIsExpandingEnvVars _obj 
+  = withBoolResult $
+    withObjectRef "configBaseIsExpandingEnvVars" _obj $ \cobj__obj -> 
+    wxConfigBase_IsExpandingEnvVars cobj__obj  
+foreign import ccall "wxConfigBase_IsExpandingEnvVars" wxConfigBase_IsExpandingEnvVars :: Ptr (TConfigBase a) -> IO CBool
+
+-- | usage: (@configBaseIsRecordingDefaults obj@).
+configBaseIsRecordingDefaults :: ConfigBase  a ->  IO Bool
+configBaseIsRecordingDefaults _obj 
+  = withBoolResult $
+    withObjectRef "configBaseIsRecordingDefaults" _obj $ \cobj__obj -> 
+    wxConfigBase_IsRecordingDefaults cobj__obj  
+foreign import ccall "wxConfigBase_IsRecordingDefaults" wxConfigBase_IsRecordingDefaults :: Ptr (TConfigBase a) -> IO CBool
+
+-- | usage: (@configBaseReadBool obj key defVal@).
+configBaseReadBool :: ConfigBase  a -> String -> Bool ->  IO Bool
+configBaseReadBool _obj key defVal 
+  = withBoolResult $
+    withObjectRef "configBaseReadBool" _obj $ \cobj__obj -> 
+    withStringPtr key $ \cobj_key -> 
+    wxConfigBase_ReadBool cobj__obj  cobj_key  (toCBool defVal)  
+foreign import ccall "wxConfigBase_ReadBool" wxConfigBase_ReadBool :: Ptr (TConfigBase a) -> Ptr (TWxString b) -> CBool -> IO CBool
+
+-- | usage: (@configBaseReadDouble obj key defVal@).
+configBaseReadDouble :: ConfigBase  a -> String -> Double ->  IO Double
+configBaseReadDouble _obj key defVal 
+  = withObjectRef "configBaseReadDouble" _obj $ \cobj__obj -> 
+    withStringPtr key $ \cobj_key -> 
+    wxConfigBase_ReadDouble cobj__obj  cobj_key  defVal  
+foreign import ccall "wxConfigBase_ReadDouble" wxConfigBase_ReadDouble :: Ptr (TConfigBase a) -> Ptr (TWxString b) -> Double -> IO Double
+
+-- | usage: (@configBaseReadInteger obj key defVal@).
+configBaseReadInteger :: ConfigBase  a -> String -> Int ->  IO Int
+configBaseReadInteger _obj key defVal 
+  = withIntResult $
+    withObjectRef "configBaseReadInteger" _obj $ \cobj__obj -> 
+    withStringPtr key $ \cobj_key -> 
+    wxConfigBase_ReadInteger cobj__obj  cobj_key  (toCInt defVal)  
+foreign import ccall "wxConfigBase_ReadInteger" wxConfigBase_ReadInteger :: Ptr (TConfigBase a) -> Ptr (TWxString b) -> CInt -> IO CInt
+
+-- | usage: (@configBaseReadString obj key defVal@).
+configBaseReadString :: ConfigBase  a -> String -> String ->  IO (String)
+configBaseReadString _obj key defVal 
+  = withManagedStringResult $
+    withObjectRef "configBaseReadString" _obj $ \cobj__obj -> 
+    withStringPtr key $ \cobj_key -> 
+    withStringPtr defVal $ \cobj_defVal -> 
+    wxConfigBase_ReadString cobj__obj  cobj_key  cobj_defVal  
+foreign import ccall "wxConfigBase_ReadString" wxConfigBase_ReadString :: Ptr (TConfigBase a) -> Ptr (TWxString b) -> Ptr (TWxString c) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@configBaseRenameEntry obj oldName newName@).
+configBaseRenameEntry :: ConfigBase  a -> String -> String ->  IO Bool
+configBaseRenameEntry _obj oldName newName 
+  = withBoolResult $
+    withObjectRef "configBaseRenameEntry" _obj $ \cobj__obj -> 
+    withStringPtr oldName $ \cobj_oldName -> 
+    withStringPtr newName $ \cobj_newName -> 
+    wxConfigBase_RenameEntry cobj__obj  cobj_oldName  cobj_newName  
+foreign import ccall "wxConfigBase_RenameEntry" wxConfigBase_RenameEntry :: Ptr (TConfigBase a) -> Ptr (TWxString b) -> Ptr (TWxString c) -> IO CBool
+
+-- | usage: (@configBaseRenameGroup obj oldName newName@).
+configBaseRenameGroup :: ConfigBase  a -> String -> String ->  IO Bool
+configBaseRenameGroup _obj oldName newName 
+  = withBoolResult $
+    withObjectRef "configBaseRenameGroup" _obj $ \cobj__obj -> 
+    withStringPtr oldName $ \cobj_oldName -> 
+    withStringPtr newName $ \cobj_newName -> 
+    wxConfigBase_RenameGroup cobj__obj  cobj_oldName  cobj_newName  
+foreign import ccall "wxConfigBase_RenameGroup" wxConfigBase_RenameGroup :: Ptr (TConfigBase a) -> Ptr (TWxString b) -> Ptr (TWxString c) -> IO CBool
+
+-- | usage: (@configBaseSet self@).
+configBaseSet :: ConfigBase  a ->  IO ()
+configBaseSet self 
+  = withObjectRef "configBaseSet" self $ \cobj_self -> 
+    wxConfigBase_Set cobj_self  
+foreign import ccall "wxConfigBase_Set" wxConfigBase_Set :: Ptr (TConfigBase a) -> IO ()
+
+-- | usage: (@configBaseSetAppName obj appName@).
+configBaseSetAppName :: ConfigBase  a -> String ->  IO ()
+configBaseSetAppName _obj appName 
+  = withObjectRef "configBaseSetAppName" _obj $ \cobj__obj -> 
+    withStringPtr appName $ \cobj_appName -> 
+    wxConfigBase_SetAppName cobj__obj  cobj_appName  
+foreign import ccall "wxConfigBase_SetAppName" wxConfigBase_SetAppName :: Ptr (TConfigBase a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@configBaseSetExpandEnvVars obj bDoIt@).
+configBaseSetExpandEnvVars :: ConfigBase  a -> Bool ->  IO ()
+configBaseSetExpandEnvVars _obj bDoIt 
+  = withObjectRef "configBaseSetExpandEnvVars" _obj $ \cobj__obj -> 
+    wxConfigBase_SetExpandEnvVars cobj__obj  (toCBool bDoIt)  
+foreign import ccall "wxConfigBase_SetExpandEnvVars" wxConfigBase_SetExpandEnvVars :: Ptr (TConfigBase a) -> CBool -> IO ()
+
+-- | usage: (@configBaseSetPath obj strPath@).
+configBaseSetPath :: ConfigBase  a -> String ->  IO ()
+configBaseSetPath _obj strPath 
+  = withObjectRef "configBaseSetPath" _obj $ \cobj__obj -> 
+    withStringPtr strPath $ \cobj_strPath -> 
+    wxConfigBase_SetPath cobj__obj  cobj_strPath  
+foreign import ccall "wxConfigBase_SetPath" wxConfigBase_SetPath :: Ptr (TConfigBase a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@configBaseSetRecordDefaults obj bDoIt@).
+configBaseSetRecordDefaults :: ConfigBase  a -> Bool ->  IO ()
+configBaseSetRecordDefaults _obj bDoIt 
+  = withObjectRef "configBaseSetRecordDefaults" _obj $ \cobj__obj -> 
+    wxConfigBase_SetRecordDefaults cobj__obj  (toCBool bDoIt)  
+foreign import ccall "wxConfigBase_SetRecordDefaults" wxConfigBase_SetRecordDefaults :: Ptr (TConfigBase a) -> CBool -> IO ()
+
+-- | usage: (@configBaseSetStyle obj style@).
+configBaseSetStyle :: ConfigBase  a -> Int ->  IO ()
+configBaseSetStyle _obj style 
+  = withObjectRef "configBaseSetStyle" _obj $ \cobj__obj -> 
+    wxConfigBase_SetStyle cobj__obj  (toCInt style)  
+foreign import ccall "wxConfigBase_SetStyle" wxConfigBase_SetStyle :: Ptr (TConfigBase a) -> CInt -> IO ()
+
+-- | usage: (@configBaseSetVendorName obj vendorName@).
+configBaseSetVendorName :: ConfigBase  a -> String ->  IO ()
+configBaseSetVendorName _obj vendorName 
+  = withObjectRef "configBaseSetVendorName" _obj $ \cobj__obj -> 
+    withStringPtr vendorName $ \cobj_vendorName -> 
+    wxConfigBase_SetVendorName cobj__obj  cobj_vendorName  
+foreign import ccall "wxConfigBase_SetVendorName" wxConfigBase_SetVendorName :: Ptr (TConfigBase a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@configBaseWriteBool obj key value@).
+configBaseWriteBool :: ConfigBase  a -> String -> Bool ->  IO Bool
+configBaseWriteBool _obj key value 
+  = withBoolResult $
+    withObjectRef "configBaseWriteBool" _obj $ \cobj__obj -> 
+    withStringPtr key $ \cobj_key -> 
+    wxConfigBase_WriteBool cobj__obj  cobj_key  (toCBool value)  
+foreign import ccall "wxConfigBase_WriteBool" wxConfigBase_WriteBool :: Ptr (TConfigBase a) -> Ptr (TWxString b) -> CBool -> IO CBool
+
+-- | usage: (@configBaseWriteDouble obj key value@).
+configBaseWriteDouble :: ConfigBase  a -> String -> Double ->  IO Bool
+configBaseWriteDouble _obj key value 
+  = withBoolResult $
+    withObjectRef "configBaseWriteDouble" _obj $ \cobj__obj -> 
+    withStringPtr key $ \cobj_key -> 
+    wxConfigBase_WriteDouble cobj__obj  cobj_key  value  
+foreign import ccall "wxConfigBase_WriteDouble" wxConfigBase_WriteDouble :: Ptr (TConfigBase a) -> Ptr (TWxString b) -> Double -> IO CBool
+
+-- | usage: (@configBaseWriteInteger obj key value@).
+configBaseWriteInteger :: ConfigBase  a -> String -> Int ->  IO Bool
+configBaseWriteInteger _obj key value 
+  = withBoolResult $
+    withObjectRef "configBaseWriteInteger" _obj $ \cobj__obj -> 
+    withStringPtr key $ \cobj_key -> 
+    wxConfigBase_WriteInteger cobj__obj  cobj_key  (toCInt value)  
+foreign import ccall "wxConfigBase_WriteInteger" wxConfigBase_WriteInteger :: Ptr (TConfigBase a) -> Ptr (TWxString b) -> CInt -> IO CBool
+
+-- | usage: (@configBaseWriteLong obj key value@).
+configBaseWriteLong :: ConfigBase  a -> String -> Int ->  IO Bool
+configBaseWriteLong _obj key value 
+  = withBoolResult $
+    withObjectRef "configBaseWriteLong" _obj $ \cobj__obj -> 
+    withStringPtr key $ \cobj_key -> 
+    wxConfigBase_WriteLong cobj__obj  cobj_key  (toCInt value)  
+foreign import ccall "wxConfigBase_WriteLong" wxConfigBase_WriteLong :: Ptr (TConfigBase a) -> Ptr (TWxString b) -> CInt -> IO CBool
+
+-- | usage: (@configBaseWriteString obj key value@).
+configBaseWriteString :: ConfigBase  a -> String -> String ->  IO Bool
+configBaseWriteString _obj key value 
+  = withBoolResult $
+    withObjectRef "configBaseWriteString" _obj $ \cobj__obj -> 
+    withStringPtr key $ \cobj_key -> 
+    withStringPtr value $ \cobj_value -> 
+    wxConfigBase_WriteString cobj__obj  cobj_key  cobj_value  
+foreign import ccall "wxConfigBase_WriteString" wxConfigBase_WriteString :: Ptr (TConfigBase a) -> Ptr (TWxString b) -> Ptr (TWxString c) -> IO CBool
+
+-- | usage: (@contextHelpBeginContextHelp obj win@).
+contextHelpBeginContextHelp :: ContextHelp  a -> Window  b ->  IO Bool
+contextHelpBeginContextHelp _obj win 
+  = withBoolResult $
+    withObjectRef "contextHelpBeginContextHelp" _obj $ \cobj__obj -> 
+    withObjectPtr win $ \cobj_win -> 
+    wxContextHelp_BeginContextHelp cobj__obj  cobj_win  
+foreign import ccall "wxContextHelp_BeginContextHelp" wxContextHelp_BeginContextHelp :: Ptr (TContextHelp a) -> Ptr (TWindow b) -> IO CBool
+
+-- | usage: (@contextHelpButtonCreate parent id xywh style@).
+contextHelpButtonCreate :: Window  a -> Id -> Rect -> Int ->  IO (ContextHelpButton  ())
+contextHelpButtonCreate parent id xywh style 
+  = withObjectResult $
+    withObjectPtr parent $ \cobj_parent -> 
+    wxContextHelpButton_Create cobj_parent  (toCInt id)  (toCIntRectX xywh) (toCIntRectY xywh)(toCIntRectW xywh) (toCIntRectH xywh)  (toCInt style)  
+foreign import ccall "wxContextHelpButton_Create" wxContextHelpButton_Create :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TContextHelpButton ()))
+
+-- | usage: (@contextHelpCreate win beginHelp@).
+contextHelpCreate :: Window  a -> Bool ->  IO (ContextHelp  ())
+contextHelpCreate win beginHelp 
+  = withObjectResult $
+    withObjectPtr win $ \cobj_win -> 
+    wxContextHelp_Create cobj_win  (toCBool beginHelp)  
+foreign import ccall "wxContextHelp_Create" wxContextHelp_Create :: Ptr (TWindow a) -> CBool -> IO (Ptr (TContextHelp ()))
+
+-- | usage: (@contextHelpDelete obj@).
+contextHelpDelete :: ContextHelp  a ->  IO ()
+contextHelpDelete
+  = objectDelete
+
+
+-- | usage: (@contextHelpEndContextHelp obj@).
+contextHelpEndContextHelp :: ContextHelp  a ->  IO Bool
+contextHelpEndContextHelp _obj 
+  = withBoolResult $
+    withObjectRef "contextHelpEndContextHelp" _obj $ \cobj__obj -> 
+    wxContextHelp_EndContextHelp cobj__obj  
+foreign import ccall "wxContextHelp_EndContextHelp" wxContextHelp_EndContextHelp :: Ptr (TContextHelp a) -> IO CBool
+
+-- | usage: (@controlCommand obj event@).
+controlCommand :: Control  a -> Event  b ->  IO ()
+controlCommand _obj event 
+  = withObjectRef "controlCommand" _obj $ \cobj__obj -> 
+    withObjectPtr event $ \cobj_event -> 
+    wxControl_Command cobj__obj  cobj_event  
+foreign import ccall "wxControl_Command" wxControl_Command :: Ptr (TControl a) -> Ptr (TEvent b) -> IO ()
+
+-- | usage: (@controlGetLabel obj@).
+controlGetLabel :: Control  a ->  IO (String)
+controlGetLabel _obj 
+  = withManagedStringResult $
+    withObjectRef "controlGetLabel" _obj $ \cobj__obj -> 
+    wxControl_GetLabel cobj__obj  
+foreign import ccall "wxControl_GetLabel" wxControl_GetLabel :: Ptr (TControl a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@controlSetLabel obj text@).
+controlSetLabel :: Control  a -> String ->  IO ()
+controlSetLabel _obj text 
+  = withObjectRef "controlSetLabel" _obj $ \cobj__obj -> 
+    withStringPtr text $ \cobj_text -> 
+    wxControl_SetLabel cobj__obj  cobj_text  
+foreign import ccall "wxControl_SetLabel" wxControl_SetLabel :: Ptr (TControl a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@cursorCreateFromImage image@).
+cursorCreateFromImage :: Image  a ->  IO (Cursor  ())
+cursorCreateFromImage image 
+  = withManagedCursorResult $
+    withObjectPtr image $ \cobj_image -> 
+    wx_Cursor_CreateFromImage cobj_image  
+foreign import ccall "Cursor_CreateFromImage" wx_Cursor_CreateFromImage :: Ptr (TImage a) -> IO (Ptr (TCursor ()))
+
+-- | usage: (@cursorCreateFromStock id@).
+cursorCreateFromStock :: Id ->  IO (Cursor  ())
+cursorCreateFromStock _id 
+  = withManagedCursorResult $
+    wx_Cursor_CreateFromStock (toCInt _id)  
+foreign import ccall "Cursor_CreateFromStock" wx_Cursor_CreateFromStock :: CInt -> IO (Ptr (TCursor ()))
+
+-- | usage: (@cursorCreateLoad name wxtype widthheight@).
+cursorCreateLoad :: String -> Int -> Size ->  IO (Cursor  ())
+cursorCreateLoad name wxtype widthheight 
+  = withManagedCursorResult $
+    withStringPtr name $ \cobj_name -> 
+    wx_Cursor_CreateLoad cobj_name  (toCInt wxtype)  (toCIntSizeW widthheight) (toCIntSizeH widthheight)  
+foreign import ccall "Cursor_CreateLoad" wx_Cursor_CreateLoad :: Ptr (TWxString a) -> CInt -> CInt -> CInt -> IO (Ptr (TCursor ()))
+
+-- | usage: (@cursorDelete obj@).
+cursorDelete :: Cursor  a ->  IO ()
+cursorDelete
+  = objectDelete
+
+
+-- | usage: (@cursorIsStatic self@).
+cursorIsStatic :: Cursor  a ->  IO Bool
+cursorIsStatic self 
+  = withBoolResult $
+    withObjectPtr self $ \cobj_self -> 
+    wxCursor_IsStatic cobj_self  
+foreign import ccall "wxCursor_IsStatic" wxCursor_IsStatic :: Ptr (TCursor a) -> IO CBool
+
+-- | usage: (@cursorSafeDelete self@).
+cursorSafeDelete :: Cursor  a ->  IO ()
+cursorSafeDelete self 
+  = withObjectPtr self $ \cobj_self -> 
+    wxCursor_SafeDelete cobj_self  
+foreign import ccall "wxCursor_SafeDelete" wxCursor_SafeDelete :: Ptr (TCursor a) -> IO ()
+
+-- | usage: (@dataFormatCreateFromId name@).
+dataFormatCreateFromId :: String ->  IO (DataFormat  ())
+dataFormatCreateFromId name 
+  = withObjectResult $
+    withStringPtr name $ \cobj_name -> 
+    wxDataFormat_CreateFromId cobj_name  
+foreign import ccall "wxDataFormat_CreateFromId" wxDataFormat_CreateFromId :: Ptr (TWxString a) -> IO (Ptr (TDataFormat ()))
+
+-- | usage: (@dataFormatCreateFromType typ@).
+dataFormatCreateFromType :: Int ->  IO (DataFormat  ())
+dataFormatCreateFromType typ 
+  = withObjectResult $
+    wxDataFormat_CreateFromType (toCInt typ)  
+foreign import ccall "wxDataFormat_CreateFromType" wxDataFormat_CreateFromType :: CInt -> IO (Ptr (TDataFormat ()))
+
+-- | usage: (@dataFormatDelete obj@).
+dataFormatDelete :: DataFormat  a ->  IO ()
+dataFormatDelete _obj 
+  = withObjectRef "dataFormatDelete" _obj $ \cobj__obj -> 
+    wxDataFormat_Delete cobj__obj  
+foreign import ccall "wxDataFormat_Delete" wxDataFormat_Delete :: Ptr (TDataFormat a) -> IO ()
+
+-- | usage: (@dataFormatGetId obj@).
+dataFormatGetId :: DataFormat  a ->  IO (String)
+dataFormatGetId _obj 
+  = withManagedStringResult $
+    withObjectRef "dataFormatGetId" _obj $ \cobj__obj -> 
+    wxDataFormat_GetId cobj__obj  
+foreign import ccall "wxDataFormat_GetId" wxDataFormat_GetId :: Ptr (TDataFormat a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@dataFormatGetType obj@).
+dataFormatGetType :: DataFormat  a ->  IO Int
+dataFormatGetType _obj 
+  = withIntResult $
+    withObjectRef "dataFormatGetType" _obj $ \cobj__obj -> 
+    wxDataFormat_GetType cobj__obj  
+foreign import ccall "wxDataFormat_GetType" wxDataFormat_GetType :: Ptr (TDataFormat a) -> IO CInt
+
+-- | usage: (@dataFormatIsEqual obj other@).
+dataFormatIsEqual :: DataFormat  a -> Ptr  b ->  IO Bool
+dataFormatIsEqual _obj other 
+  = withBoolResult $
+    withObjectRef "dataFormatIsEqual" _obj $ \cobj__obj -> 
+    wxDataFormat_IsEqual cobj__obj  other  
+foreign import ccall "wxDataFormat_IsEqual" wxDataFormat_IsEqual :: Ptr (TDataFormat a) -> Ptr  b -> IO CBool
+
+-- | usage: (@dataFormatSetId obj id@).
+dataFormatSetId :: DataFormat  a -> Ptr  b ->  IO ()
+dataFormatSetId _obj id 
+  = withObjectRef "dataFormatSetId" _obj $ \cobj__obj -> 
+    wxDataFormat_SetId cobj__obj  id  
+foreign import ccall "wxDataFormat_SetId" wxDataFormat_SetId :: Ptr (TDataFormat a) -> Ptr  b -> IO ()
+
+-- | usage: (@dataFormatSetType obj typ@).
+dataFormatSetType :: DataFormat  a -> Int ->  IO ()
+dataFormatSetType _obj typ 
+  = withObjectRef "dataFormatSetType" _obj $ \cobj__obj -> 
+    wxDataFormat_SetType cobj__obj  (toCInt typ)  
+foreign import ccall "wxDataFormat_SetType" wxDataFormat_SetType :: Ptr (TDataFormat a) -> CInt -> IO ()
+
+-- | usage: (@dataObjectCompositeAdd obj dat preferred@).
+dataObjectCompositeAdd :: DataObjectComposite  a -> Ptr  b -> Int ->  IO ()
+dataObjectCompositeAdd _obj _dat _preferred 
+  = withObjectRef "dataObjectCompositeAdd" _obj $ \cobj__obj -> 
+    wxDataObjectComposite_Add cobj__obj  _dat  (toCInt _preferred)  
+foreign import ccall "wxDataObjectComposite_Add" wxDataObjectComposite_Add :: Ptr (TDataObjectComposite a) -> Ptr  b -> CInt -> IO ()
+
+-- | usage: (@dataObjectCompositeCreate@).
+dataObjectCompositeCreate ::  IO (DataObjectComposite  ())
+dataObjectCompositeCreate 
+  = withObjectResult $
+    wxDataObjectComposite_Create 
+foreign import ccall "wxDataObjectComposite_Create" wxDataObjectComposite_Create :: IO (Ptr (TDataObjectComposite ()))
+
+-- | usage: (@dataObjectCompositeDelete obj@).
+dataObjectCompositeDelete :: DataObjectComposite  a ->  IO ()
+dataObjectCompositeDelete _obj 
+  = withObjectRef "dataObjectCompositeDelete" _obj $ \cobj__obj -> 
+    wxDataObjectComposite_Delete cobj__obj  
+foreign import ccall "wxDataObjectComposite_Delete" wxDataObjectComposite_Delete :: Ptr (TDataObjectComposite a) -> IO ()
+
+-- | usage: (@datePropertyCreate label name value@).
+datePropertyCreate :: String -> String -> DateTime  c ->  IO (DateProperty  ())
+datePropertyCreate label name value 
+  = withObjectResult $
+    withStringPtr label $ \cobj_label -> 
+    withStringPtr name $ \cobj_name -> 
+    withObjectPtr value $ \cobj_value -> 
+    wxDateProperty_Create cobj_label  cobj_name  cobj_value  
+foreign import ccall "wxDateProperty_Create" wxDateProperty_Create :: Ptr (TWxString a) -> Ptr (TWxString b) -> Ptr (TDateTime c) -> IO (Ptr (TDateProperty ()))
+
+-- | usage: (@dateTimeAddDate obj diff@).
+dateTimeAddDate :: DateTime  a -> Ptr  b ->  IO (DateTime  ())
+dateTimeAddDate _obj diff 
+  = withRefDateTime $ \pref -> 
+    withObjectRef "dateTimeAddDate" _obj $ \cobj__obj -> 
+    wxDateTime_AddDate cobj__obj  diff   pref
+foreign import ccall "wxDateTime_AddDate" wxDateTime_AddDate :: Ptr (TDateTime a) -> Ptr  b -> Ptr (TDateTime ()) -> IO ()
+
+-- | usage: (@dateTimeAddDateValues obj yrs mnt wek day@).
+dateTimeAddDateValues :: DateTime  a -> Int -> Int -> Int -> Int ->  IO ()
+dateTimeAddDateValues _obj _yrs _mnt _wek _day 
+  = withObjectRef "dateTimeAddDateValues" _obj $ \cobj__obj -> 
+    wxDateTime_AddDateValues cobj__obj  (toCInt _yrs)  (toCInt _mnt)  (toCInt _wek)  (toCInt _day)  
+foreign import ccall "wxDateTime_AddDateValues" wxDateTime_AddDateValues :: Ptr (TDateTime a) -> CInt -> CInt -> CInt -> CInt -> IO ()
+
+-- | usage: (@dateTimeAddTime obj diff@).
+dateTimeAddTime :: DateTime  a -> Ptr  b ->  IO (DateTime  ())
+dateTimeAddTime _obj diff 
+  = withRefDateTime $ \pref -> 
+    withObjectRef "dateTimeAddTime" _obj $ \cobj__obj -> 
+    wxDateTime_AddTime cobj__obj  diff   pref
+foreign import ccall "wxDateTime_AddTime" wxDateTime_AddTime :: Ptr (TDateTime a) -> Ptr  b -> Ptr (TDateTime ()) -> IO ()
+
+-- | usage: (@dateTimeAddTimeValues obj hrs min sec mls@).
+dateTimeAddTimeValues :: DateTime  a -> Int -> Int -> Int -> Int ->  IO ()
+dateTimeAddTimeValues _obj _hrs _min _sec _mls 
+  = withObjectRef "dateTimeAddTimeValues" _obj $ \cobj__obj -> 
+    wxDateTime_AddTimeValues cobj__obj  (toCInt _hrs)  (toCInt _min)  (toCInt _sec)  (toCInt _mls)  
+foreign import ccall "wxDateTime_AddTimeValues" wxDateTime_AddTimeValues :: Ptr (TDateTime a) -> CInt -> CInt -> CInt -> CInt -> IO ()
+
+-- | usage: (@dateTimeConvertYearToBC year@).
+dateTimeConvertYearToBC :: Int ->  IO Int
+dateTimeConvertYearToBC year 
+  = withIntResult $
+    wxDateTime_ConvertYearToBC (toCInt year)  
+foreign import ccall "wxDateTime_ConvertYearToBC" wxDateTime_ConvertYearToBC :: CInt -> IO CInt
+
+-- | usage: (@dateTimeCreate@).
+dateTimeCreate ::  IO (DateTime  ())
+dateTimeCreate 
+  = withManagedDateTimeResult $
+    wxDateTime_Create 
+foreign import ccall "wxDateTime_Create" wxDateTime_Create :: IO (Ptr (TDateTime ()))
+
+-- | usage: (@dateTimeDelete obj@).
+dateTimeDelete :: DateTime  a ->  IO ()
+dateTimeDelete
+  = dateTimeDelete
+
+
+-- | usage: (@dateTimeFormat obj format tz@).
+dateTimeFormat :: DateTime  a -> Ptr  b -> Int ->  IO (String)
+dateTimeFormat _obj format tz 
+  = withManagedStringResult $
+    withObjectRef "dateTimeFormat" _obj $ \cobj__obj -> 
+    wxDateTime_Format cobj__obj  format  (toCInt tz)  
+foreign import ccall "wxDateTime_Format" wxDateTime_Format :: Ptr (TDateTime a) -> Ptr  b -> CInt -> IO (Ptr (TWxString ()))
+
+-- | usage: (@dateTimeFormatDate obj@).
+dateTimeFormatDate :: DateTime  a ->  IO (String)
+dateTimeFormatDate _obj 
+  = withManagedStringResult $
+    withObjectRef "dateTimeFormatDate" _obj $ \cobj__obj -> 
+    wxDateTime_FormatDate cobj__obj  
+foreign import ccall "wxDateTime_FormatDate" wxDateTime_FormatDate :: Ptr (TDateTime a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@dateTimeFormatISODate obj@).
+dateTimeFormatISODate :: DateTime  a ->  IO (String)
+dateTimeFormatISODate _obj 
+  = withManagedStringResult $
+    withObjectRef "dateTimeFormatISODate" _obj $ \cobj__obj -> 
+    wxDateTime_FormatISODate cobj__obj  
+foreign import ccall "wxDateTime_FormatISODate" wxDateTime_FormatISODate :: Ptr (TDateTime a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@dateTimeFormatISOTime obj@).
+dateTimeFormatISOTime :: DateTime  a ->  IO (String)
+dateTimeFormatISOTime _obj 
+  = withManagedStringResult $
+    withObjectRef "dateTimeFormatISOTime" _obj $ \cobj__obj -> 
+    wxDateTime_FormatISOTime cobj__obj  
+foreign import ccall "wxDateTime_FormatISOTime" wxDateTime_FormatISOTime :: Ptr (TDateTime a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@dateTimeFormatTime obj@).
+dateTimeFormatTime :: DateTime  a ->  IO (String)
+dateTimeFormatTime _obj 
+  = withManagedStringResult $
+    withObjectRef "dateTimeFormatTime" _obj $ \cobj__obj -> 
+    wxDateTime_FormatTime cobj__obj  
+foreign import ccall "wxDateTime_FormatTime" wxDateTime_FormatTime :: Ptr (TDateTime a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@dateTimeGetAmString@).
+dateTimeGetAmString ::  IO (String)
+dateTimeGetAmString 
+  = withManagedStringResult $
+    wxDateTime_GetAmString 
+foreign import ccall "wxDateTime_GetAmString" wxDateTime_GetAmString :: IO (Ptr (TWxString ()))
+
+-- | usage: (@dateTimeGetBeginDST year country dt@).
+dateTimeGetBeginDST :: Int -> Int -> DateTime  c ->  IO ()
+dateTimeGetBeginDST year country dt 
+  = withObjectPtr dt $ \cobj_dt -> 
+    wxDateTime_GetBeginDST (toCInt year)  (toCInt country)  cobj_dt  
+foreign import ccall "wxDateTime_GetBeginDST" wxDateTime_GetBeginDST :: CInt -> CInt -> Ptr (TDateTime c) -> IO ()
+
+-- | usage: (@dateTimeGetCentury year@).
+dateTimeGetCentury :: Int ->  IO Int
+dateTimeGetCentury year 
+  = withIntResult $
+    wxDateTime_GetCentury (toCInt year)  
+foreign import ccall "wxDateTime_GetCentury" wxDateTime_GetCentury :: CInt -> IO CInt
+
+-- | usage: (@dateTimeGetCountry@).
+dateTimeGetCountry ::  IO Int
+dateTimeGetCountry 
+  = withIntResult $
+    wxDateTime_GetCountry 
+foreign import ccall "wxDateTime_GetCountry" wxDateTime_GetCountry :: IO CInt
+
+-- | usage: (@dateTimeGetCurrentMonth cal@).
+dateTimeGetCurrentMonth :: Int ->  IO Int
+dateTimeGetCurrentMonth cal 
+  = withIntResult $
+    wxDateTime_GetCurrentMonth (toCInt cal)  
+foreign import ccall "wxDateTime_GetCurrentMonth" wxDateTime_GetCurrentMonth :: CInt -> IO CInt
+
+-- | usage: (@dateTimeGetCurrentYear cal@).
+dateTimeGetCurrentYear :: Int ->  IO Int
+dateTimeGetCurrentYear cal 
+  = withIntResult $
+    wxDateTime_GetCurrentYear (toCInt cal)  
+foreign import ccall "wxDateTime_GetCurrentYear" wxDateTime_GetCurrentYear :: CInt -> IO CInt
+
+-- | usage: (@dateTimeGetDay obj tz@).
+dateTimeGetDay :: DateTime  a -> Int ->  IO Int
+dateTimeGetDay _obj tz 
+  = withIntResult $
+    withObjectRef "dateTimeGetDay" _obj $ \cobj__obj -> 
+    wxDateTime_GetDay cobj__obj  (toCInt tz)  
+foreign import ccall "wxDateTime_GetDay" wxDateTime_GetDay :: Ptr (TDateTime a) -> CInt -> IO CInt
+
+-- | usage: (@dateTimeGetDayOfYear obj tz@).
+dateTimeGetDayOfYear :: DateTime  a -> Int ->  IO Int
+dateTimeGetDayOfYear _obj tz 
+  = withIntResult $
+    withObjectRef "dateTimeGetDayOfYear" _obj $ \cobj__obj -> 
+    wxDateTime_GetDayOfYear cobj__obj  (toCInt tz)  
+foreign import ccall "wxDateTime_GetDayOfYear" wxDateTime_GetDayOfYear :: Ptr (TDateTime a) -> CInt -> IO CInt
+
+-- | usage: (@dateTimeGetEndDST year country dt@).
+dateTimeGetEndDST :: Int -> Int -> DateTime  c ->  IO ()
+dateTimeGetEndDST year country dt 
+  = withObjectPtr dt $ \cobj_dt -> 
+    wxDateTime_GetEndDST (toCInt year)  (toCInt country)  cobj_dt  
+foreign import ccall "wxDateTime_GetEndDST" wxDateTime_GetEndDST :: CInt -> CInt -> Ptr (TDateTime c) -> IO ()
+
+-- | usage: (@dateTimeGetHour obj tz@).
+dateTimeGetHour :: DateTime  a -> Int ->  IO Int
+dateTimeGetHour _obj tz 
+  = withIntResult $
+    withObjectRef "dateTimeGetHour" _obj $ \cobj__obj -> 
+    wxDateTime_GetHour cobj__obj  (toCInt tz)  
+foreign import ccall "wxDateTime_GetHour" wxDateTime_GetHour :: Ptr (TDateTime a) -> CInt -> IO CInt
+
+-- | usage: (@dateTimeGetLastMonthDay obj month year@).
+dateTimeGetLastMonthDay :: DateTime  a -> Int -> Int ->  IO (DateTime  ())
+dateTimeGetLastMonthDay _obj month year 
+  = withRefDateTime $ \pref -> 
+    withObjectRef "dateTimeGetLastMonthDay" _obj $ \cobj__obj -> 
+    wxDateTime_GetLastMonthDay cobj__obj  (toCInt month)  (toCInt year)   pref
+foreign import ccall "wxDateTime_GetLastMonthDay" wxDateTime_GetLastMonthDay :: Ptr (TDateTime a) -> CInt -> CInt -> Ptr (TDateTime ()) -> IO ()
+
+-- | usage: (@dateTimeGetLastWeekDay obj weekday month year@).
+dateTimeGetLastWeekDay :: DateTime  a -> Int -> Int -> Int ->  IO (DateTime  ())
+dateTimeGetLastWeekDay _obj weekday month year 
+  = withRefDateTime $ \pref -> 
+    withObjectRef "dateTimeGetLastWeekDay" _obj $ \cobj__obj -> 
+    wxDateTime_GetLastWeekDay cobj__obj  (toCInt weekday)  (toCInt month)  (toCInt year)   pref
+foreign import ccall "wxDateTime_GetLastWeekDay" wxDateTime_GetLastWeekDay :: Ptr (TDateTime a) -> CInt -> CInt -> CInt -> Ptr (TDateTime ()) -> IO ()
+
+-- | usage: (@dateTimeGetMillisecond obj tz@).
+dateTimeGetMillisecond :: DateTime  a -> Int ->  IO Int
+dateTimeGetMillisecond _obj tz 
+  = withIntResult $
+    withObjectRef "dateTimeGetMillisecond" _obj $ \cobj__obj -> 
+    wxDateTime_GetMillisecond cobj__obj  (toCInt tz)  
+foreign import ccall "wxDateTime_GetMillisecond" wxDateTime_GetMillisecond :: Ptr (TDateTime a) -> CInt -> IO CInt
+
+-- | usage: (@dateTimeGetMinute obj tz@).
+dateTimeGetMinute :: DateTime  a -> Int ->  IO Int
+dateTimeGetMinute _obj tz 
+  = withIntResult $
+    withObjectRef "dateTimeGetMinute" _obj $ \cobj__obj -> 
+    wxDateTime_GetMinute cobj__obj  (toCInt tz)  
+foreign import ccall "wxDateTime_GetMinute" wxDateTime_GetMinute :: Ptr (TDateTime a) -> CInt -> IO CInt
+
+-- | usage: (@dateTimeGetMonth obj tz@).
+dateTimeGetMonth :: DateTime  a -> Int ->  IO Int
+dateTimeGetMonth _obj tz 
+  = withIntResult $
+    withObjectRef "dateTimeGetMonth" _obj $ \cobj__obj -> 
+    wxDateTime_GetMonth cobj__obj  (toCInt tz)  
+foreign import ccall "wxDateTime_GetMonth" wxDateTime_GetMonth :: Ptr (TDateTime a) -> CInt -> IO CInt
+
+-- | usage: (@dateTimeGetMonthName month flags@).
+dateTimeGetMonthName :: Int -> Int ->  IO (String)
+dateTimeGetMonthName month flags 
+  = withManagedStringResult $
+    wxDateTime_GetMonthName (toCInt month)  (toCInt flags)  
+foreign import ccall "wxDateTime_GetMonthName" wxDateTime_GetMonthName :: CInt -> CInt -> IO (Ptr (TWxString ()))
+
+-- | usage: (@dateTimeGetNextWeekDay obj weekday@).
+dateTimeGetNextWeekDay :: DateTime  a -> Int ->  IO (DateTime  ())
+dateTimeGetNextWeekDay _obj weekday 
+  = withRefDateTime $ \pref -> 
+    withObjectRef "dateTimeGetNextWeekDay" _obj $ \cobj__obj -> 
+    wxDateTime_GetNextWeekDay cobj__obj  (toCInt weekday)   pref
+foreign import ccall "wxDateTime_GetNextWeekDay" wxDateTime_GetNextWeekDay :: Ptr (TDateTime a) -> CInt -> Ptr (TDateTime ()) -> IO ()
+
+-- | usage: (@dateTimeGetNumberOfDays year cal@).
+dateTimeGetNumberOfDays :: Int -> Int ->  IO Int
+dateTimeGetNumberOfDays year cal 
+  = withIntResult $
+    wxDateTime_GetNumberOfDays (toCInt year)  (toCInt cal)  
+foreign import ccall "wxDateTime_GetNumberOfDays" wxDateTime_GetNumberOfDays :: CInt -> CInt -> IO CInt
+
+-- | usage: (@dateTimeGetNumberOfDaysMonth month year cal@).
+dateTimeGetNumberOfDaysMonth :: Int -> Int -> Int ->  IO Int
+dateTimeGetNumberOfDaysMonth month year cal 
+  = withIntResult $
+    wxDateTime_GetNumberOfDaysMonth (toCInt month)  (toCInt year)  (toCInt cal)  
+foreign import ccall "wxDateTime_GetNumberOfDaysMonth" wxDateTime_GetNumberOfDaysMonth :: CInt -> CInt -> CInt -> IO CInt
+
+-- | usage: (@dateTimeGetPmString@).
+dateTimeGetPmString ::  IO (String)
+dateTimeGetPmString 
+  = withManagedStringResult $
+    wxDateTime_GetPmString 
+foreign import ccall "wxDateTime_GetPmString" wxDateTime_GetPmString :: IO (Ptr (TWxString ()))
+
+-- | usage: (@dateTimeGetPrevWeekDay obj weekday@).
+dateTimeGetPrevWeekDay :: DateTime  a -> Int ->  IO (DateTime  ())
+dateTimeGetPrevWeekDay _obj weekday 
+  = withRefDateTime $ \pref -> 
+    withObjectRef "dateTimeGetPrevWeekDay" _obj $ \cobj__obj -> 
+    wxDateTime_GetPrevWeekDay cobj__obj  (toCInt weekday)   pref
+foreign import ccall "wxDateTime_GetPrevWeekDay" wxDateTime_GetPrevWeekDay :: Ptr (TDateTime a) -> CInt -> Ptr (TDateTime ()) -> IO ()
+
+-- | usage: (@dateTimeGetSecond obj tz@).
+dateTimeGetSecond :: DateTime  a -> Int ->  IO Int
+dateTimeGetSecond _obj tz 
+  = withIntResult $
+    withObjectRef "dateTimeGetSecond" _obj $ \cobj__obj -> 
+    wxDateTime_GetSecond cobj__obj  (toCInt tz)  
+foreign import ccall "wxDateTime_GetSecond" wxDateTime_GetSecond :: Ptr (TDateTime a) -> CInt -> IO CInt
+
+-- | usage: (@dateTimeGetTicks obj@).
+dateTimeGetTicks :: DateTime  a ->  IO Int
+dateTimeGetTicks _obj 
+  = withIntResult $
+    withObjectRef "dateTimeGetTicks" _obj $ \cobj__obj -> 
+    wxDateTime_GetTicks cobj__obj  
+foreign import ccall "wxDateTime_GetTicks" wxDateTime_GetTicks :: Ptr (TDateTime a) -> IO CInt
+
+-- | usage: (@dateTimeGetTimeNow@).
+dateTimeGetTimeNow ::  IO Int
+dateTimeGetTimeNow 
+  = withIntResult $
+    wxDateTime_GetTimeNow 
+foreign import ccall "wxDateTime_GetTimeNow" wxDateTime_GetTimeNow :: IO CInt
+
+-- | usage: (@dateTimeGetValue obj hilong lolong@).
+dateTimeGetValue :: DateTime  a -> Ptr  b -> Ptr  c ->  IO ()
+dateTimeGetValue _obj hilong lolong 
+  = withObjectRef "dateTimeGetValue" _obj $ \cobj__obj -> 
+    wxDateTime_GetValue cobj__obj  hilong  lolong  
+foreign import ccall "wxDateTime_GetValue" wxDateTime_GetValue :: Ptr (TDateTime a) -> Ptr  b -> Ptr  c -> IO ()
+
+-- | usage: (@dateTimeGetWeekDay obj weekday n month year@).
+dateTimeGetWeekDay :: DateTime  a -> Int -> Int -> Int -> Int ->  IO (DateTime  ())
+dateTimeGetWeekDay _obj weekday n month year 
+  = withRefDateTime $ \pref -> 
+    withObjectRef "dateTimeGetWeekDay" _obj $ \cobj__obj -> 
+    wxDateTime_GetWeekDay cobj__obj  (toCInt weekday)  (toCInt n)  (toCInt month)  (toCInt year)   pref
+foreign import ccall "wxDateTime_GetWeekDay" wxDateTime_GetWeekDay :: Ptr (TDateTime a) -> CInt -> CInt -> CInt -> CInt -> Ptr (TDateTime ()) -> IO ()
+
+-- | usage: (@dateTimeGetWeekDayInSameWeek obj weekday@).
+dateTimeGetWeekDayInSameWeek :: DateTime  a -> Int ->  IO (DateTime  ())
+dateTimeGetWeekDayInSameWeek _obj weekday 
+  = withRefDateTime $ \pref -> 
+    withObjectRef "dateTimeGetWeekDayInSameWeek" _obj $ \cobj__obj -> 
+    wxDateTime_GetWeekDayInSameWeek cobj__obj  (toCInt weekday)   pref
+foreign import ccall "wxDateTime_GetWeekDayInSameWeek" wxDateTime_GetWeekDayInSameWeek :: Ptr (TDateTime a) -> CInt -> Ptr (TDateTime ()) -> IO ()
+
+-- | usage: (@dateTimeGetWeekDayName weekday flags@).
+dateTimeGetWeekDayName :: Int -> Int ->  IO (String)
+dateTimeGetWeekDayName weekday flags 
+  = withManagedStringResult $
+    wxDateTime_GetWeekDayName (toCInt weekday)  (toCInt flags)  
+foreign import ccall "wxDateTime_GetWeekDayName" wxDateTime_GetWeekDayName :: CInt -> CInt -> IO (Ptr (TWxString ()))
+
+-- | usage: (@dateTimeGetWeekDayTZ obj tz@).
+dateTimeGetWeekDayTZ :: DateTime  a -> Int ->  IO Int
+dateTimeGetWeekDayTZ _obj tz 
+  = withIntResult $
+    withObjectRef "dateTimeGetWeekDayTZ" _obj $ \cobj__obj -> 
+    wxDateTime_GetWeekDayTZ cobj__obj  (toCInt tz)  
+foreign import ccall "wxDateTime_GetWeekDayTZ" wxDateTime_GetWeekDayTZ :: Ptr (TDateTime a) -> CInt -> IO CInt
+
+-- | usage: (@dateTimeGetWeekOfMonth obj flags tz@).
+dateTimeGetWeekOfMonth :: DateTime  a -> Int -> Int ->  IO Int
+dateTimeGetWeekOfMonth _obj flags tz 
+  = withIntResult $
+    withObjectRef "dateTimeGetWeekOfMonth" _obj $ \cobj__obj -> 
+    wxDateTime_GetWeekOfMonth cobj__obj  (toCInt flags)  (toCInt tz)  
+foreign import ccall "wxDateTime_GetWeekOfMonth" wxDateTime_GetWeekOfMonth :: Ptr (TDateTime a) -> CInt -> CInt -> IO CInt
+
+-- | usage: (@dateTimeGetWeekOfYear obj flags tz@).
+dateTimeGetWeekOfYear :: DateTime  a -> Int -> Int ->  IO Int
+dateTimeGetWeekOfYear _obj flags tz 
+  = withIntResult $
+    withObjectRef "dateTimeGetWeekOfYear" _obj $ \cobj__obj -> 
+    wxDateTime_GetWeekOfYear cobj__obj  (toCInt flags)  (toCInt tz)  
+foreign import ccall "wxDateTime_GetWeekOfYear" wxDateTime_GetWeekOfYear :: Ptr (TDateTime a) -> CInt -> CInt -> IO CInt
+
+-- | usage: (@dateTimeGetYear obj tz@).
+dateTimeGetYear :: DateTime  a -> Int ->  IO Int
+dateTimeGetYear _obj tz 
+  = withIntResult $
+    withObjectRef "dateTimeGetYear" _obj $ \cobj__obj -> 
+    wxDateTime_GetYear cobj__obj  (toCInt tz)  
+foreign import ccall "wxDateTime_GetYear" wxDateTime_GetYear :: Ptr (TDateTime a) -> CInt -> IO CInt
+
+-- | usage: (@dateTimeIsBetween obj t1 t2@).
+dateTimeIsBetween :: DateTime  a -> DateTime  b -> DateTime  c ->  IO Bool
+dateTimeIsBetween _obj t1 t2 
+  = withBoolResult $
+    withObjectRef "dateTimeIsBetween" _obj $ \cobj__obj -> 
+    withObjectPtr t1 $ \cobj_t1 -> 
+    withObjectPtr t2 $ \cobj_t2 -> 
+    wxDateTime_IsBetween cobj__obj  cobj_t1  cobj_t2  
+foreign import ccall "wxDateTime_IsBetween" wxDateTime_IsBetween :: Ptr (TDateTime a) -> Ptr (TDateTime b) -> Ptr (TDateTime c) -> IO CBool
+
+-- | usage: (@dateTimeIsDST obj country@).
+dateTimeIsDST :: DateTime  a -> Int ->  IO Bool
+dateTimeIsDST _obj country 
+  = withBoolResult $
+    withObjectRef "dateTimeIsDST" _obj $ \cobj__obj -> 
+    wxDateTime_IsDST cobj__obj  (toCInt country)  
+foreign import ccall "wxDateTime_IsDST" wxDateTime_IsDST :: Ptr (TDateTime a) -> CInt -> IO CBool
+
+-- | usage: (@dateTimeIsDSTApplicable year country@).
+dateTimeIsDSTApplicable :: Int -> Int ->  IO Bool
+dateTimeIsDSTApplicable year country 
+  = withBoolResult $
+    wxDateTime_IsDSTApplicable (toCInt year)  (toCInt country)  
+foreign import ccall "wxDateTime_IsDSTApplicable" wxDateTime_IsDSTApplicable :: CInt -> CInt -> IO CBool
+
+-- | usage: (@dateTimeIsEarlierThan obj datetime@).
+dateTimeIsEarlierThan :: DateTime  a -> Ptr  b ->  IO Bool
+dateTimeIsEarlierThan _obj datetime 
+  = withBoolResult $
+    withObjectRef "dateTimeIsEarlierThan" _obj $ \cobj__obj -> 
+    wxDateTime_IsEarlierThan cobj__obj  datetime  
+foreign import ccall "wxDateTime_IsEarlierThan" wxDateTime_IsEarlierThan :: Ptr (TDateTime a) -> Ptr  b -> IO CBool
+
+-- | usage: (@dateTimeIsEqualTo obj datetime@).
+dateTimeIsEqualTo :: DateTime  a -> Ptr  b ->  IO Bool
+dateTimeIsEqualTo _obj datetime 
+  = withBoolResult $
+    withObjectRef "dateTimeIsEqualTo" _obj $ \cobj__obj -> 
+    wxDateTime_IsEqualTo cobj__obj  datetime  
+foreign import ccall "wxDateTime_IsEqualTo" wxDateTime_IsEqualTo :: Ptr (TDateTime a) -> Ptr  b -> IO CBool
+
+-- | usage: (@dateTimeIsEqualUpTo obj dt ts@).
+dateTimeIsEqualUpTo :: DateTime  a -> DateTime  b -> Ptr  c ->  IO Bool
+dateTimeIsEqualUpTo _obj dt ts 
+  = withBoolResult $
+    withObjectRef "dateTimeIsEqualUpTo" _obj $ \cobj__obj -> 
+    withObjectPtr dt $ \cobj_dt -> 
+    wxDateTime_IsEqualUpTo cobj__obj  cobj_dt  ts  
+foreign import ccall "wxDateTime_IsEqualUpTo" wxDateTime_IsEqualUpTo :: Ptr (TDateTime a) -> Ptr (TDateTime b) -> Ptr  c -> IO CBool
+
+-- | usage: (@dateTimeIsLaterThan obj datetime@).
+dateTimeIsLaterThan :: DateTime  a -> Ptr  b ->  IO Bool
+dateTimeIsLaterThan _obj datetime 
+  = withBoolResult $
+    withObjectRef "dateTimeIsLaterThan" _obj $ \cobj__obj -> 
+    wxDateTime_IsLaterThan cobj__obj  datetime  
+foreign import ccall "wxDateTime_IsLaterThan" wxDateTime_IsLaterThan :: Ptr (TDateTime a) -> Ptr  b -> IO CBool
+
+-- | usage: (@dateTimeIsLeapYear year cal@).
+dateTimeIsLeapYear :: Int -> Int ->  IO Bool
+dateTimeIsLeapYear year cal 
+  = withBoolResult $
+    wxDateTime_IsLeapYear (toCInt year)  (toCInt cal)  
+foreign import ccall "wxDateTime_IsLeapYear" wxDateTime_IsLeapYear :: CInt -> CInt -> IO CBool
+
+-- | usage: (@dateTimeIsSameDate obj dt@).
+dateTimeIsSameDate :: DateTime  a -> DateTime  b ->  IO Bool
+dateTimeIsSameDate _obj dt 
+  = withBoolResult $
+    withObjectRef "dateTimeIsSameDate" _obj $ \cobj__obj -> 
+    withObjectPtr dt $ \cobj_dt -> 
+    wxDateTime_IsSameDate cobj__obj  cobj_dt  
+foreign import ccall "wxDateTime_IsSameDate" wxDateTime_IsSameDate :: Ptr (TDateTime a) -> Ptr (TDateTime b) -> IO CBool
+
+-- | usage: (@dateTimeIsSameTime obj dt@).
+dateTimeIsSameTime :: DateTime  a -> DateTime  b ->  IO Bool
+dateTimeIsSameTime _obj dt 
+  = withBoolResult $
+    withObjectRef "dateTimeIsSameTime" _obj $ \cobj__obj -> 
+    withObjectPtr dt $ \cobj_dt -> 
+    wxDateTime_IsSameTime cobj__obj  cobj_dt  
+foreign import ccall "wxDateTime_IsSameTime" wxDateTime_IsSameTime :: Ptr (TDateTime a) -> Ptr (TDateTime b) -> IO CBool
+
+-- | usage: (@dateTimeIsStrictlyBetween obj t1 t2@).
+dateTimeIsStrictlyBetween :: DateTime  a -> DateTime  b -> DateTime  c ->  IO Bool
+dateTimeIsStrictlyBetween _obj t1 t2 
+  = withBoolResult $
+    withObjectRef "dateTimeIsStrictlyBetween" _obj $ \cobj__obj -> 
+    withObjectPtr t1 $ \cobj_t1 -> 
+    withObjectPtr t2 $ \cobj_t2 -> 
+    wxDateTime_IsStrictlyBetween cobj__obj  cobj_t1  cobj_t2  
+foreign import ccall "wxDateTime_IsStrictlyBetween" wxDateTime_IsStrictlyBetween :: Ptr (TDateTime a) -> Ptr (TDateTime b) -> Ptr (TDateTime c) -> IO CBool
+
+-- | usage: (@dateTimeIsValid obj@).
+dateTimeIsValid :: DateTime  a ->  IO Bool
+dateTimeIsValid _obj 
+  = withBoolResult $
+    withObjectRef "dateTimeIsValid" _obj $ \cobj__obj -> 
+    wxDateTime_IsValid cobj__obj  
+foreign import ccall "wxDateTime_IsValid" wxDateTime_IsValid :: Ptr (TDateTime a) -> IO CBool
+
+-- | usage: (@dateTimeIsWestEuropeanCountry country@).
+dateTimeIsWestEuropeanCountry :: Int ->  IO Bool
+dateTimeIsWestEuropeanCountry country 
+  = withBoolResult $
+    wxDateTime_IsWestEuropeanCountry (toCInt country)  
+foreign import ccall "wxDateTime_IsWestEuropeanCountry" wxDateTime_IsWestEuropeanCountry :: CInt -> IO CBool
+
+-- | usage: (@dateTimeIsWorkDay obj country@).
+dateTimeIsWorkDay :: DateTime  a -> Int ->  IO Bool
+dateTimeIsWorkDay _obj country 
+  = withBoolResult $
+    withObjectRef "dateTimeIsWorkDay" _obj $ \cobj__obj -> 
+    wxDateTime_IsWorkDay cobj__obj  (toCInt country)  
+foreign import ccall "wxDateTime_IsWorkDay" wxDateTime_IsWorkDay :: Ptr (TDateTime a) -> CInt -> IO CBool
+
+-- | usage: (@dateTimeMakeGMT obj noDST@).
+dateTimeMakeGMT :: DateTime  a -> Int ->  IO ()
+dateTimeMakeGMT _obj noDST 
+  = withObjectRef "dateTimeMakeGMT" _obj $ \cobj__obj -> 
+    wxDateTime_MakeGMT cobj__obj  (toCInt noDST)  
+foreign import ccall "wxDateTime_MakeGMT" wxDateTime_MakeGMT :: Ptr (TDateTime a) -> CInt -> IO ()
+
+-- | usage: (@dateTimeMakeTimezone obj tz noDST@).
+dateTimeMakeTimezone :: DateTime  a -> Int -> Int ->  IO ()
+dateTimeMakeTimezone _obj tz noDST 
+  = withObjectRef "dateTimeMakeTimezone" _obj $ \cobj__obj -> 
+    wxDateTime_MakeTimezone cobj__obj  (toCInt tz)  (toCInt noDST)  
+foreign import ccall "wxDateTime_MakeTimezone" wxDateTime_MakeTimezone :: Ptr (TDateTime a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@dateTimeNow dt@).
+dateTimeNow :: DateTime  a ->  IO ()
+dateTimeNow dt 
+  = withObjectRef "dateTimeNow" dt $ \cobj_dt -> 
+    wxDateTime_Now cobj_dt  
+foreign import ccall "wxDateTime_Now" wxDateTime_Now :: Ptr (TDateTime a) -> IO ()
+
+-- | usage: (@dateTimeParseDate obj date@).
+dateTimeParseDate :: DateTime  a -> Ptr  b ->  IO (Ptr  ())
+dateTimeParseDate _obj date 
+  = withObjectRef "dateTimeParseDate" _obj $ \cobj__obj -> 
+    wxDateTime_ParseDate cobj__obj  date  
+foreign import ccall "wxDateTime_ParseDate" wxDateTime_ParseDate :: Ptr (TDateTime a) -> Ptr  b -> IO (Ptr  ())
+
+-- | usage: (@dateTimeParseDateTime obj datetime@).
+dateTimeParseDateTime :: DateTime  a -> Ptr  b ->  IO (Ptr  ())
+dateTimeParseDateTime _obj datetime 
+  = withObjectRef "dateTimeParseDateTime" _obj $ \cobj__obj -> 
+    wxDateTime_ParseDateTime cobj__obj  datetime  
+foreign import ccall "wxDateTime_ParseDateTime" wxDateTime_ParseDateTime :: Ptr (TDateTime a) -> Ptr  b -> IO (Ptr  ())
+
+-- | usage: (@dateTimeParseFormat obj date format dateDef@).
+dateTimeParseFormat :: DateTime  a -> Ptr  b -> Ptr  c -> Ptr  d ->  IO (Ptr  ())
+dateTimeParseFormat _obj date format dateDef 
+  = withObjectRef "dateTimeParseFormat" _obj $ \cobj__obj -> 
+    wxDateTime_ParseFormat cobj__obj  date  format  dateDef  
+foreign import ccall "wxDateTime_ParseFormat" wxDateTime_ParseFormat :: Ptr (TDateTime a) -> Ptr  b -> Ptr  c -> Ptr  d -> IO (Ptr  ())
+
+-- | usage: (@dateTimeParseRfc822Date obj date@).
+dateTimeParseRfc822Date :: DateTime  a -> Ptr  b ->  IO (Ptr  ())
+dateTimeParseRfc822Date _obj date 
+  = withObjectRef "dateTimeParseRfc822Date" _obj $ \cobj__obj -> 
+    wxDateTime_ParseRfc822Date cobj__obj  date  
+foreign import ccall "wxDateTime_ParseRfc822Date" wxDateTime_ParseRfc822Date :: Ptr (TDateTime a) -> Ptr  b -> IO (Ptr  ())
+
+-- | usage: (@dateTimeParseTime obj time@).
+dateTimeParseTime :: DateTime  a -> Time  b ->  IO (Ptr  ())
+dateTimeParseTime _obj time 
+  = withObjectRef "dateTimeParseTime" _obj $ \cobj__obj -> 
+    withObjectPtr time $ \cobj_time -> 
+    wxDateTime_ParseTime cobj__obj  cobj_time  
+foreign import ccall "wxDateTime_ParseTime" wxDateTime_ParseTime :: Ptr (TDateTime a) -> Ptr (TTime b) -> IO (Ptr  ())
+
+-- | usage: (@dateTimeResetTime obj@).
+dateTimeResetTime :: DateTime  a ->  IO ()
+dateTimeResetTime _obj 
+  = withObjectRef "dateTimeResetTime" _obj $ \cobj__obj -> 
+    wxDateTime_ResetTime cobj__obj  
+foreign import ccall "wxDateTime_ResetTime" wxDateTime_ResetTime :: Ptr (TDateTime a) -> IO ()
+
+-- | usage: (@dateTimeSet obj day month year hour minute second millisec@).
+dateTimeSet :: DateTime  a -> Int -> Int -> Int -> Int -> Int -> Int -> Int ->  IO ()
+dateTimeSet _obj day month year hour minute second millisec 
+  = withObjectRef "dateTimeSet" _obj $ \cobj__obj -> 
+    wxDateTime_Set cobj__obj  (toCInt day)  (toCInt month)  (toCInt year)  (toCInt hour)  (toCInt minute)  (toCInt second)  (toCInt millisec)  
+foreign import ccall "wxDateTime_Set" wxDateTime_Set :: Ptr (TDateTime a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO ()
+
+-- | usage: (@dateTimeSetCountry country@).
+dateTimeSetCountry :: Int ->  IO ()
+dateTimeSetCountry country 
+  = wxDateTime_SetCountry (toCInt country)  
+foreign import ccall "wxDateTime_SetCountry" wxDateTime_SetCountry :: CInt -> IO ()
+
+-- | usage: (@dateTimeSetDay obj day@).
+dateTimeSetDay :: DateTime  a -> Int ->  IO ()
+dateTimeSetDay _obj day 
+  = withObjectRef "dateTimeSetDay" _obj $ \cobj__obj -> 
+    wxDateTime_SetDay cobj__obj  (toCInt day)  
+foreign import ccall "wxDateTime_SetDay" wxDateTime_SetDay :: Ptr (TDateTime a) -> CInt -> IO ()
+
+-- | usage: (@dateTimeSetHour obj hour@).
+dateTimeSetHour :: DateTime  a -> Int ->  IO ()
+dateTimeSetHour _obj hour 
+  = withObjectRef "dateTimeSetHour" _obj $ \cobj__obj -> 
+    wxDateTime_SetHour cobj__obj  (toCInt hour)  
+foreign import ccall "wxDateTime_SetHour" wxDateTime_SetHour :: Ptr (TDateTime a) -> CInt -> IO ()
+
+-- | usage: (@dateTimeSetMillisecond obj millisecond@).
+dateTimeSetMillisecond :: DateTime  a -> Int ->  IO ()
+dateTimeSetMillisecond _obj millisecond 
+  = withObjectRef "dateTimeSetMillisecond" _obj $ \cobj__obj -> 
+    wxDateTime_SetMillisecond cobj__obj  (toCInt millisecond)  
+foreign import ccall "wxDateTime_SetMillisecond" wxDateTime_SetMillisecond :: Ptr (TDateTime a) -> CInt -> IO ()
+
+-- | usage: (@dateTimeSetMinute obj minute@).
+dateTimeSetMinute :: DateTime  a -> Int ->  IO ()
+dateTimeSetMinute _obj minute 
+  = withObjectRef "dateTimeSetMinute" _obj $ \cobj__obj -> 
+    wxDateTime_SetMinute cobj__obj  (toCInt minute)  
+foreign import ccall "wxDateTime_SetMinute" wxDateTime_SetMinute :: Ptr (TDateTime a) -> CInt -> IO ()
+
+-- | usage: (@dateTimeSetMonth obj month@).
+dateTimeSetMonth :: DateTime  a -> Int ->  IO ()
+dateTimeSetMonth _obj month 
+  = withObjectRef "dateTimeSetMonth" _obj $ \cobj__obj -> 
+    wxDateTime_SetMonth cobj__obj  (toCInt month)  
+foreign import ccall "wxDateTime_SetMonth" wxDateTime_SetMonth :: Ptr (TDateTime a) -> CInt -> IO ()
+
+-- | usage: (@dateTimeSetSecond obj second@).
+dateTimeSetSecond :: DateTime  a -> Int ->  IO ()
+dateTimeSetSecond _obj second 
+  = withObjectRef "dateTimeSetSecond" _obj $ \cobj__obj -> 
+    wxDateTime_SetSecond cobj__obj  (toCInt second)  
+foreign import ccall "wxDateTime_SetSecond" wxDateTime_SetSecond :: Ptr (TDateTime a) -> CInt -> IO ()
+
+-- | usage: (@dateTimeSetTime obj hour minute second millisec@).
+dateTimeSetTime :: DateTime  a -> Int -> Int -> Int -> Int ->  IO ()
+dateTimeSetTime _obj hour minute second millisec 
+  = withObjectRef "dateTimeSetTime" _obj $ \cobj__obj -> 
+    wxDateTime_SetTime cobj__obj  (toCInt hour)  (toCInt minute)  (toCInt second)  (toCInt millisec)  
+foreign import ccall "wxDateTime_SetTime" wxDateTime_SetTime :: Ptr (TDateTime a) -> CInt -> CInt -> CInt -> CInt -> IO ()
+
+-- | usage: (@dateTimeSetToCurrent obj@).
+dateTimeSetToCurrent :: DateTime  a ->  IO ()
+dateTimeSetToCurrent _obj 
+  = withObjectRef "dateTimeSetToCurrent" _obj $ \cobj__obj -> 
+    wxDateTime_SetToCurrent cobj__obj  
+foreign import ccall "wxDateTime_SetToCurrent" wxDateTime_SetToCurrent :: Ptr (TDateTime a) -> IO ()
+
+-- | usage: (@dateTimeSetToLastMonthDay obj month year@).
+dateTimeSetToLastMonthDay :: DateTime  a -> Int -> Int ->  IO ()
+dateTimeSetToLastMonthDay _obj month year 
+  = withObjectRef "dateTimeSetToLastMonthDay" _obj $ \cobj__obj -> 
+    wxDateTime_SetToLastMonthDay cobj__obj  (toCInt month)  (toCInt year)  
+foreign import ccall "wxDateTime_SetToLastMonthDay" wxDateTime_SetToLastMonthDay :: Ptr (TDateTime a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@dateTimeSetToLastWeekDay obj weekday month year@).
+dateTimeSetToLastWeekDay :: DateTime  a -> Int -> Int -> Int ->  IO Bool
+dateTimeSetToLastWeekDay _obj weekday month year 
+  = withBoolResult $
+    withObjectRef "dateTimeSetToLastWeekDay" _obj $ \cobj__obj -> 
+    wxDateTime_SetToLastWeekDay cobj__obj  (toCInt weekday)  (toCInt month)  (toCInt year)  
+foreign import ccall "wxDateTime_SetToLastWeekDay" wxDateTime_SetToLastWeekDay :: Ptr (TDateTime a) -> CInt -> CInt -> CInt -> IO CBool
+
+-- | usage: (@dateTimeSetToNextWeekDay obj weekday@).
+dateTimeSetToNextWeekDay :: DateTime  a -> Int ->  IO ()
+dateTimeSetToNextWeekDay _obj weekday 
+  = withObjectRef "dateTimeSetToNextWeekDay" _obj $ \cobj__obj -> 
+    wxDateTime_SetToNextWeekDay cobj__obj  (toCInt weekday)  
+foreign import ccall "wxDateTime_SetToNextWeekDay" wxDateTime_SetToNextWeekDay :: Ptr (TDateTime a) -> CInt -> IO ()
+
+-- | usage: (@dateTimeSetToPrevWeekDay obj weekday@).
+dateTimeSetToPrevWeekDay :: DateTime  a -> Int ->  IO ()
+dateTimeSetToPrevWeekDay _obj weekday 
+  = withObjectRef "dateTimeSetToPrevWeekDay" _obj $ \cobj__obj -> 
+    wxDateTime_SetToPrevWeekDay cobj__obj  (toCInt weekday)  
+foreign import ccall "wxDateTime_SetToPrevWeekDay" wxDateTime_SetToPrevWeekDay :: Ptr (TDateTime a) -> CInt -> IO ()
+
+-- | usage: (@dateTimeSetToWeekDay obj weekday n month year@).
+dateTimeSetToWeekDay :: DateTime  a -> Int -> Int -> Int -> Int ->  IO Bool
+dateTimeSetToWeekDay _obj weekday n month year 
+  = withBoolResult $
+    withObjectRef "dateTimeSetToWeekDay" _obj $ \cobj__obj -> 
+    wxDateTime_SetToWeekDay cobj__obj  (toCInt weekday)  (toCInt n)  (toCInt month)  (toCInt year)  
+foreign import ccall "wxDateTime_SetToWeekDay" wxDateTime_SetToWeekDay :: Ptr (TDateTime a) -> CInt -> CInt -> CInt -> CInt -> IO CBool
+
+-- | usage: (@dateTimeSetToWeekDayInSameWeek obj weekday@).
+dateTimeSetToWeekDayInSameWeek :: DateTime  a -> Int ->  IO ()
+dateTimeSetToWeekDayInSameWeek _obj weekday 
+  = withObjectRef "dateTimeSetToWeekDayInSameWeek" _obj $ \cobj__obj -> 
+    wxDateTime_SetToWeekDayInSameWeek cobj__obj  (toCInt weekday)  
+foreign import ccall "wxDateTime_SetToWeekDayInSameWeek" wxDateTime_SetToWeekDayInSameWeek :: Ptr (TDateTime a) -> CInt -> IO ()
+
+-- | usage: (@dateTimeSetYear obj year@).
+dateTimeSetYear :: DateTime  a -> Int ->  IO ()
+dateTimeSetYear _obj year 
+  = withObjectRef "dateTimeSetYear" _obj $ \cobj__obj -> 
+    wxDateTime_SetYear cobj__obj  (toCInt year)  
+foreign import ccall "wxDateTime_SetYear" wxDateTime_SetYear :: Ptr (TDateTime a) -> CInt -> IO ()
+
+-- | usage: (@dateTimeSubtractDate obj diff@).
+dateTimeSubtractDate :: DateTime  a -> Ptr  b ->  IO (DateTime  ())
+dateTimeSubtractDate _obj diff 
+  = withRefDateTime $ \pref -> 
+    withObjectRef "dateTimeSubtractDate" _obj $ \cobj__obj -> 
+    wxDateTime_SubtractDate cobj__obj  diff   pref
+foreign import ccall "wxDateTime_SubtractDate" wxDateTime_SubtractDate :: Ptr (TDateTime a) -> Ptr  b -> Ptr (TDateTime ()) -> IO ()
+
+-- | usage: (@dateTimeSubtractTime obj diff@).
+dateTimeSubtractTime :: DateTime  a -> Ptr  b ->  IO (DateTime  ())
+dateTimeSubtractTime _obj diff 
+  = withRefDateTime $ \pref -> 
+    withObjectRef "dateTimeSubtractTime" _obj $ \cobj__obj -> 
+    wxDateTime_SubtractTime cobj__obj  diff   pref
+foreign import ccall "wxDateTime_SubtractTime" wxDateTime_SubtractTime :: Ptr (TDateTime a) -> Ptr  b -> Ptr (TDateTime ()) -> IO ()
+
+-- | usage: (@dateTimeToGMT obj noDST@).
+dateTimeToGMT :: DateTime  a -> Int ->  IO ()
+dateTimeToGMT _obj noDST 
+  = withObjectRef "dateTimeToGMT" _obj $ \cobj__obj -> 
+    wxDateTime_ToGMT cobj__obj  (toCInt noDST)  
+foreign import ccall "wxDateTime_ToGMT" wxDateTime_ToGMT :: Ptr (TDateTime a) -> CInt -> IO ()
+
+-- | usage: (@dateTimeToTimezone obj tz noDST@).
+dateTimeToTimezone :: DateTime  a -> Int -> Int ->  IO ()
+dateTimeToTimezone _obj tz noDST 
+  = withObjectRef "dateTimeToTimezone" _obj $ \cobj__obj -> 
+    wxDateTime_ToTimezone cobj__obj  (toCInt tz)  (toCInt noDST)  
+foreign import ccall "wxDateTime_ToTimezone" wxDateTime_ToTimezone :: Ptr (TDateTime a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@dateTimeToday dt@).
+dateTimeToday :: DateTime  a ->  IO ()
+dateTimeToday dt 
+  = withObjectRef "dateTimeToday" dt $ \cobj_dt -> 
+    wxDateTime_Today cobj_dt  
+foreign import ccall "wxDateTime_Today" wxDateTime_Today :: Ptr (TDateTime a) -> IO ()
+
+-- | usage: (@dateTimeUNow dt@).
+dateTimeUNow :: DateTime  a ->  IO ()
+dateTimeUNow dt 
+  = withObjectRef "dateTimeUNow" dt $ \cobj_dt -> 
+    wxDateTime_UNow cobj_dt  
+foreign import ccall "wxDateTime_UNow" wxDateTime_UNow :: Ptr (TDateTime a) -> IO ()
+
+-- | usage: (@dateTimewxDateTime hilong lolong@).
+dateTimewxDateTime :: Int -> Int ->  IO (Ptr  ())
+dateTimewxDateTime hilong lolong 
+  = wxDateTime_wxDateTime (toCInt hilong)  (toCInt lolong)  
+foreign import ccall "wxDateTime_wxDateTime" wxDateTime_wxDateTime :: CInt -> CInt -> IO (Ptr  ())
+
+-- | usage: (@dcBlit obj xdestydestwidthheight source xsrcysrc rop useMask@).
+dcBlit :: DC  a -> Rect -> DC  c -> Point -> Int -> Bool ->  IO Bool
+dcBlit _obj xdestydestwidthheight source xsrcysrc rop useMask 
+  = withBoolResult $
+    withObjectRef "dcBlit" _obj $ \cobj__obj -> 
+    withObjectPtr source $ \cobj_source -> 
+    wxDC_Blit cobj__obj  (toCIntRectX xdestydestwidthheight) (toCIntRectY xdestydestwidthheight)(toCIntRectW xdestydestwidthheight) (toCIntRectH xdestydestwidthheight)  cobj_source  (toCIntPointX xsrcysrc) (toCIntPointY xsrcysrc)  (toCInt rop)  (toCBool useMask)  
+foreign import ccall "wxDC_Blit" wxDC_Blit :: Ptr (TDC a) -> CInt -> CInt -> CInt -> CInt -> Ptr (TDC c) -> CInt -> CInt -> CInt -> CBool -> IO CBool
+
+-- | usage: (@dcCalcBoundingBox obj xy@).
+dcCalcBoundingBox :: DC  a -> Point ->  IO ()
+dcCalcBoundingBox _obj xy 
+  = withObjectRef "dcCalcBoundingBox" _obj $ \cobj__obj -> 
+    wxDC_CalcBoundingBox cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxDC_CalcBoundingBox" wxDC_CalcBoundingBox :: Ptr (TDC a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@dcCanDrawBitmap obj@).
+dcCanDrawBitmap :: DC  a ->  IO Bool
+dcCanDrawBitmap _obj 
+  = withBoolResult $
+    withObjectRef "dcCanDrawBitmap" _obj $ \cobj__obj -> 
+    wxDC_CanDrawBitmap cobj__obj  
+foreign import ccall "wxDC_CanDrawBitmap" wxDC_CanDrawBitmap :: Ptr (TDC a) -> IO CBool
+
+-- | usage: (@dcCanGetTextExtent obj@).
+dcCanGetTextExtent :: DC  a ->  IO Bool
+dcCanGetTextExtent _obj 
+  = withBoolResult $
+    withObjectRef "dcCanGetTextExtent" _obj $ \cobj__obj -> 
+    wxDC_CanGetTextExtent cobj__obj  
+foreign import ccall "wxDC_CanGetTextExtent" wxDC_CanGetTextExtent :: Ptr (TDC a) -> IO CBool
+
+-- | usage: (@dcClear obj@).
+dcClear :: DC  a ->  IO ()
+dcClear _obj 
+  = withObjectRef "dcClear" _obj $ \cobj__obj -> 
+    wxDC_Clear cobj__obj  
+foreign import ccall "wxDC_Clear" wxDC_Clear :: Ptr (TDC a) -> IO ()
+
+-- | usage: (@dcComputeScaleAndOrigin obj@).
+dcComputeScaleAndOrigin :: DC  a ->  IO ()
+dcComputeScaleAndOrigin obj 
+  = withObjectRef "dcComputeScaleAndOrigin" obj $ \cobj_obj -> 
+    wxDC_ComputeScaleAndOrigin cobj_obj  
+foreign import ccall "wxDC_ComputeScaleAndOrigin" wxDC_ComputeScaleAndOrigin :: Ptr (TDC a) -> IO ()
+
+-- | usage: (@dcCrossHair obj xy@).
+dcCrossHair :: DC  a -> Point ->  IO ()
+dcCrossHair _obj xy 
+  = withObjectRef "dcCrossHair" _obj $ \cobj__obj -> 
+    wxDC_CrossHair cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxDC_CrossHair" wxDC_CrossHair :: Ptr (TDC a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@dcDelete obj@).
+dcDelete :: DC  a ->  IO ()
+dcDelete
+  = objectDelete
+
+
+-- | usage: (@dcDestroyClippingRegion obj@).
+dcDestroyClippingRegion :: DC  a ->  IO ()
+dcDestroyClippingRegion _obj 
+  = withObjectRef "dcDestroyClippingRegion" _obj $ \cobj__obj -> 
+    wxDC_DestroyClippingRegion cobj__obj  
+foreign import ccall "wxDC_DestroyClippingRegion" wxDC_DestroyClippingRegion :: Ptr (TDC a) -> IO ()
+
+-- | usage: (@dcDeviceToLogicalX obj x@).
+dcDeviceToLogicalX :: DC  a -> Int ->  IO Int
+dcDeviceToLogicalX _obj x 
+  = withIntResult $
+    withObjectRef "dcDeviceToLogicalX" _obj $ \cobj__obj -> 
+    wxDC_DeviceToLogicalX cobj__obj  (toCInt x)  
+foreign import ccall "wxDC_DeviceToLogicalX" wxDC_DeviceToLogicalX :: Ptr (TDC a) -> CInt -> IO CInt
+
+-- | usage: (@dcDeviceToLogicalXRel obj x@).
+dcDeviceToLogicalXRel :: DC  a -> Int ->  IO Int
+dcDeviceToLogicalXRel _obj x 
+  = withIntResult $
+    withObjectRef "dcDeviceToLogicalXRel" _obj $ \cobj__obj -> 
+    wxDC_DeviceToLogicalXRel cobj__obj  (toCInt x)  
+foreign import ccall "wxDC_DeviceToLogicalXRel" wxDC_DeviceToLogicalXRel :: Ptr (TDC a) -> CInt -> IO CInt
+
+-- | usage: (@dcDeviceToLogicalY obj y@).
+dcDeviceToLogicalY :: DC  a -> Int ->  IO Int
+dcDeviceToLogicalY _obj y 
+  = withIntResult $
+    withObjectRef "dcDeviceToLogicalY" _obj $ \cobj__obj -> 
+    wxDC_DeviceToLogicalY cobj__obj  (toCInt y)  
+foreign import ccall "wxDC_DeviceToLogicalY" wxDC_DeviceToLogicalY :: Ptr (TDC a) -> CInt -> IO CInt
+
+-- | usage: (@dcDeviceToLogicalYRel obj y@).
+dcDeviceToLogicalYRel :: DC  a -> Int ->  IO Int
+dcDeviceToLogicalYRel _obj y 
+  = withIntResult $
+    withObjectRef "dcDeviceToLogicalYRel" _obj $ \cobj__obj -> 
+    wxDC_DeviceToLogicalYRel cobj__obj  (toCInt y)  
+foreign import ccall "wxDC_DeviceToLogicalYRel" wxDC_DeviceToLogicalYRel :: Ptr (TDC a) -> CInt -> IO CInt
+
+-- | usage: (@dcDrawArc obj x1y1 x2y2 xcyc@).
+dcDrawArc :: DC  a -> Point -> Point -> Point ->  IO ()
+dcDrawArc _obj x1y1 x2y2 xcyc 
+  = withObjectRef "dcDrawArc" _obj $ \cobj__obj -> 
+    wxDC_DrawArc cobj__obj  (toCIntPointX x1y1) (toCIntPointY x1y1)  (toCIntPointX x2y2) (toCIntPointY x2y2)  (toCIntPointX xcyc) (toCIntPointY xcyc)  
+foreign import ccall "wxDC_DrawArc" wxDC_DrawArc :: Ptr (TDC a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO ()
+
+-- | usage: (@dcDrawBitmap obj bmp xy useMask@).
+dcDrawBitmap :: DC  a -> Bitmap  b -> Point -> Bool ->  IO ()
+dcDrawBitmap _obj bmp xy useMask 
+  = withObjectRef "dcDrawBitmap" _obj $ \cobj__obj -> 
+    withObjectPtr bmp $ \cobj_bmp -> 
+    wxDC_DrawBitmap cobj__obj  cobj_bmp  (toCIntPointX xy) (toCIntPointY xy)  (toCBool useMask)  
+foreign import ccall "wxDC_DrawBitmap" wxDC_DrawBitmap :: Ptr (TDC a) -> Ptr (TBitmap b) -> CInt -> CInt -> CBool -> IO ()
+
+-- | usage: (@dcDrawCheckMark obj xywidthheight@).
+dcDrawCheckMark :: DC  a -> Rect ->  IO ()
+dcDrawCheckMark _obj xywidthheight 
+  = withObjectRef "dcDrawCheckMark" _obj $ \cobj__obj -> 
+    wxDC_DrawCheckMark cobj__obj  (toCIntRectX xywidthheight) (toCIntRectY xywidthheight)(toCIntRectW xywidthheight) (toCIntRectH xywidthheight)  
+foreign import ccall "wxDC_DrawCheckMark" wxDC_DrawCheckMark :: Ptr (TDC a) -> CInt -> CInt -> CInt -> CInt -> IO ()
+
+-- | usage: (@dcDrawCircle obj xy radius@).
+dcDrawCircle :: DC  a -> Point -> Int ->  IO ()
+dcDrawCircle _obj xy radius 
+  = withObjectRef "dcDrawCircle" _obj $ \cobj__obj -> 
+    wxDC_DrawCircle cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  (toCInt radius)  
+foreign import ccall "wxDC_DrawCircle" wxDC_DrawCircle :: Ptr (TDC a) -> CInt -> CInt -> CInt -> IO ()
+
+-- | usage: (@dcDrawEllipse obj xywidthheight@).
+dcDrawEllipse :: DC  a -> Rect ->  IO ()
+dcDrawEllipse _obj xywidthheight 
+  = withObjectRef "dcDrawEllipse" _obj $ \cobj__obj -> 
+    wxDC_DrawEllipse cobj__obj  (toCIntRectX xywidthheight) (toCIntRectY xywidthheight)(toCIntRectW xywidthheight) (toCIntRectH xywidthheight)  
+foreign import ccall "wxDC_DrawEllipse" wxDC_DrawEllipse :: Ptr (TDC a) -> CInt -> CInt -> CInt -> CInt -> IO ()
+
+-- | usage: (@dcDrawEllipticArc obj xywh sa ea@).
+dcDrawEllipticArc :: DC  a -> Rect -> Double -> Double ->  IO ()
+dcDrawEllipticArc _obj xywh sa ea 
+  = withObjectRef "dcDrawEllipticArc" _obj $ \cobj__obj -> 
+    wxDC_DrawEllipticArc cobj__obj  (toCIntRectX xywh) (toCIntRectY xywh)(toCIntRectW xywh) (toCIntRectH xywh)  sa  ea  
+foreign import ccall "wxDC_DrawEllipticArc" wxDC_DrawEllipticArc :: Ptr (TDC a) -> CInt -> CInt -> CInt -> CInt -> Double -> Double -> IO ()
+
+-- | usage: (@dcDrawIcon obj icon xy@).
+dcDrawIcon :: DC  a -> Icon  b -> Point ->  IO ()
+dcDrawIcon _obj icon xy 
+  = withObjectRef "dcDrawIcon" _obj $ \cobj__obj -> 
+    withObjectPtr icon $ \cobj_icon -> 
+    wxDC_DrawIcon cobj__obj  cobj_icon  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxDC_DrawIcon" wxDC_DrawIcon :: Ptr (TDC a) -> Ptr (TIcon b) -> CInt -> CInt -> IO ()
+
+-- | usage: (@dcDrawLabel obj str xywh align indexAccel@).
+dcDrawLabel :: DC  a -> String -> Rect -> Int -> Int ->  IO ()
+dcDrawLabel _obj str xywh align indexAccel 
+  = withObjectRef "dcDrawLabel" _obj $ \cobj__obj -> 
+    withStringPtr str $ \cobj_str -> 
+    wxDC_DrawLabel cobj__obj  cobj_str  (toCIntRectX xywh) (toCIntRectY xywh)(toCIntRectW xywh) (toCIntRectH xywh)  (toCInt align)  (toCInt indexAccel)  
+foreign import ccall "wxDC_DrawLabel" wxDC_DrawLabel :: Ptr (TDC a) -> Ptr (TWxString b) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO ()
+
+-- | usage: (@dcDrawLabelBitmap obj str bmp xywh align indexAccel@).
+dcDrawLabelBitmap :: DC  a -> String -> Bitmap  c -> Rect -> Int -> Int ->  IO (Rect)
+dcDrawLabelBitmap _obj str bmp xywh align indexAccel 
+  = withWxRectResult $
+    withObjectRef "dcDrawLabelBitmap" _obj $ \cobj__obj -> 
+    withStringPtr str $ \cobj_str -> 
+    withObjectPtr bmp $ \cobj_bmp -> 
+    wxDC_DrawLabelBitmap cobj__obj  cobj_str  cobj_bmp  (toCIntRectX xywh) (toCIntRectY xywh)(toCIntRectW xywh) (toCIntRectH xywh)  (toCInt align)  (toCInt indexAccel)  
+foreign import ccall "wxDC_DrawLabelBitmap" wxDC_DrawLabelBitmap :: Ptr (TDC a) -> Ptr (TWxString b) -> Ptr (TBitmap c) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TWxRect ()))
+
+-- | usage: (@dcDrawLine obj x1y1 x2y2@).
+dcDrawLine :: DC  a -> Point -> Point ->  IO ()
+dcDrawLine _obj x1y1 x2y2 
+  = withObjectRef "dcDrawLine" _obj $ \cobj__obj -> 
+    wxDC_DrawLine cobj__obj  (toCIntPointX x1y1) (toCIntPointY x1y1)  (toCIntPointX x2y2) (toCIntPointY x2y2)  
+foreign import ccall "wxDC_DrawLine" wxDC_DrawLine :: Ptr (TDC a) -> CInt -> CInt -> CInt -> CInt -> IO ()
+
+-- | usage: (@dcDrawLines obj n x y xoffsetyoffset@).
+dcDrawLines :: DC  a -> Int -> Ptr  c -> Ptr  d -> Point ->  IO ()
+dcDrawLines _obj n x y xoffsetyoffset 
+  = withObjectRef "dcDrawLines" _obj $ \cobj__obj -> 
+    wxDC_DrawLines cobj__obj  (toCInt n)  x  y  (toCIntPointX xoffsetyoffset) (toCIntPointY xoffsetyoffset)  
+foreign import ccall "wxDC_DrawLines" wxDC_DrawLines :: Ptr (TDC a) -> CInt -> Ptr  c -> Ptr  d -> CInt -> CInt -> IO ()
+
+-- | usage: (@dcDrawPoint obj xy@).
+dcDrawPoint :: DC  a -> Point ->  IO ()
+dcDrawPoint _obj xy 
+  = withObjectRef "dcDrawPoint" _obj $ \cobj__obj -> 
+    wxDC_DrawPoint cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxDC_DrawPoint" wxDC_DrawPoint :: Ptr (TDC a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@dcDrawPolyPolygon obj n count x y xoffsetyoffset fillStyle@).
+dcDrawPolyPolygon :: DC  a -> Int -> Ptr  c -> Ptr  d -> Ptr  e -> Point -> Int ->  IO ()
+dcDrawPolyPolygon _obj n count x y xoffsetyoffset fillStyle 
+  = withObjectRef "dcDrawPolyPolygon" _obj $ \cobj__obj -> 
+    wxDC_DrawPolyPolygon cobj__obj  (toCInt n)  count  x  y  (toCIntPointX xoffsetyoffset) (toCIntPointY xoffsetyoffset)  (toCInt fillStyle)  
+foreign import ccall "wxDC_DrawPolyPolygon" wxDC_DrawPolyPolygon :: Ptr (TDC a) -> CInt -> Ptr  c -> Ptr  d -> Ptr  e -> CInt -> CInt -> CInt -> IO ()
+
+-- | usage: (@dcDrawPolygon obj n x y xoffsetyoffset fillStyle@).
+dcDrawPolygon :: DC  a -> Int -> Ptr  c -> Ptr  d -> Point -> Int ->  IO ()
+dcDrawPolygon _obj n x y xoffsetyoffset fillStyle 
+  = withObjectRef "dcDrawPolygon" _obj $ \cobj__obj -> 
+    wxDC_DrawPolygon cobj__obj  (toCInt n)  x  y  (toCIntPointX xoffsetyoffset) (toCIntPointY xoffsetyoffset)  (toCInt fillStyle)  
+foreign import ccall "wxDC_DrawPolygon" wxDC_DrawPolygon :: Ptr (TDC a) -> CInt -> Ptr  c -> Ptr  d -> CInt -> CInt -> CInt -> IO ()
+
+-- | usage: (@dcDrawRectangle obj xywidthheight@).
+dcDrawRectangle :: DC  a -> Rect ->  IO ()
+dcDrawRectangle _obj xywidthheight 
+  = withObjectRef "dcDrawRectangle" _obj $ \cobj__obj -> 
+    wxDC_DrawRectangle cobj__obj  (toCIntRectX xywidthheight) (toCIntRectY xywidthheight)(toCIntRectW xywidthheight) (toCIntRectH xywidthheight)  
+foreign import ccall "wxDC_DrawRectangle" wxDC_DrawRectangle :: Ptr (TDC a) -> CInt -> CInt -> CInt -> CInt -> IO ()
+
+-- | usage: (@dcDrawRotatedText obj text xy angle@).
+dcDrawRotatedText :: DC  a -> String -> Point -> Double ->  IO ()
+dcDrawRotatedText _obj text xy angle 
+  = withObjectRef "dcDrawRotatedText" _obj $ \cobj__obj -> 
+    withStringPtr text $ \cobj_text -> 
+    wxDC_DrawRotatedText cobj__obj  cobj_text  (toCIntPointX xy) (toCIntPointY xy)  angle  
+foreign import ccall "wxDC_DrawRotatedText" wxDC_DrawRotatedText :: Ptr (TDC a) -> Ptr (TWxString b) -> CInt -> CInt -> Double -> IO ()
+
+-- | usage: (@dcDrawRoundedRectangle obj xywidthheight radius@).
+dcDrawRoundedRectangle :: DC  a -> Rect -> Double ->  IO ()
+dcDrawRoundedRectangle _obj xywidthheight radius 
+  = withObjectRef "dcDrawRoundedRectangle" _obj $ \cobj__obj -> 
+    wxDC_DrawRoundedRectangle cobj__obj  (toCIntRectX xywidthheight) (toCIntRectY xywidthheight)(toCIntRectW xywidthheight) (toCIntRectH xywidthheight)  radius  
+foreign import ccall "wxDC_DrawRoundedRectangle" wxDC_DrawRoundedRectangle :: Ptr (TDC a) -> CInt -> CInt -> CInt -> CInt -> Double -> IO ()
+
+-- | usage: (@dcDrawText obj text xy@).
+dcDrawText :: DC  a -> String -> Point ->  IO ()
+dcDrawText _obj text xy 
+  = withObjectRef "dcDrawText" _obj $ \cobj__obj -> 
+    withStringPtr text $ \cobj_text -> 
+    wxDC_DrawText cobj__obj  cobj_text  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxDC_DrawText" wxDC_DrawText :: Ptr (TDC a) -> Ptr (TWxString b) -> CInt -> CInt -> IO ()
+
+-- | usage: (@dcEndDoc obj@).
+dcEndDoc :: DC  a ->  IO ()
+dcEndDoc _obj 
+  = withObjectRef "dcEndDoc" _obj $ \cobj__obj -> 
+    wxDC_EndDoc cobj__obj  
+foreign import ccall "wxDC_EndDoc" wxDC_EndDoc :: Ptr (TDC a) -> IO ()
+
+-- | usage: (@dcEndPage obj@).
+dcEndPage :: DC  a ->  IO ()
+dcEndPage _obj 
+  = withObjectRef "dcEndPage" _obj $ \cobj__obj -> 
+    wxDC_EndPage cobj__obj  
+foreign import ccall "wxDC_EndPage" wxDC_EndPage :: Ptr (TDC a) -> IO ()
+
+-- | usage: (@dcFloodFill obj xy col style@).
+dcFloodFill :: DC  a -> Point -> Color -> Int ->  IO ()
+dcFloodFill _obj xy col style 
+  = withObjectRef "dcFloodFill" _obj $ \cobj__obj -> 
+    withColourPtr col $ \cobj_col -> 
+    wxDC_FloodFill cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  cobj_col  (toCInt style)  
+foreign import ccall "wxDC_FloodFill" wxDC_FloodFill :: Ptr (TDC a) -> CInt -> CInt -> Ptr (TColour c) -> CInt -> IO ()
+
+-- | usage: (@dcGetBackground obj@).
+dcGetBackground :: DC  a ->  IO (Brush  ())
+dcGetBackground _obj 
+  = withRefBrush $ \pref -> 
+    withObjectRef "dcGetBackground" _obj $ \cobj__obj -> 
+    wxDC_GetBackground cobj__obj   pref
+foreign import ccall "wxDC_GetBackground" wxDC_GetBackground :: Ptr (TDC a) -> Ptr (TBrush ()) -> IO ()
+
+-- | usage: (@dcGetBackgroundMode obj@).
+dcGetBackgroundMode :: DC  a ->  IO Int
+dcGetBackgroundMode _obj 
+  = withIntResult $
+    withObjectRef "dcGetBackgroundMode" _obj $ \cobj__obj -> 
+    wxDC_GetBackgroundMode cobj__obj  
+foreign import ccall "wxDC_GetBackgroundMode" wxDC_GetBackgroundMode :: Ptr (TDC a) -> IO CInt
+
+-- | usage: (@dcGetBrush obj@).
+dcGetBrush :: DC  a ->  IO (Brush  ())
+dcGetBrush _obj 
+  = withRefBrush $ \pref -> 
+    withObjectRef "dcGetBrush" _obj $ \cobj__obj -> 
+    wxDC_GetBrush cobj__obj   pref
+foreign import ccall "wxDC_GetBrush" wxDC_GetBrush :: Ptr (TDC a) -> Ptr (TBrush ()) -> IO ()
+
+-- | usage: (@dcGetCharHeight obj@).
+dcGetCharHeight :: DC  a ->  IO Int
+dcGetCharHeight _obj 
+  = withIntResult $
+    withObjectRef "dcGetCharHeight" _obj $ \cobj__obj -> 
+    wxDC_GetCharHeight cobj__obj  
+foreign import ccall "wxDC_GetCharHeight" wxDC_GetCharHeight :: Ptr (TDC a) -> IO CInt
+
+-- | usage: (@dcGetCharWidth obj@).
+dcGetCharWidth :: DC  a ->  IO Int
+dcGetCharWidth _obj 
+  = withIntResult $
+    withObjectRef "dcGetCharWidth" _obj $ \cobj__obj -> 
+    wxDC_GetCharWidth cobj__obj  
+foreign import ccall "wxDC_GetCharWidth" wxDC_GetCharWidth :: Ptr (TDC a) -> IO CInt
+
+-- | usage: (@dcGetClippingBox obj@).
+dcGetClippingBox :: DC  a ->  IO Rect
+dcGetClippingBox _obj 
+  = withRectResult $ \px py pw ph -> 
+    withObjectRef "dcGetClippingBox" _obj $ \cobj__obj -> 
+    wxDC_GetClippingBox cobj__obj  px py pw ph
+foreign import ccall "wxDC_GetClippingBox" wxDC_GetClippingBox :: Ptr (TDC a) -> Ptr CInt -> Ptr CInt -> Ptr CInt -> Ptr CInt -> IO ()
+
+-- | usage: (@dcGetDepth obj@).
+dcGetDepth :: DC  a ->  IO Int
+dcGetDepth _obj 
+  = withIntResult $
+    withObjectRef "dcGetDepth" _obj $ \cobj__obj -> 
+    wxDC_GetDepth cobj__obj  
+foreign import ccall "wxDC_GetDepth" wxDC_GetDepth :: Ptr (TDC a) -> IO CInt
+
+-- | usage: (@dcGetDeviceOrigin obj@).
+dcGetDeviceOrigin :: DC  a ->  IO Point
+dcGetDeviceOrigin _obj 
+  = withPointResult $ \px py -> 
+    withObjectRef "dcGetDeviceOrigin" _obj $ \cobj__obj -> 
+    wxDC_GetDeviceOrigin cobj__obj   px py
+foreign import ccall "wxDC_GetDeviceOrigin" wxDC_GetDeviceOrigin :: Ptr (TDC a) -> Ptr CInt -> Ptr CInt -> IO ()
+
+-- | usage: (@dcGetFont obj@).
+dcGetFont :: DC  a ->  IO (Font  ())
+dcGetFont _obj 
+  = withRefFont $ \pref -> 
+    withObjectRef "dcGetFont" _obj $ \cobj__obj -> 
+    wxDC_GetFont cobj__obj   pref
+foreign import ccall "wxDC_GetFont" wxDC_GetFont :: Ptr (TDC a) -> Ptr (TFont ()) -> IO ()
+
+-- | usage: (@dcGetLogicalFunction obj@).
+dcGetLogicalFunction :: DC  a ->  IO Int
+dcGetLogicalFunction _obj 
+  = withIntResult $
+    withObjectRef "dcGetLogicalFunction" _obj $ \cobj__obj -> 
+    wxDC_GetLogicalFunction cobj__obj  
+foreign import ccall "wxDC_GetLogicalFunction" wxDC_GetLogicalFunction :: Ptr (TDC a) -> IO CInt
+
+-- | usage: (@dcGetLogicalOrigin obj@).
+dcGetLogicalOrigin :: DC  a ->  IO Point
+dcGetLogicalOrigin _obj 
+  = withPointResult $ \px py -> 
+    withObjectRef "dcGetLogicalOrigin" _obj $ \cobj__obj -> 
+    wxDC_GetLogicalOrigin cobj__obj   px py
+foreign import ccall "wxDC_GetLogicalOrigin" wxDC_GetLogicalOrigin :: Ptr (TDC a) -> Ptr CInt -> Ptr CInt -> IO ()
+
+-- | usage: (@dcGetLogicalScale obj@).
+dcGetLogicalScale :: DC  a ->  IO (Size2D Double)
+dcGetLogicalScale _obj 
+  = withSizeDoubleResult $ \pw ph -> 
+    withObjectRef "dcGetLogicalScale" _obj $ \cobj__obj -> 
+    wxDC_GetLogicalScale cobj__obj   pw ph
+foreign import ccall "wxDC_GetLogicalScale" wxDC_GetLogicalScale :: Ptr (TDC a) -> Ptr CDouble -> Ptr CDouble -> IO ()
+
+-- | usage: (@dcGetMapMode obj@).
+dcGetMapMode :: DC  a ->  IO Int
+dcGetMapMode _obj 
+  = withIntResult $
+    withObjectRef "dcGetMapMode" _obj $ \cobj__obj -> 
+    wxDC_GetMapMode cobj__obj  
+foreign import ccall "wxDC_GetMapMode" wxDC_GetMapMode :: Ptr (TDC a) -> IO CInt
+
+-- | usage: (@dcGetMultiLineTextExtent self string w h heightLine theFont@).
+dcGetMultiLineTextExtent :: DC  a -> String -> Ptr  c -> Ptr  d -> Ptr  e -> Font  f ->  IO ()
+dcGetMultiLineTextExtent self string w h heightLine theFont 
+  = withObjectRef "dcGetMultiLineTextExtent" self $ \cobj_self -> 
+    withStringPtr string $ \cobj_string -> 
+    withObjectPtr theFont $ \cobj_theFont -> 
+    wxDC_GetMultiLineTextExtent cobj_self  cobj_string  w  h  heightLine  cobj_theFont  
+foreign import ccall "wxDC_GetMultiLineTextExtent" wxDC_GetMultiLineTextExtent :: Ptr (TDC a) -> Ptr (TWxString b) -> Ptr  c -> Ptr  d -> Ptr  e -> Ptr (TFont f) -> IO ()
+
+-- | usage: (@dcGetPPI obj@).
+dcGetPPI :: DC  a ->  IO (Size)
+dcGetPPI _obj 
+  = withWxSizeResult $
+    withObjectRef "dcGetPPI" _obj $ \cobj__obj -> 
+    wxDC_GetPPI cobj__obj  
+foreign import ccall "wxDC_GetPPI" wxDC_GetPPI :: Ptr (TDC a) -> IO (Ptr (TWxSize ()))
+
+-- | usage: (@dcGetPen obj@).
+dcGetPen :: DC  a ->  IO (Pen  ())
+dcGetPen _obj 
+  = withRefPen $ \pref -> 
+    withObjectRef "dcGetPen" _obj $ \cobj__obj -> 
+    wxDC_GetPen cobj__obj   pref
+foreign import ccall "wxDC_GetPen" wxDC_GetPen :: Ptr (TDC a) -> Ptr (TPen ()) -> IO ()
+
+-- | usage: (@dcGetPixel obj xy col@).
+dcGetPixel :: DC  a -> Point -> Color ->  IO Bool
+dcGetPixel _obj xy col 
+  = withBoolResult $
+    withObjectRef "dcGetPixel" _obj $ \cobj__obj -> 
+    withColourPtr col $ \cobj_col -> 
+    wxDC_GetPixel cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  cobj_col  
+foreign import ccall "wxDC_GetPixel" wxDC_GetPixel :: Ptr (TDC a) -> CInt -> CInt -> Ptr (TColour c) -> IO CBool
+
+-- | usage: (@dcGetPixel2 obj xy@).
+dcGetPixel2 :: DC  a -> Point ->  IO (Color)
+dcGetPixel2 _obj xy 
+  = withRefColour $ \pref -> 
+    withObjectRef "dcGetPixel2" _obj $ \cobj__obj -> 
+    wxDC_GetPixel2 cobj__obj  (toCIntPointX xy) (toCIntPointY xy)   pref
+foreign import ccall "wxDC_GetPixel2" wxDC_GetPixel2 :: Ptr (TDC a) -> CInt -> CInt -> Ptr (TColour ()) -> IO ()
+
+-- | usage: (@dcGetSize obj@).
+dcGetSize :: DC  a ->  IO (Size)
+dcGetSize _obj 
+  = withWxSizeResult $
+    withObjectRef "dcGetSize" _obj $ \cobj__obj -> 
+    wxDC_GetSize cobj__obj  
+foreign import ccall "wxDC_GetSize" wxDC_GetSize :: Ptr (TDC a) -> IO (Ptr (TWxSize ()))
+
+-- | usage: (@dcGetSizeMM obj@).
+dcGetSizeMM :: DC  a ->  IO (Size)
+dcGetSizeMM _obj 
+  = withWxSizeResult $
+    withObjectRef "dcGetSizeMM" _obj $ \cobj__obj -> 
+    wxDC_GetSizeMM cobj__obj  
+foreign import ccall "wxDC_GetSizeMM" wxDC_GetSizeMM :: Ptr (TDC a) -> IO (Ptr (TWxSize ()))
+
+-- | usage: (@dcGetTextBackground obj@).
+dcGetTextBackground :: DC  a ->  IO (Color)
+dcGetTextBackground _obj 
+  = withRefColour $ \pref -> 
+    withObjectRef "dcGetTextBackground" _obj $ \cobj__obj -> 
+    wxDC_GetTextBackground cobj__obj   pref
+foreign import ccall "wxDC_GetTextBackground" wxDC_GetTextBackground :: Ptr (TDC a) -> Ptr (TColour ()) -> IO ()
+
+-- | usage: (@dcGetTextExtent self string w h descent externalLeading theFont@).
+dcGetTextExtent :: DC  a -> String -> Ptr  c -> Ptr  d -> Ptr  e -> Ptr  f -> Font  g ->  IO ()
+dcGetTextExtent self string w h descent externalLeading theFont 
+  = withObjectRef "dcGetTextExtent" self $ \cobj_self -> 
+    withStringPtr string $ \cobj_string -> 
+    withObjectPtr theFont $ \cobj_theFont -> 
+    wxDC_GetTextExtent cobj_self  cobj_string  w  h  descent  externalLeading  cobj_theFont  
+foreign import ccall "wxDC_GetTextExtent" wxDC_GetTextExtent :: Ptr (TDC a) -> Ptr (TWxString b) -> Ptr  c -> Ptr  d -> Ptr  e -> Ptr  f -> Ptr (TFont g) -> IO ()
+
+-- | usage: (@dcGetTextForeground obj@).
+dcGetTextForeground :: DC  a ->  IO (Color)
+dcGetTextForeground _obj 
+  = withRefColour $ \pref -> 
+    withObjectRef "dcGetTextForeground" _obj $ \cobj__obj -> 
+    wxDC_GetTextForeground cobj__obj   pref
+foreign import ccall "wxDC_GetTextForeground" wxDC_GetTextForeground :: Ptr (TDC a) -> Ptr (TColour ()) -> IO ()
+
+-- | usage: (@dcGetUserScale obj@).
+dcGetUserScale :: DC  a ->  IO (Size2D Double)
+dcGetUserScale _obj 
+  = withSizeDoubleResult $ \pw ph -> 
+    withObjectRef "dcGetUserScale" _obj $ \cobj__obj -> 
+    wxDC_GetUserScale cobj__obj   pw ph
+foreign import ccall "wxDC_GetUserScale" wxDC_GetUserScale :: Ptr (TDC a) -> Ptr CDouble -> Ptr CDouble -> IO ()
+
+-- | usage: (@dcGetUserScaleX dc@).
+dcGetUserScaleX :: DC  a ->  IO Double
+dcGetUserScaleX dc 
+  = withObjectRef "dcGetUserScaleX" dc $ \cobj_dc -> 
+    wxDC_GetUserScaleX cobj_dc  
+foreign import ccall "wxDC_GetUserScaleX" wxDC_GetUserScaleX :: Ptr (TDC a) -> IO Double
+
+-- | usage: (@dcGetUserScaleY dc@).
+dcGetUserScaleY :: DC  a ->  IO Double
+dcGetUserScaleY dc 
+  = withObjectRef "dcGetUserScaleY" dc $ \cobj_dc -> 
+    wxDC_GetUserScaleY cobj_dc  
+foreign import ccall "wxDC_GetUserScaleY" wxDC_GetUserScaleY :: Ptr (TDC a) -> IO Double
+
+-- | usage: (@dcIsOk obj@).
+dcIsOk :: DC  a ->  IO Bool
+dcIsOk _obj 
+  = withBoolResult $
+    withObjectRef "dcIsOk" _obj $ \cobj__obj -> 
+    wxDC_IsOk cobj__obj  
+foreign import ccall "wxDC_IsOk" wxDC_IsOk :: Ptr (TDC a) -> IO CBool
+
+-- | usage: (@dcLogicalToDeviceX obj x@).
+dcLogicalToDeviceX :: DC  a -> Int ->  IO Int
+dcLogicalToDeviceX _obj x 
+  = withIntResult $
+    withObjectRef "dcLogicalToDeviceX" _obj $ \cobj__obj -> 
+    wxDC_LogicalToDeviceX cobj__obj  (toCInt x)  
+foreign import ccall "wxDC_LogicalToDeviceX" wxDC_LogicalToDeviceX :: Ptr (TDC a) -> CInt -> IO CInt
+
+-- | usage: (@dcLogicalToDeviceXRel obj x@).
+dcLogicalToDeviceXRel :: DC  a -> Int ->  IO Int
+dcLogicalToDeviceXRel _obj x 
+  = withIntResult $
+    withObjectRef "dcLogicalToDeviceXRel" _obj $ \cobj__obj -> 
+    wxDC_LogicalToDeviceXRel cobj__obj  (toCInt x)  
+foreign import ccall "wxDC_LogicalToDeviceXRel" wxDC_LogicalToDeviceXRel :: Ptr (TDC a) -> CInt -> IO CInt
+
+-- | usage: (@dcLogicalToDeviceY obj y@).
+dcLogicalToDeviceY :: DC  a -> Int ->  IO Int
+dcLogicalToDeviceY _obj y 
+  = withIntResult $
+    withObjectRef "dcLogicalToDeviceY" _obj $ \cobj__obj -> 
+    wxDC_LogicalToDeviceY cobj__obj  (toCInt y)  
+foreign import ccall "wxDC_LogicalToDeviceY" wxDC_LogicalToDeviceY :: Ptr (TDC a) -> CInt -> IO CInt
+
+-- | usage: (@dcLogicalToDeviceYRel obj y@).
+dcLogicalToDeviceYRel :: DC  a -> Int ->  IO Int
+dcLogicalToDeviceYRel _obj y 
+  = withIntResult $
+    withObjectRef "dcLogicalToDeviceYRel" _obj $ \cobj__obj -> 
+    wxDC_LogicalToDeviceYRel cobj__obj  (toCInt y)  
+foreign import ccall "wxDC_LogicalToDeviceYRel" wxDC_LogicalToDeviceYRel :: Ptr (TDC a) -> CInt -> IO CInt
+
+-- | usage: (@dcMaxX obj@).
+dcMaxX :: DC  a ->  IO Int
+dcMaxX _obj 
+  = withIntResult $
+    withObjectRef "dcMaxX" _obj $ \cobj__obj -> 
+    wxDC_MaxX cobj__obj  
+foreign import ccall "wxDC_MaxX" wxDC_MaxX :: Ptr (TDC a) -> IO CInt
+
+-- | usage: (@dcMaxY obj@).
+dcMaxY :: DC  a ->  IO Int
+dcMaxY _obj 
+  = withIntResult $
+    withObjectRef "dcMaxY" _obj $ \cobj__obj -> 
+    wxDC_MaxY cobj__obj  
+foreign import ccall "wxDC_MaxY" wxDC_MaxY :: Ptr (TDC a) -> IO CInt
+
+-- | usage: (@dcMinX obj@).
+dcMinX :: DC  a ->  IO Int
+dcMinX _obj 
+  = withIntResult $
+    withObjectRef "dcMinX" _obj $ \cobj__obj -> 
+    wxDC_MinX cobj__obj  
+foreign import ccall "wxDC_MinX" wxDC_MinX :: Ptr (TDC a) -> IO CInt
+
+-- | usage: (@dcMinY obj@).
+dcMinY :: DC  a ->  IO Int
+dcMinY _obj 
+  = withIntResult $
+    withObjectRef "dcMinY" _obj $ \cobj__obj -> 
+    wxDC_MinY cobj__obj  
+foreign import ccall "wxDC_MinY" wxDC_MinY :: Ptr (TDC a) -> IO CInt
+
+-- | usage: (@dcResetBoundingBox obj@).
+dcResetBoundingBox :: DC  a ->  IO ()
+dcResetBoundingBox _obj 
+  = withObjectRef "dcResetBoundingBox" _obj $ \cobj__obj -> 
+    wxDC_ResetBoundingBox cobj__obj  
+foreign import ccall "wxDC_ResetBoundingBox" wxDC_ResetBoundingBox :: Ptr (TDC a) -> IO ()
+
+-- | usage: (@dcSetAxisOrientation obj xLeftRight yBottomUp@).
+dcSetAxisOrientation :: DC  a -> Bool -> Bool ->  IO ()
+dcSetAxisOrientation _obj xLeftRight yBottomUp 
+  = withObjectRef "dcSetAxisOrientation" _obj $ \cobj__obj -> 
+    wxDC_SetAxisOrientation cobj__obj  (toCBool xLeftRight)  (toCBool yBottomUp)  
+foreign import ccall "wxDC_SetAxisOrientation" wxDC_SetAxisOrientation :: Ptr (TDC a) -> CBool -> CBool -> IO ()
+
+-- | usage: (@dcSetBackground obj brush@).
+dcSetBackground :: DC  a -> Brush  b ->  IO ()
+dcSetBackground _obj brush 
+  = withObjectRef "dcSetBackground" _obj $ \cobj__obj -> 
+    withObjectPtr brush $ \cobj_brush -> 
+    wxDC_SetBackground cobj__obj  cobj_brush  
+foreign import ccall "wxDC_SetBackground" wxDC_SetBackground :: Ptr (TDC a) -> Ptr (TBrush b) -> IO ()
+
+-- | usage: (@dcSetBackgroundMode obj mode@).
+dcSetBackgroundMode :: DC  a -> Int ->  IO ()
+dcSetBackgroundMode _obj mode 
+  = withObjectRef "dcSetBackgroundMode" _obj $ \cobj__obj -> 
+    wxDC_SetBackgroundMode cobj__obj  (toCInt mode)  
+foreign import ccall "wxDC_SetBackgroundMode" wxDC_SetBackgroundMode :: Ptr (TDC a) -> CInt -> IO ()
+
+-- | usage: (@dcSetBrush obj brush@).
+dcSetBrush :: DC  a -> Brush  b ->  IO ()
+dcSetBrush _obj brush 
+  = withObjectRef "dcSetBrush" _obj $ \cobj__obj -> 
+    withObjectPtr brush $ \cobj_brush -> 
+    wxDC_SetBrush cobj__obj  cobj_brush  
+foreign import ccall "wxDC_SetBrush" wxDC_SetBrush :: Ptr (TDC a) -> Ptr (TBrush b) -> IO ()
+
+-- | usage: (@dcSetClippingRegion obj xywidthheight@).
+dcSetClippingRegion :: DC  a -> Rect ->  IO ()
+dcSetClippingRegion _obj xywidthheight 
+  = withObjectRef "dcSetClippingRegion" _obj $ \cobj__obj -> 
+    wxDC_SetClippingRegion cobj__obj  (toCIntRectX xywidthheight) (toCIntRectY xywidthheight)(toCIntRectW xywidthheight) (toCIntRectH xywidthheight)  
+foreign import ccall "wxDC_SetClippingRegion" wxDC_SetClippingRegion :: Ptr (TDC a) -> CInt -> CInt -> CInt -> CInt -> IO ()
+
+-- | usage: (@dcSetClippingRegionFromRegion obj region@).
+dcSetClippingRegionFromRegion :: DC  a -> Region  b ->  IO ()
+dcSetClippingRegionFromRegion _obj region 
+  = withObjectRef "dcSetClippingRegionFromRegion" _obj $ \cobj__obj -> 
+    withObjectPtr region $ \cobj_region -> 
+    wxDC_SetClippingRegionFromRegion cobj__obj  cobj_region  
+foreign import ccall "wxDC_SetClippingRegionFromRegion" wxDC_SetClippingRegionFromRegion :: Ptr (TDC a) -> Ptr (TRegion b) -> IO ()
+
+-- | usage: (@dcSetDeviceClippingRegion obj region@).
+dcSetDeviceClippingRegion :: DC  a -> Region  b ->  IO ()
+dcSetDeviceClippingRegion _obj region 
+  = withObjectRef "dcSetDeviceClippingRegion" _obj $ \cobj__obj -> 
+    withObjectPtr region $ \cobj_region -> 
+    wxDC_SetDeviceClippingRegion cobj__obj  cobj_region  
+foreign import ccall "wxDC_SetDeviceClippingRegion" wxDC_SetDeviceClippingRegion :: Ptr (TDC a) -> Ptr (TRegion b) -> IO ()
+
+-- | usage: (@dcSetDeviceOrigin obj xy@).
+dcSetDeviceOrigin :: DC  a -> Point ->  IO ()
+dcSetDeviceOrigin _obj xy 
+  = withObjectRef "dcSetDeviceOrigin" _obj $ \cobj__obj -> 
+    wxDC_SetDeviceOrigin cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxDC_SetDeviceOrigin" wxDC_SetDeviceOrigin :: Ptr (TDC a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@dcSetFont obj font@).
+dcSetFont :: DC  a -> Font  b ->  IO ()
+dcSetFont _obj font 
+  = withObjectRef "dcSetFont" _obj $ \cobj__obj -> 
+    withObjectPtr font $ \cobj_font -> 
+    wxDC_SetFont cobj__obj  cobj_font  
+foreign import ccall "wxDC_SetFont" wxDC_SetFont :: Ptr (TDC a) -> Ptr (TFont b) -> IO ()
+
+-- | usage: (@dcSetLogicalFunction obj function@).
+dcSetLogicalFunction :: DC  a -> Int ->  IO ()
+dcSetLogicalFunction _obj function 
+  = withObjectRef "dcSetLogicalFunction" _obj $ \cobj__obj -> 
+    wxDC_SetLogicalFunction cobj__obj  (toCInt function)  
+foreign import ccall "wxDC_SetLogicalFunction" wxDC_SetLogicalFunction :: Ptr (TDC a) -> CInt -> IO ()
+
+-- | usage: (@dcSetLogicalOrigin obj xy@).
+dcSetLogicalOrigin :: DC  a -> Point ->  IO ()
+dcSetLogicalOrigin _obj xy 
+  = withObjectRef "dcSetLogicalOrigin" _obj $ \cobj__obj -> 
+    wxDC_SetLogicalOrigin cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxDC_SetLogicalOrigin" wxDC_SetLogicalOrigin :: Ptr (TDC a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@dcSetLogicalScale obj x y@).
+dcSetLogicalScale :: DC  a -> Double -> Double ->  IO ()
+dcSetLogicalScale _obj x y 
+  = withObjectRef "dcSetLogicalScale" _obj $ \cobj__obj -> 
+    wxDC_SetLogicalScale cobj__obj  x  y  
+foreign import ccall "wxDC_SetLogicalScale" wxDC_SetLogicalScale :: Ptr (TDC a) -> Double -> Double -> IO ()
+
+-- | usage: (@dcSetMapMode obj mode@).
+dcSetMapMode :: DC  a -> Int ->  IO ()
+dcSetMapMode _obj mode 
+  = withObjectRef "dcSetMapMode" _obj $ \cobj__obj -> 
+    wxDC_SetMapMode cobj__obj  (toCInt mode)  
+foreign import ccall "wxDC_SetMapMode" wxDC_SetMapMode :: Ptr (TDC a) -> CInt -> IO ()
+
+-- | usage: (@dcSetPalette obj palette@).
+dcSetPalette :: DC  a -> Palette  b ->  IO ()
+dcSetPalette _obj palette 
+  = withObjectRef "dcSetPalette" _obj $ \cobj__obj -> 
+    withObjectPtr palette $ \cobj_palette -> 
+    wxDC_SetPalette cobj__obj  cobj_palette  
+foreign import ccall "wxDC_SetPalette" wxDC_SetPalette :: Ptr (TDC a) -> Ptr (TPalette b) -> IO ()
+
+-- | usage: (@dcSetPen obj pen@).
+dcSetPen :: DC  a -> Pen  b ->  IO ()
+dcSetPen _obj pen 
+  = withObjectRef "dcSetPen" _obj $ \cobj__obj -> 
+    withObjectPtr pen $ \cobj_pen -> 
+    wxDC_SetPen cobj__obj  cobj_pen  
+foreign import ccall "wxDC_SetPen" wxDC_SetPen :: Ptr (TDC a) -> Ptr (TPen b) -> IO ()
+
+-- | usage: (@dcSetTextBackground obj colour@).
+dcSetTextBackground :: DC  a -> Color ->  IO ()
+dcSetTextBackground _obj colour 
+  = withObjectRef "dcSetTextBackground" _obj $ \cobj__obj -> 
+    withColourPtr colour $ \cobj_colour -> 
+    wxDC_SetTextBackground cobj__obj  cobj_colour  
+foreign import ccall "wxDC_SetTextBackground" wxDC_SetTextBackground :: Ptr (TDC a) -> Ptr (TColour b) -> IO ()
+
+-- | usage: (@dcSetTextForeground obj colour@).
+dcSetTextForeground :: DC  a -> Color ->  IO ()
+dcSetTextForeground _obj colour 
+  = withObjectRef "dcSetTextForeground" _obj $ \cobj__obj -> 
+    withColourPtr colour $ \cobj_colour -> 
+    wxDC_SetTextForeground cobj__obj  cobj_colour  
+foreign import ccall "wxDC_SetTextForeground" wxDC_SetTextForeground :: Ptr (TDC a) -> Ptr (TColour b) -> IO ()
+
+-- | usage: (@dcSetUserScale obj x y@).
+dcSetUserScale :: DC  a -> Double -> Double ->  IO ()
+dcSetUserScale _obj x y 
+  = withObjectRef "dcSetUserScale" _obj $ \cobj__obj -> 
+    wxDC_SetUserScale cobj__obj  x  y  
+foreign import ccall "wxDC_SetUserScale" wxDC_SetUserScale :: Ptr (TDC a) -> Double -> Double -> IO ()
+
+-- | usage: (@dcStartDoc obj msg@).
+dcStartDoc :: DC  a -> String ->  IO Bool
+dcStartDoc _obj msg 
+  = withBoolResult $
+    withObjectRef "dcStartDoc" _obj $ \cobj__obj -> 
+    withStringPtr msg $ \cobj_msg -> 
+    wxDC_StartDoc cobj__obj  cobj_msg  
+foreign import ccall "wxDC_StartDoc" wxDC_StartDoc :: Ptr (TDC a) -> Ptr (TWxString b) -> IO CBool
+
+-- | usage: (@dcStartPage obj@).
+dcStartPage :: DC  a ->  IO ()
+dcStartPage _obj 
+  = withObjectRef "dcStartPage" _obj $ \cobj__obj -> 
+    wxDC_StartPage cobj__obj  
+foreign import ccall "wxDC_StartPage" wxDC_StartPage :: Ptr (TDC a) -> IO ()
+
+-- | usage: (@dialogCreate prt id txt lfttopwdthgt stl@).
+dialogCreate :: Window  a -> Id -> String -> Rect -> Style ->  IO (Dialog  ())
+dialogCreate _prt _id _txt _lfttopwdthgt _stl 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    withStringPtr _txt $ \cobj__txt -> 
+    wxDialog_Create cobj__prt  (toCInt _id)  cobj__txt  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
+foreign import ccall "wxDialog_Create" wxDialog_Create :: Ptr (TWindow a) -> CInt -> Ptr (TWxString c) -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TDialog ()))
+
+-- | usage: (@dialogEndModal obj retCode@).
+dialogEndModal :: Dialog  a -> Int ->  IO ()
+dialogEndModal _obj retCode 
+  = withObjectRef "dialogEndModal" _obj $ \cobj__obj -> 
+    wxDialog_EndModal cobj__obj  (toCInt retCode)  
+foreign import ccall "wxDialog_EndModal" wxDialog_EndModal :: Ptr (TDialog a) -> CInt -> IO ()
+
+-- | usage: (@dialogGetReturnCode obj@).
+dialogGetReturnCode :: Dialog  a ->  IO Int
+dialogGetReturnCode _obj 
+  = withIntResult $
+    withObjectRef "dialogGetReturnCode" _obj $ \cobj__obj -> 
+    wxDialog_GetReturnCode cobj__obj  
+foreign import ccall "wxDialog_GetReturnCode" wxDialog_GetReturnCode :: Ptr (TDialog a) -> IO CInt
+
+-- | usage: (@dialogIsModal obj@).
+dialogIsModal :: Dialog  a ->  IO Bool
+dialogIsModal _obj 
+  = withBoolResult $
+    withObjectRef "dialogIsModal" _obj $ \cobj__obj -> 
+    wxDialog_IsModal cobj__obj  
+foreign import ccall "wxDialog_IsModal" wxDialog_IsModal :: Ptr (TDialog a) -> IO CBool
+
+-- | usage: (@dialogSetReturnCode obj returnCode@).
+dialogSetReturnCode :: Dialog  a -> Int ->  IO ()
+dialogSetReturnCode _obj returnCode 
+  = withObjectRef "dialogSetReturnCode" _obj $ \cobj__obj -> 
+    wxDialog_SetReturnCode cobj__obj  (toCInt returnCode)  
+foreign import ccall "wxDialog_SetReturnCode" wxDialog_SetReturnCode :: Ptr (TDialog a) -> CInt -> IO ()
+
+-- | usage: (@dialogShowModal obj@).
+dialogShowModal :: Dialog  a ->  IO Int
+dialogShowModal _obj 
+  = withIntResult $
+    withObjectRef "dialogShowModal" _obj $ \cobj__obj -> 
+    wxDialog_ShowModal cobj__obj  
+foreign import ccall "wxDialog_ShowModal" wxDialog_ShowModal :: Ptr (TDialog a) -> IO CInt
+
+-- | usage: (@dirDialogCreate prt msg dir lfttop stl@).
+dirDialogCreate :: Window  a -> String -> String -> Point -> Style ->  IO (DirDialog  ())
+dirDialogCreate _prt _msg _dir _lfttop _stl 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    withStringPtr _msg $ \cobj__msg -> 
+    withStringPtr _dir $ \cobj__dir -> 
+    wxDirDialog_Create cobj__prt  cobj__msg  cobj__dir  (toCIntPointX _lfttop) (toCIntPointY _lfttop)  (toCInt _stl)  
+foreign import ccall "wxDirDialog_Create" wxDirDialog_Create :: Ptr (TWindow a) -> Ptr (TWxString b) -> Ptr (TWxString c) -> CInt -> CInt -> CInt -> IO (Ptr (TDirDialog ()))
+
+-- | usage: (@dirDialogGetMessage obj@).
+dirDialogGetMessage :: DirDialog  a ->  IO (String)
+dirDialogGetMessage _obj 
+  = withManagedStringResult $
+    withObjectRef "dirDialogGetMessage" _obj $ \cobj__obj -> 
+    wxDirDialog_GetMessage cobj__obj  
+foreign import ccall "wxDirDialog_GetMessage" wxDirDialog_GetMessage :: Ptr (TDirDialog a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@dirDialogGetPath obj@).
+dirDialogGetPath :: DirDialog  a ->  IO (String)
+dirDialogGetPath _obj 
+  = withManagedStringResult $
+    withObjectRef "dirDialogGetPath" _obj $ \cobj__obj -> 
+    wxDirDialog_GetPath cobj__obj  
+foreign import ccall "wxDirDialog_GetPath" wxDirDialog_GetPath :: Ptr (TDirDialog a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@dirDialogGetStyle obj@).
+dirDialogGetStyle :: DirDialog  a ->  IO Int
+dirDialogGetStyle _obj 
+  = withIntResult $
+    withObjectRef "dirDialogGetStyle" _obj $ \cobj__obj -> 
+    wxDirDialog_GetStyle cobj__obj  
+foreign import ccall "wxDirDialog_GetStyle" wxDirDialog_GetStyle :: Ptr (TDirDialog a) -> IO CInt
+
+-- | usage: (@dirDialogSetMessage obj msg@).
+dirDialogSetMessage :: DirDialog  a -> String ->  IO ()
+dirDialogSetMessage _obj msg 
+  = withObjectRef "dirDialogSetMessage" _obj $ \cobj__obj -> 
+    withStringPtr msg $ \cobj_msg -> 
+    wxDirDialog_SetMessage cobj__obj  cobj_msg  
+foreign import ccall "wxDirDialog_SetMessage" wxDirDialog_SetMessage :: Ptr (TDirDialog a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@dirDialogSetPath obj pth@).
+dirDialogSetPath :: DirDialog  a -> String ->  IO ()
+dirDialogSetPath _obj pth 
+  = withObjectRef "dirDialogSetPath" _obj $ \cobj__obj -> 
+    withStringPtr pth $ \cobj_pth -> 
+    wxDirDialog_SetPath cobj__obj  cobj_pth  
+foreign import ccall "wxDirDialog_SetPath" wxDirDialog_SetPath :: Ptr (TDirDialog a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@dirDialogSetStyle obj style@).
+dirDialogSetStyle :: DirDialog  a -> Int ->  IO ()
+dirDialogSetStyle _obj style 
+  = withObjectRef "dirDialogSetStyle" _obj $ \cobj__obj -> 
+    wxDirDialog_SetStyle cobj__obj  (toCInt style)  
+foreign import ccall "wxDirDialog_SetStyle" wxDirDialog_SetStyle :: Ptr (TDirDialog a) -> CInt -> IO ()
+
+-- | usage: (@dragIcon icon xy@).
+dragIcon :: Icon  a -> Point ->  IO (DragImage  ())
+dragIcon icon xy 
+  = withObjectResult $
+    withObjectPtr icon $ \cobj_icon -> 
+    wx_wxDragIcon cobj_icon  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxDragIcon" wx_wxDragIcon :: Ptr (TIcon a) -> CInt -> CInt -> IO (Ptr (TDragImage ()))
+
+-- | usage: (@dragImageBeginDrag self xy window boundingWindow@).
+dragImageBeginDrag :: DragImage  a -> Point -> Window  c -> Window  d ->  IO Bool
+dragImageBeginDrag self xy window boundingWindow 
+  = withBoolResult $
+    withObjectRef "dragImageBeginDrag" self $ \cobj_self -> 
+    withObjectPtr window $ \cobj_window -> 
+    withObjectPtr boundingWindow $ \cobj_boundingWindow -> 
+    wxDragImage_BeginDrag cobj_self  (toCIntPointX xy) (toCIntPointY xy)  cobj_window  cobj_boundingWindow  
+foreign import ccall "wxDragImage_BeginDrag" wxDragImage_BeginDrag :: Ptr (TDragImage a) -> CInt -> CInt -> Ptr (TWindow c) -> Ptr (TWindow d) -> IO CBool
+
+-- | usage: (@dragImageBeginDragFullScreen self xposypos window fullScreen rect@).
+dragImageBeginDragFullScreen :: DragImage  a -> Point -> Window  c -> Bool -> Rect ->  IO Bool
+dragImageBeginDragFullScreen self xposypos window fullScreen rect 
+  = withBoolResult $
+    withObjectRef "dragImageBeginDragFullScreen" self $ \cobj_self -> 
+    withObjectPtr window $ \cobj_window -> 
+    withWxRectPtr rect $ \cobj_rect -> 
+    wxDragImage_BeginDragFullScreen cobj_self  (toCIntPointX xposypos) (toCIntPointY xposypos)  cobj_window  (toCBool fullScreen)  cobj_rect  
+foreign import ccall "wxDragImage_BeginDragFullScreen" wxDragImage_BeginDragFullScreen :: Ptr (TDragImage a) -> CInt -> CInt -> Ptr (TWindow c) -> CBool -> Ptr (TWxRect e) -> IO CBool
+
+-- | usage: (@dragImageCreate image xy@).
+dragImageCreate :: Bitmap  a -> Point ->  IO (DragImage  ())
+dragImageCreate image xy 
+  = withObjectResult $
+    withObjectPtr image $ \cobj_image -> 
+    wxDragImage_Create cobj_image  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxDragImage_Create" wxDragImage_Create :: Ptr (TBitmap a) -> CInt -> CInt -> IO (Ptr (TDragImage ()))
+
+-- | usage: (@dragImageDelete self@).
+dragImageDelete :: DragImage  a ->  IO ()
+dragImageDelete
+  = objectDelete
+
+
+-- | usage: (@dragImageEndDrag self@).
+dragImageEndDrag :: DragImage  a ->  IO ()
+dragImageEndDrag self 
+  = withObjectRef "dragImageEndDrag" self $ \cobj_self -> 
+    wxDragImage_EndDrag cobj_self  
+foreign import ccall "wxDragImage_EndDrag" wxDragImage_EndDrag :: Ptr (TDragImage a) -> IO ()
+
+-- | usage: (@dragImageHide self@).
+dragImageHide :: DragImage  a ->  IO Bool
+dragImageHide self 
+  = withBoolResult $
+    withObjectRef "dragImageHide" self $ \cobj_self -> 
+    wxDragImage_Hide cobj_self  
+foreign import ccall "wxDragImage_Hide" wxDragImage_Hide :: Ptr (TDragImage a) -> IO CBool
+
+-- | usage: (@dragImageMove self xy@).
+dragImageMove :: DragImage  a -> Point ->  IO Bool
+dragImageMove self xy 
+  = withBoolResult $
+    withObjectRef "dragImageMove" self $ \cobj_self -> 
+    wxDragImage_Move cobj_self  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxDragImage_Move" wxDragImage_Move :: Ptr (TDragImage a) -> CInt -> CInt -> IO CBool
+
+-- | usage: (@dragImageShow self@).
+dragImageShow :: DragImage  a ->  IO Bool
+dragImageShow self 
+  = withBoolResult $
+    withObjectRef "dragImageShow" self $ \cobj_self -> 
+    wxDragImage_Show cobj_self  
+foreign import ccall "wxDragImage_Show" wxDragImage_Show :: Ptr (TDragImage a) -> IO CBool
+
+-- | usage: (@dragListItem treeCtrl id@).
+dragListItem :: ListCtrl  a -> Id ->  IO (DragImage  ())
+dragListItem treeCtrl id 
+  = withObjectResult $
+    withObjectPtr treeCtrl $ \cobj_treeCtrl -> 
+    wx_wxDragListItem cobj_treeCtrl  (toCInt id)  
+foreign import ccall "wxDragListItem" wx_wxDragListItem :: Ptr (TListCtrl a) -> CInt -> IO (Ptr (TDragImage ()))
+
+-- | usage: (@dragString test xy@).
+dragString :: String -> Point ->  IO (DragImage  ())
+dragString test xy 
+  = withObjectResult $
+    withStringPtr test $ \cobj_test -> 
+    wx_wxDragString cobj_test  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxDragString" wx_wxDragString :: Ptr (TWxString a) -> CInt -> CInt -> IO (Ptr (TDragImage ()))
+
+-- | usage: (@dragTreeItem treeCtrl id@).
+dragTreeItem :: TreeCtrl  a -> TreeItem ->  IO (DragImage  ())
+dragTreeItem treeCtrl id 
+  = withObjectResult $
+    withObjectPtr treeCtrl $ \cobj_treeCtrl -> 
+    withTreeItemIdPtr id $ \cobj_id -> 
+    wx_wxDragTreeItem cobj_treeCtrl  cobj_id  
+foreign import ccall "wxDragTreeItem" wx_wxDragTreeItem :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> IO (Ptr (TDragImage ()))
+
+-- | usage: (@drawControlCreate prt id lfttopwdthgt stl@).
+drawControlCreate :: Window  a -> Id -> Rect -> Style ->  IO (DrawControl  ())
+drawControlCreate _prt _id _lfttopwdthgt _stl 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    wxDrawControl_Create cobj__prt  (toCInt _id)  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
+foreign import ccall "wxDrawControl_Create" wxDrawControl_Create :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TDrawControl ()))
+
+-- | usage: (@drawWindowCreate prt id lfttopwdthgt stl@).
+drawWindowCreate :: Window  a -> Id -> Rect -> Style ->  IO (DrawWindow  ())
+drawWindowCreate _prt _id _lfttopwdthgt _stl 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    wxDrawWindow_Create cobj__prt  (toCInt _id)  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
+foreign import ccall "wxDrawWindow_Create" wxDrawWindow_Create :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TDrawWindow ()))
+
+-- | usage: (@dropSourceCreate wxdata win copy move none@).
+dropSourceCreate :: DataObject  a -> Window  b -> Ptr  c -> Ptr  d -> Ptr  e ->  IO (DropSource  ())
+dropSourceCreate wxdata win copy move none 
+  = withObjectResult $
+    withObjectPtr wxdata $ \cobj_wxdata -> 
+    withObjectPtr win $ \cobj_win -> 
+    wx_DropSource_Create cobj_wxdata  cobj_win  copy  move  none  
+foreign import ccall "DropSource_Create" wx_DropSource_Create :: Ptr (TDataObject a) -> Ptr (TWindow b) -> Ptr  c -> Ptr  d -> Ptr  e -> IO (Ptr (TDropSource ()))
+
+-- | usage: (@dropSourceDelete obj@).
+dropSourceDelete :: DropSource  a ->  IO ()
+dropSourceDelete _obj 
+  = withObjectPtr _obj $ \cobj__obj -> 
+    wx_DropSource_Delete cobj__obj  
+foreign import ccall "DropSource_Delete" wx_DropSource_Delete :: Ptr (TDropSource a) -> IO ()
+
+-- | usage: (@dropSourceDoDragDrop obj move@).
+dropSourceDoDragDrop :: DropSource  a -> Int ->  IO Int
+dropSourceDoDragDrop _obj _move 
+  = withIntResult $
+    withObjectPtr _obj $ \cobj__obj -> 
+    wx_DropSource_DoDragDrop cobj__obj  (toCInt _move)  
+foreign import ccall "DropSource_DoDragDrop" wx_DropSource_DoDragDrop :: Ptr (TDropSource a) -> CInt -> IO CInt
+
+-- | usage: (@dropTargetGetData obj@).
+dropTargetGetData :: DropTarget  a ->  IO ()
+dropTargetGetData _obj 
+  = withObjectRef "dropTargetGetData" _obj $ \cobj__obj -> 
+    wxDropTarget_GetData cobj__obj  
+foreign import ccall "wxDropTarget_GetData" wxDropTarget_GetData :: Ptr (TDropTarget a) -> IO ()
+
+-- | usage: (@dropTargetSetDataObject obj dat@).
+dropTargetSetDataObject :: DropTarget  a -> DataObject  b ->  IO ()
+dropTargetSetDataObject _obj _dat 
+  = withObjectRef "dropTargetSetDataObject" _obj $ \cobj__obj -> 
+    withObjectPtr _dat $ \cobj__dat -> 
+    wxDropTarget_SetDataObject cobj__obj  cobj__dat  
+foreign import ccall "wxDropTarget_SetDataObject" wxDropTarget_SetDataObject :: Ptr (TDropTarget a) -> Ptr (TDataObject b) -> IO ()
+
+-- | usage: (@encodingConverterConvert obj input output@).
+encodingConverterConvert :: EncodingConverter  a -> Ptr  b -> Ptr  c ->  IO ()
+encodingConverterConvert _obj input output 
+  = withObjectRef "encodingConverterConvert" _obj $ \cobj__obj -> 
+    wxEncodingConverter_Convert cobj__obj  input  output  
+foreign import ccall "wxEncodingConverter_Convert" wxEncodingConverter_Convert :: Ptr (TEncodingConverter a) -> Ptr  b -> Ptr  c -> IO ()
+
+-- | usage: (@encodingConverterCreate@).
+encodingConverterCreate ::  IO (EncodingConverter  ())
+encodingConverterCreate 
+  = withObjectResult $
+    wxEncodingConverter_Create 
+foreign import ccall "wxEncodingConverter_Create" wxEncodingConverter_Create :: IO (Ptr (TEncodingConverter ()))
+
+-- | usage: (@encodingConverterDelete obj@).
+encodingConverterDelete :: EncodingConverter  a ->  IO ()
+encodingConverterDelete
+  = objectDelete
+
+
+-- | usage: (@encodingConverterGetAllEquivalents obj enc lst@).
+encodingConverterGetAllEquivalents :: EncodingConverter  a -> Int -> List  c ->  IO Int
+encodingConverterGetAllEquivalents _obj enc _lst 
+  = withIntResult $
+    withObjectRef "encodingConverterGetAllEquivalents" _obj $ \cobj__obj -> 
+    withObjectPtr _lst $ \cobj__lst -> 
+    wxEncodingConverter_GetAllEquivalents cobj__obj  (toCInt enc)  cobj__lst  
+foreign import ccall "wxEncodingConverter_GetAllEquivalents" wxEncodingConverter_GetAllEquivalents :: Ptr (TEncodingConverter a) -> CInt -> Ptr (TList c) -> IO CInt
+
+-- | usage: (@encodingConverterGetPlatformEquivalents obj enc platform lst@).
+encodingConverterGetPlatformEquivalents :: EncodingConverter  a -> Int -> Int -> List  d ->  IO Int
+encodingConverterGetPlatformEquivalents _obj enc platform _lst 
+  = withIntResult $
+    withObjectRef "encodingConverterGetPlatformEquivalents" _obj $ \cobj__obj -> 
+    withObjectPtr _lst $ \cobj__lst -> 
+    wxEncodingConverter_GetPlatformEquivalents cobj__obj  (toCInt enc)  (toCInt platform)  cobj__lst  
+foreign import ccall "wxEncodingConverter_GetPlatformEquivalents" wxEncodingConverter_GetPlatformEquivalents :: Ptr (TEncodingConverter a) -> CInt -> CInt -> Ptr (TList d) -> IO CInt
+
+-- | usage: (@encodingConverterInit obj inputenc outputenc method@).
+encodingConverterInit :: EncodingConverter  a -> Int -> Int -> Int ->  IO Int
+encodingConverterInit _obj inputenc outputenc method 
+  = withIntResult $
+    withObjectRef "encodingConverterInit" _obj $ \cobj__obj -> 
+    wxEncodingConverter_Init cobj__obj  (toCInt inputenc)  (toCInt outputenc)  (toCInt method)  
+foreign import ccall "wxEncodingConverter_Init" wxEncodingConverter_Init :: Ptr (TEncodingConverter a) -> CInt -> CInt -> CInt -> IO CInt
+
+-- | usage: (@eraseEventCopyObject obj obj@).
+eraseEventCopyObject :: EraseEvent  a -> Ptr  b ->  IO ()
+eraseEventCopyObject _obj obj 
+  = withObjectRef "eraseEventCopyObject" _obj $ \cobj__obj -> 
+    wxEraseEvent_CopyObject cobj__obj  obj  
+foreign import ccall "wxEraseEvent_CopyObject" wxEraseEvent_CopyObject :: Ptr (TEraseEvent a) -> Ptr  b -> IO ()
+
+-- | usage: (@eraseEventGetDC obj@).
+eraseEventGetDC :: EraseEvent  a ->  IO (DC  ())
+eraseEventGetDC _obj 
+  = withObjectResult $
+    withObjectRef "eraseEventGetDC" _obj $ \cobj__obj -> 
+    wxEraseEvent_GetDC cobj__obj  
+foreign import ccall "wxEraseEvent_GetDC" wxEraseEvent_GetDC :: Ptr (TEraseEvent a) -> IO (Ptr (TDC ()))
+
+-- | usage: (@eventCopyObject obj objectdest@).
+eventCopyObject :: Event  a -> Ptr  b ->  IO ()
+eventCopyObject _obj objectdest 
+  = withObjectRef "eventCopyObject" _obj $ \cobj__obj -> 
+    wxEvent_CopyObject cobj__obj  objectdest  
+foreign import ccall "wxEvent_CopyObject" wxEvent_CopyObject :: Ptr (TEvent a) -> Ptr  b -> IO ()
+
+-- | usage: (@eventGetEventObject obj@).
+eventGetEventObject :: Event  a ->  IO (WxObject  ())
+eventGetEventObject _obj 
+  = withObjectResult $
+    withObjectRef "eventGetEventObject" _obj $ \cobj__obj -> 
+    wxEvent_GetEventObject cobj__obj  
+foreign import ccall "wxEvent_GetEventObject" wxEvent_GetEventObject :: Ptr (TEvent a) -> IO (Ptr (TWxObject ()))
+
+-- | usage: (@eventGetEventType obj@).
+eventGetEventType :: Event  a ->  IO Int
+eventGetEventType _obj 
+  = withIntResult $
+    withObjectRef "eventGetEventType" _obj $ \cobj__obj -> 
+    wxEvent_GetEventType cobj__obj  
+foreign import ccall "wxEvent_GetEventType" wxEvent_GetEventType :: Ptr (TEvent a) -> IO CInt
+
+-- | usage: (@eventGetId obj@).
+eventGetId :: Event  a ->  IO Int
+eventGetId _obj 
+  = withIntResult $
+    withObjectRef "eventGetId" _obj $ \cobj__obj -> 
+    wxEvent_GetId cobj__obj  
+foreign import ccall "wxEvent_GetId" wxEvent_GetId :: Ptr (TEvent a) -> IO CInt
+
+-- | usage: (@eventGetSkipped obj@).
+eventGetSkipped :: Event  a ->  IO Bool
+eventGetSkipped _obj 
+  = withBoolResult $
+    withObjectRef "eventGetSkipped" _obj $ \cobj__obj -> 
+    wxEvent_GetSkipped cobj__obj  
+foreign import ccall "wxEvent_GetSkipped" wxEvent_GetSkipped :: Ptr (TEvent a) -> IO CBool
+
+-- | usage: (@eventGetTimestamp obj@).
+eventGetTimestamp :: Event  a ->  IO Int
+eventGetTimestamp _obj 
+  = withIntResult $
+    withObjectRef "eventGetTimestamp" _obj $ \cobj__obj -> 
+    wxEvent_GetTimestamp cobj__obj  
+foreign import ccall "wxEvent_GetTimestamp" wxEvent_GetTimestamp :: Ptr (TEvent a) -> IO CInt
+
+-- | usage: (@eventIsCommandEvent obj@).
+eventIsCommandEvent :: Event  a ->  IO Bool
+eventIsCommandEvent _obj 
+  = withBoolResult $
+    withObjectRef "eventIsCommandEvent" _obj $ \cobj__obj -> 
+    wxEvent_IsCommandEvent cobj__obj  
+foreign import ccall "wxEvent_IsCommandEvent" wxEvent_IsCommandEvent :: Ptr (TEvent a) -> IO CBool
+
+-- | usage: (@eventNewEventType@).
+eventNewEventType ::  IO Int
+eventNewEventType 
+  = withIntResult $
+    wxEvent_NewEventType 
+foreign import ccall "wxEvent_NewEventType" wxEvent_NewEventType :: IO CInt
+
+-- | usage: (@eventSetEventObject obj obj@).
+eventSetEventObject :: Event  a -> WxObject  b ->  IO ()
+eventSetEventObject _obj obj 
+  = withObjectRef "eventSetEventObject" _obj $ \cobj__obj -> 
+    withObjectPtr obj $ \cobj_obj -> 
+    wxEvent_SetEventObject cobj__obj  cobj_obj  
+foreign import ccall "wxEvent_SetEventObject" wxEvent_SetEventObject :: Ptr (TEvent a) -> Ptr (TWxObject b) -> IO ()
+
+-- | usage: (@eventSetEventType obj typ@).
+eventSetEventType :: Event  a -> Int ->  IO ()
+eventSetEventType _obj typ 
+  = withObjectRef "eventSetEventType" _obj $ \cobj__obj -> 
+    wxEvent_SetEventType cobj__obj  (toCInt typ)  
+foreign import ccall "wxEvent_SetEventType" wxEvent_SetEventType :: Ptr (TEvent a) -> CInt -> IO ()
+
+-- | usage: (@eventSetId obj id@).
+eventSetId :: Event  a -> Int ->  IO ()
+eventSetId _obj id 
+  = withObjectRef "eventSetId" _obj $ \cobj__obj -> 
+    wxEvent_SetId cobj__obj  (toCInt id)  
+foreign import ccall "wxEvent_SetId" wxEvent_SetId :: Ptr (TEvent a) -> CInt -> IO ()
+
+-- | usage: (@eventSetTimestamp obj ts@).
+eventSetTimestamp :: Event  a -> Int ->  IO ()
+eventSetTimestamp _obj ts 
+  = withObjectRef "eventSetTimestamp" _obj $ \cobj__obj -> 
+    wxEvent_SetTimestamp cobj__obj  (toCInt ts)  
+foreign import ccall "wxEvent_SetTimestamp" wxEvent_SetTimestamp :: Ptr (TEvent a) -> CInt -> IO ()
+
+-- | usage: (@eventSkip obj@).
+eventSkip :: Event  a ->  IO ()
+eventSkip _obj 
+  = withObjectRef "eventSkip" _obj $ \cobj__obj -> 
+    wxEvent_Skip cobj__obj  
+foreign import ccall "wxEvent_Skip" wxEvent_Skip :: Ptr (TEvent a) -> IO ()
+
+-- | usage: (@evtHandlerAddPendingEvent obj event@).
+evtHandlerAddPendingEvent :: EvtHandler  a -> Event  b ->  IO ()
+evtHandlerAddPendingEvent _obj event 
+  = withObjectRef "evtHandlerAddPendingEvent" _obj $ \cobj__obj -> 
+    withObjectPtr event $ \cobj_event -> 
+    wxEvtHandler_AddPendingEvent cobj__obj  cobj_event  
+foreign import ccall "wxEvtHandler_AddPendingEvent" wxEvtHandler_AddPendingEvent :: Ptr (TEvtHandler a) -> Ptr (TEvent b) -> IO ()
+
+-- | usage: (@evtHandlerConnect obj first last wxtype wxdata@).
+evtHandlerConnect :: EvtHandler  a -> Int -> Int -> Int -> Ptr  e ->  IO Int
+evtHandlerConnect _obj first last wxtype wxdata 
+  = withIntResult $
+    withObjectRef "evtHandlerConnect" _obj $ \cobj__obj -> 
+    wxEvtHandler_Connect cobj__obj  (toCInt first)  (toCInt last)  (toCInt wxtype)  wxdata  
+foreign import ccall "wxEvtHandler_Connect" wxEvtHandler_Connect :: Ptr (TEvtHandler a) -> CInt -> CInt -> CInt -> Ptr  e -> IO CInt
+
+-- | usage: (@evtHandlerCreate@).
+evtHandlerCreate ::  IO (EvtHandler  ())
+evtHandlerCreate 
+  = withObjectResult $
+    wxEvtHandler_Create 
+foreign import ccall "wxEvtHandler_Create" wxEvtHandler_Create :: IO (Ptr (TEvtHandler ()))
+
+-- | usage: (@evtHandlerDelete obj@).
+evtHandlerDelete :: EvtHandler  a ->  IO ()
+evtHandlerDelete
+  = objectDelete
+
+
+-- | usage: (@evtHandlerDisconnect obj first last wxtype id@).
+evtHandlerDisconnect :: EvtHandler  a -> Int -> Int -> Int -> Id ->  IO Int
+evtHandlerDisconnect _obj first last wxtype id 
+  = withIntResult $
+    withObjectRef "evtHandlerDisconnect" _obj $ \cobj__obj -> 
+    wxEvtHandler_Disconnect cobj__obj  (toCInt first)  (toCInt last)  (toCInt wxtype)  (toCInt id)  
+foreign import ccall "wxEvtHandler_Disconnect" wxEvtHandler_Disconnect :: Ptr (TEvtHandler a) -> CInt -> CInt -> CInt -> CInt -> IO CInt
+
+{- |  Get the client data in the form of a closure. Use 'closureGetData' to get to the actual data. -}
+evtHandlerGetClientClosure :: EvtHandler  a ->  IO (Closure  ())
+evtHandlerGetClientClosure _obj 
+  = withObjectResult $
+    withObjectRef "evtHandlerGetClientClosure" _obj $ \cobj__obj -> 
+    wxEvtHandler_GetClientClosure cobj__obj  
+foreign import ccall "wxEvtHandler_GetClientClosure" wxEvtHandler_GetClientClosure :: Ptr (TEvtHandler a) -> IO (Ptr (TClosure ()))
+
+-- | usage: (@evtHandlerGetClosure obj id wxtype@).
+evtHandlerGetClosure :: EvtHandler  a -> Id -> Int ->  IO (Closure  ())
+evtHandlerGetClosure _obj id wxtype 
+  = withObjectResult $
+    withObjectRef "evtHandlerGetClosure" _obj $ \cobj__obj -> 
+    wxEvtHandler_GetClosure cobj__obj  (toCInt id)  (toCInt wxtype)  
+foreign import ccall "wxEvtHandler_GetClosure" wxEvtHandler_GetClosure :: Ptr (TEvtHandler a) -> CInt -> CInt -> IO (Ptr (TClosure ()))
+
+-- | usage: (@evtHandlerGetEvtHandlerEnabled obj@).
+evtHandlerGetEvtHandlerEnabled :: EvtHandler  a ->  IO Bool
+evtHandlerGetEvtHandlerEnabled _obj 
+  = withBoolResult $
+    withObjectRef "evtHandlerGetEvtHandlerEnabled" _obj $ \cobj__obj -> 
+    wxEvtHandler_GetEvtHandlerEnabled cobj__obj  
+foreign import ccall "wxEvtHandler_GetEvtHandlerEnabled" wxEvtHandler_GetEvtHandlerEnabled :: Ptr (TEvtHandler a) -> IO CBool
+
+-- | usage: (@evtHandlerGetNextHandler obj@).
+evtHandlerGetNextHandler :: EvtHandler  a ->  IO (EvtHandler  ())
+evtHandlerGetNextHandler _obj 
+  = withObjectResult $
+    withObjectRef "evtHandlerGetNextHandler" _obj $ \cobj__obj -> 
+    wxEvtHandler_GetNextHandler cobj__obj  
+foreign import ccall "wxEvtHandler_GetNextHandler" wxEvtHandler_GetNextHandler :: Ptr (TEvtHandler a) -> IO (Ptr (TEvtHandler ()))
+
+-- | usage: (@evtHandlerGetPreviousHandler obj@).
+evtHandlerGetPreviousHandler :: EvtHandler  a ->  IO (EvtHandler  ())
+evtHandlerGetPreviousHandler _obj 
+  = withObjectResult $
+    withObjectRef "evtHandlerGetPreviousHandler" _obj $ \cobj__obj -> 
+    wxEvtHandler_GetPreviousHandler cobj__obj  
+foreign import ccall "wxEvtHandler_GetPreviousHandler" wxEvtHandler_GetPreviousHandler :: Ptr (TEvtHandler a) -> IO (Ptr (TEvtHandler ()))
+
+-- | usage: (@evtHandlerProcessEvent obj event@).
+evtHandlerProcessEvent :: EvtHandler  a -> Event  b ->  IO Bool
+evtHandlerProcessEvent _obj event 
+  = withBoolResult $
+    withObjectRef "evtHandlerProcessEvent" _obj $ \cobj__obj -> 
+    withObjectPtr event $ \cobj_event -> 
+    wxEvtHandler_ProcessEvent cobj__obj  cobj_event  
+foreign import ccall "wxEvtHandler_ProcessEvent" wxEvtHandler_ProcessEvent :: Ptr (TEvtHandler a) -> Ptr (TEvent b) -> IO CBool
+
+-- | usage: (@evtHandlerProcessPendingEvents obj@).
+evtHandlerProcessPendingEvents :: EvtHandler  a ->  IO ()
+evtHandlerProcessPendingEvents _obj 
+  = withObjectRef "evtHandlerProcessPendingEvents" _obj $ \cobj__obj -> 
+    wxEvtHandler_ProcessPendingEvents cobj__obj  
+foreign import ccall "wxEvtHandler_ProcessPendingEvents" wxEvtHandler_ProcessPendingEvents :: Ptr (TEvtHandler a) -> IO ()
+
+{- |  Set the client data as a closure. The closure data contains the data while the function is called on deletion.  -}
+evtHandlerSetClientClosure :: EvtHandler  a -> Closure  b ->  IO ()
+evtHandlerSetClientClosure _obj closure 
+  = withObjectRef "evtHandlerSetClientClosure" _obj $ \cobj__obj -> 
+    withObjectPtr closure $ \cobj_closure -> 
+    wxEvtHandler_SetClientClosure cobj__obj  cobj_closure  
+foreign import ccall "wxEvtHandler_SetClientClosure" wxEvtHandler_SetClientClosure :: Ptr (TEvtHandler a) -> Ptr (TClosure b) -> IO ()
+
+-- | usage: (@evtHandlerSetEvtHandlerEnabled obj enabled@).
+evtHandlerSetEvtHandlerEnabled :: EvtHandler  a -> Bool ->  IO ()
+evtHandlerSetEvtHandlerEnabled _obj enabled 
+  = withObjectRef "evtHandlerSetEvtHandlerEnabled" _obj $ \cobj__obj -> 
+    wxEvtHandler_SetEvtHandlerEnabled cobj__obj  (toCBool enabled)  
+foreign import ccall "wxEvtHandler_SetEvtHandlerEnabled" wxEvtHandler_SetEvtHandlerEnabled :: Ptr (TEvtHandler a) -> CBool -> IO ()
+
+-- | usage: (@evtHandlerSetNextHandler obj handler@).
+evtHandlerSetNextHandler :: EvtHandler  a -> EvtHandler  b ->  IO ()
+evtHandlerSetNextHandler _obj handler 
+  = withObjectRef "evtHandlerSetNextHandler" _obj $ \cobj__obj -> 
+    withObjectPtr handler $ \cobj_handler -> 
+    wxEvtHandler_SetNextHandler cobj__obj  cobj_handler  
+foreign import ccall "wxEvtHandler_SetNextHandler" wxEvtHandler_SetNextHandler :: Ptr (TEvtHandler a) -> Ptr (TEvtHandler b) -> IO ()
+
+-- | usage: (@evtHandlerSetPreviousHandler obj handler@).
+evtHandlerSetPreviousHandler :: EvtHandler  a -> EvtHandler  b ->  IO ()
+evtHandlerSetPreviousHandler _obj handler 
+  = withObjectRef "evtHandlerSetPreviousHandler" _obj $ \cobj__obj -> 
+    withObjectPtr handler $ \cobj_handler -> 
+    wxEvtHandler_SetPreviousHandler cobj__obj  cobj_handler  
+foreign import ccall "wxEvtHandler_SetPreviousHandler" wxEvtHandler_SetPreviousHandler :: Ptr (TEvtHandler a) -> Ptr (TEvtHandler b) -> IO ()
+
+-- | usage: (@fileConfigCreate inp@).
+fileConfigCreate :: InputStream  a ->  IO (FileConfig  ())
+fileConfigCreate inp 
+  = withObjectResult $
+    withObjectPtr inp $ \cobj_inp -> 
+    wxFileConfig_Create cobj_inp  
+foreign import ccall "wxFileConfig_Create" wxFileConfig_Create :: Ptr (TInputStream a) -> IO (Ptr (TFileConfig ()))
+
+-- | usage: (@fileDataObjectAddFile obj fle@).
+fileDataObjectAddFile :: FileDataObject  a -> String ->  IO ()
+fileDataObjectAddFile _obj _fle 
+  = withObjectPtr _obj $ \cobj__obj -> 
+    withStringPtr _fle $ \cobj__fle -> 
+    wx_FileDataObject_AddFile cobj__obj  cobj__fle  
+foreign import ccall "FileDataObject_AddFile" wx_FileDataObject_AddFile :: Ptr (TFileDataObject a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@fileDataObjectCreate cntlst@).
+fileDataObjectCreate :: [String] ->  IO (FileDataObject  ())
+fileDataObjectCreate _cntlst 
+  = withObjectResult $
+    withArrayWString _cntlst $ \carrlen__cntlst carr__cntlst -> 
+    wx_FileDataObject_Create carrlen__cntlst carr__cntlst  
+foreign import ccall "FileDataObject_Create" wx_FileDataObject_Create :: CInt -> Ptr (Ptr CWchar) -> IO (Ptr (TFileDataObject ()))
+
+-- | usage: (@fileDataObjectDelete obj@).
+fileDataObjectDelete :: FileDataObject  a ->  IO ()
+fileDataObjectDelete _obj 
+  = withObjectPtr _obj $ \cobj__obj -> 
+    wx_FileDataObject_Delete cobj__obj  
+foreign import ccall "FileDataObject_Delete" wx_FileDataObject_Delete :: Ptr (TFileDataObject a) -> IO ()
+
+-- | usage: (@fileDataObjectGetFilenames obj@).
+fileDataObjectGetFilenames :: FileDataObject  a ->  IO [String]
+fileDataObjectGetFilenames _obj 
+  = withArrayWStringResult $ \arr -> 
+    withObjectPtr _obj $ \cobj__obj -> 
+    wx_FileDataObject_GetFilenames cobj__obj   arr
+foreign import ccall "FileDataObject_GetFilenames" wx_FileDataObject_GetFilenames :: Ptr (TFileDataObject a) -> Ptr (Ptr CWchar) -> IO CInt
+
+-- | usage: (@fileDialogCreate prt msg dir fle wcd lfttop stl@).
+fileDialogCreate :: Window  a -> String -> String -> String -> String -> Point -> Style ->  IO (FileDialog  ())
+fileDialogCreate _prt _msg _dir _fle _wcd _lfttop _stl 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    withStringPtr _msg $ \cobj__msg -> 
+    withStringPtr _dir $ \cobj__dir -> 
+    withStringPtr _fle $ \cobj__fle -> 
+    withStringPtr _wcd $ \cobj__wcd -> 
+    wxFileDialog_Create cobj__prt  cobj__msg  cobj__dir  cobj__fle  cobj__wcd  (toCIntPointX _lfttop) (toCIntPointY _lfttop)  (toCInt _stl)  
+foreign import ccall "wxFileDialog_Create" wxFileDialog_Create :: Ptr (TWindow a) -> Ptr (TWxString b) -> Ptr (TWxString c) -> Ptr (TWxString d) -> Ptr (TWxString e) -> CInt -> CInt -> CInt -> IO (Ptr (TFileDialog ()))
+
+-- | usage: (@fileDialogGetDirectory obj@).
+fileDialogGetDirectory :: FileDialog  a ->  IO (String)
+fileDialogGetDirectory _obj 
+  = withManagedStringResult $
+    withObjectRef "fileDialogGetDirectory" _obj $ \cobj__obj -> 
+    wxFileDialog_GetDirectory cobj__obj  
+foreign import ccall "wxFileDialog_GetDirectory" wxFileDialog_GetDirectory :: Ptr (TFileDialog a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@fileDialogGetFilename obj@).
+fileDialogGetFilename :: FileDialog  a ->  IO (String)
+fileDialogGetFilename _obj 
+  = withManagedStringResult $
+    withObjectRef "fileDialogGetFilename" _obj $ \cobj__obj -> 
+    wxFileDialog_GetFilename cobj__obj  
+foreign import ccall "wxFileDialog_GetFilename" wxFileDialog_GetFilename :: Ptr (TFileDialog a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@fileDialogGetFilenames obj@).
+fileDialogGetFilenames :: FileDialog  a ->  IO [String]
+fileDialogGetFilenames _obj 
+  = withArrayWStringResult $ \arr -> 
+    withObjectRef "fileDialogGetFilenames" _obj $ \cobj__obj -> 
+    wxFileDialog_GetFilenames cobj__obj   arr
+foreign import ccall "wxFileDialog_GetFilenames" wxFileDialog_GetFilenames :: Ptr (TFileDialog a) -> Ptr (Ptr CWchar) -> IO CInt
+
+-- | usage: (@fileDialogGetFilterIndex obj@).
+fileDialogGetFilterIndex :: FileDialog  a ->  IO Int
+fileDialogGetFilterIndex _obj 
+  = withIntResult $
+    withObjectRef "fileDialogGetFilterIndex" _obj $ \cobj__obj -> 
+    wxFileDialog_GetFilterIndex cobj__obj  
+foreign import ccall "wxFileDialog_GetFilterIndex" wxFileDialog_GetFilterIndex :: Ptr (TFileDialog a) -> IO CInt
+
+-- | usage: (@fileDialogGetMessage obj@).
+fileDialogGetMessage :: FileDialog  a ->  IO (String)
+fileDialogGetMessage _obj 
+  = withManagedStringResult $
+    withObjectRef "fileDialogGetMessage" _obj $ \cobj__obj -> 
+    wxFileDialog_GetMessage cobj__obj  
+foreign import ccall "wxFileDialog_GetMessage" wxFileDialog_GetMessage :: Ptr (TFileDialog a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@fileDialogGetPath obj@).
+fileDialogGetPath :: FileDialog  a ->  IO (String)
+fileDialogGetPath _obj 
+  = withManagedStringResult $
+    withObjectRef "fileDialogGetPath" _obj $ \cobj__obj -> 
+    wxFileDialog_GetPath cobj__obj  
+foreign import ccall "wxFileDialog_GetPath" wxFileDialog_GetPath :: Ptr (TFileDialog a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@fileDialogGetPaths obj@).
+fileDialogGetPaths :: FileDialog  a ->  IO [String]
+fileDialogGetPaths _obj 
+  = withArrayWStringResult $ \arr -> 
+    withObjectRef "fileDialogGetPaths" _obj $ \cobj__obj -> 
+    wxFileDialog_GetPaths cobj__obj   arr
+foreign import ccall "wxFileDialog_GetPaths" wxFileDialog_GetPaths :: Ptr (TFileDialog a) -> Ptr (Ptr CWchar) -> IO CInt
+
+-- | usage: (@fileDialogGetStyle obj@).
+fileDialogGetStyle :: FileDialog  a ->  IO Int
+fileDialogGetStyle _obj 
+  = withIntResult $
+    withObjectRef "fileDialogGetStyle" _obj $ \cobj__obj -> 
+    wxFileDialog_GetStyle cobj__obj  
+foreign import ccall "wxFileDialog_GetStyle" wxFileDialog_GetStyle :: Ptr (TFileDialog a) -> IO CInt
+
+-- | usage: (@fileDialogGetWildcard obj@).
+fileDialogGetWildcard :: FileDialog  a ->  IO (String)
+fileDialogGetWildcard _obj 
+  = withManagedStringResult $
+    withObjectRef "fileDialogGetWildcard" _obj $ \cobj__obj -> 
+    wxFileDialog_GetWildcard cobj__obj  
+foreign import ccall "wxFileDialog_GetWildcard" wxFileDialog_GetWildcard :: Ptr (TFileDialog a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@fileDialogSetDirectory obj dir@).
+fileDialogSetDirectory :: FileDialog  a -> String ->  IO ()
+fileDialogSetDirectory _obj dir 
+  = withObjectRef "fileDialogSetDirectory" _obj $ \cobj__obj -> 
+    withStringPtr dir $ \cobj_dir -> 
+    wxFileDialog_SetDirectory cobj__obj  cobj_dir  
+foreign import ccall "wxFileDialog_SetDirectory" wxFileDialog_SetDirectory :: Ptr (TFileDialog a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@fileDialogSetFilename obj name@).
+fileDialogSetFilename :: FileDialog  a -> String ->  IO ()
+fileDialogSetFilename _obj name 
+  = withObjectRef "fileDialogSetFilename" _obj $ \cobj__obj -> 
+    withStringPtr name $ \cobj_name -> 
+    wxFileDialog_SetFilename cobj__obj  cobj_name  
+foreign import ccall "wxFileDialog_SetFilename" wxFileDialog_SetFilename :: Ptr (TFileDialog a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@fileDialogSetFilterIndex obj filterIndex@).
+fileDialogSetFilterIndex :: FileDialog  a -> Int ->  IO ()
+fileDialogSetFilterIndex _obj filterIndex 
+  = withObjectRef "fileDialogSetFilterIndex" _obj $ \cobj__obj -> 
+    wxFileDialog_SetFilterIndex cobj__obj  (toCInt filterIndex)  
+foreign import ccall "wxFileDialog_SetFilterIndex" wxFileDialog_SetFilterIndex :: Ptr (TFileDialog a) -> CInt -> IO ()
+
+-- | usage: (@fileDialogSetMessage obj message@).
+fileDialogSetMessage :: FileDialog  a -> String ->  IO ()
+fileDialogSetMessage _obj message 
+  = withObjectRef "fileDialogSetMessage" _obj $ \cobj__obj -> 
+    withStringPtr message $ \cobj_message -> 
+    wxFileDialog_SetMessage cobj__obj  cobj_message  
+foreign import ccall "wxFileDialog_SetMessage" wxFileDialog_SetMessage :: Ptr (TFileDialog a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@fileDialogSetPath obj path@).
+fileDialogSetPath :: FileDialog  a -> String ->  IO ()
+fileDialogSetPath _obj path 
+  = withObjectRef "fileDialogSetPath" _obj $ \cobj__obj -> 
+    withStringPtr path $ \cobj_path -> 
+    wxFileDialog_SetPath cobj__obj  cobj_path  
+foreign import ccall "wxFileDialog_SetPath" wxFileDialog_SetPath :: Ptr (TFileDialog a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@fileDialogSetStyle obj style@).
+fileDialogSetStyle :: FileDialog  a -> Int ->  IO ()
+fileDialogSetStyle _obj style 
+  = withObjectRef "fileDialogSetStyle" _obj $ \cobj__obj -> 
+    wxFileDialog_SetStyle cobj__obj  (toCInt style)  
+foreign import ccall "wxFileDialog_SetStyle" wxFileDialog_SetStyle :: Ptr (TFileDialog a) -> CInt -> IO ()
+
+-- | usage: (@fileDialogSetWildcard obj wildCard@).
+fileDialogSetWildcard :: FileDialog  a -> String ->  IO ()
+fileDialogSetWildcard _obj wildCard 
+  = withObjectRef "fileDialogSetWildcard" _obj $ \cobj__obj -> 
+    withStringPtr wildCard $ \cobj_wildCard -> 
+    wxFileDialog_SetWildcard cobj__obj  cobj_wildCard  
+foreign import ccall "wxFileDialog_SetWildcard" wxFileDialog_SetWildcard :: Ptr (TFileDialog a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@fileHistoryAddFileToHistory obj file@).
+fileHistoryAddFileToHistory :: FileHistory  a -> String ->  IO ()
+fileHistoryAddFileToHistory _obj file 
+  = withObjectRef "fileHistoryAddFileToHistory" _obj $ \cobj__obj -> 
+    withStringPtr file $ \cobj_file -> 
+    wxFileHistory_AddFileToHistory cobj__obj  cobj_file  
+foreign import ccall "wxFileHistory_AddFileToHistory" wxFileHistory_AddFileToHistory :: Ptr (TFileHistory a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@fileHistoryAddFilesToMenu obj menu@).
+fileHistoryAddFilesToMenu :: FileHistory  a -> Menu  b ->  IO ()
+fileHistoryAddFilesToMenu _obj menu 
+  = withObjectRef "fileHistoryAddFilesToMenu" _obj $ \cobj__obj -> 
+    withObjectPtr menu $ \cobj_menu -> 
+    wxFileHistory_AddFilesToMenu cobj__obj  cobj_menu  
+foreign import ccall "wxFileHistory_AddFilesToMenu" wxFileHistory_AddFilesToMenu :: Ptr (TFileHistory a) -> Ptr (TMenu b) -> IO ()
+
+-- | usage: (@fileHistoryCreate maxFiles@).
+fileHistoryCreate :: Int ->  IO (FileHistory  ())
+fileHistoryCreate maxFiles 
+  = withObjectResult $
+    wxFileHistory_Create (toCInt maxFiles)  
+foreign import ccall "wxFileHistory_Create" wxFileHistory_Create :: CInt -> IO (Ptr (TFileHistory ()))
+
+-- | usage: (@fileHistoryDelete obj@).
+fileHistoryDelete :: FileHistory  a ->  IO ()
+fileHistoryDelete
+  = objectDelete
+
+
+-- | usage: (@fileHistoryGetCount obj@).
+fileHistoryGetCount :: FileHistory  a ->  IO Int
+fileHistoryGetCount _obj 
+  = withIntResult $
+    withObjectRef "fileHistoryGetCount" _obj $ \cobj__obj -> 
+    wxFileHistory_GetCount cobj__obj  
+foreign import ccall "wxFileHistory_GetCount" wxFileHistory_GetCount :: Ptr (TFileHistory a) -> IO CInt
+
+-- | usage: (@fileHistoryGetHistoryFile obj i@).
+fileHistoryGetHistoryFile :: FileHistory  a -> Int ->  IO (String)
+fileHistoryGetHistoryFile _obj i 
+  = withManagedStringResult $
+    withObjectRef "fileHistoryGetHistoryFile" _obj $ \cobj__obj -> 
+    wxFileHistory_GetHistoryFile cobj__obj  (toCInt i)  
+foreign import ccall "wxFileHistory_GetHistoryFile" wxFileHistory_GetHistoryFile :: Ptr (TFileHistory a) -> CInt -> IO (Ptr (TWxString ()))
+
+-- | usage: (@fileHistoryGetMaxFiles obj@).
+fileHistoryGetMaxFiles :: FileHistory  a ->  IO Int
+fileHistoryGetMaxFiles _obj 
+  = withIntResult $
+    withObjectRef "fileHistoryGetMaxFiles" _obj $ \cobj__obj -> 
+    wxFileHistory_GetMaxFiles cobj__obj  
+foreign import ccall "wxFileHistory_GetMaxFiles" wxFileHistory_GetMaxFiles :: Ptr (TFileHistory a) -> IO CInt
+
+-- | usage: (@fileHistoryGetMenus obj@).
+fileHistoryGetMenus :: FileHistory  a ->  IO [Menu ()]
+fileHistoryGetMenus _obj 
+  = withArrayObjectResult $ \arr -> 
+    withObjectRef "fileHistoryGetMenus" _obj $ \cobj__obj -> 
+    wxFileHistory_GetMenus cobj__obj   arr
+foreign import ccall "wxFileHistory_GetMenus" wxFileHistory_GetMenus :: Ptr (TFileHistory a) -> Ptr (Ptr (TMenu ())) -> IO CInt
+
+-- | usage: (@fileHistoryLoad obj config@).
+fileHistoryLoad :: FileHistory  a -> ConfigBase  b ->  IO ()
+fileHistoryLoad _obj config 
+  = withObjectRef "fileHistoryLoad" _obj $ \cobj__obj -> 
+    withObjectPtr config $ \cobj_config -> 
+    wxFileHistory_Load cobj__obj  cobj_config  
+foreign import ccall "wxFileHistory_Load" wxFileHistory_Load :: Ptr (TFileHistory a) -> Ptr (TConfigBase b) -> IO ()
+
+-- | usage: (@fileHistoryRemoveFileFromHistory obj i@).
+fileHistoryRemoveFileFromHistory :: FileHistory  a -> Int ->  IO ()
+fileHistoryRemoveFileFromHistory _obj i 
+  = withObjectRef "fileHistoryRemoveFileFromHistory" _obj $ \cobj__obj -> 
+    wxFileHistory_RemoveFileFromHistory cobj__obj  (toCInt i)  
+foreign import ccall "wxFileHistory_RemoveFileFromHistory" wxFileHistory_RemoveFileFromHistory :: Ptr (TFileHistory a) -> CInt -> IO ()
+
+-- | usage: (@fileHistoryRemoveMenu obj menu@).
+fileHistoryRemoveMenu :: FileHistory  a -> Menu  b ->  IO ()
+fileHistoryRemoveMenu _obj menu 
+  = withObjectRef "fileHistoryRemoveMenu" _obj $ \cobj__obj -> 
+    withObjectPtr menu $ \cobj_menu -> 
+    wxFileHistory_RemoveMenu cobj__obj  cobj_menu  
+foreign import ccall "wxFileHistory_RemoveMenu" wxFileHistory_RemoveMenu :: Ptr (TFileHistory a) -> Ptr (TMenu b) -> IO ()
+
+-- | usage: (@fileHistorySave obj config@).
+fileHistorySave :: FileHistory  a -> ConfigBase  b ->  IO ()
+fileHistorySave _obj config 
+  = withObjectRef "fileHistorySave" _obj $ \cobj__obj -> 
+    withObjectPtr config $ \cobj_config -> 
+    wxFileHistory_Save cobj__obj  cobj_config  
+foreign import ccall "wxFileHistory_Save" wxFileHistory_Save :: Ptr (TFileHistory a) -> Ptr (TConfigBase b) -> IO ()
+
+-- | usage: (@fileHistoryUseMenu obj menu@).
+fileHistoryUseMenu :: FileHistory  a -> Menu  b ->  IO ()
+fileHistoryUseMenu _obj menu 
+  = withObjectRef "fileHistoryUseMenu" _obj $ \cobj__obj -> 
+    withObjectPtr menu $ \cobj_menu -> 
+    wxFileHistory_UseMenu cobj__obj  cobj_menu  
+foreign import ccall "wxFileHistory_UseMenu" wxFileHistory_UseMenu :: Ptr (TFileHistory a) -> Ptr (TMenu b) -> IO ()
+
+-- | usage: (@fileInputStreamCreate ofileName@).
+fileInputStreamCreate :: String ->  IO (FileInputStream  ())
+fileInputStreamCreate ofileName 
+  = withObjectResult $
+    withStringPtr ofileName $ \cobj_ofileName -> 
+    wxFileInputStream_Create cobj_ofileName  
+foreign import ccall "wxFileInputStream_Create" wxFileInputStream_Create :: Ptr (TWxString a) -> IO (Ptr (TFileInputStream ()))
+
+-- | usage: (@fileInputStreamDelete self@).
+fileInputStreamDelete :: FileInputStream  a ->  IO ()
+fileInputStreamDelete self 
+  = withObjectRef "fileInputStreamDelete" self $ \cobj_self -> 
+    wxFileInputStream_Delete cobj_self  
+foreign import ccall "wxFileInputStream_Delete" wxFileInputStream_Delete :: Ptr (TFileInputStream a) -> IO ()
+
+-- | usage: (@fileInputStreamIsOk self@).
+fileInputStreamIsOk :: FileInputStream  a ->  IO Bool
+fileInputStreamIsOk self 
+  = withBoolResult $
+    withObjectRef "fileInputStreamIsOk" self $ \cobj_self -> 
+    wxFileInputStream_IsOk cobj_self  
+foreign import ccall "wxFileInputStream_IsOk" wxFileInputStream_IsOk :: Ptr (TFileInputStream a) -> IO CBool
+
+-- | usage: (@fileOutputStreamCreate ofileName@).
+fileOutputStreamCreate :: String ->  IO (FileOutputStream  ())
+fileOutputStreamCreate ofileName 
+  = withObjectResult $
+    withStringPtr ofileName $ \cobj_ofileName -> 
+    wxFileOutputStream_Create cobj_ofileName  
+foreign import ccall "wxFileOutputStream_Create" wxFileOutputStream_Create :: Ptr (TWxString a) -> IO (Ptr (TFileOutputStream ()))
+
+-- | usage: (@fileOutputStreamDelete self@).
+fileOutputStreamDelete :: FileOutputStream  a ->  IO ()
+fileOutputStreamDelete self 
+  = withObjectRef "fileOutputStreamDelete" self $ \cobj_self -> 
+    wxFileOutputStream_Delete cobj_self  
+foreign import ccall "wxFileOutputStream_Delete" wxFileOutputStream_Delete :: Ptr (TFileOutputStream a) -> IO ()
+
+-- | usage: (@fileOutputStreamIsOk self@).
+fileOutputStreamIsOk :: FileOutputStream  a ->  IO Bool
+fileOutputStreamIsOk self 
+  = withBoolResult $
+    withObjectRef "fileOutputStreamIsOk" self $ \cobj_self -> 
+    wxFileOutputStream_IsOk cobj_self  
+foreign import ccall "wxFileOutputStream_IsOk" wxFileOutputStream_IsOk :: Ptr (TFileOutputStream a) -> IO CBool
+
+-- | usage: (@filePropertyCreate label name value@).
+filePropertyCreate :: String -> String -> String ->  IO (FileProperty  ())
+filePropertyCreate label name value 
+  = withObjectResult $
+    withStringPtr label $ \cobj_label -> 
+    withStringPtr name $ \cobj_name -> 
+    withStringPtr value $ \cobj_value -> 
+    wxFileProperty_Create cobj_label  cobj_name  cobj_value  
+foreign import ccall "wxFileProperty_Create" wxFileProperty_Create :: Ptr (TWxString a) -> Ptr (TWxString b) -> Ptr (TWxString c) -> IO (Ptr (TFileProperty ()))
+
+-- | usage: (@fileTypeDelete obj@).
+fileTypeDelete :: FileType  a ->  IO ()
+fileTypeDelete _obj 
+  = withObjectRef "fileTypeDelete" _obj $ \cobj__obj -> 
+    wxFileType_Delete cobj__obj  
+foreign import ccall "wxFileType_Delete" wxFileType_Delete :: Ptr (TFileType a) -> IO ()
+
+-- | usage: (@fileTypeExpandCommand obj cmd params@).
+fileTypeExpandCommand :: FileType  a -> Ptr  b -> Ptr  c ->  IO (String)
+fileTypeExpandCommand _obj _cmd _params 
+  = withManagedStringResult $
+    withObjectRef "fileTypeExpandCommand" _obj $ \cobj__obj -> 
+    wxFileType_ExpandCommand cobj__obj  _cmd  _params  
+foreign import ccall "wxFileType_ExpandCommand" wxFileType_ExpandCommand :: Ptr (TFileType a) -> Ptr  b -> Ptr  c -> IO (Ptr (TWxString ()))
+
+-- | usage: (@fileTypeGetDescription obj@).
+fileTypeGetDescription :: FileType  a ->  IO (String)
+fileTypeGetDescription _obj 
+  = withManagedStringResult $
+    withObjectRef "fileTypeGetDescription" _obj $ \cobj__obj -> 
+    wxFileType_GetDescription cobj__obj  
+foreign import ccall "wxFileType_GetDescription" wxFileType_GetDescription :: Ptr (TFileType a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@fileTypeGetExtensions obj lst@).
+fileTypeGetExtensions :: FileType  a -> List  b ->  IO Int
+fileTypeGetExtensions _obj _lst 
+  = withIntResult $
+    withObjectRef "fileTypeGetExtensions" _obj $ \cobj__obj -> 
+    withObjectPtr _lst $ \cobj__lst -> 
+    wxFileType_GetExtensions cobj__obj  cobj__lst  
+foreign import ccall "wxFileType_GetExtensions" wxFileType_GetExtensions :: Ptr (TFileType a) -> Ptr (TList b) -> IO CInt
+
+-- | usage: (@fileTypeGetIcon obj icon@).
+fileTypeGetIcon :: FileType  a -> Icon  b ->  IO Int
+fileTypeGetIcon _obj icon 
+  = withIntResult $
+    withObjectRef "fileTypeGetIcon" _obj $ \cobj__obj -> 
+    withObjectPtr icon $ \cobj_icon -> 
+    wxFileType_GetIcon cobj__obj  cobj_icon  
+foreign import ccall "wxFileType_GetIcon" wxFileType_GetIcon :: Ptr (TFileType a) -> Ptr (TIcon b) -> IO CInt
+
+-- | usage: (@fileTypeGetMimeType obj@).
+fileTypeGetMimeType :: FileType  a ->  IO (String)
+fileTypeGetMimeType _obj 
+  = withManagedStringResult $
+    withObjectRef "fileTypeGetMimeType" _obj $ \cobj__obj -> 
+    wxFileType_GetMimeType cobj__obj  
+foreign import ccall "wxFileType_GetMimeType" wxFileType_GetMimeType :: Ptr (TFileType a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@fileTypeGetMimeTypes obj lst@).
+fileTypeGetMimeTypes :: FileType  a -> List  b ->  IO Int
+fileTypeGetMimeTypes _obj _lst 
+  = withIntResult $
+    withObjectRef "fileTypeGetMimeTypes" _obj $ \cobj__obj -> 
+    withObjectPtr _lst $ \cobj__lst -> 
+    wxFileType_GetMimeTypes cobj__obj  cobj__lst  
+foreign import ccall "wxFileType_GetMimeTypes" wxFileType_GetMimeTypes :: Ptr (TFileType a) -> Ptr (TList b) -> IO CInt
+
+-- | usage: (@fileTypeGetOpenCommand obj buf params@).
+fileTypeGetOpenCommand :: FileType  a -> Ptr  b -> Ptr  c ->  IO Int
+fileTypeGetOpenCommand _obj _buf _params 
+  = withIntResult $
+    withObjectRef "fileTypeGetOpenCommand" _obj $ \cobj__obj -> 
+    wxFileType_GetOpenCommand cobj__obj  _buf  _params  
+foreign import ccall "wxFileType_GetOpenCommand" wxFileType_GetOpenCommand :: Ptr (TFileType a) -> Ptr  b -> Ptr  c -> IO CInt
+
+-- | usage: (@fileTypeGetPrintCommand obj buf params@).
+fileTypeGetPrintCommand :: FileType  a -> Ptr  b -> Ptr  c ->  IO Int
+fileTypeGetPrintCommand _obj _buf _params 
+  = withIntResult $
+    withObjectRef "fileTypeGetPrintCommand" _obj $ \cobj__obj -> 
+    wxFileType_GetPrintCommand cobj__obj  _buf  _params  
+foreign import ccall "wxFileType_GetPrintCommand" wxFileType_GetPrintCommand :: Ptr (TFileType a) -> Ptr  b -> Ptr  c -> IO CInt
+
+-- | usage: (@findDialogEventGetFindString obj ref@).
+findDialogEventGetFindString :: FindDialogEvent  a -> Ptr  b ->  IO Int
+findDialogEventGetFindString _obj _ref 
+  = withIntResult $
+    withObjectRef "findDialogEventGetFindString" _obj $ \cobj__obj -> 
+    wxFindDialogEvent_GetFindString cobj__obj  _ref  
+foreign import ccall "wxFindDialogEvent_GetFindString" wxFindDialogEvent_GetFindString :: Ptr (TFindDialogEvent a) -> Ptr  b -> IO CInt
+
+-- | usage: (@findDialogEventGetFlags obj@).
+findDialogEventGetFlags :: FindDialogEvent  a ->  IO Int
+findDialogEventGetFlags _obj 
+  = withIntResult $
+    withObjectRef "findDialogEventGetFlags" _obj $ \cobj__obj -> 
+    wxFindDialogEvent_GetFlags cobj__obj  
+foreign import ccall "wxFindDialogEvent_GetFlags" wxFindDialogEvent_GetFlags :: Ptr (TFindDialogEvent a) -> IO CInt
+
+-- | usage: (@findDialogEventGetReplaceString obj ref@).
+findDialogEventGetReplaceString :: FindDialogEvent  a -> Ptr  b ->  IO Int
+findDialogEventGetReplaceString _obj _ref 
+  = withIntResult $
+    withObjectRef "findDialogEventGetReplaceString" _obj $ \cobj__obj -> 
+    wxFindDialogEvent_GetReplaceString cobj__obj  _ref  
+foreign import ccall "wxFindDialogEvent_GetReplaceString" wxFindDialogEvent_GetReplaceString :: Ptr (TFindDialogEvent a) -> Ptr  b -> IO CInt
+
+-- | usage: (@findReplaceDataCreate flags@).
+findReplaceDataCreate :: Int ->  IO (FindReplaceData  ())
+findReplaceDataCreate flags 
+  = withObjectResult $
+    wxFindReplaceData_Create (toCInt flags)  
+foreign import ccall "wxFindReplaceData_Create" wxFindReplaceData_Create :: CInt -> IO (Ptr (TFindReplaceData ()))
+
+-- | usage: (@findReplaceDataCreateDefault@).
+findReplaceDataCreateDefault ::  IO (FindReplaceData  ())
+findReplaceDataCreateDefault 
+  = withObjectResult $
+    wxFindReplaceData_CreateDefault 
+foreign import ccall "wxFindReplaceData_CreateDefault" wxFindReplaceData_CreateDefault :: IO (Ptr (TFindReplaceData ()))
+
+-- | usage: (@findReplaceDataDelete obj@).
+findReplaceDataDelete :: FindReplaceData  a ->  IO ()
+findReplaceDataDelete
+  = objectDelete
+
+
+-- | usage: (@findReplaceDataGetFindString obj@).
+findReplaceDataGetFindString :: FindReplaceData  a ->  IO (String)
+findReplaceDataGetFindString _obj 
+  = withManagedStringResult $
+    withObjectRef "findReplaceDataGetFindString" _obj $ \cobj__obj -> 
+    wxFindReplaceData_GetFindString cobj__obj  
+foreign import ccall "wxFindReplaceData_GetFindString" wxFindReplaceData_GetFindString :: Ptr (TFindReplaceData a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@findReplaceDataGetFlags obj@).
+findReplaceDataGetFlags :: FindReplaceData  a ->  IO Int
+findReplaceDataGetFlags _obj 
+  = withIntResult $
+    withObjectRef "findReplaceDataGetFlags" _obj $ \cobj__obj -> 
+    wxFindReplaceData_GetFlags cobj__obj  
+foreign import ccall "wxFindReplaceData_GetFlags" wxFindReplaceData_GetFlags :: Ptr (TFindReplaceData a) -> IO CInt
+
+-- | usage: (@findReplaceDataGetReplaceString obj@).
+findReplaceDataGetReplaceString :: FindReplaceData  a ->  IO (String)
+findReplaceDataGetReplaceString _obj 
+  = withManagedStringResult $
+    withObjectRef "findReplaceDataGetReplaceString" _obj $ \cobj__obj -> 
+    wxFindReplaceData_GetReplaceString cobj__obj  
+foreign import ccall "wxFindReplaceData_GetReplaceString" wxFindReplaceData_GetReplaceString :: Ptr (TFindReplaceData a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@findReplaceDataSetFindString obj str@).
+findReplaceDataSetFindString :: FindReplaceData  a -> String ->  IO ()
+findReplaceDataSetFindString _obj str 
+  = withObjectRef "findReplaceDataSetFindString" _obj $ \cobj__obj -> 
+    withStringPtr str $ \cobj_str -> 
+    wxFindReplaceData_SetFindString cobj__obj  cobj_str  
+foreign import ccall "wxFindReplaceData_SetFindString" wxFindReplaceData_SetFindString :: Ptr (TFindReplaceData a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@findReplaceDataSetFlags obj flags@).
+findReplaceDataSetFlags :: FindReplaceData  a -> Int ->  IO ()
+findReplaceDataSetFlags _obj flags 
+  = withObjectRef "findReplaceDataSetFlags" _obj $ \cobj__obj -> 
+    wxFindReplaceData_SetFlags cobj__obj  (toCInt flags)  
+foreign import ccall "wxFindReplaceData_SetFlags" wxFindReplaceData_SetFlags :: Ptr (TFindReplaceData a) -> CInt -> IO ()
+
+-- | usage: (@findReplaceDataSetReplaceString obj str@).
+findReplaceDataSetReplaceString :: FindReplaceData  a -> String ->  IO ()
+findReplaceDataSetReplaceString _obj str 
+  = withObjectRef "findReplaceDataSetReplaceString" _obj $ \cobj__obj -> 
+    withStringPtr str $ \cobj_str -> 
+    wxFindReplaceData_SetReplaceString cobj__obj  cobj_str  
+foreign import ccall "wxFindReplaceData_SetReplaceString" wxFindReplaceData_SetReplaceString :: Ptr (TFindReplaceData a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@findReplaceDialogCreate parent wxdata title style@).
+findReplaceDialogCreate :: Window  a -> FindReplaceData  b -> String -> Int ->  IO (FindReplaceDialog  ())
+findReplaceDialogCreate parent wxdata title style 
+  = withObjectResult $
+    withObjectPtr parent $ \cobj_parent -> 
+    withObjectPtr wxdata $ \cobj_wxdata -> 
+    withStringPtr title $ \cobj_title -> 
+    wxFindReplaceDialog_Create cobj_parent  cobj_wxdata  cobj_title  (toCInt style)  
+foreign import ccall "wxFindReplaceDialog_Create" wxFindReplaceDialog_Create :: Ptr (TWindow a) -> Ptr (TFindReplaceData b) -> Ptr (TWxString c) -> CInt -> IO (Ptr (TFindReplaceDialog ()))
+
+-- | usage: (@findReplaceDialogGetData obj@).
+findReplaceDialogGetData :: FindReplaceDialog  a ->  IO (FindReplaceData  ())
+findReplaceDialogGetData _obj 
+  = withObjectResult $
+    withObjectRef "findReplaceDialogGetData" _obj $ \cobj__obj -> 
+    wxFindReplaceDialog_GetData cobj__obj  
+foreign import ccall "wxFindReplaceDialog_GetData" wxFindReplaceDialog_GetData :: Ptr (TFindReplaceDialog a) -> IO (Ptr (TFindReplaceData ()))
+
+-- | usage: (@findReplaceDialogSetData obj wxdata@).
+findReplaceDialogSetData :: FindReplaceDialog  a -> FindReplaceData  b ->  IO ()
+findReplaceDialogSetData _obj wxdata 
+  = withObjectRef "findReplaceDialogSetData" _obj $ \cobj__obj -> 
+    withObjectPtr wxdata $ \cobj_wxdata -> 
+    wxFindReplaceDialog_SetData cobj__obj  cobj_wxdata  
+foreign import ccall "wxFindReplaceDialog_SetData" wxFindReplaceDialog_SetData :: Ptr (TFindReplaceDialog a) -> Ptr (TFindReplaceData b) -> IO ()
+
+-- | usage: (@flexGridSizerAddGrowableCol obj idx@).
+flexGridSizerAddGrowableCol :: FlexGridSizer  a -> Int ->  IO ()
+flexGridSizerAddGrowableCol _obj idx 
+  = withObjectRef "flexGridSizerAddGrowableCol" _obj $ \cobj__obj -> 
+    wxFlexGridSizer_AddGrowableCol cobj__obj  (toCInt idx)  
+foreign import ccall "wxFlexGridSizer_AddGrowableCol" wxFlexGridSizer_AddGrowableCol :: Ptr (TFlexGridSizer a) -> CInt -> IO ()
+
+-- | usage: (@flexGridSizerAddGrowableRow obj idx@).
+flexGridSizerAddGrowableRow :: FlexGridSizer  a -> Int ->  IO ()
+flexGridSizerAddGrowableRow _obj idx 
+  = withObjectRef "flexGridSizerAddGrowableRow" _obj $ \cobj__obj -> 
+    wxFlexGridSizer_AddGrowableRow cobj__obj  (toCInt idx)  
+foreign import ccall "wxFlexGridSizer_AddGrowableRow" wxFlexGridSizer_AddGrowableRow :: Ptr (TFlexGridSizer a) -> CInt -> IO ()
+
+-- | usage: (@flexGridSizerCalcMin obj@).
+flexGridSizerCalcMin :: FlexGridSizer  a ->  IO (Size)
+flexGridSizerCalcMin _obj 
+  = withWxSizeResult $
+    withObjectRef "flexGridSizerCalcMin" _obj $ \cobj__obj -> 
+    wxFlexGridSizer_CalcMin cobj__obj  
+foreign import ccall "wxFlexGridSizer_CalcMin" wxFlexGridSizer_CalcMin :: Ptr (TFlexGridSizer a) -> IO (Ptr (TWxSize ()))
+
+-- | usage: (@flexGridSizerCreate rows cols vgap hgap@).
+flexGridSizerCreate :: Int -> Int -> Int -> Int ->  IO (FlexGridSizer  ())
+flexGridSizerCreate rows cols vgap hgap 
+  = withObjectResult $
+    wxFlexGridSizer_Create (toCInt rows)  (toCInt cols)  (toCInt vgap)  (toCInt hgap)  
+foreign import ccall "wxFlexGridSizer_Create" wxFlexGridSizer_Create :: CInt -> CInt -> CInt -> CInt -> IO (Ptr (TFlexGridSizer ()))
+
+-- | usage: (@flexGridSizerRecalcSizes obj@).
+flexGridSizerRecalcSizes :: FlexGridSizer  a ->  IO ()
+flexGridSizerRecalcSizes _obj 
+  = withObjectRef "flexGridSizerRecalcSizes" _obj $ \cobj__obj -> 
+    wxFlexGridSizer_RecalcSizes cobj__obj  
+foreign import ccall "wxFlexGridSizer_RecalcSizes" wxFlexGridSizer_RecalcSizes :: Ptr (TFlexGridSizer a) -> IO ()
+
+-- | usage: (@flexGridSizerRemoveGrowableCol obj idx@).
+flexGridSizerRemoveGrowableCol :: FlexGridSizer  a -> Int ->  IO ()
+flexGridSizerRemoveGrowableCol _obj idx 
+  = withObjectRef "flexGridSizerRemoveGrowableCol" _obj $ \cobj__obj -> 
+    wxFlexGridSizer_RemoveGrowableCol cobj__obj  (toCInt idx)  
+foreign import ccall "wxFlexGridSizer_RemoveGrowableCol" wxFlexGridSizer_RemoveGrowableCol :: Ptr (TFlexGridSizer a) -> CInt -> IO ()
+
+-- | usage: (@flexGridSizerRemoveGrowableRow obj idx@).
+flexGridSizerRemoveGrowableRow :: FlexGridSizer  a -> Int ->  IO ()
+flexGridSizerRemoveGrowableRow _obj idx 
+  = withObjectRef "flexGridSizerRemoveGrowableRow" _obj $ \cobj__obj -> 
+    wxFlexGridSizer_RemoveGrowableRow cobj__obj  (toCInt idx)  
+foreign import ccall "wxFlexGridSizer_RemoveGrowableRow" wxFlexGridSizer_RemoveGrowableRow :: Ptr (TFlexGridSizer a) -> CInt -> IO ()
+
+-- | usage: (@floatPropertyCreate label name value@).
+floatPropertyCreate :: String -> String -> Float ->  IO (FloatProperty  ())
+floatPropertyCreate label name value 
+  = withObjectResult $
+    withStringPtr label $ \cobj_label -> 
+    withStringPtr name $ \cobj_name -> 
+    wxFloatProperty_Create cobj_label  cobj_name  value  
+foreign import ccall "wxFloatProperty_Create" wxFloatProperty_Create :: Ptr (TWxString a) -> Ptr (TWxString b) -> Float -> IO (Ptr (TFloatProperty ()))
+
+-- | usage: (@fontCreate pointSize family style weight underlined face enc@).
+fontCreate :: Int -> Int -> Int -> Int -> Bool -> String -> Int ->  IO (Font  ())
+fontCreate pointSize family style weight underlined face enc 
+  = withManagedFontResult $
+    withStringPtr face $ \cobj_face -> 
+    wxFont_Create (toCInt pointSize)  (toCInt family)  (toCInt style)  (toCInt weight)  (toCBool underlined)  cobj_face  (toCInt enc)  
+foreign import ccall "wxFont_Create" wxFont_Create :: CInt -> CInt -> CInt -> CInt -> CBool -> Ptr (TWxString f) -> CInt -> IO (Ptr (TFont ()))
+
+-- | usage: (@fontCreateDefault@).
+fontCreateDefault ::  IO (Font  ())
+fontCreateDefault 
+  = withManagedFontResult $
+    wxFont_CreateDefault 
+foreign import ccall "wxFont_CreateDefault" wxFont_CreateDefault :: IO (Ptr (TFont ()))
+
+-- | usage: (@fontCreateFromStock id@).
+fontCreateFromStock :: Id ->  IO (Font  ())
+fontCreateFromStock id 
+  = withManagedFontResult $
+    wxFont_CreateFromStock (toCInt id)  
+foreign import ccall "wxFont_CreateFromStock" wxFont_CreateFromStock :: CInt -> IO (Ptr (TFont ()))
+
+-- | usage: (@fontDataCreate@).
+fontDataCreate ::  IO (FontData  ())
+fontDataCreate 
+  = withManagedObjectResult $
+    wxFontData_Create 
+foreign import ccall "wxFontData_Create" wxFontData_Create :: IO (Ptr (TFontData ()))
+
+-- | usage: (@fontDataDelete obj@).
+fontDataDelete :: FontData  a ->  IO ()
+fontDataDelete
+  = objectDelete
+
+
+-- | usage: (@fontDataEnableEffects obj flag@).
+fontDataEnableEffects :: FontData  a -> Bool ->  IO ()
+fontDataEnableEffects _obj flag 
+  = withObjectRef "fontDataEnableEffects" _obj $ \cobj__obj -> 
+    wxFontData_EnableEffects cobj__obj  (toCBool flag)  
+foreign import ccall "wxFontData_EnableEffects" wxFontData_EnableEffects :: Ptr (TFontData a) -> CBool -> IO ()
+
+-- | usage: (@fontDataGetAllowSymbols obj@).
+fontDataGetAllowSymbols :: FontData  a ->  IO Bool
+fontDataGetAllowSymbols _obj 
+  = withBoolResult $
+    withObjectRef "fontDataGetAllowSymbols" _obj $ \cobj__obj -> 
+    wxFontData_GetAllowSymbols cobj__obj  
+foreign import ccall "wxFontData_GetAllowSymbols" wxFontData_GetAllowSymbols :: Ptr (TFontData a) -> IO CBool
+
+-- | usage: (@fontDataGetChosenFont obj@).
+fontDataGetChosenFont :: FontData  a ->  IO (Font  ())
+fontDataGetChosenFont _obj 
+  = withRefFont $ \pref -> 
+    withObjectRef "fontDataGetChosenFont" _obj $ \cobj__obj -> 
+    wxFontData_GetChosenFont cobj__obj   pref
+foreign import ccall "wxFontData_GetChosenFont" wxFontData_GetChosenFont :: Ptr (TFontData a) -> Ptr (TFont ()) -> IO ()
+
+-- | usage: (@fontDataGetColour obj@).
+fontDataGetColour :: FontData  a ->  IO (Color)
+fontDataGetColour _obj 
+  = withRefColour $ \pref -> 
+    withObjectRef "fontDataGetColour" _obj $ \cobj__obj -> 
+    wxFontData_GetColour cobj__obj   pref
+foreign import ccall "wxFontData_GetColour" wxFontData_GetColour :: Ptr (TFontData a) -> Ptr (TColour ()) -> IO ()
+
+-- | usage: (@fontDataGetEnableEffects obj@).
+fontDataGetEnableEffects :: FontData  a ->  IO Bool
+fontDataGetEnableEffects _obj 
+  = withBoolResult $
+    withObjectRef "fontDataGetEnableEffects" _obj $ \cobj__obj -> 
+    wxFontData_GetEnableEffects cobj__obj  
+foreign import ccall "wxFontData_GetEnableEffects" wxFontData_GetEnableEffects :: Ptr (TFontData a) -> IO CBool
+
+-- | usage: (@fontDataGetEncoding obj@).
+fontDataGetEncoding :: FontData  a ->  IO Int
+fontDataGetEncoding _obj 
+  = withIntResult $
+    withObjectRef "fontDataGetEncoding" _obj $ \cobj__obj -> 
+    wxFontData_GetEncoding cobj__obj  
+foreign import ccall "wxFontData_GetEncoding" wxFontData_GetEncoding :: Ptr (TFontData a) -> IO CInt
+
+-- | usage: (@fontDataGetInitialFont obj@).
+fontDataGetInitialFont :: FontData  a ->  IO (Font  ())
+fontDataGetInitialFont _obj 
+  = withRefFont $ \pref -> 
+    withObjectRef "fontDataGetInitialFont" _obj $ \cobj__obj -> 
+    wxFontData_GetInitialFont cobj__obj   pref
+foreign import ccall "wxFontData_GetInitialFont" wxFontData_GetInitialFont :: Ptr (TFontData a) -> Ptr (TFont ()) -> IO ()
+
+-- | usage: (@fontDataGetShowHelp obj@).
+fontDataGetShowHelp :: FontData  a ->  IO Int
+fontDataGetShowHelp _obj 
+  = withIntResult $
+    withObjectRef "fontDataGetShowHelp" _obj $ \cobj__obj -> 
+    wxFontData_GetShowHelp cobj__obj  
+foreign import ccall "wxFontData_GetShowHelp" wxFontData_GetShowHelp :: Ptr (TFontData a) -> IO CInt
+
+-- | usage: (@fontDataSetAllowSymbols obj flag@).
+fontDataSetAllowSymbols :: FontData  a -> Bool ->  IO ()
+fontDataSetAllowSymbols _obj flag 
+  = withObjectRef "fontDataSetAllowSymbols" _obj $ \cobj__obj -> 
+    wxFontData_SetAllowSymbols cobj__obj  (toCBool flag)  
+foreign import ccall "wxFontData_SetAllowSymbols" wxFontData_SetAllowSymbols :: Ptr (TFontData a) -> CBool -> IO ()
+
+-- | usage: (@fontDataSetChosenFont obj font@).
+fontDataSetChosenFont :: FontData  a -> Font  b ->  IO ()
+fontDataSetChosenFont _obj font 
+  = withObjectRef "fontDataSetChosenFont" _obj $ \cobj__obj -> 
+    withObjectPtr font $ \cobj_font -> 
+    wxFontData_SetChosenFont cobj__obj  cobj_font  
+foreign import ccall "wxFontData_SetChosenFont" wxFontData_SetChosenFont :: Ptr (TFontData a) -> Ptr (TFont b) -> IO ()
+
+-- | usage: (@fontDataSetColour obj colour@).
+fontDataSetColour :: FontData  a -> Color ->  IO ()
+fontDataSetColour _obj colour 
+  = withObjectRef "fontDataSetColour" _obj $ \cobj__obj -> 
+    withColourPtr colour $ \cobj_colour -> 
+    wxFontData_SetColour cobj__obj  cobj_colour  
+foreign import ccall "wxFontData_SetColour" wxFontData_SetColour :: Ptr (TFontData a) -> Ptr (TColour b) -> IO ()
+
+-- | usage: (@fontDataSetEncoding obj encoding@).
+fontDataSetEncoding :: FontData  a -> Int ->  IO ()
+fontDataSetEncoding _obj encoding 
+  = withObjectRef "fontDataSetEncoding" _obj $ \cobj__obj -> 
+    wxFontData_SetEncoding cobj__obj  (toCInt encoding)  
+foreign import ccall "wxFontData_SetEncoding" wxFontData_SetEncoding :: Ptr (TFontData a) -> CInt -> IO ()
+
+-- | usage: (@fontDataSetInitialFont obj font@).
+fontDataSetInitialFont :: FontData  a -> Font  b ->  IO ()
+fontDataSetInitialFont _obj font 
+  = withObjectRef "fontDataSetInitialFont" _obj $ \cobj__obj -> 
+    withObjectPtr font $ \cobj_font -> 
+    wxFontData_SetInitialFont cobj__obj  cobj_font  
+foreign import ccall "wxFontData_SetInitialFont" wxFontData_SetInitialFont :: Ptr (TFontData a) -> Ptr (TFont b) -> IO ()
+
+-- | usage: (@fontDataSetRange obj minRange maxRange@).
+fontDataSetRange :: FontData  a -> Int -> Int ->  IO ()
+fontDataSetRange _obj minRange maxRange 
+  = withObjectRef "fontDataSetRange" _obj $ \cobj__obj -> 
+    wxFontData_SetRange cobj__obj  (toCInt minRange)  (toCInt maxRange)  
+foreign import ccall "wxFontData_SetRange" wxFontData_SetRange :: Ptr (TFontData a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@fontDataSetShowHelp obj flag@).
+fontDataSetShowHelp :: FontData  a -> Bool ->  IO ()
+fontDataSetShowHelp _obj flag 
+  = withObjectRef "fontDataSetShowHelp" _obj $ \cobj__obj -> 
+    wxFontData_SetShowHelp cobj__obj  (toCBool flag)  
+foreign import ccall "wxFontData_SetShowHelp" wxFontData_SetShowHelp :: Ptr (TFontData a) -> CBool -> IO ()
+
+-- | usage: (@fontDelete obj@).
+fontDelete :: Font  a ->  IO ()
+fontDelete
+  = objectDelete
+
+
+-- | usage: (@fontDialogCreate prt fnt@).
+fontDialogCreate :: Window  a -> FontData  b ->  IO (FontDialog  ())
+fontDialogCreate _prt fnt 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    withObjectPtr fnt $ \cobj_fnt -> 
+    wxFontDialog_Create cobj__prt  cobj_fnt  
+foreign import ccall "wxFontDialog_Create" wxFontDialog_Create :: Ptr (TWindow a) -> Ptr (TFontData b) -> IO (Ptr (TFontDialog ()))
+
+-- | usage: (@fontDialogGetFontData obj@).
+fontDialogGetFontData :: FontDialog  a ->  IO (FontData  ())
+fontDialogGetFontData _obj 
+  = withRefFontData $ \pref -> 
+    withObjectRef "fontDialogGetFontData" _obj $ \cobj__obj -> 
+    wxFontDialog_GetFontData cobj__obj   pref
+foreign import ccall "wxFontDialog_GetFontData" wxFontDialog_GetFontData :: Ptr (TFontDialog a) -> Ptr (TFontData ()) -> IO ()
+
+-- | usage: (@fontEnumeratorCreate obj fnc@).
+fontEnumeratorCreate :: Ptr  a -> Ptr  b ->  IO (FontEnumerator  ())
+fontEnumeratorCreate _obj _fnc 
+  = withObjectResult $
+    wxFontEnumerator_Create _obj  _fnc  
+foreign import ccall "wxFontEnumerator_Create" wxFontEnumerator_Create :: Ptr  a -> Ptr  b -> IO (Ptr (TFontEnumerator ()))
+
+-- | usage: (@fontEnumeratorDelete obj@).
+fontEnumeratorDelete :: FontEnumerator  a ->  IO ()
+fontEnumeratorDelete _obj 
+  = withObjectRef "fontEnumeratorDelete" _obj $ \cobj__obj -> 
+    wxFontEnumerator_Delete cobj__obj  
+foreign import ccall "wxFontEnumerator_Delete" wxFontEnumerator_Delete :: Ptr (TFontEnumerator a) -> IO ()
+
+-- | usage: (@fontEnumeratorEnumerateEncodings obj facename@).
+fontEnumeratorEnumerateEncodings :: FontEnumerator  a -> String ->  IO Bool
+fontEnumeratorEnumerateEncodings _obj facename 
+  = withBoolResult $
+    withObjectRef "fontEnumeratorEnumerateEncodings" _obj $ \cobj__obj -> 
+    withStringPtr facename $ \cobj_facename -> 
+    wxFontEnumerator_EnumerateEncodings cobj__obj  cobj_facename  
+foreign import ccall "wxFontEnumerator_EnumerateEncodings" wxFontEnumerator_EnumerateEncodings :: Ptr (TFontEnumerator a) -> Ptr (TWxString b) -> IO CBool
+
+-- | usage: (@fontEnumeratorEnumerateFacenames obj encoding fixedWidthOnly@).
+fontEnumeratorEnumerateFacenames :: FontEnumerator  a -> Int -> Int ->  IO Bool
+fontEnumeratorEnumerateFacenames _obj encoding fixedWidthOnly 
+  = withBoolResult $
+    withObjectRef "fontEnumeratorEnumerateFacenames" _obj $ \cobj__obj -> 
+    wxFontEnumerator_EnumerateFacenames cobj__obj  (toCInt encoding)  (toCInt fixedWidthOnly)  
+foreign import ccall "wxFontEnumerator_EnumerateFacenames" wxFontEnumerator_EnumerateFacenames :: Ptr (TFontEnumerator a) -> CInt -> CInt -> IO CBool
+
+-- | usage: (@fontGetDefaultEncoding obj@).
+fontGetDefaultEncoding :: Font  a ->  IO Int
+fontGetDefaultEncoding _obj 
+  = withIntResult $
+    withObjectRef "fontGetDefaultEncoding" _obj $ \cobj__obj -> 
+    wxFont_GetDefaultEncoding cobj__obj  
+foreign import ccall "wxFont_GetDefaultEncoding" wxFont_GetDefaultEncoding :: Ptr (TFont a) -> IO CInt
+
+-- | usage: (@fontGetEncoding obj@).
+fontGetEncoding :: Font  a ->  IO Int
+fontGetEncoding _obj 
+  = withIntResult $
+    withObjectRef "fontGetEncoding" _obj $ \cobj__obj -> 
+    wxFont_GetEncoding cobj__obj  
+foreign import ccall "wxFont_GetEncoding" wxFont_GetEncoding :: Ptr (TFont a) -> IO CInt
+
+-- | usage: (@fontGetFaceName obj@).
+fontGetFaceName :: Font  a ->  IO (String)
+fontGetFaceName _obj 
+  = withManagedStringResult $
+    withObjectRef "fontGetFaceName" _obj $ \cobj__obj -> 
+    wxFont_GetFaceName cobj__obj  
+foreign import ccall "wxFont_GetFaceName" wxFont_GetFaceName :: Ptr (TFont a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@fontGetFamily obj@).
+fontGetFamily :: Font  a ->  IO Int
+fontGetFamily _obj 
+  = withIntResult $
+    withObjectRef "fontGetFamily" _obj $ \cobj__obj -> 
+    wxFont_GetFamily cobj__obj  
+foreign import ccall "wxFont_GetFamily" wxFont_GetFamily :: Ptr (TFont a) -> IO CInt
+
+-- | usage: (@fontGetFamilyString obj@).
+fontGetFamilyString :: Font  a ->  IO (String)
+fontGetFamilyString _obj 
+  = withManagedStringResult $
+    withObjectRef "fontGetFamilyString" _obj $ \cobj__obj -> 
+    wxFont_GetFamilyString cobj__obj  
+foreign import ccall "wxFont_GetFamilyString" wxFont_GetFamilyString :: Ptr (TFont a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@fontGetPointSize obj@).
+fontGetPointSize :: Font  a ->  IO Int
+fontGetPointSize _obj 
+  = withIntResult $
+    withObjectRef "fontGetPointSize" _obj $ \cobj__obj -> 
+    wxFont_GetPointSize cobj__obj  
+foreign import ccall "wxFont_GetPointSize" wxFont_GetPointSize :: Ptr (TFont a) -> IO CInt
+
+-- | usage: (@fontGetStyle obj@).
+fontGetStyle :: Font  a ->  IO Int
+fontGetStyle _obj 
+  = withIntResult $
+    withObjectRef "fontGetStyle" _obj $ \cobj__obj -> 
+    wxFont_GetStyle cobj__obj  
+foreign import ccall "wxFont_GetStyle" wxFont_GetStyle :: Ptr (TFont a) -> IO CInt
+
+-- | usage: (@fontGetStyleString obj@).
+fontGetStyleString :: Font  a ->  IO (String)
+fontGetStyleString _obj 
+  = withManagedStringResult $
+    withObjectRef "fontGetStyleString" _obj $ \cobj__obj -> 
+    wxFont_GetStyleString cobj__obj  
+foreign import ccall "wxFont_GetStyleString" wxFont_GetStyleString :: Ptr (TFont a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@fontGetUnderlined obj@).
+fontGetUnderlined :: Font  a ->  IO Int
+fontGetUnderlined _obj 
+  = withIntResult $
+    withObjectRef "fontGetUnderlined" _obj $ \cobj__obj -> 
+    wxFont_GetUnderlined cobj__obj  
+foreign import ccall "wxFont_GetUnderlined" wxFont_GetUnderlined :: Ptr (TFont a) -> IO CInt
+
+-- | usage: (@fontGetWeight obj@).
+fontGetWeight :: Font  a ->  IO Int
+fontGetWeight _obj 
+  = withIntResult $
+    withObjectRef "fontGetWeight" _obj $ \cobj__obj -> 
+    wxFont_GetWeight cobj__obj  
+foreign import ccall "wxFont_GetWeight" wxFont_GetWeight :: Ptr (TFont a) -> IO CInt
+
+-- | usage: (@fontGetWeightString obj@).
+fontGetWeightString :: Font  a ->  IO (String)
+fontGetWeightString _obj 
+  = withManagedStringResult $
+    withObjectRef "fontGetWeightString" _obj $ \cobj__obj -> 
+    wxFont_GetWeightString cobj__obj  
+foreign import ccall "wxFont_GetWeightString" wxFont_GetWeightString :: Ptr (TFont a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@fontIsOk obj@).
+fontIsOk :: Font  a ->  IO Bool
+fontIsOk _obj 
+  = withBoolResult $
+    withObjectRef "fontIsOk" _obj $ \cobj__obj -> 
+    wxFont_IsOk cobj__obj  
+foreign import ccall "wxFont_IsOk" wxFont_IsOk :: Ptr (TFont a) -> IO CBool
+
+-- | usage: (@fontIsStatic self@).
+fontIsStatic :: Font  a ->  IO Bool
+fontIsStatic self 
+  = withBoolResult $
+    withObjectPtr self $ \cobj_self -> 
+    wxFont_IsStatic cobj_self  
+foreign import ccall "wxFont_IsStatic" wxFont_IsStatic :: Ptr (TFont a) -> IO CBool
+
+-- | usage: (@fontMapperCreate@).
+fontMapperCreate ::  IO (FontMapper  ())
+fontMapperCreate 
+  = withObjectResult $
+    wxFontMapper_Create 
+foreign import ccall "wxFontMapper_Create" wxFontMapper_Create :: IO (Ptr (TFontMapper ()))
+
+-- | usage: (@fontMapperGetAltForEncoding obj encoding altencoding buf@).
+fontMapperGetAltForEncoding :: FontMapper  a -> Int -> Ptr  c -> String ->  IO Bool
+fontMapperGetAltForEncoding _obj encoding altencoding _buf 
+  = withBoolResult $
+    withObjectRef "fontMapperGetAltForEncoding" _obj $ \cobj__obj -> 
+    withStringPtr _buf $ \cobj__buf -> 
+    wxFontMapper_GetAltForEncoding cobj__obj  (toCInt encoding)  altencoding  cobj__buf  
+foreign import ccall "wxFontMapper_GetAltForEncoding" wxFontMapper_GetAltForEncoding :: Ptr (TFontMapper a) -> CInt -> Ptr  c -> Ptr (TWxString d) -> IO CBool
+
+-- | usage: (@fontMapperIsEncodingAvailable obj encoding buf@).
+fontMapperIsEncodingAvailable :: FontMapper  a -> Int -> String ->  IO Bool
+fontMapperIsEncodingAvailable _obj encoding _buf 
+  = withBoolResult $
+    withObjectRef "fontMapperIsEncodingAvailable" _obj $ \cobj__obj -> 
+    withStringPtr _buf $ \cobj__buf -> 
+    wxFontMapper_IsEncodingAvailable cobj__obj  (toCInt encoding)  cobj__buf  
+foreign import ccall "wxFontMapper_IsEncodingAvailable" wxFontMapper_IsEncodingAvailable :: Ptr (TFontMapper a) -> CInt -> Ptr (TWxString c) -> IO CBool
+
+-- | usage: (@fontSafeDelete self@).
+fontSafeDelete :: Font  a ->  IO ()
+fontSafeDelete self 
+  = withObjectPtr self $ \cobj_self -> 
+    wxFont_SafeDelete cobj_self  
+foreign import ccall "wxFont_SafeDelete" wxFont_SafeDelete :: Ptr (TFont a) -> IO ()
+
+-- | usage: (@fontSetDefaultEncoding obj encoding@).
+fontSetDefaultEncoding :: Font  a -> Int ->  IO ()
+fontSetDefaultEncoding _obj encoding 
+  = withObjectRef "fontSetDefaultEncoding" _obj $ \cobj__obj -> 
+    wxFont_SetDefaultEncoding cobj__obj  (toCInt encoding)  
+foreign import ccall "wxFont_SetDefaultEncoding" wxFont_SetDefaultEncoding :: Ptr (TFont a) -> CInt -> IO ()
+
+-- | usage: (@fontSetEncoding obj encoding@).
+fontSetEncoding :: Font  a -> Int ->  IO ()
+fontSetEncoding _obj encoding 
+  = withObjectRef "fontSetEncoding" _obj $ \cobj__obj -> 
+    wxFont_SetEncoding cobj__obj  (toCInt encoding)  
+foreign import ccall "wxFont_SetEncoding" wxFont_SetEncoding :: Ptr (TFont a) -> CInt -> IO ()
+
+-- | usage: (@fontSetFaceName obj faceName@).
+fontSetFaceName :: Font  a -> String ->  IO ()
+fontSetFaceName _obj faceName 
+  = withObjectRef "fontSetFaceName" _obj $ \cobj__obj -> 
+    withStringPtr faceName $ \cobj_faceName -> 
+    wxFont_SetFaceName cobj__obj  cobj_faceName  
+foreign import ccall "wxFont_SetFaceName" wxFont_SetFaceName :: Ptr (TFont a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@fontSetFamily obj family@).
+fontSetFamily :: Font  a -> Int ->  IO ()
+fontSetFamily _obj family 
+  = withObjectRef "fontSetFamily" _obj $ \cobj__obj -> 
+    wxFont_SetFamily cobj__obj  (toCInt family)  
+foreign import ccall "wxFont_SetFamily" wxFont_SetFamily :: Ptr (TFont a) -> CInt -> IO ()
+
+-- | usage: (@fontSetPointSize obj pointSize@).
+fontSetPointSize :: Font  a -> Int ->  IO ()
+fontSetPointSize _obj pointSize 
+  = withObjectRef "fontSetPointSize" _obj $ \cobj__obj -> 
+    wxFont_SetPointSize cobj__obj  (toCInt pointSize)  
+foreign import ccall "wxFont_SetPointSize" wxFont_SetPointSize :: Ptr (TFont a) -> CInt -> IO ()
+
+-- | usage: (@fontSetStyle obj style@).
+fontSetStyle :: Font  a -> Int ->  IO ()
+fontSetStyle _obj style 
+  = withObjectRef "fontSetStyle" _obj $ \cobj__obj -> 
+    wxFont_SetStyle cobj__obj  (toCInt style)  
+foreign import ccall "wxFont_SetStyle" wxFont_SetStyle :: Ptr (TFont a) -> CInt -> IO ()
+
+-- | usage: (@fontSetUnderlined obj underlined@).
+fontSetUnderlined :: Font  a -> Int ->  IO ()
+fontSetUnderlined _obj underlined 
+  = withObjectRef "fontSetUnderlined" _obj $ \cobj__obj -> 
+    wxFont_SetUnderlined cobj__obj  (toCInt underlined)  
+foreign import ccall "wxFont_SetUnderlined" wxFont_SetUnderlined :: Ptr (TFont a) -> CInt -> IO ()
+
+-- | usage: (@fontSetWeight obj weight@).
+fontSetWeight :: Font  a -> Int ->  IO ()
+fontSetWeight _obj weight 
+  = withObjectRef "fontSetWeight" _obj $ \cobj__obj -> 
+    wxFont_SetWeight cobj__obj  (toCInt weight)  
+foreign import ccall "wxFont_SetWeight" wxFont_SetWeight :: Ptr (TFont a) -> CInt -> IO ()
+
+-- | usage: (@frameCentre self orientation@).
+frameCentre :: Frame  a -> Int ->  IO ()
+frameCentre self orientation 
+  = withObjectRef "frameCentre" self $ \cobj_self -> 
+    wxFrame_Centre cobj_self  (toCInt orientation)  
+foreign import ccall "wxFrame_Centre" wxFrame_Centre :: Ptr (TFrame a) -> CInt -> IO ()
+
+-- | usage: (@frameCreate prt id txt lfttopwdthgt stl@).
+frameCreate :: Window  a -> Id -> String -> Rect -> Style ->  IO (Frame  ())
+frameCreate _prt _id _txt _lfttopwdthgt _stl 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    withStringPtr _txt $ \cobj__txt -> 
+    wxFrame_Create cobj__prt  (toCInt _id)  cobj__txt  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
+foreign import ccall "wxFrame_Create" wxFrame_Create :: Ptr (TWindow a) -> CInt -> Ptr (TWxString c) -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TFrame ()))
+
+-- | usage: (@frameCreateStatusBar obj number style@).
+frameCreateStatusBar :: Frame  a -> Int -> Int ->  IO (StatusBar  ())
+frameCreateStatusBar _obj number style 
+  = withObjectResult $
+    withObjectRef "frameCreateStatusBar" _obj $ \cobj__obj -> 
+    wxFrame_CreateStatusBar cobj__obj  (toCInt number)  (toCInt style)  
+foreign import ccall "wxFrame_CreateStatusBar" wxFrame_CreateStatusBar :: Ptr (TFrame a) -> CInt -> CInt -> IO (Ptr (TStatusBar ()))
+
+-- | usage: (@frameCreateToolBar obj style@).
+frameCreateToolBar :: Frame  a -> Int ->  IO (ToolBar  ())
+frameCreateToolBar _obj style 
+  = withObjectResult $
+    withObjectRef "frameCreateToolBar" _obj $ \cobj__obj -> 
+    wxFrame_CreateToolBar cobj__obj  (toCInt style)  
+foreign import ccall "wxFrame_CreateToolBar" wxFrame_CreateToolBar :: Ptr (TFrame a) -> CInt -> IO (Ptr (TToolBar ()))
+
+-- | usage: (@frameGetClientAreaOriginleft obj@).
+frameGetClientAreaOriginleft :: Frame  a ->  IO Int
+frameGetClientAreaOriginleft _obj 
+  = withIntResult $
+    withObjectRef "frameGetClientAreaOriginleft" _obj $ \cobj__obj -> 
+    wxFrame_GetClientAreaOrigin_left cobj__obj  
+foreign import ccall "wxFrame_GetClientAreaOrigin_left" wxFrame_GetClientAreaOrigin_left :: Ptr (TFrame a) -> IO CInt
+
+-- | usage: (@frameGetClientAreaOrigintop obj@).
+frameGetClientAreaOrigintop :: Frame  a ->  IO Int
+frameGetClientAreaOrigintop _obj 
+  = withIntResult $
+    withObjectRef "frameGetClientAreaOrigintop" _obj $ \cobj__obj -> 
+    wxFrame_GetClientAreaOrigin_top cobj__obj  
+foreign import ccall "wxFrame_GetClientAreaOrigin_top" wxFrame_GetClientAreaOrigin_top :: Ptr (TFrame a) -> IO CInt
+
+-- | usage: (@frameGetMenuBar obj@).
+frameGetMenuBar :: Frame  a ->  IO (MenuBar  ())
+frameGetMenuBar _obj 
+  = withObjectResult $
+    withObjectRef "frameGetMenuBar" _obj $ \cobj__obj -> 
+    wxFrame_GetMenuBar cobj__obj  
+foreign import ccall "wxFrame_GetMenuBar" wxFrame_GetMenuBar :: Ptr (TFrame a) -> IO (Ptr (TMenuBar ()))
+
+-- | usage: (@frameGetStatusBar obj@).
+frameGetStatusBar :: Frame  a ->  IO (StatusBar  ())
+frameGetStatusBar _obj 
+  = withObjectResult $
+    withObjectRef "frameGetStatusBar" _obj $ \cobj__obj -> 
+    wxFrame_GetStatusBar cobj__obj  
+foreign import ccall "wxFrame_GetStatusBar" wxFrame_GetStatusBar :: Ptr (TFrame a) -> IO (Ptr (TStatusBar ()))
+
+-- | usage: (@frameGetTitle obj@).
+frameGetTitle :: Frame  a ->  IO (String)
+frameGetTitle _obj 
+  = withManagedStringResult $
+    withObjectRef "frameGetTitle" _obj $ \cobj__obj -> 
+    wxFrame_GetTitle cobj__obj  
+foreign import ccall "wxFrame_GetTitle" wxFrame_GetTitle :: Ptr (TFrame a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@frameGetToolBar obj@).
+frameGetToolBar :: Frame  a ->  IO (ToolBar  ())
+frameGetToolBar _obj 
+  = withObjectResult $
+    withObjectRef "frameGetToolBar" _obj $ \cobj__obj -> 
+    wxFrame_GetToolBar cobj__obj  
+foreign import ccall "wxFrame_GetToolBar" wxFrame_GetToolBar :: Ptr (TFrame a) -> IO (Ptr (TToolBar ()))
+
+-- | usage: (@frameIsFullScreen self@).
+frameIsFullScreen :: Frame  a ->  IO Bool
+frameIsFullScreen self 
+  = withBoolResult $
+    withObjectRef "frameIsFullScreen" self $ \cobj_self -> 
+    wxFrame_IsFullScreen cobj_self  
+foreign import ccall "wxFrame_IsFullScreen" wxFrame_IsFullScreen :: Ptr (TFrame a) -> IO CBool
+
+-- | usage: (@frameRestore obj@).
+frameRestore :: Frame  a ->  IO ()
+frameRestore _obj 
+  = withObjectRef "frameRestore" _obj $ \cobj__obj -> 
+    wxFrame_Restore cobj__obj  
+foreign import ccall "wxFrame_Restore" wxFrame_Restore :: Ptr (TFrame a) -> IO ()
+
+-- | usage: (@frameSetMenuBar obj menubar@).
+frameSetMenuBar :: Frame  a -> MenuBar  b ->  IO ()
+frameSetMenuBar _obj menubar 
+  = withObjectRef "frameSetMenuBar" _obj $ \cobj__obj -> 
+    withObjectPtr menubar $ \cobj_menubar -> 
+    wxFrame_SetMenuBar cobj__obj  cobj_menubar  
+foreign import ccall "wxFrame_SetMenuBar" wxFrame_SetMenuBar :: Ptr (TFrame a) -> Ptr (TMenuBar b) -> IO ()
+
+-- | usage: (@frameSetShape self region@).
+frameSetShape :: Frame  a -> Region  b ->  IO Bool
+frameSetShape self region 
+  = withBoolResult $
+    withObjectRef "frameSetShape" self $ \cobj_self -> 
+    withObjectPtr region $ \cobj_region -> 
+    wxFrame_SetShape cobj_self  cobj_region  
+foreign import ccall "wxFrame_SetShape" wxFrame_SetShape :: Ptr (TFrame a) -> Ptr (TRegion b) -> IO CBool
+
+-- | usage: (@frameSetStatusBar obj statBar@).
+frameSetStatusBar :: Frame  a -> StatusBar  b ->  IO ()
+frameSetStatusBar _obj statBar 
+  = withObjectRef "frameSetStatusBar" _obj $ \cobj__obj -> 
+    withObjectPtr statBar $ \cobj_statBar -> 
+    wxFrame_SetStatusBar cobj__obj  cobj_statBar  
+foreign import ccall "wxFrame_SetStatusBar" wxFrame_SetStatusBar :: Ptr (TFrame a) -> Ptr (TStatusBar b) -> IO ()
+
+-- | usage: (@frameSetStatusText obj txt number@).
+frameSetStatusText :: Frame  a -> String -> Int ->  IO ()
+frameSetStatusText _obj _txt _number 
+  = withObjectRef "frameSetStatusText" _obj $ \cobj__obj -> 
+    withStringPtr _txt $ \cobj__txt -> 
+    wxFrame_SetStatusText cobj__obj  cobj__txt  (toCInt _number)  
+foreign import ccall "wxFrame_SetStatusText" wxFrame_SetStatusText :: Ptr (TFrame a) -> Ptr (TWxString b) -> CInt -> IO ()
+
+-- | usage: (@frameSetStatusWidths obj n widthsfield@).
+frameSetStatusWidths :: Frame  a -> Int -> Ptr  c ->  IO ()
+frameSetStatusWidths _obj _n _widthsfield 
+  = withObjectRef "frameSetStatusWidths" _obj $ \cobj__obj -> 
+    wxFrame_SetStatusWidths cobj__obj  (toCInt _n)  _widthsfield  
+foreign import ccall "wxFrame_SetStatusWidths" wxFrame_SetStatusWidths :: Ptr (TFrame a) -> CInt -> Ptr  c -> IO ()
+
+-- | usage: (@frameSetTitle frame txt@).
+frameSetTitle :: Frame  a -> String ->  IO ()
+frameSetTitle _frame _txt 
+  = withObjectRef "frameSetTitle" _frame $ \cobj__frame -> 
+    withStringPtr _txt $ \cobj__txt -> 
+    wxFrame_SetTitle cobj__frame  cobj__txt  
+foreign import ccall "wxFrame_SetTitle" wxFrame_SetTitle :: Ptr (TFrame a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@frameSetToolBar obj toolbar@).
+frameSetToolBar :: Frame  a -> ToolBar  b ->  IO ()
+frameSetToolBar _obj _toolbar 
+  = withObjectRef "frameSetToolBar" _obj $ \cobj__obj -> 
+    withObjectPtr _toolbar $ \cobj__toolbar -> 
+    wxFrame_SetToolBar cobj__obj  cobj__toolbar  
+foreign import ccall "wxFrame_SetToolBar" wxFrame_SetToolBar :: Ptr (TFrame a) -> Ptr (TToolBar b) -> IO ()
+
+-- | usage: (@frameShowFullScreen self show style@).
+frameShowFullScreen :: Frame  a -> Bool -> Int ->  IO Bool
+frameShowFullScreen self show style 
+  = withBoolResult $
+    withObjectRef "frameShowFullScreen" self $ \cobj_self -> 
+    wxFrame_ShowFullScreen cobj_self  (toCBool show)  (toCInt style)  
+foreign import ccall "wxFrame_ShowFullScreen" wxFrame_ShowFullScreen :: Ptr (TFrame a) -> CBool -> CInt -> IO CBool
+
+-- | usage: (@gaugeCreate prt id rng lfttopwdthgt stl@).
+gaugeCreate :: Window  a -> Id -> Int -> Rect -> Style ->  IO (Gauge  ())
+gaugeCreate _prt _id _rng _lfttopwdthgt _stl 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    wxGauge_Create cobj__prt  (toCInt _id)  (toCInt _rng)  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
+foreign import ccall "wxGauge_Create" wxGauge_Create :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TGauge ()))
+
+-- | usage: (@gaugeGetBezelFace obj@).
+gaugeGetBezelFace :: Gauge  a ->  IO Int
+gaugeGetBezelFace _obj 
+  = withIntResult $
+    withObjectRef "gaugeGetBezelFace" _obj $ \cobj__obj -> 
+    wxGauge_GetBezelFace cobj__obj  
+foreign import ccall "wxGauge_GetBezelFace" wxGauge_GetBezelFace :: Ptr (TGauge a) -> IO CInt
+
+-- | usage: (@gaugeGetRange obj@).
+gaugeGetRange :: Gauge  a ->  IO Int
+gaugeGetRange _obj 
+  = withIntResult $
+    withObjectRef "gaugeGetRange" _obj $ \cobj__obj -> 
+    wxGauge_GetRange cobj__obj  
+foreign import ccall "wxGauge_GetRange" wxGauge_GetRange :: Ptr (TGauge a) -> IO CInt
+
+-- | usage: (@gaugeGetShadowWidth obj@).
+gaugeGetShadowWidth :: Gauge  a ->  IO Int
+gaugeGetShadowWidth _obj 
+  = withIntResult $
+    withObjectRef "gaugeGetShadowWidth" _obj $ \cobj__obj -> 
+    wxGauge_GetShadowWidth cobj__obj  
+foreign import ccall "wxGauge_GetShadowWidth" wxGauge_GetShadowWidth :: Ptr (TGauge a) -> IO CInt
+
+-- | usage: (@gaugeGetValue obj@).
+gaugeGetValue :: Gauge  a ->  IO Int
+gaugeGetValue _obj 
+  = withIntResult $
+    withObjectRef "gaugeGetValue" _obj $ \cobj__obj -> 
+    wxGauge_GetValue cobj__obj  
+foreign import ccall "wxGauge_GetValue" wxGauge_GetValue :: Ptr (TGauge a) -> IO CInt
+
+-- | usage: (@gaugeSetBezelFace obj w@).
+gaugeSetBezelFace :: Gauge  a -> Int ->  IO ()
+gaugeSetBezelFace _obj w 
+  = withObjectRef "gaugeSetBezelFace" _obj $ \cobj__obj -> 
+    wxGauge_SetBezelFace cobj__obj  (toCInt w)  
+foreign import ccall "wxGauge_SetBezelFace" wxGauge_SetBezelFace :: Ptr (TGauge a) -> CInt -> IO ()
+
+-- | usage: (@gaugeSetRange obj r@).
+gaugeSetRange :: Gauge  a -> Int ->  IO ()
+gaugeSetRange _obj r 
+  = withObjectRef "gaugeSetRange" _obj $ \cobj__obj -> 
+    wxGauge_SetRange cobj__obj  (toCInt r)  
+foreign import ccall "wxGauge_SetRange" wxGauge_SetRange :: Ptr (TGauge a) -> CInt -> IO ()
+
+-- | usage: (@gaugeSetShadowWidth obj w@).
+gaugeSetShadowWidth :: Gauge  a -> Int ->  IO ()
+gaugeSetShadowWidth _obj w 
+  = withObjectRef "gaugeSetShadowWidth" _obj $ \cobj__obj -> 
+    wxGauge_SetShadowWidth cobj__obj  (toCInt w)  
+foreign import ccall "wxGauge_SetShadowWidth" wxGauge_SetShadowWidth :: Ptr (TGauge a) -> CInt -> IO ()
+
+-- | usage: (@gaugeSetValue obj pos@).
+gaugeSetValue :: Gauge  a -> Int ->  IO ()
+gaugeSetValue _obj pos 
+  = withObjectRef "gaugeSetValue" _obj $ \cobj__obj -> 
+    wxGauge_SetValue cobj__obj  (toCInt pos)  
+foreign import ccall "wxGauge_SetValue" wxGauge_SetValue :: Ptr (TGauge a) -> CInt -> IO ()
+
+-- | usage: (@gcdcCreate dc@).
+gcdcCreate :: WindowDC  a ->  IO (GCDC  ())
+gcdcCreate dc 
+  = withObjectResult $
+    withObjectPtr dc $ \cobj_dc -> 
+    wxGcdc_Create cobj_dc  
+foreign import ccall "wxGcdc_Create" wxGcdc_Create :: Ptr (TWindowDC a) -> IO (Ptr (TGCDC ()))
+
+-- | usage: (@gcdcCreateFromMemory dc@).
+gcdcCreateFromMemory :: MemoryDC  a ->  IO (GCDC  ())
+gcdcCreateFromMemory dc 
+  = withObjectResult $
+    withObjectPtr dc $ \cobj_dc -> 
+    wxGcdc_CreateFromMemory cobj_dc  
+foreign import ccall "wxGcdc_CreateFromMemory" wxGcdc_CreateFromMemory :: Ptr (TMemoryDC a) -> IO (Ptr (TGCDC ()))
+
+-- | usage: (@gcdcCreateFromPrinter dc@).
+gcdcCreateFromPrinter :: PrinterDC  a ->  IO (GCDC  ())
+gcdcCreateFromPrinter dc 
+  = withObjectResult $
+    withObjectPtr dc $ \cobj_dc -> 
+    wxGcdc_CreateFromPrinter cobj_dc  
+foreign import ccall "wxGcdc_CreateFromPrinter" wxGcdc_CreateFromPrinter :: Ptr (TPrinterDC a) -> IO (Ptr (TGCDC ()))
+
+-- | usage: (@gcdcDelete self@).
+gcdcDelete :: GCDC  a ->  IO ()
+gcdcDelete self 
+  = withObjectPtr self $ \cobj_self -> 
+    wxGcdc_Delete cobj_self  
+foreign import ccall "wxGcdc_Delete" wxGcdc_Delete :: Ptr (TGCDC a) -> IO ()
+
+-- | usage: (@gcdcGetGraphicsContext self@).
+gcdcGetGraphicsContext :: GCDC  a ->  IO (GraphicsContext  ())
+gcdcGetGraphicsContext self 
+  = withObjectResult $
+    withObjectPtr self $ \cobj_self -> 
+    wxGcdc_GetGraphicsContext cobj_self  
+foreign import ccall "wxGcdc_GetGraphicsContext" wxGcdc_GetGraphicsContext :: Ptr (TGCDC a) -> IO (Ptr (TGraphicsContext ()))
+
+-- | usage: (@gcdcSetGraphicsContext self gc@).
+gcdcSetGraphicsContext :: GCDC  a -> GraphicsContext  b ->  IO ()
+gcdcSetGraphicsContext self gc 
+  = withObjectPtr self $ \cobj_self -> 
+    withObjectPtr gc $ \cobj_gc -> 
+    wxGcdc_SetGraphicsContext cobj_self  cobj_gc  
+foreign import ccall "wxGcdc_SetGraphicsContext" wxGcdc_SetGraphicsContext :: Ptr (TGCDC a) -> Ptr (TGraphicsContext b) -> IO ()
+
+-- | usage: (@genericDragIcon icon@).
+genericDragIcon :: Icon  a ->  IO (GenericDragImage  ())
+genericDragIcon icon 
+  = withObjectResult $
+    withObjectPtr icon $ \cobj_icon -> 
+    wx_wxGenericDragIcon cobj_icon  
+foreign import ccall "wxGenericDragIcon" wx_wxGenericDragIcon :: Ptr (TIcon a) -> IO (Ptr (TGenericDragImage ()))
+
+-- | usage: (@genericDragImageCreate cursor@).
+genericDragImageCreate :: Cursor  a ->  IO (GenericDragImage  ())
+genericDragImageCreate cursor 
+  = withObjectResult $
+    withObjectPtr cursor $ \cobj_cursor -> 
+    wxGenericDragImage_Create cobj_cursor  
+foreign import ccall "wxGenericDragImage_Create" wxGenericDragImage_Create :: Ptr (TCursor a) -> IO (Ptr (TGenericDragImage ()))
+
+-- | usage: (@genericDragImageDoDrawImage self dc xy@).
+genericDragImageDoDrawImage :: GenericDragImage  a -> DC  b -> Point ->  IO Bool
+genericDragImageDoDrawImage self dc xy 
+  = withBoolResult $
+    withObjectRef "genericDragImageDoDrawImage" self $ \cobj_self -> 
+    withObjectPtr dc $ \cobj_dc -> 
+    wxGenericDragImage_DoDrawImage cobj_self  cobj_dc  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxGenericDragImage_DoDrawImage" wxGenericDragImage_DoDrawImage :: Ptr (TGenericDragImage a) -> Ptr (TDC b) -> CInt -> CInt -> IO CBool
+
+-- | usage: (@genericDragImageGetImageRect self xposypos@).
+genericDragImageGetImageRect :: GenericDragImage  a -> Point ->  IO (Rect)
+genericDragImageGetImageRect self xposypos 
+  = withWxRectResult $
+    withObjectRef "genericDragImageGetImageRect" self $ \cobj_self -> 
+    wxGenericDragImage_GetImageRect cobj_self  (toCIntPointX xposypos) (toCIntPointY xposypos)  
+foreign import ccall "wxGenericDragImage_GetImageRect" wxGenericDragImage_GetImageRect :: Ptr (TGenericDragImage a) -> CInt -> CInt -> IO (Ptr (TWxRect ()))
+
+-- | usage: (@genericDragImageUpdateBackingFromWindow self windowDC destDC xywh xdestydestwidthheight@).
+genericDragImageUpdateBackingFromWindow :: GenericDragImage  a -> DC  b -> MemoryDC  c -> Rect -> Rect ->  IO Bool
+genericDragImageUpdateBackingFromWindow self windowDC destDC xywh xdestydestwidthheight 
+  = withBoolResult $
+    withObjectRef "genericDragImageUpdateBackingFromWindow" self $ \cobj_self -> 
+    withObjectPtr windowDC $ \cobj_windowDC -> 
+    withObjectPtr destDC $ \cobj_destDC -> 
+    wxGenericDragImage_UpdateBackingFromWindow cobj_self  cobj_windowDC  cobj_destDC  (toCIntRectX xywh) (toCIntRectY xywh)(toCIntRectW xywh) (toCIntRectH xywh)  (toCIntRectX xdestydestwidthheight) (toCIntRectY xdestydestwidthheight)(toCIntRectW xdestydestwidthheight) (toCIntRectH xdestydestwidthheight)  
+foreign import ccall "wxGenericDragImage_UpdateBackingFromWindow" wxGenericDragImage_UpdateBackingFromWindow :: Ptr (TGenericDragImage a) -> Ptr (TDC b) -> Ptr (TMemoryDC c) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO CBool
+
+-- | usage: (@genericDragListItem treeCtrl id@).
+genericDragListItem :: ListCtrl  a -> Id ->  IO (GenericDragImage  ())
+genericDragListItem treeCtrl id 
+  = withObjectResult $
+    withObjectPtr treeCtrl $ \cobj_treeCtrl -> 
+    wx_wxGenericDragListItem cobj_treeCtrl  (toCInt id)  
+foreign import ccall "wxGenericDragListItem" wx_wxGenericDragListItem :: Ptr (TListCtrl a) -> CInt -> IO (Ptr (TGenericDragImage ()))
+
+-- | usage: (@genericDragString test@).
+genericDragString :: String ->  IO (GenericDragImage  ())
+genericDragString test 
+  = withObjectResult $
+    withStringPtr test $ \cobj_test -> 
+    wx_wxGenericDragString cobj_test  
+foreign import ccall "wxGenericDragString" wx_wxGenericDragString :: Ptr (TWxString a) -> IO (Ptr (TGenericDragImage ()))
+
+-- | usage: (@genericDragTreeItem treeCtrl id@).
+genericDragTreeItem :: TreeCtrl  a -> TreeItem ->  IO (GenericDragImage  ())
+genericDragTreeItem treeCtrl id 
+  = withObjectResult $
+    withObjectPtr treeCtrl $ \cobj_treeCtrl -> 
+    withTreeItemIdPtr id $ \cobj_id -> 
+    wx_wxGenericDragTreeItem cobj_treeCtrl  cobj_id  
+foreign import ccall "wxGenericDragTreeItem" wx_wxGenericDragTreeItem :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> IO (Ptr (TGenericDragImage ()))
+
+-- | usage: (@getApplicationDir@).
+getApplicationDir ::  IO (String)
+getApplicationDir 
+  = withManagedStringResult $
+    wx_wxGetApplicationDir 
+foreign import ccall "wxGetApplicationDir" wx_wxGetApplicationDir :: IO (Ptr (TWxString ()))
+
+-- | usage: (@getApplicationPath@).
+getApplicationPath ::  IO (String)
+getApplicationPath 
+  = withManagedStringResult $
+    wx_wxGetApplicationPath 
+foreign import ccall "wxGetApplicationPath" wx_wxGetApplicationPath :: IO (Ptr (TWxString ()))
+
+-- | usage: (@getColourFromUser parent colInit@).
+getColourFromUser :: Window  a -> Color ->  IO (Color)
+getColourFromUser parent colInit 
+  = withRefColour $ \pref -> 
+    withObjectPtr parent $ \cobj_parent -> 
+    withColourPtr colInit $ \cobj_colInit -> 
+    wx_wxGetColourFromUser cobj_parent  cobj_colInit   pref
+foreign import ccall "wxGetColourFromUser" wx_wxGetColourFromUser :: Ptr (TWindow a) -> Ptr (TColour b) -> Ptr (TColour ()) -> IO ()
+
+-- | usage: (@getELJLocale@).
+getELJLocale ::  IO (WXCLocale  ())
+getELJLocale 
+  = withObjectResult $
+    wx_wxGetELJLocale 
+foreign import ccall "wxGetELJLocale" wx_wxGetELJLocale :: IO (Ptr (TWXCLocale ()))
+
+-- | usage: (@getELJTranslation sz@).
+getELJTranslation :: String ->  IO (Ptr  ())
+getELJTranslation sz 
+  = withCWString sz $ \cstr_sz -> 
+    wx_wxGetELJTranslation cstr_sz  
+foreign import ccall "wxGetELJTranslation" wx_wxGetELJTranslation :: CWString -> IO (Ptr  ())
+
+-- | usage: (@getFontFromUser parent fontInit@).
+getFontFromUser :: Window  a -> Font  b ->  IO (Font  ())
+getFontFromUser parent fontInit 
+  = withRefFont $ \pref -> 
+    withObjectPtr parent $ \cobj_parent -> 
+    withObjectPtr fontInit $ \cobj_fontInit -> 
+    wx_wxGetFontFromUser cobj_parent  cobj_fontInit   pref
+foreign import ccall "wxGetFontFromUser" wx_wxGetFontFromUser :: Ptr (TWindow a) -> Ptr (TFont b) -> Ptr (TFont ()) -> IO ()
+
+-- | usage: (@getNumberFromUser message prompt caption value min max parent xy@).
+getNumberFromUser :: String -> String -> String -> Int -> Int -> Int -> Window  g -> Point ->  IO Int
+getNumberFromUser message prompt caption value min max parent xy 
+  = withIntResult $
+    withStringPtr message $ \cobj_message -> 
+    withStringPtr prompt $ \cobj_prompt -> 
+    withStringPtr caption $ \cobj_caption -> 
+    withObjectPtr parent $ \cobj_parent -> 
+    wx_wxGetNumberFromUser cobj_message  cobj_prompt  cobj_caption  (toCInt value)  (toCInt min)  (toCInt max)  cobj_parent  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxGetNumberFromUser" wx_wxGetNumberFromUser :: Ptr (TWxString a) -> Ptr (TWxString b) -> Ptr (TWxString c) -> CInt -> CInt -> CInt -> Ptr (TWindow g) -> CInt -> CInt -> IO CInt
+
+-- | usage: (@getPasswordFromUser message caption defaultText parent@).
+getPasswordFromUser :: String -> String -> String -> Window  d ->  IO String
+getPasswordFromUser message caption defaultText parent 
+  = withWStringResult $ \buffer -> 
+    withCWString message $ \cstr_message -> 
+    withCWString caption $ \cstr_caption -> 
+    withCWString defaultText $ \cstr_defaultText -> 
+    withObjectPtr parent $ \cobj_parent -> 
+    wx_wxGetPasswordFromUser cstr_message  cstr_caption  cstr_defaultText  cobj_parent   buffer
+foreign import ccall "wxGetPasswordFromUser" wx_wxGetPasswordFromUser :: CWString -> CWString -> CWString -> Ptr (TWindow d) -> Ptr CWchar -> IO CInt
+
+-- | usage: (@getTextFromUser message caption defaultText parent xy center@).
+getTextFromUser :: String -> String -> String -> Window  d -> Point -> Bool ->  IO String
+getTextFromUser message caption defaultText parent xy center 
+  = withWStringResult $ \buffer -> 
+    withCWString message $ \cstr_message -> 
+    withCWString caption $ \cstr_caption -> 
+    withCWString defaultText $ \cstr_defaultText -> 
+    withObjectPtr parent $ \cobj_parent -> 
+    wx_wxGetTextFromUser cstr_message  cstr_caption  cstr_defaultText  cobj_parent  (toCIntPointX xy) (toCIntPointY xy)  (toCBool center)   buffer
+foreign import ccall "wxGetTextFromUser" wx_wxGetTextFromUser :: CWString -> CWString -> CWString -> Ptr (TWindow d) -> CInt -> CInt -> CBool -> Ptr CWchar -> IO CInt
+
+-- | usage: (@glCanvasCreate parent windowID attributes xywh stl title palette@).
+glCanvasCreate :: Window  a -> Int -> Ptr CInt -> Rect -> Style -> String -> Palette  g ->  IO (GLCanvas  ())
+glCanvasCreate parent windowID attributes xywh _stl title palette 
+  = withObjectResult $
+    withObjectPtr parent $ \cobj_parent -> 
+    withStringPtr title $ \cobj_title -> 
+    withObjectPtr palette $ \cobj_palette -> 
+    wxGLCanvas_Create cobj_parent  (toCInt windowID)  attributes  (toCIntRectX xywh) (toCIntRectY xywh)(toCIntRectW xywh) (toCIntRectH xywh)  (toCInt _stl)  cobj_title  cobj_palette  
+foreign import ccall "wxGLCanvas_Create" wxGLCanvas_Create :: Ptr (TWindow a) -> CInt -> Ptr CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> Ptr (TWxString f) -> Ptr (TPalette g) -> IO (Ptr (TGLCanvas ()))
+
+-- | usage: (@glCanvasIsDisplaySupported attributes@).
+glCanvasIsDisplaySupported :: Ptr CInt ->  IO Bool
+glCanvasIsDisplaySupported attributes 
+  = withBoolResult $
+    wxGLCanvas_IsDisplaySupported attributes  
+foreign import ccall "wxGLCanvas_IsDisplaySupported" wxGLCanvas_IsDisplaySupported :: Ptr CInt -> IO CBool
+
+-- | usage: (@glCanvasIsExtensionSupported extension@).
+glCanvasIsExtensionSupported :: String ->  IO Bool
+glCanvasIsExtensionSupported extension 
+  = withBoolResult $
+    withStringPtr extension $ \cobj_extension -> 
+    wxGLCanvas_IsExtensionSupported cobj_extension  
+foreign import ccall "wxGLCanvas_IsExtensionSupported" wxGLCanvas_IsExtensionSupported :: Ptr (TWxString a) -> IO CBool
+
+-- | usage: (@glCanvasSetColour self colour@).
+glCanvasSetColour :: GLCanvas  a -> Color ->  IO Bool
+glCanvasSetColour self colour 
+  = withBoolResult $
+    withObjectRef "glCanvasSetColour" self $ \cobj_self -> 
+    withColourPtr colour $ \cobj_colour -> 
+    wxGLCanvas_SetColour cobj_self  cobj_colour  
+foreign import ccall "wxGLCanvas_SetColour" wxGLCanvas_SetColour :: Ptr (TGLCanvas a) -> Ptr (TColour b) -> IO CBool
+
+-- | usage: (@glCanvasSetCurrent self ctxt@).
+glCanvasSetCurrent :: GLCanvas  a -> GLContext  b ->  IO Bool
+glCanvasSetCurrent self ctxt 
+  = withBoolResult $
+    withObjectRef "glCanvasSetCurrent" self $ \cobj_self -> 
+    withObjectPtr ctxt $ \cobj_ctxt -> 
+    wxGLCanvas_SetCurrent cobj_self  cobj_ctxt  
+foreign import ccall "wxGLCanvas_SetCurrent" wxGLCanvas_SetCurrent :: Ptr (TGLCanvas a) -> Ptr (TGLContext b) -> IO CBool
+
+-- | usage: (@glCanvasSwapBuffers self@).
+glCanvasSwapBuffers :: GLCanvas  a ->  IO Bool
+glCanvasSwapBuffers self 
+  = withBoolResult $
+    withObjectRef "glCanvasSwapBuffers" self $ \cobj_self -> 
+    wxGLCanvas_SwapBuffers cobj_self  
+foreign import ccall "wxGLCanvas_SwapBuffers" wxGLCanvas_SwapBuffers :: Ptr (TGLCanvas a) -> IO CBool
+
+-- | usage: (@glContextCreate win other@).
+glContextCreate :: GLCanvas  a -> GLContext  b ->  IO (GLContext  ())
+glContextCreate win other 
+  = withObjectResult $
+    withObjectPtr win $ \cobj_win -> 
+    withObjectPtr other $ \cobj_other -> 
+    wxGLContext_Create cobj_win  cobj_other  
+foreign import ccall "wxGLContext_Create" wxGLContext_Create :: Ptr (TGLCanvas a) -> Ptr (TGLContext b) -> IO (Ptr (TGLContext ()))
+
+-- | usage: (@glContextCreateFromNull win@).
+glContextCreateFromNull :: GLCanvas  a ->  IO (GLContext  ())
+glContextCreateFromNull win 
+  = withObjectResult $
+    withObjectPtr win $ \cobj_win -> 
+    wxGLContext_CreateFromNull cobj_win  
+foreign import ccall "wxGLContext_CreateFromNull" wxGLContext_CreateFromNull :: Ptr (TGLCanvas a) -> IO (Ptr (TGLContext ()))
+
+-- | usage: (@glContextSetCurrent self win@).
+glContextSetCurrent :: GLContext  a -> GLCanvas  b ->  IO Bool
+glContextSetCurrent self win 
+  = withBoolResult $
+    withObjectRef "glContextSetCurrent" self $ \cobj_self -> 
+    withObjectPtr win $ \cobj_win -> 
+    wxGLContext_SetCurrent cobj_self  cobj_win  
+foreign import ccall "wxGLContext_SetCurrent" wxGLContext_SetCurrent :: Ptr (TGLContext a) -> Ptr (TGLCanvas b) -> IO CBool
+
+-- | usage: (@graphicsBrushCreate@).
+graphicsBrushCreate ::  IO (GraphicsBrush  ())
+graphicsBrushCreate 
+  = withObjectResult $
+    wxGraphicsBrush_Create 
+foreign import ccall "wxGraphicsBrush_Create" wxGraphicsBrush_Create :: IO (Ptr (TGraphicsBrush ()))
+
+-- | usage: (@graphicsBrushDelete self@).
+graphicsBrushDelete :: GraphicsBrush  a ->  IO ()
+graphicsBrushDelete
+  = objectDelete
+
+
+-- | usage: (@graphicsContextClip self region@).
+graphicsContextClip :: GraphicsContext  a -> Region  b ->  IO ()
+graphicsContextClip self region 
+  = withObjectRef "graphicsContextClip" self $ \cobj_self -> 
+    withObjectPtr region $ \cobj_region -> 
+    wxGraphicsContext_Clip cobj_self  cobj_region  
+foreign import ccall "wxGraphicsContext_Clip" wxGraphicsContext_Clip :: Ptr (TGraphicsContext a) -> Ptr (TRegion b) -> IO ()
+
+-- | usage: (@graphicsContextClipByRectangle self xywh@).
+graphicsContextClipByRectangle :: GraphicsContext  a -> (Rect2D Double) ->  IO ()
+graphicsContextClipByRectangle self xywh 
+  = withObjectRef "graphicsContextClipByRectangle" self $ \cobj_self -> 
+    wxGraphicsContext_ClipByRectangle cobj_self  (toCDoubleRectX xywh) (toCDoubleRectY xywh)(toCDoubleRectW xywh) (toCDoubleRectH xywh)  
+foreign import ccall "wxGraphicsContext_ClipByRectangle" wxGraphicsContext_ClipByRectangle :: Ptr (TGraphicsContext a) -> CDouble -> CDouble -> CDouble -> CDouble -> IO ()
+
+-- | usage: (@graphicsContextConcatTransform self path@).
+graphicsContextConcatTransform :: GraphicsContext  a -> GraphicsMatrix  b ->  IO ()
+graphicsContextConcatTransform self path 
+  = withObjectRef "graphicsContextConcatTransform" self $ \cobj_self -> 
+    withObjectPtr path $ \cobj_path -> 
+    wxGraphicsContext_ConcatTransform cobj_self  cobj_path  
+foreign import ccall "wxGraphicsContext_ConcatTransform" wxGraphicsContext_ConcatTransform :: Ptr (TGraphicsContext a) -> Ptr (TGraphicsMatrix b) -> IO ()
+
+-- | usage: (@graphicsContextCreate dc@).
+graphicsContextCreate :: WindowDC  a ->  IO (GraphicsContext  ())
+graphicsContextCreate dc 
+  = withObjectResult $
+    withObjectPtr dc $ \cobj_dc -> 
+    wxGraphicsContext_Create cobj_dc  
+foreign import ccall "wxGraphicsContext_Create" wxGraphicsContext_Create :: Ptr (TWindowDC a) -> IO (Ptr (TGraphicsContext ()))
+
+-- | usage: (@graphicsContextCreateDefaultMatrix self@).
+graphicsContextCreateDefaultMatrix :: GraphicsContext  a ->  IO (GraphicsMatrix  ())
+graphicsContextCreateDefaultMatrix self 
+  = withObjectResult $
+    withObjectRef "graphicsContextCreateDefaultMatrix" self $ \cobj_self -> 
+    wxGraphicsContext_CreateDefaultMatrix cobj_self  
+foreign import ccall "wxGraphicsContext_CreateDefaultMatrix" wxGraphicsContext_CreateDefaultMatrix :: Ptr (TGraphicsContext a) -> IO (Ptr (TGraphicsMatrix ()))
+
+-- | usage: (@graphicsContextCreateFromMemory dc@).
+graphicsContextCreateFromMemory :: MemoryDC  a ->  IO (GraphicsContext  ())
+graphicsContextCreateFromMemory dc 
+  = withObjectResult $
+    withObjectPtr dc $ \cobj_dc -> 
+    wxGraphicsContext_CreateFromMemory cobj_dc  
+foreign import ccall "wxGraphicsContext_CreateFromMemory" wxGraphicsContext_CreateFromMemory :: Ptr (TMemoryDC a) -> IO (Ptr (TGraphicsContext ()))
+
+-- | usage: (@graphicsContextCreateFromNative context@).
+graphicsContextCreateFromNative :: GraphicsContext  a ->  IO (GraphicsContext  ())
+graphicsContextCreateFromNative context 
+  = withObjectResult $
+    withObjectRef "graphicsContextCreateFromNative" context $ \cobj_context -> 
+    wxGraphicsContext_CreateFromNative cobj_context  
+foreign import ccall "wxGraphicsContext_CreateFromNative" wxGraphicsContext_CreateFromNative :: Ptr (TGraphicsContext a) -> IO (Ptr (TGraphicsContext ()))
+
+-- | usage: (@graphicsContextCreateFromNativeWindow window@).
+graphicsContextCreateFromNativeWindow :: Window  a ->  IO (GraphicsContext  ())
+graphicsContextCreateFromNativeWindow window 
+  = withObjectResult $
+    withObjectPtr window $ \cobj_window -> 
+    wxGraphicsContext_CreateFromNativeWindow cobj_window  
+foreign import ccall "wxGraphicsContext_CreateFromNativeWindow" wxGraphicsContext_CreateFromNativeWindow :: Ptr (TWindow a) -> IO (Ptr (TGraphicsContext ()))
+
+-- | usage: (@graphicsContextCreateFromPrinter dc@).
+graphicsContextCreateFromPrinter :: PrinterDC  a ->  IO (GraphicsContext  ())
+graphicsContextCreateFromPrinter dc 
+  = withObjectResult $
+    withObjectPtr dc $ \cobj_dc -> 
+    wxGraphicsContext_CreateFromPrinter cobj_dc  
+foreign import ccall "wxGraphicsContext_CreateFromPrinter" wxGraphicsContext_CreateFromPrinter :: Ptr (TPrinterDC a) -> IO (Ptr (TGraphicsContext ()))
+
+-- | usage: (@graphicsContextCreateFromWindow window@).
+graphicsContextCreateFromWindow :: Window  a ->  IO (GraphicsContext  ())
+graphicsContextCreateFromWindow window 
+  = withObjectResult $
+    withObjectPtr window $ \cobj_window -> 
+    wxGraphicsContext_CreateFromWindow cobj_window  
+foreign import ccall "wxGraphicsContext_CreateFromWindow" wxGraphicsContext_CreateFromWindow :: Ptr (TWindow a) -> IO (Ptr (TGraphicsContext ()))
+
+-- | usage: (@graphicsContextCreateMatrix self a b c d tx ty@).
+graphicsContextCreateMatrix :: GraphicsContext  a -> Double -> Double -> Double -> Double -> Double -> Double ->  IO (GraphicsMatrix  ())
+graphicsContextCreateMatrix self a b c d tx ty 
+  = withObjectResult $
+    withObjectRef "graphicsContextCreateMatrix" self $ \cobj_self -> 
+    wxGraphicsContext_CreateMatrix cobj_self  a  b  c  d  tx  ty  
+foreign import ccall "wxGraphicsContext_CreateMatrix" wxGraphicsContext_CreateMatrix :: Ptr (TGraphicsContext a) -> Double -> Double -> Double -> Double -> Double -> Double -> IO (Ptr (TGraphicsMatrix ()))
+
+-- | usage: (@graphicsContextCreatePath self@).
+graphicsContextCreatePath :: GraphicsContext  a ->  IO (GraphicsPath  ())
+graphicsContextCreatePath self 
+  = withObjectResult $
+    withObjectRef "graphicsContextCreatePath" self $ \cobj_self -> 
+    wxGraphicsContext_CreatePath cobj_self  
+foreign import ccall "wxGraphicsContext_CreatePath" wxGraphicsContext_CreatePath :: Ptr (TGraphicsContext a) -> IO (Ptr (TGraphicsPath ()))
+
+-- | usage: (@graphicsContextDelete self@).
+graphicsContextDelete :: GraphicsContext  a ->  IO ()
+graphicsContextDelete
+  = objectDelete
+
+
+-- | usage: (@graphicsContextDrawBitmap self bmp xywh@).
+graphicsContextDrawBitmap :: GraphicsContext  a -> Bitmap  b -> (Rect2D Double) ->  IO ()
+graphicsContextDrawBitmap self bmp xywh 
+  = withObjectRef "graphicsContextDrawBitmap" self $ \cobj_self -> 
+    withObjectPtr bmp $ \cobj_bmp -> 
+    wxGraphicsContext_DrawBitmap cobj_self  cobj_bmp  (toCDoubleRectX xywh) (toCDoubleRectY xywh)(toCDoubleRectW xywh) (toCDoubleRectH xywh)  
+foreign import ccall "wxGraphicsContext_DrawBitmap" wxGraphicsContext_DrawBitmap :: Ptr (TGraphicsContext a) -> Ptr (TBitmap b) -> CDouble -> CDouble -> CDouble -> CDouble -> IO ()
+
+-- | usage: (@graphicsContextDrawEllipse self xywh@).
+graphicsContextDrawEllipse :: GraphicsContext  a -> (Rect2D Double) ->  IO ()
+graphicsContextDrawEllipse self xywh 
+  = withObjectRef "graphicsContextDrawEllipse" self $ \cobj_self -> 
+    wxGraphicsContext_DrawEllipse cobj_self  (toCDoubleRectX xywh) (toCDoubleRectY xywh)(toCDoubleRectW xywh) (toCDoubleRectH xywh)  
+foreign import ccall "wxGraphicsContext_DrawEllipse" wxGraphicsContext_DrawEllipse :: Ptr (TGraphicsContext a) -> CDouble -> CDouble -> CDouble -> CDouble -> IO ()
+
+-- | usage: (@graphicsContextDrawIcon self icon xywh@).
+graphicsContextDrawIcon :: GraphicsContext  a -> Icon  b -> (Rect2D Double) ->  IO ()
+graphicsContextDrawIcon self icon xywh 
+  = withObjectRef "graphicsContextDrawIcon" self $ \cobj_self -> 
+    withObjectPtr icon $ \cobj_icon -> 
+    wxGraphicsContext_DrawIcon cobj_self  cobj_icon  (toCDoubleRectX xywh) (toCDoubleRectY xywh)(toCDoubleRectW xywh) (toCDoubleRectH xywh)  
+foreign import ccall "wxGraphicsContext_DrawIcon" wxGraphicsContext_DrawIcon :: Ptr (TGraphicsContext a) -> Ptr (TIcon b) -> CDouble -> CDouble -> CDouble -> CDouble -> IO ()
+
+-- | usage: (@graphicsContextDrawLines self n x y style@).
+graphicsContextDrawLines :: GraphicsContext  a -> Int -> Ptr  c -> Ptr  d -> Int ->  IO ()
+graphicsContextDrawLines self n x y style 
+  = withObjectRef "graphicsContextDrawLines" self $ \cobj_self -> 
+    wxGraphicsContext_DrawLines cobj_self  (toCInt n)  x  y  (toCInt style)  
+foreign import ccall "wxGraphicsContext_DrawLines" wxGraphicsContext_DrawLines :: Ptr (TGraphicsContext a) -> CInt -> Ptr  c -> Ptr  d -> CInt -> IO ()
+
+-- | usage: (@graphicsContextDrawPath self path style@).
+graphicsContextDrawPath :: GraphicsContext  a -> GraphicsPath  b -> Int ->  IO ()
+graphicsContextDrawPath self path style 
+  = withObjectRef "graphicsContextDrawPath" self $ \cobj_self -> 
+    withObjectPtr path $ \cobj_path -> 
+    wxGraphicsContext_DrawPath cobj_self  cobj_path  (toCInt style)  
+foreign import ccall "wxGraphicsContext_DrawPath" wxGraphicsContext_DrawPath :: Ptr (TGraphicsContext a) -> Ptr (TGraphicsPath b) -> CInt -> IO ()
+
+-- | usage: (@graphicsContextDrawRectangle self xywh@).
+graphicsContextDrawRectangle :: GraphicsContext  a -> (Rect2D Double) ->  IO ()
+graphicsContextDrawRectangle self xywh 
+  = withObjectRef "graphicsContextDrawRectangle" self $ \cobj_self -> 
+    wxGraphicsContext_DrawRectangle cobj_self  (toCDoubleRectX xywh) (toCDoubleRectY xywh)(toCDoubleRectW xywh) (toCDoubleRectH xywh)  
+foreign import ccall "wxGraphicsContext_DrawRectangle" wxGraphicsContext_DrawRectangle :: Ptr (TGraphicsContext a) -> CDouble -> CDouble -> CDouble -> CDouble -> IO ()
+
+-- | usage: (@graphicsContextDrawRoundedRectangle self xywh radius@).
+graphicsContextDrawRoundedRectangle :: GraphicsContext  a -> (Rect2D Double) -> Double ->  IO ()
+graphicsContextDrawRoundedRectangle self xywh radius 
+  = withObjectRef "graphicsContextDrawRoundedRectangle" self $ \cobj_self -> 
+    wxGraphicsContext_DrawRoundedRectangle cobj_self  (toCDoubleRectX xywh) (toCDoubleRectY xywh)(toCDoubleRectW xywh) (toCDoubleRectH xywh)  radius  
+foreign import ccall "wxGraphicsContext_DrawRoundedRectangle" wxGraphicsContext_DrawRoundedRectangle :: Ptr (TGraphicsContext a) -> CDouble -> CDouble -> CDouble -> CDouble -> Double -> IO ()
+
+-- | usage: (@graphicsContextDrawText self text xy@).
+graphicsContextDrawText :: GraphicsContext  a -> String -> (Point2 Double) ->  IO ()
+graphicsContextDrawText self text xy 
+  = withObjectRef "graphicsContextDrawText" self $ \cobj_self -> 
+    withStringPtr text $ \cobj_text -> 
+    wxGraphicsContext_DrawText cobj_self  cobj_text  (toCDoublePointX xy) (toCDoublePointY xy)  
+foreign import ccall "wxGraphicsContext_DrawText" wxGraphicsContext_DrawText :: Ptr (TGraphicsContext a) -> Ptr (TWxString b) -> CDouble -> CDouble -> IO ()
+
+-- | usage: (@graphicsContextDrawTextWithAngle self text xy radius@).
+graphicsContextDrawTextWithAngle :: GraphicsContext  a -> String -> (Point2 Double) -> Double ->  IO ()
+graphicsContextDrawTextWithAngle self text xy radius 
+  = withObjectRef "graphicsContextDrawTextWithAngle" self $ \cobj_self -> 
+    withStringPtr text $ \cobj_text -> 
+    wxGraphicsContext_DrawTextWithAngle cobj_self  cobj_text  (toCDoublePointX xy) (toCDoublePointY xy)  radius  
+foreign import ccall "wxGraphicsContext_DrawTextWithAngle" wxGraphicsContext_DrawTextWithAngle :: Ptr (TGraphicsContext a) -> Ptr (TWxString b) -> CDouble -> CDouble -> Double -> IO ()
+
+-- | usage: (@graphicsContextFillPath self path style@).
+graphicsContextFillPath :: GraphicsContext  a -> GraphicsPath  b -> Int ->  IO ()
+graphicsContextFillPath self path style 
+  = withObjectRef "graphicsContextFillPath" self $ \cobj_self -> 
+    withObjectPtr path $ \cobj_path -> 
+    wxGraphicsContext_FillPath cobj_self  cobj_path  (toCInt style)  
+foreign import ccall "wxGraphicsContext_FillPath" wxGraphicsContext_FillPath :: Ptr (TGraphicsContext a) -> Ptr (TGraphicsPath b) -> CInt -> IO ()
+
+-- | usage: (@graphicsContextGetNativeContext self@).
+graphicsContextGetNativeContext :: GraphicsContext  a ->  IO (Ptr  ())
+graphicsContextGetNativeContext self 
+  = withObjectRef "graphicsContextGetNativeContext" self $ \cobj_self -> 
+    wxGraphicsContext_GetNativeContext cobj_self  
+foreign import ccall "wxGraphicsContext_GetNativeContext" wxGraphicsContext_GetNativeContext :: Ptr (TGraphicsContext a) -> IO (Ptr  ())
+
+-- | usage: (@graphicsContextGetTextExtent self text width height descent externalLeading@).
+graphicsContextGetTextExtent :: GraphicsContext  a -> String -> Ptr Double -> Ptr Double -> Ptr Double -> Ptr Double ->  IO ()
+graphicsContextGetTextExtent self text width height descent externalLeading 
+  = withObjectRef "graphicsContextGetTextExtent" self $ \cobj_self -> 
+    withStringPtr text $ \cobj_text -> 
+    wxGraphicsContext_GetTextExtent cobj_self  cobj_text  width  height  descent  externalLeading  
+foreign import ccall "wxGraphicsContext_GetTextExtent" wxGraphicsContext_GetTextExtent :: Ptr (TGraphicsContext a) -> Ptr (TWxString b) -> Ptr Double -> Ptr Double -> Ptr Double -> Ptr Double -> IO ()
+
+-- | usage: (@graphicsContextPopState self@).
+graphicsContextPopState :: GraphicsContext  a ->  IO ()
+graphicsContextPopState self 
+  = withObjectRef "graphicsContextPopState" self $ \cobj_self -> 
+    wxGraphicsContext_PopState cobj_self  
+foreign import ccall "wxGraphicsContext_PopState" wxGraphicsContext_PopState :: Ptr (TGraphicsContext a) -> IO ()
+
+-- | usage: (@graphicsContextPushState self@).
+graphicsContextPushState :: GraphicsContext  a ->  IO ()
+graphicsContextPushState self 
+  = withObjectRef "graphicsContextPushState" self $ \cobj_self -> 
+    wxGraphicsContext_PushState cobj_self  
+foreign import ccall "wxGraphicsContext_PushState" wxGraphicsContext_PushState :: Ptr (TGraphicsContext a) -> IO ()
+
+-- | usage: (@graphicsContextResetClip self@).
+graphicsContextResetClip :: GraphicsContext  a ->  IO ()
+graphicsContextResetClip self 
+  = withObjectRef "graphicsContextResetClip" self $ \cobj_self -> 
+    wxGraphicsContext_ResetClip cobj_self  
+foreign import ccall "wxGraphicsContext_ResetClip" wxGraphicsContext_ResetClip :: Ptr (TGraphicsContext a) -> IO ()
+
+-- | usage: (@graphicsContextRotate self angle@).
+graphicsContextRotate :: GraphicsContext  a -> Double ->  IO ()
+graphicsContextRotate self angle 
+  = withObjectRef "graphicsContextRotate" self $ \cobj_self -> 
+    wxGraphicsContext_Rotate cobj_self  angle  
+foreign import ccall "wxGraphicsContext_Rotate" wxGraphicsContext_Rotate :: Ptr (TGraphicsContext a) -> Double -> IO ()
+
+-- | usage: (@graphicsContextScale self xScaleyScale@).
+graphicsContextScale :: GraphicsContext  a -> (Size2D Double) ->  IO ()
+graphicsContextScale self xScaleyScale 
+  = withObjectRef "graphicsContextScale" self $ \cobj_self -> 
+    wxGraphicsContext_Scale cobj_self  (toCDoubleSizeW xScaleyScale) (toCDoubleSizeH xScaleyScale)  
+foreign import ccall "wxGraphicsContext_Scale" wxGraphicsContext_Scale :: Ptr (TGraphicsContext a) -> CDouble -> CDouble -> IO ()
+
+-- | usage: (@graphicsContextSetBrush self brush@).
+graphicsContextSetBrush :: GraphicsContext  a -> Brush  b ->  IO ()
+graphicsContextSetBrush self brush 
+  = withObjectRef "graphicsContextSetBrush" self $ \cobj_self -> 
+    withObjectPtr brush $ \cobj_brush -> 
+    wxGraphicsContext_SetBrush cobj_self  cobj_brush  
+foreign import ccall "wxGraphicsContext_SetBrush" wxGraphicsContext_SetBrush :: Ptr (TGraphicsContext a) -> Ptr (TBrush b) -> IO ()
+
+-- | usage: (@graphicsContextSetFont self font colour@).
+graphicsContextSetFont :: GraphicsContext  a -> Font  b -> Color ->  IO ()
+graphicsContextSetFont self font colour 
+  = withObjectRef "graphicsContextSetFont" self $ \cobj_self -> 
+    withObjectPtr font $ \cobj_font -> 
+    withColourPtr colour $ \cobj_colour -> 
+    wxGraphicsContext_SetFont cobj_self  cobj_font  cobj_colour  
+foreign import ccall "wxGraphicsContext_SetFont" wxGraphicsContext_SetFont :: Ptr (TGraphicsContext a) -> Ptr (TFont b) -> Ptr (TColour c) -> IO ()
+
+-- | usage: (@graphicsContextSetGraphicsBrush self brush@).
+graphicsContextSetGraphicsBrush :: GraphicsContext  a -> GraphicsBrush  b ->  IO ()
+graphicsContextSetGraphicsBrush self brush 
+  = withObjectRef "graphicsContextSetGraphicsBrush" self $ \cobj_self -> 
+    withObjectPtr brush $ \cobj_brush -> 
+    wxGraphicsContext_SetGraphicsBrush cobj_self  cobj_brush  
+foreign import ccall "wxGraphicsContext_SetGraphicsBrush" wxGraphicsContext_SetGraphicsBrush :: Ptr (TGraphicsContext a) -> Ptr (TGraphicsBrush b) -> IO ()
+
+-- | usage: (@graphicsContextSetGraphicsFont self font@).
+graphicsContextSetGraphicsFont :: GraphicsContext  a -> GraphicsFont  b ->  IO ()
+graphicsContextSetGraphicsFont self font 
+  = withObjectRef "graphicsContextSetGraphicsFont" self $ \cobj_self -> 
+    withObjectPtr font $ \cobj_font -> 
+    wxGraphicsContext_SetGraphicsFont cobj_self  cobj_font  
+foreign import ccall "wxGraphicsContext_SetGraphicsFont" wxGraphicsContext_SetGraphicsFont :: Ptr (TGraphicsContext a) -> Ptr (TGraphicsFont b) -> IO ()
+
+-- | usage: (@graphicsContextSetGraphicsPen self pen@).
+graphicsContextSetGraphicsPen :: GraphicsContext  a -> GraphicsPen  b ->  IO ()
+graphicsContextSetGraphicsPen self pen 
+  = withObjectRef "graphicsContextSetGraphicsPen" self $ \cobj_self -> 
+    withObjectPtr pen $ \cobj_pen -> 
+    wxGraphicsContext_SetGraphicsPen cobj_self  cobj_pen  
+foreign import ccall "wxGraphicsContext_SetGraphicsPen" wxGraphicsContext_SetGraphicsPen :: Ptr (TGraphicsContext a) -> Ptr (TGraphicsPen b) -> IO ()
+
+-- | usage: (@graphicsContextSetPen self pen@).
+graphicsContextSetPen :: GraphicsContext  a -> Pen  b ->  IO ()
+graphicsContextSetPen self pen 
+  = withObjectRef "graphicsContextSetPen" self $ \cobj_self -> 
+    withObjectPtr pen $ \cobj_pen -> 
+    wxGraphicsContext_SetPen cobj_self  cobj_pen  
+foreign import ccall "wxGraphicsContext_SetPen" wxGraphicsContext_SetPen :: Ptr (TGraphicsContext a) -> Ptr (TPen b) -> IO ()
+
+-- | usage: (@graphicsContextSetTransform self path@).
+graphicsContextSetTransform :: GraphicsContext  a -> GraphicsMatrix  b ->  IO ()
+graphicsContextSetTransform self path 
+  = withObjectRef "graphicsContextSetTransform" self $ \cobj_self -> 
+    withObjectPtr path $ \cobj_path -> 
+    wxGraphicsContext_SetTransform cobj_self  cobj_path  
+foreign import ccall "wxGraphicsContext_SetTransform" wxGraphicsContext_SetTransform :: Ptr (TGraphicsContext a) -> Ptr (TGraphicsMatrix b) -> IO ()
+
+-- | usage: (@graphicsContextStrokeLine self x1y1 x2y2@).
+graphicsContextStrokeLine :: GraphicsContext  a -> (Point2 Double) -> (Point2 Double) ->  IO ()
+graphicsContextStrokeLine self x1y1 x2y2 
+  = withObjectRef "graphicsContextStrokeLine" self $ \cobj_self -> 
+    wxGraphicsContext_StrokeLine cobj_self  (toCDoublePointX x1y1) (toCDoublePointY x1y1)  (toCDoublePointX x2y2) (toCDoublePointY x2y2)  
+foreign import ccall "wxGraphicsContext_StrokeLine" wxGraphicsContext_StrokeLine :: Ptr (TGraphicsContext a) -> CDouble -> CDouble -> CDouble -> CDouble -> IO ()
+
+-- | usage: (@graphicsContextStrokeLines self n x y style@).
+graphicsContextStrokeLines :: GraphicsContext  a -> Int -> Ptr  c -> Ptr  d -> Int ->  IO ()
+graphicsContextStrokeLines self n x y style 
+  = withObjectRef "graphicsContextStrokeLines" self $ \cobj_self -> 
+    wxGraphicsContext_StrokeLines cobj_self  (toCInt n)  x  y  (toCInt style)  
+foreign import ccall "wxGraphicsContext_StrokeLines" wxGraphicsContext_StrokeLines :: Ptr (TGraphicsContext a) -> CInt -> Ptr  c -> Ptr  d -> CInt -> IO ()
+
+-- | usage: (@graphicsContextStrokePath self path@).
+graphicsContextStrokePath :: GraphicsContext  a -> GraphicsPath  b ->  IO ()
+graphicsContextStrokePath self path 
+  = withObjectRef "graphicsContextStrokePath" self $ \cobj_self -> 
+    withObjectPtr path $ \cobj_path -> 
+    wxGraphicsContext_StrokePath cobj_self  cobj_path  
+foreign import ccall "wxGraphicsContext_StrokePath" wxGraphicsContext_StrokePath :: Ptr (TGraphicsContext a) -> Ptr (TGraphicsPath b) -> IO ()
+
+-- | usage: (@graphicsContextTranslate self dx dy@).
+graphicsContextTranslate :: GraphicsContext  a -> Double -> Double ->  IO ()
+graphicsContextTranslate self dx dy 
+  = withObjectRef "graphicsContextTranslate" self $ \cobj_self -> 
+    wxGraphicsContext_Translate cobj_self  dx  dy  
+foreign import ccall "wxGraphicsContext_Translate" wxGraphicsContext_Translate :: Ptr (TGraphicsContext a) -> Double -> Double -> IO ()
+
+-- | usage: (@graphicsFontCreate@).
+graphicsFontCreate ::  IO (GraphicsFont  ())
+graphicsFontCreate 
+  = withObjectResult $
+    wxGraphicsFont_Create 
+foreign import ccall "wxGraphicsFont_Create" wxGraphicsFont_Create :: IO (Ptr (TGraphicsFont ()))
+
+-- | usage: (@graphicsFontDelete self@).
+graphicsFontDelete :: GraphicsFont  a ->  IO ()
+graphicsFontDelete
+  = objectDelete
+
+
+-- | usage: (@graphicsMatrixConcat self t@).
+graphicsMatrixConcat :: GraphicsMatrix  a -> GraphicsMatrix  b ->  IO ()
+graphicsMatrixConcat self t 
+  = withObjectRef "graphicsMatrixConcat" self $ \cobj_self -> 
+    withObjectPtr t $ \cobj_t -> 
+    wxGraphicsMatrix_Concat cobj_self  cobj_t  
+foreign import ccall "wxGraphicsMatrix_Concat" wxGraphicsMatrix_Concat :: Ptr (TGraphicsMatrix a) -> Ptr (TGraphicsMatrix b) -> IO ()
+
+-- | usage: (@graphicsMatrixCreate@).
+graphicsMatrixCreate ::  IO (GraphicsMatrix  ())
+graphicsMatrixCreate 
+  = withObjectResult $
+    wxGraphicsMatrix_Create 
+foreign import ccall "wxGraphicsMatrix_Create" wxGraphicsMatrix_Create :: IO (Ptr (TGraphicsMatrix ()))
+
+-- | usage: (@graphicsMatrixDelete self@).
+graphicsMatrixDelete :: GraphicsMatrix  a ->  IO ()
+graphicsMatrixDelete
+  = objectDelete
+
+
+-- | usage: (@graphicsMatrixGet self a b c d tx ty@).
+graphicsMatrixGet :: GraphicsMatrix  a -> Ptr Double -> Ptr Double -> Ptr Double -> Ptr Double -> Ptr Double -> Ptr Double ->  IO ()
+graphicsMatrixGet self a b c d tx ty 
+  = withObjectRef "graphicsMatrixGet" self $ \cobj_self -> 
+    wxGraphicsMatrix_Get cobj_self  a  b  c  d  tx  ty  
+foreign import ccall "wxGraphicsMatrix_Get" wxGraphicsMatrix_Get :: Ptr (TGraphicsMatrix a) -> Ptr Double -> Ptr Double -> Ptr Double -> Ptr Double -> Ptr Double -> Ptr Double -> IO ()
+
+-- | usage: (@graphicsMatrixGetNativeMatrix self@).
+graphicsMatrixGetNativeMatrix :: GraphicsMatrix  a ->  IO (Ptr  ())
+graphicsMatrixGetNativeMatrix self 
+  = withObjectRef "graphicsMatrixGetNativeMatrix" self $ \cobj_self -> 
+    wxGraphicsMatrix_GetNativeMatrix cobj_self  
+foreign import ccall "wxGraphicsMatrix_GetNativeMatrix" wxGraphicsMatrix_GetNativeMatrix :: Ptr (TGraphicsMatrix a) -> IO (Ptr  ())
+
+-- | usage: (@graphicsMatrixInvert self@).
+graphicsMatrixInvert :: GraphicsMatrix  a ->  IO ()
+graphicsMatrixInvert self 
+  = withObjectRef "graphicsMatrixInvert" self $ \cobj_self -> 
+    wxGraphicsMatrix_Invert cobj_self  
+foreign import ccall "wxGraphicsMatrix_Invert" wxGraphicsMatrix_Invert :: Ptr (TGraphicsMatrix a) -> IO ()
+
+-- | usage: (@graphicsMatrixIsEqual self t@).
+graphicsMatrixIsEqual :: GraphicsMatrix  a -> GraphicsMatrix  b ->  IO Bool
+graphicsMatrixIsEqual self t 
+  = withBoolResult $
+    withObjectRef "graphicsMatrixIsEqual" self $ \cobj_self -> 
+    withObjectPtr t $ \cobj_t -> 
+    wxGraphicsMatrix_IsEqual cobj_self  cobj_t  
+foreign import ccall "wxGraphicsMatrix_IsEqual" wxGraphicsMatrix_IsEqual :: Ptr (TGraphicsMatrix a) -> Ptr (TGraphicsMatrix b) -> IO CBool
+
+-- | usage: (@graphicsMatrixIsIdentity self@).
+graphicsMatrixIsIdentity :: GraphicsMatrix  a ->  IO Bool
+graphicsMatrixIsIdentity self 
+  = withBoolResult $
+    withObjectRef "graphicsMatrixIsIdentity" self $ \cobj_self -> 
+    wxGraphicsMatrix_IsIdentity cobj_self  
+foreign import ccall "wxGraphicsMatrix_IsIdentity" wxGraphicsMatrix_IsIdentity :: Ptr (TGraphicsMatrix a) -> IO CBool
+
+-- | usage: (@graphicsMatrixRotate self angle@).
+graphicsMatrixRotate :: GraphicsMatrix  a -> Double ->  IO ()
+graphicsMatrixRotate self angle 
+  = withObjectRef "graphicsMatrixRotate" self $ \cobj_self -> 
+    wxGraphicsMatrix_Rotate cobj_self  angle  
+foreign import ccall "wxGraphicsMatrix_Rotate" wxGraphicsMatrix_Rotate :: Ptr (TGraphicsMatrix a) -> Double -> IO ()
+
+-- | usage: (@graphicsMatrixScale self xScaleyScale@).
+graphicsMatrixScale :: GraphicsMatrix  a -> (Size2D Double) ->  IO ()
+graphicsMatrixScale self xScaleyScale 
+  = withObjectRef "graphicsMatrixScale" self $ \cobj_self -> 
+    wxGraphicsMatrix_Scale cobj_self  (toCDoubleSizeW xScaleyScale) (toCDoubleSizeH xScaleyScale)  
+foreign import ccall "wxGraphicsMatrix_Scale" wxGraphicsMatrix_Scale :: Ptr (TGraphicsMatrix a) -> CDouble -> CDouble -> IO ()
+
+-- | usage: (@graphicsMatrixSet self a b c d tx ty@).
+graphicsMatrixSet :: GraphicsMatrix  a -> Double -> Double -> Double -> Double -> Double -> Double ->  IO ()
+graphicsMatrixSet self a b c d tx ty 
+  = withObjectRef "graphicsMatrixSet" self $ \cobj_self -> 
+    wxGraphicsMatrix_Set cobj_self  a  b  c  d  tx  ty  
+foreign import ccall "wxGraphicsMatrix_Set" wxGraphicsMatrix_Set :: Ptr (TGraphicsMatrix a) -> Double -> Double -> Double -> Double -> Double -> Double -> IO ()
+
+-- | usage: (@graphicsMatrixTransformDistance self dx dy@).
+graphicsMatrixTransformDistance :: GraphicsMatrix  a -> Ptr Double -> Ptr Double ->  IO ()
+graphicsMatrixTransformDistance self dx dy 
+  = withObjectRef "graphicsMatrixTransformDistance" self $ \cobj_self -> 
+    wxGraphicsMatrix_TransformDistance cobj_self  dx  dy  
+foreign import ccall "wxGraphicsMatrix_TransformDistance" wxGraphicsMatrix_TransformDistance :: Ptr (TGraphicsMatrix a) -> Ptr Double -> Ptr Double -> IO ()
+
+-- | usage: (@graphicsMatrixTransformPoint self@).
+graphicsMatrixTransformPoint :: GraphicsMatrix  a ->  IO (Point2 Double)
+graphicsMatrixTransformPoint self 
+  = withPointDoubleResult $ \px py -> 
+    withObjectRef "graphicsMatrixTransformPoint" self $ \cobj_self -> 
+    wxGraphicsMatrix_TransformPoint cobj_self   px py
+foreign import ccall "wxGraphicsMatrix_TransformPoint" wxGraphicsMatrix_TransformPoint :: Ptr (TGraphicsMatrix a) -> Ptr CDouble -> Ptr CDouble -> IO ()
+
+-- | usage: (@graphicsMatrixTranslate self dx dy@).
+graphicsMatrixTranslate :: GraphicsMatrix  a -> Double -> Double ->  IO ()
+graphicsMatrixTranslate self dx dy 
+  = withObjectRef "graphicsMatrixTranslate" self $ \cobj_self -> 
+    wxGraphicsMatrix_Translate cobj_self  dx  dy  
+foreign import ccall "wxGraphicsMatrix_Translate" wxGraphicsMatrix_Translate :: Ptr (TGraphicsMatrix a) -> Double -> Double -> IO ()
+
+-- | usage: (@graphicsObjectGetRenderer@).
+graphicsObjectGetRenderer ::  IO (GraphicsRenderer  ())
+graphicsObjectGetRenderer 
+  = withObjectResult $
+    wxGraphicsObject_GetRenderer 
+foreign import ccall "wxGraphicsObject_GetRenderer" wxGraphicsObject_GetRenderer :: IO (Ptr (TGraphicsRenderer ()))
+
+-- | usage: (@graphicsObjectIsNull self@).
+graphicsObjectIsNull :: GraphicsObject  a ->  IO Bool
+graphicsObjectIsNull self 
+  = withBoolResult $
+    withObjectRef "graphicsObjectIsNull" self $ \cobj_self -> 
+    wxGraphicsObject_IsNull cobj_self  
+foreign import ccall "wxGraphicsObject_IsNull" wxGraphicsObject_IsNull :: Ptr (TGraphicsObject a) -> IO CBool
+
+-- | usage: (@graphicsPathAddArc self xy r startAngle endAngle clockwise@).
+graphicsPathAddArc :: GraphicsPath  a -> (Point2 Double) -> Double -> Double -> Double -> Bool ->  IO ()
+graphicsPathAddArc self xy r startAngle endAngle clockwise 
+  = withObjectRef "graphicsPathAddArc" self $ \cobj_self -> 
+    wxGraphicsPath_AddArc cobj_self  (toCDoublePointX xy) (toCDoublePointY xy)  r  startAngle  endAngle  (toCBool clockwise)  
+foreign import ccall "wxGraphicsPath_AddArc" wxGraphicsPath_AddArc :: Ptr (TGraphicsPath a) -> CDouble -> CDouble -> Double -> Double -> Double -> CBool -> IO ()
+
+-- | usage: (@graphicsPathAddArcToPoint self x1y1 x2y2 r@).
+graphicsPathAddArcToPoint :: GraphicsPath  a -> (Point2 Double) -> (Point2 Double) -> Double ->  IO ()
+graphicsPathAddArcToPoint self x1y1 x2y2 r 
+  = withObjectRef "graphicsPathAddArcToPoint" self $ \cobj_self -> 
+    wxGraphicsPath_AddArcToPoint cobj_self  (toCDoublePointX x1y1) (toCDoublePointY x1y1)  (toCDoublePointX x2y2) (toCDoublePointY x2y2)  r  
+foreign import ccall "wxGraphicsPath_AddArcToPoint" wxGraphicsPath_AddArcToPoint :: Ptr (TGraphicsPath a) -> CDouble -> CDouble -> CDouble -> CDouble -> Double -> IO ()
+
+-- | usage: (@graphicsPathAddCircle self xy r@).
+graphicsPathAddCircle :: GraphicsPath  a -> (Point2 Double) -> Double ->  IO ()
+graphicsPathAddCircle self xy r 
+  = withObjectRef "graphicsPathAddCircle" self $ \cobj_self -> 
+    wxGraphicsPath_AddCircle cobj_self  (toCDoublePointX xy) (toCDoublePointY xy)  r  
+foreign import ccall "wxGraphicsPath_AddCircle" wxGraphicsPath_AddCircle :: Ptr (TGraphicsPath a) -> CDouble -> CDouble -> Double -> IO ()
+
+-- | usage: (@graphicsPathAddCurveToPoint self cx1cy1 cx2cy2 xy@).
+graphicsPathAddCurveToPoint :: GraphicsPath  a -> (Point2 Double) -> (Point2 Double) -> (Point2 Double) ->  IO ()
+graphicsPathAddCurveToPoint self cx1cy1 cx2cy2 xy 
+  = withObjectRef "graphicsPathAddCurveToPoint" self $ \cobj_self -> 
+    wxGraphicsPath_AddCurveToPoint cobj_self  (toCDoublePointX cx1cy1) (toCDoublePointY cx1cy1)  (toCDoublePointX cx2cy2) (toCDoublePointY cx2cy2)  (toCDoublePointX xy) (toCDoublePointY xy)  
+foreign import ccall "wxGraphicsPath_AddCurveToPoint" wxGraphicsPath_AddCurveToPoint :: Ptr (TGraphicsPath a) -> CDouble -> CDouble -> CDouble -> CDouble -> CDouble -> CDouble -> IO ()
+
+-- | usage: (@graphicsPathAddEllipse self xywh@).
+graphicsPathAddEllipse :: GraphicsPath  a -> (Rect2D Double) ->  IO ()
+graphicsPathAddEllipse self xywh 
+  = withObjectRef "graphicsPathAddEllipse" self $ \cobj_self -> 
+    wxGraphicsPath_AddEllipse cobj_self  (toCDoubleRectX xywh) (toCDoubleRectY xywh)(toCDoubleRectW xywh) (toCDoubleRectH xywh)  
+foreign import ccall "wxGraphicsPath_AddEllipse" wxGraphicsPath_AddEllipse :: Ptr (TGraphicsPath a) -> CDouble -> CDouble -> CDouble -> CDouble -> IO ()
+
+-- | usage: (@graphicsPathAddLineToPoint self xy@).
+graphicsPathAddLineToPoint :: GraphicsPath  a -> (Point2 Double) ->  IO ()
+graphicsPathAddLineToPoint self xy 
+  = withObjectRef "graphicsPathAddLineToPoint" self $ \cobj_self -> 
+    wxGraphicsPath_AddLineToPoint cobj_self  (toCDoublePointX xy) (toCDoublePointY xy)  
+foreign import ccall "wxGraphicsPath_AddLineToPoint" wxGraphicsPath_AddLineToPoint :: Ptr (TGraphicsPath a) -> CDouble -> CDouble -> IO ()
+
+-- | usage: (@graphicsPathAddPath self xy path@).
+graphicsPathAddPath :: GraphicsPath  a -> (Point2 Double) -> GraphicsPath  c ->  IO ()
+graphicsPathAddPath self xy path 
+  = withObjectRef "graphicsPathAddPath" self $ \cobj_self -> 
+    withObjectPtr path $ \cobj_path -> 
+    wxGraphicsPath_AddPath cobj_self  (toCDoublePointX xy) (toCDoublePointY xy)  cobj_path  
+foreign import ccall "wxGraphicsPath_AddPath" wxGraphicsPath_AddPath :: Ptr (TGraphicsPath a) -> CDouble -> CDouble -> Ptr (TGraphicsPath c) -> IO ()
+
+-- | usage: (@graphicsPathAddQuadCurveToPoint self cxcy xy@).
+graphicsPathAddQuadCurveToPoint :: GraphicsPath  a -> (Point2 Double) -> (Point2 Double) ->  IO ()
+graphicsPathAddQuadCurveToPoint self cxcy xy 
+  = withObjectRef "graphicsPathAddQuadCurveToPoint" self $ \cobj_self -> 
+    wxGraphicsPath_AddQuadCurveToPoint cobj_self  (toCDoublePointX cxcy) (toCDoublePointY cxcy)  (toCDoublePointX xy) (toCDoublePointY xy)  
+foreign import ccall "wxGraphicsPath_AddQuadCurveToPoint" wxGraphicsPath_AddQuadCurveToPoint :: Ptr (TGraphicsPath a) -> CDouble -> CDouble -> CDouble -> CDouble -> IO ()
+
+-- | usage: (@graphicsPathAddRectangle self xywh@).
+graphicsPathAddRectangle :: GraphicsPath  a -> (Rect2D Double) ->  IO ()
+graphicsPathAddRectangle self xywh 
+  = withObjectRef "graphicsPathAddRectangle" self $ \cobj_self -> 
+    wxGraphicsPath_AddRectangle cobj_self  (toCDoubleRectX xywh) (toCDoubleRectY xywh)(toCDoubleRectW xywh) (toCDoubleRectH xywh)  
+foreign import ccall "wxGraphicsPath_AddRectangle" wxGraphicsPath_AddRectangle :: Ptr (TGraphicsPath a) -> CDouble -> CDouble -> CDouble -> CDouble -> IO ()
+
+-- | usage: (@graphicsPathAddRoundedRectangle self xywh radius@).
+graphicsPathAddRoundedRectangle :: GraphicsPath  a -> (Rect2D Double) -> Double ->  IO ()
+graphicsPathAddRoundedRectangle self xywh radius 
+  = withObjectRef "graphicsPathAddRoundedRectangle" self $ \cobj_self -> 
+    wxGraphicsPath_AddRoundedRectangle cobj_self  (toCDoubleRectX xywh) (toCDoubleRectY xywh)(toCDoubleRectW xywh) (toCDoubleRectH xywh)  radius  
+foreign import ccall "wxGraphicsPath_AddRoundedRectangle" wxGraphicsPath_AddRoundedRectangle :: Ptr (TGraphicsPath a) -> CDouble -> CDouble -> CDouble -> CDouble -> Double -> IO ()
+
+-- | usage: (@graphicsPathCloseSubpath self@).
+graphicsPathCloseSubpath :: GraphicsPath  a ->  IO ()
+graphicsPathCloseSubpath self 
+  = withObjectRef "graphicsPathCloseSubpath" self $ \cobj_self -> 
+    wxGraphicsPath_CloseSubpath cobj_self  
+foreign import ccall "wxGraphicsPath_CloseSubpath" wxGraphicsPath_CloseSubpath :: Ptr (TGraphicsPath a) -> IO ()
+
+-- | usage: (@graphicsPathContains self xy style@).
+graphicsPathContains :: GraphicsPath  a -> (Point2 Double) -> Int ->  IO ()
+graphicsPathContains self xy style 
+  = withObjectRef "graphicsPathContains" self $ \cobj_self -> 
+    wxGraphicsPath_Contains cobj_self  (toCDoublePointX xy) (toCDoublePointY xy)  (toCInt style)  
+foreign import ccall "wxGraphicsPath_Contains" wxGraphicsPath_Contains :: Ptr (TGraphicsPath a) -> CDouble -> CDouble -> CInt -> IO ()
+
+-- | usage: (@graphicsPathDelete self@).
+graphicsPathDelete :: GraphicsPath  a ->  IO ()
+graphicsPathDelete
+  = objectDelete
+
+
+-- | usage: (@graphicsPathGetBox self@).
+graphicsPathGetBox :: GraphicsPath  a ->  IO (Rect2D Double)
+graphicsPathGetBox self 
+  = withRectDoubleResult $ \px py pw ph -> 
+    withObjectRef "graphicsPathGetBox" self $ \cobj_self -> 
+    wxGraphicsPath_GetBox cobj_self  px py pw ph
+foreign import ccall "wxGraphicsPath_GetBox" wxGraphicsPath_GetBox :: Ptr (TGraphicsPath a) -> Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO ()
+
+-- | usage: (@graphicsPathGetCurrentPoint self@).
+graphicsPathGetCurrentPoint :: GraphicsPath  a ->  IO (Point2 Double)
+graphicsPathGetCurrentPoint self 
+  = withPointDoubleResult $ \px py -> 
+    withObjectRef "graphicsPathGetCurrentPoint" self $ \cobj_self -> 
+    wxGraphicsPath_GetCurrentPoint cobj_self   px py
+foreign import ccall "wxGraphicsPath_GetCurrentPoint" wxGraphicsPath_GetCurrentPoint :: Ptr (TGraphicsPath a) -> Ptr CDouble -> Ptr CDouble -> IO ()
+
+-- | usage: (@graphicsPathGetNativePath self@).
+graphicsPathGetNativePath :: GraphicsPath  a ->  IO (Ptr  ())
+graphicsPathGetNativePath self 
+  = withObjectRef "graphicsPathGetNativePath" self $ \cobj_self -> 
+    wxGraphicsPath_GetNativePath cobj_self  
+foreign import ccall "wxGraphicsPath_GetNativePath" wxGraphicsPath_GetNativePath :: Ptr (TGraphicsPath a) -> IO (Ptr  ())
+
+-- | usage: (@graphicsPathMoveToPoint self xy@).
+graphicsPathMoveToPoint :: GraphicsPath  a -> (Point2 Double) ->  IO ()
+graphicsPathMoveToPoint self xy 
+  = withObjectRef "graphicsPathMoveToPoint" self $ \cobj_self -> 
+    wxGraphicsPath_MoveToPoint cobj_self  (toCDoublePointX xy) (toCDoublePointY xy)  
+foreign import ccall "wxGraphicsPath_MoveToPoint" wxGraphicsPath_MoveToPoint :: Ptr (TGraphicsPath a) -> CDouble -> CDouble -> IO ()
+
+-- | usage: (@graphicsPathTransform self matrix@).
+graphicsPathTransform :: GraphicsPath  a -> GraphicsMatrix  b ->  IO ()
+graphicsPathTransform self matrix 
+  = withObjectRef "graphicsPathTransform" self $ \cobj_self -> 
+    withObjectPtr matrix $ \cobj_matrix -> 
+    wxGraphicsPath_Transform cobj_self  cobj_matrix  
+foreign import ccall "wxGraphicsPath_Transform" wxGraphicsPath_Transform :: Ptr (TGraphicsPath a) -> Ptr (TGraphicsMatrix b) -> IO ()
+
+-- | usage: (@graphicsPathUnGetNativePath p@).
+graphicsPathUnGetNativePath :: GraphicsPath  a ->  IO ()
+graphicsPathUnGetNativePath p 
+  = withObjectRef "graphicsPathUnGetNativePath" p $ \cobj_p -> 
+    wxGraphicsPath_UnGetNativePath cobj_p  
+foreign import ccall "wxGraphicsPath_UnGetNativePath" wxGraphicsPath_UnGetNativePath :: Ptr (TGraphicsPath a) -> IO ()
+
+-- | usage: (@graphicsPenCreate@).
+graphicsPenCreate ::  IO (GraphicsPen  ())
+graphicsPenCreate 
+  = withObjectResult $
+    wxGraphicsPen_Create 
+foreign import ccall "wxGraphicsPen_Create" wxGraphicsPen_Create :: IO (Ptr (TGraphicsPen ()))
+
+-- | usage: (@graphicsPenDelete self@).
+graphicsPenDelete :: GraphicsPen  a ->  IO ()
+graphicsPenDelete
+  = objectDelete
+
+
+-- | usage: (@graphicsRendererCreateContext dc@).
+graphicsRendererCreateContext :: WindowDC  a ->  IO (GraphicsContext  ())
+graphicsRendererCreateContext dc 
+  = withObjectResult $
+    withObjectPtr dc $ \cobj_dc -> 
+    wxGraphicsRenderer_CreateContext cobj_dc  
+foreign import ccall "wxGraphicsRenderer_CreateContext" wxGraphicsRenderer_CreateContext :: Ptr (TWindowDC a) -> IO (Ptr (TGraphicsContext ()))
+
+-- | usage: (@graphicsRendererCreateContextFromNativeContext context@).
+graphicsRendererCreateContextFromNativeContext :: GraphicsRenderer  a ->  IO (GraphicsContext  ())
+graphicsRendererCreateContextFromNativeContext context 
+  = withObjectResult $
+    withObjectRef "graphicsRendererCreateContextFromNativeContext" context $ \cobj_context -> 
+    wxGraphicsRenderer_CreateContextFromNativeContext cobj_context  
+foreign import ccall "wxGraphicsRenderer_CreateContextFromNativeContext" wxGraphicsRenderer_CreateContextFromNativeContext :: Ptr (TGraphicsRenderer a) -> IO (Ptr (TGraphicsContext ()))
+
+-- | usage: (@graphicsRendererCreateContextFromNativeWindow window@).
+graphicsRendererCreateContextFromNativeWindow :: Window  a ->  IO (GraphicsContext  ())
+graphicsRendererCreateContextFromNativeWindow window 
+  = withObjectResult $
+    withObjectPtr window $ \cobj_window -> 
+    wxGraphicsRenderer_CreateContextFromNativeWindow cobj_window  
+foreign import ccall "wxGraphicsRenderer_CreateContextFromNativeWindow" wxGraphicsRenderer_CreateContextFromNativeWindow :: Ptr (TWindow a) -> IO (Ptr (TGraphicsContext ()))
+
+-- | usage: (@graphicsRendererCreateContextFromWindow window@).
+graphicsRendererCreateContextFromWindow :: Window  a ->  IO (GraphicsContext  ())
+graphicsRendererCreateContextFromWindow window 
+  = withObjectResult $
+    withObjectPtr window $ \cobj_window -> 
+    wxGraphicsRenderer_CreateContextFromWindow cobj_window  
+foreign import ccall "wxGraphicsRenderer_CreateContextFromWindow" wxGraphicsRenderer_CreateContextFromWindow :: Ptr (TWindow a) -> IO (Ptr (TGraphicsContext ()))
+
+-- | usage: (@graphicsRendererCreatePath self@).
+graphicsRendererCreatePath :: GraphicsRenderer  a ->  IO (GraphicsPath  ())
+graphicsRendererCreatePath self 
+  = withObjectResult $
+    withObjectRef "graphicsRendererCreatePath" self $ \cobj_self -> 
+    wxGraphicsRenderer_CreatePath cobj_self  
+foreign import ccall "wxGraphicsRenderer_CreatePath" wxGraphicsRenderer_CreatePath :: Ptr (TGraphicsRenderer a) -> IO (Ptr (TGraphicsPath ()))
+
+-- | usage: (@graphicsRendererDelete self@).
+graphicsRendererDelete :: GraphicsRenderer  a ->  IO ()
+graphicsRendererDelete
+  = objectDelete
+
+
+-- | usage: (@graphicsRendererGetDefaultRenderer self@).
+graphicsRendererGetDefaultRenderer :: GraphicsRenderer  a ->  IO (GraphicsRenderer  ())
+graphicsRendererGetDefaultRenderer self 
+  = withObjectResult $
+    withObjectRef "graphicsRendererGetDefaultRenderer" self $ \cobj_self -> 
+    wxGraphicsRenderer_GetDefaultRenderer cobj_self  
+foreign import ccall "wxGraphicsRenderer_GetDefaultRenderer" wxGraphicsRenderer_GetDefaultRenderer :: Ptr (TGraphicsRenderer a) -> IO (Ptr (TGraphicsRenderer ()))
+
+-- | usage: (@gridAppendCols obj numCols updateLabels@).
+gridAppendCols :: Grid  a -> Int -> Bool ->  IO Bool
+gridAppendCols _obj numCols updateLabels 
+  = withBoolResult $
+    withObjectRef "gridAppendCols" _obj $ \cobj__obj -> 
+    wxGrid_AppendCols cobj__obj  (toCInt numCols)  (toCBool updateLabels)  
+foreign import ccall "wxGrid_AppendCols" wxGrid_AppendCols :: Ptr (TGrid a) -> CInt -> CBool -> IO CBool
+
+-- | usage: (@gridAppendRows obj numRows updateLabels@).
+gridAppendRows :: Grid  a -> Int -> Bool ->  IO Bool
+gridAppendRows _obj numRows updateLabels 
+  = withBoolResult $
+    withObjectRef "gridAppendRows" _obj $ \cobj__obj -> 
+    wxGrid_AppendRows cobj__obj  (toCInt numRows)  (toCBool updateLabels)  
+foreign import ccall "wxGrid_AppendRows" wxGrid_AppendRows :: Ptr (TGrid a) -> CInt -> CBool -> IO CBool
+
+-- | usage: (@gridAutoSize obj@).
+gridAutoSize :: Grid  a ->  IO ()
+gridAutoSize _obj 
+  = withObjectRef "gridAutoSize" _obj $ \cobj__obj -> 
+    wxGrid_AutoSize cobj__obj  
+foreign import ccall "wxGrid_AutoSize" wxGrid_AutoSize :: Ptr (TGrid a) -> IO ()
+
+-- | usage: (@gridAutoSizeColumn obj col setAsMin@).
+gridAutoSizeColumn :: Grid  a -> Int -> Bool ->  IO ()
+gridAutoSizeColumn _obj col setAsMin 
+  = withObjectRef "gridAutoSizeColumn" _obj $ \cobj__obj -> 
+    wxGrid_AutoSizeColumn cobj__obj  (toCInt col)  (toCBool setAsMin)  
+foreign import ccall "wxGrid_AutoSizeColumn" wxGrid_AutoSizeColumn :: Ptr (TGrid a) -> CInt -> CBool -> IO ()
+
+-- | usage: (@gridAutoSizeColumns obj setAsMin@).
+gridAutoSizeColumns :: Grid  a -> Bool ->  IO ()
+gridAutoSizeColumns _obj setAsMin 
+  = withObjectRef "gridAutoSizeColumns" _obj $ \cobj__obj -> 
+    wxGrid_AutoSizeColumns cobj__obj  (toCBool setAsMin)  
+foreign import ccall "wxGrid_AutoSizeColumns" wxGrid_AutoSizeColumns :: Ptr (TGrid a) -> CBool -> IO ()
+
+-- | usage: (@gridAutoSizeRow obj row setAsMin@).
+gridAutoSizeRow :: Grid  a -> Int -> Bool ->  IO ()
+gridAutoSizeRow _obj row setAsMin 
+  = withObjectRef "gridAutoSizeRow" _obj $ \cobj__obj -> 
+    wxGrid_AutoSizeRow cobj__obj  (toCInt row)  (toCBool setAsMin)  
+foreign import ccall "wxGrid_AutoSizeRow" wxGrid_AutoSizeRow :: Ptr (TGrid a) -> CInt -> CBool -> IO ()
+
+-- | usage: (@gridAutoSizeRows obj setAsMin@).
+gridAutoSizeRows :: Grid  a -> Bool ->  IO ()
+gridAutoSizeRows _obj setAsMin 
+  = withObjectRef "gridAutoSizeRows" _obj $ \cobj__obj -> 
+    wxGrid_AutoSizeRows cobj__obj  (toCBool setAsMin)  
+foreign import ccall "wxGrid_AutoSizeRows" wxGrid_AutoSizeRows :: Ptr (TGrid a) -> CBool -> IO ()
+
+-- | usage: (@gridBeginBatch obj@).
+gridBeginBatch :: Grid  a ->  IO ()
+gridBeginBatch _obj 
+  = withObjectRef "gridBeginBatch" _obj $ \cobj__obj -> 
+    wxGrid_BeginBatch cobj__obj  
+foreign import ccall "wxGrid_BeginBatch" wxGrid_BeginBatch :: Ptr (TGrid a) -> IO ()
+
+-- | usage: (@gridBlockToDeviceRect obj top left bottom right@).
+gridBlockToDeviceRect :: Grid  a -> Int -> Int -> Int -> Int ->  IO (Rect)
+gridBlockToDeviceRect _obj top left bottom right 
+  = withWxRectResult $
+    withObjectRef "gridBlockToDeviceRect" _obj $ \cobj__obj -> 
+    wxGrid_BlockToDeviceRect cobj__obj  (toCInt top)  (toCInt left)  (toCInt bottom)  (toCInt right)  
+foreign import ccall "wxGrid_BlockToDeviceRect" wxGrid_BlockToDeviceRect :: Ptr (TGrid a) -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TWxRect ()))
+
+-- | usage: (@gridCanDragColSize obj col@).
+gridCanDragColSize :: Grid  a -> Int ->  IO Bool
+gridCanDragColSize _obj col 
+  = withBoolResult $
+    withObjectRef "gridCanDragColSize" _obj $ \cobj__obj -> 
+    wxGrid_CanDragColSize cobj__obj  (toCInt col)  
+foreign import ccall "wxGrid_CanDragColSize" wxGrid_CanDragColSize :: Ptr (TGrid a) -> CInt -> IO CBool
+
+-- | usage: (@gridCanDragGridSize obj@).
+gridCanDragGridSize :: Grid  a ->  IO Bool
+gridCanDragGridSize _obj 
+  = withBoolResult $
+    withObjectRef "gridCanDragGridSize" _obj $ \cobj__obj -> 
+    wxGrid_CanDragGridSize cobj__obj  
+foreign import ccall "wxGrid_CanDragGridSize" wxGrid_CanDragGridSize :: Ptr (TGrid a) -> IO CBool
+
+-- | usage: (@gridCanDragRowSize obj row@).
+gridCanDragRowSize :: Grid  a -> Int ->  IO Bool
+gridCanDragRowSize _obj row 
+  = withBoolResult $
+    withObjectRef "gridCanDragRowSize" _obj $ \cobj__obj -> 
+    wxGrid_CanDragRowSize cobj__obj  (toCInt row)  
+foreign import ccall "wxGrid_CanDragRowSize" wxGrid_CanDragRowSize :: Ptr (TGrid a) -> CInt -> IO CBool
+
+-- | usage: (@gridCanEnableCellControl obj@).
+gridCanEnableCellControl :: Grid  a ->  IO Bool
+gridCanEnableCellControl _obj 
+  = withBoolResult $
+    withObjectRef "gridCanEnableCellControl" _obj $ \cobj__obj -> 
+    wxGrid_CanEnableCellControl cobj__obj  
+foreign import ccall "wxGrid_CanEnableCellControl" wxGrid_CanEnableCellControl :: Ptr (TGrid a) -> IO CBool
+
+-- | usage: (@gridCellAttrCtor@).
+gridCellAttrCtor ::  IO (GridCellAttr  ())
+gridCellAttrCtor 
+  = withObjectResult $
+    wxGridCellAttr_Ctor 
+foreign import ccall "wxGridCellAttr_Ctor" wxGridCellAttr_Ctor :: IO (Ptr (TGridCellAttr ()))
+
+-- | usage: (@gridCellAttrDecRef obj@).
+gridCellAttrDecRef :: GridCellAttr  a ->  IO ()
+gridCellAttrDecRef _obj 
+  = withObjectRef "gridCellAttrDecRef" _obj $ \cobj__obj -> 
+    wxGridCellAttr_DecRef cobj__obj  
+foreign import ccall "wxGridCellAttr_DecRef" wxGridCellAttr_DecRef :: Ptr (TGridCellAttr a) -> IO ()
+
+-- | usage: (@gridCellAttrGetAlignment obj@).
+gridCellAttrGetAlignment :: GridCellAttr  a ->  IO Size
+gridCellAttrGetAlignment _obj 
+  = withSizeResult $ \pw ph -> 
+    withObjectRef "gridCellAttrGetAlignment" _obj $ \cobj__obj -> 
+    wxGridCellAttr_GetAlignment cobj__obj   pw ph
+foreign import ccall "wxGridCellAttr_GetAlignment" wxGridCellAttr_GetAlignment :: Ptr (TGridCellAttr a) -> Ptr CInt -> Ptr CInt -> IO ()
+
+-- | usage: (@gridCellAttrGetBackgroundColour obj@).
+gridCellAttrGetBackgroundColour :: GridCellAttr  a ->  IO (Color)
+gridCellAttrGetBackgroundColour _obj 
+  = withRefColour $ \pref -> 
+    withObjectRef "gridCellAttrGetBackgroundColour" _obj $ \cobj__obj -> 
+    wxGridCellAttr_GetBackgroundColour cobj__obj   pref
+foreign import ccall "wxGridCellAttr_GetBackgroundColour" wxGridCellAttr_GetBackgroundColour :: Ptr (TGridCellAttr a) -> Ptr (TColour ()) -> IO ()
+
+-- | usage: (@gridCellAttrGetEditor obj grid row col@).
+gridCellAttrGetEditor :: GridCellAttr  a -> Grid  b -> Int -> Int ->  IO (GridCellEditor  ())
+gridCellAttrGetEditor _obj grid row col 
+  = withObjectResult $
+    withObjectRef "gridCellAttrGetEditor" _obj $ \cobj__obj -> 
+    withObjectPtr grid $ \cobj_grid -> 
+    wxGridCellAttr_GetEditor cobj__obj  cobj_grid  (toCInt row)  (toCInt col)  
+foreign import ccall "wxGridCellAttr_GetEditor" wxGridCellAttr_GetEditor :: Ptr (TGridCellAttr a) -> Ptr (TGrid b) -> CInt -> CInt -> IO (Ptr (TGridCellEditor ()))
+
+-- | usage: (@gridCellAttrGetFont obj@).
+gridCellAttrGetFont :: GridCellAttr  a ->  IO (Font  ())
+gridCellAttrGetFont _obj 
+  = withRefFont $ \pref -> 
+    withObjectRef "gridCellAttrGetFont" _obj $ \cobj__obj -> 
+    wxGridCellAttr_GetFont cobj__obj   pref
+foreign import ccall "wxGridCellAttr_GetFont" wxGridCellAttr_GetFont :: Ptr (TGridCellAttr a) -> Ptr (TFont ()) -> IO ()
+
+-- | usage: (@gridCellAttrGetRenderer obj grid row col@).
+gridCellAttrGetRenderer :: GridCellAttr  a -> Grid  b -> Int -> Int ->  IO (GridCellRenderer  ())
+gridCellAttrGetRenderer _obj grid row col 
+  = withObjectResult $
+    withObjectRef "gridCellAttrGetRenderer" _obj $ \cobj__obj -> 
+    withObjectPtr grid $ \cobj_grid -> 
+    wxGridCellAttr_GetRenderer cobj__obj  cobj_grid  (toCInt row)  (toCInt col)  
+foreign import ccall "wxGridCellAttr_GetRenderer" wxGridCellAttr_GetRenderer :: Ptr (TGridCellAttr a) -> Ptr (TGrid b) -> CInt -> CInt -> IO (Ptr (TGridCellRenderer ()))
+
+-- | usage: (@gridCellAttrGetTextColour obj@).
+gridCellAttrGetTextColour :: GridCellAttr  a ->  IO (Color)
+gridCellAttrGetTextColour _obj 
+  = withRefColour $ \pref -> 
+    withObjectRef "gridCellAttrGetTextColour" _obj $ \cobj__obj -> 
+    wxGridCellAttr_GetTextColour cobj__obj   pref
+foreign import ccall "wxGridCellAttr_GetTextColour" wxGridCellAttr_GetTextColour :: Ptr (TGridCellAttr a) -> Ptr (TColour ()) -> IO ()
+
+-- | usage: (@gridCellAttrHasAlignment obj@).
+gridCellAttrHasAlignment :: GridCellAttr  a ->  IO Bool
+gridCellAttrHasAlignment _obj 
+  = withBoolResult $
+    withObjectRef "gridCellAttrHasAlignment" _obj $ \cobj__obj -> 
+    wxGridCellAttr_HasAlignment cobj__obj  
+foreign import ccall "wxGridCellAttr_HasAlignment" wxGridCellAttr_HasAlignment :: Ptr (TGridCellAttr a) -> IO CBool
+
+-- | usage: (@gridCellAttrHasBackgroundColour obj@).
+gridCellAttrHasBackgroundColour :: GridCellAttr  a ->  IO Bool
+gridCellAttrHasBackgroundColour _obj 
+  = withBoolResult $
+    withObjectRef "gridCellAttrHasBackgroundColour" _obj $ \cobj__obj -> 
+    wxGridCellAttr_HasBackgroundColour cobj__obj  
+foreign import ccall "wxGridCellAttr_HasBackgroundColour" wxGridCellAttr_HasBackgroundColour :: Ptr (TGridCellAttr a) -> IO CBool
+
+-- | usage: (@gridCellAttrHasEditor obj@).
+gridCellAttrHasEditor :: GridCellAttr  a ->  IO Bool
+gridCellAttrHasEditor _obj 
+  = withBoolResult $
+    withObjectRef "gridCellAttrHasEditor" _obj $ \cobj__obj -> 
+    wxGridCellAttr_HasEditor cobj__obj  
+foreign import ccall "wxGridCellAttr_HasEditor" wxGridCellAttr_HasEditor :: Ptr (TGridCellAttr a) -> IO CBool
+
+-- | usage: (@gridCellAttrHasFont obj@).
+gridCellAttrHasFont :: GridCellAttr  a ->  IO Bool
+gridCellAttrHasFont _obj 
+  = withBoolResult $
+    withObjectRef "gridCellAttrHasFont" _obj $ \cobj__obj -> 
+    wxGridCellAttr_HasFont cobj__obj  
+foreign import ccall "wxGridCellAttr_HasFont" wxGridCellAttr_HasFont :: Ptr (TGridCellAttr a) -> IO CBool
+
+-- | usage: (@gridCellAttrHasRenderer obj@).
+gridCellAttrHasRenderer :: GridCellAttr  a ->  IO Bool
+gridCellAttrHasRenderer _obj 
+  = withBoolResult $
+    withObjectRef "gridCellAttrHasRenderer" _obj $ \cobj__obj -> 
+    wxGridCellAttr_HasRenderer cobj__obj  
+foreign import ccall "wxGridCellAttr_HasRenderer" wxGridCellAttr_HasRenderer :: Ptr (TGridCellAttr a) -> IO CBool
+
+-- | usage: (@gridCellAttrHasTextColour obj@).
+gridCellAttrHasTextColour :: GridCellAttr  a ->  IO Bool
+gridCellAttrHasTextColour _obj 
+  = withBoolResult $
+    withObjectRef "gridCellAttrHasTextColour" _obj $ \cobj__obj -> 
+    wxGridCellAttr_HasTextColour cobj__obj  
+foreign import ccall "wxGridCellAttr_HasTextColour" wxGridCellAttr_HasTextColour :: Ptr (TGridCellAttr a) -> IO CBool
+
+-- | usage: (@gridCellAttrIncRef obj@).
+gridCellAttrIncRef :: GridCellAttr  a ->  IO ()
+gridCellAttrIncRef _obj 
+  = withObjectRef "gridCellAttrIncRef" _obj $ \cobj__obj -> 
+    wxGridCellAttr_IncRef cobj__obj  
+foreign import ccall "wxGridCellAttr_IncRef" wxGridCellAttr_IncRef :: Ptr (TGridCellAttr a) -> IO ()
+
+-- | usage: (@gridCellAttrIsReadOnly obj@).
+gridCellAttrIsReadOnly :: GridCellAttr  a ->  IO Bool
+gridCellAttrIsReadOnly _obj 
+  = withBoolResult $
+    withObjectRef "gridCellAttrIsReadOnly" _obj $ \cobj__obj -> 
+    wxGridCellAttr_IsReadOnly cobj__obj  
+foreign import ccall "wxGridCellAttr_IsReadOnly" wxGridCellAttr_IsReadOnly :: Ptr (TGridCellAttr a) -> IO CBool
+
+-- | usage: (@gridCellAttrSetAlignment obj hAlign vAlign@).
+gridCellAttrSetAlignment :: GridCellAttr  a -> Int -> Int ->  IO ()
+gridCellAttrSetAlignment _obj hAlign vAlign 
+  = withObjectRef "gridCellAttrSetAlignment" _obj $ \cobj__obj -> 
+    wxGridCellAttr_SetAlignment cobj__obj  (toCInt hAlign)  (toCInt vAlign)  
+foreign import ccall "wxGridCellAttr_SetAlignment" wxGridCellAttr_SetAlignment :: Ptr (TGridCellAttr a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@gridCellAttrSetBackgroundColour obj colBack@).
+gridCellAttrSetBackgroundColour :: GridCellAttr  a -> Color ->  IO ()
+gridCellAttrSetBackgroundColour _obj colBack 
+  = withObjectRef "gridCellAttrSetBackgroundColour" _obj $ \cobj__obj -> 
+    withColourPtr colBack $ \cobj_colBack -> 
+    wxGridCellAttr_SetBackgroundColour cobj__obj  cobj_colBack  
+foreign import ccall "wxGridCellAttr_SetBackgroundColour" wxGridCellAttr_SetBackgroundColour :: Ptr (TGridCellAttr a) -> Ptr (TColour b) -> IO ()
+
+-- | usage: (@gridCellAttrSetDefAttr obj defAttr@).
+gridCellAttrSetDefAttr :: GridCellAttr  a -> GridCellAttr  b ->  IO ()
+gridCellAttrSetDefAttr _obj defAttr 
+  = withObjectRef "gridCellAttrSetDefAttr" _obj $ \cobj__obj -> 
+    withObjectPtr defAttr $ \cobj_defAttr -> 
+    wxGridCellAttr_SetDefAttr cobj__obj  cobj_defAttr  
+foreign import ccall "wxGridCellAttr_SetDefAttr" wxGridCellAttr_SetDefAttr :: Ptr (TGridCellAttr a) -> Ptr (TGridCellAttr b) -> IO ()
+
+-- | usage: (@gridCellAttrSetEditor obj editor@).
+gridCellAttrSetEditor :: GridCellAttr  a -> GridCellEditor  b ->  IO ()
+gridCellAttrSetEditor _obj editor 
+  = withObjectRef "gridCellAttrSetEditor" _obj $ \cobj__obj -> 
+    withObjectPtr editor $ \cobj_editor -> 
+    wxGridCellAttr_SetEditor cobj__obj  cobj_editor  
+foreign import ccall "wxGridCellAttr_SetEditor" wxGridCellAttr_SetEditor :: Ptr (TGridCellAttr a) -> Ptr (TGridCellEditor b) -> IO ()
+
+-- | usage: (@gridCellAttrSetFont obj font@).
+gridCellAttrSetFont :: GridCellAttr  a -> Font  b ->  IO ()
+gridCellAttrSetFont _obj font 
+  = withObjectRef "gridCellAttrSetFont" _obj $ \cobj__obj -> 
+    withObjectPtr font $ \cobj_font -> 
+    wxGridCellAttr_SetFont cobj__obj  cobj_font  
+foreign import ccall "wxGridCellAttr_SetFont" wxGridCellAttr_SetFont :: Ptr (TGridCellAttr a) -> Ptr (TFont b) -> IO ()
+
+-- | usage: (@gridCellAttrSetReadOnly obj isReadOnly@).
+gridCellAttrSetReadOnly :: GridCellAttr  a -> Bool ->  IO ()
+gridCellAttrSetReadOnly _obj isReadOnly 
+  = withObjectRef "gridCellAttrSetReadOnly" _obj $ \cobj__obj -> 
+    wxGridCellAttr_SetReadOnly cobj__obj  (toCBool isReadOnly)  
+foreign import ccall "wxGridCellAttr_SetReadOnly" wxGridCellAttr_SetReadOnly :: Ptr (TGridCellAttr a) -> CBool -> IO ()
+
+-- | usage: (@gridCellAttrSetRenderer obj renderer@).
+gridCellAttrSetRenderer :: GridCellAttr  a -> GridCellRenderer  b ->  IO ()
+gridCellAttrSetRenderer _obj renderer 
+  = withObjectRef "gridCellAttrSetRenderer" _obj $ \cobj__obj -> 
+    withObjectPtr renderer $ \cobj_renderer -> 
+    wxGridCellAttr_SetRenderer cobj__obj  cobj_renderer  
+foreign import ccall "wxGridCellAttr_SetRenderer" wxGridCellAttr_SetRenderer :: Ptr (TGridCellAttr a) -> Ptr (TGridCellRenderer b) -> IO ()
+
+-- | usage: (@gridCellAttrSetTextColour obj colText@).
+gridCellAttrSetTextColour :: GridCellAttr  a -> Color ->  IO ()
+gridCellAttrSetTextColour _obj colText 
+  = withObjectRef "gridCellAttrSetTextColour" _obj $ \cobj__obj -> 
+    withColourPtr colText $ \cobj_colText -> 
+    wxGridCellAttr_SetTextColour cobj__obj  cobj_colText  
+foreign import ccall "wxGridCellAttr_SetTextColour" wxGridCellAttr_SetTextColour :: Ptr (TGridCellAttr a) -> Ptr (TColour b) -> IO ()
+
+-- | usage: (@gridCellAutoWrapStringRendererCtor@).
+gridCellAutoWrapStringRendererCtor ::  IO (GridCellAutoWrapStringRenderer  ())
+gridCellAutoWrapStringRendererCtor 
+  = withObjectResult $
+    wxGridCellAutoWrapStringRenderer_Ctor 
+foreign import ccall "wxGridCellAutoWrapStringRenderer_Ctor" wxGridCellAutoWrapStringRenderer_Ctor :: IO (Ptr (TGridCellAutoWrapStringRenderer ()))
+
+-- | usage: (@gridCellBoolEditorCtor@).
+gridCellBoolEditorCtor ::  IO (GridCellBoolEditor  ())
+gridCellBoolEditorCtor 
+  = withObjectResult $
+    wxGridCellBoolEditor_Ctor 
+foreign import ccall "wxGridCellBoolEditor_Ctor" wxGridCellBoolEditor_Ctor :: IO (Ptr (TGridCellBoolEditor ()))
+
+-- | usage: (@gridCellChoiceEditorCtor countchoices allowOthers@).
+gridCellChoiceEditorCtor :: [String] -> Bool ->  IO (GridCellChoiceEditor  ())
+gridCellChoiceEditorCtor countchoices allowOthers 
+  = withObjectResult $
+    withArrayWString countchoices $ \carrlen_countchoices carr_countchoices -> 
+    wxGridCellChoiceEditor_Ctor carrlen_countchoices carr_countchoices  (toCBool allowOthers)  
+foreign import ccall "wxGridCellChoiceEditor_Ctor" wxGridCellChoiceEditor_Ctor :: CInt -> Ptr (Ptr CWchar) -> CBool -> IO (Ptr (TGridCellChoiceEditor ()))
+
+-- | usage: (@gridCellCoordsArrayCreate@).
+gridCellCoordsArrayCreate ::  IO (GridCellCoordsArray  ())
+gridCellCoordsArrayCreate 
+  = withManagedGridCellCoordsArrayResult $
+    wxGridCellCoordsArray_Create 
+foreign import ccall "wxGridCellCoordsArray_Create" wxGridCellCoordsArray_Create :: IO (Ptr (TGridCellCoordsArray ()))
+
+-- | usage: (@gridCellCoordsArrayDelete obj@).
+gridCellCoordsArrayDelete :: GridCellCoordsArray  a ->  IO ()
+gridCellCoordsArrayDelete
+  = gridCellCoordsArrayDelete
+
+
+-- | usage: (@gridCellCoordsArrayGetCount obj@).
+gridCellCoordsArrayGetCount :: GridCellCoordsArray  a ->  IO Int
+gridCellCoordsArrayGetCount _obj 
+  = withIntResult $
+    withObjectRef "gridCellCoordsArrayGetCount" _obj $ \cobj__obj -> 
+    wxGridCellCoordsArray_GetCount cobj__obj  
+foreign import ccall "wxGridCellCoordsArray_GetCount" wxGridCellCoordsArray_GetCount :: Ptr (TGridCellCoordsArray a) -> IO CInt
+
+-- | usage: (@gridCellCoordsArrayItem obj idx@).
+gridCellCoordsArrayItem :: GridCellCoordsArray  a -> Int ->  IO Point
+gridCellCoordsArrayItem _obj _idx 
+  = withPointResult $ \px py -> 
+    withObjectRef "gridCellCoordsArrayItem" _obj $ \cobj__obj -> 
+    wxGridCellCoordsArray_Item cobj__obj  (toCInt _idx)   px py
+foreign import ccall "wxGridCellCoordsArray_Item" wxGridCellCoordsArray_Item :: Ptr (TGridCellCoordsArray a) -> CInt -> Ptr CInt -> Ptr CInt -> IO ()
+
+-- | usage: (@gridCellEditorBeginEdit obj row col grid@).
+gridCellEditorBeginEdit :: GridCellEditor  a -> Int -> Int -> Grid  d ->  IO ()
+gridCellEditorBeginEdit _obj row col grid 
+  = withObjectRef "gridCellEditorBeginEdit" _obj $ \cobj__obj -> 
+    withObjectPtr grid $ \cobj_grid -> 
+    wxGridCellEditor_BeginEdit cobj__obj  (toCInt row)  (toCInt col)  cobj_grid  
+foreign import ccall "wxGridCellEditor_BeginEdit" wxGridCellEditor_BeginEdit :: Ptr (TGridCellEditor a) -> CInt -> CInt -> Ptr (TGrid d) -> IO ()
+
+-- | usage: (@gridCellEditorCreate obj parent id evtHandler@).
+gridCellEditorCreate :: GridCellEditor  a -> Window  b -> Id -> EvtHandler  d ->  IO ()
+gridCellEditorCreate _obj parent id evtHandler 
+  = withObjectPtr _obj $ \cobj__obj -> 
+    withObjectPtr parent $ \cobj_parent -> 
+    withObjectPtr evtHandler $ \cobj_evtHandler -> 
+    wxGridCellEditor_Create cobj__obj  cobj_parent  (toCInt id)  cobj_evtHandler  
+foreign import ccall "wxGridCellEditor_Create" wxGridCellEditor_Create :: Ptr (TGridCellEditor a) -> Ptr (TWindow b) -> CInt -> Ptr (TEvtHandler d) -> IO ()
+
+-- | usage: (@gridCellEditorDestroy obj@).
+gridCellEditorDestroy :: GridCellEditor  a ->  IO ()
+gridCellEditorDestroy _obj 
+  = withObjectRef "gridCellEditorDestroy" _obj $ \cobj__obj -> 
+    wxGridCellEditor_Destroy cobj__obj  
+foreign import ccall "wxGridCellEditor_Destroy" wxGridCellEditor_Destroy :: Ptr (TGridCellEditor a) -> IO ()
+
+-- | usage: (@gridCellEditorEndEdit obj row col grid oldStr newStr@).
+gridCellEditorEndEdit :: GridCellEditor  a -> Int -> Int -> Grid  d -> String -> String ->  IO Int
+gridCellEditorEndEdit _obj row col grid oldStr newStr 
+  = withIntResult $
+    withObjectRef "gridCellEditorEndEdit" _obj $ \cobj__obj -> 
+    withObjectPtr grid $ \cobj_grid -> 
+    withStringPtr oldStr $ \cobj_oldStr -> 
+    withStringPtr newStr $ \cobj_newStr -> 
+    wxGridCellEditor_EndEdit cobj__obj  (toCInt row)  (toCInt col)  cobj_grid  cobj_oldStr  cobj_newStr  
+foreign import ccall "wxGridCellEditor_EndEdit" wxGridCellEditor_EndEdit :: Ptr (TGridCellEditor a) -> CInt -> CInt -> Ptr (TGrid d) -> Ptr (TWxString e) -> Ptr (TWxString f) -> IO CInt
+
+-- | usage: (@gridCellEditorGetControl obj@).
+gridCellEditorGetControl :: GridCellEditor  a ->  IO (Control  ())
+gridCellEditorGetControl _obj 
+  = withObjectResult $
+    withObjectRef "gridCellEditorGetControl" _obj $ \cobj__obj -> 
+    wxGridCellEditor_GetControl cobj__obj  
+foreign import ccall "wxGridCellEditor_GetControl" wxGridCellEditor_GetControl :: Ptr (TGridCellEditor a) -> IO (Ptr (TControl ()))
+
+-- | usage: (@gridCellEditorHandleReturn obj event@).
+gridCellEditorHandleReturn :: GridCellEditor  a -> Event  b ->  IO ()
+gridCellEditorHandleReturn _obj event 
+  = withObjectRef "gridCellEditorHandleReturn" _obj $ \cobj__obj -> 
+    withObjectPtr event $ \cobj_event -> 
+    wxGridCellEditor_HandleReturn cobj__obj  cobj_event  
+foreign import ccall "wxGridCellEditor_HandleReturn" wxGridCellEditor_HandleReturn :: Ptr (TGridCellEditor a) -> Ptr (TEvent b) -> IO ()
+
+-- | usage: (@gridCellEditorIsAcceptedKey obj event@).
+gridCellEditorIsAcceptedKey :: GridCellEditor  a -> Event  b ->  IO Bool
+gridCellEditorIsAcceptedKey _obj event 
+  = withBoolResult $
+    withObjectRef "gridCellEditorIsAcceptedKey" _obj $ \cobj__obj -> 
+    withObjectPtr event $ \cobj_event -> 
+    wxGridCellEditor_IsAcceptedKey cobj__obj  cobj_event  
+foreign import ccall "wxGridCellEditor_IsAcceptedKey" wxGridCellEditor_IsAcceptedKey :: Ptr (TGridCellEditor a) -> Ptr (TEvent b) -> IO CBool
+
+-- | usage: (@gridCellEditorIsCreated obj@).
+gridCellEditorIsCreated :: GridCellEditor  a ->  IO Bool
+gridCellEditorIsCreated _obj 
+  = withBoolResult $
+    withObjectRef "gridCellEditorIsCreated" _obj $ \cobj__obj -> 
+    wxGridCellEditor_IsCreated cobj__obj  
+foreign import ccall "wxGridCellEditor_IsCreated" wxGridCellEditor_IsCreated :: Ptr (TGridCellEditor a) -> IO CBool
+
+-- | usage: (@gridCellEditorPaintBackground obj dc xywh attr@).
+gridCellEditorPaintBackground :: GridCellEditor  a -> DC  b -> Rect -> GridCellAttr  d ->  IO ()
+gridCellEditorPaintBackground _obj dc xywh attr 
+  = withObjectRef "gridCellEditorPaintBackground" _obj $ \cobj__obj -> 
+    withObjectPtr dc $ \cobj_dc -> 
+    withObjectPtr attr $ \cobj_attr -> 
+    wxGridCellEditor_PaintBackground cobj__obj  cobj_dc  (toCIntRectX xywh) (toCIntRectY xywh)(toCIntRectW xywh) (toCIntRectH xywh)  cobj_attr  
+foreign import ccall "wxGridCellEditor_PaintBackground" wxGridCellEditor_PaintBackground :: Ptr (TGridCellEditor a) -> Ptr (TDC b) -> CInt -> CInt -> CInt -> CInt -> Ptr (TGridCellAttr d) -> IO ()
+
+-- | usage: (@gridCellEditorReset obj@).
+gridCellEditorReset :: GridCellEditor  a ->  IO ()
+gridCellEditorReset _obj 
+  = withObjectRef "gridCellEditorReset" _obj $ \cobj__obj -> 
+    wxGridCellEditor_Reset cobj__obj  
+foreign import ccall "wxGridCellEditor_Reset" wxGridCellEditor_Reset :: Ptr (TGridCellEditor a) -> IO ()
+
+-- | usage: (@gridCellEditorSetControl obj control@).
+gridCellEditorSetControl :: GridCellEditor  a -> Control  b ->  IO ()
+gridCellEditorSetControl _obj control 
+  = withObjectRef "gridCellEditorSetControl" _obj $ \cobj__obj -> 
+    withObjectPtr control $ \cobj_control -> 
+    wxGridCellEditor_SetControl cobj__obj  cobj_control  
+foreign import ccall "wxGridCellEditor_SetControl" wxGridCellEditor_SetControl :: Ptr (TGridCellEditor a) -> Ptr (TControl b) -> IO ()
+
+-- | usage: (@gridCellEditorSetParameters obj params@).
+gridCellEditorSetParameters :: GridCellEditor  a -> String ->  IO ()
+gridCellEditorSetParameters _obj params 
+  = withObjectRef "gridCellEditorSetParameters" _obj $ \cobj__obj -> 
+    withStringPtr params $ \cobj_params -> 
+    wxGridCellEditor_SetParameters cobj__obj  cobj_params  
+foreign import ccall "wxGridCellEditor_SetParameters" wxGridCellEditor_SetParameters :: Ptr (TGridCellEditor a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@gridCellEditorSetSize obj xywh@).
+gridCellEditorSetSize :: GridCellEditor  a -> Rect ->  IO ()
+gridCellEditorSetSize _obj xywh 
+  = withObjectRef "gridCellEditorSetSize" _obj $ \cobj__obj -> 
+    wxGridCellEditor_SetSize cobj__obj  (toCIntRectX xywh) (toCIntRectY xywh)(toCIntRectW xywh) (toCIntRectH xywh)  
+foreign import ccall "wxGridCellEditor_SetSize" wxGridCellEditor_SetSize :: Ptr (TGridCellEditor a) -> CInt -> CInt -> CInt -> CInt -> IO ()
+
+-- | usage: (@gridCellEditorShow obj show attr@).
+gridCellEditorShow :: GridCellEditor  a -> Bool -> GridCellAttr  c ->  IO ()
+gridCellEditorShow _obj show attr 
+  = withObjectRef "gridCellEditorShow" _obj $ \cobj__obj -> 
+    withObjectPtr attr $ \cobj_attr -> 
+    wxGridCellEditor_Show cobj__obj  (toCBool show)  cobj_attr  
+foreign import ccall "wxGridCellEditor_Show" wxGridCellEditor_Show :: Ptr (TGridCellEditor a) -> CBool -> Ptr (TGridCellAttr c) -> IO ()
+
+-- | usage: (@gridCellEditorStartingClick obj@).
+gridCellEditorStartingClick :: GridCellEditor  a ->  IO ()
+gridCellEditorStartingClick _obj 
+  = withObjectRef "gridCellEditorStartingClick" _obj $ \cobj__obj -> 
+    wxGridCellEditor_StartingClick cobj__obj  
+foreign import ccall "wxGridCellEditor_StartingClick" wxGridCellEditor_StartingClick :: Ptr (TGridCellEditor a) -> IO ()
+
+-- | usage: (@gridCellEditorStartingKey obj event@).
+gridCellEditorStartingKey :: GridCellEditor  a -> Event  b ->  IO ()
+gridCellEditorStartingKey _obj event 
+  = withObjectRef "gridCellEditorStartingKey" _obj $ \cobj__obj -> 
+    withObjectPtr event $ \cobj_event -> 
+    wxGridCellEditor_StartingKey cobj__obj  cobj_event  
+foreign import ccall "wxGridCellEditor_StartingKey" wxGridCellEditor_StartingKey :: Ptr (TGridCellEditor a) -> Ptr (TEvent b) -> IO ()
+
+-- | usage: (@gridCellFloatEditorCtor width precision@).
+gridCellFloatEditorCtor :: Int -> Int ->  IO (GridCellFloatEditor  ())
+gridCellFloatEditorCtor width precision 
+  = withObjectResult $
+    wxGridCellFloatEditor_Ctor (toCInt width)  (toCInt precision)  
+foreign import ccall "wxGridCellFloatEditor_Ctor" wxGridCellFloatEditor_Ctor :: CInt -> CInt -> IO (Ptr (TGridCellFloatEditor ()))
+
+-- | usage: (@gridCellNumberEditorCtor min max@).
+gridCellNumberEditorCtor :: Int -> Int ->  IO (GridCellNumberEditor  ())
+gridCellNumberEditorCtor min max 
+  = withObjectResult $
+    wxGridCellNumberEditor_Ctor (toCInt min)  (toCInt max)  
+foreign import ccall "wxGridCellNumberEditor_Ctor" wxGridCellNumberEditor_Ctor :: CInt -> CInt -> IO (Ptr (TGridCellNumberEditor ()))
+
+-- | usage: (@gridCellNumberRendererCtor@).
+gridCellNumberRendererCtor ::  IO (GridCellNumberRenderer  ())
+gridCellNumberRendererCtor 
+  = withObjectResult $
+    wxGridCellNumberRenderer_Ctor 
+foreign import ccall "wxGridCellNumberRenderer_Ctor" wxGridCellNumberRenderer_Ctor :: IO (Ptr (TGridCellNumberRenderer ()))
+
+-- | usage: (@gridCellTextEditorCtor@).
+gridCellTextEditorCtor ::  IO (GridCellTextEditor  ())
+gridCellTextEditorCtor 
+  = withObjectResult $
+    wxGridCellTextEditor_Ctor 
+foreign import ccall "wxGridCellTextEditor_Ctor" wxGridCellTextEditor_Ctor :: IO (Ptr (TGridCellTextEditor ()))
+
+-- | usage: (@gridCellTextEnterEditorCtor@).
+gridCellTextEnterEditorCtor ::  IO (GridCellTextEnterEditor  ())
+gridCellTextEnterEditorCtor 
+  = withObjectResult $
+    wxGridCellTextEnterEditor_Ctor 
+foreign import ccall "wxGridCellTextEnterEditor_Ctor" wxGridCellTextEnterEditor_Ctor :: IO (Ptr (TGridCellTextEnterEditor ()))
+
+-- | usage: (@gridCellToRect obj row col@).
+gridCellToRect :: Grid  a -> Int -> Int ->  IO (Rect)
+gridCellToRect _obj row col 
+  = withWxRectResult $
+    withObjectRef "gridCellToRect" _obj $ \cobj__obj -> 
+    wxGrid_CellToRect cobj__obj  (toCInt row)  (toCInt col)  
+foreign import ccall "wxGrid_CellToRect" wxGrid_CellToRect :: Ptr (TGrid a) -> CInt -> CInt -> IO (Ptr (TWxRect ()))
+
+-- | usage: (@gridClearGrid obj@).
+gridClearGrid :: Grid  a ->  IO ()
+gridClearGrid _obj 
+  = withObjectRef "gridClearGrid" _obj $ \cobj__obj -> 
+    wxGrid_ClearGrid cobj__obj  
+foreign import ccall "wxGrid_ClearGrid" wxGrid_ClearGrid :: Ptr (TGrid a) -> IO ()
+
+-- | usage: (@gridClearSelection obj@).
+gridClearSelection :: Grid  a ->  IO ()
+gridClearSelection _obj 
+  = withObjectRef "gridClearSelection" _obj $ \cobj__obj -> 
+    wxGrid_ClearSelection cobj__obj  
+foreign import ccall "wxGrid_ClearSelection" wxGrid_ClearSelection :: Ptr (TGrid a) -> IO ()
+
+-- | usage: (@gridCreate prt id lfttopwdthgt stl@).
+gridCreate :: Window  a -> Id -> Rect -> Style ->  IO (Grid  ())
+gridCreate _prt _id _lfttopwdthgt _stl 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    wxGrid_Create cobj__prt  (toCInt _id)  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
+foreign import ccall "wxGrid_Create" wxGrid_Create :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TGrid ()))
+
+-- | usage: (@gridCreateGrid obj rows cols selmode@).
+gridCreateGrid :: Grid  a -> Int -> Int -> Int ->  IO ()
+gridCreateGrid _obj rows cols selmode 
+  = withObjectRef "gridCreateGrid" _obj $ \cobj__obj -> 
+    wxGrid_CreateGrid cobj__obj  (toCInt rows)  (toCInt cols)  (toCInt selmode)  
+foreign import ccall "wxGrid_CreateGrid" wxGrid_CreateGrid :: Ptr (TGrid a) -> CInt -> CInt -> CInt -> IO ()
+
+-- | usage: (@gridDeleteCols obj pos numCols updateLabels@).
+gridDeleteCols :: Grid  a -> Int -> Int -> Bool ->  IO Bool
+gridDeleteCols _obj pos numCols updateLabels 
+  = withBoolResult $
+    withObjectRef "gridDeleteCols" _obj $ \cobj__obj -> 
+    wxGrid_DeleteCols cobj__obj  (toCInt pos)  (toCInt numCols)  (toCBool updateLabels)  
+foreign import ccall "wxGrid_DeleteCols" wxGrid_DeleteCols :: Ptr (TGrid a) -> CInt -> CInt -> CBool -> IO CBool
+
+-- | usage: (@gridDeleteRows obj pos numRows updateLabels@).
+gridDeleteRows :: Grid  a -> Int -> Int -> Bool ->  IO Bool
+gridDeleteRows _obj pos numRows updateLabels 
+  = withBoolResult $
+    withObjectRef "gridDeleteRows" _obj $ \cobj__obj -> 
+    wxGrid_DeleteRows cobj__obj  (toCInt pos)  (toCInt numRows)  (toCBool updateLabels)  
+foreign import ccall "wxGrid_DeleteRows" wxGrid_DeleteRows :: Ptr (TGrid a) -> CInt -> CInt -> CBool -> IO CBool
+
+-- | usage: (@gridDisableCellEditControl obj@).
+gridDisableCellEditControl :: Grid  a ->  IO ()
+gridDisableCellEditControl _obj 
+  = withObjectRef "gridDisableCellEditControl" _obj $ \cobj__obj -> 
+    wxGrid_DisableCellEditControl cobj__obj  
+foreign import ccall "wxGrid_DisableCellEditControl" wxGrid_DisableCellEditControl :: Ptr (TGrid a) -> IO ()
+
+-- | usage: (@gridDisableDragColSize obj@).
+gridDisableDragColSize :: Grid  a ->  IO ()
+gridDisableDragColSize _obj 
+  = withObjectRef "gridDisableDragColSize" _obj $ \cobj__obj -> 
+    wxGrid_DisableDragColSize cobj__obj  
+foreign import ccall "wxGrid_DisableDragColSize" wxGrid_DisableDragColSize :: Ptr (TGrid a) -> IO ()
+
+-- | usage: (@gridDisableDragGridSize obj@).
+gridDisableDragGridSize :: Grid  a ->  IO ()
+gridDisableDragGridSize _obj 
+  = withObjectRef "gridDisableDragGridSize" _obj $ \cobj__obj -> 
+    wxGrid_DisableDragGridSize cobj__obj  
+foreign import ccall "wxGrid_DisableDragGridSize" wxGrid_DisableDragGridSize :: Ptr (TGrid a) -> IO ()
+
+-- | usage: (@gridDisableDragRowSize obj@).
+gridDisableDragRowSize :: Grid  a ->  IO ()
+gridDisableDragRowSize _obj 
+  = withObjectRef "gridDisableDragRowSize" _obj $ \cobj__obj -> 
+    wxGrid_DisableDragRowSize cobj__obj  
+foreign import ccall "wxGrid_DisableDragRowSize" wxGrid_DisableDragRowSize :: Ptr (TGrid a) -> IO ()
+
+-- | usage: (@gridDrawAllGridLines obj dc reg@).
+gridDrawAllGridLines :: Grid  a -> DC  b -> Region  c ->  IO ()
+gridDrawAllGridLines _obj dc reg 
+  = withObjectRef "gridDrawAllGridLines" _obj $ \cobj__obj -> 
+    withObjectPtr dc $ \cobj_dc -> 
+    withObjectPtr reg $ \cobj_reg -> 
+    wxGrid_DrawAllGridLines cobj__obj  cobj_dc  cobj_reg  
+foreign import ccall "wxGrid_DrawAllGridLines" wxGrid_DrawAllGridLines :: Ptr (TGrid a) -> Ptr (TDC b) -> Ptr (TRegion c) -> IO ()
+
+-- | usage: (@gridDrawCell obj dc row col@).
+gridDrawCell :: Grid  a -> DC  b -> Int -> Int ->  IO ()
+gridDrawCell _obj dc _row _col 
+  = withObjectRef "gridDrawCell" _obj $ \cobj__obj -> 
+    withObjectPtr dc $ \cobj_dc -> 
+    wxGrid_DrawCell cobj__obj  cobj_dc  (toCInt _row)  (toCInt _col)  
+foreign import ccall "wxGrid_DrawCell" wxGrid_DrawCell :: Ptr (TGrid a) -> Ptr (TDC b) -> CInt -> CInt -> IO ()
+
+-- | usage: (@gridDrawCellBorder obj dc row col@).
+gridDrawCellBorder :: Grid  a -> DC  b -> Int -> Int ->  IO ()
+gridDrawCellBorder _obj dc _row _col 
+  = withObjectRef "gridDrawCellBorder" _obj $ \cobj__obj -> 
+    withObjectPtr dc $ \cobj_dc -> 
+    wxGrid_DrawCellBorder cobj__obj  cobj_dc  (toCInt _row)  (toCInt _col)  
+foreign import ccall "wxGrid_DrawCellBorder" wxGrid_DrawCellBorder :: Ptr (TGrid a) -> Ptr (TDC b) -> CInt -> CInt -> IO ()
+
+-- | usage: (@gridDrawCellHighlight obj dc attr@).
+gridDrawCellHighlight :: Grid  a -> DC  b -> GridCellAttr  c ->  IO ()
+gridDrawCellHighlight _obj dc attr 
+  = withObjectRef "gridDrawCellHighlight" _obj $ \cobj__obj -> 
+    withObjectPtr dc $ \cobj_dc -> 
+    withObjectPtr attr $ \cobj_attr -> 
+    wxGrid_DrawCellHighlight cobj__obj  cobj_dc  cobj_attr  
+foreign import ccall "wxGrid_DrawCellHighlight" wxGrid_DrawCellHighlight :: Ptr (TGrid a) -> Ptr (TDC b) -> Ptr (TGridCellAttr c) -> IO ()
+
+-- | usage: (@gridDrawColLabel obj dc col@).
+gridDrawColLabel :: Grid  a -> DC  b -> Int ->  IO ()
+gridDrawColLabel _obj dc col 
+  = withObjectRef "gridDrawColLabel" _obj $ \cobj__obj -> 
+    withObjectPtr dc $ \cobj_dc -> 
+    wxGrid_DrawColLabel cobj__obj  cobj_dc  (toCInt col)  
+foreign import ccall "wxGrid_DrawColLabel" wxGrid_DrawColLabel :: Ptr (TGrid a) -> Ptr (TDC b) -> CInt -> IO ()
+
+-- | usage: (@gridDrawColLabels obj dc@).
+gridDrawColLabels :: Grid  a -> DC  b ->  IO ()
+gridDrawColLabels _obj dc 
+  = withObjectRef "gridDrawColLabels" _obj $ \cobj__obj -> 
+    withObjectPtr dc $ \cobj_dc -> 
+    wxGrid_DrawColLabels cobj__obj  cobj_dc  
+foreign import ccall "wxGrid_DrawColLabels" wxGrid_DrawColLabels :: Ptr (TGrid a) -> Ptr (TDC b) -> IO ()
+
+-- | usage: (@gridDrawGridSpace obj dc@).
+gridDrawGridSpace :: Grid  a -> DC  b ->  IO ()
+gridDrawGridSpace _obj dc 
+  = withObjectRef "gridDrawGridSpace" _obj $ \cobj__obj -> 
+    withObjectPtr dc $ \cobj_dc -> 
+    wxGrid_DrawGridSpace cobj__obj  cobj_dc  
+foreign import ccall "wxGrid_DrawGridSpace" wxGrid_DrawGridSpace :: Ptr (TGrid a) -> Ptr (TDC b) -> IO ()
+
+-- | usage: (@gridDrawRowLabel obj dc row@).
+gridDrawRowLabel :: Grid  a -> DC  b -> Int ->  IO ()
+gridDrawRowLabel _obj dc row 
+  = withObjectRef "gridDrawRowLabel" _obj $ \cobj__obj -> 
+    withObjectPtr dc $ \cobj_dc -> 
+    wxGrid_DrawRowLabel cobj__obj  cobj_dc  (toCInt row)  
+foreign import ccall "wxGrid_DrawRowLabel" wxGrid_DrawRowLabel :: Ptr (TGrid a) -> Ptr (TDC b) -> CInt -> IO ()
+
+-- | usage: (@gridDrawRowLabels obj dc@).
+gridDrawRowLabels :: Grid  a -> DC  b ->  IO ()
+gridDrawRowLabels _obj dc 
+  = withObjectRef "gridDrawRowLabels" _obj $ \cobj__obj -> 
+    withObjectPtr dc $ \cobj_dc -> 
+    wxGrid_DrawRowLabels cobj__obj  cobj_dc  
+foreign import ccall "wxGrid_DrawRowLabels" wxGrid_DrawRowLabels :: Ptr (TGrid a) -> Ptr (TDC b) -> IO ()
+
+-- | usage: (@gridDrawTextRectangle obj dc txt xywh horizontalAlignment verticalAlignment@).
+gridDrawTextRectangle :: Grid  a -> DC  b -> String -> Rect -> Int -> Int ->  IO ()
+gridDrawTextRectangle _obj dc txt xywh horizontalAlignment verticalAlignment 
+  = withObjectRef "gridDrawTextRectangle" _obj $ \cobj__obj -> 
+    withObjectPtr dc $ \cobj_dc -> 
+    withStringPtr txt $ \cobj_txt -> 
+    wxGrid_DrawTextRectangle cobj__obj  cobj_dc  cobj_txt  (toCIntRectX xywh) (toCIntRectY xywh)(toCIntRectW xywh) (toCIntRectH xywh)  (toCInt horizontalAlignment)  (toCInt verticalAlignment)  
+foreign import ccall "wxGrid_DrawTextRectangle" wxGrid_DrawTextRectangle :: Ptr (TGrid a) -> Ptr (TDC b) -> Ptr (TWxString c) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO ()
+
+-- | usage: (@gridEditorCreatedEventGetCol obj@).
+gridEditorCreatedEventGetCol :: GridEditorCreatedEvent  a ->  IO Int
+gridEditorCreatedEventGetCol _obj 
+  = withIntResult $
+    withObjectRef "gridEditorCreatedEventGetCol" _obj $ \cobj__obj -> 
+    wxGridEditorCreatedEvent_GetCol cobj__obj  
+foreign import ccall "wxGridEditorCreatedEvent_GetCol" wxGridEditorCreatedEvent_GetCol :: Ptr (TGridEditorCreatedEvent a) -> IO CInt
+
+-- | usage: (@gridEditorCreatedEventGetControl obj@).
+gridEditorCreatedEventGetControl :: GridEditorCreatedEvent  a ->  IO (Control  ())
+gridEditorCreatedEventGetControl _obj 
+  = withObjectResult $
+    withObjectRef "gridEditorCreatedEventGetControl" _obj $ \cobj__obj -> 
+    wxGridEditorCreatedEvent_GetControl cobj__obj  
+foreign import ccall "wxGridEditorCreatedEvent_GetControl" wxGridEditorCreatedEvent_GetControl :: Ptr (TGridEditorCreatedEvent a) -> IO (Ptr (TControl ()))
+
+-- | usage: (@gridEditorCreatedEventGetRow obj@).
+gridEditorCreatedEventGetRow :: GridEditorCreatedEvent  a ->  IO Int
+gridEditorCreatedEventGetRow _obj 
+  = withIntResult $
+    withObjectRef "gridEditorCreatedEventGetRow" _obj $ \cobj__obj -> 
+    wxGridEditorCreatedEvent_GetRow cobj__obj  
+foreign import ccall "wxGridEditorCreatedEvent_GetRow" wxGridEditorCreatedEvent_GetRow :: Ptr (TGridEditorCreatedEvent a) -> IO CInt
+
+-- | usage: (@gridEditorCreatedEventSetCol obj col@).
+gridEditorCreatedEventSetCol :: GridEditorCreatedEvent  a -> Int ->  IO ()
+gridEditorCreatedEventSetCol _obj col 
+  = withObjectRef "gridEditorCreatedEventSetCol" _obj $ \cobj__obj -> 
+    wxGridEditorCreatedEvent_SetCol cobj__obj  (toCInt col)  
+foreign import ccall "wxGridEditorCreatedEvent_SetCol" wxGridEditorCreatedEvent_SetCol :: Ptr (TGridEditorCreatedEvent a) -> CInt -> IO ()
+
+-- | usage: (@gridEditorCreatedEventSetControl obj ctrl@).
+gridEditorCreatedEventSetControl :: GridEditorCreatedEvent  a -> Control  b ->  IO ()
+gridEditorCreatedEventSetControl _obj ctrl 
+  = withObjectRef "gridEditorCreatedEventSetControl" _obj $ \cobj__obj -> 
+    withObjectPtr ctrl $ \cobj_ctrl -> 
+    wxGridEditorCreatedEvent_SetControl cobj__obj  cobj_ctrl  
+foreign import ccall "wxGridEditorCreatedEvent_SetControl" wxGridEditorCreatedEvent_SetControl :: Ptr (TGridEditorCreatedEvent a) -> Ptr (TControl b) -> IO ()
+
+-- | usage: (@gridEditorCreatedEventSetRow obj row@).
+gridEditorCreatedEventSetRow :: GridEditorCreatedEvent  a -> Int ->  IO ()
+gridEditorCreatedEventSetRow _obj row 
+  = withObjectRef "gridEditorCreatedEventSetRow" _obj $ \cobj__obj -> 
+    wxGridEditorCreatedEvent_SetRow cobj__obj  (toCInt row)  
+foreign import ccall "wxGridEditorCreatedEvent_SetRow" wxGridEditorCreatedEvent_SetRow :: Ptr (TGridEditorCreatedEvent a) -> CInt -> IO ()
+
+-- | usage: (@gridEnableCellEditControl obj enable@).
+gridEnableCellEditControl :: Grid  a -> Bool ->  IO ()
+gridEnableCellEditControl _obj enable 
+  = withObjectRef "gridEnableCellEditControl" _obj $ \cobj__obj -> 
+    wxGrid_EnableCellEditControl cobj__obj  (toCBool enable)  
+foreign import ccall "wxGrid_EnableCellEditControl" wxGrid_EnableCellEditControl :: Ptr (TGrid a) -> CBool -> IO ()
+
+-- | usage: (@gridEnableDragColSize obj enable@).
+gridEnableDragColSize :: Grid  a -> Bool ->  IO ()
+gridEnableDragColSize _obj enable 
+  = withObjectRef "gridEnableDragColSize" _obj $ \cobj__obj -> 
+    wxGrid_EnableDragColSize cobj__obj  (toCBool enable)  
+foreign import ccall "wxGrid_EnableDragColSize" wxGrid_EnableDragColSize :: Ptr (TGrid a) -> CBool -> IO ()
+
+-- | usage: (@gridEnableDragGridSize obj enable@).
+gridEnableDragGridSize :: Grid  a -> Bool ->  IO ()
+gridEnableDragGridSize _obj enable 
+  = withObjectRef "gridEnableDragGridSize" _obj $ \cobj__obj -> 
+    wxGrid_EnableDragGridSize cobj__obj  (toCBool enable)  
+foreign import ccall "wxGrid_EnableDragGridSize" wxGrid_EnableDragGridSize :: Ptr (TGrid a) -> CBool -> IO ()
+
+-- | usage: (@gridEnableDragRowSize obj enable@).
+gridEnableDragRowSize :: Grid  a -> Bool ->  IO ()
+gridEnableDragRowSize _obj enable 
+  = withObjectRef "gridEnableDragRowSize" _obj $ \cobj__obj -> 
+    wxGrid_EnableDragRowSize cobj__obj  (toCBool enable)  
+foreign import ccall "wxGrid_EnableDragRowSize" wxGrid_EnableDragRowSize :: Ptr (TGrid a) -> CBool -> IO ()
+
+-- | usage: (@gridEnableEditing obj edit@).
+gridEnableEditing :: Grid  a -> Bool ->  IO ()
+gridEnableEditing _obj edit 
+  = withObjectRef "gridEnableEditing" _obj $ \cobj__obj -> 
+    wxGrid_EnableEditing cobj__obj  (toCBool edit)  
+foreign import ccall "wxGrid_EnableEditing" wxGrid_EnableEditing :: Ptr (TGrid a) -> CBool -> IO ()
+
+-- | usage: (@gridEnableGridLines obj enable@).
+gridEnableGridLines :: Grid  a -> Bool ->  IO ()
+gridEnableGridLines _obj enable 
+  = withObjectRef "gridEnableGridLines" _obj $ \cobj__obj -> 
+    wxGrid_EnableGridLines cobj__obj  (toCBool enable)  
+foreign import ccall "wxGrid_EnableGridLines" wxGrid_EnableGridLines :: Ptr (TGrid a) -> CBool -> IO ()
+
+-- | usage: (@gridEndBatch obj@).
+gridEndBatch :: Grid  a ->  IO ()
+gridEndBatch _obj 
+  = withObjectRef "gridEndBatch" _obj $ \cobj__obj -> 
+    wxGrid_EndBatch cobj__obj  
+foreign import ccall "wxGrid_EndBatch" wxGrid_EndBatch :: Ptr (TGrid a) -> IO ()
+
+-- | usage: (@gridEventAltDown obj@).
+gridEventAltDown :: GridEvent  a ->  IO Bool
+gridEventAltDown _obj 
+  = withBoolResult $
+    withObjectRef "gridEventAltDown" _obj $ \cobj__obj -> 
+    wxGridEvent_AltDown cobj__obj  
+foreign import ccall "wxGridEvent_AltDown" wxGridEvent_AltDown :: Ptr (TGridEvent a) -> IO CBool
+
+-- | usage: (@gridEventControlDown obj@).
+gridEventControlDown :: GridEvent  a ->  IO Bool
+gridEventControlDown _obj 
+  = withBoolResult $
+    withObjectRef "gridEventControlDown" _obj $ \cobj__obj -> 
+    wxGridEvent_ControlDown cobj__obj  
+foreign import ccall "wxGridEvent_ControlDown" wxGridEvent_ControlDown :: Ptr (TGridEvent a) -> IO CBool
+
+-- | usage: (@gridEventGetCol obj@).
+gridEventGetCol :: GridEvent  a ->  IO Int
+gridEventGetCol _obj 
+  = withIntResult $
+    withObjectRef "gridEventGetCol" _obj $ \cobj__obj -> 
+    wxGridEvent_GetCol cobj__obj  
+foreign import ccall "wxGridEvent_GetCol" wxGridEvent_GetCol :: Ptr (TGridEvent a) -> IO CInt
+
+-- | usage: (@gridEventGetPosition obj@).
+gridEventGetPosition :: GridEvent  a ->  IO (Point)
+gridEventGetPosition _obj 
+  = withWxPointResult $
+    withObjectRef "gridEventGetPosition" _obj $ \cobj__obj -> 
+    wxGridEvent_GetPosition cobj__obj  
+foreign import ccall "wxGridEvent_GetPosition" wxGridEvent_GetPosition :: Ptr (TGridEvent a) -> IO (Ptr (TWxPoint ()))
+
+-- | usage: (@gridEventGetRow obj@).
+gridEventGetRow :: GridEvent  a ->  IO Int
+gridEventGetRow _obj 
+  = withIntResult $
+    withObjectRef "gridEventGetRow" _obj $ \cobj__obj -> 
+    wxGridEvent_GetRow cobj__obj  
+foreign import ccall "wxGridEvent_GetRow" wxGridEvent_GetRow :: Ptr (TGridEvent a) -> IO CInt
+
+-- | usage: (@gridEventMetaDown obj@).
+gridEventMetaDown :: GridEvent  a ->  IO Bool
+gridEventMetaDown _obj 
+  = withBoolResult $
+    withObjectRef "gridEventMetaDown" _obj $ \cobj__obj -> 
+    wxGridEvent_MetaDown cobj__obj  
+foreign import ccall "wxGridEvent_MetaDown" wxGridEvent_MetaDown :: Ptr (TGridEvent a) -> IO CBool
+
+-- | usage: (@gridEventSelecting obj@).
+gridEventSelecting :: GridEvent  a ->  IO Bool
+gridEventSelecting _obj 
+  = withBoolResult $
+    withObjectRef "gridEventSelecting" _obj $ \cobj__obj -> 
+    wxGridEvent_Selecting cobj__obj  
+foreign import ccall "wxGridEvent_Selecting" wxGridEvent_Selecting :: Ptr (TGridEvent a) -> IO CBool
+
+-- | usage: (@gridEventShiftDown obj@).
+gridEventShiftDown :: GridEvent  a ->  IO Bool
+gridEventShiftDown _obj 
+  = withBoolResult $
+    withObjectRef "gridEventShiftDown" _obj $ \cobj__obj -> 
+    wxGridEvent_ShiftDown cobj__obj  
+foreign import ccall "wxGridEvent_ShiftDown" wxGridEvent_ShiftDown :: Ptr (TGridEvent a) -> IO CBool
+
+-- | usage: (@gridGetBatchCount obj@).
+gridGetBatchCount :: Grid  a ->  IO Int
+gridGetBatchCount _obj 
+  = withIntResult $
+    withObjectRef "gridGetBatchCount" _obj $ \cobj__obj -> 
+    wxGrid_GetBatchCount cobj__obj  
+foreign import ccall "wxGrid_GetBatchCount" wxGrid_GetBatchCount :: Ptr (TGrid a) -> IO CInt
+
+-- | usage: (@gridGetCellAlignment obj row col@).
+gridGetCellAlignment :: Grid  a -> Int -> Int ->  IO Size
+gridGetCellAlignment _obj row col 
+  = withSizeResult $ \pw ph -> 
+    withObjectRef "gridGetCellAlignment" _obj $ \cobj__obj -> 
+    wxGrid_GetCellAlignment cobj__obj  (toCInt row)  (toCInt col)   pw ph
+foreign import ccall "wxGrid_GetCellAlignment" wxGrid_GetCellAlignment :: Ptr (TGrid a) -> CInt -> CInt -> Ptr CInt -> Ptr CInt -> IO ()
+
+-- | usage: (@gridGetCellBackgroundColour obj row col colour@).
+gridGetCellBackgroundColour :: Grid  a -> Int -> Int -> Color ->  IO ()
+gridGetCellBackgroundColour _obj row col colour 
+  = withObjectRef "gridGetCellBackgroundColour" _obj $ \cobj__obj -> 
+    withColourPtr colour $ \cobj_colour -> 
+    wxGrid_GetCellBackgroundColour cobj__obj  (toCInt row)  (toCInt col)  cobj_colour  
+foreign import ccall "wxGrid_GetCellBackgroundColour" wxGrid_GetCellBackgroundColour :: Ptr (TGrid a) -> CInt -> CInt -> Ptr (TColour d) -> IO ()
+
+-- | usage: (@gridGetCellEditor obj row col@).
+gridGetCellEditor :: Grid  a -> Int -> Int ->  IO (GridCellEditor  ())
+gridGetCellEditor _obj row col 
+  = withObjectResult $
+    withObjectRef "gridGetCellEditor" _obj $ \cobj__obj -> 
+    wxGrid_GetCellEditor cobj__obj  (toCInt row)  (toCInt col)  
+foreign import ccall "wxGrid_GetCellEditor" wxGrid_GetCellEditor :: Ptr (TGrid a) -> CInt -> CInt -> IO (Ptr (TGridCellEditor ()))
+
+-- | usage: (@gridGetCellFont obj row col font@).
+gridGetCellFont :: Grid  a -> Int -> Int -> Font  d ->  IO ()
+gridGetCellFont _obj row col font 
+  = withObjectRef "gridGetCellFont" _obj $ \cobj__obj -> 
+    withObjectPtr font $ \cobj_font -> 
+    wxGrid_GetCellFont cobj__obj  (toCInt row)  (toCInt col)  cobj_font  
+foreign import ccall "wxGrid_GetCellFont" wxGrid_GetCellFont :: Ptr (TGrid a) -> CInt -> CInt -> Ptr (TFont d) -> IO ()
+
+-- | usage: (@gridGetCellHighlightColour obj@).
+gridGetCellHighlightColour :: Grid  a ->  IO (Color)
+gridGetCellHighlightColour _obj 
+  = withRefColour $ \pref -> 
+    withObjectRef "gridGetCellHighlightColour" _obj $ \cobj__obj -> 
+    wxGrid_GetCellHighlightColour cobj__obj   pref
+foreign import ccall "wxGrid_GetCellHighlightColour" wxGrid_GetCellHighlightColour :: Ptr (TGrid a) -> Ptr (TColour ()) -> IO ()
+
+-- | usage: (@gridGetCellRenderer obj row col@).
+gridGetCellRenderer :: Grid  a -> Int -> Int ->  IO (GridCellRenderer  ())
+gridGetCellRenderer _obj row col 
+  = withObjectResult $
+    withObjectRef "gridGetCellRenderer" _obj $ \cobj__obj -> 
+    wxGrid_GetCellRenderer cobj__obj  (toCInt row)  (toCInt col)  
+foreign import ccall "wxGrid_GetCellRenderer" wxGrid_GetCellRenderer :: Ptr (TGrid a) -> CInt -> CInt -> IO (Ptr (TGridCellRenderer ()))
+
+-- | usage: (@gridGetCellSize obj row col@).
+gridGetCellSize :: Grid  a -> Int -> Int ->  IO Size
+gridGetCellSize _obj row col 
+  = withSizeResult $ \pw ph -> 
+    withObjectRef "gridGetCellSize" _obj $ \cobj__obj -> 
+    wxGrid_GetCellSize cobj__obj  (toCInt row)  (toCInt col)   pw ph
+foreign import ccall "wxGrid_GetCellSize" wxGrid_GetCellSize :: Ptr (TGrid a) -> CInt -> CInt -> Ptr CInt -> Ptr CInt -> IO ()
+
+-- | usage: (@gridGetCellTextColour obj row col colour@).
+gridGetCellTextColour :: Grid  a -> Int -> Int -> Color ->  IO ()
+gridGetCellTextColour _obj row col colour 
+  = withObjectRef "gridGetCellTextColour" _obj $ \cobj__obj -> 
+    withColourPtr colour $ \cobj_colour -> 
+    wxGrid_GetCellTextColour cobj__obj  (toCInt row)  (toCInt col)  cobj_colour  
+foreign import ccall "wxGrid_GetCellTextColour" wxGrid_GetCellTextColour :: Ptr (TGrid a) -> CInt -> CInt -> Ptr (TColour d) -> IO ()
+
+-- | usage: (@gridGetCellValue obj row col@).
+gridGetCellValue :: Grid  a -> Int -> Int ->  IO (String)
+gridGetCellValue _obj row col 
+  = withManagedStringResult $
+    withObjectRef "gridGetCellValue" _obj $ \cobj__obj -> 
+    wxGrid_GetCellValue cobj__obj  (toCInt row)  (toCInt col)  
+foreign import ccall "wxGrid_GetCellValue" wxGrid_GetCellValue :: Ptr (TGrid a) -> CInt -> CInt -> IO (Ptr (TWxString ()))
+
+-- | usage: (@gridGetColLabelAlignment obj@).
+gridGetColLabelAlignment :: Grid  a ->  IO Size
+gridGetColLabelAlignment _obj 
+  = withSizeResult $ \pw ph -> 
+    withObjectRef "gridGetColLabelAlignment" _obj $ \cobj__obj -> 
+    wxGrid_GetColLabelAlignment cobj__obj   pw ph
+foreign import ccall "wxGrid_GetColLabelAlignment" wxGrid_GetColLabelAlignment :: Ptr (TGrid a) -> Ptr CInt -> Ptr CInt -> IO ()
+
+-- | usage: (@gridGetColLabelSize obj@).
+gridGetColLabelSize :: Grid  a ->  IO Int
+gridGetColLabelSize _obj 
+  = withIntResult $
+    withObjectRef "gridGetColLabelSize" _obj $ \cobj__obj -> 
+    wxGrid_GetColLabelSize cobj__obj  
+foreign import ccall "wxGrid_GetColLabelSize" wxGrid_GetColLabelSize :: Ptr (TGrid a) -> IO CInt
+
+-- | usage: (@gridGetColLabelValue obj col@).
+gridGetColLabelValue :: Grid  a -> Int ->  IO (String)
+gridGetColLabelValue _obj col 
+  = withManagedStringResult $
+    withObjectRef "gridGetColLabelValue" _obj $ \cobj__obj -> 
+    wxGrid_GetColLabelValue cobj__obj  (toCInt col)  
+foreign import ccall "wxGrid_GetColLabelValue" wxGrid_GetColLabelValue :: Ptr (TGrid a) -> CInt -> IO (Ptr (TWxString ()))
+
+-- | usage: (@gridGetColSize obj col@).
+gridGetColSize :: Grid  a -> Int ->  IO Int
+gridGetColSize _obj col 
+  = withIntResult $
+    withObjectRef "gridGetColSize" _obj $ \cobj__obj -> 
+    wxGrid_GetColSize cobj__obj  (toCInt col)  
+foreign import ccall "wxGrid_GetColSize" wxGrid_GetColSize :: Ptr (TGrid a) -> CInt -> IO CInt
+
+-- | usage: (@gridGetDefaultCellAlignment obj@).
+gridGetDefaultCellAlignment :: Grid  a ->  IO Size
+gridGetDefaultCellAlignment _obj 
+  = withSizeResult $ \pw ph -> 
+    withObjectRef "gridGetDefaultCellAlignment" _obj $ \cobj__obj -> 
+    wxGrid_GetDefaultCellAlignment cobj__obj   pw ph
+foreign import ccall "wxGrid_GetDefaultCellAlignment" wxGrid_GetDefaultCellAlignment :: Ptr (TGrid a) -> Ptr CInt -> Ptr CInt -> IO ()
+
+-- | usage: (@gridGetDefaultCellBackgroundColour obj@).
+gridGetDefaultCellBackgroundColour :: Grid  a ->  IO (Color)
+gridGetDefaultCellBackgroundColour _obj 
+  = withRefColour $ \pref -> 
+    withObjectRef "gridGetDefaultCellBackgroundColour" _obj $ \cobj__obj -> 
+    wxGrid_GetDefaultCellBackgroundColour cobj__obj   pref
+foreign import ccall "wxGrid_GetDefaultCellBackgroundColour" wxGrid_GetDefaultCellBackgroundColour :: Ptr (TGrid a) -> Ptr (TColour ()) -> IO ()
+
+-- | usage: (@gridGetDefaultCellFont obj@).
+gridGetDefaultCellFont :: Grid  a ->  IO (Font  ())
+gridGetDefaultCellFont _obj 
+  = withRefFont $ \pref -> 
+    withObjectRef "gridGetDefaultCellFont" _obj $ \cobj__obj -> 
+    wxGrid_GetDefaultCellFont cobj__obj   pref
+foreign import ccall "wxGrid_GetDefaultCellFont" wxGrid_GetDefaultCellFont :: Ptr (TGrid a) -> Ptr (TFont ()) -> IO ()
+
+-- | usage: (@gridGetDefaultCellTextColour obj@).
+gridGetDefaultCellTextColour :: Grid  a ->  IO (Color)
+gridGetDefaultCellTextColour _obj 
+  = withRefColour $ \pref -> 
+    withObjectRef "gridGetDefaultCellTextColour" _obj $ \cobj__obj -> 
+    wxGrid_GetDefaultCellTextColour cobj__obj   pref
+foreign import ccall "wxGrid_GetDefaultCellTextColour" wxGrid_GetDefaultCellTextColour :: Ptr (TGrid a) -> Ptr (TColour ()) -> IO ()
+
+-- | usage: (@gridGetDefaultColLabelSize obj@).
+gridGetDefaultColLabelSize :: Grid  a ->  IO Int
+gridGetDefaultColLabelSize _obj 
+  = withIntResult $
+    withObjectRef "gridGetDefaultColLabelSize" _obj $ \cobj__obj -> 
+    wxGrid_GetDefaultColLabelSize cobj__obj  
+foreign import ccall "wxGrid_GetDefaultColLabelSize" wxGrid_GetDefaultColLabelSize :: Ptr (TGrid a) -> IO CInt
+
+-- | usage: (@gridGetDefaultColSize obj@).
+gridGetDefaultColSize :: Grid  a ->  IO Int
+gridGetDefaultColSize _obj 
+  = withIntResult $
+    withObjectRef "gridGetDefaultColSize" _obj $ \cobj__obj -> 
+    wxGrid_GetDefaultColSize cobj__obj  
+foreign import ccall "wxGrid_GetDefaultColSize" wxGrid_GetDefaultColSize :: Ptr (TGrid a) -> IO CInt
+
+-- | usage: (@gridGetDefaultEditor obj@).
+gridGetDefaultEditor :: Grid  a ->  IO (GridCellEditor  ())
+gridGetDefaultEditor _obj 
+  = withObjectResult $
+    withObjectRef "gridGetDefaultEditor" _obj $ \cobj__obj -> 
+    wxGrid_GetDefaultEditor cobj__obj  
+foreign import ccall "wxGrid_GetDefaultEditor" wxGrid_GetDefaultEditor :: Ptr (TGrid a) -> IO (Ptr (TGridCellEditor ()))
+
+-- | usage: (@gridGetDefaultEditorForCell obj row col@).
+gridGetDefaultEditorForCell :: Grid  a -> Int -> Int ->  IO (GridCellEditor  ())
+gridGetDefaultEditorForCell _obj row col 
+  = withObjectResult $
+    withObjectRef "gridGetDefaultEditorForCell" _obj $ \cobj__obj -> 
+    wxGrid_GetDefaultEditorForCell cobj__obj  (toCInt row)  (toCInt col)  
+foreign import ccall "wxGrid_GetDefaultEditorForCell" wxGrid_GetDefaultEditorForCell :: Ptr (TGrid a) -> CInt -> CInt -> IO (Ptr (TGridCellEditor ()))
+
+-- | usage: (@gridGetDefaultEditorForType obj typeName@).
+gridGetDefaultEditorForType :: Grid  a -> String ->  IO (GridCellEditor  ())
+gridGetDefaultEditorForType _obj typeName 
+  = withObjectResult $
+    withObjectRef "gridGetDefaultEditorForType" _obj $ \cobj__obj -> 
+    withStringPtr typeName $ \cobj_typeName -> 
+    wxGrid_GetDefaultEditorForType cobj__obj  cobj_typeName  
+foreign import ccall "wxGrid_GetDefaultEditorForType" wxGrid_GetDefaultEditorForType :: Ptr (TGrid a) -> Ptr (TWxString b) -> IO (Ptr (TGridCellEditor ()))
+
+-- | usage: (@gridGetDefaultRenderer obj@).
+gridGetDefaultRenderer :: Grid  a ->  IO (GridCellRenderer  ())
+gridGetDefaultRenderer _obj 
+  = withObjectResult $
+    withObjectRef "gridGetDefaultRenderer" _obj $ \cobj__obj -> 
+    wxGrid_GetDefaultRenderer cobj__obj  
+foreign import ccall "wxGrid_GetDefaultRenderer" wxGrid_GetDefaultRenderer :: Ptr (TGrid a) -> IO (Ptr (TGridCellRenderer ()))
+
+-- | usage: (@gridGetDefaultRendererForCell obj row col@).
+gridGetDefaultRendererForCell :: Grid  a -> Int -> Int ->  IO (GridCellRenderer  ())
+gridGetDefaultRendererForCell _obj row col 
+  = withObjectResult $
+    withObjectRef "gridGetDefaultRendererForCell" _obj $ \cobj__obj -> 
+    wxGrid_GetDefaultRendererForCell cobj__obj  (toCInt row)  (toCInt col)  
+foreign import ccall "wxGrid_GetDefaultRendererForCell" wxGrid_GetDefaultRendererForCell :: Ptr (TGrid a) -> CInt -> CInt -> IO (Ptr (TGridCellRenderer ()))
+
+-- | usage: (@gridGetDefaultRendererForType obj typeName@).
+gridGetDefaultRendererForType :: Grid  a -> String ->  IO (GridCellRenderer  ())
+gridGetDefaultRendererForType _obj typeName 
+  = withObjectResult $
+    withObjectRef "gridGetDefaultRendererForType" _obj $ \cobj__obj -> 
+    withStringPtr typeName $ \cobj_typeName -> 
+    wxGrid_GetDefaultRendererForType cobj__obj  cobj_typeName  
+foreign import ccall "wxGrid_GetDefaultRendererForType" wxGrid_GetDefaultRendererForType :: Ptr (TGrid a) -> Ptr (TWxString b) -> IO (Ptr (TGridCellRenderer ()))
+
+-- | usage: (@gridGetDefaultRowLabelSize obj@).
+gridGetDefaultRowLabelSize :: Grid  a ->  IO Int
+gridGetDefaultRowLabelSize _obj 
+  = withIntResult $
+    withObjectRef "gridGetDefaultRowLabelSize" _obj $ \cobj__obj -> 
+    wxGrid_GetDefaultRowLabelSize cobj__obj  
+foreign import ccall "wxGrid_GetDefaultRowLabelSize" wxGrid_GetDefaultRowLabelSize :: Ptr (TGrid a) -> IO CInt
+
+-- | usage: (@gridGetDefaultRowSize obj@).
+gridGetDefaultRowSize :: Grid  a ->  IO Int
+gridGetDefaultRowSize _obj 
+  = withIntResult $
+    withObjectRef "gridGetDefaultRowSize" _obj $ \cobj__obj -> 
+    wxGrid_GetDefaultRowSize cobj__obj  
+foreign import ccall "wxGrid_GetDefaultRowSize" wxGrid_GetDefaultRowSize :: Ptr (TGrid a) -> IO CInt
+
+-- | usage: (@gridGetGridCursorCol obj@).
+gridGetGridCursorCol :: Grid  a ->  IO Int
+gridGetGridCursorCol _obj 
+  = withIntResult $
+    withObjectRef "gridGetGridCursorCol" _obj $ \cobj__obj -> 
+    wxGrid_GetGridCursorCol cobj__obj  
+foreign import ccall "wxGrid_GetGridCursorCol" wxGrid_GetGridCursorCol :: Ptr (TGrid a) -> IO CInt
+
+-- | usage: (@gridGetGridCursorRow obj@).
+gridGetGridCursorRow :: Grid  a ->  IO Int
+gridGetGridCursorRow _obj 
+  = withIntResult $
+    withObjectRef "gridGetGridCursorRow" _obj $ \cobj__obj -> 
+    wxGrid_GetGridCursorRow cobj__obj  
+foreign import ccall "wxGrid_GetGridCursorRow" wxGrid_GetGridCursorRow :: Ptr (TGrid a) -> IO CInt
+
+-- | usage: (@gridGetGridLineColour obj@).
+gridGetGridLineColour :: Grid  a ->  IO (Color)
+gridGetGridLineColour _obj 
+  = withRefColour $ \pref -> 
+    withObjectRef "gridGetGridLineColour" _obj $ \cobj__obj -> 
+    wxGrid_GetGridLineColour cobj__obj   pref
+foreign import ccall "wxGrid_GetGridLineColour" wxGrid_GetGridLineColour :: Ptr (TGrid a) -> Ptr (TColour ()) -> IO ()
+
+-- | usage: (@gridGetLabelBackgroundColour obj@).
+gridGetLabelBackgroundColour :: Grid  a ->  IO (Color)
+gridGetLabelBackgroundColour _obj 
+  = withRefColour $ \pref -> 
+    withObjectRef "gridGetLabelBackgroundColour" _obj $ \cobj__obj -> 
+    wxGrid_GetLabelBackgroundColour cobj__obj   pref
+foreign import ccall "wxGrid_GetLabelBackgroundColour" wxGrid_GetLabelBackgroundColour :: Ptr (TGrid a) -> Ptr (TColour ()) -> IO ()
+
+-- | usage: (@gridGetLabelFont obj@).
+gridGetLabelFont :: Grid  a ->  IO (Font  ())
+gridGetLabelFont _obj 
+  = withRefFont $ \pref -> 
+    withObjectRef "gridGetLabelFont" _obj $ \cobj__obj -> 
+    wxGrid_GetLabelFont cobj__obj   pref
+foreign import ccall "wxGrid_GetLabelFont" wxGrid_GetLabelFont :: Ptr (TGrid a) -> Ptr (TFont ()) -> IO ()
+
+-- | usage: (@gridGetLabelTextColour obj@).
+gridGetLabelTextColour :: Grid  a ->  IO (Color)
+gridGetLabelTextColour _obj 
+  = withRefColour $ \pref -> 
+    withObjectRef "gridGetLabelTextColour" _obj $ \cobj__obj -> 
+    wxGrid_GetLabelTextColour cobj__obj   pref
+foreign import ccall "wxGrid_GetLabelTextColour" wxGrid_GetLabelTextColour :: Ptr (TGrid a) -> Ptr (TColour ()) -> IO ()
+
+-- | usage: (@gridGetNumberCols obj@).
+gridGetNumberCols :: Grid  a ->  IO Int
+gridGetNumberCols _obj 
+  = withIntResult $
+    withObjectRef "gridGetNumberCols" _obj $ \cobj__obj -> 
+    wxGrid_GetNumberCols cobj__obj  
+foreign import ccall "wxGrid_GetNumberCols" wxGrid_GetNumberCols :: Ptr (TGrid a) -> IO CInt
+
+-- | usage: (@gridGetNumberRows obj@).
+gridGetNumberRows :: Grid  a ->  IO Int
+gridGetNumberRows _obj 
+  = withIntResult $
+    withObjectRef "gridGetNumberRows" _obj $ \cobj__obj -> 
+    wxGrid_GetNumberRows cobj__obj  
+foreign import ccall "wxGrid_GetNumberRows" wxGrid_GetNumberRows :: Ptr (TGrid a) -> IO CInt
+
+-- | usage: (@gridGetRowLabelAlignment obj@).
+gridGetRowLabelAlignment :: Grid  a ->  IO Size
+gridGetRowLabelAlignment _obj 
+  = withSizeResult $ \pw ph -> 
+    withObjectRef "gridGetRowLabelAlignment" _obj $ \cobj__obj -> 
+    wxGrid_GetRowLabelAlignment cobj__obj   pw ph
+foreign import ccall "wxGrid_GetRowLabelAlignment" wxGrid_GetRowLabelAlignment :: Ptr (TGrid a) -> Ptr CInt -> Ptr CInt -> IO ()
+
+-- | usage: (@gridGetRowLabelSize obj@).
+gridGetRowLabelSize :: Grid  a ->  IO Int
+gridGetRowLabelSize _obj 
+  = withIntResult $
+    withObjectRef "gridGetRowLabelSize" _obj $ \cobj__obj -> 
+    wxGrid_GetRowLabelSize cobj__obj  
+foreign import ccall "wxGrid_GetRowLabelSize" wxGrid_GetRowLabelSize :: Ptr (TGrid a) -> IO CInt
+
+-- | usage: (@gridGetRowLabelValue obj row@).
+gridGetRowLabelValue :: Grid  a -> Int ->  IO (String)
+gridGetRowLabelValue _obj row 
+  = withManagedStringResult $
+    withObjectRef "gridGetRowLabelValue" _obj $ \cobj__obj -> 
+    wxGrid_GetRowLabelValue cobj__obj  (toCInt row)  
+foreign import ccall "wxGrid_GetRowLabelValue" wxGrid_GetRowLabelValue :: Ptr (TGrid a) -> CInt -> IO (Ptr (TWxString ()))
+
+-- | usage: (@gridGetRowSize obj row@).
+gridGetRowSize :: Grid  a -> Int ->  IO Int
+gridGetRowSize _obj row 
+  = withIntResult $
+    withObjectRef "gridGetRowSize" _obj $ \cobj__obj -> 
+    wxGrid_GetRowSize cobj__obj  (toCInt row)  
+foreign import ccall "wxGrid_GetRowSize" wxGrid_GetRowSize :: Ptr (TGrid a) -> CInt -> IO CInt
+
+-- | usage: (@gridGetSelectedCells obj@).
+gridGetSelectedCells :: Grid  a ->  IO (GridCellCoordsArray  ())
+gridGetSelectedCells _obj 
+  = withRefGridCellCoordsArray $ \pref -> 
+    withObjectRef "gridGetSelectedCells" _obj $ \cobj__obj -> 
+    wxGrid_GetSelectedCells cobj__obj   pref
+foreign import ccall "wxGrid_GetSelectedCells" wxGrid_GetSelectedCells :: Ptr (TGrid a) -> Ptr (TGridCellCoordsArray ()) -> IO ()
+
+-- | usage: (@gridGetSelectedCols obj@).
+gridGetSelectedCols :: Grid  a ->  IO [Int]
+gridGetSelectedCols _obj 
+  = withArrayIntResult $ \arr -> 
+    withObjectRef "gridGetSelectedCols" _obj $ \cobj__obj -> 
+    wxGrid_GetSelectedCols cobj__obj   arr
+foreign import ccall "wxGrid_GetSelectedCols" wxGrid_GetSelectedCols :: Ptr (TGrid a) -> Ptr CInt -> IO CInt
+
+-- | usage: (@gridGetSelectedRows obj@).
+gridGetSelectedRows :: Grid  a ->  IO [Int]
+gridGetSelectedRows _obj 
+  = withArrayIntResult $ \arr -> 
+    withObjectRef "gridGetSelectedRows" _obj $ \cobj__obj -> 
+    wxGrid_GetSelectedRows cobj__obj   arr
+foreign import ccall "wxGrid_GetSelectedRows" wxGrid_GetSelectedRows :: Ptr (TGrid a) -> Ptr CInt -> IO CInt
+
+-- | usage: (@gridGetSelectionBackground obj@).
+gridGetSelectionBackground :: Grid  a ->  IO (Color)
+gridGetSelectionBackground _obj 
+  = withRefColour $ \pref -> 
+    withObjectRef "gridGetSelectionBackground" _obj $ \cobj__obj -> 
+    wxGrid_GetSelectionBackground cobj__obj   pref
+foreign import ccall "wxGrid_GetSelectionBackground" wxGrid_GetSelectionBackground :: Ptr (TGrid a) -> Ptr (TColour ()) -> IO ()
+
+-- | usage: (@gridGetSelectionBlockBottomRight obj@).
+gridGetSelectionBlockBottomRight :: Grid  a ->  IO (GridCellCoordsArray  ())
+gridGetSelectionBlockBottomRight _obj 
+  = withRefGridCellCoordsArray $ \pref -> 
+    withObjectRef "gridGetSelectionBlockBottomRight" _obj $ \cobj__obj -> 
+    wxGrid_GetSelectionBlockBottomRight cobj__obj   pref
+foreign import ccall "wxGrid_GetSelectionBlockBottomRight" wxGrid_GetSelectionBlockBottomRight :: Ptr (TGrid a) -> Ptr (TGridCellCoordsArray ()) -> IO ()
+
+-- | usage: (@gridGetSelectionBlockTopLeft obj@).
+gridGetSelectionBlockTopLeft :: Grid  a ->  IO (GridCellCoordsArray  ())
+gridGetSelectionBlockTopLeft _obj 
+  = withRefGridCellCoordsArray $ \pref -> 
+    withObjectRef "gridGetSelectionBlockTopLeft" _obj $ \cobj__obj -> 
+    wxGrid_GetSelectionBlockTopLeft cobj__obj   pref
+foreign import ccall "wxGrid_GetSelectionBlockTopLeft" wxGrid_GetSelectionBlockTopLeft :: Ptr (TGrid a) -> Ptr (TGridCellCoordsArray ()) -> IO ()
+
+-- | usage: (@gridGetSelectionForeground obj@).
+gridGetSelectionForeground :: Grid  a ->  IO (Color)
+gridGetSelectionForeground _obj 
+  = withRefColour $ \pref -> 
+    withObjectRef "gridGetSelectionForeground" _obj $ \cobj__obj -> 
+    wxGrid_GetSelectionForeground cobj__obj   pref
+foreign import ccall "wxGrid_GetSelectionForeground" wxGrid_GetSelectionForeground :: Ptr (TGrid a) -> Ptr (TColour ()) -> IO ()
+
+-- | usage: (@gridGetTable obj@).
+gridGetTable :: Grid  a ->  IO (GridTableBase  ())
+gridGetTable _obj 
+  = withObjectResult $
+    withObjectRef "gridGetTable" _obj $ \cobj__obj -> 
+    wxGrid_GetTable cobj__obj  
+foreign import ccall "wxGrid_GetTable" wxGrid_GetTable :: Ptr (TGrid a) -> IO (Ptr (TGridTableBase ()))
+
+-- | usage: (@gridGetTextBoxSize obj dc countlines@).
+gridGetTextBoxSize :: Grid  a -> DC  b -> [String] ->  IO Size
+gridGetTextBoxSize _obj dc countlines 
+  = withSizeResult $ \pw ph -> 
+    withObjectRef "gridGetTextBoxSize" _obj $ \cobj__obj -> 
+    withObjectPtr dc $ \cobj_dc -> 
+    withArrayWString countlines $ \carrlen_countlines carr_countlines -> 
+    wxGrid_GetTextBoxSize cobj__obj  cobj_dc  carrlen_countlines carr_countlines   pw ph
+foreign import ccall "wxGrid_GetTextBoxSize" wxGrid_GetTextBoxSize :: Ptr (TGrid a) -> Ptr (TDC b) -> CInt -> Ptr (Ptr CWchar) -> Ptr CInt -> Ptr CInt -> IO ()
+
+-- | usage: (@gridGridLinesEnabled obj@).
+gridGridLinesEnabled :: Grid  a ->  IO Int
+gridGridLinesEnabled _obj 
+  = withIntResult $
+    withObjectRef "gridGridLinesEnabled" _obj $ \cobj__obj -> 
+    wxGrid_GridLinesEnabled cobj__obj  
+foreign import ccall "wxGrid_GridLinesEnabled" wxGrid_GridLinesEnabled :: Ptr (TGrid a) -> IO CInt
+
+-- | usage: (@gridHideCellEditControl obj@).
+gridHideCellEditControl :: Grid  a ->  IO ()
+gridHideCellEditControl _obj 
+  = withObjectRef "gridHideCellEditControl" _obj $ \cobj__obj -> 
+    wxGrid_HideCellEditControl cobj__obj  
+foreign import ccall "wxGrid_HideCellEditControl" wxGrid_HideCellEditControl :: Ptr (TGrid a) -> IO ()
+
+-- | usage: (@gridInsertCols obj pos numCols updateLabels@).
+gridInsertCols :: Grid  a -> Int -> Int -> Bool ->  IO Bool
+gridInsertCols _obj pos numCols updateLabels 
+  = withBoolResult $
+    withObjectRef "gridInsertCols" _obj $ \cobj__obj -> 
+    wxGrid_InsertCols cobj__obj  (toCInt pos)  (toCInt numCols)  (toCBool updateLabels)  
+foreign import ccall "wxGrid_InsertCols" wxGrid_InsertCols :: Ptr (TGrid a) -> CInt -> CInt -> CBool -> IO CBool
+
+-- | usage: (@gridInsertRows obj pos numRows updateLabels@).
+gridInsertRows :: Grid  a -> Int -> Int -> Bool ->  IO Bool
+gridInsertRows _obj pos numRows updateLabels 
+  = withBoolResult $
+    withObjectRef "gridInsertRows" _obj $ \cobj__obj -> 
+    wxGrid_InsertRows cobj__obj  (toCInt pos)  (toCInt numRows)  (toCBool updateLabels)  
+foreign import ccall "wxGrid_InsertRows" wxGrid_InsertRows :: Ptr (TGrid a) -> CInt -> CInt -> CBool -> IO CBool
+
+-- | usage: (@gridIsCellEditControlEnabled obj@).
+gridIsCellEditControlEnabled :: Grid  a ->  IO Bool
+gridIsCellEditControlEnabled _obj 
+  = withBoolResult $
+    withObjectRef "gridIsCellEditControlEnabled" _obj $ \cobj__obj -> 
+    wxGrid_IsCellEditControlEnabled cobj__obj  
+foreign import ccall "wxGrid_IsCellEditControlEnabled" wxGrid_IsCellEditControlEnabled :: Ptr (TGrid a) -> IO CBool
+
+-- | usage: (@gridIsCellEditControlShown obj@).
+gridIsCellEditControlShown :: Grid  a ->  IO Bool
+gridIsCellEditControlShown _obj 
+  = withBoolResult $
+    withObjectRef "gridIsCellEditControlShown" _obj $ \cobj__obj -> 
+    wxGrid_IsCellEditControlShown cobj__obj  
+foreign import ccall "wxGrid_IsCellEditControlShown" wxGrid_IsCellEditControlShown :: Ptr (TGrid a) -> IO CBool
+
+-- | usage: (@gridIsCurrentCellReadOnly obj@).
+gridIsCurrentCellReadOnly :: Grid  a ->  IO Bool
+gridIsCurrentCellReadOnly _obj 
+  = withBoolResult $
+    withObjectRef "gridIsCurrentCellReadOnly" _obj $ \cobj__obj -> 
+    wxGrid_IsCurrentCellReadOnly cobj__obj  
+foreign import ccall "wxGrid_IsCurrentCellReadOnly" wxGrid_IsCurrentCellReadOnly :: Ptr (TGrid a) -> IO CBool
+
+-- | usage: (@gridIsEditable obj@).
+gridIsEditable :: Grid  a ->  IO Bool
+gridIsEditable _obj 
+  = withBoolResult $
+    withObjectRef "gridIsEditable" _obj $ \cobj__obj -> 
+    wxGrid_IsEditable cobj__obj  
+foreign import ccall "wxGrid_IsEditable" wxGrid_IsEditable :: Ptr (TGrid a) -> IO CBool
+
+-- | usage: (@gridIsInSelection obj row col@).
+gridIsInSelection :: Grid  a -> Int -> Int ->  IO Bool
+gridIsInSelection _obj row col 
+  = withBoolResult $
+    withObjectRef "gridIsInSelection" _obj $ \cobj__obj -> 
+    wxGrid_IsInSelection cobj__obj  (toCInt row)  (toCInt col)  
+foreign import ccall "wxGrid_IsInSelection" wxGrid_IsInSelection :: Ptr (TGrid a) -> CInt -> CInt -> IO CBool
+
+-- | usage: (@gridIsReadOnly obj row col@).
+gridIsReadOnly :: Grid  a -> Int -> Int ->  IO Bool
+gridIsReadOnly _obj row col 
+  = withBoolResult $
+    withObjectRef "gridIsReadOnly" _obj $ \cobj__obj -> 
+    wxGrid_IsReadOnly cobj__obj  (toCInt row)  (toCInt col)  
+foreign import ccall "wxGrid_IsReadOnly" wxGrid_IsReadOnly :: Ptr (TGrid a) -> CInt -> CInt -> IO CBool
+
+-- | usage: (@gridIsSelection obj@).
+gridIsSelection :: Grid  a ->  IO Bool
+gridIsSelection _obj 
+  = withBoolResult $
+    withObjectRef "gridIsSelection" _obj $ \cobj__obj -> 
+    wxGrid_IsSelection cobj__obj  
+foreign import ccall "wxGrid_IsSelection" wxGrid_IsSelection :: Ptr (TGrid a) -> IO CBool
+
+-- | usage: (@gridIsVisible obj row col wholeCellVisible@).
+gridIsVisible :: Grid  a -> Int -> Int -> Bool ->  IO Bool
+gridIsVisible _obj row col wholeCellVisible 
+  = withBoolResult $
+    withObjectRef "gridIsVisible" _obj $ \cobj__obj -> 
+    wxGrid_IsVisible cobj__obj  (toCInt row)  (toCInt col)  (toCBool wholeCellVisible)  
+foreign import ccall "wxGrid_IsVisible" wxGrid_IsVisible :: Ptr (TGrid a) -> CInt -> CInt -> CBool -> IO CBool
+
+-- | usage: (@gridMakeCellVisible obj row col@).
+gridMakeCellVisible :: Grid  a -> Int -> Int ->  IO ()
+gridMakeCellVisible _obj row col 
+  = withObjectRef "gridMakeCellVisible" _obj $ \cobj__obj -> 
+    wxGrid_MakeCellVisible cobj__obj  (toCInt row)  (toCInt col)  
+foreign import ccall "wxGrid_MakeCellVisible" wxGrid_MakeCellVisible :: Ptr (TGrid a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@gridMoveCursorDown obj expandSelection@).
+gridMoveCursorDown :: Grid  a -> Bool ->  IO Bool
+gridMoveCursorDown _obj expandSelection 
+  = withBoolResult $
+    withObjectRef "gridMoveCursorDown" _obj $ \cobj__obj -> 
+    wxGrid_MoveCursorDown cobj__obj  (toCBool expandSelection)  
+foreign import ccall "wxGrid_MoveCursorDown" wxGrid_MoveCursorDown :: Ptr (TGrid a) -> CBool -> IO CBool
+
+-- | usage: (@gridMoveCursorDownBlock obj expandSelection@).
+gridMoveCursorDownBlock :: Grid  a -> Bool ->  IO Bool
+gridMoveCursorDownBlock _obj expandSelection 
+  = withBoolResult $
+    withObjectRef "gridMoveCursorDownBlock" _obj $ \cobj__obj -> 
+    wxGrid_MoveCursorDownBlock cobj__obj  (toCBool expandSelection)  
+foreign import ccall "wxGrid_MoveCursorDownBlock" wxGrid_MoveCursorDownBlock :: Ptr (TGrid a) -> CBool -> IO CBool
+
+-- | usage: (@gridMoveCursorLeft obj expandSelection@).
+gridMoveCursorLeft :: Grid  a -> Bool ->  IO Bool
+gridMoveCursorLeft _obj expandSelection 
+  = withBoolResult $
+    withObjectRef "gridMoveCursorLeft" _obj $ \cobj__obj -> 
+    wxGrid_MoveCursorLeft cobj__obj  (toCBool expandSelection)  
+foreign import ccall "wxGrid_MoveCursorLeft" wxGrid_MoveCursorLeft :: Ptr (TGrid a) -> CBool -> IO CBool
+
+-- | usage: (@gridMoveCursorLeftBlock obj expandSelection@).
+gridMoveCursorLeftBlock :: Grid  a -> Bool ->  IO Bool
+gridMoveCursorLeftBlock _obj expandSelection 
+  = withBoolResult $
+    withObjectRef "gridMoveCursorLeftBlock" _obj $ \cobj__obj -> 
+    wxGrid_MoveCursorLeftBlock cobj__obj  (toCBool expandSelection)  
+foreign import ccall "wxGrid_MoveCursorLeftBlock" wxGrid_MoveCursorLeftBlock :: Ptr (TGrid a) -> CBool -> IO CBool
+
+-- | usage: (@gridMoveCursorRight obj expandSelection@).
+gridMoveCursorRight :: Grid  a -> Bool ->  IO Bool
+gridMoveCursorRight _obj expandSelection 
+  = withBoolResult $
+    withObjectRef "gridMoveCursorRight" _obj $ \cobj__obj -> 
+    wxGrid_MoveCursorRight cobj__obj  (toCBool expandSelection)  
+foreign import ccall "wxGrid_MoveCursorRight" wxGrid_MoveCursorRight :: Ptr (TGrid a) -> CBool -> IO CBool
+
+-- | usage: (@gridMoveCursorRightBlock obj expandSelection@).
+gridMoveCursorRightBlock :: Grid  a -> Bool ->  IO Bool
+gridMoveCursorRightBlock _obj expandSelection 
+  = withBoolResult $
+    withObjectRef "gridMoveCursorRightBlock" _obj $ \cobj__obj -> 
+    wxGrid_MoveCursorRightBlock cobj__obj  (toCBool expandSelection)  
+foreign import ccall "wxGrid_MoveCursorRightBlock" wxGrid_MoveCursorRightBlock :: Ptr (TGrid a) -> CBool -> IO CBool
+
+-- | usage: (@gridMoveCursorUp obj expandSelection@).
+gridMoveCursorUp :: Grid  a -> Bool ->  IO Bool
+gridMoveCursorUp _obj expandSelection 
+  = withBoolResult $
+    withObjectRef "gridMoveCursorUp" _obj $ \cobj__obj -> 
+    wxGrid_MoveCursorUp cobj__obj  (toCBool expandSelection)  
+foreign import ccall "wxGrid_MoveCursorUp" wxGrid_MoveCursorUp :: Ptr (TGrid a) -> CBool -> IO CBool
+
+-- | usage: (@gridMoveCursorUpBlock obj expandSelection@).
+gridMoveCursorUpBlock :: Grid  a -> Bool ->  IO Bool
+gridMoveCursorUpBlock _obj expandSelection 
+  = withBoolResult $
+    withObjectRef "gridMoveCursorUpBlock" _obj $ \cobj__obj -> 
+    wxGrid_MoveCursorUpBlock cobj__obj  (toCBool expandSelection)  
+foreign import ccall "wxGrid_MoveCursorUpBlock" wxGrid_MoveCursorUpBlock :: Ptr (TGrid a) -> CBool -> IO CBool
+
+-- | usage: (@gridMovePageDown obj@).
+gridMovePageDown :: Grid  a ->  IO Bool
+gridMovePageDown _obj 
+  = withBoolResult $
+    withObjectRef "gridMovePageDown" _obj $ \cobj__obj -> 
+    wxGrid_MovePageDown cobj__obj  
+foreign import ccall "wxGrid_MovePageDown" wxGrid_MovePageDown :: Ptr (TGrid a) -> IO CBool
+
+-- | usage: (@gridMovePageUp obj@).
+gridMovePageUp :: Grid  a ->  IO Bool
+gridMovePageUp _obj 
+  = withBoolResult $
+    withObjectRef "gridMovePageUp" _obj $ \cobj__obj -> 
+    wxGrid_MovePageUp cobj__obj  
+foreign import ccall "wxGrid_MovePageUp" wxGrid_MovePageUp :: Ptr (TGrid a) -> IO CBool
+
+-- | usage: (@gridProcessTableMessage obj evt@).
+gridProcessTableMessage :: Grid  a -> Event  b ->  IO Bool
+gridProcessTableMessage _obj evt 
+  = withBoolResult $
+    withObjectRef "gridProcessTableMessage" _obj $ \cobj__obj -> 
+    withObjectPtr evt $ \cobj_evt -> 
+    wxGrid_ProcessTableMessage cobj__obj  cobj_evt  
+foreign import ccall "wxGrid_ProcessTableMessage" wxGrid_ProcessTableMessage :: Ptr (TGrid a) -> Ptr (TEvent b) -> IO CBool
+
+-- | usage: (@gridRangeSelectEventAltDown obj@).
+gridRangeSelectEventAltDown :: GridRangeSelectEvent  a ->  IO Bool
+gridRangeSelectEventAltDown _obj 
+  = withBoolResult $
+    withObjectRef "gridRangeSelectEventAltDown" _obj $ \cobj__obj -> 
+    wxGridRangeSelectEvent_AltDown cobj__obj  
+foreign import ccall "wxGridRangeSelectEvent_AltDown" wxGridRangeSelectEvent_AltDown :: Ptr (TGridRangeSelectEvent a) -> IO CBool
+
+-- | usage: (@gridRangeSelectEventControlDown obj@).
+gridRangeSelectEventControlDown :: GridRangeSelectEvent  a ->  IO Bool
+gridRangeSelectEventControlDown _obj 
+  = withBoolResult $
+    withObjectRef "gridRangeSelectEventControlDown" _obj $ \cobj__obj -> 
+    wxGridRangeSelectEvent_ControlDown cobj__obj  
+foreign import ccall "wxGridRangeSelectEvent_ControlDown" wxGridRangeSelectEvent_ControlDown :: Ptr (TGridRangeSelectEvent a) -> IO CBool
+
+-- | usage: (@gridRangeSelectEventGetBottomRightCoords obj@).
+gridRangeSelectEventGetBottomRightCoords :: GridRangeSelectEvent  a ->  IO Point
+gridRangeSelectEventGetBottomRightCoords _obj 
+  = withPointResult $ \px py -> 
+    withObjectRef "gridRangeSelectEventGetBottomRightCoords" _obj $ \cobj__obj -> 
+    wxGridRangeSelectEvent_GetBottomRightCoords cobj__obj   px py
+foreign import ccall "wxGridRangeSelectEvent_GetBottomRightCoords" wxGridRangeSelectEvent_GetBottomRightCoords :: Ptr (TGridRangeSelectEvent a) -> Ptr CInt -> Ptr CInt -> IO ()
+
+-- | usage: (@gridRangeSelectEventGetBottomRow obj@).
+gridRangeSelectEventGetBottomRow :: GridRangeSelectEvent  a ->  IO Int
+gridRangeSelectEventGetBottomRow _obj 
+  = withIntResult $
+    withObjectRef "gridRangeSelectEventGetBottomRow" _obj $ \cobj__obj -> 
+    wxGridRangeSelectEvent_GetBottomRow cobj__obj  
+foreign import ccall "wxGridRangeSelectEvent_GetBottomRow" wxGridRangeSelectEvent_GetBottomRow :: Ptr (TGridRangeSelectEvent a) -> IO CInt
+
+-- | usage: (@gridRangeSelectEventGetLeftCol obj@).
+gridRangeSelectEventGetLeftCol :: GridRangeSelectEvent  a ->  IO Int
+gridRangeSelectEventGetLeftCol _obj 
+  = withIntResult $
+    withObjectRef "gridRangeSelectEventGetLeftCol" _obj $ \cobj__obj -> 
+    wxGridRangeSelectEvent_GetLeftCol cobj__obj  
+foreign import ccall "wxGridRangeSelectEvent_GetLeftCol" wxGridRangeSelectEvent_GetLeftCol :: Ptr (TGridRangeSelectEvent a) -> IO CInt
+
+-- | usage: (@gridRangeSelectEventGetRightCol obj@).
+gridRangeSelectEventGetRightCol :: GridRangeSelectEvent  a ->  IO Int
+gridRangeSelectEventGetRightCol _obj 
+  = withIntResult $
+    withObjectRef "gridRangeSelectEventGetRightCol" _obj $ \cobj__obj -> 
+    wxGridRangeSelectEvent_GetRightCol cobj__obj  
+foreign import ccall "wxGridRangeSelectEvent_GetRightCol" wxGridRangeSelectEvent_GetRightCol :: Ptr (TGridRangeSelectEvent a) -> IO CInt
+
+-- | usage: (@gridRangeSelectEventGetTopLeftCoords obj@).
+gridRangeSelectEventGetTopLeftCoords :: GridRangeSelectEvent  a ->  IO Point
+gridRangeSelectEventGetTopLeftCoords _obj 
+  = withPointResult $ \px py -> 
+    withObjectRef "gridRangeSelectEventGetTopLeftCoords" _obj $ \cobj__obj -> 
+    wxGridRangeSelectEvent_GetTopLeftCoords cobj__obj   px py
+foreign import ccall "wxGridRangeSelectEvent_GetTopLeftCoords" wxGridRangeSelectEvent_GetTopLeftCoords :: Ptr (TGridRangeSelectEvent a) -> Ptr CInt -> Ptr CInt -> IO ()
+
+-- | usage: (@gridRangeSelectEventGetTopRow obj@).
+gridRangeSelectEventGetTopRow :: GridRangeSelectEvent  a ->  IO Int
+gridRangeSelectEventGetTopRow _obj 
+  = withIntResult $
+    withObjectRef "gridRangeSelectEventGetTopRow" _obj $ \cobj__obj -> 
+    wxGridRangeSelectEvent_GetTopRow cobj__obj  
+foreign import ccall "wxGridRangeSelectEvent_GetTopRow" wxGridRangeSelectEvent_GetTopRow :: Ptr (TGridRangeSelectEvent a) -> IO CInt
+
+-- | usage: (@gridRangeSelectEventMetaDown obj@).
+gridRangeSelectEventMetaDown :: GridRangeSelectEvent  a ->  IO Bool
+gridRangeSelectEventMetaDown _obj 
+  = withBoolResult $
+    withObjectRef "gridRangeSelectEventMetaDown" _obj $ \cobj__obj -> 
+    wxGridRangeSelectEvent_MetaDown cobj__obj  
+foreign import ccall "wxGridRangeSelectEvent_MetaDown" wxGridRangeSelectEvent_MetaDown :: Ptr (TGridRangeSelectEvent a) -> IO CBool
+
+-- | usage: (@gridRangeSelectEventSelecting obj@).
+gridRangeSelectEventSelecting :: GridRangeSelectEvent  a ->  IO Bool
+gridRangeSelectEventSelecting _obj 
+  = withBoolResult $
+    withObjectRef "gridRangeSelectEventSelecting" _obj $ \cobj__obj -> 
+    wxGridRangeSelectEvent_Selecting cobj__obj  
+foreign import ccall "wxGridRangeSelectEvent_Selecting" wxGridRangeSelectEvent_Selecting :: Ptr (TGridRangeSelectEvent a) -> IO CBool
+
+-- | usage: (@gridRangeSelectEventShiftDown obj@).
+gridRangeSelectEventShiftDown :: GridRangeSelectEvent  a ->  IO Bool
+gridRangeSelectEventShiftDown _obj 
+  = withBoolResult $
+    withObjectRef "gridRangeSelectEventShiftDown" _obj $ \cobj__obj -> 
+    wxGridRangeSelectEvent_ShiftDown cobj__obj  
+foreign import ccall "wxGridRangeSelectEvent_ShiftDown" wxGridRangeSelectEvent_ShiftDown :: Ptr (TGridRangeSelectEvent a) -> IO CBool
+
+-- | usage: (@gridRegisterDataType obj typeName renderer editor@).
+gridRegisterDataType :: Grid  a -> String -> GridCellRenderer  c -> GridCellEditor  d ->  IO ()
+gridRegisterDataType _obj typeName renderer editor 
+  = withObjectRef "gridRegisterDataType" _obj $ \cobj__obj -> 
+    withStringPtr typeName $ \cobj_typeName -> 
+    withObjectPtr renderer $ \cobj_renderer -> 
+    withObjectPtr editor $ \cobj_editor -> 
+    wxGrid_RegisterDataType cobj__obj  cobj_typeName  cobj_renderer  cobj_editor  
+foreign import ccall "wxGrid_RegisterDataType" wxGrid_RegisterDataType :: Ptr (TGrid a) -> Ptr (TWxString b) -> Ptr (TGridCellRenderer c) -> Ptr (TGridCellEditor d) -> IO ()
+
+-- | usage: (@gridSaveEditControlValue obj@).
+gridSaveEditControlValue :: Grid  a ->  IO ()
+gridSaveEditControlValue _obj 
+  = withObjectRef "gridSaveEditControlValue" _obj $ \cobj__obj -> 
+    wxGrid_SaveEditControlValue cobj__obj  
+foreign import ccall "wxGrid_SaveEditControlValue" wxGrid_SaveEditControlValue :: Ptr (TGrid a) -> IO ()
+
+-- | usage: (@gridSelectAll obj@).
+gridSelectAll :: Grid  a ->  IO ()
+gridSelectAll _obj 
+  = withObjectRef "gridSelectAll" _obj $ \cobj__obj -> 
+    wxGrid_SelectAll cobj__obj  
+foreign import ccall "wxGrid_SelectAll" wxGrid_SelectAll :: Ptr (TGrid a) -> IO ()
+
+-- | usage: (@gridSelectBlock obj topRow leftCol bottomRow rightCol addToSelected@).
+gridSelectBlock :: Grid  a -> Int -> Int -> Int -> Int -> Bool ->  IO ()
+gridSelectBlock _obj topRow leftCol bottomRow rightCol addToSelected 
+  = withObjectRef "gridSelectBlock" _obj $ \cobj__obj -> 
+    wxGrid_SelectBlock cobj__obj  (toCInt topRow)  (toCInt leftCol)  (toCInt bottomRow)  (toCInt rightCol)  (toCBool addToSelected)  
+foreign import ccall "wxGrid_SelectBlock" wxGrid_SelectBlock :: Ptr (TGrid a) -> CInt -> CInt -> CInt -> CInt -> CBool -> IO ()
+
+-- | usage: (@gridSelectCol obj col addToSelected@).
+gridSelectCol :: Grid  a -> Int -> Bool ->  IO ()
+gridSelectCol _obj col addToSelected 
+  = withObjectRef "gridSelectCol" _obj $ \cobj__obj -> 
+    wxGrid_SelectCol cobj__obj  (toCInt col)  (toCBool addToSelected)  
+foreign import ccall "wxGrid_SelectCol" wxGrid_SelectCol :: Ptr (TGrid a) -> CInt -> CBool -> IO ()
+
+-- | usage: (@gridSelectRow obj row addToSelected@).
+gridSelectRow :: Grid  a -> Int -> Bool ->  IO ()
+gridSelectRow _obj row addToSelected 
+  = withObjectRef "gridSelectRow" _obj $ \cobj__obj -> 
+    wxGrid_SelectRow cobj__obj  (toCInt row)  (toCBool addToSelected)  
+foreign import ccall "wxGrid_SelectRow" wxGrid_SelectRow :: Ptr (TGrid a) -> CInt -> CBool -> IO ()
+
+-- | usage: (@gridSetCellAlignment obj row col horiz vert@).
+gridSetCellAlignment :: Grid  a -> Int -> Int -> Int -> Int ->  IO ()
+gridSetCellAlignment _obj row col horiz vert 
+  = withObjectRef "gridSetCellAlignment" _obj $ \cobj__obj -> 
+    wxGrid_SetCellAlignment cobj__obj  (toCInt row)  (toCInt col)  (toCInt horiz)  (toCInt vert)  
+foreign import ccall "wxGrid_SetCellAlignment" wxGrid_SetCellAlignment :: Ptr (TGrid a) -> CInt -> CInt -> CInt -> CInt -> IO ()
+
+-- | usage: (@gridSetCellBackgroundColour obj row col colour@).
+gridSetCellBackgroundColour :: Grid  a -> Int -> Int -> Color ->  IO ()
+gridSetCellBackgroundColour _obj row col colour 
+  = withObjectRef "gridSetCellBackgroundColour" _obj $ \cobj__obj -> 
+    withColourPtr colour $ \cobj_colour -> 
+    wxGrid_SetCellBackgroundColour cobj__obj  (toCInt row)  (toCInt col)  cobj_colour  
+foreign import ccall "wxGrid_SetCellBackgroundColour" wxGrid_SetCellBackgroundColour :: Ptr (TGrid a) -> CInt -> CInt -> Ptr (TColour d) -> IO ()
+
+-- | usage: (@gridSetCellEditor obj row col editor@).
+gridSetCellEditor :: Grid  a -> Int -> Int -> GridCellEditor  d ->  IO ()
+gridSetCellEditor _obj row col editor 
+  = withObjectRef "gridSetCellEditor" _obj $ \cobj__obj -> 
+    withObjectPtr editor $ \cobj_editor -> 
+    wxGrid_SetCellEditor cobj__obj  (toCInt row)  (toCInt col)  cobj_editor  
+foreign import ccall "wxGrid_SetCellEditor" wxGrid_SetCellEditor :: Ptr (TGrid a) -> CInt -> CInt -> Ptr (TGridCellEditor d) -> IO ()
+
+-- | usage: (@gridSetCellFont obj row col font@).
+gridSetCellFont :: Grid  a -> Int -> Int -> Font  d ->  IO ()
+gridSetCellFont _obj row col font 
+  = withObjectRef "gridSetCellFont" _obj $ \cobj__obj -> 
+    withObjectPtr font $ \cobj_font -> 
+    wxGrid_SetCellFont cobj__obj  (toCInt row)  (toCInt col)  cobj_font  
+foreign import ccall "wxGrid_SetCellFont" wxGrid_SetCellFont :: Ptr (TGrid a) -> CInt -> CInt -> Ptr (TFont d) -> IO ()
+
+-- | usage: (@gridSetCellHighlightColour obj col@).
+gridSetCellHighlightColour :: Grid  a -> Color ->  IO ()
+gridSetCellHighlightColour _obj col 
+  = withObjectRef "gridSetCellHighlightColour" _obj $ \cobj__obj -> 
+    withColourPtr col $ \cobj_col -> 
+    wxGrid_SetCellHighlightColour cobj__obj  cobj_col  
+foreign import ccall "wxGrid_SetCellHighlightColour" wxGrid_SetCellHighlightColour :: Ptr (TGrid a) -> Ptr (TColour b) -> IO ()
+
+-- | usage: (@gridSetCellRenderer obj row col renderer@).
+gridSetCellRenderer :: Grid  a -> Int -> Int -> GridCellRenderer  d ->  IO ()
+gridSetCellRenderer _obj row col renderer 
+  = withObjectRef "gridSetCellRenderer" _obj $ \cobj__obj -> 
+    withObjectPtr renderer $ \cobj_renderer -> 
+    wxGrid_SetCellRenderer cobj__obj  (toCInt row)  (toCInt col)  cobj_renderer  
+foreign import ccall "wxGrid_SetCellRenderer" wxGrid_SetCellRenderer :: Ptr (TGrid a) -> CInt -> CInt -> Ptr (TGridCellRenderer d) -> IO ()
+
+-- | usage: (@gridSetCellSize obj row col srowscol@).
+gridSetCellSize :: Grid  a -> Int -> Int -> Size ->  IO ()
+gridSetCellSize _obj row col srowscol 
+  = withObjectRef "gridSetCellSize" _obj $ \cobj__obj -> 
+    wxGrid_SetCellSize cobj__obj  (toCInt row)  (toCInt col)  (toCIntSizeW srowscol) (toCIntSizeH srowscol)  
+foreign import ccall "wxGrid_SetCellSize" wxGrid_SetCellSize :: Ptr (TGrid a) -> CInt -> CInt -> CInt -> CInt -> IO ()
+
+-- | usage: (@gridSetCellTextColour obj row col colour@).
+gridSetCellTextColour :: Grid  a -> Int -> Int -> Color ->  IO ()
+gridSetCellTextColour _obj row col colour 
+  = withObjectRef "gridSetCellTextColour" _obj $ \cobj__obj -> 
+    withColourPtr colour $ \cobj_colour -> 
+    wxGrid_SetCellTextColour cobj__obj  (toCInt row)  (toCInt col)  cobj_colour  
+foreign import ccall "wxGrid_SetCellTextColour" wxGrid_SetCellTextColour :: Ptr (TGrid a) -> CInt -> CInt -> Ptr (TColour d) -> IO ()
+
+-- | usage: (@gridSetCellValue obj row col s@).
+gridSetCellValue :: Grid  a -> Int -> Int -> String ->  IO ()
+gridSetCellValue _obj row col s 
+  = withObjectRef "gridSetCellValue" _obj $ \cobj__obj -> 
+    withStringPtr s $ \cobj_s -> 
+    wxGrid_SetCellValue cobj__obj  (toCInt row)  (toCInt col)  cobj_s  
+foreign import ccall "wxGrid_SetCellValue" wxGrid_SetCellValue :: Ptr (TGrid a) -> CInt -> CInt -> Ptr (TWxString d) -> IO ()
+
+-- | usage: (@gridSetColAttr obj col attr@).
+gridSetColAttr :: Grid  a -> Int -> GridCellAttr  c ->  IO ()
+gridSetColAttr _obj col attr 
+  = withObjectRef "gridSetColAttr" _obj $ \cobj__obj -> 
+    withObjectPtr attr $ \cobj_attr -> 
+    wxGrid_SetColAttr cobj__obj  (toCInt col)  cobj_attr  
+foreign import ccall "wxGrid_SetColAttr" wxGrid_SetColAttr :: Ptr (TGrid a) -> CInt -> Ptr (TGridCellAttr c) -> IO ()
+
+-- | usage: (@gridSetColFormatBool obj col@).
+gridSetColFormatBool :: Grid  a -> Int ->  IO ()
+gridSetColFormatBool _obj col 
+  = withObjectRef "gridSetColFormatBool" _obj $ \cobj__obj -> 
+    wxGrid_SetColFormatBool cobj__obj  (toCInt col)  
+foreign import ccall "wxGrid_SetColFormatBool" wxGrid_SetColFormatBool :: Ptr (TGrid a) -> CInt -> IO ()
+
+-- | usage: (@gridSetColFormatCustom obj col typeName@).
+gridSetColFormatCustom :: Grid  a -> Int -> String ->  IO ()
+gridSetColFormatCustom _obj col typeName 
+  = withObjectRef "gridSetColFormatCustom" _obj $ \cobj__obj -> 
+    withStringPtr typeName $ \cobj_typeName -> 
+    wxGrid_SetColFormatCustom cobj__obj  (toCInt col)  cobj_typeName  
+foreign import ccall "wxGrid_SetColFormatCustom" wxGrid_SetColFormatCustom :: Ptr (TGrid a) -> CInt -> Ptr (TWxString c) -> IO ()
+
+-- | usage: (@gridSetColFormatFloat obj col width precision@).
+gridSetColFormatFloat :: Grid  a -> Int -> Int -> Int ->  IO ()
+gridSetColFormatFloat _obj col width precision 
+  = withObjectRef "gridSetColFormatFloat" _obj $ \cobj__obj -> 
+    wxGrid_SetColFormatFloat cobj__obj  (toCInt col)  (toCInt width)  (toCInt precision)  
+foreign import ccall "wxGrid_SetColFormatFloat" wxGrid_SetColFormatFloat :: Ptr (TGrid a) -> CInt -> CInt -> CInt -> IO ()
+
+-- | usage: (@gridSetColFormatNumber obj col@).
+gridSetColFormatNumber :: Grid  a -> Int ->  IO ()
+gridSetColFormatNumber _obj col 
+  = withObjectRef "gridSetColFormatNumber" _obj $ \cobj__obj -> 
+    wxGrid_SetColFormatNumber cobj__obj  (toCInt col)  
+foreign import ccall "wxGrid_SetColFormatNumber" wxGrid_SetColFormatNumber :: Ptr (TGrid a) -> CInt -> IO ()
+
+-- | usage: (@gridSetColLabelAlignment obj horiz vert@).
+gridSetColLabelAlignment :: Grid  a -> Int -> Int ->  IO ()
+gridSetColLabelAlignment _obj horiz vert 
+  = withObjectRef "gridSetColLabelAlignment" _obj $ \cobj__obj -> 
+    wxGrid_SetColLabelAlignment cobj__obj  (toCInt horiz)  (toCInt vert)  
+foreign import ccall "wxGrid_SetColLabelAlignment" wxGrid_SetColLabelAlignment :: Ptr (TGrid a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@gridSetColLabelSize obj height@).
+gridSetColLabelSize :: Grid  a -> Int ->  IO ()
+gridSetColLabelSize _obj height 
+  = withObjectRef "gridSetColLabelSize" _obj $ \cobj__obj -> 
+    wxGrid_SetColLabelSize cobj__obj  (toCInt height)  
+foreign import ccall "wxGrid_SetColLabelSize" wxGrid_SetColLabelSize :: Ptr (TGrid a) -> CInt -> IO ()
+
+-- | usage: (@gridSetColLabelValue obj col label@).
+gridSetColLabelValue :: Grid  a -> Int -> String ->  IO ()
+gridSetColLabelValue _obj col label 
+  = withObjectRef "gridSetColLabelValue" _obj $ \cobj__obj -> 
+    withStringPtr label $ \cobj_label -> 
+    wxGrid_SetColLabelValue cobj__obj  (toCInt col)  cobj_label  
+foreign import ccall "wxGrid_SetColLabelValue" wxGrid_SetColLabelValue :: Ptr (TGrid a) -> CInt -> Ptr (TWxString c) -> IO ()
+
+-- | usage: (@gridSetColMinimalWidth obj col width@).
+gridSetColMinimalWidth :: Grid  a -> Int -> Int ->  IO ()
+gridSetColMinimalWidth _obj col width 
+  = withObjectRef "gridSetColMinimalWidth" _obj $ \cobj__obj -> 
+    wxGrid_SetColMinimalWidth cobj__obj  (toCInt col)  (toCInt width)  
+foreign import ccall "wxGrid_SetColMinimalWidth" wxGrid_SetColMinimalWidth :: Ptr (TGrid a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@gridSetColSize obj col width@).
+gridSetColSize :: Grid  a -> Int -> Int ->  IO ()
+gridSetColSize _obj col width 
+  = withObjectRef "gridSetColSize" _obj $ \cobj__obj -> 
+    wxGrid_SetColSize cobj__obj  (toCInt col)  (toCInt width)  
+foreign import ccall "wxGrid_SetColSize" wxGrid_SetColSize :: Ptr (TGrid a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@gridSetDefaultCellAlignment obj horiz vert@).
+gridSetDefaultCellAlignment :: Grid  a -> Int -> Int ->  IO ()
+gridSetDefaultCellAlignment _obj horiz vert 
+  = withObjectRef "gridSetDefaultCellAlignment" _obj $ \cobj__obj -> 
+    wxGrid_SetDefaultCellAlignment cobj__obj  (toCInt horiz)  (toCInt vert)  
+foreign import ccall "wxGrid_SetDefaultCellAlignment" wxGrid_SetDefaultCellAlignment :: Ptr (TGrid a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@gridSetDefaultCellBackgroundColour obj colour@).
+gridSetDefaultCellBackgroundColour :: Grid  a -> Color ->  IO ()
+gridSetDefaultCellBackgroundColour _obj colour 
+  = withObjectRef "gridSetDefaultCellBackgroundColour" _obj $ \cobj__obj -> 
+    withColourPtr colour $ \cobj_colour -> 
+    wxGrid_SetDefaultCellBackgroundColour cobj__obj  cobj_colour  
+foreign import ccall "wxGrid_SetDefaultCellBackgroundColour" wxGrid_SetDefaultCellBackgroundColour :: Ptr (TGrid a) -> Ptr (TColour b) -> IO ()
+
+-- | usage: (@gridSetDefaultCellFont obj font@).
+gridSetDefaultCellFont :: Grid  a -> Font  b ->  IO ()
+gridSetDefaultCellFont _obj font 
+  = withObjectRef "gridSetDefaultCellFont" _obj $ \cobj__obj -> 
+    withObjectPtr font $ \cobj_font -> 
+    wxGrid_SetDefaultCellFont cobj__obj  cobj_font  
+foreign import ccall "wxGrid_SetDefaultCellFont" wxGrid_SetDefaultCellFont :: Ptr (TGrid a) -> Ptr (TFont b) -> IO ()
+
+-- | usage: (@gridSetDefaultCellTextColour obj colour@).
+gridSetDefaultCellTextColour :: Grid  a -> Color ->  IO ()
+gridSetDefaultCellTextColour _obj colour 
+  = withObjectRef "gridSetDefaultCellTextColour" _obj $ \cobj__obj -> 
+    withColourPtr colour $ \cobj_colour -> 
+    wxGrid_SetDefaultCellTextColour cobj__obj  cobj_colour  
+foreign import ccall "wxGrid_SetDefaultCellTextColour" wxGrid_SetDefaultCellTextColour :: Ptr (TGrid a) -> Ptr (TColour b) -> IO ()
+
+-- | usage: (@gridSetDefaultColSize obj width resizeExistingCols@).
+gridSetDefaultColSize :: Grid  a -> Int -> Bool ->  IO ()
+gridSetDefaultColSize _obj width resizeExistingCols 
+  = withObjectRef "gridSetDefaultColSize" _obj $ \cobj__obj -> 
+    wxGrid_SetDefaultColSize cobj__obj  (toCInt width)  (toCBool resizeExistingCols)  
+foreign import ccall "wxGrid_SetDefaultColSize" wxGrid_SetDefaultColSize :: Ptr (TGrid a) -> CInt -> CBool -> IO ()
+
+-- | usage: (@gridSetDefaultEditor obj editor@).
+gridSetDefaultEditor :: Grid  a -> GridCellEditor  b ->  IO ()
+gridSetDefaultEditor _obj editor 
+  = withObjectRef "gridSetDefaultEditor" _obj $ \cobj__obj -> 
+    withObjectPtr editor $ \cobj_editor -> 
+    wxGrid_SetDefaultEditor cobj__obj  cobj_editor  
+foreign import ccall "wxGrid_SetDefaultEditor" wxGrid_SetDefaultEditor :: Ptr (TGrid a) -> Ptr (TGridCellEditor b) -> IO ()
+
+-- | usage: (@gridSetDefaultRenderer obj renderer@).
+gridSetDefaultRenderer :: Grid  a -> GridCellRenderer  b ->  IO ()
+gridSetDefaultRenderer _obj renderer 
+  = withObjectRef "gridSetDefaultRenderer" _obj $ \cobj__obj -> 
+    withObjectPtr renderer $ \cobj_renderer -> 
+    wxGrid_SetDefaultRenderer cobj__obj  cobj_renderer  
+foreign import ccall "wxGrid_SetDefaultRenderer" wxGrid_SetDefaultRenderer :: Ptr (TGrid a) -> Ptr (TGridCellRenderer b) -> IO ()
+
+-- | usage: (@gridSetDefaultRowSize obj height resizeExistingRows@).
+gridSetDefaultRowSize :: Grid  a -> Int -> Bool ->  IO ()
+gridSetDefaultRowSize _obj height resizeExistingRows 
+  = withObjectRef "gridSetDefaultRowSize" _obj $ \cobj__obj -> 
+    wxGrid_SetDefaultRowSize cobj__obj  (toCInt height)  (toCBool resizeExistingRows)  
+foreign import ccall "wxGrid_SetDefaultRowSize" wxGrid_SetDefaultRowSize :: Ptr (TGrid a) -> CInt -> CBool -> IO ()
+
+-- | usage: (@gridSetGridCursor obj row col@).
+gridSetGridCursor :: Grid  a -> Int -> Int ->  IO ()
+gridSetGridCursor _obj row col 
+  = withObjectRef "gridSetGridCursor" _obj $ \cobj__obj -> 
+    wxGrid_SetGridCursor cobj__obj  (toCInt row)  (toCInt col)  
+foreign import ccall "wxGrid_SetGridCursor" wxGrid_SetGridCursor :: Ptr (TGrid a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@gridSetGridLineColour obj col@).
+gridSetGridLineColour :: Grid  a -> Color ->  IO ()
+gridSetGridLineColour _obj col 
+  = withObjectRef "gridSetGridLineColour" _obj $ \cobj__obj -> 
+    withColourPtr col $ \cobj_col -> 
+    wxGrid_SetGridLineColour cobj__obj  cobj_col  
+foreign import ccall "wxGrid_SetGridLineColour" wxGrid_SetGridLineColour :: Ptr (TGrid a) -> Ptr (TColour b) -> IO ()
+
+-- | usage: (@gridSetLabelBackgroundColour obj colour@).
+gridSetLabelBackgroundColour :: Grid  a -> Color ->  IO ()
+gridSetLabelBackgroundColour _obj colour 
+  = withObjectRef "gridSetLabelBackgroundColour" _obj $ \cobj__obj -> 
+    withColourPtr colour $ \cobj_colour -> 
+    wxGrid_SetLabelBackgroundColour cobj__obj  cobj_colour  
+foreign import ccall "wxGrid_SetLabelBackgroundColour" wxGrid_SetLabelBackgroundColour :: Ptr (TGrid a) -> Ptr (TColour b) -> IO ()
+
+-- | usage: (@gridSetLabelFont obj font@).
+gridSetLabelFont :: Grid  a -> Font  b ->  IO ()
+gridSetLabelFont _obj font 
+  = withObjectRef "gridSetLabelFont" _obj $ \cobj__obj -> 
+    withObjectPtr font $ \cobj_font -> 
+    wxGrid_SetLabelFont cobj__obj  cobj_font  
+foreign import ccall "wxGrid_SetLabelFont" wxGrid_SetLabelFont :: Ptr (TGrid a) -> Ptr (TFont b) -> IO ()
+
+-- | usage: (@gridSetLabelTextColour obj colour@).
+gridSetLabelTextColour :: Grid  a -> Color ->  IO ()
+gridSetLabelTextColour _obj colour 
+  = withObjectRef "gridSetLabelTextColour" _obj $ \cobj__obj -> 
+    withColourPtr colour $ \cobj_colour -> 
+    wxGrid_SetLabelTextColour cobj__obj  cobj_colour  
+foreign import ccall "wxGrid_SetLabelTextColour" wxGrid_SetLabelTextColour :: Ptr (TGrid a) -> Ptr (TColour b) -> IO ()
+
+-- | usage: (@gridSetMargins obj extraWidth extraHeight@).
+gridSetMargins :: Grid  a -> Int -> Int ->  IO ()
+gridSetMargins _obj extraWidth extraHeight 
+  = withObjectRef "gridSetMargins" _obj $ \cobj__obj -> 
+    wxGrid_SetMargins cobj__obj  (toCInt extraWidth)  (toCInt extraHeight)  
+foreign import ccall "wxGrid_SetMargins" wxGrid_SetMargins :: Ptr (TGrid a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@gridSetReadOnly obj row col isReadOnly@).
+gridSetReadOnly :: Grid  a -> Int -> Int -> Bool ->  IO ()
+gridSetReadOnly _obj row col isReadOnly 
+  = withObjectRef "gridSetReadOnly" _obj $ \cobj__obj -> 
+    wxGrid_SetReadOnly cobj__obj  (toCInt row)  (toCInt col)  (toCBool isReadOnly)  
+foreign import ccall "wxGrid_SetReadOnly" wxGrid_SetReadOnly :: Ptr (TGrid a) -> CInt -> CInt -> CBool -> IO ()
+
+-- | usage: (@gridSetRowAttr obj row attr@).
+gridSetRowAttr :: Grid  a -> Int -> GridCellAttr  c ->  IO ()
+gridSetRowAttr _obj row attr 
+  = withObjectRef "gridSetRowAttr" _obj $ \cobj__obj -> 
+    withObjectPtr attr $ \cobj_attr -> 
+    wxGrid_SetRowAttr cobj__obj  (toCInt row)  cobj_attr  
+foreign import ccall "wxGrid_SetRowAttr" wxGrid_SetRowAttr :: Ptr (TGrid a) -> CInt -> Ptr (TGridCellAttr c) -> IO ()
+
+-- | usage: (@gridSetRowLabelAlignment obj horiz vert@).
+gridSetRowLabelAlignment :: Grid  a -> Int -> Int ->  IO ()
+gridSetRowLabelAlignment _obj horiz vert 
+  = withObjectRef "gridSetRowLabelAlignment" _obj $ \cobj__obj -> 
+    wxGrid_SetRowLabelAlignment cobj__obj  (toCInt horiz)  (toCInt vert)  
+foreign import ccall "wxGrid_SetRowLabelAlignment" wxGrid_SetRowLabelAlignment :: Ptr (TGrid a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@gridSetRowLabelSize obj width@).
+gridSetRowLabelSize :: Grid  a -> Int ->  IO ()
+gridSetRowLabelSize _obj width 
+  = withObjectRef "gridSetRowLabelSize" _obj $ \cobj__obj -> 
+    wxGrid_SetRowLabelSize cobj__obj  (toCInt width)  
+foreign import ccall "wxGrid_SetRowLabelSize" wxGrid_SetRowLabelSize :: Ptr (TGrid a) -> CInt -> IO ()
+
+-- | usage: (@gridSetRowLabelValue obj row label@).
+gridSetRowLabelValue :: Grid  a -> Int -> String ->  IO ()
+gridSetRowLabelValue _obj row label 
+  = withObjectRef "gridSetRowLabelValue" _obj $ \cobj__obj -> 
+    withStringPtr label $ \cobj_label -> 
+    wxGrid_SetRowLabelValue cobj__obj  (toCInt row)  cobj_label  
+foreign import ccall "wxGrid_SetRowLabelValue" wxGrid_SetRowLabelValue :: Ptr (TGrid a) -> CInt -> Ptr (TWxString c) -> IO ()
+
+-- | usage: (@gridSetRowMinimalHeight obj row width@).
+gridSetRowMinimalHeight :: Grid  a -> Int -> Int ->  IO ()
+gridSetRowMinimalHeight _obj row width 
+  = withObjectRef "gridSetRowMinimalHeight" _obj $ \cobj__obj -> 
+    wxGrid_SetRowMinimalHeight cobj__obj  (toCInt row)  (toCInt width)  
+foreign import ccall "wxGrid_SetRowMinimalHeight" wxGrid_SetRowMinimalHeight :: Ptr (TGrid a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@gridSetRowSize obj row height@).
+gridSetRowSize :: Grid  a -> Int -> Int ->  IO ()
+gridSetRowSize _obj row height 
+  = withObjectRef "gridSetRowSize" _obj $ \cobj__obj -> 
+    wxGrid_SetRowSize cobj__obj  (toCInt row)  (toCInt height)  
+foreign import ccall "wxGrid_SetRowSize" wxGrid_SetRowSize :: Ptr (TGrid a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@gridSetSelectionBackground obj c@).
+gridSetSelectionBackground :: Grid  a -> Color ->  IO ()
+gridSetSelectionBackground _obj c 
+  = withObjectRef "gridSetSelectionBackground" _obj $ \cobj__obj -> 
+    withColourPtr c $ \cobj_c -> 
+    wxGrid_SetSelectionBackground cobj__obj  cobj_c  
+foreign import ccall "wxGrid_SetSelectionBackground" wxGrid_SetSelectionBackground :: Ptr (TGrid a) -> Ptr (TColour b) -> IO ()
+
+-- | usage: (@gridSetSelectionForeground obj c@).
+gridSetSelectionForeground :: Grid  a -> Color ->  IO ()
+gridSetSelectionForeground _obj c 
+  = withObjectRef "gridSetSelectionForeground" _obj $ \cobj__obj -> 
+    withColourPtr c $ \cobj_c -> 
+    wxGrid_SetSelectionForeground cobj__obj  cobj_c  
+foreign import ccall "wxGrid_SetSelectionForeground" wxGrid_SetSelectionForeground :: Ptr (TGrid a) -> Ptr (TColour b) -> IO ()
+
+-- | usage: (@gridSetSelectionMode obj selmode@).
+gridSetSelectionMode :: Grid  a -> Int ->  IO ()
+gridSetSelectionMode _obj selmode 
+  = withObjectRef "gridSetSelectionMode" _obj $ \cobj__obj -> 
+    wxGrid_SetSelectionMode cobj__obj  (toCInt selmode)  
+foreign import ccall "wxGrid_SetSelectionMode" wxGrid_SetSelectionMode :: Ptr (TGrid a) -> CInt -> IO ()
+
+-- | usage: (@gridSetTable obj table takeOwnership selmode@).
+gridSetTable :: Grid  a -> GridTableBase  b -> Bool -> Int ->  IO Bool
+gridSetTable _obj table takeOwnership selmode 
+  = withBoolResult $
+    withObjectRef "gridSetTable" _obj $ \cobj__obj -> 
+    withObjectPtr table $ \cobj_table -> 
+    wxGrid_SetTable cobj__obj  cobj_table  (toCBool takeOwnership)  (toCInt selmode)  
+foreign import ccall "wxGrid_SetTable" wxGrid_SetTable :: Ptr (TGrid a) -> Ptr (TGridTableBase b) -> CBool -> CInt -> IO CBool
+
+-- | usage: (@gridShowCellEditControl obj@).
+gridShowCellEditControl :: Grid  a ->  IO ()
+gridShowCellEditControl _obj 
+  = withObjectRef "gridShowCellEditControl" _obj $ \cobj__obj -> 
+    wxGrid_ShowCellEditControl cobj__obj  
+foreign import ccall "wxGrid_ShowCellEditControl" wxGrid_ShowCellEditControl :: Ptr (TGrid a) -> IO ()
+
+-- | usage: (@gridSizeEventAltDown obj@).
+gridSizeEventAltDown :: GridSizeEvent  a ->  IO Bool
+gridSizeEventAltDown _obj 
+  = withBoolResult $
+    withObjectRef "gridSizeEventAltDown" _obj $ \cobj__obj -> 
+    wxGridSizeEvent_AltDown cobj__obj  
+foreign import ccall "wxGridSizeEvent_AltDown" wxGridSizeEvent_AltDown :: Ptr (TGridSizeEvent a) -> IO CBool
+
+-- | usage: (@gridSizeEventControlDown obj@).
+gridSizeEventControlDown :: GridSizeEvent  a ->  IO Bool
+gridSizeEventControlDown _obj 
+  = withBoolResult $
+    withObjectRef "gridSizeEventControlDown" _obj $ \cobj__obj -> 
+    wxGridSizeEvent_ControlDown cobj__obj  
+foreign import ccall "wxGridSizeEvent_ControlDown" wxGridSizeEvent_ControlDown :: Ptr (TGridSizeEvent a) -> IO CBool
+
+-- | usage: (@gridSizeEventGetPosition obj@).
+gridSizeEventGetPosition :: GridSizeEvent  a ->  IO (Point)
+gridSizeEventGetPosition _obj 
+  = withWxPointResult $
+    withObjectRef "gridSizeEventGetPosition" _obj $ \cobj__obj -> 
+    wxGridSizeEvent_GetPosition cobj__obj  
+foreign import ccall "wxGridSizeEvent_GetPosition" wxGridSizeEvent_GetPosition :: Ptr (TGridSizeEvent a) -> IO (Ptr (TWxPoint ()))
+
+-- | usage: (@gridSizeEventGetRowOrCol obj@).
+gridSizeEventGetRowOrCol :: GridSizeEvent  a ->  IO Int
+gridSizeEventGetRowOrCol _obj 
+  = withIntResult $
+    withObjectRef "gridSizeEventGetRowOrCol" _obj $ \cobj__obj -> 
+    wxGridSizeEvent_GetRowOrCol cobj__obj  
+foreign import ccall "wxGridSizeEvent_GetRowOrCol" wxGridSizeEvent_GetRowOrCol :: Ptr (TGridSizeEvent a) -> IO CInt
+
+-- | usage: (@gridSizeEventMetaDown obj@).
+gridSizeEventMetaDown :: GridSizeEvent  a ->  IO Bool
+gridSizeEventMetaDown _obj 
+  = withBoolResult $
+    withObjectRef "gridSizeEventMetaDown" _obj $ \cobj__obj -> 
+    wxGridSizeEvent_MetaDown cobj__obj  
+foreign import ccall "wxGridSizeEvent_MetaDown" wxGridSizeEvent_MetaDown :: Ptr (TGridSizeEvent a) -> IO CBool
+
+-- | usage: (@gridSizeEventShiftDown obj@).
+gridSizeEventShiftDown :: GridSizeEvent  a ->  IO Bool
+gridSizeEventShiftDown _obj 
+  = withBoolResult $
+    withObjectRef "gridSizeEventShiftDown" _obj $ \cobj__obj -> 
+    wxGridSizeEvent_ShiftDown cobj__obj  
+foreign import ccall "wxGridSizeEvent_ShiftDown" wxGridSizeEvent_ShiftDown :: Ptr (TGridSizeEvent a) -> IO CBool
+
+-- | usage: (@gridSizerCalcMin obj@).
+gridSizerCalcMin :: GridSizer  a ->  IO (Size)
+gridSizerCalcMin _obj 
+  = withWxSizeResult $
+    withObjectRef "gridSizerCalcMin" _obj $ \cobj__obj -> 
+    wxGridSizer_CalcMin cobj__obj  
+foreign import ccall "wxGridSizer_CalcMin" wxGridSizer_CalcMin :: Ptr (TGridSizer a) -> IO (Ptr (TWxSize ()))
+
+-- | usage: (@gridSizerCreate rows cols vgap hgap@).
+gridSizerCreate :: Int -> Int -> Int -> Int ->  IO (GridSizer  ())
+gridSizerCreate rows cols vgap hgap 
+  = withObjectResult $
+    wxGridSizer_Create (toCInt rows)  (toCInt cols)  (toCInt vgap)  (toCInt hgap)  
+foreign import ccall "wxGridSizer_Create" wxGridSizer_Create :: CInt -> CInt -> CInt -> CInt -> IO (Ptr (TGridSizer ()))
+
+-- | usage: (@gridSizerGetCols obj@).
+gridSizerGetCols :: GridSizer  a ->  IO Int
+gridSizerGetCols _obj 
+  = withIntResult $
+    withObjectRef "gridSizerGetCols" _obj $ \cobj__obj -> 
+    wxGridSizer_GetCols cobj__obj  
+foreign import ccall "wxGridSizer_GetCols" wxGridSizer_GetCols :: Ptr (TGridSizer a) -> IO CInt
+
+-- | usage: (@gridSizerGetHGap obj@).
+gridSizerGetHGap :: GridSizer  a ->  IO Int
+gridSizerGetHGap _obj 
+  = withIntResult $
+    withObjectRef "gridSizerGetHGap" _obj $ \cobj__obj -> 
+    wxGridSizer_GetHGap cobj__obj  
+foreign import ccall "wxGridSizer_GetHGap" wxGridSizer_GetHGap :: Ptr (TGridSizer a) -> IO CInt
+
+-- | usage: (@gridSizerGetRows obj@).
+gridSizerGetRows :: GridSizer  a ->  IO Int
+gridSizerGetRows _obj 
+  = withIntResult $
+    withObjectRef "gridSizerGetRows" _obj $ \cobj__obj -> 
+    wxGridSizer_GetRows cobj__obj  
+foreign import ccall "wxGridSizer_GetRows" wxGridSizer_GetRows :: Ptr (TGridSizer a) -> IO CInt
+
+-- | usage: (@gridSizerGetVGap obj@).
+gridSizerGetVGap :: GridSizer  a ->  IO Int
+gridSizerGetVGap _obj 
+  = withIntResult $
+    withObjectRef "gridSizerGetVGap" _obj $ \cobj__obj -> 
+    wxGridSizer_GetVGap cobj__obj  
+foreign import ccall "wxGridSizer_GetVGap" wxGridSizer_GetVGap :: Ptr (TGridSizer a) -> IO CInt
+
+-- | usage: (@gridSizerRecalcSizes obj@).
+gridSizerRecalcSizes :: GridSizer  a ->  IO ()
+gridSizerRecalcSizes _obj 
+  = withObjectRef "gridSizerRecalcSizes" _obj $ \cobj__obj -> 
+    wxGridSizer_RecalcSizes cobj__obj  
+foreign import ccall "wxGridSizer_RecalcSizes" wxGridSizer_RecalcSizes :: Ptr (TGridSizer a) -> IO ()
+
+-- | usage: (@gridSizerSetCols obj cols@).
+gridSizerSetCols :: GridSizer  a -> Int ->  IO ()
+gridSizerSetCols _obj cols 
+  = withObjectRef "gridSizerSetCols" _obj $ \cobj__obj -> 
+    wxGridSizer_SetCols cobj__obj  (toCInt cols)  
+foreign import ccall "wxGridSizer_SetCols" wxGridSizer_SetCols :: Ptr (TGridSizer a) -> CInt -> IO ()
+
+-- | usage: (@gridSizerSetHGap obj gap@).
+gridSizerSetHGap :: GridSizer  a -> Int ->  IO ()
+gridSizerSetHGap _obj gap 
+  = withObjectRef "gridSizerSetHGap" _obj $ \cobj__obj -> 
+    wxGridSizer_SetHGap cobj__obj  (toCInt gap)  
+foreign import ccall "wxGridSizer_SetHGap" wxGridSizer_SetHGap :: Ptr (TGridSizer a) -> CInt -> IO ()
+
+-- | usage: (@gridSizerSetRows obj rows@).
+gridSizerSetRows :: GridSizer  a -> Int ->  IO ()
+gridSizerSetRows _obj rows 
+  = withObjectRef "gridSizerSetRows" _obj $ \cobj__obj -> 
+    wxGridSizer_SetRows cobj__obj  (toCInt rows)  
+foreign import ccall "wxGridSizer_SetRows" wxGridSizer_SetRows :: Ptr (TGridSizer a) -> CInt -> IO ()
+
+-- | usage: (@gridSizerSetVGap obj gap@).
+gridSizerSetVGap :: GridSizer  a -> Int ->  IO ()
+gridSizerSetVGap _obj gap 
+  = withObjectRef "gridSizerSetVGap" _obj $ \cobj__obj -> 
+    wxGridSizer_SetVGap cobj__obj  (toCInt gap)  
+foreign import ccall "wxGridSizer_SetVGap" wxGridSizer_SetVGap :: Ptr (TGridSizer a) -> CInt -> IO ()
+
+-- | usage: (@gridStringToLines obj value lines@).
+gridStringToLines :: Grid  a -> String -> Ptr  c ->  IO Int
+gridStringToLines _obj value lines 
+  = withIntResult $
+    withObjectRef "gridStringToLines" _obj $ \cobj__obj -> 
+    withStringPtr value $ \cobj_value -> 
+    wxGrid_StringToLines cobj__obj  cobj_value  lines  
+foreign import ccall "wxGrid_StringToLines" wxGrid_StringToLines :: Ptr (TGrid a) -> Ptr (TWxString b) -> Ptr  c -> IO CInt
+
+-- | usage: (@gridXToCol obj x@).
+gridXToCol :: Grid  a -> Int ->  IO Int
+gridXToCol _obj x 
+  = withIntResult $
+    withObjectRef "gridXToCol" _obj $ \cobj__obj -> 
+    wxGrid_XToCol cobj__obj  (toCInt x)  
+foreign import ccall "wxGrid_XToCol" wxGrid_XToCol :: Ptr (TGrid a) -> CInt -> IO CInt
+
+-- | usage: (@gridXToEdgeOfCol obj x@).
+gridXToEdgeOfCol :: Grid  a -> Int ->  IO Int
+gridXToEdgeOfCol _obj x 
+  = withIntResult $
+    withObjectRef "gridXToEdgeOfCol" _obj $ \cobj__obj -> 
+    wxGrid_XToEdgeOfCol cobj__obj  (toCInt x)  
+foreign import ccall "wxGrid_XToEdgeOfCol" wxGrid_XToEdgeOfCol :: Ptr (TGrid a) -> CInt -> IO CInt
+
+-- | usage: (@gridXYToCell obj xy@).
+gridXYToCell :: Grid  a -> Point ->  IO Point
+gridXYToCell _obj xy 
+  = withPointResult $ \px py -> 
+    withObjectRef "gridXYToCell" _obj $ \cobj__obj -> 
+    wxGrid_XYToCell cobj__obj  (toCIntPointX xy) (toCIntPointY xy)   px py
+foreign import ccall "wxGrid_XYToCell" wxGrid_XYToCell :: Ptr (TGrid a) -> CInt -> CInt -> Ptr CInt -> Ptr CInt -> IO ()
+
+-- | usage: (@gridYToEdgeOfRow obj y@).
+gridYToEdgeOfRow :: Grid  a -> Int ->  IO Int
+gridYToEdgeOfRow _obj y 
+  = withIntResult $
+    withObjectRef "gridYToEdgeOfRow" _obj $ \cobj__obj -> 
+    wxGrid_YToEdgeOfRow cobj__obj  (toCInt y)  
+foreign import ccall "wxGrid_YToEdgeOfRow" wxGrid_YToEdgeOfRow :: Ptr (TGrid a) -> CInt -> IO CInt
+
+-- | usage: (@gridYToRow obj y@).
+gridYToRow :: Grid  a -> Int ->  IO Int
+gridYToRow _obj y 
+  = withIntResult $
+    withObjectRef "gridYToRow" _obj $ \cobj__obj -> 
+    wxGrid_YToRow cobj__obj  (toCInt y)  
+foreign import ccall "wxGrid_YToRow" wxGrid_YToRow :: Ptr (TGrid a) -> CInt -> IO CInt
+
+-- | usage: (@helpControllerHelpProviderCreate ctr@).
+helpControllerHelpProviderCreate :: HelpControllerBase  a ->  IO (HelpControllerHelpProvider  ())
+helpControllerHelpProviderCreate ctr 
+  = withObjectResult $
+    withObjectPtr ctr $ \cobj_ctr -> 
+    wxHelpControllerHelpProvider_Create cobj_ctr  
+foreign import ccall "wxHelpControllerHelpProvider_Create" wxHelpControllerHelpProvider_Create :: Ptr (THelpControllerBase a) -> IO (Ptr (THelpControllerHelpProvider ()))
+
+-- | usage: (@helpControllerHelpProviderGetHelpController obj@).
+helpControllerHelpProviderGetHelpController :: HelpControllerHelpProvider  a ->  IO (HelpControllerBase  ())
+helpControllerHelpProviderGetHelpController _obj 
+  = withObjectResult $
+    withObjectRef "helpControllerHelpProviderGetHelpController" _obj $ \cobj__obj -> 
+    wxHelpControllerHelpProvider_GetHelpController cobj__obj  
+foreign import ccall "wxHelpControllerHelpProvider_GetHelpController" wxHelpControllerHelpProvider_GetHelpController :: Ptr (THelpControllerHelpProvider a) -> IO (Ptr (THelpControllerBase ()))
+
+-- | usage: (@helpControllerHelpProviderSetHelpController obj hc@).
+helpControllerHelpProviderSetHelpController :: HelpControllerHelpProvider  a -> HelpController  b ->  IO ()
+helpControllerHelpProviderSetHelpController _obj hc 
+  = withObjectRef "helpControllerHelpProviderSetHelpController" _obj $ \cobj__obj -> 
+    withObjectPtr hc $ \cobj_hc -> 
+    wxHelpControllerHelpProvider_SetHelpController cobj__obj  cobj_hc  
+foreign import ccall "wxHelpControllerHelpProvider_SetHelpController" wxHelpControllerHelpProvider_SetHelpController :: Ptr (THelpControllerHelpProvider a) -> Ptr (THelpController b) -> IO ()
+
+-- | usage: (@helpEventGetLink obj@).
+helpEventGetLink :: HelpEvent  a ->  IO (String)
+helpEventGetLink _obj 
+  = withManagedStringResult $
+    withObjectRef "helpEventGetLink" _obj $ \cobj__obj -> 
+    wxHelpEvent_GetLink cobj__obj  
+foreign import ccall "wxHelpEvent_GetLink" wxHelpEvent_GetLink :: Ptr (THelpEvent a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@helpEventGetPosition obj@).
+helpEventGetPosition :: HelpEvent  a ->  IO (Point)
+helpEventGetPosition _obj 
+  = withWxPointResult $
+    withObjectRef "helpEventGetPosition" _obj $ \cobj__obj -> 
+    wxHelpEvent_GetPosition cobj__obj  
+foreign import ccall "wxHelpEvent_GetPosition" wxHelpEvent_GetPosition :: Ptr (THelpEvent a) -> IO (Ptr (TWxPoint ()))
+
+-- | usage: (@helpEventGetTarget obj@).
+helpEventGetTarget :: HelpEvent  a ->  IO (String)
+helpEventGetTarget _obj 
+  = withManagedStringResult $
+    withObjectRef "helpEventGetTarget" _obj $ \cobj__obj -> 
+    wxHelpEvent_GetTarget cobj__obj  
+foreign import ccall "wxHelpEvent_GetTarget" wxHelpEvent_GetTarget :: Ptr (THelpEvent a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@helpEventSetLink obj link@).
+helpEventSetLink :: HelpEvent  a -> String ->  IO ()
+helpEventSetLink _obj link 
+  = withObjectRef "helpEventSetLink" _obj $ \cobj__obj -> 
+    withStringPtr link $ \cobj_link -> 
+    wxHelpEvent_SetLink cobj__obj  cobj_link  
+foreign import ccall "wxHelpEvent_SetLink" wxHelpEvent_SetLink :: Ptr (THelpEvent a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@helpEventSetPosition obj xy@).
+helpEventSetPosition :: HelpEvent  a -> Point ->  IO ()
+helpEventSetPosition _obj xy 
+  = withObjectRef "helpEventSetPosition" _obj $ \cobj__obj -> 
+    wxHelpEvent_SetPosition cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxHelpEvent_SetPosition" wxHelpEvent_SetPosition :: Ptr (THelpEvent a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@helpEventSetTarget obj target@).
+helpEventSetTarget :: HelpEvent  a -> String ->  IO ()
+helpEventSetTarget _obj target 
+  = withObjectRef "helpEventSetTarget" _obj $ \cobj__obj -> 
+    withStringPtr target $ \cobj_target -> 
+    wxHelpEvent_SetTarget cobj__obj  cobj_target  
+foreign import ccall "wxHelpEvent_SetTarget" wxHelpEvent_SetTarget :: Ptr (THelpEvent a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@helpProviderAddHelp obj window text@).
+helpProviderAddHelp :: HelpProvider  a -> Window  b -> String ->  IO ()
+helpProviderAddHelp _obj window text 
+  = withObjectRef "helpProviderAddHelp" _obj $ \cobj__obj -> 
+    withObjectPtr window $ \cobj_window -> 
+    withStringPtr text $ \cobj_text -> 
+    wxHelpProvider_AddHelp cobj__obj  cobj_window  cobj_text  
+foreign import ccall "wxHelpProvider_AddHelp" wxHelpProvider_AddHelp :: Ptr (THelpProvider a) -> Ptr (TWindow b) -> Ptr (TWxString c) -> IO ()
+
+-- | usage: (@helpProviderAddHelpById obj id text@).
+helpProviderAddHelpById :: HelpProvider  a -> Id -> String ->  IO ()
+helpProviderAddHelpById _obj id text 
+  = withObjectRef "helpProviderAddHelpById" _obj $ \cobj__obj -> 
+    withStringPtr text $ \cobj_text -> 
+    wxHelpProvider_AddHelpById cobj__obj  (toCInt id)  cobj_text  
+foreign import ccall "wxHelpProvider_AddHelpById" wxHelpProvider_AddHelpById :: Ptr (THelpProvider a) -> CInt -> Ptr (TWxString c) -> IO ()
+
+-- | usage: (@helpProviderDelete obj@).
+helpProviderDelete :: HelpProvider  a ->  IO ()
+helpProviderDelete _obj 
+  = withObjectRef "helpProviderDelete" _obj $ \cobj__obj -> 
+    wxHelpProvider_Delete cobj__obj  
+foreign import ccall "wxHelpProvider_Delete" wxHelpProvider_Delete :: Ptr (THelpProvider a) -> IO ()
+
+-- | usage: (@helpProviderGet@).
+helpProviderGet ::  IO (HelpProvider  ())
+helpProviderGet 
+  = withObjectResult $
+    wxHelpProvider_Get 
+foreign import ccall "wxHelpProvider_Get" wxHelpProvider_Get :: IO (Ptr (THelpProvider ()))
+
+-- | usage: (@helpProviderGetHelp obj window@).
+helpProviderGetHelp :: HelpProvider  a -> Window  b ->  IO (String)
+helpProviderGetHelp _obj window 
+  = withManagedStringResult $
+    withObjectRef "helpProviderGetHelp" _obj $ \cobj__obj -> 
+    withObjectPtr window $ \cobj_window -> 
+    wxHelpProvider_GetHelp cobj__obj  cobj_window  
+foreign import ccall "wxHelpProvider_GetHelp" wxHelpProvider_GetHelp :: Ptr (THelpProvider a) -> Ptr (TWindow b) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@helpProviderRemoveHelp obj window@).
+helpProviderRemoveHelp :: HelpProvider  a -> Window  b ->  IO ()
+helpProviderRemoveHelp _obj window 
+  = withObjectRef "helpProviderRemoveHelp" _obj $ \cobj__obj -> 
+    withObjectPtr window $ \cobj_window -> 
+    wxHelpProvider_RemoveHelp cobj__obj  cobj_window  
+foreign import ccall "wxHelpProvider_RemoveHelp" wxHelpProvider_RemoveHelp :: Ptr (THelpProvider a) -> Ptr (TWindow b) -> IO ()
+
+-- | usage: (@helpProviderSet helpProvider@).
+helpProviderSet :: HelpProvider  a ->  IO (HelpProvider  ())
+helpProviderSet helpProvider 
+  = withObjectResult $
+    withObjectRef "helpProviderSet" helpProvider $ \cobj_helpProvider -> 
+    wxHelpProvider_Set cobj_helpProvider  
+foreign import ccall "wxHelpProvider_Set" wxHelpProvider_Set :: Ptr (THelpProvider a) -> IO (Ptr (THelpProvider ()))
+
+-- | usage: (@helpProviderShowHelp obj window@).
+helpProviderShowHelp :: HelpProvider  a -> Window  b ->  IO Bool
+helpProviderShowHelp _obj window 
+  = withBoolResult $
+    withObjectRef "helpProviderShowHelp" _obj $ \cobj__obj -> 
+    withObjectPtr window $ \cobj_window -> 
+    wxHelpProvider_ShowHelp cobj__obj  cobj_window  
+foreign import ccall "wxHelpProvider_ShowHelp" wxHelpProvider_ShowHelp :: Ptr (THelpProvider a) -> Ptr (TWindow b) -> IO CBool
+
+-- | usage: (@htmlHelpControllerAddBook obj book showwaitmsg@).
+htmlHelpControllerAddBook :: HtmlHelpController  a -> Ptr  b -> Int ->  IO Bool
+htmlHelpControllerAddBook _obj book showwaitmsg 
+  = withBoolResult $
+    withObjectRef "htmlHelpControllerAddBook" _obj $ \cobj__obj -> 
+    wxHtmlHelpController_AddBook cobj__obj  book  (toCInt showwaitmsg)  
+foreign import ccall "wxHtmlHelpController_AddBook" wxHtmlHelpController_AddBook :: Ptr (THtmlHelpController a) -> Ptr  b -> CInt -> IO CBool
+
+-- | usage: (@htmlHelpControllerCreate style@).
+htmlHelpControllerCreate :: Int ->  IO (HtmlHelpController  ())
+htmlHelpControllerCreate _style 
+  = withObjectResult $
+    wxHtmlHelpController_Create (toCInt _style)  
+foreign import ccall "wxHtmlHelpController_Create" wxHtmlHelpController_Create :: CInt -> IO (Ptr (THtmlHelpController ()))
+
+-- | usage: (@htmlHelpControllerDelete obj@).
+htmlHelpControllerDelete :: HtmlHelpController  a ->  IO ()
+htmlHelpControllerDelete
+  = objectDelete
+
+
+-- | usage: (@htmlHelpControllerDisplay obj x@).
+htmlHelpControllerDisplay :: HtmlHelpController  a -> Ptr  b ->  IO Int
+htmlHelpControllerDisplay _obj x 
+  = withIntResult $
+    withObjectRef "htmlHelpControllerDisplay" _obj $ \cobj__obj -> 
+    wxHtmlHelpController_Display cobj__obj  x  
+foreign import ccall "wxHtmlHelpController_Display" wxHtmlHelpController_Display :: Ptr (THtmlHelpController a) -> Ptr  b -> IO CInt
+
+-- | usage: (@htmlHelpControllerDisplayBlock obj blockNo@).
+htmlHelpControllerDisplayBlock :: HtmlHelpController  a -> Int ->  IO Bool
+htmlHelpControllerDisplayBlock _obj blockNo 
+  = withBoolResult $
+    withObjectRef "htmlHelpControllerDisplayBlock" _obj $ \cobj__obj -> 
+    wxHtmlHelpController_DisplayBlock cobj__obj  (toCInt blockNo)  
+foreign import ccall "wxHtmlHelpController_DisplayBlock" wxHtmlHelpController_DisplayBlock :: Ptr (THtmlHelpController a) -> CInt -> IO CBool
+
+-- | usage: (@htmlHelpControllerDisplayContents obj@).
+htmlHelpControllerDisplayContents :: HtmlHelpController  a ->  IO Int
+htmlHelpControllerDisplayContents _obj 
+  = withIntResult $
+    withObjectRef "htmlHelpControllerDisplayContents" _obj $ \cobj__obj -> 
+    wxHtmlHelpController_DisplayContents cobj__obj  
+foreign import ccall "wxHtmlHelpController_DisplayContents" wxHtmlHelpController_DisplayContents :: Ptr (THtmlHelpController a) -> IO CInt
+
+-- | usage: (@htmlHelpControllerDisplayIndex obj@).
+htmlHelpControllerDisplayIndex :: HtmlHelpController  a ->  IO Int
+htmlHelpControllerDisplayIndex _obj 
+  = withIntResult $
+    withObjectRef "htmlHelpControllerDisplayIndex" _obj $ \cobj__obj -> 
+    wxHtmlHelpController_DisplayIndex cobj__obj  
+foreign import ccall "wxHtmlHelpController_DisplayIndex" wxHtmlHelpController_DisplayIndex :: Ptr (THtmlHelpController a) -> IO CInt
+
+-- | usage: (@htmlHelpControllerDisplayNumber obj id@).
+htmlHelpControllerDisplayNumber :: HtmlHelpController  a -> Id ->  IO Int
+htmlHelpControllerDisplayNumber _obj id 
+  = withIntResult $
+    withObjectRef "htmlHelpControllerDisplayNumber" _obj $ \cobj__obj -> 
+    wxHtmlHelpController_DisplayNumber cobj__obj  (toCInt id)  
+foreign import ccall "wxHtmlHelpController_DisplayNumber" wxHtmlHelpController_DisplayNumber :: Ptr (THtmlHelpController a) -> CInt -> IO CInt
+
+-- | usage: (@htmlHelpControllerDisplaySection obj section@).
+htmlHelpControllerDisplaySection :: HtmlHelpController  a -> String ->  IO Bool
+htmlHelpControllerDisplaySection _obj section 
+  = withBoolResult $
+    withObjectRef "htmlHelpControllerDisplaySection" _obj $ \cobj__obj -> 
+    withStringPtr section $ \cobj_section -> 
+    wxHtmlHelpController_DisplaySection cobj__obj  cobj_section  
+foreign import ccall "wxHtmlHelpController_DisplaySection" wxHtmlHelpController_DisplaySection :: Ptr (THtmlHelpController a) -> Ptr (TWxString b) -> IO CBool
+
+-- | usage: (@htmlHelpControllerDisplaySectionNumber obj sectionNo@).
+htmlHelpControllerDisplaySectionNumber :: HtmlHelpController  a -> Int ->  IO Bool
+htmlHelpControllerDisplaySectionNumber _obj sectionNo 
+  = withBoolResult $
+    withObjectRef "htmlHelpControllerDisplaySectionNumber" _obj $ \cobj__obj -> 
+    wxHtmlHelpController_DisplaySectionNumber cobj__obj  (toCInt sectionNo)  
+foreign import ccall "wxHtmlHelpController_DisplaySectionNumber" wxHtmlHelpController_DisplaySectionNumber :: Ptr (THtmlHelpController a) -> CInt -> IO CBool
+
+-- | usage: (@htmlHelpControllerGetFrame obj@).
+htmlHelpControllerGetFrame :: HtmlHelpController  a ->  IO (Frame  ())
+htmlHelpControllerGetFrame _obj 
+  = withObjectResult $
+    withObjectRef "htmlHelpControllerGetFrame" _obj $ \cobj__obj -> 
+    wxHtmlHelpController_GetFrame cobj__obj  
+foreign import ccall "wxHtmlHelpController_GetFrame" wxHtmlHelpController_GetFrame :: Ptr (THtmlHelpController a) -> IO (Ptr (TFrame ()))
+
+-- | usage: (@htmlHelpControllerGetFrameParameters obj title width height posx posy newFrameEachTime@).
+htmlHelpControllerGetFrameParameters :: HtmlHelpController  a -> Ptr  b -> Ptr CInt -> Ptr CInt -> Ptr CInt -> Ptr CInt -> Ptr CInt ->  IO (Ptr  ())
+htmlHelpControllerGetFrameParameters _obj title width height posx posy newFrameEachTime 
+  = withObjectRef "htmlHelpControllerGetFrameParameters" _obj $ \cobj__obj -> 
+    wxHtmlHelpController_GetFrameParameters cobj__obj  title  width  height  posx  posy  newFrameEachTime  
+foreign import ccall "wxHtmlHelpController_GetFrameParameters" wxHtmlHelpController_GetFrameParameters :: Ptr (THtmlHelpController a) -> Ptr  b -> Ptr CInt -> Ptr CInt -> Ptr CInt -> Ptr CInt -> Ptr CInt -> IO (Ptr  ())
+
+-- | usage: (@htmlHelpControllerInitialize obj file@).
+htmlHelpControllerInitialize :: HtmlHelpController  a -> String ->  IO Bool
+htmlHelpControllerInitialize _obj file 
+  = withBoolResult $
+    withObjectRef "htmlHelpControllerInitialize" _obj $ \cobj__obj -> 
+    withStringPtr file $ \cobj_file -> 
+    wxHtmlHelpController_Initialize cobj__obj  cobj_file  
+foreign import ccall "wxHtmlHelpController_Initialize" wxHtmlHelpController_Initialize :: Ptr (THtmlHelpController a) -> Ptr (TWxString b) -> IO CBool
+
+-- | usage: (@htmlHelpControllerKeywordSearch obj keyword@).
+htmlHelpControllerKeywordSearch :: HtmlHelpController  a -> String ->  IO Bool
+htmlHelpControllerKeywordSearch _obj keyword 
+  = withBoolResult $
+    withObjectRef "htmlHelpControllerKeywordSearch" _obj $ \cobj__obj -> 
+    withStringPtr keyword $ \cobj_keyword -> 
+    wxHtmlHelpController_KeywordSearch cobj__obj  cobj_keyword  
+foreign import ccall "wxHtmlHelpController_KeywordSearch" wxHtmlHelpController_KeywordSearch :: Ptr (THtmlHelpController a) -> Ptr (TWxString b) -> IO CBool
+
+-- | usage: (@htmlHelpControllerLoadFile obj file@).
+htmlHelpControllerLoadFile :: HtmlHelpController  a -> String ->  IO Bool
+htmlHelpControllerLoadFile _obj file 
+  = withBoolResult $
+    withObjectRef "htmlHelpControllerLoadFile" _obj $ \cobj__obj -> 
+    withStringPtr file $ \cobj_file -> 
+    wxHtmlHelpController_LoadFile cobj__obj  cobj_file  
+foreign import ccall "wxHtmlHelpController_LoadFile" wxHtmlHelpController_LoadFile :: Ptr (THtmlHelpController a) -> Ptr (TWxString b) -> IO CBool
+
+-- | usage: (@htmlHelpControllerQuit obj@).
+htmlHelpControllerQuit :: HtmlHelpController  a ->  IO Bool
+htmlHelpControllerQuit _obj 
+  = withBoolResult $
+    withObjectRef "htmlHelpControllerQuit" _obj $ \cobj__obj -> 
+    wxHtmlHelpController_Quit cobj__obj  
+foreign import ccall "wxHtmlHelpController_Quit" wxHtmlHelpController_Quit :: Ptr (THtmlHelpController a) -> IO CBool
+
+-- | usage: (@htmlHelpControllerReadCustomization obj cfg path@).
+htmlHelpControllerReadCustomization :: HtmlHelpController  a -> ConfigBase  b -> String ->  IO ()
+htmlHelpControllerReadCustomization _obj cfg path 
+  = withObjectRef "htmlHelpControllerReadCustomization" _obj $ \cobj__obj -> 
+    withObjectPtr cfg $ \cobj_cfg -> 
+    withStringPtr path $ \cobj_path -> 
+    wxHtmlHelpController_ReadCustomization cobj__obj  cobj_cfg  cobj_path  
+foreign import ccall "wxHtmlHelpController_ReadCustomization" wxHtmlHelpController_ReadCustomization :: Ptr (THtmlHelpController a) -> Ptr (TConfigBase b) -> Ptr (TWxString c) -> IO ()
+
+-- | usage: (@htmlHelpControllerSetFrameParameters obj title widthheight posx posy newFrameEachTime@).
+htmlHelpControllerSetFrameParameters :: HtmlHelpController  a -> Ptr  b -> Size -> Int -> Int -> Bool ->  IO ()
+htmlHelpControllerSetFrameParameters _obj title widthheight posx posy newFrameEachTime 
+  = withObjectRef "htmlHelpControllerSetFrameParameters" _obj $ \cobj__obj -> 
+    wxHtmlHelpController_SetFrameParameters cobj__obj  title  (toCIntSizeW widthheight) (toCIntSizeH widthheight)  (toCInt posx)  (toCInt posy)  (toCBool newFrameEachTime)  
+foreign import ccall "wxHtmlHelpController_SetFrameParameters" wxHtmlHelpController_SetFrameParameters :: Ptr (THtmlHelpController a) -> Ptr  b -> CInt -> CInt -> CInt -> CInt -> CBool -> IO ()
+
+-- | usage: (@htmlHelpControllerSetTempDir obj path@).
+htmlHelpControllerSetTempDir :: HtmlHelpController  a -> String ->  IO ()
+htmlHelpControllerSetTempDir _obj path 
+  = withObjectRef "htmlHelpControllerSetTempDir" _obj $ \cobj__obj -> 
+    withStringPtr path $ \cobj_path -> 
+    wxHtmlHelpController_SetTempDir cobj__obj  cobj_path  
+foreign import ccall "wxHtmlHelpController_SetTempDir" wxHtmlHelpController_SetTempDir :: Ptr (THtmlHelpController a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@htmlHelpControllerSetTitleFormat obj format@).
+htmlHelpControllerSetTitleFormat :: HtmlHelpController  a -> Ptr  b ->  IO ()
+htmlHelpControllerSetTitleFormat _obj format 
+  = withObjectRef "htmlHelpControllerSetTitleFormat" _obj $ \cobj__obj -> 
+    wxHtmlHelpController_SetTitleFormat cobj__obj  format  
+foreign import ccall "wxHtmlHelpController_SetTitleFormat" wxHtmlHelpController_SetTitleFormat :: Ptr (THtmlHelpController a) -> Ptr  b -> IO ()
+
+-- | usage: (@htmlHelpControllerSetViewer obj viewer flags@).
+htmlHelpControllerSetViewer :: HtmlHelpController  a -> String -> Int ->  IO ()
+htmlHelpControllerSetViewer _obj viewer flags 
+  = withObjectRef "htmlHelpControllerSetViewer" _obj $ \cobj__obj -> 
+    withStringPtr viewer $ \cobj_viewer -> 
+    wxHtmlHelpController_SetViewer cobj__obj  cobj_viewer  (toCInt flags)  
+foreign import ccall "wxHtmlHelpController_SetViewer" wxHtmlHelpController_SetViewer :: Ptr (THtmlHelpController a) -> Ptr (TWxString b) -> CInt -> IO ()
+
+-- | usage: (@htmlHelpControllerUseConfig obj config rootpath@).
+htmlHelpControllerUseConfig :: HtmlHelpController  a -> ConfigBase  b -> String ->  IO ()
+htmlHelpControllerUseConfig _obj config rootpath 
+  = withObjectRef "htmlHelpControllerUseConfig" _obj $ \cobj__obj -> 
+    withObjectPtr config $ \cobj_config -> 
+    withStringPtr rootpath $ \cobj_rootpath -> 
+    wxHtmlHelpController_UseConfig cobj__obj  cobj_config  cobj_rootpath  
+foreign import ccall "wxHtmlHelpController_UseConfig" wxHtmlHelpController_UseConfig :: Ptr (THtmlHelpController a) -> Ptr (TConfigBase b) -> Ptr (TWxString c) -> IO ()
+
+-- | usage: (@htmlHelpControllerWriteCustomization obj cfg path@).
+htmlHelpControllerWriteCustomization :: HtmlHelpController  a -> ConfigBase  b -> String ->  IO ()
+htmlHelpControllerWriteCustomization _obj cfg path 
+  = withObjectRef "htmlHelpControllerWriteCustomization" _obj $ \cobj__obj -> 
+    withObjectPtr cfg $ \cobj_cfg -> 
+    withStringPtr path $ \cobj_path -> 
+    wxHtmlHelpController_WriteCustomization cobj__obj  cobj_cfg  cobj_path  
+foreign import ccall "wxHtmlHelpController_WriteCustomization" wxHtmlHelpController_WriteCustomization :: Ptr (THtmlHelpController a) -> Ptr (TConfigBase b) -> Ptr (TWxString c) -> IO ()
+
+-- | usage: (@htmlWindowAppendToPage obj source@).
+htmlWindowAppendToPage :: HtmlWindow  a -> String ->  IO Bool
+htmlWindowAppendToPage _obj source 
+  = withBoolResult $
+    withObjectRef "htmlWindowAppendToPage" _obj $ \cobj__obj -> 
+    withStringPtr source $ \cobj_source -> 
+    wxHtmlWindow_AppendToPage cobj__obj  cobj_source  
+foreign import ccall "wxHtmlWindow_AppendToPage" wxHtmlWindow_AppendToPage :: Ptr (THtmlWindow a) -> Ptr (TWxString b) -> IO CBool
+
+-- | usage: (@htmlWindowCreate prt id lfttopwdthgt stl txt@).
+htmlWindowCreate :: Window  a -> Id -> Rect -> Style -> String ->  IO (HtmlWindow  ())
+htmlWindowCreate _prt _id _lfttopwdthgt _stl _txt 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    withStringPtr _txt $ \cobj__txt -> 
+    wxHtmlWindow_Create cobj__prt  (toCInt _id)  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  cobj__txt  
+foreign import ccall "wxHtmlWindow_Create" wxHtmlWindow_Create :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> Ptr (TWxString e) -> IO (Ptr (THtmlWindow ()))
+
+-- | usage: (@htmlWindowGetInternalRepresentation obj@).
+htmlWindowGetInternalRepresentation :: HtmlWindow  a ->  IO (HtmlContainerCell  ())
+htmlWindowGetInternalRepresentation _obj 
+  = withObjectResult $
+    withObjectRef "htmlWindowGetInternalRepresentation" _obj $ \cobj__obj -> 
+    wxHtmlWindow_GetInternalRepresentation cobj__obj  
+foreign import ccall "wxHtmlWindow_GetInternalRepresentation" wxHtmlWindow_GetInternalRepresentation :: Ptr (THtmlWindow a) -> IO (Ptr (THtmlContainerCell ()))
+
+-- | usage: (@htmlWindowGetOpenedAnchor obj@).
+htmlWindowGetOpenedAnchor :: HtmlWindow  a ->  IO (String)
+htmlWindowGetOpenedAnchor _obj 
+  = withManagedStringResult $
+    withObjectRef "htmlWindowGetOpenedAnchor" _obj $ \cobj__obj -> 
+    wxHtmlWindow_GetOpenedAnchor cobj__obj  
+foreign import ccall "wxHtmlWindow_GetOpenedAnchor" wxHtmlWindow_GetOpenedAnchor :: Ptr (THtmlWindow a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@htmlWindowGetOpenedPage obj@).
+htmlWindowGetOpenedPage :: HtmlWindow  a ->  IO (String)
+htmlWindowGetOpenedPage _obj 
+  = withManagedStringResult $
+    withObjectRef "htmlWindowGetOpenedPage" _obj $ \cobj__obj -> 
+    wxHtmlWindow_GetOpenedPage cobj__obj  
+foreign import ccall "wxHtmlWindow_GetOpenedPage" wxHtmlWindow_GetOpenedPage :: Ptr (THtmlWindow a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@htmlWindowGetOpenedPageTitle obj@).
+htmlWindowGetOpenedPageTitle :: HtmlWindow  a ->  IO (String)
+htmlWindowGetOpenedPageTitle _obj 
+  = withManagedStringResult $
+    withObjectRef "htmlWindowGetOpenedPageTitle" _obj $ \cobj__obj -> 
+    wxHtmlWindow_GetOpenedPageTitle cobj__obj  
+foreign import ccall "wxHtmlWindow_GetOpenedPageTitle" wxHtmlWindow_GetOpenedPageTitle :: Ptr (THtmlWindow a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@htmlWindowGetRelatedFrame obj@).
+htmlWindowGetRelatedFrame :: HtmlWindow  a ->  IO (Frame  ())
+htmlWindowGetRelatedFrame _obj 
+  = withObjectResult $
+    withObjectRef "htmlWindowGetRelatedFrame" _obj $ \cobj__obj -> 
+    wxHtmlWindow_GetRelatedFrame cobj__obj  
+foreign import ccall "wxHtmlWindow_GetRelatedFrame" wxHtmlWindow_GetRelatedFrame :: Ptr (THtmlWindow a) -> IO (Ptr (TFrame ()))
+
+-- | usage: (@htmlWindowHistoryBack obj@).
+htmlWindowHistoryBack :: HtmlWindow  a ->  IO Bool
+htmlWindowHistoryBack _obj 
+  = withBoolResult $
+    withObjectRef "htmlWindowHistoryBack" _obj $ \cobj__obj -> 
+    wxHtmlWindow_HistoryBack cobj__obj  
+foreign import ccall "wxHtmlWindow_HistoryBack" wxHtmlWindow_HistoryBack :: Ptr (THtmlWindow a) -> IO CBool
+
+-- | usage: (@htmlWindowHistoryCanBack obj@).
+htmlWindowHistoryCanBack :: HtmlWindow  a ->  IO Bool
+htmlWindowHistoryCanBack _obj 
+  = withBoolResult $
+    withObjectRef "htmlWindowHistoryCanBack" _obj $ \cobj__obj -> 
+    wxHtmlWindow_HistoryCanBack cobj__obj  
+foreign import ccall "wxHtmlWindow_HistoryCanBack" wxHtmlWindow_HistoryCanBack :: Ptr (THtmlWindow a) -> IO CBool
+
+-- | usage: (@htmlWindowHistoryCanForward obj@).
+htmlWindowHistoryCanForward :: HtmlWindow  a ->  IO Bool
+htmlWindowHistoryCanForward _obj 
+  = withBoolResult $
+    withObjectRef "htmlWindowHistoryCanForward" _obj $ \cobj__obj -> 
+    wxHtmlWindow_HistoryCanForward cobj__obj  
+foreign import ccall "wxHtmlWindow_HistoryCanForward" wxHtmlWindow_HistoryCanForward :: Ptr (THtmlWindow a) -> IO CBool
+
+-- | usage: (@htmlWindowHistoryClear obj@).
+htmlWindowHistoryClear :: HtmlWindow  a ->  IO ()
+htmlWindowHistoryClear _obj 
+  = withObjectRef "htmlWindowHistoryClear" _obj $ \cobj__obj -> 
+    wxHtmlWindow_HistoryClear cobj__obj  
+foreign import ccall "wxHtmlWindow_HistoryClear" wxHtmlWindow_HistoryClear :: Ptr (THtmlWindow a) -> IO ()
+
+-- | usage: (@htmlWindowHistoryForward obj@).
+htmlWindowHistoryForward :: HtmlWindow  a ->  IO Bool
+htmlWindowHistoryForward _obj 
+  = withBoolResult $
+    withObjectRef "htmlWindowHistoryForward" _obj $ \cobj__obj -> 
+    wxHtmlWindow_HistoryForward cobj__obj  
+foreign import ccall "wxHtmlWindow_HistoryForward" wxHtmlWindow_HistoryForward :: Ptr (THtmlWindow a) -> IO CBool
+
+-- | usage: (@htmlWindowLoadPage obj location@).
+htmlWindowLoadPage :: HtmlWindow  a -> String ->  IO Bool
+htmlWindowLoadPage _obj location 
+  = withBoolResult $
+    withObjectRef "htmlWindowLoadPage" _obj $ \cobj__obj -> 
+    withStringPtr location $ \cobj_location -> 
+    wxHtmlWindow_LoadPage cobj__obj  cobj_location  
+foreign import ccall "wxHtmlWindow_LoadPage" wxHtmlWindow_LoadPage :: Ptr (THtmlWindow a) -> Ptr (TWxString b) -> IO CBool
+
+-- | usage: (@htmlWindowReadCustomization obj cfg path@).
+htmlWindowReadCustomization :: HtmlWindow  a -> ConfigBase  b -> String ->  IO ()
+htmlWindowReadCustomization _obj cfg path 
+  = withObjectRef "htmlWindowReadCustomization" _obj $ \cobj__obj -> 
+    withObjectPtr cfg $ \cobj_cfg -> 
+    withStringPtr path $ \cobj_path -> 
+    wxHtmlWindow_ReadCustomization cobj__obj  cobj_cfg  cobj_path  
+foreign import ccall "wxHtmlWindow_ReadCustomization" wxHtmlWindow_ReadCustomization :: Ptr (THtmlWindow a) -> Ptr (TConfigBase b) -> Ptr (TWxString c) -> IO ()
+
+-- | usage: (@htmlWindowSetBorders obj b@).
+htmlWindowSetBorders :: HtmlWindow  a -> Int ->  IO ()
+htmlWindowSetBorders _obj b 
+  = withObjectRef "htmlWindowSetBorders" _obj $ \cobj__obj -> 
+    wxHtmlWindow_SetBorders cobj__obj  (toCInt b)  
+foreign import ccall "wxHtmlWindow_SetBorders" wxHtmlWindow_SetBorders :: Ptr (THtmlWindow a) -> CInt -> IO ()
+
+-- | usage: (@htmlWindowSetFonts obj normalface fixedface sizes@).
+htmlWindowSetFonts :: HtmlWindow  a -> String -> String -> Ptr CInt ->  IO ()
+htmlWindowSetFonts _obj normalface fixedface sizes 
+  = withObjectRef "htmlWindowSetFonts" _obj $ \cobj__obj -> 
+    withStringPtr normalface $ \cobj_normalface -> 
+    withStringPtr fixedface $ \cobj_fixedface -> 
+    wxHtmlWindow_SetFonts cobj__obj  cobj_normalface  cobj_fixedface  sizes  
+foreign import ccall "wxHtmlWindow_SetFonts" wxHtmlWindow_SetFonts :: Ptr (THtmlWindow a) -> Ptr (TWxString b) -> Ptr (TWxString c) -> Ptr CInt -> IO ()
+
+-- | usage: (@htmlWindowSetPage obj source@).
+htmlWindowSetPage :: HtmlWindow  a -> String ->  IO ()
+htmlWindowSetPage _obj source 
+  = withObjectRef "htmlWindowSetPage" _obj $ \cobj__obj -> 
+    withStringPtr source $ \cobj_source -> 
+    wxHtmlWindow_SetPage cobj__obj  cobj_source  
+foreign import ccall "wxHtmlWindow_SetPage" wxHtmlWindow_SetPage :: Ptr (THtmlWindow a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@htmlWindowSetRelatedFrame obj frame format@).
+htmlWindowSetRelatedFrame :: HtmlWindow  a -> Frame  b -> String ->  IO ()
+htmlWindowSetRelatedFrame _obj frame format 
+  = withObjectRef "htmlWindowSetRelatedFrame" _obj $ \cobj__obj -> 
+    withObjectPtr frame $ \cobj_frame -> 
+    withStringPtr format $ \cobj_format -> 
+    wxHtmlWindow_SetRelatedFrame cobj__obj  cobj_frame  cobj_format  
+foreign import ccall "wxHtmlWindow_SetRelatedFrame" wxHtmlWindow_SetRelatedFrame :: Ptr (THtmlWindow a) -> Ptr (TFrame b) -> Ptr (TWxString c) -> IO ()
+
+-- | usage: (@htmlWindowSetRelatedStatusBar obj bar@).
+htmlWindowSetRelatedStatusBar :: HtmlWindow  a -> Int ->  IO ()
+htmlWindowSetRelatedStatusBar _obj bar 
+  = withObjectRef "htmlWindowSetRelatedStatusBar" _obj $ \cobj__obj -> 
+    wxHtmlWindow_SetRelatedStatusBar cobj__obj  (toCInt bar)  
+foreign import ccall "wxHtmlWindow_SetRelatedStatusBar" wxHtmlWindow_SetRelatedStatusBar :: Ptr (THtmlWindow a) -> CInt -> IO ()
+
+-- | usage: (@htmlWindowWriteCustomization obj cfg path@).
+htmlWindowWriteCustomization :: HtmlWindow  a -> ConfigBase  b -> String ->  IO ()
+htmlWindowWriteCustomization _obj cfg path 
+  = withObjectRef "htmlWindowWriteCustomization" _obj $ \cobj__obj -> 
+    withObjectPtr cfg $ \cobj_cfg -> 
+    withStringPtr path $ \cobj_path -> 
+    wxHtmlWindow_WriteCustomization cobj__obj  cobj_cfg  cobj_path  
+foreign import ccall "wxHtmlWindow_WriteCustomization" wxHtmlWindow_WriteCustomization :: Ptr (THtmlWindow a) -> Ptr (TConfigBase b) -> Ptr (TWxString c) -> IO ()
+
+-- | usage: (@hyperlinkCtrlCreate parent id label url xywh style@).
+hyperlinkCtrlCreate :: Window  a -> Id -> String -> String -> Rect -> Int ->  IO (HyperlinkCtrl  ())
+hyperlinkCtrlCreate parent id label url xywh style 
+  = withObjectResult $
+    withObjectPtr parent $ \cobj_parent -> 
+    withStringPtr label $ \cobj_label -> 
+    withStringPtr url $ \cobj_url -> 
+    wxHyperlinkCtrl_Create cobj_parent  (toCInt id)  cobj_label  cobj_url  (toCIntRectX xywh) (toCIntRectY xywh)(toCIntRectW xywh) (toCIntRectH xywh)  (toCInt style)  
+foreign import ccall "wxHyperlinkCtrl_Create" wxHyperlinkCtrl_Create :: Ptr (TWindow a) -> CInt -> Ptr (TWxString c) -> Ptr (TWxString d) -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (THyperlinkCtrl ()))
+
+-- | usage: (@hyperlinkCtrlGetHoverColour self@).
+hyperlinkCtrlGetHoverColour :: HyperlinkCtrl  a ->  IO (Color)
+hyperlinkCtrlGetHoverColour self 
+  = withManagedColourResult $
+    withObjectRef "hyperlinkCtrlGetHoverColour" self $ \cobj_self -> 
+    wxHyperlinkCtrl_GetHoverColour cobj_self  
+foreign import ccall "wxHyperlinkCtrl_GetHoverColour" wxHyperlinkCtrl_GetHoverColour :: Ptr (THyperlinkCtrl a) -> IO (Ptr (TColour ()))
+
+-- | usage: (@hyperlinkCtrlGetNormalColour self@).
+hyperlinkCtrlGetNormalColour :: HyperlinkCtrl  a ->  IO (Color)
+hyperlinkCtrlGetNormalColour self 
+  = withManagedColourResult $
+    withObjectRef "hyperlinkCtrlGetNormalColour" self $ \cobj_self -> 
+    wxHyperlinkCtrl_GetNormalColour cobj_self  
+foreign import ccall "wxHyperlinkCtrl_GetNormalColour" wxHyperlinkCtrl_GetNormalColour :: Ptr (THyperlinkCtrl a) -> IO (Ptr (TColour ()))
+
+-- | usage: (@hyperlinkCtrlGetURL self@).
+hyperlinkCtrlGetURL :: HyperlinkCtrl  a ->  IO (String)
+hyperlinkCtrlGetURL self 
+  = withManagedStringResult $
+    withObjectRef "hyperlinkCtrlGetURL" self $ \cobj_self -> 
+    wxHyperlinkCtrl_GetURL cobj_self  
+foreign import ccall "wxHyperlinkCtrl_GetURL" wxHyperlinkCtrl_GetURL :: Ptr (THyperlinkCtrl a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@hyperlinkCtrlGetVisited self@).
+hyperlinkCtrlGetVisited :: HyperlinkCtrl  a ->  IO Bool
+hyperlinkCtrlGetVisited self 
+  = withBoolResult $
+    withObjectRef "hyperlinkCtrlGetVisited" self $ \cobj_self -> 
+    wxHyperlinkCtrl_GetVisited cobj_self  
+foreign import ccall "wxHyperlinkCtrl_GetVisited" wxHyperlinkCtrl_GetVisited :: Ptr (THyperlinkCtrl a) -> IO CBool
+
+-- | usage: (@hyperlinkCtrlGetVisitedColour self@).
+hyperlinkCtrlGetVisitedColour :: HyperlinkCtrl  a ->  IO (Color)
+hyperlinkCtrlGetVisitedColour self 
+  = withManagedColourResult $
+    withObjectRef "hyperlinkCtrlGetVisitedColour" self $ \cobj_self -> 
+    wxHyperlinkCtrl_GetVisitedColour cobj_self  
+foreign import ccall "wxHyperlinkCtrl_GetVisitedColour" wxHyperlinkCtrl_GetVisitedColour :: Ptr (THyperlinkCtrl a) -> IO (Ptr (TColour ()))
+
+-- | usage: (@hyperlinkCtrlSetHoverColour self colour@).
+hyperlinkCtrlSetHoverColour :: HyperlinkCtrl  a -> Color ->  IO ()
+hyperlinkCtrlSetHoverColour self colour 
+  = withObjectRef "hyperlinkCtrlSetHoverColour" self $ \cobj_self -> 
+    withColourPtr colour $ \cobj_colour -> 
+    wxHyperlinkCtrl_SetHoverColour cobj_self  cobj_colour  
+foreign import ccall "wxHyperlinkCtrl_SetHoverColour" wxHyperlinkCtrl_SetHoverColour :: Ptr (THyperlinkCtrl a) -> Ptr (TColour b) -> IO ()
+
+-- | usage: (@hyperlinkCtrlSetNormalColour self colour@).
+hyperlinkCtrlSetNormalColour :: HyperlinkCtrl  a -> Color ->  IO ()
+hyperlinkCtrlSetNormalColour self colour 
+  = withObjectRef "hyperlinkCtrlSetNormalColour" self $ \cobj_self -> 
+    withColourPtr colour $ \cobj_colour -> 
+    wxHyperlinkCtrl_SetNormalColour cobj_self  cobj_colour  
+foreign import ccall "wxHyperlinkCtrl_SetNormalColour" wxHyperlinkCtrl_SetNormalColour :: Ptr (THyperlinkCtrl a) -> Ptr (TColour b) -> IO ()
+
+-- | usage: (@hyperlinkCtrlSetURL self url@).
+hyperlinkCtrlSetURL :: HyperlinkCtrl  a -> String ->  IO ()
+hyperlinkCtrlSetURL self url 
+  = withObjectRef "hyperlinkCtrlSetURL" self $ \cobj_self -> 
+    withStringPtr url $ \cobj_url -> 
+    wxHyperlinkCtrl_SetURL cobj_self  cobj_url  
+foreign import ccall "wxHyperlinkCtrl_SetURL" wxHyperlinkCtrl_SetURL :: Ptr (THyperlinkCtrl a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@hyperlinkCtrlSetVisited self visited@).
+hyperlinkCtrlSetVisited :: HyperlinkCtrl  a -> Bool ->  IO ()
+hyperlinkCtrlSetVisited self visited 
+  = withObjectRef "hyperlinkCtrlSetVisited" self $ \cobj_self -> 
+    wxHyperlinkCtrl_SetVisited cobj_self  (toCBool visited)  
+foreign import ccall "wxHyperlinkCtrl_SetVisited" wxHyperlinkCtrl_SetVisited :: Ptr (THyperlinkCtrl a) -> CBool -> IO ()
+
+-- | usage: (@hyperlinkCtrlSetVisitedColour self colour@).
+hyperlinkCtrlSetVisitedColour :: HyperlinkCtrl  a -> Color ->  IO ()
+hyperlinkCtrlSetVisitedColour self colour 
+  = withObjectRef "hyperlinkCtrlSetVisitedColour" self $ \cobj_self -> 
+    withColourPtr colour $ \cobj_colour -> 
+    wxHyperlinkCtrl_SetVisitedColour cobj_self  cobj_colour  
+foreign import ccall "wxHyperlinkCtrl_SetVisitedColour" wxHyperlinkCtrl_SetVisitedColour :: Ptr (THyperlinkCtrl a) -> Ptr (TColour b) -> IO ()
+
+-- | usage: (@iconAssign obj other@).
+iconAssign :: Icon  a -> Ptr  b ->  IO ()
+iconAssign _obj other 
+  = withObjectRef "iconAssign" _obj $ \cobj__obj -> 
+    wxIcon_Assign cobj__obj  other  
+foreign import ccall "wxIcon_Assign" wxIcon_Assign :: Ptr (TIcon a) -> Ptr  b -> IO ()
+
+-- | usage: (@iconBundleAddIcon obj icon@).
+iconBundleAddIcon :: IconBundle  a -> Icon  b ->  IO ()
+iconBundleAddIcon _obj icon 
+  = withObjectRef "iconBundleAddIcon" _obj $ \cobj__obj -> 
+    withObjectPtr icon $ \cobj_icon -> 
+    wxIconBundle_AddIcon cobj__obj  cobj_icon  
+foreign import ccall "wxIconBundle_AddIcon" wxIconBundle_AddIcon :: Ptr (TIconBundle a) -> Ptr (TIcon b) -> IO ()
+
+-- | usage: (@iconBundleAddIconFromFile obj file wxtype@).
+iconBundleAddIconFromFile :: IconBundle  a -> String -> Int ->  IO ()
+iconBundleAddIconFromFile _obj file wxtype 
+  = withObjectRef "iconBundleAddIconFromFile" _obj $ \cobj__obj -> 
+    withStringPtr file $ \cobj_file -> 
+    wxIconBundle_AddIconFromFile cobj__obj  cobj_file  (toCInt wxtype)  
+foreign import ccall "wxIconBundle_AddIconFromFile" wxIconBundle_AddIconFromFile :: Ptr (TIconBundle a) -> Ptr (TWxString b) -> CInt -> IO ()
+
+-- | usage: (@iconBundleCreateDefault@).
+iconBundleCreateDefault ::  IO (IconBundle  ())
+iconBundleCreateDefault 
+  = withObjectResult $
+    wxIconBundle_CreateDefault 
+foreign import ccall "wxIconBundle_CreateDefault" wxIconBundle_CreateDefault :: IO (Ptr (TIconBundle ()))
+
+-- | usage: (@iconBundleCreateFromFile file wxtype@).
+iconBundleCreateFromFile :: String -> Int ->  IO (IconBundle  ())
+iconBundleCreateFromFile file wxtype 
+  = withObjectResult $
+    withStringPtr file $ \cobj_file -> 
+    wxIconBundle_CreateFromFile cobj_file  (toCInt wxtype)  
+foreign import ccall "wxIconBundle_CreateFromFile" wxIconBundle_CreateFromFile :: Ptr (TWxString a) -> CInt -> IO (Ptr (TIconBundle ()))
+
+-- | usage: (@iconBundleCreateFromIcon icon@).
+iconBundleCreateFromIcon :: Icon  a ->  IO (IconBundle  ())
+iconBundleCreateFromIcon icon 
+  = withObjectResult $
+    withObjectPtr icon $ \cobj_icon -> 
+    wxIconBundle_CreateFromIcon cobj_icon  
+foreign import ccall "wxIconBundle_CreateFromIcon" wxIconBundle_CreateFromIcon :: Ptr (TIcon a) -> IO (Ptr (TIconBundle ()))
+
+-- | usage: (@iconBundleDelete obj@).
+iconBundleDelete :: IconBundle  a ->  IO ()
+iconBundleDelete _obj 
+  = withObjectRef "iconBundleDelete" _obj $ \cobj__obj -> 
+    wxIconBundle_Delete cobj__obj  
+foreign import ccall "wxIconBundle_Delete" wxIconBundle_Delete :: Ptr (TIconBundle a) -> IO ()
+
+-- | usage: (@iconBundleGetIcon obj wh@).
+iconBundleGetIcon :: IconBundle  a -> Size ->  IO (Icon  ())
+iconBundleGetIcon _obj wh 
+  = withRefIcon $ \pref -> 
+    withObjectRef "iconBundleGetIcon" _obj $ \cobj__obj -> 
+    wxIconBundle_GetIcon cobj__obj  (toCIntSizeW wh) (toCIntSizeH wh)   pref
+foreign import ccall "wxIconBundle_GetIcon" wxIconBundle_GetIcon :: Ptr (TIconBundle a) -> CInt -> CInt -> Ptr (TIcon ()) -> IO ()
+
+-- | usage: (@iconCopyFromBitmap obj bmp@).
+iconCopyFromBitmap :: Icon  a -> Bitmap  b ->  IO ()
+iconCopyFromBitmap _obj bmp 
+  = withObjectRef "iconCopyFromBitmap" _obj $ \cobj__obj -> 
+    withObjectPtr bmp $ \cobj_bmp -> 
+    wxIcon_CopyFromBitmap cobj__obj  cobj_bmp  
+foreign import ccall "wxIcon_CopyFromBitmap" wxIcon_CopyFromBitmap :: Ptr (TIcon a) -> Ptr (TBitmap b) -> IO ()
+
+-- | usage: (@iconCreateDefault@).
+iconCreateDefault ::  IO (Icon  ())
+iconCreateDefault 
+  = withManagedIconResult $
+    wxIcon_CreateDefault 
+foreign import ccall "wxIcon_CreateDefault" wxIcon_CreateDefault :: IO (Ptr (TIcon ()))
+
+-- | usage: (@iconCreateLoad name wxtype widthheight@).
+iconCreateLoad :: String -> Int -> Size ->  IO (Icon  ())
+iconCreateLoad name wxtype widthheight 
+  = withManagedIconResult $
+    withStringPtr name $ \cobj_name -> 
+    wxIcon_CreateLoad cobj_name  (toCInt wxtype)  (toCIntSizeW widthheight) (toCIntSizeH widthheight)  
+foreign import ccall "wxIcon_CreateLoad" wxIcon_CreateLoad :: Ptr (TWxString a) -> CInt -> CInt -> CInt -> IO (Ptr (TIcon ()))
+
+-- | usage: (@iconDelete obj@).
+iconDelete :: Icon  a ->  IO ()
+iconDelete
+  = objectDelete
+
+
+-- | usage: (@iconFromRaw wxdata widthheight@).
+iconFromRaw :: Icon  a -> Size ->  IO (Icon  ())
+iconFromRaw wxdata widthheight 
+  = withManagedIconResult $
+    withObjectRef "iconFromRaw" wxdata $ \cobj_wxdata -> 
+    wxIcon_FromRaw cobj_wxdata  (toCIntSizeW widthheight) (toCIntSizeH widthheight)  
+foreign import ccall "wxIcon_FromRaw" wxIcon_FromRaw :: Ptr (TIcon a) -> CInt -> CInt -> IO (Ptr (TIcon ()))
+
+-- | usage: (@iconFromXPM wxdata@).
+iconFromXPM :: Icon  a ->  IO (Icon  ())
+iconFromXPM wxdata 
+  = withManagedIconResult $
+    withObjectRef "iconFromXPM" wxdata $ \cobj_wxdata -> 
+    wxIcon_FromXPM cobj_wxdata  
+foreign import ccall "wxIcon_FromXPM" wxIcon_FromXPM :: Ptr (TIcon a) -> IO (Ptr (TIcon ()))
+
+-- | usage: (@iconGetDepth obj@).
+iconGetDepth :: Icon  a ->  IO Int
+iconGetDepth _obj 
+  = withIntResult $
+    withObjectRef "iconGetDepth" _obj $ \cobj__obj -> 
+    wxIcon_GetDepth cobj__obj  
+foreign import ccall "wxIcon_GetDepth" wxIcon_GetDepth :: Ptr (TIcon a) -> IO CInt
+
+-- | usage: (@iconGetHeight obj@).
+iconGetHeight :: Icon  a ->  IO Int
+iconGetHeight _obj 
+  = withIntResult $
+    withObjectRef "iconGetHeight" _obj $ \cobj__obj -> 
+    wxIcon_GetHeight cobj__obj  
+foreign import ccall "wxIcon_GetHeight" wxIcon_GetHeight :: Ptr (TIcon a) -> IO CInt
+
+-- | usage: (@iconGetWidth obj@).
+iconGetWidth :: Icon  a ->  IO Int
+iconGetWidth _obj 
+  = withIntResult $
+    withObjectRef "iconGetWidth" _obj $ \cobj__obj -> 
+    wxIcon_GetWidth cobj__obj  
+foreign import ccall "wxIcon_GetWidth" wxIcon_GetWidth :: Ptr (TIcon a) -> IO CInt
+
+-- | usage: (@iconIsEqual obj other@).
+iconIsEqual :: Icon  a -> Icon  b ->  IO Bool
+iconIsEqual _obj other 
+  = withBoolResult $
+    withObjectRef "iconIsEqual" _obj $ \cobj__obj -> 
+    withObjectPtr other $ \cobj_other -> 
+    wxIcon_IsEqual cobj__obj  cobj_other  
+foreign import ccall "wxIcon_IsEqual" wxIcon_IsEqual :: Ptr (TIcon a) -> Ptr (TIcon b) -> IO CBool
+
+-- | usage: (@iconIsOk obj@).
+iconIsOk :: Icon  a ->  IO Bool
+iconIsOk _obj 
+  = withBoolResult $
+    withObjectRef "iconIsOk" _obj $ \cobj__obj -> 
+    wxIcon_IsOk cobj__obj  
+foreign import ccall "wxIcon_IsOk" wxIcon_IsOk :: Ptr (TIcon a) -> IO CBool
+
+-- | usage: (@iconIsStatic self@).
+iconIsStatic :: Icon  a ->  IO Bool
+iconIsStatic self 
+  = withBoolResult $
+    withObjectPtr self $ \cobj_self -> 
+    wxIcon_IsStatic cobj_self  
+foreign import ccall "wxIcon_IsStatic" wxIcon_IsStatic :: Ptr (TIcon a) -> IO CBool
+
+-- | usage: (@iconLoad obj name wxtype widthheight@).
+iconLoad :: Icon  a -> String -> Int -> Size ->  IO Int
+iconLoad _obj name wxtype widthheight 
+  = withIntResult $
+    withObjectRef "iconLoad" _obj $ \cobj__obj -> 
+    withStringPtr name $ \cobj_name -> 
+    wxIcon_Load cobj__obj  cobj_name  (toCInt wxtype)  (toCIntSizeW widthheight) (toCIntSizeH widthheight)  
+foreign import ccall "wxIcon_Load" wxIcon_Load :: Ptr (TIcon a) -> Ptr (TWxString b) -> CInt -> CInt -> CInt -> IO CInt
+
+-- | usage: (@iconSafeDelete self@).
+iconSafeDelete :: Icon  a ->  IO ()
+iconSafeDelete self 
+  = withObjectPtr self $ \cobj_self -> 
+    wxIcon_SafeDelete cobj_self  
+foreign import ccall "wxIcon_SafeDelete" wxIcon_SafeDelete :: Ptr (TIcon a) -> IO ()
+
+-- | usage: (@iconSetDepth obj depth@).
+iconSetDepth :: Icon  a -> Int ->  IO ()
+iconSetDepth _obj depth 
+  = withObjectRef "iconSetDepth" _obj $ \cobj__obj -> 
+    wxIcon_SetDepth cobj__obj  (toCInt depth)  
+foreign import ccall "wxIcon_SetDepth" wxIcon_SetDepth :: Ptr (TIcon a) -> CInt -> IO ()
+
+-- | usage: (@iconSetHeight obj height@).
+iconSetHeight :: Icon  a -> Int ->  IO ()
+iconSetHeight _obj height 
+  = withObjectRef "iconSetHeight" _obj $ \cobj__obj -> 
+    wxIcon_SetHeight cobj__obj  (toCInt height)  
+foreign import ccall "wxIcon_SetHeight" wxIcon_SetHeight :: Ptr (TIcon a) -> CInt -> IO ()
+
+-- | usage: (@iconSetWidth obj width@).
+iconSetWidth :: Icon  a -> Int ->  IO ()
+iconSetWidth _obj width 
+  = withObjectRef "iconSetWidth" _obj $ \cobj__obj -> 
+    wxIcon_SetWidth cobj__obj  (toCInt width)  
+foreign import ccall "wxIcon_SetWidth" wxIcon_SetWidth :: Ptr (TIcon a) -> CInt -> IO ()
+
+-- | usage: (@idleEventCopyObject obj objectdest@).
+idleEventCopyObject :: IdleEvent  a -> WxObject  b ->  IO ()
+idleEventCopyObject _obj objectdest 
+  = withObjectRef "idleEventCopyObject" _obj $ \cobj__obj -> 
+    withObjectPtr objectdest $ \cobj_objectdest -> 
+    wxIdleEvent_CopyObject cobj__obj  cobj_objectdest  
+foreign import ccall "wxIdleEvent_CopyObject" wxIdleEvent_CopyObject :: Ptr (TIdleEvent a) -> Ptr (TWxObject b) -> IO ()
+
+-- | usage: (@idleEventMoreRequested obj@).
+idleEventMoreRequested :: IdleEvent  a ->  IO Bool
+idleEventMoreRequested _obj 
+  = withBoolResult $
+    withObjectRef "idleEventMoreRequested" _obj $ \cobj__obj -> 
+    wxIdleEvent_MoreRequested cobj__obj  
+foreign import ccall "wxIdleEvent_MoreRequested" wxIdleEvent_MoreRequested :: Ptr (TIdleEvent a) -> IO CBool
+
+-- | usage: (@idleEventRequestMore obj needMore@).
+idleEventRequestMore :: IdleEvent  a -> Bool ->  IO ()
+idleEventRequestMore _obj needMore 
+  = withObjectRef "idleEventRequestMore" _obj $ \cobj__obj -> 
+    wxIdleEvent_RequestMore cobj__obj  (toCBool needMore)  
+foreign import ccall "wxIdleEvent_RequestMore" wxIdleEvent_RequestMore :: Ptr (TIdleEvent a) -> CBool -> IO ()
+
+-- | usage: (@imageCanRead name@).
+imageCanRead :: String ->  IO Bool
+imageCanRead name 
+  = withBoolResult $
+    withStringPtr name $ \cobj_name -> 
+    wxImage_CanRead cobj_name  
+foreign import ccall "wxImage_CanRead" wxImage_CanRead :: Ptr (TWxString a) -> IO CBool
+
+-- | usage: (@imageConvertToBitmap obj@).
+imageConvertToBitmap :: Image  a ->  IO (Bitmap  ())
+imageConvertToBitmap _obj 
+  = withRefBitmap $ \pref -> 
+    withObjectRef "imageConvertToBitmap" _obj $ \cobj__obj -> 
+    wxImage_ConvertToBitmap cobj__obj   pref
+foreign import ccall "wxImage_ConvertToBitmap" wxImage_ConvertToBitmap :: Ptr (TImage a) -> Ptr (TBitmap ()) -> IO ()
+
+-- | usage: (@imageConvertToByteString obj wxtype@).
+imageConvertToByteString :: Image  a -> Int ->  IO B.ByteString
+imageConvertToByteString _obj wxtype 
+  = withByteStringResult $ \buffer -> 
+    withObjectRef "imageConvertToByteString" _obj $ \cobj__obj -> 
+    wxImage_ConvertToByteString cobj__obj  (toCInt wxtype)   buffer
+foreign import ccall "wxImage_ConvertToByteString" wxImage_ConvertToByteString :: Ptr (TImage a) -> CInt -> Ptr CChar -> IO CInt
+
+-- | usage: (@imageConvertToLazyByteString obj wxtype@).
+imageConvertToLazyByteString :: Image  a -> Int ->  IO LB.ByteString
+imageConvertToLazyByteString _obj wxtype 
+  = withLazyByteStringResult $ \buffer -> 
+    withObjectRef "imageConvertToLazyByteString" _obj $ \cobj__obj -> 
+    wxImage_ConvertToLazyByteString cobj__obj  (toCInt wxtype)   buffer
+foreign import ccall "wxImage_ConvertToLazyByteString" wxImage_ConvertToLazyByteString :: Ptr (TImage a) -> CInt -> Ptr CChar -> IO CInt
+
+-- | usage: (@imageCopy obj@).
+imageCopy :: Image  a ->  IO (Image  ())
+imageCopy _obj 
+  = withRefImage $ \pref -> 
+    withObjectRef "imageCopy" _obj $ \cobj__obj -> 
+    wxImage_Copy cobj__obj   pref
+foreign import ccall "wxImage_Copy" wxImage_Copy :: Ptr (TImage a) -> Ptr (TImage ()) -> IO ()
+
+-- | usage: (@imageCountColours obj stopafter@).
+imageCountColours :: Image  a -> Int ->  IO Int
+imageCountColours _obj stopafter 
+  = withIntResult $
+    withObjectRef "imageCountColours" _obj $ \cobj__obj -> 
+    wxImage_CountColours cobj__obj  (toCInt stopafter)  
+foreign import ccall "wxImage_CountColours" wxImage_CountColours :: Ptr (TImage a) -> CInt -> IO CInt
+
+-- | usage: (@imageCreateDefault@).
+imageCreateDefault ::  IO (Image  ())
+imageCreateDefault 
+  = withManagedObjectResult $
+    wxImage_CreateDefault 
+foreign import ccall "wxImage_CreateDefault" wxImage_CreateDefault :: IO (Ptr (TImage ()))
+
+-- | usage: (@imageCreateFromBitmap bitmap@).
+imageCreateFromBitmap :: Bitmap  a ->  IO (Image  ())
+imageCreateFromBitmap bitmap 
+  = withManagedObjectResult $
+    withObjectPtr bitmap $ \cobj_bitmap -> 
+    wxImage_CreateFromBitmap cobj_bitmap  
+foreign import ccall "wxImage_CreateFromBitmap" wxImage_CreateFromBitmap :: Ptr (TBitmap a) -> IO (Ptr (TImage ()))
+
+-- | usage: (@imageCreateFromByteString widthheight datalength@).
+imageCreateFromByteString :: Size -> B.ByteString ->  IO (Image  ())
+imageCreateFromByteString widthheight datalength 
+  = withManagedObjectResult $
+    B.useAsCStringLen datalength $ \(bs_datalength, bslen_datalength)  -> 
+    wxImage_CreateFromByteString (toCIntSizeW widthheight) (toCIntSizeH widthheight)  bs_datalength bslen_datalength  
+foreign import ccall "wxImage_CreateFromByteString" wxImage_CreateFromByteString :: CInt -> CInt -> Ptr CChar -> Int -> IO (Ptr (TImage ()))
+
+-- | usage: (@imageCreateFromData widthheight wxdata@).
+imageCreateFromData :: Size -> Ptr  b ->  IO (Image  ())
+imageCreateFromData widthheight wxdata 
+  = withManagedObjectResult $
+    wxImage_CreateFromData (toCIntSizeW widthheight) (toCIntSizeH widthheight)  wxdata  
+foreign import ccall "wxImage_CreateFromData" wxImage_CreateFromData :: CInt -> CInt -> Ptr  b -> IO (Ptr (TImage ()))
+
+-- | usage: (@imageCreateFromDataEx widthheight wxdata isStaticData@).
+imageCreateFromDataEx :: Size -> Ptr  b -> Bool ->  IO (Image  ())
+imageCreateFromDataEx widthheight wxdata isStaticData 
+  = withManagedObjectResult $
+    wxImage_CreateFromDataEx (toCIntSizeW widthheight) (toCIntSizeH widthheight)  wxdata  (toCBool isStaticData)  
+foreign import ccall "wxImage_CreateFromDataEx" wxImage_CreateFromDataEx :: CInt -> CInt -> Ptr  b -> CBool -> IO (Ptr (TImage ()))
+
+-- | usage: (@imageCreateFromFile name@).
+imageCreateFromFile :: String ->  IO (Image  ())
+imageCreateFromFile name 
+  = withManagedObjectResult $
+    withStringPtr name $ \cobj_name -> 
+    wxImage_CreateFromFile cobj_name  
+foreign import ccall "wxImage_CreateFromFile" wxImage_CreateFromFile :: Ptr (TWxString a) -> IO (Ptr (TImage ()))
+
+-- | usage: (@imageCreateFromLazyByteString widthheight datalength@).
+imageCreateFromLazyByteString :: Size -> LB.ByteString ->  IO (Image  ())
+imageCreateFromLazyByteString widthheight datalength 
+  = withManagedObjectResult $
+    withArray (LB.unpack datalength) $ \bs_datalength -> 
+    wxImage_CreateFromLazyByteString (toCIntSizeW widthheight) (toCIntSizeH widthheight)  bs_datalength (fromIntegral $ LB.length datalength)  
+foreign import ccall "wxImage_CreateFromLazyByteString" wxImage_CreateFromLazyByteString :: CInt -> CInt -> Ptr Word8 -> Int -> IO (Ptr (TImage ()))
+
+-- | usage: (@imageCreateSized widthheight@).
+imageCreateSized :: Size ->  IO (Image  ())
+imageCreateSized widthheight 
+  = withManagedObjectResult $
+    wxImage_CreateSized (toCIntSizeW widthheight) (toCIntSizeH widthheight)  
+foreign import ccall "wxImage_CreateSized" wxImage_CreateSized :: CInt -> CInt -> IO (Ptr (TImage ()))
+
+-- | usage: (@imageDelete image@).
+imageDelete :: Image  a ->  IO ()
+imageDelete
+  = objectDelete
+
+
+-- | usage: (@imageDestroy obj@).
+imageDestroy :: Image  a ->  IO ()
+imageDestroy _obj 
+  = withObjectRef "imageDestroy" _obj $ \cobj__obj -> 
+    wxImage_Destroy cobj__obj  
+foreign import ccall "wxImage_Destroy" wxImage_Destroy :: Ptr (TImage a) -> IO ()
+
+-- | usage: (@imageGetBlue obj xy@).
+imageGetBlue :: Image  a -> Point ->  IO Char
+imageGetBlue _obj xy 
+  = withCharResult $
+    withObjectRef "imageGetBlue" _obj $ \cobj__obj -> 
+    wxImage_GetBlue cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxImage_GetBlue" wxImage_GetBlue :: Ptr (TImage a) -> CInt -> CInt -> IO CWchar
+
+-- | usage: (@imageGetData obj@).
+imageGetData :: Image  a ->  IO (Ptr  ())
+imageGetData _obj 
+  = withObjectRef "imageGetData" _obj $ \cobj__obj -> 
+    wxImage_GetData cobj__obj  
+foreign import ccall "wxImage_GetData" wxImage_GetData :: Ptr (TImage a) -> IO (Ptr  ())
+
+-- | usage: (@imageGetGreen obj xy@).
+imageGetGreen :: Image  a -> Point ->  IO Char
+imageGetGreen _obj xy 
+  = withCharResult $
+    withObjectRef "imageGetGreen" _obj $ \cobj__obj -> 
+    wxImage_GetGreen cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxImage_GetGreen" wxImage_GetGreen :: Ptr (TImage a) -> CInt -> CInt -> IO CWchar
+
+-- | usage: (@imageGetHeight obj@).
+imageGetHeight :: Image  a ->  IO Int
+imageGetHeight _obj 
+  = withIntResult $
+    withObjectRef "imageGetHeight" _obj $ \cobj__obj -> 
+    wxImage_GetHeight cobj__obj  
+foreign import ccall "wxImage_GetHeight" wxImage_GetHeight :: Ptr (TImage a) -> IO CInt
+
+-- | usage: (@imageGetMaskBlue obj@).
+imageGetMaskBlue :: Image  a ->  IO Char
+imageGetMaskBlue _obj 
+  = withCharResult $
+    withObjectRef "imageGetMaskBlue" _obj $ \cobj__obj -> 
+    wxImage_GetMaskBlue cobj__obj  
+foreign import ccall "wxImage_GetMaskBlue" wxImage_GetMaskBlue :: Ptr (TImage a) -> IO CWchar
+
+-- | usage: (@imageGetMaskGreen obj@).
+imageGetMaskGreen :: Image  a ->  IO Char
+imageGetMaskGreen _obj 
+  = withCharResult $
+    withObjectRef "imageGetMaskGreen" _obj $ \cobj__obj -> 
+    wxImage_GetMaskGreen cobj__obj  
+foreign import ccall "wxImage_GetMaskGreen" wxImage_GetMaskGreen :: Ptr (TImage a) -> IO CWchar
+
+-- | usage: (@imageGetMaskRed obj@).
+imageGetMaskRed :: Image  a ->  IO Char
+imageGetMaskRed _obj 
+  = withCharResult $
+    withObjectRef "imageGetMaskRed" _obj $ \cobj__obj -> 
+    wxImage_GetMaskRed cobj__obj  
+foreign import ccall "wxImage_GetMaskRed" wxImage_GetMaskRed :: Ptr (TImage a) -> IO CWchar
+
+-- | usage: (@imageGetOption obj name@).
+imageGetOption :: Image  a -> String ->  IO (String)
+imageGetOption _obj name 
+  = withManagedStringResult $
+    withObjectRef "imageGetOption" _obj $ \cobj__obj -> 
+    withStringPtr name $ \cobj_name -> 
+    wxImage_GetOption cobj__obj  cobj_name  
+foreign import ccall "wxImage_GetOption" wxImage_GetOption :: Ptr (TImage a) -> Ptr (TWxString b) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@imageGetOptionInt obj name@).
+imageGetOptionInt :: Image  a -> String ->  IO Bool
+imageGetOptionInt _obj name 
+  = withBoolResult $
+    withObjectRef "imageGetOptionInt" _obj $ \cobj__obj -> 
+    withStringPtr name $ \cobj_name -> 
+    wxImage_GetOptionInt cobj__obj  cobj_name  
+foreign import ccall "wxImage_GetOptionInt" wxImage_GetOptionInt :: Ptr (TImage a) -> Ptr (TWxString b) -> IO CBool
+
+-- | usage: (@imageGetRed obj xy@).
+imageGetRed :: Image  a -> Point ->  IO Char
+imageGetRed _obj xy 
+  = withCharResult $
+    withObjectRef "imageGetRed" _obj $ \cobj__obj -> 
+    wxImage_GetRed cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxImage_GetRed" wxImage_GetRed :: Ptr (TImage a) -> CInt -> CInt -> IO CWchar
+
+-- | usage: (@imageGetSubImage obj xywh@).
+imageGetSubImage :: Image  a -> Rect ->  IO (Image  ())
+imageGetSubImage _obj xywh 
+  = withRefImage $ \pref -> 
+    withObjectRef "imageGetSubImage" _obj $ \cobj__obj -> 
+    wxImage_GetSubImage cobj__obj  (toCIntRectX xywh) (toCIntRectY xywh)(toCIntRectW xywh) (toCIntRectH xywh)   pref
+foreign import ccall "wxImage_GetSubImage" wxImage_GetSubImage :: Ptr (TImage a) -> CInt -> CInt -> CInt -> CInt -> Ptr (TImage ()) -> IO ()
+
+-- | usage: (@imageGetType obj@).
+imageGetType :: Image  a ->  IO Int
+imageGetType _obj 
+  = withIntResult $
+    withObjectRef "imageGetType" _obj $ \cobj__obj -> 
+    wxImage_GetType cobj__obj  
+foreign import ccall "wxImage_GetType" wxImage_GetType :: Ptr (TImage a) -> IO CInt
+
+-- | usage: (@imageGetWidth obj@).
+imageGetWidth :: Image  a ->  IO Int
+imageGetWidth _obj 
+  = withIntResult $
+    withObjectRef "imageGetWidth" _obj $ \cobj__obj -> 
+    wxImage_GetWidth cobj__obj  
+foreign import ccall "wxImage_GetWidth" wxImage_GetWidth :: Ptr (TImage a) -> IO CInt
+
+-- | usage: (@imageHasMask obj@).
+imageHasMask :: Image  a ->  IO Bool
+imageHasMask _obj 
+  = withBoolResult $
+    withObjectRef "imageHasMask" _obj $ \cobj__obj -> 
+    wxImage_HasMask cobj__obj  
+foreign import ccall "wxImage_HasMask" wxImage_HasMask :: Ptr (TImage a) -> IO CBool
+
+-- | usage: (@imageHasOption obj name@).
+imageHasOption :: Image  a -> String ->  IO Bool
+imageHasOption _obj name 
+  = withBoolResult $
+    withObjectRef "imageHasOption" _obj $ \cobj__obj -> 
+    withStringPtr name $ \cobj_name -> 
+    wxImage_HasOption cobj__obj  cobj_name  
+foreign import ccall "wxImage_HasOption" wxImage_HasOption :: Ptr (TImage a) -> Ptr (TWxString b) -> IO CBool
+
+-- | usage: (@imageInitialize obj widthheight@).
+imageInitialize :: Image  a -> Size ->  IO ()
+imageInitialize _obj widthheight 
+  = withObjectRef "imageInitialize" _obj $ \cobj__obj -> 
+    wxImage_Initialize cobj__obj  (toCIntSizeW widthheight) (toCIntSizeH widthheight)  
+foreign import ccall "wxImage_Initialize" wxImage_Initialize :: Ptr (TImage a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@imageInitializeFromData obj widthheight wxdata@).
+imageInitializeFromData :: Image  a -> Size -> Ptr  c ->  IO ()
+imageInitializeFromData _obj widthheight wxdata 
+  = withObjectRef "imageInitializeFromData" _obj $ \cobj__obj -> 
+    wxImage_InitializeFromData cobj__obj  (toCIntSizeW widthheight) (toCIntSizeH widthheight)  wxdata  
+foreign import ccall "wxImage_InitializeFromData" wxImage_InitializeFromData :: Ptr (TImage a) -> CInt -> CInt -> Ptr  c -> IO ()
+
+-- | usage: (@imageIsOk obj@).
+imageIsOk :: Image  a ->  IO Bool
+imageIsOk _obj 
+  = withBoolResult $
+    withObjectRef "imageIsOk" _obj $ \cobj__obj -> 
+    wxImage_IsOk cobj__obj  
+foreign import ccall "wxImage_IsOk" wxImage_IsOk :: Ptr (TImage a) -> IO CBool
+
+-- | usage: (@imageListAddBitmap obj bitmap mask@).
+imageListAddBitmap :: ImageList  a -> Bitmap  b -> Bitmap  c ->  IO Int
+imageListAddBitmap _obj bitmap mask 
+  = withIntResult $
+    withObjectRef "imageListAddBitmap" _obj $ \cobj__obj -> 
+    withObjectPtr bitmap $ \cobj_bitmap -> 
+    withObjectPtr mask $ \cobj_mask -> 
+    wxImageList_AddBitmap cobj__obj  cobj_bitmap  cobj_mask  
+foreign import ccall "wxImageList_AddBitmap" wxImageList_AddBitmap :: Ptr (TImageList a) -> Ptr (TBitmap b) -> Ptr (TBitmap c) -> IO CInt
+
+-- | usage: (@imageListAddIcon obj icon@).
+imageListAddIcon :: ImageList  a -> Icon  b ->  IO Int
+imageListAddIcon _obj icon 
+  = withIntResult $
+    withObjectRef "imageListAddIcon" _obj $ \cobj__obj -> 
+    withObjectPtr icon $ \cobj_icon -> 
+    wxImageList_AddIcon cobj__obj  cobj_icon  
+foreign import ccall "wxImageList_AddIcon" wxImageList_AddIcon :: Ptr (TImageList a) -> Ptr (TIcon b) -> IO CInt
+
+-- | usage: (@imageListAddMasked obj bitmap maskColour@).
+imageListAddMasked :: ImageList  a -> Bitmap  b -> Color ->  IO Int
+imageListAddMasked _obj bitmap maskColour 
+  = withIntResult $
+    withObjectRef "imageListAddMasked" _obj $ \cobj__obj -> 
+    withObjectPtr bitmap $ \cobj_bitmap -> 
+    withColourPtr maskColour $ \cobj_maskColour -> 
+    wxImageList_AddMasked cobj__obj  cobj_bitmap  cobj_maskColour  
+foreign import ccall "wxImageList_AddMasked" wxImageList_AddMasked :: Ptr (TImageList a) -> Ptr (TBitmap b) -> Ptr (TColour c) -> IO CInt
+
+-- | usage: (@imageListCreate widthheight mask initialCount@).
+imageListCreate :: Size -> Bool -> Int ->  IO (ImageList  ())
+imageListCreate widthheight mask initialCount 
+  = withObjectResult $
+    wxImageList_Create (toCIntSizeW widthheight) (toCIntSizeH widthheight)  (toCBool mask)  (toCInt initialCount)  
+foreign import ccall "wxImageList_Create" wxImageList_Create :: CInt -> CInt -> CBool -> CInt -> IO (Ptr (TImageList ()))
+
+-- | usage: (@imageListDelete obj@).
+imageListDelete :: ImageList  a ->  IO ()
+imageListDelete
+  = objectDelete
+
+
+-- | usage: (@imageListDraw obj index dc xy flags solidBackground@).
+imageListDraw :: ImageList  a -> Int -> DC  c -> Point -> Int -> Bool ->  IO Bool
+imageListDraw _obj index dc xy flags solidBackground 
+  = withBoolResult $
+    withObjectRef "imageListDraw" _obj $ \cobj__obj -> 
+    withObjectPtr dc $ \cobj_dc -> 
+    wxImageList_Draw cobj__obj  (toCInt index)  cobj_dc  (toCIntPointX xy) (toCIntPointY xy)  (toCInt flags)  (toCBool solidBackground)  
+foreign import ccall "wxImageList_Draw" wxImageList_Draw :: Ptr (TImageList a) -> CInt -> Ptr (TDC c) -> CInt -> CInt -> CInt -> CBool -> IO CBool
+
+-- | usage: (@imageListGetImageCount obj@).
+imageListGetImageCount :: ImageList  a ->  IO Int
+imageListGetImageCount _obj 
+  = withIntResult $
+    withObjectRef "imageListGetImageCount" _obj $ \cobj__obj -> 
+    wxImageList_GetImageCount cobj__obj  
+foreign import ccall "wxImageList_GetImageCount" wxImageList_GetImageCount :: Ptr (TImageList a) -> IO CInt
+
+-- | usage: (@imageListGetSize obj index@).
+imageListGetSize :: ImageList  a -> Int ->  IO Size
+imageListGetSize _obj index 
+  = withSizeResult $ \pw ph -> 
+    withObjectRef "imageListGetSize" _obj $ \cobj__obj -> 
+    wxImageList_GetSize cobj__obj  (toCInt index)   pw ph
+foreign import ccall "wxImageList_GetSize" wxImageList_GetSize :: Ptr (TImageList a) -> CInt -> Ptr CInt -> Ptr CInt -> IO ()
+
+-- | usage: (@imageListRemove obj index@).
+imageListRemove :: ImageList  a -> Int ->  IO Bool
+imageListRemove _obj index 
+  = withBoolResult $
+    withObjectRef "imageListRemove" _obj $ \cobj__obj -> 
+    wxImageList_Remove cobj__obj  (toCInt index)  
+foreign import ccall "wxImageList_Remove" wxImageList_Remove :: Ptr (TImageList a) -> CInt -> IO CBool
+
+-- | usage: (@imageListRemoveAll obj@).
+imageListRemoveAll :: ImageList  a ->  IO Bool
+imageListRemoveAll _obj 
+  = withBoolResult $
+    withObjectRef "imageListRemoveAll" _obj $ \cobj__obj -> 
+    wxImageList_RemoveAll cobj__obj  
+foreign import ccall "wxImageList_RemoveAll" wxImageList_RemoveAll :: Ptr (TImageList a) -> IO CBool
+
+-- | usage: (@imageListReplace obj index bitmap mask@).
+imageListReplace :: ImageList  a -> Int -> Bitmap  c -> Bitmap  d ->  IO Bool
+imageListReplace _obj index bitmap mask 
+  = withBoolResult $
+    withObjectRef "imageListReplace" _obj $ \cobj__obj -> 
+    withObjectPtr bitmap $ \cobj_bitmap -> 
+    withObjectPtr mask $ \cobj_mask -> 
+    wxImageList_Replace cobj__obj  (toCInt index)  cobj_bitmap  cobj_mask  
+foreign import ccall "wxImageList_Replace" wxImageList_Replace :: Ptr (TImageList a) -> CInt -> Ptr (TBitmap c) -> Ptr (TBitmap d) -> IO CBool
+
+-- | usage: (@imageListReplaceIcon obj index icon@).
+imageListReplaceIcon :: ImageList  a -> Int -> Icon  c ->  IO Bool
+imageListReplaceIcon _obj index icon 
+  = withBoolResult $
+    withObjectRef "imageListReplaceIcon" _obj $ \cobj__obj -> 
+    withObjectPtr icon $ \cobj_icon -> 
+    wxImageList_ReplaceIcon cobj__obj  (toCInt index)  cobj_icon  
+foreign import ccall "wxImageList_ReplaceIcon" wxImageList_ReplaceIcon :: Ptr (TImageList a) -> CInt -> Ptr (TIcon c) -> IO CBool
+
+-- | usage: (@imageLoadFile obj name wxtype@).
+imageLoadFile :: Image  a -> String -> Int ->  IO Bool
+imageLoadFile _obj name wxtype 
+  = withBoolResult $
+    withObjectRef "imageLoadFile" _obj $ \cobj__obj -> 
+    withStringPtr name $ \cobj_name -> 
+    wxImage_LoadFile cobj__obj  cobj_name  (toCInt wxtype)  
+foreign import ccall "wxImage_LoadFile" wxImage_LoadFile :: Ptr (TImage a) -> Ptr (TWxString b) -> CInt -> IO CBool
+
+-- | usage: (@imageLoadStream obj name wxtype index@).
+imageLoadStream :: Image  a -> InputStream  b -> Int -> Int ->  IO Bool
+imageLoadStream _obj name wxtype index 
+  = withBoolResult $
+    withObjectRef "imageLoadStream" _obj $ \cobj__obj -> 
+    withObjectPtr name $ \cobj_name -> 
+    wxImage_LoadStream cobj__obj  cobj_name  (toCInt wxtype)  (toCInt index)  
+foreign import ccall "wxImage_LoadStream" wxImage_LoadStream :: Ptr (TImage a) -> Ptr (TInputStream b) -> CInt -> CInt -> IO CBool
+
+-- | usage: (@imageMirror obj horizontally@).
+imageMirror :: Image  a -> Bool ->  IO (Image  ())
+imageMirror _obj horizontally 
+  = withRefImage $ \pref -> 
+    withObjectRef "imageMirror" _obj $ \cobj__obj -> 
+    wxImage_Mirror cobj__obj  (toCBool horizontally)   pref
+foreign import ccall "wxImage_Mirror" wxImage_Mirror :: Ptr (TImage a) -> CBool -> Ptr (TImage ()) -> IO ()
+
+-- | usage: (@imagePaste obj image xy@).
+imagePaste :: Image  a -> Image  b -> Point ->  IO ()
+imagePaste _obj image xy 
+  = withObjectRef "imagePaste" _obj $ \cobj__obj -> 
+    withObjectPtr image $ \cobj_image -> 
+    wxImage_Paste cobj__obj  cobj_image  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxImage_Paste" wxImage_Paste :: Ptr (TImage a) -> Ptr (TImage b) -> CInt -> CInt -> IO ()
+
+-- | usage: (@imageReplace obj r1g1b1 r2g2b2@).
+imageReplace :: Image  a -> Color -> Color ->  IO ()
+imageReplace _obj r1g1b1 r2g2b2 
+  = withObjectRef "imageReplace" _obj $ \cobj__obj -> 
+    wxImage_Replace cobj__obj  (colorRed r1g1b1) (colorGreen r1g1b1) (colorBlue r1g1b1)  (colorRed r2g2b2) (colorGreen r2g2b2) (colorBlue r2g2b2)  
+foreign import ccall "wxImage_Replace" wxImage_Replace :: Ptr (TImage a) -> Word8 -> Word8 -> Word8 -> Word8 -> Word8 -> Word8 -> IO ()
+
+-- | usage: (@imageRescale obj widthheight@).
+imageRescale :: Image  a -> Size ->  IO ()
+imageRescale _obj widthheight 
+  = withObjectRef "imageRescale" _obj $ \cobj__obj -> 
+    wxImage_Rescale cobj__obj  (toCIntSizeW widthheight) (toCIntSizeH widthheight)  
+foreign import ccall "wxImage_Rescale" wxImage_Rescale :: Ptr (TImage a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@imageRescaleEx obj widthheight quality@).
+imageRescaleEx :: Image  a -> Size -> Int ->  IO ()
+imageRescaleEx _obj widthheight quality 
+  = withObjectRef "imageRescaleEx" _obj $ \cobj__obj -> 
+    wxImage_RescaleEx cobj__obj  (toCIntSizeW widthheight) (toCIntSizeH widthheight)  (toCInt quality)  
+foreign import ccall "wxImage_RescaleEx" wxImage_RescaleEx :: Ptr (TImage a) -> CInt -> CInt -> CInt -> IO ()
+
+-- | usage: (@imageRotate obj angle cxcy interpolating offsetafterrotation@).
+imageRotate :: Image  a -> Double -> Point -> Bool -> Ptr  e ->  IO (Image  ())
+imageRotate _obj angle cxcy interpolating offsetafterrotation 
+  = withRefImage $ \pref -> 
+    withObjectRef "imageRotate" _obj $ \cobj__obj -> 
+    wxImage_Rotate cobj__obj  angle  (toCIntPointX cxcy) (toCIntPointY cxcy)  (toCBool interpolating)  offsetafterrotation   pref
+foreign import ccall "wxImage_Rotate" wxImage_Rotate :: Ptr (TImage a) -> Double -> CInt -> CInt -> CBool -> Ptr  e -> Ptr (TImage ()) -> IO ()
+
+-- | usage: (@imageRotate90 obj clockwise@).
+imageRotate90 :: Image  a -> Bool ->  IO (Image  ())
+imageRotate90 _obj clockwise 
+  = withRefImage $ \pref -> 
+    withObjectRef "imageRotate90" _obj $ \cobj__obj -> 
+    wxImage_Rotate90 cobj__obj  (toCBool clockwise)   pref
+foreign import ccall "wxImage_Rotate90" wxImage_Rotate90 :: Ptr (TImage a) -> CBool -> Ptr (TImage ()) -> IO ()
+
+-- | usage: (@imageSaveFile obj name wxtype@).
+imageSaveFile :: Image  a -> String -> Int ->  IO Bool
+imageSaveFile _obj name wxtype 
+  = withBoolResult $
+    withObjectRef "imageSaveFile" _obj $ \cobj__obj -> 
+    withStringPtr name $ \cobj_name -> 
+    wxImage_SaveFile cobj__obj  cobj_name  (toCInt wxtype)  
+foreign import ccall "wxImage_SaveFile" wxImage_SaveFile :: Ptr (TImage a) -> Ptr (TWxString b) -> CInt -> IO CBool
+
+-- | usage: (@imageSaveStream obj stream wxtype@).
+imageSaveStream :: Image  a -> OutputStream  b -> Int ->  IO Bool
+imageSaveStream _obj stream wxtype 
+  = withBoolResult $
+    withObjectRef "imageSaveStream" _obj $ \cobj__obj -> 
+    withObjectPtr stream $ \cobj_stream -> 
+    wxImage_SaveStream cobj__obj  cobj_stream  (toCInt wxtype)  
+foreign import ccall "wxImage_SaveStream" wxImage_SaveStream :: Ptr (TImage a) -> Ptr (TOutputStream b) -> CInt -> IO CBool
+
+-- | usage: (@imageScale obj widthheight@).
+imageScale :: Image  a -> Size ->  IO (Image  ())
+imageScale _obj widthheight 
+  = withRefImage $ \pref -> 
+    withObjectRef "imageScale" _obj $ \cobj__obj -> 
+    wxImage_Scale cobj__obj  (toCIntSizeW widthheight) (toCIntSizeH widthheight)   pref
+foreign import ccall "wxImage_Scale" wxImage_Scale :: Ptr (TImage a) -> CInt -> CInt -> Ptr (TImage ()) -> IO ()
+
+-- | usage: (@imageScaleEx obj widthheight quality@).
+imageScaleEx :: Image  a -> Size -> Int ->  IO (Image  ())
+imageScaleEx _obj widthheight quality 
+  = withRefImage $ \pref -> 
+    withObjectRef "imageScaleEx" _obj $ \cobj__obj -> 
+    wxImage_ScaleEx cobj__obj  (toCIntSizeW widthheight) (toCIntSizeH widthheight)  (toCInt quality)   pref
+foreign import ccall "wxImage_ScaleEx" wxImage_ScaleEx :: Ptr (TImage a) -> CInt -> CInt -> CInt -> Ptr (TImage ()) -> IO ()
+
+-- | usage: (@imageSetData obj wxdata@).
+imageSetData :: Image  a -> Ptr  b ->  IO ()
+imageSetData _obj wxdata 
+  = withObjectRef "imageSetData" _obj $ \cobj__obj -> 
+    wxImage_SetData cobj__obj  wxdata  
+foreign import ccall "wxImage_SetData" wxImage_SetData :: Ptr (TImage a) -> Ptr  b -> IO ()
+
+-- | usage: (@imageSetDataAndSize obj wxdata newwidthnewheight@).
+imageSetDataAndSize :: Image  a -> Ptr  b -> Size ->  IO ()
+imageSetDataAndSize _obj wxdata newwidthnewheight 
+  = withObjectRef "imageSetDataAndSize" _obj $ \cobj__obj -> 
+    wxImage_SetDataAndSize cobj__obj  wxdata  (toCIntSizeW newwidthnewheight) (toCIntSizeH newwidthnewheight)  
+foreign import ccall "wxImage_SetDataAndSize" wxImage_SetDataAndSize :: Ptr (TImage a) -> Ptr  b -> CInt -> CInt -> IO ()
+
+-- | usage: (@imageSetMask obj mask@).
+imageSetMask :: Image  a -> Int ->  IO ()
+imageSetMask _obj mask 
+  = withObjectRef "imageSetMask" _obj $ \cobj__obj -> 
+    wxImage_SetMask cobj__obj  (toCInt mask)  
+foreign import ccall "wxImage_SetMask" wxImage_SetMask :: Ptr (TImage a) -> CInt -> IO ()
+
+-- | usage: (@imageSetMaskColour obj rgb@).
+imageSetMaskColour :: Image  a -> Color ->  IO ()
+imageSetMaskColour _obj rgb 
+  = withObjectRef "imageSetMaskColour" _obj $ \cobj__obj -> 
+    wxImage_SetMaskColour cobj__obj  (colorRed rgb) (colorGreen rgb) (colorBlue rgb)  
+foreign import ccall "wxImage_SetMaskColour" wxImage_SetMaskColour :: Ptr (TImage a) -> Word8 -> Word8 -> Word8 -> IO ()
+
+-- | usage: (@imageSetOption obj name value@).
+imageSetOption :: Image  a -> String -> String ->  IO ()
+imageSetOption _obj name value 
+  = withObjectRef "imageSetOption" _obj $ \cobj__obj -> 
+    withStringPtr name $ \cobj_name -> 
+    withStringPtr value $ \cobj_value -> 
+    wxImage_SetOption cobj__obj  cobj_name  cobj_value  
+foreign import ccall "wxImage_SetOption" wxImage_SetOption :: Ptr (TImage a) -> Ptr (TWxString b) -> Ptr (TWxString c) -> IO ()
+
+-- | usage: (@imageSetOptionInt obj name value@).
+imageSetOptionInt :: Image  a -> String -> Int ->  IO ()
+imageSetOptionInt _obj name value 
+  = withObjectRef "imageSetOptionInt" _obj $ \cobj__obj -> 
+    withStringPtr name $ \cobj_name -> 
+    wxImage_SetOptionInt cobj__obj  cobj_name  (toCInt value)  
+foreign import ccall "wxImage_SetOptionInt" wxImage_SetOptionInt :: Ptr (TImage a) -> Ptr (TWxString b) -> CInt -> IO ()
+
+-- | usage: (@imageSetRGB obj xy rgb@).
+imageSetRGB :: Image  a -> Point -> Color ->  IO ()
+imageSetRGB _obj xy rgb 
+  = withObjectRef "imageSetRGB" _obj $ \cobj__obj -> 
+    wxImage_SetRGB cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  (colorRed rgb) (colorGreen rgb) (colorBlue rgb)  
+foreign import ccall "wxImage_SetRGB" wxImage_SetRGB :: Ptr (TImage a) -> CInt -> CInt -> Word8 -> Word8 -> Word8 -> IO ()
+
+-- | usage: (@imageSetType obj wxtype@).
+imageSetType :: Image  a -> Int ->  IO ()
+imageSetType _obj wxtype 
+  = withObjectRef "imageSetType" _obj $ \cobj__obj -> 
+    wxImage_SetType cobj__obj  (toCInt wxtype)  
+foreign import ccall "wxImage_SetType" wxImage_SetType :: Ptr (TImage a) -> CInt -> IO ()
+
+-- | usage: (@individualLayoutConstraintAbove obj sibling marg@).
+individualLayoutConstraintAbove :: IndividualLayoutConstraint  a -> Window  b -> Int ->  IO ()
+individualLayoutConstraintAbove _obj sibling marg 
+  = withObjectRef "individualLayoutConstraintAbove" _obj $ \cobj__obj -> 
+    withObjectPtr sibling $ \cobj_sibling -> 
+    wxIndividualLayoutConstraint_Above cobj__obj  cobj_sibling  (toCInt marg)  
+foreign import ccall "wxIndividualLayoutConstraint_Above" wxIndividualLayoutConstraint_Above :: Ptr (TIndividualLayoutConstraint a) -> Ptr (TWindow b) -> CInt -> IO ()
+
+-- | usage: (@individualLayoutConstraintAbsolute obj val@).
+individualLayoutConstraintAbsolute :: IndividualLayoutConstraint  a -> Int ->  IO ()
+individualLayoutConstraintAbsolute _obj val 
+  = withObjectRef "individualLayoutConstraintAbsolute" _obj $ \cobj__obj -> 
+    wxIndividualLayoutConstraint_Absolute cobj__obj  (toCInt val)  
+foreign import ccall "wxIndividualLayoutConstraint_Absolute" wxIndividualLayoutConstraint_Absolute :: Ptr (TIndividualLayoutConstraint a) -> CInt -> IO ()
+
+-- | usage: (@individualLayoutConstraintAsIs obj@).
+individualLayoutConstraintAsIs :: IndividualLayoutConstraint  a ->  IO ()
+individualLayoutConstraintAsIs _obj 
+  = withObjectRef "individualLayoutConstraintAsIs" _obj $ \cobj__obj -> 
+    wxIndividualLayoutConstraint_AsIs cobj__obj  
+foreign import ccall "wxIndividualLayoutConstraint_AsIs" wxIndividualLayoutConstraint_AsIs :: Ptr (TIndividualLayoutConstraint a) -> IO ()
+
+-- | usage: (@individualLayoutConstraintBelow obj sibling marg@).
+individualLayoutConstraintBelow :: IndividualLayoutConstraint  a -> Window  b -> Int ->  IO ()
+individualLayoutConstraintBelow _obj sibling marg 
+  = withObjectRef "individualLayoutConstraintBelow" _obj $ \cobj__obj -> 
+    withObjectPtr sibling $ \cobj_sibling -> 
+    wxIndividualLayoutConstraint_Below cobj__obj  cobj_sibling  (toCInt marg)  
+foreign import ccall "wxIndividualLayoutConstraint_Below" wxIndividualLayoutConstraint_Below :: Ptr (TIndividualLayoutConstraint a) -> Ptr (TWindow b) -> CInt -> IO ()
+
+-- | usage: (@individualLayoutConstraintGetDone obj@).
+individualLayoutConstraintGetDone :: IndividualLayoutConstraint  a ->  IO Bool
+individualLayoutConstraintGetDone _obj 
+  = withBoolResult $
+    withObjectRef "individualLayoutConstraintGetDone" _obj $ \cobj__obj -> 
+    wxIndividualLayoutConstraint_GetDone cobj__obj  
+foreign import ccall "wxIndividualLayoutConstraint_GetDone" wxIndividualLayoutConstraint_GetDone :: Ptr (TIndividualLayoutConstraint a) -> IO CBool
+
+-- | usage: (@individualLayoutConstraintGetEdge obj which thisWin other@).
+individualLayoutConstraintGetEdge :: IndividualLayoutConstraint  a -> Int -> Ptr  c -> Ptr  d ->  IO Int
+individualLayoutConstraintGetEdge _obj which thisWin other 
+  = withIntResult $
+    withObjectRef "individualLayoutConstraintGetEdge" _obj $ \cobj__obj -> 
+    wxIndividualLayoutConstraint_GetEdge cobj__obj  (toCInt which)  thisWin  other  
+foreign import ccall "wxIndividualLayoutConstraint_GetEdge" wxIndividualLayoutConstraint_GetEdge :: Ptr (TIndividualLayoutConstraint a) -> CInt -> Ptr  c -> Ptr  d -> IO CInt
+
+-- | usage: (@individualLayoutConstraintGetMargin obj@).
+individualLayoutConstraintGetMargin :: IndividualLayoutConstraint  a ->  IO Int
+individualLayoutConstraintGetMargin _obj 
+  = withIntResult $
+    withObjectRef "individualLayoutConstraintGetMargin" _obj $ \cobj__obj -> 
+    wxIndividualLayoutConstraint_GetMargin cobj__obj  
+foreign import ccall "wxIndividualLayoutConstraint_GetMargin" wxIndividualLayoutConstraint_GetMargin :: Ptr (TIndividualLayoutConstraint a) -> IO CInt
+
+-- | usage: (@individualLayoutConstraintGetMyEdge obj@).
+individualLayoutConstraintGetMyEdge :: IndividualLayoutConstraint  a ->  IO Int
+individualLayoutConstraintGetMyEdge _obj 
+  = withIntResult $
+    withObjectRef "individualLayoutConstraintGetMyEdge" _obj $ \cobj__obj -> 
+    wxIndividualLayoutConstraint_GetMyEdge cobj__obj  
+foreign import ccall "wxIndividualLayoutConstraint_GetMyEdge" wxIndividualLayoutConstraint_GetMyEdge :: Ptr (TIndividualLayoutConstraint a) -> IO CInt
+
+-- | usage: (@individualLayoutConstraintGetOtherEdge obj@).
+individualLayoutConstraintGetOtherEdge :: IndividualLayoutConstraint  a ->  IO Int
+individualLayoutConstraintGetOtherEdge _obj 
+  = withIntResult $
+    withObjectRef "individualLayoutConstraintGetOtherEdge" _obj $ \cobj__obj -> 
+    wxIndividualLayoutConstraint_GetOtherEdge cobj__obj  
+foreign import ccall "wxIndividualLayoutConstraint_GetOtherEdge" wxIndividualLayoutConstraint_GetOtherEdge :: Ptr (TIndividualLayoutConstraint a) -> IO CInt
+
+-- | usage: (@individualLayoutConstraintGetOtherWindow obj@).
+individualLayoutConstraintGetOtherWindow :: IndividualLayoutConstraint  a ->  IO (Ptr  ())
+individualLayoutConstraintGetOtherWindow _obj 
+  = withObjectRef "individualLayoutConstraintGetOtherWindow" _obj $ \cobj__obj -> 
+    wxIndividualLayoutConstraint_GetOtherWindow cobj__obj  
+foreign import ccall "wxIndividualLayoutConstraint_GetOtherWindow" wxIndividualLayoutConstraint_GetOtherWindow :: Ptr (TIndividualLayoutConstraint a) -> IO (Ptr  ())
+
+-- | usage: (@individualLayoutConstraintGetPercent obj@).
+individualLayoutConstraintGetPercent :: IndividualLayoutConstraint  a ->  IO Int
+individualLayoutConstraintGetPercent _obj 
+  = withIntResult $
+    withObjectRef "individualLayoutConstraintGetPercent" _obj $ \cobj__obj -> 
+    wxIndividualLayoutConstraint_GetPercent cobj__obj  
+foreign import ccall "wxIndividualLayoutConstraint_GetPercent" wxIndividualLayoutConstraint_GetPercent :: Ptr (TIndividualLayoutConstraint a) -> IO CInt
+
+-- | usage: (@individualLayoutConstraintGetRelationship obj@).
+individualLayoutConstraintGetRelationship :: IndividualLayoutConstraint  a ->  IO Int
+individualLayoutConstraintGetRelationship _obj 
+  = withIntResult $
+    withObjectRef "individualLayoutConstraintGetRelationship" _obj $ \cobj__obj -> 
+    wxIndividualLayoutConstraint_GetRelationship cobj__obj  
+foreign import ccall "wxIndividualLayoutConstraint_GetRelationship" wxIndividualLayoutConstraint_GetRelationship :: Ptr (TIndividualLayoutConstraint a) -> IO CInt
+
+-- | usage: (@individualLayoutConstraintGetValue obj@).
+individualLayoutConstraintGetValue :: IndividualLayoutConstraint  a ->  IO Int
+individualLayoutConstraintGetValue _obj 
+  = withIntResult $
+    withObjectRef "individualLayoutConstraintGetValue" _obj $ \cobj__obj -> 
+    wxIndividualLayoutConstraint_GetValue cobj__obj  
+foreign import ccall "wxIndividualLayoutConstraint_GetValue" wxIndividualLayoutConstraint_GetValue :: Ptr (TIndividualLayoutConstraint a) -> IO CInt
+
+-- | usage: (@individualLayoutConstraintLeftOf obj sibling marg@).
+individualLayoutConstraintLeftOf :: IndividualLayoutConstraint  a -> Window  b -> Int ->  IO ()
+individualLayoutConstraintLeftOf _obj sibling marg 
+  = withObjectRef "individualLayoutConstraintLeftOf" _obj $ \cobj__obj -> 
+    withObjectPtr sibling $ \cobj_sibling -> 
+    wxIndividualLayoutConstraint_LeftOf cobj__obj  cobj_sibling  (toCInt marg)  
+foreign import ccall "wxIndividualLayoutConstraint_LeftOf" wxIndividualLayoutConstraint_LeftOf :: Ptr (TIndividualLayoutConstraint a) -> Ptr (TWindow b) -> CInt -> IO ()
+
+-- | usage: (@individualLayoutConstraintPercentOf obj otherW wh per@).
+individualLayoutConstraintPercentOf :: IndividualLayoutConstraint  a -> Window  b -> Int -> Int ->  IO ()
+individualLayoutConstraintPercentOf _obj otherW wh per 
+  = withObjectRef "individualLayoutConstraintPercentOf" _obj $ \cobj__obj -> 
+    withObjectPtr otherW $ \cobj_otherW -> 
+    wxIndividualLayoutConstraint_PercentOf cobj__obj  cobj_otherW  (toCInt wh)  (toCInt per)  
+foreign import ccall "wxIndividualLayoutConstraint_PercentOf" wxIndividualLayoutConstraint_PercentOf :: Ptr (TIndividualLayoutConstraint a) -> Ptr (TWindow b) -> CInt -> CInt -> IO ()
+
+-- | usage: (@individualLayoutConstraintResetIfWin obj otherW@).
+individualLayoutConstraintResetIfWin :: IndividualLayoutConstraint  a -> Window  b ->  IO Bool
+individualLayoutConstraintResetIfWin _obj otherW 
+  = withBoolResult $
+    withObjectRef "individualLayoutConstraintResetIfWin" _obj $ \cobj__obj -> 
+    withObjectPtr otherW $ \cobj_otherW -> 
+    wxIndividualLayoutConstraint_ResetIfWin cobj__obj  cobj_otherW  
+foreign import ccall "wxIndividualLayoutConstraint_ResetIfWin" wxIndividualLayoutConstraint_ResetIfWin :: Ptr (TIndividualLayoutConstraint a) -> Ptr (TWindow b) -> IO CBool
+
+-- | usage: (@individualLayoutConstraintRightOf obj sibling marg@).
+individualLayoutConstraintRightOf :: IndividualLayoutConstraint  a -> Window  b -> Int ->  IO ()
+individualLayoutConstraintRightOf _obj sibling marg 
+  = withObjectRef "individualLayoutConstraintRightOf" _obj $ \cobj__obj -> 
+    withObjectPtr sibling $ \cobj_sibling -> 
+    wxIndividualLayoutConstraint_RightOf cobj__obj  cobj_sibling  (toCInt marg)  
+foreign import ccall "wxIndividualLayoutConstraint_RightOf" wxIndividualLayoutConstraint_RightOf :: Ptr (TIndividualLayoutConstraint a) -> Ptr (TWindow b) -> CInt -> IO ()
+
+-- | usage: (@individualLayoutConstraintSameAs obj otherW edge marg@).
+individualLayoutConstraintSameAs :: IndividualLayoutConstraint  a -> Window  b -> Int -> Int ->  IO ()
+individualLayoutConstraintSameAs _obj otherW edge marg 
+  = withObjectRef "individualLayoutConstraintSameAs" _obj $ \cobj__obj -> 
+    withObjectPtr otherW $ \cobj_otherW -> 
+    wxIndividualLayoutConstraint_SameAs cobj__obj  cobj_otherW  (toCInt edge)  (toCInt marg)  
+foreign import ccall "wxIndividualLayoutConstraint_SameAs" wxIndividualLayoutConstraint_SameAs :: Ptr (TIndividualLayoutConstraint a) -> Ptr (TWindow b) -> CInt -> CInt -> IO ()
+
+-- | usage: (@individualLayoutConstraintSatisfyConstraint obj constraints win@).
+individualLayoutConstraintSatisfyConstraint :: IndividualLayoutConstraint  a -> Ptr  b -> Window  c ->  IO Bool
+individualLayoutConstraintSatisfyConstraint _obj constraints win 
+  = withBoolResult $
+    withObjectRef "individualLayoutConstraintSatisfyConstraint" _obj $ \cobj__obj -> 
+    withObjectPtr win $ \cobj_win -> 
+    wxIndividualLayoutConstraint_SatisfyConstraint cobj__obj  constraints  cobj_win  
+foreign import ccall "wxIndividualLayoutConstraint_SatisfyConstraint" wxIndividualLayoutConstraint_SatisfyConstraint :: Ptr (TIndividualLayoutConstraint a) -> Ptr  b -> Ptr (TWindow c) -> IO CBool
+
+-- | usage: (@individualLayoutConstraintSet obj rel otherW otherE val marg@).
+individualLayoutConstraintSet :: IndividualLayoutConstraint  a -> Int -> Window  c -> Int -> Int -> Int ->  IO ()
+individualLayoutConstraintSet _obj rel otherW otherE val marg 
+  = withObjectRef "individualLayoutConstraintSet" _obj $ \cobj__obj -> 
+    withObjectPtr otherW $ \cobj_otherW -> 
+    wxIndividualLayoutConstraint_Set cobj__obj  (toCInt rel)  cobj_otherW  (toCInt otherE)  (toCInt val)  (toCInt marg)  
+foreign import ccall "wxIndividualLayoutConstraint_Set" wxIndividualLayoutConstraint_Set :: Ptr (TIndividualLayoutConstraint a) -> CInt -> Ptr (TWindow c) -> CInt -> CInt -> CInt -> IO ()
+
+-- | usage: (@individualLayoutConstraintSetDone obj d@).
+individualLayoutConstraintSetDone :: IndividualLayoutConstraint  a -> Bool ->  IO ()
+individualLayoutConstraintSetDone _obj d 
+  = withObjectRef "individualLayoutConstraintSetDone" _obj $ \cobj__obj -> 
+    wxIndividualLayoutConstraint_SetDone cobj__obj  (toCBool d)  
+foreign import ccall "wxIndividualLayoutConstraint_SetDone" wxIndividualLayoutConstraint_SetDone :: Ptr (TIndividualLayoutConstraint a) -> CBool -> IO ()
+
+-- | usage: (@individualLayoutConstraintSetEdge obj which@).
+individualLayoutConstraintSetEdge :: IndividualLayoutConstraint  a -> Int ->  IO ()
+individualLayoutConstraintSetEdge _obj which 
+  = withObjectRef "individualLayoutConstraintSetEdge" _obj $ \cobj__obj -> 
+    wxIndividualLayoutConstraint_SetEdge cobj__obj  (toCInt which)  
+foreign import ccall "wxIndividualLayoutConstraint_SetEdge" wxIndividualLayoutConstraint_SetEdge :: Ptr (TIndividualLayoutConstraint a) -> CInt -> IO ()
+
+-- | usage: (@individualLayoutConstraintSetMargin obj m@).
+individualLayoutConstraintSetMargin :: IndividualLayoutConstraint  a -> Int ->  IO ()
+individualLayoutConstraintSetMargin _obj m 
+  = withObjectRef "individualLayoutConstraintSetMargin" _obj $ \cobj__obj -> 
+    wxIndividualLayoutConstraint_SetMargin cobj__obj  (toCInt m)  
+foreign import ccall "wxIndividualLayoutConstraint_SetMargin" wxIndividualLayoutConstraint_SetMargin :: Ptr (TIndividualLayoutConstraint a) -> CInt -> IO ()
+
+-- | usage: (@individualLayoutConstraintSetRelationship obj r@).
+individualLayoutConstraintSetRelationship :: IndividualLayoutConstraint  a -> Int ->  IO ()
+individualLayoutConstraintSetRelationship _obj r 
+  = withObjectRef "individualLayoutConstraintSetRelationship" _obj $ \cobj__obj -> 
+    wxIndividualLayoutConstraint_SetRelationship cobj__obj  (toCInt r)  
+foreign import ccall "wxIndividualLayoutConstraint_SetRelationship" wxIndividualLayoutConstraint_SetRelationship :: Ptr (TIndividualLayoutConstraint a) -> CInt -> IO ()
+
+-- | usage: (@individualLayoutConstraintSetValue obj v@).
+individualLayoutConstraintSetValue :: IndividualLayoutConstraint  a -> Int ->  IO ()
+individualLayoutConstraintSetValue _obj v 
+  = withObjectRef "individualLayoutConstraintSetValue" _obj $ \cobj__obj -> 
+    wxIndividualLayoutConstraint_SetValue cobj__obj  (toCInt v)  
+foreign import ccall "wxIndividualLayoutConstraint_SetValue" wxIndividualLayoutConstraint_SetValue :: Ptr (TIndividualLayoutConstraint a) -> CInt -> IO ()
+
+-- | usage: (@individualLayoutConstraintUnconstrained obj@).
+individualLayoutConstraintUnconstrained :: IndividualLayoutConstraint  a ->  IO ()
+individualLayoutConstraintUnconstrained _obj 
+  = withObjectRef "individualLayoutConstraintUnconstrained" _obj $ \cobj__obj -> 
+    wxIndividualLayoutConstraint_Unconstrained cobj__obj  
+foreign import ccall "wxIndividualLayoutConstraint_Unconstrained" wxIndividualLayoutConstraint_Unconstrained :: Ptr (TIndividualLayoutConstraint a) -> IO ()
+
+{- |  Create an event driven input stream. It is unsafe to reference the original inputStream after this call! The last parameter @bufferLen@ gives the default input batch size. The sink is automatically destroyed whenever the input stream has no more input.  -}
+inputSinkCreate :: InputStream  a -> EvtHandler  b -> Int ->  IO (InputSink  ())
+inputSinkCreate input evtHandler bufferLen 
+  = withObjectResult $
+    withObjectPtr input $ \cobj_input -> 
+    withObjectPtr evtHandler $ \cobj_evtHandler -> 
+    wxInputSink_Create cobj_input  cobj_evtHandler  (toCInt bufferLen)  
+foreign import ccall "wxInputSink_Create" wxInputSink_Create :: Ptr (TInputStream a) -> Ptr (TEvtHandler b) -> CInt -> IO (Ptr (TInputSink ()))
+
+{- |  Get the input status (@wxSTREAM_NO_ERROR@ is ok).  -}
+inputSinkEventLastError :: InputSinkEvent  a ->  IO Int
+inputSinkEventLastError obj 
+  = withIntResult $
+    withObjectRef "inputSinkEventLastError" obj $ \cobj_obj -> 
+    wxInputSinkEvent_LastError cobj_obj  
+foreign import ccall "wxInputSinkEvent_LastError" wxInputSinkEvent_LastError :: Ptr (TInputSinkEvent a) -> IO CInt
+
+{- |  The input buffer.  -}
+inputSinkEventLastInput :: InputSinkEvent  a ->  IO (Ptr CWchar)
+inputSinkEventLastInput obj 
+  = withObjectRef "inputSinkEventLastInput" obj $ \cobj_obj -> 
+    wxInputSinkEvent_LastInput cobj_obj  
+foreign import ccall "wxInputSinkEvent_LastInput" wxInputSinkEvent_LastInput :: Ptr (TInputSinkEvent a) -> IO (Ptr CWchar)
+
+{- |  The number of characters in the input buffer.  -}
+inputSinkEventLastRead :: InputSinkEvent  a ->  IO Int
+inputSinkEventLastRead obj 
+  = withIntResult $
+    withObjectRef "inputSinkEventLastRead" obj $ \cobj_obj -> 
+    wxInputSinkEvent_LastRead cobj_obj  
+foreign import ccall "wxInputSinkEvent_LastRead" wxInputSinkEvent_LastRead :: Ptr (TInputSinkEvent a) -> IO CInt
+
+{- |  After creation, retrieve the @id@ of the sink to connect to @wxEVT_INPUT_SINK@ events.  -}
+inputSinkGetId :: InputSink  a ->  IO Int
+inputSinkGetId obj 
+  = withIntResult $
+    withObjectRef "inputSinkGetId" obj $ \cobj_obj -> 
+    wxInputSink_GetId cobj_obj  
+foreign import ccall "wxInputSink_GetId" wxInputSink_GetId :: Ptr (TInputSink a) -> IO CInt
+
+{- |  After event connection, start non-blocking reading of the inputstream. This will generate @inputSinkEvent@ events.  -}
+inputSinkStart :: InputSink  a ->  IO ()
+inputSinkStart obj 
+  = withObjectRef "inputSinkStart" obj $ \cobj_obj -> 
+    wxInputSink_Start cobj_obj  
+foreign import ccall "wxInputSink_Start" wxInputSink_Start :: Ptr (TInputSink a) -> IO ()
+
+-- | usage: (@inputStreamCanRead self@).
+inputStreamCanRead :: InputStream  a ->  IO Bool
+inputStreamCanRead self 
+  = withBoolResult $
+    withObjectRef "inputStreamCanRead" self $ \cobj_self -> 
+    wxInputStream_CanRead cobj_self  
+foreign import ccall "wxInputStream_CanRead" wxInputStream_CanRead :: Ptr (TInputStream a) -> IO CBool
+
+-- | usage: (@inputStreamDelete obj@).
+inputStreamDelete :: InputStream  a ->  IO ()
+inputStreamDelete _obj 
+  = withObjectRef "inputStreamDelete" _obj $ \cobj__obj -> 
+    wxInputStream_Delete cobj__obj  
+foreign import ccall "wxInputStream_Delete" wxInputStream_Delete :: Ptr (TInputStream a) -> IO ()
+
+-- | usage: (@inputStreamEof obj@).
+inputStreamEof :: InputStream  a ->  IO Bool
+inputStreamEof _obj 
+  = withBoolResult $
+    withObjectRef "inputStreamEof" _obj $ \cobj__obj -> 
+    wxInputStream_Eof cobj__obj  
+foreign import ccall "wxInputStream_Eof" wxInputStream_Eof :: Ptr (TInputStream a) -> IO CBool
+
+-- | usage: (@inputStreamGetC obj@).
+inputStreamGetC :: InputStream  a ->  IO Char
+inputStreamGetC _obj 
+  = withCharResult $
+    withObjectRef "inputStreamGetC" _obj $ \cobj__obj -> 
+    wxInputStream_GetC cobj__obj  
+foreign import ccall "wxInputStream_GetC" wxInputStream_GetC :: Ptr (TInputStream a) -> IO CWchar
+
+-- | usage: (@inputStreamLastRead obj@).
+inputStreamLastRead :: InputStream  a ->  IO Int
+inputStreamLastRead _obj 
+  = withIntResult $
+    withObjectRef "inputStreamLastRead" _obj $ \cobj__obj -> 
+    wxInputStream_LastRead cobj__obj  
+foreign import ccall "wxInputStream_LastRead" wxInputStream_LastRead :: Ptr (TInputStream a) -> IO CInt
+
+-- | usage: (@inputStreamPeek obj@).
+inputStreamPeek :: InputStream  a ->  IO Char
+inputStreamPeek _obj 
+  = withCharResult $
+    withObjectRef "inputStreamPeek" _obj $ \cobj__obj -> 
+    wxInputStream_Peek cobj__obj  
+foreign import ccall "wxInputStream_Peek" wxInputStream_Peek :: Ptr (TInputStream a) -> IO CWchar
+
+-- | usage: (@inputStreamRead obj buffer size@).
+inputStreamRead :: InputStream  a -> Ptr  b -> Int ->  IO ()
+inputStreamRead _obj buffer size 
+  = withObjectRef "inputStreamRead" _obj $ \cobj__obj -> 
+    wxInputStream_Read cobj__obj  buffer  (toCInt size)  
+foreign import ccall "wxInputStream_Read" wxInputStream_Read :: Ptr (TInputStream a) -> Ptr  b -> CInt -> IO ()
+
+-- | usage: (@inputStreamSeekI obj pos mode@).
+inputStreamSeekI :: InputStream  a -> Int -> Int ->  IO Int
+inputStreamSeekI _obj pos mode 
+  = withIntResult $
+    withObjectRef "inputStreamSeekI" _obj $ \cobj__obj -> 
+    wxInputStream_SeekI cobj__obj  (toCInt pos)  (toCInt mode)  
+foreign import ccall "wxInputStream_SeekI" wxInputStream_SeekI :: Ptr (TInputStream a) -> CInt -> CInt -> IO CInt
+
+-- | usage: (@inputStreamTell obj@).
+inputStreamTell :: InputStream  a ->  IO Int
+inputStreamTell _obj 
+  = withIntResult $
+    withObjectRef "inputStreamTell" _obj $ \cobj__obj -> 
+    wxInputStream_Tell cobj__obj  
+foreign import ccall "wxInputStream_Tell" wxInputStream_Tell :: Ptr (TInputStream a) -> IO CInt
+
+-- | usage: (@inputStreamUngetBuffer obj buffer size@).
+inputStreamUngetBuffer :: InputStream  a -> Ptr  b -> Int ->  IO Int
+inputStreamUngetBuffer _obj buffer size 
+  = withIntResult $
+    withObjectRef "inputStreamUngetBuffer" _obj $ \cobj__obj -> 
+    wxInputStream_UngetBuffer cobj__obj  buffer  (toCInt size)  
+foreign import ccall "wxInputStream_UngetBuffer" wxInputStream_UngetBuffer :: Ptr (TInputStream a) -> Ptr  b -> CInt -> IO CInt
+
+-- | usage: (@inputStreamUngetch obj c@).
+inputStreamUngetch :: InputStream  a -> Char ->  IO Int
+inputStreamUngetch _obj c 
+  = withIntResult $
+    withObjectRef "inputStreamUngetch" _obj $ \cobj__obj -> 
+    wxInputStream_Ungetch cobj__obj  (toCWchar c)  
+foreign import ccall "wxInputStream_Ungetch" wxInputStream_Ungetch :: Ptr (TInputStream a) -> CWchar -> IO CInt
+
+-- | usage: (@intPropertyCreate label name value@).
+intPropertyCreate :: String -> String -> Int ->  IO (IntProperty  ())
+intPropertyCreate label name value 
+  = withObjectResult $
+    withStringPtr label $ \cobj_label -> 
+    withStringPtr name $ \cobj_name -> 
+    wxIntProperty_Create cobj_label  cobj_name  (toCInt value)  
+foreign import ccall "wxIntProperty_Create" wxIntProperty_Create :: Ptr (TWxString a) -> Ptr (TWxString b) -> CInt -> IO (Ptr (TIntProperty ()))
+
+{- |  Check if a preprocessor macro is defined. For example, @wxIsDefined("__WXGTK__")@ or @wxIsDefined("wxUSE_GIF")@.  -}
+isDefined :: String ->  IO Bool
+isDefined s 
+  = withBoolResult $
+    withCWString s $ \cstr_s -> 
+    wx_wxIsDefined cstr_s  
+foreign import ccall "wxIsDefined" wx_wxIsDefined :: CWString -> IO CBool
+
+-- | usage: (@keyEventAltDown obj@).
+keyEventAltDown :: KeyEvent  a ->  IO Bool
+keyEventAltDown _obj 
+  = withBoolResult $
+    withObjectRef "keyEventAltDown" _obj $ \cobj__obj -> 
+    wxKeyEvent_AltDown cobj__obj  
+foreign import ccall "wxKeyEvent_AltDown" wxKeyEvent_AltDown :: Ptr (TKeyEvent a) -> IO CBool
+
+-- | usage: (@keyEventControlDown obj@).
+keyEventControlDown :: KeyEvent  a ->  IO Bool
+keyEventControlDown _obj 
+  = withBoolResult $
+    withObjectRef "keyEventControlDown" _obj $ \cobj__obj -> 
+    wxKeyEvent_ControlDown cobj__obj  
+foreign import ccall "wxKeyEvent_ControlDown" wxKeyEvent_ControlDown :: Ptr (TKeyEvent a) -> IO CBool
+
+-- | usage: (@keyEventCopyObject obj obj@).
+keyEventCopyObject :: KeyEvent  a -> Ptr  b ->  IO ()
+keyEventCopyObject _obj obj 
+  = withObjectRef "keyEventCopyObject" _obj $ \cobj__obj -> 
+    wxKeyEvent_CopyObject cobj__obj  obj  
+foreign import ccall "wxKeyEvent_CopyObject" wxKeyEvent_CopyObject :: Ptr (TKeyEvent a) -> Ptr  b -> IO ()
+
+-- | usage: (@keyEventGetKeyCode obj@).
+keyEventGetKeyCode :: KeyEvent  a ->  IO Int
+keyEventGetKeyCode _obj 
+  = withIntResult $
+    withObjectRef "keyEventGetKeyCode" _obj $ \cobj__obj -> 
+    wxKeyEvent_GetKeyCode cobj__obj  
+foreign import ccall "wxKeyEvent_GetKeyCode" wxKeyEvent_GetKeyCode :: Ptr (TKeyEvent a) -> IO CInt
+
+-- | usage: (@keyEventGetModifiers obj@).
+keyEventGetModifiers :: KeyEvent  a ->  IO Int
+keyEventGetModifiers _obj 
+  = withIntResult $
+    withObjectRef "keyEventGetModifiers" _obj $ \cobj__obj -> 
+    wxKeyEvent_GetModifiers cobj__obj  
+foreign import ccall "wxKeyEvent_GetModifiers" wxKeyEvent_GetModifiers :: Ptr (TKeyEvent a) -> IO CInt
+
+-- | usage: (@keyEventGetPosition obj@).
+keyEventGetPosition :: KeyEvent  a ->  IO (Point)
+keyEventGetPosition _obj 
+  = withWxPointResult $
+    withObjectRef "keyEventGetPosition" _obj $ \cobj__obj -> 
+    wxKeyEvent_GetPosition cobj__obj  
+foreign import ccall "wxKeyEvent_GetPosition" wxKeyEvent_GetPosition :: Ptr (TKeyEvent a) -> IO (Ptr (TWxPoint ()))
+
+-- | usage: (@keyEventGetX obj@).
+keyEventGetX :: KeyEvent  a ->  IO Int
+keyEventGetX _obj 
+  = withIntResult $
+    withObjectRef "keyEventGetX" _obj $ \cobj__obj -> 
+    wxKeyEvent_GetX cobj__obj  
+foreign import ccall "wxKeyEvent_GetX" wxKeyEvent_GetX :: Ptr (TKeyEvent a) -> IO CInt
+
+-- | usage: (@keyEventGetY obj@).
+keyEventGetY :: KeyEvent  a ->  IO Int
+keyEventGetY _obj 
+  = withIntResult $
+    withObjectRef "keyEventGetY" _obj $ \cobj__obj -> 
+    wxKeyEvent_GetY cobj__obj  
+foreign import ccall "wxKeyEvent_GetY" wxKeyEvent_GetY :: Ptr (TKeyEvent a) -> IO CInt
+
+-- | usage: (@keyEventHasModifiers obj@).
+keyEventHasModifiers :: KeyEvent  a ->  IO Bool
+keyEventHasModifiers _obj 
+  = withBoolResult $
+    withObjectRef "keyEventHasModifiers" _obj $ \cobj__obj -> 
+    wxKeyEvent_HasModifiers cobj__obj  
+foreign import ccall "wxKeyEvent_HasModifiers" wxKeyEvent_HasModifiers :: Ptr (TKeyEvent a) -> IO CBool
+
+-- | usage: (@keyEventMetaDown obj@).
+keyEventMetaDown :: KeyEvent  a ->  IO Bool
+keyEventMetaDown _obj 
+  = withBoolResult $
+    withObjectRef "keyEventMetaDown" _obj $ \cobj__obj -> 
+    wxKeyEvent_MetaDown cobj__obj  
+foreign import ccall "wxKeyEvent_MetaDown" wxKeyEvent_MetaDown :: Ptr (TKeyEvent a) -> IO CBool
+
+-- | usage: (@keyEventSetKeyCode obj code@).
+keyEventSetKeyCode :: KeyEvent  a -> Int ->  IO ()
+keyEventSetKeyCode _obj code 
+  = withObjectRef "keyEventSetKeyCode" _obj $ \cobj__obj -> 
+    wxKeyEvent_SetKeyCode cobj__obj  (toCInt code)  
+foreign import ccall "wxKeyEvent_SetKeyCode" wxKeyEvent_SetKeyCode :: Ptr (TKeyEvent a) -> CInt -> IO ()
+
+-- | usage: (@keyEventShiftDown obj@).
+keyEventShiftDown :: KeyEvent  a ->  IO Bool
+keyEventShiftDown _obj 
+  = withBoolResult $
+    withObjectRef "keyEventShiftDown" _obj $ \cobj__obj -> 
+    wxKeyEvent_ShiftDown cobj__obj  
+foreign import ccall "wxKeyEvent_ShiftDown" wxKeyEvent_ShiftDown :: Ptr (TKeyEvent a) -> IO CBool
+
+-- | usage: (@kill pid signal@).
+kill :: Int -> Int ->  IO Int
+kill pid signal 
+  = withIntResult $
+    wx_wxKill (toCInt pid)  (toCInt signal)  
+foreign import ccall "wxKill" wx_wxKill :: CInt -> CInt -> IO CInt
+
+-- | usage: (@layoutAlgorithmCreate@).
+layoutAlgorithmCreate ::  IO (LayoutAlgorithm  ())
+layoutAlgorithmCreate 
+  = withObjectResult $
+    wxLayoutAlgorithm_Create 
+foreign import ccall "wxLayoutAlgorithm_Create" wxLayoutAlgorithm_Create :: IO (Ptr (TLayoutAlgorithm ()))
+
+-- | usage: (@layoutAlgorithmDelete obj@).
+layoutAlgorithmDelete :: LayoutAlgorithm  a ->  IO ()
+layoutAlgorithmDelete
+  = objectDelete
+
+
+-- | usage: (@layoutAlgorithmLayoutFrame obj frame mainWindow@).
+layoutAlgorithmLayoutFrame :: LayoutAlgorithm  a -> Frame  b -> Ptr  c ->  IO Bool
+layoutAlgorithmLayoutFrame _obj frame mainWindow 
+  = withBoolResult $
+    withObjectRef "layoutAlgorithmLayoutFrame" _obj $ \cobj__obj -> 
+    withObjectPtr frame $ \cobj_frame -> 
+    wxLayoutAlgorithm_LayoutFrame cobj__obj  cobj_frame  mainWindow  
+foreign import ccall "wxLayoutAlgorithm_LayoutFrame" wxLayoutAlgorithm_LayoutFrame :: Ptr (TLayoutAlgorithm a) -> Ptr (TFrame b) -> Ptr  c -> IO CBool
+
+-- | usage: (@layoutAlgorithmLayoutMDIFrame obj frame xywh use@).
+layoutAlgorithmLayoutMDIFrame :: LayoutAlgorithm  a -> Frame  b -> Rect -> Int ->  IO Bool
+layoutAlgorithmLayoutMDIFrame _obj frame xywh use 
+  = withBoolResult $
+    withObjectRef "layoutAlgorithmLayoutMDIFrame" _obj $ \cobj__obj -> 
+    withObjectPtr frame $ \cobj_frame -> 
+    wxLayoutAlgorithm_LayoutMDIFrame cobj__obj  cobj_frame  (toCIntRectX xywh) (toCIntRectY xywh)(toCIntRectW xywh) (toCIntRectH xywh)  (toCInt use)  
+foreign import ccall "wxLayoutAlgorithm_LayoutMDIFrame" wxLayoutAlgorithm_LayoutMDIFrame :: Ptr (TLayoutAlgorithm a) -> Ptr (TFrame b) -> CInt -> CInt -> CInt -> CInt -> CInt -> IO CBool
+
+-- | usage: (@layoutAlgorithmLayoutWindow obj frame mainWindow@).
+layoutAlgorithmLayoutWindow :: LayoutAlgorithm  a -> Frame  b -> Ptr  c ->  IO Bool
+layoutAlgorithmLayoutWindow _obj frame mainWindow 
+  = withBoolResult $
+    withObjectRef "layoutAlgorithmLayoutWindow" _obj $ \cobj__obj -> 
+    withObjectPtr frame $ \cobj_frame -> 
+    wxLayoutAlgorithm_LayoutWindow cobj__obj  cobj_frame  mainWindow  
+foreign import ccall "wxLayoutAlgorithm_LayoutWindow" wxLayoutAlgorithm_LayoutWindow :: Ptr (TLayoutAlgorithm a) -> Ptr (TFrame b) -> Ptr  c -> IO CBool
+
+-- | usage: (@layoutConstraintsCreate@).
+layoutConstraintsCreate ::  IO (LayoutConstraints  ())
+layoutConstraintsCreate 
+  = withObjectResult $
+    wxLayoutConstraints_Create 
+foreign import ccall "wxLayoutConstraints_Create" wxLayoutConstraints_Create :: IO (Ptr (TLayoutConstraints ()))
+
+-- | usage: (@layoutConstraintsbottom obj@).
+layoutConstraintsbottom :: LayoutConstraints  a ->  IO (Ptr  ())
+layoutConstraintsbottom _obj 
+  = withObjectRef "layoutConstraintsbottom" _obj $ \cobj__obj -> 
+    wxLayoutConstraints_bottom cobj__obj  
+foreign import ccall "wxLayoutConstraints_bottom" wxLayoutConstraints_bottom :: Ptr (TLayoutConstraints a) -> IO (Ptr  ())
+
+-- | usage: (@layoutConstraintscentreX obj@).
+layoutConstraintscentreX :: LayoutConstraints  a ->  IO (Ptr  ())
+layoutConstraintscentreX _obj 
+  = withObjectRef "layoutConstraintscentreX" _obj $ \cobj__obj -> 
+    wxLayoutConstraints_centreX cobj__obj  
+foreign import ccall "wxLayoutConstraints_centreX" wxLayoutConstraints_centreX :: Ptr (TLayoutConstraints a) -> IO (Ptr  ())
+
+-- | usage: (@layoutConstraintscentreY obj@).
+layoutConstraintscentreY :: LayoutConstraints  a ->  IO (Ptr  ())
+layoutConstraintscentreY _obj 
+  = withObjectRef "layoutConstraintscentreY" _obj $ \cobj__obj -> 
+    wxLayoutConstraints_centreY cobj__obj  
+foreign import ccall "wxLayoutConstraints_centreY" wxLayoutConstraints_centreY :: Ptr (TLayoutConstraints a) -> IO (Ptr  ())
+
+-- | usage: (@layoutConstraintsheight obj@).
+layoutConstraintsheight :: LayoutConstraints  a ->  IO (Ptr  ())
+layoutConstraintsheight _obj 
+  = withObjectRef "layoutConstraintsheight" _obj $ \cobj__obj -> 
+    wxLayoutConstraints_height cobj__obj  
+foreign import ccall "wxLayoutConstraints_height" wxLayoutConstraints_height :: Ptr (TLayoutConstraints a) -> IO (Ptr  ())
+
+-- | usage: (@layoutConstraintsleft obj@).
+layoutConstraintsleft :: LayoutConstraints  a ->  IO (Ptr  ())
+layoutConstraintsleft _obj 
+  = withObjectRef "layoutConstraintsleft" _obj $ \cobj__obj -> 
+    wxLayoutConstraints_left cobj__obj  
+foreign import ccall "wxLayoutConstraints_left" wxLayoutConstraints_left :: Ptr (TLayoutConstraints a) -> IO (Ptr  ())
+
+-- | usage: (@layoutConstraintsright obj@).
+layoutConstraintsright :: LayoutConstraints  a ->  IO (Ptr  ())
+layoutConstraintsright _obj 
+  = withObjectRef "layoutConstraintsright" _obj $ \cobj__obj -> 
+    wxLayoutConstraints_right cobj__obj  
+foreign import ccall "wxLayoutConstraints_right" wxLayoutConstraints_right :: Ptr (TLayoutConstraints a) -> IO (Ptr  ())
+
+-- | usage: (@layoutConstraintstop obj@).
+layoutConstraintstop :: LayoutConstraints  a ->  IO (Ptr  ())
+layoutConstraintstop _obj 
+  = withObjectRef "layoutConstraintstop" _obj $ \cobj__obj -> 
+    wxLayoutConstraints_top cobj__obj  
+foreign import ccall "wxLayoutConstraints_top" wxLayoutConstraints_top :: Ptr (TLayoutConstraints a) -> IO (Ptr  ())
+
+-- | usage: (@layoutConstraintswidth obj@).
+layoutConstraintswidth :: LayoutConstraints  a ->  IO (Ptr  ())
+layoutConstraintswidth _obj 
+  = withObjectRef "layoutConstraintswidth" _obj $ \cobj__obj -> 
+    wxLayoutConstraints_width cobj__obj  
+foreign import ccall "wxLayoutConstraints_width" wxLayoutConstraints_width :: Ptr (TLayoutConstraints a) -> IO (Ptr  ())
+
+-- | usage: (@listBoxAppend obj item@).
+listBoxAppend :: ListBox  a -> String ->  IO ()
+listBoxAppend _obj item 
+  = withObjectRef "listBoxAppend" _obj $ \cobj__obj -> 
+    withStringPtr item $ \cobj_item -> 
+    wxListBox_Append cobj__obj  cobj_item  
+foreign import ccall "wxListBox_Append" wxListBox_Append :: Ptr (TListBox a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@listBoxAppendData obj item wxdata@).
+listBoxAppendData :: ListBox  a -> String -> Ptr  c ->  IO ()
+listBoxAppendData _obj item wxdata 
+  = withObjectRef "listBoxAppendData" _obj $ \cobj__obj -> 
+    withStringPtr item $ \cobj_item -> 
+    wxListBox_AppendData cobj__obj  cobj_item  wxdata  
+foreign import ccall "wxListBox_AppendData" wxListBox_AppendData :: Ptr (TListBox a) -> Ptr (TWxString b) -> Ptr  c -> IO ()
+
+-- | usage: (@listBoxClear obj@).
+listBoxClear :: ListBox  a ->  IO ()
+listBoxClear _obj 
+  = withObjectRef "listBoxClear" _obj $ \cobj__obj -> 
+    wxListBox_Clear cobj__obj  
+foreign import ccall "wxListBox_Clear" wxListBox_Clear :: Ptr (TListBox a) -> IO ()
+
+-- | usage: (@listBoxCreate prt id lfttopwdthgt nstr stl@).
+listBoxCreate :: Window  a -> Id -> Rect -> [String] -> Style ->  IO (ListBox  ())
+listBoxCreate _prt _id _lfttopwdthgt nstr _stl 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    withArrayWString nstr $ \carrlen_nstr carr_nstr -> 
+    wxListBox_Create cobj__prt  (toCInt _id)  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  carrlen_nstr carr_nstr  (toCInt _stl)  
+foreign import ccall "wxListBox_Create" wxListBox_Create :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> Ptr (Ptr CWchar) -> CInt -> IO (Ptr (TListBox ()))
+
+-- | usage: (@listBoxDelete obj n@).
+listBoxDelete :: ListBox  a -> Int ->  IO ()
+listBoxDelete _obj n 
+  = withObjectRef "listBoxDelete" _obj $ \cobj__obj -> 
+    wxListBox_Delete cobj__obj  (toCInt n)  
+foreign import ccall "wxListBox_Delete" wxListBox_Delete :: Ptr (TListBox a) -> CInt -> IO ()
+
+-- | usage: (@listBoxFindString obj s@).
+listBoxFindString :: ListBox  a -> String ->  IO Int
+listBoxFindString _obj s 
+  = withIntResult $
+    withObjectRef "listBoxFindString" _obj $ \cobj__obj -> 
+    withStringPtr s $ \cobj_s -> 
+    wxListBox_FindString cobj__obj  cobj_s  
+foreign import ccall "wxListBox_FindString" wxListBox_FindString :: Ptr (TListBox a) -> Ptr (TWxString b) -> IO CInt
+
+-- | usage: (@listBoxGetClientData obj n@).
+listBoxGetClientData :: ListBox  a -> Int ->  IO (ClientData  ())
+listBoxGetClientData _obj n 
+  = withObjectResult $
+    withObjectRef "listBoxGetClientData" _obj $ \cobj__obj -> 
+    wxListBox_GetClientData cobj__obj  (toCInt n)  
+foreign import ccall "wxListBox_GetClientData" wxListBox_GetClientData :: Ptr (TListBox a) -> CInt -> IO (Ptr (TClientData ()))
+
+-- | usage: (@listBoxGetCount obj@).
+listBoxGetCount :: ListBox  a ->  IO Int
+listBoxGetCount _obj 
+  = withIntResult $
+    withObjectRef "listBoxGetCount" _obj $ \cobj__obj -> 
+    wxListBox_GetCount cobj__obj  
+foreign import ccall "wxListBox_GetCount" wxListBox_GetCount :: Ptr (TListBox a) -> IO CInt
+
+-- | usage: (@listBoxGetSelection obj@).
+listBoxGetSelection :: ListBox  a ->  IO Int
+listBoxGetSelection _obj 
+  = withIntResult $
+    withObjectRef "listBoxGetSelection" _obj $ \cobj__obj -> 
+    wxListBox_GetSelection cobj__obj  
+foreign import ccall "wxListBox_GetSelection" wxListBox_GetSelection :: Ptr (TListBox a) -> IO CInt
+
+-- | usage: (@listBoxGetSelections obj aSelections allocated@).
+listBoxGetSelections :: ListBox  a -> Ptr CInt -> Int ->  IO Int
+listBoxGetSelections _obj aSelections allocated 
+  = withIntResult $
+    withObjectRef "listBoxGetSelections" _obj $ \cobj__obj -> 
+    wxListBox_GetSelections cobj__obj  aSelections  (toCInt allocated)  
+foreign import ccall "wxListBox_GetSelections" wxListBox_GetSelections :: Ptr (TListBox a) -> Ptr CInt -> CInt -> IO CInt
+
+-- | usage: (@listBoxGetString obj n@).
+listBoxGetString :: ListBox  a -> Int ->  IO (String)
+listBoxGetString _obj n 
+  = withManagedStringResult $
+    withObjectRef "listBoxGetString" _obj $ \cobj__obj -> 
+    wxListBox_GetString cobj__obj  (toCInt n)  
+foreign import ccall "wxListBox_GetString" wxListBox_GetString :: Ptr (TListBox a) -> CInt -> IO (Ptr (TWxString ()))
+
+-- | usage: (@listBoxInsertItems obj items pos count@).
+listBoxInsertItems :: ListBox  a -> Ptr  b -> Int -> Int ->  IO ()
+listBoxInsertItems _obj items pos count 
+  = withObjectRef "listBoxInsertItems" _obj $ \cobj__obj -> 
+    wxListBox_InsertItems cobj__obj  items  (toCInt pos)  (toCInt count)  
+foreign import ccall "wxListBox_InsertItems" wxListBox_InsertItems :: Ptr (TListBox a) -> Ptr  b -> CInt -> CInt -> IO ()
+
+-- | usage: (@listBoxIsSelected obj n@).
+listBoxIsSelected :: ListBox  a -> Int ->  IO Bool
+listBoxIsSelected _obj n 
+  = withBoolResult $
+    withObjectRef "listBoxIsSelected" _obj $ \cobj__obj -> 
+    wxListBox_IsSelected cobj__obj  (toCInt n)  
+foreign import ccall "wxListBox_IsSelected" wxListBox_IsSelected :: Ptr (TListBox a) -> CInt -> IO CBool
+
+-- | usage: (@listBoxSetClientData obj n clientData@).
+listBoxSetClientData :: ListBox  a -> Int -> ClientData  c ->  IO ()
+listBoxSetClientData _obj n clientData 
+  = withObjectRef "listBoxSetClientData" _obj $ \cobj__obj -> 
+    withObjectPtr clientData $ \cobj_clientData -> 
+    wxListBox_SetClientData cobj__obj  (toCInt n)  cobj_clientData  
+foreign import ccall "wxListBox_SetClientData" wxListBox_SetClientData :: Ptr (TListBox a) -> CInt -> Ptr (TClientData c) -> IO ()
+
+-- | usage: (@listBoxSetFirstItem obj n@).
+listBoxSetFirstItem :: ListBox  a -> Int ->  IO ()
+listBoxSetFirstItem _obj n 
+  = withObjectRef "listBoxSetFirstItem" _obj $ \cobj__obj -> 
+    wxListBox_SetFirstItem cobj__obj  (toCInt n)  
+foreign import ccall "wxListBox_SetFirstItem" wxListBox_SetFirstItem :: Ptr (TListBox a) -> CInt -> IO ()
+
+-- | usage: (@listBoxSetSelection obj n select@).
+listBoxSetSelection :: ListBox  a -> Int -> Bool ->  IO ()
+listBoxSetSelection _obj n select 
+  = withObjectRef "listBoxSetSelection" _obj $ \cobj__obj -> 
+    wxListBox_SetSelection cobj__obj  (toCInt n)  (toCBool select)  
+foreign import ccall "wxListBox_SetSelection" wxListBox_SetSelection :: Ptr (TListBox a) -> CInt -> CBool -> IO ()
+
+-- | usage: (@listBoxSetString obj n s@).
+listBoxSetString :: ListBox  a -> Int -> String ->  IO ()
+listBoxSetString _obj n s 
+  = withObjectRef "listBoxSetString" _obj $ \cobj__obj -> 
+    withStringPtr s $ \cobj_s -> 
+    wxListBox_SetString cobj__obj  (toCInt n)  cobj_s  
+foreign import ccall "wxListBox_SetString" wxListBox_SetString :: Ptr (TListBox a) -> CInt -> Ptr (TWxString c) -> IO ()
+
+-- | usage: (@listBoxSetStringSelection obj str sel@).
+listBoxSetStringSelection :: ListBox  a -> String -> Bool ->  IO ()
+listBoxSetStringSelection _obj str sel 
+  = withObjectRef "listBoxSetStringSelection" _obj $ \cobj__obj -> 
+    withStringPtr str $ \cobj_str -> 
+    wxListBox_SetStringSelection cobj__obj  cobj_str  (toCBool sel)  
+foreign import ccall "wxListBox_SetStringSelection" wxListBox_SetStringSelection :: Ptr (TListBox a) -> Ptr (TWxString b) -> CBool -> IO ()
+
+-- | usage: (@listCtrlArrange obj flag@).
+listCtrlArrange :: ListCtrl  a -> Int ->  IO Bool
+listCtrlArrange _obj flag 
+  = withBoolResult $
+    withObjectRef "listCtrlArrange" _obj $ \cobj__obj -> 
+    wxListCtrl_Arrange cobj__obj  (toCInt flag)  
+foreign import ccall "wxListCtrl_Arrange" wxListCtrl_Arrange :: Ptr (TListCtrl a) -> CInt -> IO CBool
+
+-- | usage: (@listCtrlAssignImageList obj images which@).
+listCtrlAssignImageList :: ListCtrl  a -> ImageList  b -> Int ->  IO ()
+listCtrlAssignImageList _obj images which 
+  = withObjectRef "listCtrlAssignImageList" _obj $ \cobj__obj -> 
+    withObjectPtr images $ \cobj_images -> 
+    wxListCtrl_AssignImageList cobj__obj  cobj_images  (toCInt which)  
+foreign import ccall "wxListCtrl_AssignImageList" wxListCtrl_AssignImageList :: Ptr (TListCtrl a) -> Ptr (TImageList b) -> CInt -> IO ()
+
+-- | usage: (@listCtrlClearAll obj@).
+listCtrlClearAll :: ListCtrl  a ->  IO ()
+listCtrlClearAll _obj 
+  = withObjectRef "listCtrlClearAll" _obj $ \cobj__obj -> 
+    wxListCtrl_ClearAll cobj__obj  
+foreign import ccall "wxListCtrl_ClearAll" wxListCtrl_ClearAll :: Ptr (TListCtrl a) -> IO ()
+
+-- | usage: (@listCtrlCreate prt id lfttopwdthgt stl@).
+listCtrlCreate :: Window  a -> Id -> Rect -> Style ->  IO (ListCtrl  ())
+listCtrlCreate _prt _id _lfttopwdthgt _stl 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    wxListCtrl_Create cobj__prt  (toCInt _id)  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
+foreign import ccall "wxListCtrl_Create" wxListCtrl_Create :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TListCtrl ()))
+
+-- | usage: (@listCtrlDeleteAllColumns obj@).
+listCtrlDeleteAllColumns :: ListCtrl  a ->  IO Bool
+listCtrlDeleteAllColumns _obj 
+  = withBoolResult $
+    withObjectRef "listCtrlDeleteAllColumns" _obj $ \cobj__obj -> 
+    wxListCtrl_DeleteAllColumns cobj__obj  
+foreign import ccall "wxListCtrl_DeleteAllColumns" wxListCtrl_DeleteAllColumns :: Ptr (TListCtrl a) -> IO CBool
+
+-- | usage: (@listCtrlDeleteAllItems obj@).
+listCtrlDeleteAllItems :: ListCtrl  a ->  IO Bool
+listCtrlDeleteAllItems _obj 
+  = withBoolResult $
+    withObjectRef "listCtrlDeleteAllItems" _obj $ \cobj__obj -> 
+    wxListCtrl_DeleteAllItems cobj__obj  
+foreign import ccall "wxListCtrl_DeleteAllItems" wxListCtrl_DeleteAllItems :: Ptr (TListCtrl a) -> IO CBool
+
+-- | usage: (@listCtrlDeleteColumn obj col@).
+listCtrlDeleteColumn :: ListCtrl  a -> Int ->  IO Bool
+listCtrlDeleteColumn _obj col 
+  = withBoolResult $
+    withObjectRef "listCtrlDeleteColumn" _obj $ \cobj__obj -> 
+    wxListCtrl_DeleteColumn cobj__obj  (toCInt col)  
+foreign import ccall "wxListCtrl_DeleteColumn" wxListCtrl_DeleteColumn :: Ptr (TListCtrl a) -> CInt -> IO CBool
+
+-- | usage: (@listCtrlDeleteItem obj item@).
+listCtrlDeleteItem :: ListCtrl  a -> Int ->  IO Bool
+listCtrlDeleteItem _obj item 
+  = withBoolResult $
+    withObjectRef "listCtrlDeleteItem" _obj $ \cobj__obj -> 
+    wxListCtrl_DeleteItem cobj__obj  (toCInt item)  
+foreign import ccall "wxListCtrl_DeleteItem" wxListCtrl_DeleteItem :: Ptr (TListCtrl a) -> CInt -> IO CBool
+
+-- | usage: (@listCtrlEditLabel obj item@).
+listCtrlEditLabel :: ListCtrl  a -> Int ->  IO ()
+listCtrlEditLabel _obj item 
+  = withObjectRef "listCtrlEditLabel" _obj $ \cobj__obj -> 
+    wxListCtrl_EditLabel cobj__obj  (toCInt item)  
+foreign import ccall "wxListCtrl_EditLabel" wxListCtrl_EditLabel :: Ptr (TListCtrl a) -> CInt -> IO ()
+
+-- | usage: (@listCtrlEndEditLabel obj cancel@).
+listCtrlEndEditLabel :: ListCtrl  a -> Int ->  IO Bool
+listCtrlEndEditLabel _obj cancel 
+  = withBoolResult $
+    withObjectRef "listCtrlEndEditLabel" _obj $ \cobj__obj -> 
+    wxListCtrl_EndEditLabel cobj__obj  (toCInt cancel)  
+foreign import ccall "wxListCtrl_EndEditLabel" wxListCtrl_EndEditLabel :: Ptr (TListCtrl a) -> CInt -> IO CBool
+
+-- | usage: (@listCtrlEnsureVisible obj item@).
+listCtrlEnsureVisible :: ListCtrl  a -> Int ->  IO Bool
+listCtrlEnsureVisible _obj item 
+  = withBoolResult $
+    withObjectRef "listCtrlEnsureVisible" _obj $ \cobj__obj -> 
+    wxListCtrl_EnsureVisible cobj__obj  (toCInt item)  
+foreign import ccall "wxListCtrl_EnsureVisible" wxListCtrl_EnsureVisible :: Ptr (TListCtrl a) -> CInt -> IO CBool
+
+-- | usage: (@listCtrlFindItem obj start str partial@).
+listCtrlFindItem :: ListCtrl  a -> Int -> String -> Bool ->  IO Int
+listCtrlFindItem _obj start str partial 
+  = withIntResult $
+    withObjectRef "listCtrlFindItem" _obj $ \cobj__obj -> 
+    withStringPtr str $ \cobj_str -> 
+    wxListCtrl_FindItem cobj__obj  (toCInt start)  cobj_str  (toCBool partial)  
+foreign import ccall "wxListCtrl_FindItem" wxListCtrl_FindItem :: Ptr (TListCtrl a) -> CInt -> Ptr (TWxString c) -> CBool -> IO CInt
+
+-- | usage: (@listCtrlFindItemByData obj start wxdata@).
+listCtrlFindItemByData :: ListCtrl  a -> Int -> Int ->  IO Int
+listCtrlFindItemByData _obj start wxdata 
+  = withIntResult $
+    withObjectRef "listCtrlFindItemByData" _obj $ \cobj__obj -> 
+    wxListCtrl_FindItemByData cobj__obj  (toCInt start)  (toCInt wxdata)  
+foreign import ccall "wxListCtrl_FindItemByData" wxListCtrl_FindItemByData :: Ptr (TListCtrl a) -> CInt -> CInt -> IO CInt
+
+-- | usage: (@listCtrlFindItemByPosition obj start xy direction@).
+listCtrlFindItemByPosition :: ListCtrl  a -> Int -> Point -> Int ->  IO Int
+listCtrlFindItemByPosition _obj start xy direction 
+  = withIntResult $
+    withObjectRef "listCtrlFindItemByPosition" _obj $ \cobj__obj -> 
+    wxListCtrl_FindItemByPosition cobj__obj  (toCInt start)  (toCIntPointX xy) (toCIntPointY xy)  (toCInt direction)  
+foreign import ccall "wxListCtrl_FindItemByPosition" wxListCtrl_FindItemByPosition :: Ptr (TListCtrl a) -> CInt -> CInt -> CInt -> CInt -> IO CInt
+
+-- | usage: (@listCtrlGetColumn obj col item@).
+listCtrlGetColumn :: ListCtrl  a -> Int -> ListItem  c ->  IO Bool
+listCtrlGetColumn _obj col item 
+  = withBoolResult $
+    withObjectRef "listCtrlGetColumn" _obj $ \cobj__obj -> 
+    withObjectPtr item $ \cobj_item -> 
+    wxListCtrl_GetColumn cobj__obj  (toCInt col)  cobj_item  
+foreign import ccall "wxListCtrl_GetColumn" wxListCtrl_GetColumn :: Ptr (TListCtrl a) -> CInt -> Ptr (TListItem c) -> IO CBool
+
+-- | usage: (@listCtrlGetColumn2 obj col@).
+listCtrlGetColumn2 :: ListCtrl  a -> Int ->  IO (ListItem  ())
+listCtrlGetColumn2 _obj col 
+  = withRefListItem $ \pref -> 
+    withObjectRef "listCtrlGetColumn2" _obj $ \cobj__obj -> 
+    wxListCtrl_GetColumn2 cobj__obj  (toCInt col)   pref
+foreign import ccall "wxListCtrl_GetColumn2" wxListCtrl_GetColumn2 :: Ptr (TListCtrl a) -> CInt -> Ptr (TListItem ()) -> IO ()
+
+-- | usage: (@listCtrlGetColumnCount obj@).
+listCtrlGetColumnCount :: ListCtrl  a ->  IO Int
+listCtrlGetColumnCount _obj 
+  = withIntResult $
+    withObjectRef "listCtrlGetColumnCount" _obj $ \cobj__obj -> 
+    wxListCtrl_GetColumnCount cobj__obj  
+foreign import ccall "wxListCtrl_GetColumnCount" wxListCtrl_GetColumnCount :: Ptr (TListCtrl a) -> IO CInt
+
+-- | usage: (@listCtrlGetColumnWidth obj col@).
+listCtrlGetColumnWidth :: ListCtrl  a -> Int ->  IO Int
+listCtrlGetColumnWidth _obj col 
+  = withIntResult $
+    withObjectRef "listCtrlGetColumnWidth" _obj $ \cobj__obj -> 
+    wxListCtrl_GetColumnWidth cobj__obj  (toCInt col)  
+foreign import ccall "wxListCtrl_GetColumnWidth" wxListCtrl_GetColumnWidth :: Ptr (TListCtrl a) -> CInt -> IO CInt
+
+-- | usage: (@listCtrlGetCountPerPage obj@).
+listCtrlGetCountPerPage :: ListCtrl  a ->  IO Int
+listCtrlGetCountPerPage _obj 
+  = withIntResult $
+    withObjectRef "listCtrlGetCountPerPage" _obj $ \cobj__obj -> 
+    wxListCtrl_GetCountPerPage cobj__obj  
+foreign import ccall "wxListCtrl_GetCountPerPage" wxListCtrl_GetCountPerPage :: Ptr (TListCtrl a) -> IO CInt
+
+-- | usage: (@listCtrlGetEditControl obj@).
+listCtrlGetEditControl :: ListCtrl  a ->  IO (TextCtrl  ())
+listCtrlGetEditControl _obj 
+  = withObjectResult $
+    withObjectRef "listCtrlGetEditControl" _obj $ \cobj__obj -> 
+    wxListCtrl_GetEditControl cobj__obj  
+foreign import ccall "wxListCtrl_GetEditControl" wxListCtrl_GetEditControl :: Ptr (TListCtrl a) -> IO (Ptr (TTextCtrl ()))
+
+-- | usage: (@listCtrlGetImageList obj which@).
+listCtrlGetImageList :: ListCtrl  a -> Int ->  IO (ImageList  ())
+listCtrlGetImageList _obj which 
+  = withObjectResult $
+    withObjectRef "listCtrlGetImageList" _obj $ \cobj__obj -> 
+    wxListCtrl_GetImageList cobj__obj  (toCInt which)  
+foreign import ccall "wxListCtrl_GetImageList" wxListCtrl_GetImageList :: Ptr (TListCtrl a) -> CInt -> IO (Ptr (TImageList ()))
+
+-- | usage: (@listCtrlGetItem obj info@).
+listCtrlGetItem :: ListCtrl  a -> ListItem  b ->  IO Bool
+listCtrlGetItem _obj info 
+  = withBoolResult $
+    withObjectRef "listCtrlGetItem" _obj $ \cobj__obj -> 
+    withObjectPtr info $ \cobj_info -> 
+    wxListCtrl_GetItem cobj__obj  cobj_info  
+foreign import ccall "wxListCtrl_GetItem" wxListCtrl_GetItem :: Ptr (TListCtrl a) -> Ptr (TListItem b) -> IO CBool
+
+-- | usage: (@listCtrlGetItem2 obj@).
+listCtrlGetItem2 :: ListCtrl  a ->  IO (ListItem  ())
+listCtrlGetItem2 _obj 
+  = withRefListItem $ \pref -> 
+    withObjectRef "listCtrlGetItem2" _obj $ \cobj__obj -> 
+    wxListCtrl_GetItem2 cobj__obj   pref
+foreign import ccall "wxListCtrl_GetItem2" wxListCtrl_GetItem2 :: Ptr (TListCtrl a) -> Ptr (TListItem ()) -> IO ()
+
+-- | usage: (@listCtrlGetItemCount obj@).
+listCtrlGetItemCount :: ListCtrl  a ->  IO Int
+listCtrlGetItemCount _obj 
+  = withIntResult $
+    withObjectRef "listCtrlGetItemCount" _obj $ \cobj__obj -> 
+    wxListCtrl_GetItemCount cobj__obj  
+foreign import ccall "wxListCtrl_GetItemCount" wxListCtrl_GetItemCount :: Ptr (TListCtrl a) -> IO CInt
+
+-- | usage: (@listCtrlGetItemData obj item@).
+listCtrlGetItemData :: ListCtrl  a -> Int ->  IO Int
+listCtrlGetItemData _obj item 
+  = withIntResult $
+    withObjectRef "listCtrlGetItemData" _obj $ \cobj__obj -> 
+    wxListCtrl_GetItemData cobj__obj  (toCInt item)  
+foreign import ccall "wxListCtrl_GetItemData" wxListCtrl_GetItemData :: Ptr (TListCtrl a) -> CInt -> IO CInt
+
+-- | usage: (@listCtrlGetItemFont obj item@).
+listCtrlGetItemFont :: ListCtrl  a -> Int ->  IO (Font  ())
+listCtrlGetItemFont _obj item 
+  = withManagedFontResult $
+    withObjectRef "listCtrlGetItemFont" _obj $ \cobj__obj -> 
+    wxListCtrl_GetItemFont cobj__obj  (toCInt item)  
+foreign import ccall "wxListCtrl_GetItemFont" wxListCtrl_GetItemFont :: Ptr (TListCtrl a) -> CInt -> IO (Ptr (TFont ()))
+
+-- | usage: (@listCtrlGetItemPosition obj item@).
+listCtrlGetItemPosition :: ListCtrl  a -> Int ->  IO (Point)
+listCtrlGetItemPosition _obj item 
+  = withWxPointResult $
+    withObjectRef "listCtrlGetItemPosition" _obj $ \cobj__obj -> 
+    wxListCtrl_GetItemPosition cobj__obj  (toCInt item)  
+foreign import ccall "wxListCtrl_GetItemPosition" wxListCtrl_GetItemPosition :: Ptr (TListCtrl a) -> CInt -> IO (Ptr (TWxPoint ()))
+
+-- | usage: (@listCtrlGetItemPosition2 obj item@).
+listCtrlGetItemPosition2 :: ListCtrl  a -> Int ->  IO (Point)
+listCtrlGetItemPosition2 _obj item 
+  = withWxPointResult $
+    withObjectRef "listCtrlGetItemPosition2" _obj $ \cobj__obj -> 
+    wxListCtrl_GetItemPosition2 cobj__obj  (toCInt item)  
+foreign import ccall "wxListCtrl_GetItemPosition2" wxListCtrl_GetItemPosition2 :: Ptr (TListCtrl a) -> CInt -> IO (Ptr (TWxPoint ()))
+
+-- | usage: (@listCtrlGetItemRect obj item code@).
+listCtrlGetItemRect :: ListCtrl  a -> Int -> Int ->  IO (Rect)
+listCtrlGetItemRect _obj item code 
+  = withWxRectResult $
+    withObjectRef "listCtrlGetItemRect" _obj $ \cobj__obj -> 
+    wxListCtrl_GetItemRect cobj__obj  (toCInt item)  (toCInt code)  
+foreign import ccall "wxListCtrl_GetItemRect" wxListCtrl_GetItemRect :: Ptr (TListCtrl a) -> CInt -> CInt -> IO (Ptr (TWxRect ()))
+
+-- | usage: (@listCtrlGetItemSpacing obj isSmall@).
+listCtrlGetItemSpacing :: ListCtrl  a -> Bool ->  IO (Size)
+listCtrlGetItemSpacing _obj isSmall 
+  = withWxSizeResult $
+    withObjectRef "listCtrlGetItemSpacing" _obj $ \cobj__obj -> 
+    wxListCtrl_GetItemSpacing cobj__obj  (toCBool isSmall)  
+foreign import ccall "wxListCtrl_GetItemSpacing" wxListCtrl_GetItemSpacing :: Ptr (TListCtrl a) -> CBool -> IO (Ptr (TWxSize ()))
+
+-- | usage: (@listCtrlGetItemState obj item stateMask@).
+listCtrlGetItemState :: ListCtrl  a -> Int -> Int ->  IO Int
+listCtrlGetItemState _obj item stateMask 
+  = withIntResult $
+    withObjectRef "listCtrlGetItemState" _obj $ \cobj__obj -> 
+    wxListCtrl_GetItemState cobj__obj  (toCInt item)  (toCInt stateMask)  
+foreign import ccall "wxListCtrl_GetItemState" wxListCtrl_GetItemState :: Ptr (TListCtrl a) -> CInt -> CInt -> IO CInt
+
+-- | usage: (@listCtrlGetItemText obj item@).
+listCtrlGetItemText :: ListCtrl  a -> Int ->  IO (String)
+listCtrlGetItemText _obj item 
+  = withManagedStringResult $
+    withObjectRef "listCtrlGetItemText" _obj $ \cobj__obj -> 
+    wxListCtrl_GetItemText cobj__obj  (toCInt item)  
+foreign import ccall "wxListCtrl_GetItemText" wxListCtrl_GetItemText :: Ptr (TListCtrl a) -> CInt -> IO (Ptr (TWxString ()))
+
+-- | usage: (@listCtrlGetNextItem obj item geometry state@).
+listCtrlGetNextItem :: ListCtrl  a -> Int -> Int -> Int ->  IO Int
+listCtrlGetNextItem _obj item geometry state 
+  = withIntResult $
+    withObjectRef "listCtrlGetNextItem" _obj $ \cobj__obj -> 
+    wxListCtrl_GetNextItem cobj__obj  (toCInt item)  (toCInt geometry)  (toCInt state)  
+foreign import ccall "wxListCtrl_GetNextItem" wxListCtrl_GetNextItem :: Ptr (TListCtrl a) -> CInt -> CInt -> CInt -> IO CInt
+
+-- | usage: (@listCtrlGetSelectedItemCount obj@).
+listCtrlGetSelectedItemCount :: ListCtrl  a ->  IO Int
+listCtrlGetSelectedItemCount _obj 
+  = withIntResult $
+    withObjectRef "listCtrlGetSelectedItemCount" _obj $ \cobj__obj -> 
+    wxListCtrl_GetSelectedItemCount cobj__obj  
+foreign import ccall "wxListCtrl_GetSelectedItemCount" wxListCtrl_GetSelectedItemCount :: Ptr (TListCtrl a) -> IO CInt
+
+-- | usage: (@listCtrlGetTextColour obj@).
+listCtrlGetTextColour :: ListCtrl  a ->  IO (Color)
+listCtrlGetTextColour _obj 
+  = withRefColour $ \pref -> 
+    withObjectRef "listCtrlGetTextColour" _obj $ \cobj__obj -> 
+    wxListCtrl_GetTextColour cobj__obj   pref
+foreign import ccall "wxListCtrl_GetTextColour" wxListCtrl_GetTextColour :: Ptr (TListCtrl a) -> Ptr (TColour ()) -> IO ()
+
+-- | usage: (@listCtrlGetTopItem obj@).
+listCtrlGetTopItem :: ListCtrl  a ->  IO Int
+listCtrlGetTopItem _obj 
+  = withIntResult $
+    withObjectRef "listCtrlGetTopItem" _obj $ \cobj__obj -> 
+    wxListCtrl_GetTopItem cobj__obj  
+foreign import ccall "wxListCtrl_GetTopItem" wxListCtrl_GetTopItem :: Ptr (TListCtrl a) -> IO CInt
+
+-- | usage: (@listCtrlHitTest obj xy flags@).
+listCtrlHitTest :: ListCtrl  a -> Point -> Ptr  c ->  IO Int
+listCtrlHitTest _obj xy flags 
+  = withIntResult $
+    withObjectRef "listCtrlHitTest" _obj $ \cobj__obj -> 
+    wxListCtrl_HitTest cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  flags  
+foreign import ccall "wxListCtrl_HitTest" wxListCtrl_HitTest :: Ptr (TListCtrl a) -> CInt -> CInt -> Ptr  c -> IO CInt
+
+-- | usage: (@listCtrlInsertColumn obj col heading format width@).
+listCtrlInsertColumn :: ListCtrl  a -> Int -> String -> Int -> Int ->  IO Int
+listCtrlInsertColumn _obj col heading format width 
+  = withIntResult $
+    withObjectRef "listCtrlInsertColumn" _obj $ \cobj__obj -> 
+    withStringPtr heading $ \cobj_heading -> 
+    wxListCtrl_InsertColumn cobj__obj  (toCInt col)  cobj_heading  (toCInt format)  (toCInt width)  
+foreign import ccall "wxListCtrl_InsertColumn" wxListCtrl_InsertColumn :: Ptr (TListCtrl a) -> CInt -> Ptr (TWxString c) -> CInt -> CInt -> IO CInt
+
+-- | usage: (@listCtrlInsertColumnFromInfo obj col info@).
+listCtrlInsertColumnFromInfo :: ListCtrl  a -> Int -> ListItem  c ->  IO Int
+listCtrlInsertColumnFromInfo _obj col info 
+  = withIntResult $
+    withObjectRef "listCtrlInsertColumnFromInfo" _obj $ \cobj__obj -> 
+    withObjectPtr info $ \cobj_info -> 
+    wxListCtrl_InsertColumnFromInfo cobj__obj  (toCInt col)  cobj_info  
+foreign import ccall "wxListCtrl_InsertColumnFromInfo" wxListCtrl_InsertColumnFromInfo :: Ptr (TListCtrl a) -> CInt -> Ptr (TListItem c) -> IO CInt
+
+-- | usage: (@listCtrlInsertItem obj info@).
+listCtrlInsertItem :: ListCtrl  a -> ListItem  b ->  IO Int
+listCtrlInsertItem _obj info 
+  = withIntResult $
+    withObjectRef "listCtrlInsertItem" _obj $ \cobj__obj -> 
+    withObjectPtr info $ \cobj_info -> 
+    wxListCtrl_InsertItem cobj__obj  cobj_info  
+foreign import ccall "wxListCtrl_InsertItem" wxListCtrl_InsertItem :: Ptr (TListCtrl a) -> Ptr (TListItem b) -> IO CInt
+
+-- | usage: (@listCtrlInsertItemWithData obj index label@).
+listCtrlInsertItemWithData :: ListCtrl  a -> Int -> String ->  IO Int
+listCtrlInsertItemWithData _obj index label 
+  = withIntResult $
+    withObjectRef "listCtrlInsertItemWithData" _obj $ \cobj__obj -> 
+    withStringPtr label $ \cobj_label -> 
+    wxListCtrl_InsertItemWithData cobj__obj  (toCInt index)  cobj_label  
+foreign import ccall "wxListCtrl_InsertItemWithData" wxListCtrl_InsertItemWithData :: Ptr (TListCtrl a) -> CInt -> Ptr (TWxString c) -> IO CInt
+
+-- | usage: (@listCtrlInsertItemWithImage obj index imageIndex@).
+listCtrlInsertItemWithImage :: ListCtrl  a -> Int -> Int ->  IO Int
+listCtrlInsertItemWithImage _obj index imageIndex 
+  = withIntResult $
+    withObjectRef "listCtrlInsertItemWithImage" _obj $ \cobj__obj -> 
+    wxListCtrl_InsertItemWithImage cobj__obj  (toCInt index)  (toCInt imageIndex)  
+foreign import ccall "wxListCtrl_InsertItemWithImage" wxListCtrl_InsertItemWithImage :: Ptr (TListCtrl a) -> CInt -> CInt -> IO CInt
+
+-- | usage: (@listCtrlInsertItemWithLabel obj index label imageIndex@).
+listCtrlInsertItemWithLabel :: ListCtrl  a -> Int -> String -> Int ->  IO Int
+listCtrlInsertItemWithLabel _obj index label imageIndex 
+  = withIntResult $
+    withObjectRef "listCtrlInsertItemWithLabel" _obj $ \cobj__obj -> 
+    withStringPtr label $ \cobj_label -> 
+    wxListCtrl_InsertItemWithLabel cobj__obj  (toCInt index)  cobj_label  (toCInt imageIndex)  
+foreign import ccall "wxListCtrl_InsertItemWithLabel" wxListCtrl_InsertItemWithLabel :: Ptr (TListCtrl a) -> CInt -> Ptr (TWxString c) -> CInt -> IO CInt
+
+-- | usage: (@listCtrlIsVirtual obj@).
+listCtrlIsVirtual :: ListCtrl  a ->  IO Bool
+listCtrlIsVirtual _obj 
+  = withBoolResult $
+    withObjectRef "listCtrlIsVirtual" _obj $ \cobj__obj -> 
+    wxListCtrl_IsVirtual cobj__obj  
+foreign import ccall "wxListCtrl_IsVirtual" wxListCtrl_IsVirtual :: Ptr (TListCtrl a) -> IO CBool
+
+-- | usage: (@listCtrlRefreshItem obj item@).
+listCtrlRefreshItem :: ListCtrl  a -> Int ->  IO ()
+listCtrlRefreshItem _obj item 
+  = withObjectRef "listCtrlRefreshItem" _obj $ \cobj__obj -> 
+    wxListCtrl_RefreshItem cobj__obj  (toCInt item)  
+foreign import ccall "wxListCtrl_RefreshItem" wxListCtrl_RefreshItem :: Ptr (TListCtrl a) -> CInt -> IO ()
+
+-- | usage: (@listCtrlScrollList obj dxdy@).
+listCtrlScrollList :: ListCtrl  a -> Vector ->  IO Bool
+listCtrlScrollList _obj dxdy 
+  = withBoolResult $
+    withObjectRef "listCtrlScrollList" _obj $ \cobj__obj -> 
+    wxListCtrl_ScrollList cobj__obj  (toCIntVectorX dxdy) (toCIntVectorY dxdy)  
+foreign import ccall "wxListCtrl_ScrollList" wxListCtrl_ScrollList :: Ptr (TListCtrl a) -> CInt -> CInt -> IO CBool
+
+-- | usage: (@listCtrlSetBackgroundColour obj col@).
+listCtrlSetBackgroundColour :: ListCtrl  a -> Color ->  IO ()
+listCtrlSetBackgroundColour _obj col 
+  = withObjectRef "listCtrlSetBackgroundColour" _obj $ \cobj__obj -> 
+    withColourPtr col $ \cobj_col -> 
+    wxListCtrl_SetBackgroundColour cobj__obj  cobj_col  
+foreign import ccall "wxListCtrl_SetBackgroundColour" wxListCtrl_SetBackgroundColour :: Ptr (TListCtrl a) -> Ptr (TColour b) -> IO ()
+
+-- | usage: (@listCtrlSetColumn obj col item@).
+listCtrlSetColumn :: ListCtrl  a -> Int -> ListItem  c ->  IO Bool
+listCtrlSetColumn _obj col item 
+  = withBoolResult $
+    withObjectRef "listCtrlSetColumn" _obj $ \cobj__obj -> 
+    withObjectPtr item $ \cobj_item -> 
+    wxListCtrl_SetColumn cobj__obj  (toCInt col)  cobj_item  
+foreign import ccall "wxListCtrl_SetColumn" wxListCtrl_SetColumn :: Ptr (TListCtrl a) -> CInt -> Ptr (TListItem c) -> IO CBool
+
+-- | usage: (@listCtrlSetColumnWidth obj col width@).
+listCtrlSetColumnWidth :: ListCtrl  a -> Int -> Int ->  IO Bool
+listCtrlSetColumnWidth _obj col width 
+  = withBoolResult $
+    withObjectRef "listCtrlSetColumnWidth" _obj $ \cobj__obj -> 
+    wxListCtrl_SetColumnWidth cobj__obj  (toCInt col)  (toCInt width)  
+foreign import ccall "wxListCtrl_SetColumnWidth" wxListCtrl_SetColumnWidth :: Ptr (TListCtrl a) -> CInt -> CInt -> IO CBool
+
+-- | usage: (@listCtrlSetForegroundColour obj col@).
+listCtrlSetForegroundColour :: ListCtrl  a -> Color ->  IO Int
+listCtrlSetForegroundColour _obj col 
+  = withIntResult $
+    withObjectRef "listCtrlSetForegroundColour" _obj $ \cobj__obj -> 
+    withColourPtr col $ \cobj_col -> 
+    wxListCtrl_SetForegroundColour cobj__obj  cobj_col  
+foreign import ccall "wxListCtrl_SetForegroundColour" wxListCtrl_SetForegroundColour :: Ptr (TListCtrl a) -> Ptr (TColour b) -> IO CInt
+
+-- | usage: (@listCtrlSetImageList obj imageList which@).
+listCtrlSetImageList :: ListCtrl  a -> ImageList  b -> Int ->  IO ()
+listCtrlSetImageList _obj imageList which 
+  = withObjectRef "listCtrlSetImageList" _obj $ \cobj__obj -> 
+    withObjectPtr imageList $ \cobj_imageList -> 
+    wxListCtrl_SetImageList cobj__obj  cobj_imageList  (toCInt which)  
+foreign import ccall "wxListCtrl_SetImageList" wxListCtrl_SetImageList :: Ptr (TListCtrl a) -> Ptr (TImageList b) -> CInt -> IO ()
+
+-- | usage: (@listCtrlSetItem obj index col label imageId@).
+listCtrlSetItem :: ListCtrl  a -> Int -> Int -> String -> Int ->  IO Bool
+listCtrlSetItem _obj index col label imageId 
+  = withBoolResult $
+    withObjectRef "listCtrlSetItem" _obj $ \cobj__obj -> 
+    withStringPtr label $ \cobj_label -> 
+    wxListCtrl_SetItem cobj__obj  (toCInt index)  (toCInt col)  cobj_label  (toCInt imageId)  
+foreign import ccall "wxListCtrl_SetItem" wxListCtrl_SetItem :: Ptr (TListCtrl a) -> CInt -> CInt -> Ptr (TWxString d) -> CInt -> IO CBool
+
+-- | usage: (@listCtrlSetItemData obj item wxdata@).
+listCtrlSetItemData :: ListCtrl  a -> Int -> Int ->  IO Bool
+listCtrlSetItemData _obj item wxdata 
+  = withBoolResult $
+    withObjectRef "listCtrlSetItemData" _obj $ \cobj__obj -> 
+    wxListCtrl_SetItemData cobj__obj  (toCInt item)  (toCInt wxdata)  
+foreign import ccall "wxListCtrl_SetItemData" wxListCtrl_SetItemData :: Ptr (TListCtrl a) -> CInt -> CInt -> IO CBool
+
+-- | usage: (@listCtrlSetItemFromInfo obj info@).
+listCtrlSetItemFromInfo :: ListCtrl  a -> ListItem  b ->  IO Bool
+listCtrlSetItemFromInfo _obj info 
+  = withBoolResult $
+    withObjectRef "listCtrlSetItemFromInfo" _obj $ \cobj__obj -> 
+    withObjectPtr info $ \cobj_info -> 
+    wxListCtrl_SetItemFromInfo cobj__obj  cobj_info  
+foreign import ccall "wxListCtrl_SetItemFromInfo" wxListCtrl_SetItemFromInfo :: Ptr (TListCtrl a) -> Ptr (TListItem b) -> IO CBool
+
+-- | usage: (@listCtrlSetItemImage obj item image selImage@).
+listCtrlSetItemImage :: ListCtrl  a -> Int -> Int -> Int ->  IO Bool
+listCtrlSetItemImage _obj item image selImage 
+  = withBoolResult $
+    withObjectRef "listCtrlSetItemImage" _obj $ \cobj__obj -> 
+    wxListCtrl_SetItemImage cobj__obj  (toCInt item)  (toCInt image)  (toCInt selImage)  
+foreign import ccall "wxListCtrl_SetItemImage" wxListCtrl_SetItemImage :: Ptr (TListCtrl a) -> CInt -> CInt -> CInt -> IO CBool
+
+-- | usage: (@listCtrlSetItemPosition obj item xy@).
+listCtrlSetItemPosition :: ListCtrl  a -> Int -> Point ->  IO Bool
+listCtrlSetItemPosition _obj item xy 
+  = withBoolResult $
+    withObjectRef "listCtrlSetItemPosition" _obj $ \cobj__obj -> 
+    wxListCtrl_SetItemPosition cobj__obj  (toCInt item)  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxListCtrl_SetItemPosition" wxListCtrl_SetItemPosition :: Ptr (TListCtrl a) -> CInt -> CInt -> CInt -> IO CBool
+
+-- | usage: (@listCtrlSetItemState obj item state stateMask@).
+listCtrlSetItemState :: ListCtrl  a -> Int -> Int -> Int ->  IO Bool
+listCtrlSetItemState _obj item state stateMask 
+  = withBoolResult $
+    withObjectRef "listCtrlSetItemState" _obj $ \cobj__obj -> 
+    wxListCtrl_SetItemState cobj__obj  (toCInt item)  (toCInt state)  (toCInt stateMask)  
+foreign import ccall "wxListCtrl_SetItemState" wxListCtrl_SetItemState :: Ptr (TListCtrl a) -> CInt -> CInt -> CInt -> IO CBool
+
+-- | usage: (@listCtrlSetItemText obj item str@).
+listCtrlSetItemText :: ListCtrl  a -> Int -> String ->  IO ()
+listCtrlSetItemText _obj item str 
+  = withObjectRef "listCtrlSetItemText" _obj $ \cobj__obj -> 
+    withStringPtr str $ \cobj_str -> 
+    wxListCtrl_SetItemText cobj__obj  (toCInt item)  cobj_str  
+foreign import ccall "wxListCtrl_SetItemText" wxListCtrl_SetItemText :: Ptr (TListCtrl a) -> CInt -> Ptr (TWxString c) -> IO ()
+
+-- | usage: (@listCtrlSetSingleStyle obj style add@).
+listCtrlSetSingleStyle :: ListCtrl  a -> Int -> Bool ->  IO ()
+listCtrlSetSingleStyle _obj style add 
+  = withObjectRef "listCtrlSetSingleStyle" _obj $ \cobj__obj -> 
+    wxListCtrl_SetSingleStyle cobj__obj  (toCInt style)  (toCBool add)  
+foreign import ccall "wxListCtrl_SetSingleStyle" wxListCtrl_SetSingleStyle :: Ptr (TListCtrl a) -> CInt -> CBool -> IO ()
+
+-- | usage: (@listCtrlSetTextColour obj col@).
+listCtrlSetTextColour :: ListCtrl  a -> Color ->  IO ()
+listCtrlSetTextColour _obj col 
+  = withObjectRef "listCtrlSetTextColour" _obj $ \cobj__obj -> 
+    withColourPtr col $ \cobj_col -> 
+    wxListCtrl_SetTextColour cobj__obj  cobj_col  
+foreign import ccall "wxListCtrl_SetTextColour" wxListCtrl_SetTextColour :: Ptr (TListCtrl a) -> Ptr (TColour b) -> IO ()
+
+-- | usage: (@listCtrlSetWindowStyleFlag obj style@).
+listCtrlSetWindowStyleFlag :: ListCtrl  a -> Int ->  IO ()
+listCtrlSetWindowStyleFlag _obj style 
+  = withObjectRef "listCtrlSetWindowStyleFlag" _obj $ \cobj__obj -> 
+    wxListCtrl_SetWindowStyleFlag cobj__obj  (toCInt style)  
+foreign import ccall "wxListCtrl_SetWindowStyleFlag" wxListCtrl_SetWindowStyleFlag :: Ptr (TListCtrl a) -> CInt -> IO ()
+
+-- | usage: (@listCtrlSortItems obj fn eifobj@).
+listCtrlSortItems :: ListCtrl  a -> Ptr  b -> Ptr  c ->  IO Bool
+listCtrlSortItems _obj fn eifobj 
+  = withBoolResult $
+    withObjectRef "listCtrlSortItems" _obj $ \cobj__obj -> 
+    wxListCtrl_SortItems cobj__obj  fn  eifobj  
+foreign import ccall "wxListCtrl_SortItems" wxListCtrl_SortItems :: Ptr (TListCtrl a) -> Ptr  b -> Ptr  c -> IO CBool
+
+-- | usage: (@listCtrlSortItems2 obj closure@).
+listCtrlSortItems2 :: ListCtrl  a -> Closure  b ->  IO Bool
+listCtrlSortItems2 _obj closure 
+  = withBoolResult $
+    withObjectRef "listCtrlSortItems2" _obj $ \cobj__obj -> 
+    withObjectPtr closure $ \cobj_closure -> 
+    wxListCtrl_SortItems2 cobj__obj  cobj_closure  
+foreign import ccall "wxListCtrl_SortItems2" wxListCtrl_SortItems2 :: Ptr (TListCtrl a) -> Ptr (TClosure b) -> IO CBool
+
+-- | usage: (@listCtrlUpdateStyle obj@).
+listCtrlUpdateStyle :: ListCtrl  a ->  IO ()
+listCtrlUpdateStyle _obj 
+  = withObjectRef "listCtrlUpdateStyle" _obj $ \cobj__obj -> 
+    wxListCtrl_UpdateStyle cobj__obj  
+foreign import ccall "wxListCtrl_UpdateStyle" wxListCtrl_UpdateStyle :: Ptr (TListCtrl a) -> IO ()
+
+-- | usage: (@listEventCancelled obj@).
+listEventCancelled :: ListEvent  a ->  IO Bool
+listEventCancelled _obj 
+  = withBoolResult $
+    withObjectRef "listEventCancelled" _obj $ \cobj__obj -> 
+    wxListEvent_Cancelled cobj__obj  
+foreign import ccall "wxListEvent_Cancelled" wxListEvent_Cancelled :: Ptr (TListEvent a) -> IO CBool
+
+-- | usage: (@listEventGetCacheFrom obj@).
+listEventGetCacheFrom :: ListEvent  a ->  IO Int
+listEventGetCacheFrom _obj 
+  = withIntResult $
+    withObjectRef "listEventGetCacheFrom" _obj $ \cobj__obj -> 
+    wxListEvent_GetCacheFrom cobj__obj  
+foreign import ccall "wxListEvent_GetCacheFrom" wxListEvent_GetCacheFrom :: Ptr (TListEvent a) -> IO CInt
+
+-- | usage: (@listEventGetCacheTo obj@).
+listEventGetCacheTo :: ListEvent  a ->  IO Int
+listEventGetCacheTo _obj 
+  = withIntResult $
+    withObjectRef "listEventGetCacheTo" _obj $ \cobj__obj -> 
+    wxListEvent_GetCacheTo cobj__obj  
+foreign import ccall "wxListEvent_GetCacheTo" wxListEvent_GetCacheTo :: Ptr (TListEvent a) -> IO CInt
+
+-- | usage: (@listEventGetCode obj@).
+listEventGetCode :: ListEvent  a ->  IO Int
+listEventGetCode _obj 
+  = withIntResult $
+    withObjectRef "listEventGetCode" _obj $ \cobj__obj -> 
+    wxListEvent_GetCode cobj__obj  
+foreign import ccall "wxListEvent_GetCode" wxListEvent_GetCode :: Ptr (TListEvent a) -> IO CInt
+
+-- | usage: (@listEventGetColumn obj@).
+listEventGetColumn :: ListEvent  a ->  IO Int
+listEventGetColumn _obj 
+  = withIntResult $
+    withObjectRef "listEventGetColumn" _obj $ \cobj__obj -> 
+    wxListEvent_GetColumn cobj__obj  
+foreign import ccall "wxListEvent_GetColumn" wxListEvent_GetColumn :: Ptr (TListEvent a) -> IO CInt
+
+-- | usage: (@listEventGetData obj@).
+listEventGetData :: ListEvent  a ->  IO Int
+listEventGetData _obj 
+  = withIntResult $
+    withObjectRef "listEventGetData" _obj $ \cobj__obj -> 
+    wxListEvent_GetData cobj__obj  
+foreign import ccall "wxListEvent_GetData" wxListEvent_GetData :: Ptr (TListEvent a) -> IO CInt
+
+-- | usage: (@listEventGetImage obj@).
+listEventGetImage :: ListEvent  a ->  IO Int
+listEventGetImage _obj 
+  = withIntResult $
+    withObjectRef "listEventGetImage" _obj $ \cobj__obj -> 
+    wxListEvent_GetImage cobj__obj  
+foreign import ccall "wxListEvent_GetImage" wxListEvent_GetImage :: Ptr (TListEvent a) -> IO CInt
+
+-- | usage: (@listEventGetIndex obj@).
+listEventGetIndex :: ListEvent  a ->  IO Int
+listEventGetIndex _obj 
+  = withIntResult $
+    withObjectRef "listEventGetIndex" _obj $ \cobj__obj -> 
+    wxListEvent_GetIndex cobj__obj  
+foreign import ccall "wxListEvent_GetIndex" wxListEvent_GetIndex :: Ptr (TListEvent a) -> IO CInt
+
+-- | usage: (@listEventGetItem obj@).
+listEventGetItem :: ListEvent  a ->  IO (ListItem  ())
+listEventGetItem _obj 
+  = withRefListItem $ \pref -> 
+    withObjectRef "listEventGetItem" _obj $ \cobj__obj -> 
+    wxListEvent_GetItem cobj__obj   pref
+foreign import ccall "wxListEvent_GetItem" wxListEvent_GetItem :: Ptr (TListEvent a) -> Ptr (TListItem ()) -> IO ()
+
+-- | usage: (@listEventGetLabel obj@).
+listEventGetLabel :: ListEvent  a ->  IO (String)
+listEventGetLabel _obj 
+  = withManagedStringResult $
+    withObjectRef "listEventGetLabel" _obj $ \cobj__obj -> 
+    wxListEvent_GetLabel cobj__obj  
+foreign import ccall "wxListEvent_GetLabel" wxListEvent_GetLabel :: Ptr (TListEvent a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@listEventGetMask obj@).
+listEventGetMask :: ListEvent  a ->  IO Int
+listEventGetMask _obj 
+  = withIntResult $
+    withObjectRef "listEventGetMask" _obj $ \cobj__obj -> 
+    wxListEvent_GetMask cobj__obj  
+foreign import ccall "wxListEvent_GetMask" wxListEvent_GetMask :: Ptr (TListEvent a) -> IO CInt
+
+-- | usage: (@listEventGetPoint obj@).
+listEventGetPoint :: ListEvent  a ->  IO (Point)
+listEventGetPoint _obj 
+  = withWxPointResult $
+    withObjectRef "listEventGetPoint" _obj $ \cobj__obj -> 
+    wxListEvent_GetPoint cobj__obj  
+foreign import ccall "wxListEvent_GetPoint" wxListEvent_GetPoint :: Ptr (TListEvent a) -> IO (Ptr (TWxPoint ()))
+
+-- | usage: (@listEventGetText obj@).
+listEventGetText :: ListEvent  a ->  IO (String)
+listEventGetText _obj 
+  = withManagedStringResult $
+    withObjectRef "listEventGetText" _obj $ \cobj__obj -> 
+    wxListEvent_GetText cobj__obj  
+foreign import ccall "wxListEvent_GetText" wxListEvent_GetText :: Ptr (TListEvent a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@listItemClear obj@).
+listItemClear :: ListItem  a ->  IO ()
+listItemClear _obj 
+  = withObjectRef "listItemClear" _obj $ \cobj__obj -> 
+    wxListItem_Clear cobj__obj  
+foreign import ccall "wxListItem_Clear" wxListItem_Clear :: Ptr (TListItem a) -> IO ()
+
+-- | usage: (@listItemClearAttributes obj@).
+listItemClearAttributes :: ListItem  a ->  IO ()
+listItemClearAttributes _obj 
+  = withObjectRef "listItemClearAttributes" _obj $ \cobj__obj -> 
+    wxListItem_ClearAttributes cobj__obj  
+foreign import ccall "wxListItem_ClearAttributes" wxListItem_ClearAttributes :: Ptr (TListItem a) -> IO ()
+
+-- | usage: (@listItemCreate@).
+listItemCreate ::  IO (ListItem  ())
+listItemCreate 
+  = withManagedObjectResult $
+    wxListItem_Create 
+foreign import ccall "wxListItem_Create" wxListItem_Create :: IO (Ptr (TListItem ()))
+
+-- | usage: (@listItemDelete obj@).
+listItemDelete :: ListItem  a ->  IO ()
+listItemDelete
+  = objectDelete
+
+
+-- | usage: (@listItemGetAlign obj@).
+listItemGetAlign :: ListItem  a ->  IO Int
+listItemGetAlign _obj 
+  = withIntResult $
+    withObjectRef "listItemGetAlign" _obj $ \cobj__obj -> 
+    wxListItem_GetAlign cobj__obj  
+foreign import ccall "wxListItem_GetAlign" wxListItem_GetAlign :: Ptr (TListItem a) -> IO CInt
+
+-- | usage: (@listItemGetAttributes obj@).
+listItemGetAttributes :: ListItem  a ->  IO (Ptr  ())
+listItemGetAttributes _obj 
+  = withObjectRef "listItemGetAttributes" _obj $ \cobj__obj -> 
+    wxListItem_GetAttributes cobj__obj  
+foreign import ccall "wxListItem_GetAttributes" wxListItem_GetAttributes :: Ptr (TListItem a) -> IO (Ptr  ())
+
+-- | usage: (@listItemGetBackgroundColour obj@).
+listItemGetBackgroundColour :: ListItem  a ->  IO (Color)
+listItemGetBackgroundColour _obj 
+  = withRefColour $ \pref -> 
+    withObjectRef "listItemGetBackgroundColour" _obj $ \cobj__obj -> 
+    wxListItem_GetBackgroundColour cobj__obj   pref
+foreign import ccall "wxListItem_GetBackgroundColour" wxListItem_GetBackgroundColour :: Ptr (TListItem a) -> Ptr (TColour ()) -> IO ()
+
+-- | usage: (@listItemGetColumn obj@).
+listItemGetColumn :: ListItem  a ->  IO Int
+listItemGetColumn _obj 
+  = withIntResult $
+    withObjectRef "listItemGetColumn" _obj $ \cobj__obj -> 
+    wxListItem_GetColumn cobj__obj  
+foreign import ccall "wxListItem_GetColumn" wxListItem_GetColumn :: Ptr (TListItem a) -> IO CInt
+
+-- | usage: (@listItemGetData obj@).
+listItemGetData :: ListItem  a ->  IO Int
+listItemGetData _obj 
+  = withIntResult $
+    withObjectRef "listItemGetData" _obj $ \cobj__obj -> 
+    wxListItem_GetData cobj__obj  
+foreign import ccall "wxListItem_GetData" wxListItem_GetData :: Ptr (TListItem a) -> IO CInt
+
+-- | usage: (@listItemGetFont obj@).
+listItemGetFont :: ListItem  a ->  IO (Font  ())
+listItemGetFont _obj 
+  = withRefFont $ \pref -> 
+    withObjectRef "listItemGetFont" _obj $ \cobj__obj -> 
+    wxListItem_GetFont cobj__obj   pref
+foreign import ccall "wxListItem_GetFont" wxListItem_GetFont :: Ptr (TListItem a) -> Ptr (TFont ()) -> IO ()
+
+-- | usage: (@listItemGetId obj@).
+listItemGetId :: ListItem  a ->  IO Int
+listItemGetId _obj 
+  = withIntResult $
+    withObjectRef "listItemGetId" _obj $ \cobj__obj -> 
+    wxListItem_GetId cobj__obj  
+foreign import ccall "wxListItem_GetId" wxListItem_GetId :: Ptr (TListItem a) -> IO CInt
+
+-- | usage: (@listItemGetImage obj@).
+listItemGetImage :: ListItem  a ->  IO Int
+listItemGetImage _obj 
+  = withIntResult $
+    withObjectRef "listItemGetImage" _obj $ \cobj__obj -> 
+    wxListItem_GetImage cobj__obj  
+foreign import ccall "wxListItem_GetImage" wxListItem_GetImage :: Ptr (TListItem a) -> IO CInt
+
+-- | usage: (@listItemGetMask obj@).
+listItemGetMask :: ListItem  a ->  IO Int
+listItemGetMask _obj 
+  = withIntResult $
+    withObjectRef "listItemGetMask" _obj $ \cobj__obj -> 
+    wxListItem_GetMask cobj__obj  
+foreign import ccall "wxListItem_GetMask" wxListItem_GetMask :: Ptr (TListItem a) -> IO CInt
+
+-- | usage: (@listItemGetState obj@).
+listItemGetState :: ListItem  a ->  IO Int
+listItemGetState _obj 
+  = withIntResult $
+    withObjectRef "listItemGetState" _obj $ \cobj__obj -> 
+    wxListItem_GetState cobj__obj  
+foreign import ccall "wxListItem_GetState" wxListItem_GetState :: Ptr (TListItem a) -> IO CInt
+
+-- | usage: (@listItemGetText obj@).
+listItemGetText :: ListItem  a ->  IO (String)
+listItemGetText _obj 
+  = withManagedStringResult $
+    withObjectRef "listItemGetText" _obj $ \cobj__obj -> 
+    wxListItem_GetText cobj__obj  
+foreign import ccall "wxListItem_GetText" wxListItem_GetText :: Ptr (TListItem a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@listItemGetTextColour obj@).
+listItemGetTextColour :: ListItem  a ->  IO (Color)
+listItemGetTextColour _obj 
+  = withRefColour $ \pref -> 
+    withObjectRef "listItemGetTextColour" _obj $ \cobj__obj -> 
+    wxListItem_GetTextColour cobj__obj   pref
+foreign import ccall "wxListItem_GetTextColour" wxListItem_GetTextColour :: Ptr (TListItem a) -> Ptr (TColour ()) -> IO ()
+
+-- | usage: (@listItemGetWidth obj@).
+listItemGetWidth :: ListItem  a ->  IO Int
+listItemGetWidth _obj 
+  = withIntResult $
+    withObjectRef "listItemGetWidth" _obj $ \cobj__obj -> 
+    wxListItem_GetWidth cobj__obj  
+foreign import ccall "wxListItem_GetWidth" wxListItem_GetWidth :: Ptr (TListItem a) -> IO CInt
+
+-- | usage: (@listItemHasAttributes obj@).
+listItemHasAttributes :: ListItem  a ->  IO Bool
+listItemHasAttributes _obj 
+  = withBoolResult $
+    withObjectRef "listItemHasAttributes" _obj $ \cobj__obj -> 
+    wxListItem_HasAttributes cobj__obj  
+foreign import ccall "wxListItem_HasAttributes" wxListItem_HasAttributes :: Ptr (TListItem a) -> IO CBool
+
+-- | usage: (@listItemSetAlign obj align@).
+listItemSetAlign :: ListItem  a -> Int ->  IO ()
+listItemSetAlign _obj align 
+  = withObjectRef "listItemSetAlign" _obj $ \cobj__obj -> 
+    wxListItem_SetAlign cobj__obj  (toCInt align)  
+foreign import ccall "wxListItem_SetAlign" wxListItem_SetAlign :: Ptr (TListItem a) -> CInt -> IO ()
+
+-- | usage: (@listItemSetBackgroundColour obj colBack@).
+listItemSetBackgroundColour :: ListItem  a -> Color ->  IO ()
+listItemSetBackgroundColour _obj colBack 
+  = withObjectRef "listItemSetBackgroundColour" _obj $ \cobj__obj -> 
+    withColourPtr colBack $ \cobj_colBack -> 
+    wxListItem_SetBackgroundColour cobj__obj  cobj_colBack  
+foreign import ccall "wxListItem_SetBackgroundColour" wxListItem_SetBackgroundColour :: Ptr (TListItem a) -> Ptr (TColour b) -> IO ()
+
+-- | usage: (@listItemSetColumn obj col@).
+listItemSetColumn :: ListItem  a -> Int ->  IO ()
+listItemSetColumn _obj col 
+  = withObjectRef "listItemSetColumn" _obj $ \cobj__obj -> 
+    wxListItem_SetColumn cobj__obj  (toCInt col)  
+foreign import ccall "wxListItem_SetColumn" wxListItem_SetColumn :: Ptr (TListItem a) -> CInt -> IO ()
+
+-- | usage: (@listItemSetData obj wxdata@).
+listItemSetData :: ListItem  a -> Int ->  IO ()
+listItemSetData _obj wxdata 
+  = withObjectRef "listItemSetData" _obj $ \cobj__obj -> 
+    wxListItem_SetData cobj__obj  (toCInt wxdata)  
+foreign import ccall "wxListItem_SetData" wxListItem_SetData :: Ptr (TListItem a) -> CInt -> IO ()
+
+-- | usage: (@listItemSetDataPointer obj wxdata@).
+listItemSetDataPointer :: ListItem  a -> Ptr  b ->  IO ()
+listItemSetDataPointer _obj wxdata 
+  = withObjectRef "listItemSetDataPointer" _obj $ \cobj__obj -> 
+    wxListItem_SetDataPointer cobj__obj  wxdata  
+foreign import ccall "wxListItem_SetDataPointer" wxListItem_SetDataPointer :: Ptr (TListItem a) -> Ptr  b -> IO ()
+
+-- | usage: (@listItemSetFont obj font@).
+listItemSetFont :: ListItem  a -> Font  b ->  IO ()
+listItemSetFont _obj font 
+  = withObjectRef "listItemSetFont" _obj $ \cobj__obj -> 
+    withObjectPtr font $ \cobj_font -> 
+    wxListItem_SetFont cobj__obj  cobj_font  
+foreign import ccall "wxListItem_SetFont" wxListItem_SetFont :: Ptr (TListItem a) -> Ptr (TFont b) -> IO ()
+
+-- | usage: (@listItemSetId obj id@).
+listItemSetId :: ListItem  a -> Id ->  IO ()
+listItemSetId _obj id 
+  = withObjectRef "listItemSetId" _obj $ \cobj__obj -> 
+    wxListItem_SetId cobj__obj  (toCInt id)  
+foreign import ccall "wxListItem_SetId" wxListItem_SetId :: Ptr (TListItem a) -> CInt -> IO ()
+
+-- | usage: (@listItemSetImage obj image@).
+listItemSetImage :: ListItem  a -> Int ->  IO ()
+listItemSetImage _obj image 
+  = withObjectRef "listItemSetImage" _obj $ \cobj__obj -> 
+    wxListItem_SetImage cobj__obj  (toCInt image)  
+foreign import ccall "wxListItem_SetImage" wxListItem_SetImage :: Ptr (TListItem a) -> CInt -> IO ()
+
+-- | usage: (@listItemSetMask obj mask@).
+listItemSetMask :: ListItem  a -> Int ->  IO ()
+listItemSetMask _obj mask 
+  = withObjectRef "listItemSetMask" _obj $ \cobj__obj -> 
+    wxListItem_SetMask cobj__obj  (toCInt mask)  
+foreign import ccall "wxListItem_SetMask" wxListItem_SetMask :: Ptr (TListItem a) -> CInt -> IO ()
+
+-- | usage: (@listItemSetState obj state@).
+listItemSetState :: ListItem  a -> Int ->  IO ()
+listItemSetState _obj state 
+  = withObjectRef "listItemSetState" _obj $ \cobj__obj -> 
+    wxListItem_SetState cobj__obj  (toCInt state)  
+foreign import ccall "wxListItem_SetState" wxListItem_SetState :: Ptr (TListItem a) -> CInt -> IO ()
+
+-- | usage: (@listItemSetStateMask obj stateMask@).
+listItemSetStateMask :: ListItem  a -> Int ->  IO ()
+listItemSetStateMask _obj stateMask 
+  = withObjectRef "listItemSetStateMask" _obj $ \cobj__obj -> 
+    wxListItem_SetStateMask cobj__obj  (toCInt stateMask)  
+foreign import ccall "wxListItem_SetStateMask" wxListItem_SetStateMask :: Ptr (TListItem a) -> CInt -> IO ()
+
+-- | usage: (@listItemSetText obj text@).
+listItemSetText :: ListItem  a -> String ->  IO ()
+listItemSetText _obj text 
+  = withObjectRef "listItemSetText" _obj $ \cobj__obj -> 
+    withStringPtr text $ \cobj_text -> 
+    wxListItem_SetText cobj__obj  cobj_text  
+foreign import ccall "wxListItem_SetText" wxListItem_SetText :: Ptr (TListItem a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@listItemSetTextColour obj colText@).
+listItemSetTextColour :: ListItem  a -> Color ->  IO ()
+listItemSetTextColour _obj colText 
+  = withObjectRef "listItemSetTextColour" _obj $ \cobj__obj -> 
+    withColourPtr colText $ \cobj_colText -> 
+    wxListItem_SetTextColour cobj__obj  cobj_colText  
+foreign import ccall "wxListItem_SetTextColour" wxListItem_SetTextColour :: Ptr (TListItem a) -> Ptr (TColour b) -> IO ()
+
+-- | usage: (@listItemSetWidth obj width@).
+listItemSetWidth :: ListItem  a -> Int ->  IO ()
+listItemSetWidth _obj width 
+  = withObjectRef "listItemSetWidth" _obj $ \cobj__obj -> 
+    wxListItem_SetWidth cobj__obj  (toCInt width)  
+foreign import ccall "wxListItem_SetWidth" wxListItem_SetWidth :: Ptr (TListItem a) -> CInt -> IO ()
+
+-- | usage: (@localeAddCatalog obj szDomain@).
+localeAddCatalog :: Locale  a -> Ptr  b ->  IO Int
+localeAddCatalog _obj szDomain 
+  = withIntResult $
+    withObjectRef "localeAddCatalog" _obj $ \cobj__obj -> 
+    wxLocale_AddCatalog cobj__obj  szDomain  
+foreign import ccall "wxLocale_AddCatalog" wxLocale_AddCatalog :: Ptr (TLocale a) -> Ptr  b -> IO CInt
+
+-- | usage: (@localeAddCatalogLookupPathPrefix obj prefix@).
+localeAddCatalogLookupPathPrefix :: Locale  a -> Ptr  b ->  IO ()
+localeAddCatalogLookupPathPrefix _obj prefix 
+  = withObjectRef "localeAddCatalogLookupPathPrefix" _obj $ \cobj__obj -> 
+    wxLocale_AddCatalogLookupPathPrefix cobj__obj  prefix  
+foreign import ccall "wxLocale_AddCatalogLookupPathPrefix" wxLocale_AddCatalogLookupPathPrefix :: Ptr (TLocale a) -> Ptr  b -> IO ()
+
+-- | usage: (@localeCreate name flags@).
+localeCreate :: Int -> Int ->  IO (Locale  ())
+localeCreate _name _flags 
+  = withObjectResult $
+    wxLocale_Create (toCInt _name)  (toCInt _flags)  
+foreign import ccall "wxLocale_Create" wxLocale_Create :: CInt -> CInt -> IO (Ptr (TLocale ()))
+
+-- | usage: (@localeDelete obj@).
+localeDelete :: Locale  a ->  IO ()
+localeDelete _obj 
+  = withObjectRef "localeDelete" _obj $ \cobj__obj -> 
+    wxLocale_Delete cobj__obj  
+foreign import ccall "wxLocale_Delete" wxLocale_Delete :: Ptr (TLocale a) -> IO ()
+
+-- | usage: (@localeGetLocale obj@).
+localeGetLocale :: Locale  a ->  IO (Locale  ())
+localeGetLocale _obj 
+  = withObjectResult $
+    withObjectRef "localeGetLocale" _obj $ \cobj__obj -> 
+    wxLocale_GetLocale cobj__obj  
+foreign import ccall "wxLocale_GetLocale" wxLocale_GetLocale :: Ptr (TLocale a) -> IO (Ptr (TLocale ()))
+
+-- | usage: (@localeGetName obj@).
+localeGetName :: Locale  a ->  IO (String)
+localeGetName _obj 
+  = withManagedStringResult $
+    withObjectRef "localeGetName" _obj $ \cobj__obj -> 
+    wxLocale_GetName cobj__obj  
+foreign import ccall "wxLocale_GetName" wxLocale_GetName :: Ptr (TLocale a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@localeGetString obj szOrigString szDomain@).
+localeGetString :: Locale  a -> Ptr  b -> Ptr  c ->  IO String
+localeGetString _obj szOrigString szDomain 
+  = withWStringResult $ \buffer -> 
+    withObjectRef "localeGetString" _obj $ \cobj__obj -> 
+    wxLocale_GetString cobj__obj  szOrigString  szDomain   buffer
+foreign import ccall "wxLocale_GetString" wxLocale_GetString :: Ptr (TLocale a) -> Ptr  b -> Ptr  c -> Ptr CWchar -> IO CInt
+
+-- | usage: (@localeIsLoaded obj szDomain@).
+localeIsLoaded :: Locale  a -> Ptr  b ->  IO Bool
+localeIsLoaded _obj szDomain 
+  = withBoolResult $
+    withObjectRef "localeIsLoaded" _obj $ \cobj__obj -> 
+    wxLocale_IsLoaded cobj__obj  szDomain  
+foreign import ccall "wxLocale_IsLoaded" wxLocale_IsLoaded :: Ptr (TLocale a) -> Ptr  b -> IO CBool
+
+-- | usage: (@localeIsOk obj@).
+localeIsOk :: Locale  a ->  IO Bool
+localeIsOk _obj 
+  = withBoolResult $
+    withObjectRef "localeIsOk" _obj $ \cobj__obj -> 
+    wxLocale_IsOk cobj__obj  
+foreign import ccall "wxLocale_IsOk" wxLocale_IsOk :: Ptr (TLocale a) -> IO CBool
+
+-- | usage: (@logAddTraceMask obj str@).
+logAddTraceMask :: Log  a -> String ->  IO ()
+logAddTraceMask _obj str 
+  = withObjectRef "logAddTraceMask" _obj $ \cobj__obj -> 
+    withStringPtr str $ \cobj_str -> 
+    wxLog_AddTraceMask cobj__obj  cobj_str  
+foreign import ccall "wxLog_AddTraceMask" wxLog_AddTraceMask :: Ptr (TLog a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@logChainCreate logger@).
+logChainCreate :: Log  a ->  IO (LogChain  ())
+logChainCreate logger 
+  = withObjectResult $
+    withObjectPtr logger $ \cobj_logger -> 
+    wxLogChain_Create cobj_logger  
+foreign import ccall "wxLogChain_Create" wxLogChain_Create :: Ptr (TLog a) -> IO (Ptr (TLogChain ()))
+
+-- | usage: (@logChainDelete obj@).
+logChainDelete :: LogChain  a ->  IO ()
+logChainDelete _obj 
+  = withObjectRef "logChainDelete" _obj $ \cobj__obj -> 
+    wxLogChain_Delete cobj__obj  
+foreign import ccall "wxLogChain_Delete" wxLogChain_Delete :: Ptr (TLogChain a) -> IO ()
+
+-- | usage: (@logChainGetOldLog obj@).
+logChainGetOldLog :: LogChain  a ->  IO (Log  ())
+logChainGetOldLog _obj 
+  = withObjectResult $
+    withObjectRef "logChainGetOldLog" _obj $ \cobj__obj -> 
+    wxLogChain_GetOldLog cobj__obj  
+foreign import ccall "wxLogChain_GetOldLog" wxLogChain_GetOldLog :: Ptr (TLogChain a) -> IO (Ptr (TLog ()))
+
+-- | usage: (@logChainIsPassingMessages obj@).
+logChainIsPassingMessages :: LogChain  a ->  IO Bool
+logChainIsPassingMessages _obj 
+  = withBoolResult $
+    withObjectRef "logChainIsPassingMessages" _obj $ \cobj__obj -> 
+    wxLogChain_IsPassingMessages cobj__obj  
+foreign import ccall "wxLogChain_IsPassingMessages" wxLogChain_IsPassingMessages :: Ptr (TLogChain a) -> IO CBool
+
+-- | usage: (@logChainPassMessages obj bDoPass@).
+logChainPassMessages :: LogChain  a -> Bool ->  IO ()
+logChainPassMessages _obj bDoPass 
+  = withObjectRef "logChainPassMessages" _obj $ \cobj__obj -> 
+    wxLogChain_PassMessages cobj__obj  (toCBool bDoPass)  
+foreign import ccall "wxLogChain_PassMessages" wxLogChain_PassMessages :: Ptr (TLogChain a) -> CBool -> IO ()
+
+-- | usage: (@logChainSetLog obj logger@).
+logChainSetLog :: LogChain  a -> Log  b ->  IO ()
+logChainSetLog _obj logger 
+  = withObjectRef "logChainSetLog" _obj $ \cobj__obj -> 
+    withObjectPtr logger $ \cobj_logger -> 
+    wxLogChain_SetLog cobj__obj  cobj_logger  
+foreign import ccall "wxLogChain_SetLog" wxLogChain_SetLog :: Ptr (TLogChain a) -> Ptr (TLog b) -> IO ()
+
+-- | usage: (@logDebug msg@).
+logDebug :: String ->  IO ()
+logDebug _msg 
+  = withStringPtr _msg $ \cobj__msg -> 
+    wx_LogDebug cobj__msg  
+foreign import ccall "LogDebug" wx_LogDebug :: Ptr (TWxString a) -> IO ()
+
+-- | usage: (@logDelete obj@).
+logDelete :: Log  a ->  IO ()
+logDelete _obj 
+  = withObjectRef "logDelete" _obj $ \cobj__obj -> 
+    wxLog_Delete cobj__obj  
+foreign import ccall "wxLog_Delete" wxLog_Delete :: Ptr (TLog a) -> IO ()
+
+-- | usage: (@logDontCreateOnDemand obj@).
+logDontCreateOnDemand :: Log  a ->  IO ()
+logDontCreateOnDemand _obj 
+  = withObjectRef "logDontCreateOnDemand" _obj $ \cobj__obj -> 
+    wxLog_DontCreateOnDemand cobj__obj  
+foreign import ccall "wxLog_DontCreateOnDemand" wxLog_DontCreateOnDemand :: Ptr (TLog a) -> IO ()
+
+-- | usage: (@logError msg@).
+logError :: String ->  IO ()
+logError _msg 
+  = withStringPtr _msg $ \cobj__msg -> 
+    wx_LogError cobj__msg  
+foreign import ccall "LogError" wx_LogError :: Ptr (TWxString a) -> IO ()
+
+-- | usage: (@logErrorMsg msg@).
+logErrorMsg :: String ->  IO ()
+logErrorMsg _msg 
+  = withStringPtr _msg $ \cobj__msg -> 
+    wx_LogErrorMsg cobj__msg  
+foreign import ccall "LogErrorMsg" wx_LogErrorMsg :: Ptr (TWxString a) -> IO ()
+
+-- | usage: (@logFatalError msg@).
+logFatalError :: String ->  IO ()
+logFatalError _msg 
+  = withStringPtr _msg $ \cobj__msg -> 
+    wx_LogFatalError cobj__msg  
+foreign import ccall "LogFatalError" wx_LogFatalError :: Ptr (TWxString a) -> IO ()
+
+-- | usage: (@logFatalErrorMsg msg@).
+logFatalErrorMsg :: String ->  IO ()
+logFatalErrorMsg _msg 
+  = withStringPtr _msg $ \cobj__msg -> 
+    wx_LogFatalErrorMsg cobj__msg  
+foreign import ccall "LogFatalErrorMsg" wx_LogFatalErrorMsg :: Ptr (TWxString a) -> IO ()
+
+-- | usage: (@logFlush obj@).
+logFlush :: Log  a ->  IO ()
+logFlush _obj 
+  = withObjectRef "logFlush" _obj $ \cobj__obj -> 
+    wxLog_Flush cobj__obj  
+foreign import ccall "wxLog_Flush" wxLog_Flush :: Ptr (TLog a) -> IO ()
+
+-- | usage: (@logFlushActive obj@).
+logFlushActive :: Log  a ->  IO ()
+logFlushActive _obj 
+  = withObjectRef "logFlushActive" _obj $ \cobj__obj -> 
+    wxLog_FlushActive cobj__obj  
+foreign import ccall "wxLog_FlushActive" wxLog_FlushActive :: Ptr (TLog a) -> IO ()
+
+-- | usage: (@logGetActiveTarget@).
+logGetActiveTarget ::  IO (Log  ())
+logGetActiveTarget 
+  = withObjectResult $
+    wxLog_GetActiveTarget 
+foreign import ccall "wxLog_GetActiveTarget" wxLog_GetActiveTarget :: IO (Ptr (TLog ()))
+
+-- | usage: (@logGetTimestamp obj@).
+logGetTimestamp :: Log  a ->  IO (Ptr CWchar)
+logGetTimestamp _obj 
+  = withObjectRef "logGetTimestamp" _obj $ \cobj__obj -> 
+    wxLog_GetTimestamp cobj__obj  
+foreign import ccall "wxLog_GetTimestamp" wxLog_GetTimestamp :: Ptr (TLog a) -> IO (Ptr CWchar)
+
+-- | usage: (@logGetVerbose obj@).
+logGetVerbose :: Log  a ->  IO Int
+logGetVerbose _obj 
+  = withIntResult $
+    withObjectRef "logGetVerbose" _obj $ \cobj__obj -> 
+    wxLog_GetVerbose cobj__obj  
+foreign import ccall "wxLog_GetVerbose" wxLog_GetVerbose :: Ptr (TLog a) -> IO CInt
+
+-- | usage: (@logHasPendingMessages obj@).
+logHasPendingMessages :: Log  a ->  IO Bool
+logHasPendingMessages _obj 
+  = withBoolResult $
+    withObjectRef "logHasPendingMessages" _obj $ \cobj__obj -> 
+    wxLog_HasPendingMessages cobj__obj  
+foreign import ccall "wxLog_HasPendingMessages" wxLog_HasPendingMessages :: Ptr (TLog a) -> IO CBool
+
+-- | usage: (@logIsAllowedTraceMask obj mask@).
+logIsAllowedTraceMask :: Log  a -> Mask  b ->  IO Bool
+logIsAllowedTraceMask _obj mask 
+  = withBoolResult $
+    withObjectRef "logIsAllowedTraceMask" _obj $ \cobj__obj -> 
+    withObjectPtr mask $ \cobj_mask -> 
+    wxLog_IsAllowedTraceMask cobj__obj  cobj_mask  
+foreign import ccall "wxLog_IsAllowedTraceMask" wxLog_IsAllowedTraceMask :: Ptr (TLog a) -> Ptr (TMask b) -> IO CBool
+
+-- | usage: (@logMessage msg@).
+logMessage :: String ->  IO ()
+logMessage _msg 
+  = withStringPtr _msg $ \cobj__msg -> 
+    wx_LogMessage cobj__msg  
+foreign import ccall "LogMessage" wx_LogMessage :: Ptr (TWxString a) -> IO ()
+
+-- | usage: (@logMessageMsg msg@).
+logMessageMsg :: String ->  IO ()
+logMessageMsg _msg 
+  = withStringPtr _msg $ \cobj__msg -> 
+    wx_LogMessageMsg cobj__msg  
+foreign import ccall "LogMessageMsg" wx_LogMessageMsg :: Ptr (TWxString a) -> IO ()
+
+-- | usage: (@logNullCreate@).
+logNullCreate ::  IO (LogNull  ())
+logNullCreate 
+  = withObjectResult $
+    wxLogNull_Create 
+foreign import ccall "wxLogNull_Create" wxLogNull_Create :: IO (Ptr (TLogNull ()))
+
+-- | usage: (@logOnLog obj level szString t@).
+logOnLog :: Log  a -> Int -> String -> Int ->  IO ()
+logOnLog _obj level szString t 
+  = withObjectRef "logOnLog" _obj $ \cobj__obj -> 
+    withCWString szString $ \cstr_szString -> 
+    wxLog_OnLog cobj__obj  (toCInt level)  cstr_szString  (toCInt t)  
+foreign import ccall "wxLog_OnLog" wxLog_OnLog :: Ptr (TLog a) -> CInt -> CWString -> CInt -> IO ()
+
+-- | usage: (@logRemoveTraceMask obj str@).
+logRemoveTraceMask :: Log  a -> String ->  IO ()
+logRemoveTraceMask _obj str 
+  = withObjectRef "logRemoveTraceMask" _obj $ \cobj__obj -> 
+    withStringPtr str $ \cobj_str -> 
+    wxLog_RemoveTraceMask cobj__obj  cobj_str  
+foreign import ccall "wxLog_RemoveTraceMask" wxLog_RemoveTraceMask :: Ptr (TLog a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@logResume obj@).
+logResume :: Log  a ->  IO ()
+logResume _obj 
+  = withObjectRef "logResume" _obj $ \cobj__obj -> 
+    wxLog_Resume cobj__obj  
+foreign import ccall "wxLog_Resume" wxLog_Resume :: Ptr (TLog a) -> IO ()
+
+-- | usage: (@logSetActiveTarget pLogger@).
+logSetActiveTarget :: Log  a ->  IO (Log  ())
+logSetActiveTarget pLogger 
+  = withObjectResult $
+    withObjectRef "logSetActiveTarget" pLogger $ \cobj_pLogger -> 
+    wxLog_SetActiveTarget cobj_pLogger  
+foreign import ccall "wxLog_SetActiveTarget" wxLog_SetActiveTarget :: Ptr (TLog a) -> IO (Ptr (TLog ()))
+
+-- | usage: (@logSetTimestamp obj ts@).
+logSetTimestamp :: Log  a -> String ->  IO ()
+logSetTimestamp _obj ts 
+  = withObjectRef "logSetTimestamp" _obj $ \cobj__obj -> 
+    withCWString ts $ \cstr_ts -> 
+    wxLog_SetTimestamp cobj__obj  cstr_ts  
+foreign import ccall "wxLog_SetTimestamp" wxLog_SetTimestamp :: Ptr (TLog a) -> CWString -> IO ()
+
+-- | usage: (@logSetVerbose obj bVerbose@).
+logSetVerbose :: Log  a -> Bool ->  IO ()
+logSetVerbose _obj bVerbose 
+  = withObjectRef "logSetVerbose" _obj $ \cobj__obj -> 
+    wxLog_SetVerbose cobj__obj  (toCBool bVerbose)  
+foreign import ccall "wxLog_SetVerbose" wxLog_SetVerbose :: Ptr (TLog a) -> CBool -> IO ()
+
+-- | usage: (@logStatus msg@).
+logStatus :: String ->  IO ()
+logStatus _msg 
+  = withStringPtr _msg $ \cobj__msg -> 
+    wx_LogStatus cobj__msg  
+foreign import ccall "LogStatus" wx_LogStatus :: Ptr (TWxString a) -> IO ()
+
+-- | usage: (@logStderrCreate@).
+logStderrCreate ::  IO (LogStderr  ())
+logStderrCreate 
+  = withObjectResult $
+    wxLogStderr_Create 
+foreign import ccall "wxLogStderr_Create" wxLogStderr_Create :: IO (Ptr (TLogStderr ()))
+
+-- | usage: (@logStderrCreateStdOut@).
+logStderrCreateStdOut ::  IO (LogStderr  ())
+logStderrCreateStdOut 
+  = withObjectResult $
+    wxLogStderr_CreateStdOut 
+foreign import ccall "wxLogStderr_CreateStdOut" wxLogStderr_CreateStdOut :: IO (Ptr (TLogStderr ()))
+
+-- | usage: (@logSuspend obj@).
+logSuspend :: Log  a ->  IO ()
+logSuspend _obj 
+  = withObjectRef "logSuspend" _obj $ \cobj__obj -> 
+    wxLog_Suspend cobj__obj  
+foreign import ccall "wxLog_Suspend" wxLog_Suspend :: Ptr (TLog a) -> IO ()
+
+-- | usage: (@logSysError msg@).
+logSysError :: String ->  IO ()
+logSysError _msg 
+  = withStringPtr _msg $ \cobj__msg -> 
+    wx_LogSysError cobj__msg  
+foreign import ccall "LogSysError" wx_LogSysError :: Ptr (TWxString a) -> IO ()
+
+-- | usage: (@logTextCtrlCreate text@).
+logTextCtrlCreate :: TextCtrl  a ->  IO (LogTextCtrl  ())
+logTextCtrlCreate text 
+  = withObjectResult $
+    withObjectPtr text $ \cobj_text -> 
+    wxLogTextCtrl_Create cobj_text  
+foreign import ccall "wxLogTextCtrl_Create" wxLogTextCtrl_Create :: Ptr (TTextCtrl a) -> IO (Ptr (TLogTextCtrl ()))
+
+-- | usage: (@logTrace mask msg@).
+logTrace :: String -> String ->  IO ()
+logTrace mask _msg 
+  = withStringPtr mask $ \cobj_mask -> 
+    withStringPtr _msg $ \cobj__msg -> 
+    wx_LogTrace cobj_mask  cobj__msg  
+foreign import ccall "LogTrace" wx_LogTrace :: Ptr (TWxString a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@logVerbose msg@).
+logVerbose :: String ->  IO ()
+logVerbose _msg 
+  = withStringPtr _msg $ \cobj__msg -> 
+    wx_LogVerbose cobj__msg  
+foreign import ccall "LogVerbose" wx_LogVerbose :: Ptr (TWxString a) -> IO ()
+
+-- | usage: (@logWarning msg@).
+logWarning :: String ->  IO ()
+logWarning _msg 
+  = withStringPtr _msg $ \cobj__msg -> 
+    wx_LogWarning cobj__msg  
+foreign import ccall "LogWarning" wx_LogWarning :: Ptr (TWxString a) -> IO ()
+
+-- | usage: (@logWarningMsg msg@).
+logWarningMsg :: String ->  IO ()
+logWarningMsg _msg 
+  = withStringPtr _msg $ \cobj__msg -> 
+    wx_LogWarningMsg cobj__msg  
+foreign import ccall "LogWarningMsg" wx_LogWarningMsg :: Ptr (TWxString a) -> IO ()
+
+-- | usage: (@logWindowCreate parent title showit passthrough@).
+logWindowCreate :: Window  a -> String -> Bool -> Bool ->  IO (LogWindow  ())
+logWindowCreate parent title showit passthrough 
+  = withObjectResult $
+    withObjectPtr parent $ \cobj_parent -> 
+    withCWString title $ \cstr_title -> 
+    wxLogWindow_Create cobj_parent  cstr_title  (toCBool showit)  (toCBool passthrough)  
+foreign import ccall "wxLogWindow_Create" wxLogWindow_Create :: Ptr (TWindow a) -> CWString -> CBool -> CBool -> IO (Ptr (TLogWindow ()))
+
+-- | usage: (@logWindowGetFrame obj@).
+logWindowGetFrame :: LogWindow  a ->  IO (Frame  ())
+logWindowGetFrame obj 
+  = withObjectResult $
+    withObjectRef "logWindowGetFrame" obj $ \cobj_obj -> 
+    wxLogWindow_GetFrame cobj_obj  
+foreign import ccall "wxLogWindow_GetFrame" wxLogWindow_GetFrame :: Ptr (TLogWindow a) -> IO (Ptr (TFrame ()))
+
diff --git a/src/haskell/Graphics/UI/WxcClassesMZ.hs b/src/haskell/Graphics/UI/WxcClassesMZ.hs
new file mode 100644
index 0000000..9a7c497
--- /dev/null
+++ b/src/haskell/Graphics/UI/WxcClassesMZ.hs
@@ -0,0 +1,21240 @@
+{-# OPTIONS_HADDOCK prune #-}
+{-# LANGUAGE ForeignFunctionInterface #-}
+--------------------------------------------------------------------------------
+{-|
+Module      :  WxcClassesMZ
+Copyright   :  Copyright (c) Daan Leijen 2003, 2004
+License     :  wxWindows
+
+Maintainer  :  wxhaskell-devel@lists.sourceforge.net
+Stability   :  provisional
+Portability :  portable
+
+Haskell class definitions for the wxWidgets C library (@wxc.dll@).
+
+Do not edit this file manually!
+This file was automatically generated by wxDirect.
+
+From the files:
+
+  * @wxc.h@
+
+And contains 2339 methods for 131 classes.
+-}
+--------------------------------------------------------------------------------
+module Graphics.UI.WXCore.WxcClassesMZ
+    ( -- * Global
+     -- ** Null
+      nullAcceleratorTable
+     ,nullBitmap
+     ,nullBrush
+     ,nullColour
+     ,nullCursor
+     ,nullFont
+     ,nullIcon
+     ,nullPalette
+     ,nullPen
+     -- ** Events
+     ,wxEVT_ACTIVATE
+     ,wxEVT_ACTIVATE_APP
+     ,wxEVT_AUINOTEBOOK_ALLOW_DND
+     ,wxEVT_AUINOTEBOOK_BEGIN_DRAG
+     ,wxEVT_AUINOTEBOOK_BG_DCLICK
+     ,wxEVT_AUINOTEBOOK_BUTTON
+     ,wxEVT_AUINOTEBOOK_DRAG_DONE
+     ,wxEVT_AUINOTEBOOK_DRAG_MOTION
+     ,wxEVT_AUINOTEBOOK_END_DRAG
+     ,wxEVT_AUINOTEBOOK_PAGE_CHANGED
+     ,wxEVT_AUINOTEBOOK_PAGE_CHANGING
+     ,wxEVT_AUINOTEBOOK_PAGE_CLOSE
+     ,wxEVT_AUINOTEBOOK_PAGE_CLOSED
+     ,wxEVT_AUINOTEBOOK_TAB_MIDDLE_DOWN
+     ,wxEVT_AUINOTEBOOK_TAB_MIDDLE_UP
+     ,wxEVT_AUINOTEBOOK_TAB_RIGHT_DOWN
+     ,wxEVT_AUINOTEBOOK_TAB_RIGHT_UP
+     ,wxEVT_AUITOOLBAR_BEGIN_DRAG
+     ,wxEVT_AUITOOLBAR_MIDDLE_CLICK
+     ,wxEVT_AUITOOLBAR_OVERFLOW_CLICK
+     ,wxEVT_AUITOOLBAR_RIGHT_CLICK
+     ,wxEVT_AUITOOLBAR_TOOL_DROPDOWN
+     ,wxEVT_AUI_FIND_MANAGER
+     ,wxEVT_AUI_PANE_BUTTON
+     ,wxEVT_AUI_PANE_CLOSE
+     ,wxEVT_AUI_PANE_MAXIMIZE
+     ,wxEVT_AUI_PANE_RESTORE
+     ,wxEVT_AUI_RENDER
+     ,wxEVT_AUX1_DCLICK
+     ,wxEVT_AUX1_DOWN
+     ,wxEVT_AUX1_UP
+     ,wxEVT_AUX2_DCLICK
+     ,wxEVT_AUX2_DOWN
+     ,wxEVT_AUX2_UP
+     ,wxEVT_CALCULATE_LAYOUT
+     ,wxEVT_CALENDAR_DAY_CHANGED
+     ,wxEVT_CALENDAR_DOUBLECLICKED
+     ,wxEVT_CALENDAR_MONTH_CHANGED
+     ,wxEVT_CALENDAR_PAGE_CHANGED
+     ,wxEVT_CALENDAR_SEL_CHANGED
+     ,wxEVT_CALENDAR_WEEKDAY_CLICKED
+     ,wxEVT_CALENDAR_WEEK_CLICKED
+     ,wxEVT_CALENDAR_YEAR_CHANGED
+     ,wxEVT_CHAR
+     ,wxEVT_CHAR_HOOK
+     ,wxEVT_CHILD_FOCUS
+     ,wxEVT_CLIPBOARD_CHANGED
+     ,wxEVT_CLOSE_WINDOW
+     ,wxEVT_COMMAND_BUTTON_CLICKED
+     ,wxEVT_COMMAND_CHECKBOX_CLICKED
+     ,wxEVT_COMMAND_CHECKLISTBOX_TOGGLED
+     ,wxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGED
+     ,wxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGING
+     ,wxEVT_COMMAND_CHOICE_SELECTED
+     ,wxEVT_COMMAND_COLLPANE_CHANGED
+     ,wxEVT_COMMAND_COLOURPICKER_CHANGED
+     ,wxEVT_COMMAND_COMBOBOX_CLOSEUP
+     ,wxEVT_COMMAND_COMBOBOX_DROPDOWN
+     ,wxEVT_COMMAND_COMBOBOX_SELECTED
+     ,wxEVT_COMMAND_DATAVIEW_CACHE_HINT
+     ,wxEVT_COMMAND_DATAVIEW_COLUMN_HEADER_CLICK
+     ,wxEVT_COMMAND_DATAVIEW_COLUMN_HEADER_RIGHT_CLICK
+     ,wxEVT_COMMAND_DATAVIEW_COLUMN_REORDERED
+     ,wxEVT_COMMAND_DATAVIEW_COLUMN_SORTED
+     ,wxEVT_COMMAND_DATAVIEW_ITEM_ACTIVATED
+     ,wxEVT_COMMAND_DATAVIEW_ITEM_BEGIN_DRAG
+     ,wxEVT_COMMAND_DATAVIEW_ITEM_COLLAPSED
+     ,wxEVT_COMMAND_DATAVIEW_ITEM_COLLAPSING
+     ,wxEVT_COMMAND_DATAVIEW_ITEM_CONTEXT_MENU
+     ,wxEVT_COMMAND_DATAVIEW_ITEM_DROP
+     ,wxEVT_COMMAND_DATAVIEW_ITEM_DROP_POSSIBLE
+     ,wxEVT_COMMAND_DATAVIEW_ITEM_EDITING_DONE
+     ,wxEVT_COMMAND_DATAVIEW_ITEM_EDITING_STARTED
+     ,wxEVT_COMMAND_DATAVIEW_ITEM_EXPANDED
+     ,wxEVT_COMMAND_DATAVIEW_ITEM_EXPANDING
+     ,wxEVT_COMMAND_DATAVIEW_ITEM_START_EDITING
+     ,wxEVT_COMMAND_DATAVIEW_ITEM_VALUE_CHANGED
+     ,wxEVT_COMMAND_DATAVIEW_SELECTION_CHANGED
+     ,wxEVT_COMMAND_DIRPICKER_CHANGED
+     ,wxEVT_COMMAND_ENTER
+     ,wxEVT_COMMAND_FILEPICKER_CHANGED
+     ,wxEVT_COMMAND_FIND
+     ,wxEVT_COMMAND_FIND_CLOSE
+     ,wxEVT_COMMAND_FIND_NEXT
+     ,wxEVT_COMMAND_FIND_REPLACE
+     ,wxEVT_COMMAND_FIND_REPLACE_ALL
+     ,wxEVT_COMMAND_FONTPICKER_CHANGED
+     ,wxEVT_COMMAND_HEADER_BEGIN_REORDER
+     ,wxEVT_COMMAND_HEADER_BEGIN_RESIZE
+     ,wxEVT_COMMAND_HEADER_CLICK
+     ,wxEVT_COMMAND_HEADER_DCLICK
+     ,wxEVT_COMMAND_HEADER_DRAGGING_CANCELLED
+     ,wxEVT_COMMAND_HEADER_END_REORDER
+     ,wxEVT_COMMAND_HEADER_END_RESIZE
+     ,wxEVT_COMMAND_HEADER_MIDDLE_CLICK
+     ,wxEVT_COMMAND_HEADER_MIDDLE_DCLICK
+     ,wxEVT_COMMAND_HEADER_RESIZING
+     ,wxEVT_COMMAND_HEADER_RIGHT_CLICK
+     ,wxEVT_COMMAND_HEADER_RIGHT_DCLICK
+     ,wxEVT_COMMAND_HEADER_SEPARATOR_DCLICK
+     ,wxEVT_COMMAND_HTML_CELL_CLICKED
+     ,wxEVT_COMMAND_HTML_CELL_HOVER
+     ,wxEVT_COMMAND_HTML_LINK_CLICKED
+     ,wxEVT_COMMAND_HYPERLINK
+     ,wxEVT_COMMAND_KILL_FOCUS
+     ,wxEVT_COMMAND_LEFT_CLICK
+     ,wxEVT_COMMAND_LEFT_DCLICK
+     ,wxEVT_COMMAND_LISTBOOK_PAGE_CHANGED
+     ,wxEVT_COMMAND_LISTBOOK_PAGE_CHANGING
+     ,wxEVT_COMMAND_LISTBOX_DOUBLECLICKED
+     ,wxEVT_COMMAND_LISTBOX_SELECTED
+     ,wxEVT_COMMAND_LIST_BEGIN_DRAG
+     ,wxEVT_COMMAND_LIST_BEGIN_LABEL_EDIT
+     ,wxEVT_COMMAND_LIST_BEGIN_RDRAG
+     ,wxEVT_COMMAND_LIST_CACHE_HINT
+     ,wxEVT_COMMAND_LIST_COL_BEGIN_DRAG
+     ,wxEVT_COMMAND_LIST_COL_CLICK
+     ,wxEVT_COMMAND_LIST_COL_DRAGGING
+     ,wxEVT_COMMAND_LIST_COL_END_DRAG
+     ,wxEVT_COMMAND_LIST_COL_RIGHT_CLICK
+     ,wxEVT_COMMAND_LIST_DELETE_ALL_ITEMS
+     ,wxEVT_COMMAND_LIST_DELETE_ITEM
+     ,wxEVT_COMMAND_LIST_END_LABEL_EDIT
+     ,wxEVT_COMMAND_LIST_INSERT_ITEM
+     ,wxEVT_COMMAND_LIST_ITEM_ACTIVATED
+     ,wxEVT_COMMAND_LIST_ITEM_DESELECTED
+     ,wxEVT_COMMAND_LIST_ITEM_FOCUSED
+     ,wxEVT_COMMAND_LIST_ITEM_MIDDLE_CLICK
+     ,wxEVT_COMMAND_LIST_ITEM_RIGHT_CLICK
+     ,wxEVT_COMMAND_LIST_ITEM_SELECTED
+     ,wxEVT_COMMAND_LIST_KEY_DOWN
+     ,wxEVT_COMMAND_MENU_SELECTED
+     ,wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED
+     ,wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGING
+     ,wxEVT_COMMAND_RADIOBOX_SELECTED
+     ,wxEVT_COMMAND_RADIOBUTTON_SELECTED
+     ,wxEVT_COMMAND_RIBBONBAR_PAGE_CHANGED
+     ,wxEVT_COMMAND_RIBBONBAR_PAGE_CHANGING
+     ,wxEVT_COMMAND_RIBBONBAR_TAB_MIDDLE_DOWN
+     ,wxEVT_COMMAND_RIBBONBAR_TAB_MIDDLE_UP
+     ,wxEVT_COMMAND_RIBBONBAR_TAB_RIGHT_DOWN
+     ,wxEVT_COMMAND_RIBBONBAR_TAB_RIGHT_UP
+     ,wxEVT_COMMAND_RIBBONBUTTON_CLICKED
+     ,wxEVT_COMMAND_RIBBONBUTTON_DROPDOWN_CLICKED
+     ,wxEVT_COMMAND_RIBBONGALLERY_HOVER_CHANGED
+     ,wxEVT_COMMAND_RIBBONGALLERY_SELECTED
+     ,wxEVT_COMMAND_RIBBONTOOL_CLICKED
+     ,wxEVT_COMMAND_RIBBONTOOL_DROPDOWN_CLICKED
+     ,wxEVT_COMMAND_RICHTEXT_BUFFER_RESET
+     ,wxEVT_COMMAND_RICHTEXT_CHARACTER
+     ,wxEVT_COMMAND_RICHTEXT_CONTENT_DELETED
+     ,wxEVT_COMMAND_RICHTEXT_CONTENT_INSERTED
+     ,wxEVT_COMMAND_RICHTEXT_DELETE
+     ,wxEVT_COMMAND_RICHTEXT_LEFT_CLICK
+     ,wxEVT_COMMAND_RICHTEXT_LEFT_DCLICK
+     ,wxEVT_COMMAND_RICHTEXT_MIDDLE_CLICK
+     ,wxEVT_COMMAND_RICHTEXT_RETURN
+     ,wxEVT_COMMAND_RICHTEXT_RIGHT_CLICK
+     ,wxEVT_COMMAND_RICHTEXT_SELECTION_CHANGED
+     ,wxEVT_COMMAND_RICHTEXT_STYLESHEET_CHANGED
+     ,wxEVT_COMMAND_RICHTEXT_STYLESHEET_CHANGING
+     ,wxEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACED
+     ,wxEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACING
+     ,wxEVT_COMMAND_RICHTEXT_STYLE_CHANGED
+     ,wxEVT_COMMAND_RIGHT_CLICK
+     ,wxEVT_COMMAND_RIGHT_DCLICK
+     ,wxEVT_COMMAND_SEARCHCTRL_CANCEL_BTN
+     ,wxEVT_COMMAND_SEARCHCTRL_SEARCH_BTN
+     ,wxEVT_COMMAND_SET_FOCUS
+     ,wxEVT_COMMAND_SLIDER_UPDATED
+     ,wxEVT_COMMAND_SPINCTRLDOUBLE_UPDATED
+     ,wxEVT_COMMAND_SPINCTRL_UPDATED
+     ,wxEVT_COMMAND_SPLITTER_DOUBLECLICKED
+     ,wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGED
+     ,wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGING
+     ,wxEVT_COMMAND_SPLITTER_UNSPLIT
+     ,wxEVT_COMMAND_TEXT_COPY
+     ,wxEVT_COMMAND_TEXT_CUT
+     ,wxEVT_COMMAND_TEXT_ENTER
+     ,wxEVT_COMMAND_TEXT_MAXLEN
+     ,wxEVT_COMMAND_TEXT_PASTE
+     ,wxEVT_COMMAND_TEXT_UPDATED
+     ,wxEVT_COMMAND_TEXT_URL
+     ,wxEVT_COMMAND_THREAD
+     ,wxEVT_COMMAND_TOGGLEBUTTON_CLICKED
+     ,wxEVT_COMMAND_TOOLBOOK_PAGE_CHANGED
+     ,wxEVT_COMMAND_TOOLBOOK_PAGE_CHANGING
+     ,wxEVT_COMMAND_TOOL_CLICKED
+     ,wxEVT_COMMAND_TOOL_DROPDOWN_CLICKED
+     ,wxEVT_COMMAND_TOOL_ENTER
+     ,wxEVT_COMMAND_TOOL_RCLICKED
+     ,wxEVT_COMMAND_TREEBOOK_NODE_COLLAPSED
+     ,wxEVT_COMMAND_TREEBOOK_NODE_EXPANDED
+     ,wxEVT_COMMAND_TREEBOOK_PAGE_CHANGED
+     ,wxEVT_COMMAND_TREEBOOK_PAGE_CHANGING
+     ,wxEVT_COMMAND_TREE_BEGIN_DRAG
+     ,wxEVT_COMMAND_TREE_BEGIN_LABEL_EDIT
+     ,wxEVT_COMMAND_TREE_BEGIN_RDRAG
+     ,wxEVT_COMMAND_TREE_DELETE_ITEM
+     ,wxEVT_COMMAND_TREE_END_DRAG
+     ,wxEVT_COMMAND_TREE_END_LABEL_EDIT
+     ,wxEVT_COMMAND_TREE_GET_INFO
+     ,wxEVT_COMMAND_TREE_ITEM_ACTIVATED
+     ,wxEVT_COMMAND_TREE_ITEM_COLLAPSED
+     ,wxEVT_COMMAND_TREE_ITEM_COLLAPSING
+     ,wxEVT_COMMAND_TREE_ITEM_EXPANDED
+     ,wxEVT_COMMAND_TREE_ITEM_EXPANDING
+     ,wxEVT_COMMAND_TREE_ITEM_GETTOOLTIP
+     ,wxEVT_COMMAND_TREE_ITEM_MENU
+     ,wxEVT_COMMAND_TREE_ITEM_MIDDLE_CLICK
+     ,wxEVT_COMMAND_TREE_ITEM_RIGHT_CLICK
+     ,wxEVT_COMMAND_TREE_KEY_DOWN
+     ,wxEVT_COMMAND_TREE_SEL_CHANGED
+     ,wxEVT_COMMAND_TREE_SEL_CHANGING
+     ,wxEVT_COMMAND_TREE_SET_INFO
+     ,wxEVT_COMMAND_TREE_STATE_IMAGE_CLICK
+     ,wxEVT_COMMAND_VLBOX_SELECTED
+     ,wxEVT_CONTEXT_MENU
+     ,wxEVT_CREATE
+     ,wxEVT_DATE_CHANGED
+     ,wxEVT_DELETE
+     ,wxEVT_DESTROY
+     ,wxEVT_DETAILED_HELP
+     ,wxEVT_DISPLAY_CHANGED
+     ,wxEVT_DROP_FILES
+     ,wxEVT_END_PROCESS
+     ,wxEVT_END_SESSION
+     ,wxEVT_ENTER_WINDOW
+     ,wxEVT_ERASE_BACKGROUND
+     ,wxEVT_FILECTRL_FILEACTIVATED
+     ,wxEVT_FILECTRL_FILTERCHANGED
+     ,wxEVT_FILECTRL_FOLDERCHANGED
+     ,wxEVT_FILECTRL_SELECTIONCHANGED
+     ,wxEVT_FSWATCHER
+     ,wxEVT_GRID_CELL_BEGIN_DRAG
+     ,wxEVT_GRID_CELL_CHANGED
+     ,wxEVT_GRID_CELL_CHANGING
+     ,wxEVT_GRID_CELL_LEFT_CLICK
+     ,wxEVT_GRID_CELL_LEFT_DCLICK
+     ,wxEVT_GRID_CELL_RIGHT_CLICK
+     ,wxEVT_GRID_CELL_RIGHT_DCLICK
+     ,wxEVT_GRID_COL_MOVE
+     ,wxEVT_GRID_COL_SIZE
+     ,wxEVT_GRID_COL_SORT
+     ,wxEVT_GRID_EDITOR_CREATED
+     ,wxEVT_GRID_EDITOR_HIDDEN
+     ,wxEVT_GRID_EDITOR_SHOWN
+     ,wxEVT_GRID_LABEL_LEFT_CLICK
+     ,wxEVT_GRID_LABEL_LEFT_DCLICK
+     ,wxEVT_GRID_LABEL_RIGHT_CLICK
+     ,wxEVT_GRID_LABEL_RIGHT_DCLICK
+     ,wxEVT_GRID_RANGE_SELECT
+     ,wxEVT_GRID_ROW_SIZE
+     ,wxEVT_GRID_SELECT_CELL
+     ,wxEVT_HELP
+     ,wxEVT_HIBERNATE
+     ,wxEVT_HOTKEY
+     ,wxEVT_HTML_CELL_CLICKED
+     ,wxEVT_HTML_CELL_MOUSE_HOVER
+     ,wxEVT_HTML_LINK_CLICKED
+     ,wxEVT_HTML_SET_TITLE
+     ,wxEVT_ICONIZE
+     ,wxEVT_IDLE
+     ,wxEVT_INIT_DIALOG
+     ,wxEVT_INPUT_SINK
+     ,wxEVT_KEY_DOWN
+     ,wxEVT_KEY_UP
+     ,wxEVT_KILL_FOCUS
+     ,wxEVT_LEAVE_WINDOW
+     ,wxEVT_LEFT_DCLICK
+     ,wxEVT_LEFT_DOWN
+     ,wxEVT_LEFT_UP
+     ,wxEVT_MAXIMIZE
+     ,wxEVT_MENU_CLOSE
+     ,wxEVT_MENU_HIGHLIGHT
+     ,wxEVT_MENU_OPEN
+     ,wxEVT_MIDDLE_DCLICK
+     ,wxEVT_MIDDLE_DOWN
+     ,wxEVT_MIDDLE_UP
+     ,wxEVT_MOTION
+     ,wxEVT_MOUSEWHEEL
+     ,wxEVT_MOUSE_CAPTURE_CHANGED
+     ,wxEVT_MOUSE_CAPTURE_LOST
+     ,wxEVT_MOVE
+     ,wxEVT_MOVE_END
+     ,wxEVT_MOVE_START
+     ,wxEVT_MOVING
+     ,wxEVT_NAVIGATION_KEY
+     ,wxEVT_NC_PAINT
+     ,wxEVT_PAINT
+     ,wxEVT_PALETTE_CHANGED
+     ,wxEVT_PG_CHANGED
+     ,wxEVT_PG_CHANGING
+     ,wxEVT_PG_DOUBLE_CLICK
+     ,wxEVT_PG_HIGHLIGHTED
+     ,wxEVT_PG_ITEM_COLLAPSED
+     ,wxEVT_PG_ITEM_EXPANDED
+     ,wxEVT_PG_PAGE_CHANGED
+     ,wxEVT_PG_RIGHT_CLICK
+     ,wxEVT_PG_SELECTED
+     ,wxEVT_POWER_RESUME
+     ,wxEVT_POWER_SUSPENDED
+     ,wxEVT_POWER_SUSPENDING
+     ,wxEVT_POWER_SUSPEND_CANCEL
+     ,wxEVT_PRINT_BEGIN
+     ,wxEVT_PRINT_BEGIN_DOC
+     ,wxEVT_PRINT_END
+     ,wxEVT_PRINT_END_DOC
+     ,wxEVT_PRINT_PAGE
+     ,wxEVT_PRINT_PREPARE
+     ,wxEVT_QUERY_END_SESSION
+     ,wxEVT_QUERY_LAYOUT_INFO
+     ,wxEVT_QUERY_NEW_PALETTE
+     ,wxEVT_RIGHT_DCLICK
+     ,wxEVT_RIGHT_DOWN
+     ,wxEVT_RIGHT_UP
+     ,wxEVT_SASH_DRAGGED
+     ,wxEVT_SCROLLWIN_BOTTOM
+     ,wxEVT_SCROLLWIN_LINEDOWN
+     ,wxEVT_SCROLLWIN_LINEUP
+     ,wxEVT_SCROLLWIN_PAGEDOWN
+     ,wxEVT_SCROLLWIN_PAGEUP
+     ,wxEVT_SCROLLWIN_THUMBRELEASE
+     ,wxEVT_SCROLLWIN_THUMBTRACK
+     ,wxEVT_SCROLLWIN_TOP
+     ,wxEVT_SCROLL_BOTTOM
+     ,wxEVT_SCROLL_CHANGED
+     ,wxEVT_SCROLL_LINEDOWN
+     ,wxEVT_SCROLL_LINEUP
+     ,wxEVT_SCROLL_PAGEDOWN
+     ,wxEVT_SCROLL_PAGEUP
+     ,wxEVT_SCROLL_THUMBRELEASE
+     ,wxEVT_SCROLL_THUMBTRACK
+     ,wxEVT_SCROLL_TOP
+     ,wxEVT_SET_CURSOR
+     ,wxEVT_SET_FOCUS
+     ,wxEVT_SHOW
+     ,wxEVT_SIZE
+     ,wxEVT_SIZING
+     ,wxEVT_SOCKET
+     ,wxEVT_SORT
+     ,wxEVT_SPIN
+     ,wxEVT_SPIN_DOWN
+     ,wxEVT_SPIN_UP
+     ,wxEVT_STC_AUTOCOMP_SELECTION
+     ,wxEVT_STC_CALLTIP_CLICK
+     ,wxEVT_STC_CHANGE
+     ,wxEVT_STC_CHARADDED
+     ,wxEVT_STC_DOUBLECLICK
+     ,wxEVT_STC_DO_DROP
+     ,wxEVT_STC_DRAG_OVER
+     ,wxEVT_STC_DWELLEND
+     ,wxEVT_STC_DWELLSTART
+     ,wxEVT_STC_HOTSPOT_CLICK
+     ,wxEVT_STC_HOTSPOT_DCLICK
+     ,wxEVT_STC_KEY
+     ,wxEVT_STC_MACRORECORD
+     ,wxEVT_STC_MARGINCLICK
+     ,wxEVT_STC_MODIFIED
+     ,wxEVT_STC_NEEDSHOWN
+     ,wxEVT_STC_PAINTED
+     ,wxEVT_STC_ROMODIFYATTEMPT
+     ,wxEVT_STC_SAVEPOINTLEFT
+     ,wxEVT_STC_SAVEPOINTREACHED
+     ,wxEVT_STC_START_DRAG
+     ,wxEVT_STC_STYLENEEDED
+     ,wxEVT_STC_UPDATEUI
+     ,wxEVT_STC_URIDROPPED
+     ,wxEVT_STC_USERLISTSELECTION
+     ,wxEVT_STC_ZOOM
+     ,wxEVT_SYS_COLOUR_CHANGED
+     ,wxEVT_TASKBAR_BALLOON_CLICK
+     ,wxEVT_TASKBAR_BALLOON_TIMEOUT
+     ,wxEVT_TASKBAR_LEFT_DCLICK
+     ,wxEVT_TASKBAR_LEFT_DOWN
+     ,wxEVT_TASKBAR_LEFT_UP
+     ,wxEVT_TASKBAR_MOVE
+     ,wxEVT_TASKBAR_RIGHT_DCLICK
+     ,wxEVT_TASKBAR_RIGHT_DOWN
+     ,wxEVT_TASKBAR_RIGHT_UP
+     ,wxEVT_TIMER
+     ,wxEVT_UPDATE_UI
+     ,wxEVT_WINDOW_MODAL_DIALOG_CLOSED
+     ,wxEVT_WIZARD_CANCEL
+     ,wxEVT_WIZARD_FINISHED
+     ,wxEVT_WIZARD_HELP
+     ,wxEVT_WIZARD_PAGE_CHANGED
+     ,wxEVT_WIZARD_PAGE_CHANGING
+     ,wxEVT_WIZARD_PAGE_SHOWN
+     -- ** Misc.
+     ,popProvider
+     ,pushProvider
+     ,quantize
+     ,quantizePalette
+     ,removeProvider
+     ,textDataObjectCreate
+     ,textDataObjectDelete
+     ,textDataObjectGetText
+     ,textDataObjectGetTextLength
+     ,textDataObjectSetText
+     ,versionNumber
+     ,wxBK_HITTEST_NOWHERE
+     ,wxBK_HITTEST_ONICON
+     ,wxBK_HITTEST_ONITEM
+     ,wxBK_HITTEST_ONLABEL
+     ,wxBK_HITTEST_ONPAGE
+     ,wxK_ADD
+     ,wxK_ALT
+     ,wxK_BACK
+     ,wxK_CANCEL
+     ,wxK_CAPITAL
+     ,wxK_CLEAR
+     ,wxK_CONTROL
+     ,wxK_DECIMAL
+     ,wxK_DELETE
+     ,wxK_DIVIDE
+     ,wxK_DOWN
+     ,wxK_END
+     ,wxK_ESCAPE
+     ,wxK_EXECUTE
+     ,wxK_F1
+     ,wxK_F10
+     ,wxK_F11
+     ,wxK_F12
+     ,wxK_F13
+     ,wxK_F14
+     ,wxK_F15
+     ,wxK_F16
+     ,wxK_F17
+     ,wxK_F18
+     ,wxK_F19
+     ,wxK_F2
+     ,wxK_F20
+     ,wxK_F21
+     ,wxK_F22
+     ,wxK_F23
+     ,wxK_F24
+     ,wxK_F3
+     ,wxK_F4
+     ,wxK_F5
+     ,wxK_F6
+     ,wxK_F7
+     ,wxK_F8
+     ,wxK_F9
+     ,wxK_HELP
+     ,wxK_HOME
+     ,wxK_INSERT
+     ,wxK_LBUTTON
+     ,wxK_LEFT
+     ,wxK_MBUTTON
+     ,wxK_MENU
+     ,wxK_MULTIPLY
+     ,wxK_NUMLOCK
+     ,wxK_NUMPAD0
+     ,wxK_NUMPAD1
+     ,wxK_NUMPAD2
+     ,wxK_NUMPAD3
+     ,wxK_NUMPAD4
+     ,wxK_NUMPAD5
+     ,wxK_NUMPAD6
+     ,wxK_NUMPAD7
+     ,wxK_NUMPAD8
+     ,wxK_NUMPAD9
+     ,wxK_NUMPAD_ADD
+     ,wxK_NUMPAD_BEGIN
+     ,wxK_NUMPAD_DECIMAL
+     ,wxK_NUMPAD_DELETE
+     ,wxK_NUMPAD_DIVIDE
+     ,wxK_NUMPAD_DOWN
+     ,wxK_NUMPAD_END
+     ,wxK_NUMPAD_ENTER
+     ,wxK_NUMPAD_EQUAL
+     ,wxK_NUMPAD_F1
+     ,wxK_NUMPAD_F2
+     ,wxK_NUMPAD_F3
+     ,wxK_NUMPAD_F4
+     ,wxK_NUMPAD_HOME
+     ,wxK_NUMPAD_INSERT
+     ,wxK_NUMPAD_LEFT
+     ,wxK_NUMPAD_MULTIPLY
+     ,wxK_NUMPAD_PAGEDOWN
+     ,wxK_NUMPAD_PAGEUP
+     ,wxK_NUMPAD_RIGHT
+     ,wxK_NUMPAD_SEPARATOR
+     ,wxK_NUMPAD_SPACE
+     ,wxK_NUMPAD_SUBTRACT
+     ,wxK_NUMPAD_TAB
+     ,wxK_NUMPAD_UP
+     ,wxK_PAGEDOWN
+     ,wxK_PAGEUP
+     ,wxK_PAUSE
+     ,wxK_PRINT
+     ,wxK_RBUTTON
+     ,wxK_RETURN
+     ,wxK_RIGHT
+     ,wxK_SCROLL
+     ,wxK_SELECT
+     ,wxK_SEPARATOR
+     ,wxK_SHIFT
+     ,wxK_SNAPSHOT
+     ,wxK_SPACE
+     ,wxK_START
+     ,wxK_SUBTRACT
+     ,wxK_TAB
+     ,wxK_UP
+     ,wxNB_BOTTOM
+     ,wxNB_LEFT
+     ,wxNB_RIGHT
+     ,wxNB_TOP
+     ,wxcBeginBusyCursor
+     ,wxcBell
+     ,wxcEndBusyCursor
+     ,wxcFree
+     ,wxcGetMousePosition
+     ,wxcGetPixelRGB
+     ,wxcGetPixelRGBA
+     ,wxcInitPixelsRGB
+     ,wxcInitPixelsRGBA
+     ,wxcIsBusy
+     ,wxcMalloc
+     ,wxcSetPixelRGB
+     ,wxcSetPixelRGBA
+     ,wxcSetPixelRowRGB
+     ,wxcSetPixelRowRGBA
+     ,wxcSysErrorCode
+     ,wxcSysErrorMsg
+     ,wxcSystemSettingsGetColour
+     ,wxcWakeUpIdle
+      -- * Classes
+     -- ** MDIChildFrame
+     ,mdiChildFrameActivate
+     ,mdiChildFrameCreate
+     -- ** MDIParentFrame
+     ,mdiParentFrameActivateNext
+     ,mdiParentFrameActivatePrevious
+     ,mdiParentFrameArrangeIcons
+     ,mdiParentFrameCascade
+     ,mdiParentFrameCreate
+     ,mdiParentFrameGetActiveChild
+     ,mdiParentFrameGetClientWindow
+     ,mdiParentFrameGetWindowMenu
+     ,mdiParentFrameOnCreateClient
+     ,mdiParentFrameSetWindowMenu
+     ,mdiParentFrameTile
+     -- ** Mask
+     ,maskCreate
+     ,maskCreateColoured
+     -- ** MediaCtrl
+     ,mediaCtrlCreate
+     ,mediaCtrlDelete
+     ,mediaCtrlGetBestSize
+     ,mediaCtrlGetPlaybackRate
+     ,mediaCtrlGetState
+     ,mediaCtrlGetVolume
+     ,mediaCtrlLength
+     ,mediaCtrlLoad
+     ,mediaCtrlLoadURI
+     ,mediaCtrlLoadURIWithProxy
+     ,mediaCtrlPause
+     ,mediaCtrlPlay
+     ,mediaCtrlSeek
+     ,mediaCtrlSetPlaybackRate
+     ,mediaCtrlSetVolume
+     ,mediaCtrlShowPlayerControls
+     ,mediaCtrlStop
+     ,mediaCtrlTell
+     -- ** MemoryDC
+     ,memoryDCCreate
+     ,memoryDCCreateCompatible
+     ,memoryDCCreateWithBitmap
+     ,memoryDCDelete
+     ,memoryDCSelectObject
+     -- ** MemoryInputStream
+     ,memoryInputStreamCreate
+     ,memoryInputStreamDelete
+     -- ** Menu
+     ,menuAppend
+     ,menuAppendItem
+     ,menuAppendRadioItem
+     ,menuAppendSeparator
+     ,menuAppendSub
+     ,menuBreak
+     ,menuCheck
+     ,menuCreate
+     ,menuDeleteById
+     ,menuDeleteByItem
+     ,menuDeletePointer
+     ,menuDestroyById
+     ,menuDestroyByItem
+     ,menuEnable
+     ,menuFindItem
+     ,menuFindItemByLabel
+     ,menuGetClientData
+     ,menuGetHelpString
+     ,menuGetInvokingWindow
+     ,menuGetLabelText
+     ,menuGetMenuBar
+     ,menuGetMenuItemCount
+     ,menuGetMenuItems
+     ,menuGetParent
+     ,menuGetStyle
+     ,menuGetTitle
+     ,menuInsert
+     ,menuInsertItem
+     ,menuInsertSub
+     ,menuIsAttached
+     ,menuIsChecked
+     ,menuIsEnabled
+     ,menuPrepend
+     ,menuPrependItem
+     ,menuPrependSub
+     ,menuRemoveById
+     ,menuRemoveByItem
+     ,menuSetClientData
+     ,menuSetEventHandler
+     ,menuSetHelpString
+     ,menuSetInvokingWindow
+     ,menuSetLabel
+     ,menuSetParent
+     ,menuSetTitle
+     ,menuUpdateUI
+     -- ** MenuBar
+     ,menuBarAppend
+     ,menuBarCheck
+     ,menuBarCreate
+     ,menuBarDeletePointer
+     ,menuBarEnable
+     ,menuBarEnableItem
+     ,menuBarEnableTop
+     ,menuBarFindItem
+     ,menuBarFindMenu
+     ,menuBarFindMenuItem
+     ,menuBarGetFrame
+     ,menuBarGetHelpString
+     ,menuBarGetLabel
+     ,menuBarGetMenu
+     ,menuBarGetMenuCount
+     ,menuBarGetMenuLabel
+     ,menuBarInsert
+     ,menuBarIsChecked
+     ,menuBarIsEnabled
+     ,menuBarRemove
+     ,menuBarReplace
+     ,menuBarSetHelpString
+     ,menuBarSetItemLabel
+     ,menuBarSetLabel
+     ,menuBarSetMenuLabel
+     -- ** MenuEvent
+     ,menuEventCopyObject
+     ,menuEventGetMenuId
+     -- ** MenuItem
+     ,menuItemCheck
+     ,menuItemCreate
+     ,menuItemCreateEx
+     ,menuItemCreateSeparator
+     ,menuItemDelete
+     ,menuItemEnable
+     ,menuItemGetHelp
+     ,menuItemGetId
+     ,menuItemGetItemLabel
+     ,menuItemGetItemLabelText
+     ,menuItemGetLabelText
+     ,menuItemGetMenu
+     ,menuItemGetSubMenu
+     ,menuItemIsCheckable
+     ,menuItemIsChecked
+     ,menuItemIsEnabled
+     ,menuItemIsSeparator
+     ,menuItemIsSubMenu
+     ,menuItemSetCheckable
+     ,menuItemSetHelp
+     ,menuItemSetId
+     ,menuItemSetItemLabel
+     ,menuItemSetSubMenu
+     -- ** MessageDialog
+     ,messageDialogCreate
+     ,messageDialogDelete
+     ,messageDialogShowModal
+     -- ** Metafile
+     ,metafileCreate
+     ,metafileDelete
+     ,metafileIsOk
+     ,metafilePlay
+     ,metafileSetClipboard
+     -- ** MetafileDC
+     ,metafileDCClose
+     ,metafileDCCreate
+     ,metafileDCDelete
+     -- ** MimeTypesManager
+     ,mimeTypesManagerAddFallbacks
+     ,mimeTypesManagerCreate
+     ,mimeTypesManagerEnumAllFileTypes
+     ,mimeTypesManagerGetFileTypeFromExtension
+     ,mimeTypesManagerGetFileTypeFromMimeType
+     ,mimeTypesManagerIsOfType
+     -- ** MiniFrame
+     ,miniFrameCreate
+     -- ** MirrorDC
+     ,mirrorDCCreate
+     ,mirrorDCDelete
+     -- ** MouseEvent
+     ,mouseEventAltDown
+     ,mouseEventButton
+     ,mouseEventButtonDClick
+     ,mouseEventButtonDown
+     ,mouseEventButtonIsDown
+     ,mouseEventButtonUp
+     ,mouseEventControlDown
+     ,mouseEventCopyObject
+     ,mouseEventDragging
+     ,mouseEventEntering
+     ,mouseEventGetButton
+     ,mouseEventGetLogicalPosition
+     ,mouseEventGetPosition
+     ,mouseEventGetWheelDelta
+     ,mouseEventGetWheelRotation
+     ,mouseEventGetX
+     ,mouseEventGetY
+     ,mouseEventIsButton
+     ,mouseEventLeaving
+     ,mouseEventLeftDClick
+     ,mouseEventLeftDown
+     ,mouseEventLeftIsDown
+     ,mouseEventLeftUp
+     ,mouseEventMetaDown
+     ,mouseEventMiddleDClick
+     ,mouseEventMiddleDown
+     ,mouseEventMiddleIsDown
+     ,mouseEventMiddleUp
+     ,mouseEventMoving
+     ,mouseEventRightDClick
+     ,mouseEventRightDown
+     ,mouseEventRightIsDown
+     ,mouseEventRightUp
+     ,mouseEventShiftDown
+     -- ** MoveEvent
+     ,moveEventCopyObject
+     ,moveEventGetPosition
+     -- ** NavigationKeyEvent
+     ,navigationKeyEventGetCurrentFocus
+     ,navigationKeyEventGetDirection
+     ,navigationKeyEventIsWindowChange
+     ,navigationKeyEventSetCurrentFocus
+     ,navigationKeyEventSetDirection
+     ,navigationKeyEventSetWindowChange
+     ,navigationKeyEventShouldPropagate
+     -- ** Notebook
+     ,notebookAddPage
+     ,notebookAdvanceSelection
+     ,notebookAssignImageList
+     ,notebookCreate
+     ,notebookDeleteAllPages
+     ,notebookDeletePage
+     ,notebookGetImageList
+     ,notebookGetPage
+     ,notebookGetPageCount
+     ,notebookGetPageImage
+     ,notebookGetPageText
+     ,notebookGetRowCount
+     ,notebookGetSelection
+     ,notebookHitTest
+     ,notebookInsertPage
+     ,notebookRemovePage
+     ,notebookSetImageList
+     ,notebookSetPadding
+     ,notebookSetPageImage
+     ,notebookSetPageSize
+     ,notebookSetPageText
+     ,notebookSetSelection
+     -- ** NotifyEvent
+     ,notifyEventAllow
+     ,notifyEventCopyObject
+     ,notifyEventIsAllowed
+     ,notifyEventVeto
+     -- ** OutputStream
+     ,outputStreamDelete
+     ,outputStreamLastWrite
+     ,outputStreamPutC
+     ,outputStreamSeek
+     ,outputStreamSync
+     ,outputStreamTell
+     ,outputStreamWrite
+     -- ** PGProperty
+     ,pGPropertyGetLabel
+     ,pGPropertyGetName
+     ,pGPropertyGetValueAsString
+     ,pGPropertyGetValueType
+     ,pGPropertySetHelpString
+     -- ** PageSetupDialog
+     ,pageSetupDialogCreate
+     ,pageSetupDialogGetPageSetupData
+     ,pageSetupDialogShowModal
+     -- ** PageSetupDialogData
+     ,pageSetupDialogDataAssign
+     ,pageSetupDialogDataAssignData
+     ,pageSetupDialogDataCalculateIdFromPaperSize
+     ,pageSetupDialogDataCalculatePaperSizeFromId
+     ,pageSetupDialogDataCreate
+     ,pageSetupDialogDataCreateFromData
+     ,pageSetupDialogDataDelete
+     ,pageSetupDialogDataEnableHelp
+     ,pageSetupDialogDataEnableMargins
+     ,pageSetupDialogDataEnableOrientation
+     ,pageSetupDialogDataEnablePaper
+     ,pageSetupDialogDataEnablePrinter
+     ,pageSetupDialogDataGetDefaultInfo
+     ,pageSetupDialogDataGetDefaultMinMargins
+     ,pageSetupDialogDataGetEnableHelp
+     ,pageSetupDialogDataGetEnableMargins
+     ,pageSetupDialogDataGetEnableOrientation
+     ,pageSetupDialogDataGetEnablePaper
+     ,pageSetupDialogDataGetEnablePrinter
+     ,pageSetupDialogDataGetMarginBottomRight
+     ,pageSetupDialogDataGetMarginTopLeft
+     ,pageSetupDialogDataGetMinMarginBottomRight
+     ,pageSetupDialogDataGetMinMarginTopLeft
+     ,pageSetupDialogDataGetPaperId
+     ,pageSetupDialogDataGetPaperSize
+     ,pageSetupDialogDataGetPrintData
+     ,pageSetupDialogDataSetDefaultInfo
+     ,pageSetupDialogDataSetDefaultMinMargins
+     ,pageSetupDialogDataSetMarginBottomRight
+     ,pageSetupDialogDataSetMarginTopLeft
+     ,pageSetupDialogDataSetMinMarginBottomRight
+     ,pageSetupDialogDataSetMinMarginTopLeft
+     ,pageSetupDialogDataSetPaperId
+     ,pageSetupDialogDataSetPaperSize
+     ,pageSetupDialogDataSetPaperSizeId
+     ,pageSetupDialogDataSetPrintData
+     -- ** PaintDC
+     ,paintDCCreate
+     ,paintDCDelete
+     -- ** Palette
+     ,paletteAssign
+     ,paletteCreateDefault
+     ,paletteCreateRGB
+     ,paletteDelete
+     ,paletteGetPixel
+     ,paletteGetRGB
+     ,paletteIsEqual
+     ,paletteIsOk
+     -- ** PaletteChangedEvent
+     ,paletteChangedEventCopyObject
+     ,paletteChangedEventGetChangedWindow
+     ,paletteChangedEventSetChangedWindow
+     -- ** Panel
+     ,panelCreate
+     ,panelInitDialog
+     ,panelSetFocus
+     -- ** Pen
+     ,penAssign
+     ,penCreateDefault
+     ,penCreateFromBitmap
+     ,penCreateFromColour
+     ,penCreateFromStock
+     ,penDelete
+     ,penGetCap
+     ,penGetColour
+     ,penGetDashes
+     ,penGetJoin
+     ,penGetStipple
+     ,penGetStyle
+     ,penGetWidth
+     ,penIsEqual
+     ,penIsOk
+     ,penIsStatic
+     ,penSafeDelete
+     ,penSetCap
+     ,penSetColour
+     ,penSetColourSingle
+     ,penSetDashes
+     ,penSetJoin
+     ,penSetStipple
+     ,penSetStyle
+     ,penSetWidth
+     -- ** PostScriptDC
+     ,postScriptDCCreate
+     ,postScriptDCDelete
+     ,postScriptDCGetResolution
+     ,postScriptDCSetResolution
+     -- ** PostScriptPrintNativeData
+     ,postScriptPrintNativeDataCreate
+     ,postScriptPrintNativeDataDelete
+     -- ** PreviewCanvas
+     ,previewCanvasCreate
+     -- ** PreviewFrame
+     ,previewFrameCreate
+     ,previewFrameDelete
+     ,previewFrameInitialize
+     -- ** PrintData
+     ,printDataAssign
+     ,printDataCreate
+     ,printDataDelete
+     ,printDataGetCollate
+     ,printDataGetColour
+     ,printDataGetDuplex
+     ,printDataGetFilename
+     ,printDataGetFontMetricPath
+     ,printDataGetNoCopies
+     ,printDataGetOrientation
+     ,printDataGetPaperId
+     ,printDataGetPaperSize
+     ,printDataGetPreviewCommand
+     ,printDataGetPrintMode
+     ,printDataGetPrinterCommand
+     ,printDataGetPrinterName
+     ,printDataGetPrinterOptions
+     ,printDataGetPrinterScaleX
+     ,printDataGetPrinterScaleY
+     ,printDataGetPrinterTranslateX
+     ,printDataGetPrinterTranslateY
+     ,printDataGetQuality
+     ,printDataSetCollate
+     ,printDataSetColour
+     ,printDataSetDuplex
+     ,printDataSetFilename
+     ,printDataSetFontMetricPath
+     ,printDataSetNoCopies
+     ,printDataSetOrientation
+     ,printDataSetPaperId
+     ,printDataSetPaperSize
+     ,printDataSetPreviewCommand
+     ,printDataSetPrintMode
+     ,printDataSetPrinterCommand
+     ,printDataSetPrinterName
+     ,printDataSetPrinterOptions
+     ,printDataSetPrinterScaleX
+     ,printDataSetPrinterScaleY
+     ,printDataSetPrinterScaling
+     ,printDataSetPrinterTranslateX
+     ,printDataSetPrinterTranslateY
+     ,printDataSetPrinterTranslation
+     ,printDataSetQuality
+     -- ** PrintDialog
+     ,printDialogCreate
+     ,printDialogGetPrintDC
+     ,printDialogGetPrintData
+     ,printDialogGetPrintDialogData
+     -- ** PrintDialogData
+     ,printDialogDataAssign
+     ,printDialogDataAssignData
+     ,printDialogDataCreateDefault
+     ,printDialogDataCreateFromData
+     ,printDialogDataDelete
+     ,printDialogDataEnableHelp
+     ,printDialogDataEnablePageNumbers
+     ,printDialogDataEnablePrintToFile
+     ,printDialogDataEnableSelection
+     ,printDialogDataGetAllPages
+     ,printDialogDataGetCollate
+     ,printDialogDataGetEnableHelp
+     ,printDialogDataGetEnablePageNumbers
+     ,printDialogDataGetEnablePrintToFile
+     ,printDialogDataGetEnableSelection
+     ,printDialogDataGetFromPage
+     ,printDialogDataGetMaxPage
+     ,printDialogDataGetMinPage
+     ,printDialogDataGetNoCopies
+     ,printDialogDataGetPrintData
+     ,printDialogDataGetPrintToFile
+     ,printDialogDataGetSelection
+     ,printDialogDataGetToPage
+     ,printDialogDataSetAllPages
+     ,printDialogDataSetCollate
+     ,printDialogDataSetFromPage
+     ,printDialogDataSetMaxPage
+     ,printDialogDataSetMinPage
+     ,printDialogDataSetNoCopies
+     ,printDialogDataSetPrintData
+     ,printDialogDataSetPrintToFile
+     ,printDialogDataSetSelection
+     ,printDialogDataSetToPage
+     -- ** PrintPreview
+     ,printPreviewCreateFromData
+     ,printPreviewCreateFromDialogData
+     ,printPreviewDelete
+     ,printPreviewDetermineScaling
+     ,printPreviewDrawBlankPage
+     ,printPreviewGetCanvas
+     ,printPreviewGetCurrentPage
+     ,printPreviewGetFrame
+     ,printPreviewGetMaxPage
+     ,printPreviewGetMinPage
+     ,printPreviewGetPrintDialogData
+     ,printPreviewGetPrintout
+     ,printPreviewGetPrintoutForPrinting
+     ,printPreviewGetZoom
+     ,printPreviewIsOk
+     ,printPreviewPaintPage
+     ,printPreviewPrint
+     ,printPreviewRenderPage
+     ,printPreviewSetCanvas
+     ,printPreviewSetCurrentPage
+     ,printPreviewSetFrame
+     ,printPreviewSetOk
+     ,printPreviewSetPrintout
+     ,printPreviewSetZoom
+     -- ** Printer
+     ,printerCreate
+     ,printerCreateAbortWindow
+     ,printerDelete
+     ,printerGetAbort
+     ,printerGetLastError
+     ,printerGetPrintDialogData
+     ,printerPrint
+     ,printerPrintDialog
+     ,printerReportError
+     ,printerSetup
+     -- ** PrinterDC
+     ,printerDCCreate
+     ,printerDCDelete
+     ,printerDCGetPaperRect
+     -- ** Printout
+     ,printoutGetDC
+     ,printoutGetPPIPrinter
+     ,printoutGetPPIScreen
+     ,printoutGetPageSizeMM
+     ,printoutGetPageSizePixels
+     ,printoutGetTitle
+     ,printoutIsPreview
+     ,printoutSetDC
+     ,printoutSetPPIPrinter
+     ,printoutSetPPIScreen
+     ,printoutSetPageSizeMM
+     ,printoutSetPageSizePixels
+     -- ** Process
+     ,processCloseOutput
+     ,processCreateDefault
+     ,processCreateRedirect
+     ,processDelete
+     ,processDetach
+     ,processGetErrorStream
+     ,processGetInputStream
+     ,processGetOutputStream
+     ,processIsErrorAvailable
+     ,processIsInputAvailable
+     ,processIsInputOpened
+     ,processIsRedirected
+     ,processOpen
+     ,processRedirect
+     -- ** ProcessEvent
+     ,processEventGetExitCode
+     ,processEventGetPid
+     -- ** ProgressDialog
+     ,progressDialogCreate
+     ,progressDialogResume
+     ,progressDialogUpdate
+     ,progressDialogUpdateWithMessage
+     -- ** PropertyCategory
+     ,propertyCategoryCreate
+     -- ** PropertyGrid
+     ,propertyGridAppend
+     ,propertyGridCreate
+     ,propertyGridDisableProperty
+     -- ** PropertyGridEvent
+     ,propertyGridEventGetProperty
+     ,propertyGridEventHasProperty
+     -- ** QueryLayoutInfoEvent
+     ,queryLayoutInfoEventCreate
+     ,queryLayoutInfoEventGetAlignment
+     ,queryLayoutInfoEventGetFlags
+     ,queryLayoutInfoEventGetOrientation
+     ,queryLayoutInfoEventGetRequestedLength
+     ,queryLayoutInfoEventGetSize
+     ,queryLayoutInfoEventSetAlignment
+     ,queryLayoutInfoEventSetFlags
+     ,queryLayoutInfoEventSetOrientation
+     ,queryLayoutInfoEventSetRequestedLength
+     ,queryLayoutInfoEventSetSize
+     -- ** QueryNewPaletteEvent
+     ,queryNewPaletteEventCopyObject
+     ,queryNewPaletteEventGetPaletteRealized
+     ,queryNewPaletteEventSetPaletteRealized
+     -- ** RadioBox
+     ,radioBoxCreate
+     ,radioBoxEnableItem
+     ,radioBoxFindString
+     ,radioBoxGetItemLabel
+     ,radioBoxGetNumberOfRowsOrCols
+     ,radioBoxGetSelection
+     ,radioBoxGetStringSelection
+     ,radioBoxNumber
+     ,radioBoxSetItemBitmap
+     ,radioBoxSetItemLabel
+     ,radioBoxSetNumberOfRowsOrCols
+     ,radioBoxSetSelection
+     ,radioBoxSetStringSelection
+     ,radioBoxShowItem
+     -- ** RadioButton
+     ,radioButtonCreate
+     ,radioButtonGetValue
+     ,radioButtonSetValue
+     -- ** Region
+     ,regionAssign
+     ,regionClear
+     ,regionContainsPoint
+     ,regionContainsRect
+     ,regionCreateDefault
+     ,regionCreateFromRect
+     ,regionDelete
+     ,regionGetBox
+     ,regionIntersectRect
+     ,regionIntersectRegion
+     ,regionIsEmpty
+     ,regionSubtractRect
+     ,regionSubtractRegion
+     ,regionUnionRect
+     ,regionUnionRegion
+     ,regionXorRect
+     ,regionXorRegion
+     -- ** RegionIterator
+     ,regionIteratorCreate
+     ,regionIteratorCreateFromRegion
+     ,regionIteratorDelete
+     ,regionIteratorGetHeight
+     ,regionIteratorGetWidth
+     ,regionIteratorGetX
+     ,regionIteratorGetY
+     ,regionIteratorHaveRects
+     ,regionIteratorNext
+     ,regionIteratorReset
+     ,regionIteratorResetToRegion
+     -- ** SVGFileDC
+     ,svgFileDCCreate
+     ,svgFileDCCreateWithSize
+     ,svgFileDCCreateWithSizeAndResolution
+     ,svgFileDCDelete
+     -- ** SashEvent
+     ,sashEventCreate
+     ,sashEventGetDragRect
+     ,sashEventGetDragStatus
+     ,sashEventGetEdge
+     ,sashEventSetDragRect
+     ,sashEventSetDragStatus
+     ,sashEventSetEdge
+     -- ** SashLayoutWindow
+     ,sashLayoutWindowCreate
+     ,sashLayoutWindowGetAlignment
+     ,sashLayoutWindowGetOrientation
+     ,sashLayoutWindowSetAlignment
+     ,sashLayoutWindowSetDefaultSize
+     ,sashLayoutWindowSetOrientation
+     -- ** SashWindow
+     ,sashWindowCreate
+     ,sashWindowGetDefaultBorderSize
+     ,sashWindowGetEdgeMargin
+     ,sashWindowGetExtraBorderSize
+     ,sashWindowGetMaximumSizeX
+     ,sashWindowGetMaximumSizeY
+     ,sashWindowGetMinimumSizeX
+     ,sashWindowGetMinimumSizeY
+     ,sashWindowGetSashVisible
+     ,sashWindowHasBorder
+     ,sashWindowSetDefaultBorderSize
+     ,sashWindowSetExtraBorderSize
+     ,sashWindowSetMaximumSizeX
+     ,sashWindowSetMaximumSizeY
+     ,sashWindowSetMinimumSizeX
+     ,sashWindowSetMinimumSizeY
+     ,sashWindowSetSashBorder
+     ,sashWindowSetSashVisible
+     -- ** ScreenDC
+     ,screenDCCreate
+     ,screenDCDelete
+     ,screenDCEndDrawingOnTop
+     ,screenDCStartDrawingOnTop
+     ,screenDCStartDrawingOnTopOfWin
+     -- ** ScrollBar
+     ,scrollBarCreate
+     ,scrollBarGetPageSize
+     ,scrollBarGetRange
+     ,scrollBarGetThumbPosition
+     ,scrollBarGetThumbSize
+     ,scrollBarSetScrollbar
+     ,scrollBarSetThumbPosition
+     -- ** ScrollEvent
+     ,scrollEventGetOrientation
+     ,scrollEventGetPosition
+     -- ** ScrollWinEvent
+     ,scrollWinEventGetOrientation
+     ,scrollWinEventGetPosition
+     ,scrollWinEventSetOrientation
+     ,scrollWinEventSetPosition
+     -- ** ScrolledWindow
+     ,scrolledWindowAdjustScrollbars
+     ,scrolledWindowCalcScrolledPosition
+     ,scrolledWindowCalcUnscrolledPosition
+     ,scrolledWindowCreate
+     ,scrolledWindowEnableScrolling
+     ,scrolledWindowGetScaleX
+     ,scrolledWindowGetScaleY
+     ,scrolledWindowGetScrollPageSize
+     ,scrolledWindowGetScrollPixelsPerUnit
+     ,scrolledWindowGetTargetWindow
+     ,scrolledWindowGetViewStart
+     ,scrolledWindowGetVirtualSize
+     ,scrolledWindowOnDraw
+     ,scrolledWindowPrepareDC
+     ,scrolledWindowScroll
+     ,scrolledWindowSetScale
+     ,scrolledWindowSetScrollPageSize
+     ,scrolledWindowSetScrollRate
+     ,scrolledWindowSetScrollbars
+     ,scrolledWindowSetTargetWindow
+     ,scrolledWindowShowScrollbars
+     ,scrolledWindowViewStart
+     -- ** SetCursorEvent
+     ,setCursorEventGetCursor
+     ,setCursorEventGetX
+     ,setCursorEventGetY
+     ,setCursorEventHasCursor
+     ,setCursorEventSetCursor
+     -- ** ShowEvent
+     ,showEventCopyObject
+     ,showEventIsShown
+     ,showEventSetShow
+     -- ** SimpleHelpProvider
+     ,simpleHelpProviderCreate
+     -- ** SingleInstanceChecker
+     ,singleInstanceCheckerCreate
+     ,singleInstanceCheckerCreateDefault
+     ,singleInstanceCheckerDelete
+     ,singleInstanceCheckerIsAnotherRunning
+     -- ** SizeEvent
+     ,sizeEventCopyObject
+     ,sizeEventGetSize
+     -- ** Sizer
+     ,sizerAdd
+     ,sizerAddSizer
+     ,sizerAddSpacer
+     ,sizerAddStretchSpacer
+     ,sizerAddWindow
+     ,sizerCalcMin
+     ,sizerClear
+     ,sizerDetach
+     ,sizerDetachSizer
+     ,sizerDetachWindow
+     ,sizerFit
+     ,sizerFitInside
+     ,sizerGetChildren
+     ,sizerGetContainingWindow
+     ,sizerGetItem
+     ,sizerGetItemSizer
+     ,sizerGetItemWindow
+     ,sizerGetMinSize
+     ,sizerGetPosition
+     ,sizerGetSize
+     ,sizerHide
+     ,sizerHideSizer
+     ,sizerHideWindow
+     ,sizerInsert
+     ,sizerInsertSizer
+     ,sizerInsertSpacer
+     ,sizerInsertStretchSpacer
+     ,sizerInsertWindow
+     ,sizerIsShown
+     ,sizerIsShownSizer
+     ,sizerIsShownWindow
+     ,sizerLayout
+     ,sizerPrepend
+     ,sizerPrependSizer
+     ,sizerPrependSpacer
+     ,sizerPrependStretchSpacer
+     ,sizerPrependWindow
+     ,sizerRecalcSizes
+     ,sizerReplace
+     ,sizerReplaceSizer
+     ,sizerReplaceWindow
+     ,sizerSetDimension
+     ,sizerSetItemMinSize
+     ,sizerSetItemMinSizeSizer
+     ,sizerSetItemMinSizeWindow
+     ,sizerSetMinSize
+     ,sizerSetSizeHints
+     ,sizerShow
+     ,sizerShowSizer
+     ,sizerShowWindow
+     -- ** SizerItem
+     ,sizerItemAssignSizer
+     ,sizerItemAssignSpacer
+     ,sizerItemAssignWindow
+     ,sizerItemCalcMin
+     ,sizerItemCreate
+     ,sizerItemCreateInSizer
+     ,sizerItemCreateInWindow
+     ,sizerItemDelete
+     ,sizerItemDeleteWindows
+     ,sizerItemDetachSizer
+     ,sizerItemGetBorder
+     ,sizerItemGetFlag
+     ,sizerItemGetMinSize
+     ,sizerItemGetPosition
+     ,sizerItemGetProportion
+     ,sizerItemGetRatio
+     ,sizerItemGetRect
+     ,sizerItemGetSize
+     ,sizerItemGetSizer
+     ,sizerItemGetSpacer
+     ,sizerItemGetUserData
+     ,sizerItemGetWindow
+     ,sizerItemIsShown
+     ,sizerItemIsSizer
+     ,sizerItemIsSpacer
+     ,sizerItemIsWindow
+     ,sizerItemSetBorder
+     ,sizerItemSetDimension
+     ,sizerItemSetFlag
+     ,sizerItemSetFloatRatio
+     ,sizerItemSetInitSize
+     ,sizerItemSetProportion
+     ,sizerItemSetRatio
+     ,sizerItemShow
+     -- ** Slider
+     ,sliderClearSel
+     ,sliderClearTicks
+     ,sliderCreate
+     ,sliderGetLineSize
+     ,sliderGetMax
+     ,sliderGetMin
+     ,sliderGetPageSize
+     ,sliderGetSelEnd
+     ,sliderGetSelStart
+     ,sliderGetThumbLength
+     ,sliderGetTickFreq
+     ,sliderGetValue
+     ,sliderSetLineSize
+     ,sliderSetPageSize
+     ,sliderSetRange
+     ,sliderSetSelection
+     ,sliderSetThumbLength
+     ,sliderSetTick
+     ,sliderSetValue
+     -- ** Sound
+     ,soundCreate
+     ,soundDelete
+     ,soundIsOk
+     ,soundPlay
+     ,soundStop
+     -- ** SpinButton
+     ,spinButtonCreate
+     ,spinButtonGetMax
+     ,spinButtonGetMin
+     ,spinButtonGetValue
+     ,spinButtonSetRange
+     ,spinButtonSetValue
+     -- ** SpinCtrl
+     ,spinCtrlCreate
+     ,spinCtrlGetMax
+     ,spinCtrlGetMin
+     ,spinCtrlGetValue
+     ,spinCtrlSetRange
+     ,spinCtrlSetValue
+     -- ** SpinEvent
+     ,spinEventGetPosition
+     ,spinEventSetPosition
+     -- ** SplashScreen
+     ,splashScreenCreate
+     ,splashScreenGetSplashStyle
+     ,splashScreenGetTimeout
+     -- ** SplitterWindow
+     ,splitterWindowCreate
+     ,splitterWindowGetBorderSize
+     ,splitterWindowGetMinimumPaneSize
+     ,splitterWindowGetSashGravity
+     ,splitterWindowGetSashPosition
+     ,splitterWindowGetSashSize
+     ,splitterWindowGetSplitMode
+     ,splitterWindowGetWindow1
+     ,splitterWindowGetWindow2
+     ,splitterWindowInitialize
+     ,splitterWindowIsSplit
+     ,splitterWindowReplaceWindow
+     ,splitterWindowSetBorderSize
+     ,splitterWindowSetMinimumPaneSize
+     ,splitterWindowSetSashGravity
+     ,splitterWindowSetSashPosition
+     ,splitterWindowSetSplitMode
+     ,splitterWindowSplitHorizontally
+     ,splitterWindowSplitVertically
+     ,splitterWindowUnsplit
+     -- ** StaticBitmap
+     ,staticBitmapCreate
+     ,staticBitmapDelete
+     ,staticBitmapGetBitmap
+     ,staticBitmapGetIcon
+     ,staticBitmapSetBitmap
+     ,staticBitmapSetIcon
+     -- ** StaticBox
+     ,staticBoxCreate
+     -- ** StaticBoxSizer
+     ,staticBoxSizerCalcMin
+     ,staticBoxSizerCreate
+     ,staticBoxSizerGetStaticBox
+     ,staticBoxSizerRecalcSizes
+     -- ** StaticLine
+     ,staticLineCreate
+     ,staticLineGetDefaultSize
+     ,staticLineIsVertical
+     -- ** StaticText
+     ,staticTextCreate
+     -- ** StatusBar
+     ,statusBarCreate
+     ,statusBarGetBorderX
+     ,statusBarGetBorderY
+     ,statusBarGetFieldsCount
+     ,statusBarGetStatusText
+     ,statusBarSetFieldsCount
+     ,statusBarSetMinHeight
+     ,statusBarSetStatusText
+     ,statusBarSetStatusWidths
+     -- ** StopWatch
+     ,stopWatchCreate
+     ,stopWatchDelete
+     ,stopWatchPause
+     ,stopWatchResume
+     ,stopWatchStart
+     ,stopWatchTime
+     -- ** StreamBase
+     ,streamBaseDelete
+     ,streamBaseGetLastError
+     ,streamBaseGetSize
+     ,streamBaseIsOk
+     -- ** StringProperty
+     ,stringPropertyCreate
+     -- ** StyledTextCtrl
+     ,styledTextCtrlAddRefDocument
+     ,styledTextCtrlAddStyledText
+     ,styledTextCtrlAddText
+     ,styledTextCtrlAppendText
+     ,styledTextCtrlAutoCompActive
+     ,styledTextCtrlAutoCompCancel
+     ,styledTextCtrlAutoCompComplete
+     ,styledTextCtrlAutoCompGetAutoHide
+     ,styledTextCtrlAutoCompGetCancelAtStart
+     ,styledTextCtrlAutoCompGetChooseSingle
+     ,styledTextCtrlAutoCompGetDropRestOfWord
+     ,styledTextCtrlAutoCompGetIgnoreCase
+     ,styledTextCtrlAutoCompGetSeparator
+     ,styledTextCtrlAutoCompGetTypeSeparator
+     ,styledTextCtrlAutoCompPosStart
+     ,styledTextCtrlAutoCompSelect
+     ,styledTextCtrlAutoCompSetAutoHide
+     ,styledTextCtrlAutoCompSetCancelAtStart
+     ,styledTextCtrlAutoCompSetChooseSingle
+     ,styledTextCtrlAutoCompSetDropRestOfWord
+     ,styledTextCtrlAutoCompSetFillUps
+     ,styledTextCtrlAutoCompSetIgnoreCase
+     ,styledTextCtrlAutoCompSetSeparator
+     ,styledTextCtrlAutoCompSetTypeSeparator
+     ,styledTextCtrlAutoCompShow
+     ,styledTextCtrlAutoCompStops
+     ,styledTextCtrlBeginUndoAction
+     ,styledTextCtrlBraceBadLight
+     ,styledTextCtrlBraceHighlight
+     ,styledTextCtrlBraceMatch
+     ,styledTextCtrlCallTipActive
+     ,styledTextCtrlCallTipCancel
+     ,styledTextCtrlCallTipPosAtStart
+     ,styledTextCtrlCallTipSetBackground
+     ,styledTextCtrlCallTipSetForeground
+     ,styledTextCtrlCallTipSetForegroundHighlight
+     ,styledTextCtrlCallTipSetHighlight
+     ,styledTextCtrlCallTipShow
+     ,styledTextCtrlCanPaste
+     ,styledTextCtrlCanRedo
+     ,styledTextCtrlCanUndo
+     ,styledTextCtrlChooseCaretX
+     ,styledTextCtrlClear
+     ,styledTextCtrlClearAll
+     ,styledTextCtrlClearDocumentStyle
+     ,styledTextCtrlClearRegisteredImages
+     ,styledTextCtrlCmdKeyAssign
+     ,styledTextCtrlCmdKeyClear
+     ,styledTextCtrlCmdKeyClearAll
+     ,styledTextCtrlCmdKeyExecute
+     ,styledTextCtrlColourise
+     ,styledTextCtrlConvertEOLs
+     ,styledTextCtrlCopy
+     ,styledTextCtrlCopyRange
+     ,styledTextCtrlCopyText
+     ,styledTextCtrlCreate
+     ,styledTextCtrlCreateDocument
+     ,styledTextCtrlCut
+     ,styledTextCtrlDelLineLeft
+     ,styledTextCtrlDelLineRight
+     ,styledTextCtrlDocLineFromVisible
+     ,styledTextCtrlEmptyUndoBuffer
+     ,styledTextCtrlEndUndoAction
+     ,styledTextCtrlEnsureCaretVisible
+     ,styledTextCtrlEnsureVisible
+     ,styledTextCtrlEnsureVisibleEnforcePolicy
+     ,styledTextCtrlFindText
+     ,styledTextCtrlFormatRange
+     ,styledTextCtrlGetAnchor
+     ,styledTextCtrlGetBackSpaceUnIndents
+     ,styledTextCtrlGetBufferedDraw
+     ,styledTextCtrlGetCaretForeground
+     ,styledTextCtrlGetCaretLineBackground
+     ,styledTextCtrlGetCaretLineVisible
+     ,styledTextCtrlGetCaretPeriod
+     ,styledTextCtrlGetCaretWidth
+     ,styledTextCtrlGetCharAt
+     ,styledTextCtrlGetCodePage
+     ,styledTextCtrlGetColumn
+     ,styledTextCtrlGetControlCharSymbol
+     ,styledTextCtrlGetCurrentLine
+     ,styledTextCtrlGetCurrentPos
+     ,styledTextCtrlGetDocPointer
+     ,styledTextCtrlGetEOLMode
+     ,styledTextCtrlGetEdgeColour
+     ,styledTextCtrlGetEdgeColumn
+     ,styledTextCtrlGetEdgeMode
+     ,styledTextCtrlGetEndAtLastLine
+     ,styledTextCtrlGetEndStyled
+     ,styledTextCtrlGetFirstVisibleLine
+     ,styledTextCtrlGetFoldExpanded
+     ,styledTextCtrlGetFoldLevel
+     ,styledTextCtrlGetFoldParent
+     ,styledTextCtrlGetHighlightGuide
+     ,styledTextCtrlGetIndent
+     ,styledTextCtrlGetIndentationGuides
+     ,styledTextCtrlGetLastChild
+     ,styledTextCtrlGetLastKeydownProcessed
+     ,styledTextCtrlGetLayoutCache
+     ,styledTextCtrlGetLength
+     ,styledTextCtrlGetLexer
+     ,styledTextCtrlGetLine
+     ,styledTextCtrlGetLineCount
+     ,styledTextCtrlGetLineEndPosition
+     ,styledTextCtrlGetLineIndentPosition
+     ,styledTextCtrlGetLineIndentation
+     ,styledTextCtrlGetLineState
+     ,styledTextCtrlGetLineVisible
+     ,styledTextCtrlGetMarginLeft
+     ,styledTextCtrlGetMarginMask
+     ,styledTextCtrlGetMarginRight
+     ,styledTextCtrlGetMarginSensitive
+     ,styledTextCtrlGetMarginType
+     ,styledTextCtrlGetMarginWidth
+     ,styledTextCtrlGetMaxLineState
+     ,styledTextCtrlGetModEventMask
+     ,styledTextCtrlGetModify
+     ,styledTextCtrlGetMouseDownCaptures
+     ,styledTextCtrlGetMouseDwellTime
+     ,styledTextCtrlGetOvertype
+     ,styledTextCtrlGetPrintColourMode
+     ,styledTextCtrlGetPrintMagnification
+     ,styledTextCtrlGetPrintWrapMode
+     ,styledTextCtrlGetReadOnly
+     ,styledTextCtrlGetSTCCursor
+     ,styledTextCtrlGetSTCFocus
+     ,styledTextCtrlGetScrollWidth
+     ,styledTextCtrlGetSearchFlags
+     ,styledTextCtrlGetSelectedText
+     ,styledTextCtrlGetSelection
+     ,styledTextCtrlGetSelectionEnd
+     ,styledTextCtrlGetSelectionStart
+     ,styledTextCtrlGetStatus
+     ,styledTextCtrlGetStyleAt
+     ,styledTextCtrlGetStyleBits
+     ,styledTextCtrlGetTabIndents
+     ,styledTextCtrlGetTabWidth
+     ,styledTextCtrlGetTargetEnd
+     ,styledTextCtrlGetTargetStart
+     ,styledTextCtrlGetText
+     ,styledTextCtrlGetTextLength
+     ,styledTextCtrlGetTextRange
+     ,styledTextCtrlGetTwoPhaseDraw
+     ,styledTextCtrlGetUndoCollection
+     ,styledTextCtrlGetUseHorizontalScrollBar
+     ,styledTextCtrlGetUseTabs
+     ,styledTextCtrlGetUseVerticalScrollBar
+     ,styledTextCtrlGetViewEOL
+     ,styledTextCtrlGetViewWhiteSpace
+     ,styledTextCtrlGetWrapMode
+     ,styledTextCtrlGetXOffset
+     ,styledTextCtrlGetZoom
+     ,styledTextCtrlGotoLine
+     ,styledTextCtrlGotoPos
+     ,styledTextCtrlHideLines
+     ,styledTextCtrlHideSelection
+     ,styledTextCtrlHomeDisplay
+     ,styledTextCtrlHomeDisplayExtend
+     ,styledTextCtrlIndicatorGetForeground
+     ,styledTextCtrlIndicatorGetStyle
+     ,styledTextCtrlIndicatorSetForeground
+     ,styledTextCtrlIndicatorSetStyle
+     ,styledTextCtrlInsertText
+     ,styledTextCtrlLineCopy
+     ,styledTextCtrlLineDuplicate
+     ,styledTextCtrlLineEndDisplay
+     ,styledTextCtrlLineEndDisplayExtend
+     ,styledTextCtrlLineFromPosition
+     ,styledTextCtrlLineLength
+     ,styledTextCtrlLineScroll
+     ,styledTextCtrlLinesJoin
+     ,styledTextCtrlLinesOnScreen
+     ,styledTextCtrlLinesSplit
+     ,styledTextCtrlLoadFile
+     ,styledTextCtrlMarkerAdd
+     ,styledTextCtrlMarkerDefine
+     ,styledTextCtrlMarkerDefineBitmap
+     ,styledTextCtrlMarkerDelete
+     ,styledTextCtrlMarkerDeleteAll
+     ,styledTextCtrlMarkerDeleteHandle
+     ,styledTextCtrlMarkerGet
+     ,styledTextCtrlMarkerLineFromHandle
+     ,styledTextCtrlMarkerNext
+     ,styledTextCtrlMarkerPrevious
+     ,styledTextCtrlMarkerSetBackground
+     ,styledTextCtrlMarkerSetForeground
+     ,styledTextCtrlMoveCaretInsideView
+     ,styledTextCtrlPaste
+     ,styledTextCtrlPointFromPosition
+     ,styledTextCtrlPositionAfter
+     ,styledTextCtrlPositionBefore
+     ,styledTextCtrlPositionFromLine
+     ,styledTextCtrlPositionFromPoint
+     ,styledTextCtrlPositionFromPointClose
+     ,styledTextCtrlRedo
+     ,styledTextCtrlRegisterImage
+     ,styledTextCtrlReleaseDocument
+     ,styledTextCtrlReplaceSelection
+     ,styledTextCtrlReplaceTarget
+     ,styledTextCtrlReplaceTargetRE
+     ,styledTextCtrlSaveFile
+     ,styledTextCtrlScrollToColumn
+     ,styledTextCtrlScrollToLine
+     ,styledTextCtrlSearchAnchor
+     ,styledTextCtrlSearchInTarget
+     ,styledTextCtrlSearchNext
+     ,styledTextCtrlSearchPrev
+     ,styledTextCtrlSelectAll
+     ,styledTextCtrlSelectionIsRectangle
+     ,styledTextCtrlSetAnchor
+     ,styledTextCtrlSetBackSpaceUnIndents
+     ,styledTextCtrlSetBufferedDraw
+     ,styledTextCtrlSetCaretForeground
+     ,styledTextCtrlSetCaretLineBackground
+     ,styledTextCtrlSetCaretLineVisible
+     ,styledTextCtrlSetCaretPeriod
+     ,styledTextCtrlSetCaretWidth
+     ,styledTextCtrlSetCodePage
+     ,styledTextCtrlSetControlCharSymbol
+     ,styledTextCtrlSetCurrentPos
+     ,styledTextCtrlSetDocPointer
+     ,styledTextCtrlSetEOLMode
+     ,styledTextCtrlSetEdgeColour
+     ,styledTextCtrlSetEdgeColumn
+     ,styledTextCtrlSetEdgeMode
+     ,styledTextCtrlSetEndAtLastLine
+     ,styledTextCtrlSetFoldExpanded
+     ,styledTextCtrlSetFoldFlags
+     ,styledTextCtrlSetFoldLevel
+     ,styledTextCtrlSetFoldMarginColour
+     ,styledTextCtrlSetFoldMarginHiColour
+     ,styledTextCtrlSetHScrollBar
+     ,styledTextCtrlSetHighlightGuide
+     ,styledTextCtrlSetHotspotActiveBackground
+     ,styledTextCtrlSetHotspotActiveForeground
+     ,styledTextCtrlSetHotspotActiveUnderline
+     ,styledTextCtrlSetIndent
+     ,styledTextCtrlSetIndentationGuides
+     ,styledTextCtrlSetKeyWords
+     ,styledTextCtrlSetLastKeydownProcessed
+     ,styledTextCtrlSetLayoutCache
+     ,styledTextCtrlSetLexer
+     ,styledTextCtrlSetLexerLanguage
+     ,styledTextCtrlSetLineIndentation
+     ,styledTextCtrlSetLineState
+     ,styledTextCtrlSetMarginLeft
+     ,styledTextCtrlSetMarginMask
+     ,styledTextCtrlSetMarginRight
+     ,styledTextCtrlSetMarginSensitive
+     ,styledTextCtrlSetMarginType
+     ,styledTextCtrlSetMarginWidth
+     ,styledTextCtrlSetMargins
+     ,styledTextCtrlSetModEventMask
+     ,styledTextCtrlSetMouseDownCaptures
+     ,styledTextCtrlSetMouseDwellTime
+     ,styledTextCtrlSetOvertype
+     ,styledTextCtrlSetPrintColourMode
+     ,styledTextCtrlSetPrintMagnification
+     ,styledTextCtrlSetPrintWrapMode
+     ,styledTextCtrlSetProperty
+     ,styledTextCtrlSetReadOnly
+     ,styledTextCtrlSetSTCCursor
+     ,styledTextCtrlSetSTCFocus
+     ,styledTextCtrlSetSavePoint
+     ,styledTextCtrlSetScrollWidth
+     ,styledTextCtrlSetSearchFlags
+     ,styledTextCtrlSetSelBackground
+     ,styledTextCtrlSetSelForeground
+     ,styledTextCtrlSetSelection
+     ,styledTextCtrlSetSelectionEnd
+     ,styledTextCtrlSetSelectionStart
+     ,styledTextCtrlSetStatus
+     ,styledTextCtrlSetStyleBits
+     ,styledTextCtrlSetStyleBytes
+     ,styledTextCtrlSetStyling
+     ,styledTextCtrlSetTabIndents
+     ,styledTextCtrlSetTabWidth
+     ,styledTextCtrlSetTargetEnd
+     ,styledTextCtrlSetTargetStart
+     ,styledTextCtrlSetText
+     ,styledTextCtrlSetTwoPhaseDraw
+     ,styledTextCtrlSetUndoCollection
+     ,styledTextCtrlSetUseHorizontalScrollBar
+     ,styledTextCtrlSetUseTabs
+     ,styledTextCtrlSetUseVerticalScrollBar
+     ,styledTextCtrlSetVScrollBar
+     ,styledTextCtrlSetViewEOL
+     ,styledTextCtrlSetViewWhiteSpace
+     ,styledTextCtrlSetVisiblePolicy
+     ,styledTextCtrlSetWhitespaceBackground
+     ,styledTextCtrlSetWhitespaceForeground
+     ,styledTextCtrlSetWordChars
+     ,styledTextCtrlSetWrapMode
+     ,styledTextCtrlSetXCaretPolicy
+     ,styledTextCtrlSetXOffset
+     ,styledTextCtrlSetYCaretPolicy
+     ,styledTextCtrlSetZoom
+     ,styledTextCtrlShowLines
+     ,styledTextCtrlStartRecord
+     ,styledTextCtrlStartStyling
+     ,styledTextCtrlStopRecord
+     ,styledTextCtrlStyleClearAll
+     ,styledTextCtrlStyleResetDefault
+     ,styledTextCtrlStyleSetBackground
+     ,styledTextCtrlStyleSetBold
+     ,styledTextCtrlStyleSetCase
+     ,styledTextCtrlStyleSetChangeable
+     ,styledTextCtrlStyleSetCharacterSet
+     ,styledTextCtrlStyleSetEOLFilled
+     ,styledTextCtrlStyleSetFaceName
+     ,styledTextCtrlStyleSetFont
+     ,styledTextCtrlStyleSetFontAttr
+     ,styledTextCtrlStyleSetForeground
+     ,styledTextCtrlStyleSetHotSpot
+     ,styledTextCtrlStyleSetItalic
+     ,styledTextCtrlStyleSetSize
+     ,styledTextCtrlStyleSetSpec
+     ,styledTextCtrlStyleSetUnderline
+     ,styledTextCtrlStyleSetVisible
+     ,styledTextCtrlTargetFromSelection
+     ,styledTextCtrlTextHeight
+     ,styledTextCtrlTextWidth
+     ,styledTextCtrlToggleFold
+     ,styledTextCtrlUndo
+     ,styledTextCtrlUsePopUp
+     ,styledTextCtrlUserListShow
+     ,styledTextCtrlVisibleFromDocLine
+     ,styledTextCtrlWordEndPosition
+     ,styledTextCtrlWordPartLeft
+     ,styledTextCtrlWordPartLeftExtend
+     ,styledTextCtrlWordPartRight
+     ,styledTextCtrlWordPartRightExtend
+     ,styledTextCtrlWordStartPosition
+     -- ** StyledTextEvent
+     ,styledTextEventClone
+     ,styledTextEventGetAlt
+     ,styledTextEventGetControl
+     ,styledTextEventGetDragAllowMove
+     ,styledTextEventGetDragResult
+     ,styledTextEventGetDragText
+     ,styledTextEventGetFoldLevelNow
+     ,styledTextEventGetFoldLevelPrev
+     ,styledTextEventGetKey
+     ,styledTextEventGetLParam
+     ,styledTextEventGetLength
+     ,styledTextEventGetLine
+     ,styledTextEventGetLinesAdded
+     ,styledTextEventGetListType
+     ,styledTextEventGetMargin
+     ,styledTextEventGetMessage
+     ,styledTextEventGetModificationType
+     ,styledTextEventGetModifiers
+     ,styledTextEventGetPosition
+     ,styledTextEventGetShift
+     ,styledTextEventGetText
+     ,styledTextEventGetWParam
+     ,styledTextEventGetX
+     ,styledTextEventGetY
+     ,styledTextEventSetDragAllowMove
+     ,styledTextEventSetDragResult
+     ,styledTextEventSetDragText
+     ,styledTextEventSetFoldLevelNow
+     ,styledTextEventSetFoldLevelPrev
+     ,styledTextEventSetKey
+     ,styledTextEventSetLParam
+     ,styledTextEventSetLength
+     ,styledTextEventSetLine
+     ,styledTextEventSetLinesAdded
+     ,styledTextEventSetListType
+     ,styledTextEventSetMargin
+     ,styledTextEventSetMessage
+     ,styledTextEventSetModificationType
+     ,styledTextEventSetModifiers
+     ,styledTextEventSetPosition
+     ,styledTextEventSetText
+     ,styledTextEventSetWParam
+     ,styledTextEventSetX
+     ,styledTextEventSetY
+     -- ** SystemSettings
+     ,systemSettingsGetColour
+     ,systemSettingsGetFont
+     ,systemSettingsGetMetric
+     ,systemSettingsGetScreenType
+     -- ** TaskBarIcon
+     ,taskBarIconCreate
+     ,taskBarIconDelete
+     ,taskBarIconIsIconInstalled
+     ,taskBarIconIsOk
+     ,taskBarIconPopupMenu
+     ,taskBarIconRemoveIcon
+     ,taskBarIconSetIcon
+     -- ** TextAttr
+     ,textAttrCreate
+     ,textAttrCreateDefault
+     ,textAttrDelete
+     ,textAttrGetBackgroundColour
+     ,textAttrGetFont
+     ,textAttrGetTextColour
+     ,textAttrHasBackgroundColour
+     ,textAttrHasFont
+     ,textAttrHasTextColour
+     ,textAttrIsDefault
+     ,textAttrSetBackgroundColour
+     ,textAttrSetFont
+     ,textAttrSetTextColour
+     -- ** TextCtrl
+     ,textCtrlAppendText
+     ,textCtrlCanCopy
+     ,textCtrlCanCut
+     ,textCtrlCanPaste
+     ,textCtrlCanRedo
+     ,textCtrlCanUndo
+     ,textCtrlChangeValue
+     ,textCtrlClear
+     ,textCtrlCopy
+     ,textCtrlCreate
+     ,textCtrlCut
+     ,textCtrlDiscardEdits
+     ,textCtrlEmulateKeyPress
+     ,textCtrlGetDefaultStyle
+     ,textCtrlGetInsertionPoint
+     ,textCtrlGetLastPosition
+     ,textCtrlGetLineLength
+     ,textCtrlGetLineText
+     ,textCtrlGetNumberOfLines
+     ,textCtrlGetRange
+     ,textCtrlGetSelection
+     ,textCtrlGetStringSelection
+     ,textCtrlGetValue
+     ,textCtrlIsEditable
+     ,textCtrlIsModified
+     ,textCtrlIsMultiLine
+     ,textCtrlIsSingleLine
+     ,textCtrlLoadFile
+     ,textCtrlPaste
+     ,textCtrlPositionToXY
+     ,textCtrlRedo
+     ,textCtrlRemove
+     ,textCtrlReplace
+     ,textCtrlSaveFile
+     ,textCtrlSetDefaultStyle
+     ,textCtrlSetEditable
+     ,textCtrlSetInsertionPoint
+     ,textCtrlSetInsertionPointEnd
+     ,textCtrlSetMaxLength
+     ,textCtrlSetSelection
+     ,textCtrlSetStyle
+     ,textCtrlSetValue
+     ,textCtrlShowPosition
+     ,textCtrlUndo
+     ,textCtrlWriteText
+     ,textCtrlXYToPosition
+     -- ** TextInputStream
+     ,textInputStreamCreate
+     ,textInputStreamDelete
+     ,textInputStreamReadLine
+     -- ** TextOutputStream
+     ,textOutputStreamCreate
+     ,textOutputStreamDelete
+     ,textOutputStreamWriteString
+     -- ** TextValidator
+     ,textValidatorClone
+     ,textValidatorCreate
+     ,textValidatorGetExcludes
+     ,textValidatorGetIncludes
+     ,textValidatorGetStyle
+     ,textValidatorOnChar
+     ,textValidatorSetExcludes
+     ,textValidatorSetIncludes
+     ,textValidatorSetStyle
+     ,textValidatorTransferFromWindow
+     ,textValidatorTransferToWindow
+     -- ** Timer
+     ,timerCreate
+     ,timerDelete
+     ,timerGetInterval
+     ,timerIsOneShot
+     ,timerIsRuning
+     ,timerStart
+     ,timerStop
+     -- ** TimerEvent
+     ,timerEventGetInterval
+     -- ** TimerEx
+     ,timerExConnect
+     ,timerExCreate
+     ,timerExGetClosure
+     -- ** TipWindow
+     ,tipWindowClose
+     ,tipWindowCreate
+     ,tipWindowSetBoundingRect
+     ,tipWindowSetTipWindowPtr
+     -- ** ToggleButton
+     ,toggleButtonCreate
+     ,toggleButtonEnable
+     ,toggleButtonGetValue
+     ,toggleButtonSetLabel
+     ,toggleButtonSetValue
+     -- ** ToolBar
+     ,toolBarAddControl
+     ,toolBarAddSeparator
+     ,toolBarAddTool
+     ,toolBarAddTool2
+     ,toolBarCreate
+     ,toolBarDelete
+     ,toolBarDeleteTool
+     ,toolBarDeleteToolByPos
+     ,toolBarEnableTool
+     ,toolBarGetMargins
+     ,toolBarGetToolBitmapSize
+     ,toolBarGetToolClientData
+     ,toolBarGetToolEnabled
+     ,toolBarGetToolLongHelp
+     ,toolBarGetToolPacking
+     ,toolBarGetToolShortHelp
+     ,toolBarGetToolSize
+     ,toolBarGetToolState
+     ,toolBarInsertControl
+     ,toolBarInsertSeparator
+     ,toolBarRealize
+     ,toolBarRemoveTool
+     ,toolBarSetMargins
+     ,toolBarSetToolBitmapSize
+     ,toolBarSetToolClientData
+     ,toolBarSetToolLongHelp
+     ,toolBarSetToolPacking
+     ,toolBarSetToolSeparation
+     ,toolBarSetToolShortHelp
+     ,toolBarToggleTool
+     -- ** TopLevelWindow
+     ,topLevelWindowEnableCloseButton
+     ,topLevelWindowGetDefaultButton
+     ,topLevelWindowGetDefaultItem
+     ,topLevelWindowGetIcon
+     ,topLevelWindowGetTitle
+     ,topLevelWindowIconize
+     ,topLevelWindowIsActive
+     ,topLevelWindowIsIconized
+     ,topLevelWindowIsMaximized
+     ,topLevelWindowMaximize
+     ,topLevelWindowRequestUserAttention
+     ,topLevelWindowSetDefaultButton
+     ,topLevelWindowSetDefaultItem
+     ,topLevelWindowSetIcon
+     ,topLevelWindowSetIcons
+     ,topLevelWindowSetMaxSize
+     ,topLevelWindowSetMinSize
+     ,topLevelWindowSetTitle
+     -- ** TreeCtrl
+     ,treeCtrlAddRoot
+     ,treeCtrlAppendItem
+     ,treeCtrlAssignImageList
+     ,treeCtrlAssignStateImageList
+     ,treeCtrlCollapse
+     ,treeCtrlCollapseAndReset
+     ,treeCtrlCreate
+     ,treeCtrlCreate2
+     ,treeCtrlDelete
+     ,treeCtrlDeleteAllItems
+     ,treeCtrlDeleteChildren
+     ,treeCtrlEditLabel
+     ,treeCtrlEndEditLabel
+     ,treeCtrlEnsureVisible
+     ,treeCtrlExpand
+     ,treeCtrlGetBoundingRect
+     ,treeCtrlGetChildrenCount
+     ,treeCtrlGetCount
+     ,treeCtrlGetEditControl
+     ,treeCtrlGetFirstChild
+     ,treeCtrlGetFirstVisibleItem
+     ,treeCtrlGetImageList
+     ,treeCtrlGetIndent
+     ,treeCtrlGetItemClientClosure
+     ,treeCtrlGetItemData
+     ,treeCtrlGetItemImage
+     ,treeCtrlGetItemText
+     ,treeCtrlGetLastChild
+     ,treeCtrlGetNextChild
+     ,treeCtrlGetNextSibling
+     ,treeCtrlGetNextVisible
+     ,treeCtrlGetParent
+     ,treeCtrlGetPrevSibling
+     ,treeCtrlGetPrevVisible
+     ,treeCtrlGetRootItem
+     ,treeCtrlGetSelection
+     ,treeCtrlGetSelections
+     ,treeCtrlGetSpacing
+     ,treeCtrlGetStateImageList
+     ,treeCtrlHitTest
+     ,treeCtrlInsertItem
+     ,treeCtrlInsertItem2
+     ,treeCtrlInsertItemByIndex
+     ,treeCtrlInsertItemByIndex2
+     ,treeCtrlIsBold
+     ,treeCtrlIsExpanded
+     ,treeCtrlIsSelected
+     ,treeCtrlIsVisible
+     ,treeCtrlItemHasChildren
+     ,treeCtrlOnCompareItems
+     ,treeCtrlPrependItem
+     ,treeCtrlScrollTo
+     ,treeCtrlSelectItem
+     ,treeCtrlSetImageList
+     ,treeCtrlSetIndent
+     ,treeCtrlSetItemBackgroundColour
+     ,treeCtrlSetItemBold
+     ,treeCtrlSetItemClientClosure
+     ,treeCtrlSetItemData
+     ,treeCtrlSetItemDropHighlight
+     ,treeCtrlSetItemFont
+     ,treeCtrlSetItemHasChildren
+     ,treeCtrlSetItemImage
+     ,treeCtrlSetItemText
+     ,treeCtrlSetItemTextColour
+     ,treeCtrlSetSpacing
+     ,treeCtrlSetStateImageList
+     ,treeCtrlSortChildren
+     ,treeCtrlToggle
+     ,treeCtrlUnselect
+     ,treeCtrlUnselectAll
+     -- ** TreeEvent
+     ,treeEventAllow
+     ,treeEventGetCode
+     ,treeEventGetItem
+     ,treeEventGetKeyEvent
+     ,treeEventGetLabel
+     ,treeEventGetOldItem
+     ,treeEventGetPoint
+     ,treeEventIsEditCancelled
+     -- ** UpdateUIEvent
+     ,updateUIEventCheck
+     ,updateUIEventCopyObject
+     ,updateUIEventEnable
+     ,updateUIEventGetChecked
+     ,updateUIEventGetEnabled
+     ,updateUIEventGetSetChecked
+     ,updateUIEventGetSetEnabled
+     ,updateUIEventGetSetText
+     ,updateUIEventGetText
+     ,updateUIEventSetText
+     -- ** Validator
+     ,validatorCreate
+     ,validatorDelete
+     ,validatorGetWindow
+     ,validatorSetWindow
+     ,validatorSuppressBellOnError
+     ,validatorTransferFromWindow
+     ,validatorTransferToWindow
+     ,validatorValidate
+     -- ** WXCApp
+     ,wxcAppBell
+     ,wxcAppCreateLogTarget
+     ,wxcAppDispatch
+     ,wxcAppDisplaySize
+     ,wxcAppEnableTooltips
+     ,wxcAppEnableTopLevelWindows
+     ,wxcAppExecuteProcess
+     ,wxcAppExit
+     ,wxcAppExitMainLoop
+     ,wxcAppFindWindowById
+     ,wxcAppFindWindowByLabel
+     ,wxcAppFindWindowByName
+     ,wxcAppGetApp
+     ,wxcAppGetAppName
+     ,wxcAppGetClassName
+     ,wxcAppGetExitOnFrameDelete
+     ,wxcAppGetIdleInterval
+     ,wxcAppGetOsDescription
+     ,wxcAppGetOsVersion
+     ,wxcAppGetTopWindow
+     ,wxcAppGetUseBestVisual
+     ,wxcAppGetUserHome
+     ,wxcAppGetUserId
+     ,wxcAppGetUserName
+     ,wxcAppGetVendorName
+     ,wxcAppInitAllImageHandlers
+     ,wxcAppInitializeC
+     ,wxcAppInitialized
+     ,wxcAppIsTerminating
+     ,wxcAppMainLoop
+     ,wxcAppMilliSleep
+     ,wxcAppMousePosition
+     ,wxcAppPending
+     ,wxcAppSafeYield
+     ,wxcAppSetAppName
+     ,wxcAppSetClassName
+     ,wxcAppSetExitOnFrameDelete
+     ,wxcAppSetIdleInterval
+     ,wxcAppSetPrintMode
+     ,wxcAppSetTooltipDelay
+     ,wxcAppSetTopWindow
+     ,wxcAppSetUseBestVisual
+     ,wxcAppSetVendorName
+     ,wxcAppSleep
+     ,wxcAppYield
+     -- ** WXCArtProv
+     ,wxcArtProvCreate
+     ,wxcArtProvRelease
+     -- ** WXCDragDataObject
+     ,wxcDragDataObjectCreate
+     ,wxcDragDataObjectDelete
+     -- ** WXCDropTarget
+     ,wxcDropTargetCreate
+     ,wxcDropTargetDelete
+     ,wxcDropTargetSetOnData
+     ,wxcDropTargetSetOnDragOver
+     ,wxcDropTargetSetOnDrop
+     ,wxcDropTargetSetOnEnter
+     ,wxcDropTargetSetOnLeave
+     -- ** WXCFileDropTarget
+     ,wxcFileDropTargetCreate
+     ,wxcFileDropTargetDelete
+     ,wxcFileDropTargetSetOnData
+     ,wxcFileDropTargetSetOnDragOver
+     ,wxcFileDropTargetSetOnDrop
+     ,wxcFileDropTargetSetOnEnter
+     ,wxcFileDropTargetSetOnLeave
+     -- ** WXCGridTable
+     ,wxcGridTableCreate
+     ,wxcGridTableDelete
+     ,wxcGridTableGetView
+     ,wxcGridTableSendTableMessage
+     -- ** WXCHtmlEvent
+     ,wxcHtmlEventGetHref
+     ,wxcHtmlEventGetHtmlCell
+     ,wxcHtmlEventGetHtmlCellId
+     ,wxcHtmlEventGetLogicalPosition
+     ,wxcHtmlEventGetMouseEvent
+     ,wxcHtmlEventGetTarget
+     -- ** WXCHtmlWindow
+     ,wxcHtmlWindowCreate
+     -- ** WXCLog
+     ,wxcLogAddTraceMask
+     ,wxcLogCreate
+     ,wxcLogDelete
+     ,wxcLogDontCreateOnDemand
+     ,wxcLogEnableLogging
+     ,wxcLogFlush
+     ,wxcLogFlushActive
+     ,wxcLogGetActiveTarget
+     ,wxcLogGetTimestamp
+     ,wxcLogGetVerbose
+     ,wxcLogHasPendingMessages
+     ,wxcLogIsAllowedTraceMask
+     ,wxcLogIsEnabled
+     ,wxcLogOnLog
+     ,wxcLogRemoveTraceMask
+     ,wxcLogResume
+     ,wxcLogSetActiveTarget
+     ,wxcLogSetTimestamp
+     ,wxcLogSetVerbose
+     ,wxcLogSuspend
+     -- ** WXCPreviewControlBar
+     ,wxcPreviewControlBarCreate
+     -- ** WXCPreviewFrame
+     ,wxcPreviewFrameCreate
+     ,wxcPreviewFrameGetControlBar
+     ,wxcPreviewFrameGetPreviewCanvas
+     ,wxcPreviewFrameGetPrintPreview
+     ,wxcPreviewFrameInitialize
+     ,wxcPreviewFrameSetControlBar
+     ,wxcPreviewFrameSetPreviewCanvas
+     ,wxcPreviewFrameSetPrintPreview
+     -- ** WXCPrintEvent
+     ,wxcPrintEventGetContinue
+     ,wxcPrintEventGetEndPage
+     ,wxcPrintEventGetPage
+     ,wxcPrintEventGetPrintout
+     ,wxcPrintEventSetContinue
+     ,wxcPrintEventSetPageLimits
+     -- ** WXCPrintout
+     ,wxcPrintoutCreate
+     ,wxcPrintoutDelete
+     ,wxcPrintoutGetEvtHandler
+     ,wxcPrintoutSetPageLimits
+     -- ** WXCTextDropTarget
+     ,wxcTextDropTargetCreate
+     ,wxcTextDropTargetDelete
+     ,wxcTextDropTargetSetOnData
+     ,wxcTextDropTargetSetOnDragOver
+     ,wxcTextDropTargetSetOnDrop
+     ,wxcTextDropTargetSetOnEnter
+     ,wxcTextDropTargetSetOnLeave
+     -- ** WXCTextValidator
+     ,wxcTextValidatorCreate
+     -- ** WXCTreeItemData
+     ,wxcTreeItemDataCreate
+     ,wxcTreeItemDataGetClientClosure
+     ,wxcTreeItemDataSetClientClosure
+     -- ** Window
+     ,windowAddChild
+     ,windowAddConstraintReference
+     ,windowCaptureMouse
+     ,windowCenter
+     ,windowCenterOnParent
+     ,windowClearBackground
+     ,windowClientToScreen
+     ,windowClose
+     ,windowConvertDialogToPixels
+     ,windowConvertDialogToPixelsEx
+     ,windowConvertPixelsToDialog
+     ,windowConvertPixelsToDialogEx
+     ,windowCreate
+     ,windowDeleteRelatedConstraints
+     ,windowDestroy
+     ,windowDestroyChildren
+     ,windowDisable
+     ,windowDoPhase
+     ,windowEnable
+     ,windowFindFocus
+     ,windowFindWindow
+     ,windowFit
+     ,windowFitInside
+     ,windowFreeze
+     ,windowGetAutoLayout
+     ,windowGetBackgroundColour
+     ,windowGetBestSize
+     ,windowGetCaret
+     ,windowGetCharHeight
+     ,windowGetCharWidth
+     ,windowGetChildren
+     ,windowGetClientData
+     ,windowGetClientSize
+     ,windowGetClientSizeConstraint
+     ,windowGetConstraints
+     ,windowGetConstraintsInvolvedIn
+     ,windowGetCursor
+     ,windowGetDropTarget
+     ,windowGetEffectiveMinSize
+     ,windowGetEventHandler
+     ,windowGetFont
+     ,windowGetForegroundColour
+     ,windowGetHandle
+     ,windowGetId
+     ,windowGetLabel
+     ,windowGetLabelEmpty
+     ,windowGetMaxHeight
+     ,windowGetMaxWidth
+     ,windowGetMinHeight
+     ,windowGetMinWidth
+     ,windowGetName
+     ,windowGetParent
+     ,windowGetPosition
+     ,windowGetPositionConstraint
+     ,windowGetRect
+     ,windowGetScrollPos
+     ,windowGetScrollRange
+     ,windowGetScrollThumb
+     ,windowGetSize
+     ,windowGetSizeConstraint
+     ,windowGetSizer
+     ,windowGetTextExtent
+     ,windowGetToolTip
+     ,windowGetUpdateRegion
+     ,windowGetValidator
+     ,windowGetVirtualSize
+     ,windowGetWindowStyleFlag
+     ,windowHasFlag
+     ,windowHasFocus
+     ,windowHide
+     ,windowInitDialog
+     ,windowIsBeingDeleted
+     ,windowIsEnabled
+     ,windowIsExposed
+     ,windowIsShown
+     ,windowIsTopLevel
+     ,windowLayout
+     ,windowLayoutPhase1
+     ,windowLayoutPhase2
+     ,windowLower
+     ,windowMove
+     ,windowMoveConstraint
+     ,windowPopEventHandler
+     ,windowPopupMenu
+     ,windowPrepareDC
+     ,windowPushEventHandler
+     ,windowRaise
+     ,windowRefresh
+     ,windowRefreshRect
+     ,windowReleaseMouse
+     ,windowRemoveChild
+     ,windowRemoveConstraintReference
+     ,windowReparent
+     ,windowResetConstraints
+     ,windowScreenToClient
+     ,windowScreenToClient2
+     ,windowScrollWindow
+     ,windowScrollWindowRect
+     ,windowSetAcceleratorTable
+     ,windowSetAutoLayout
+     ,windowSetBackgroundColour
+     ,windowSetCaret
+     ,windowSetClientData
+     ,windowSetClientObject
+     ,windowSetClientSize
+     ,windowSetConstraintSizes
+     ,windowSetConstraints
+     ,windowSetCursor
+     ,windowSetDropTarget
+     ,windowSetExtraStyle
+     ,windowSetFocus
+     ,windowSetFont
+     ,windowSetForegroundColour
+     ,windowSetId
+     ,windowSetLabel
+     ,windowSetName
+     ,windowSetScrollPos
+     ,windowSetScrollbar
+     ,windowSetSize
+     ,windowSetSizeConstraint
+     ,windowSetSizeHints
+     ,windowSetSizer
+     ,windowSetToolTip
+     ,windowSetValidator
+     ,windowSetVirtualSize
+     ,windowSetWindowStyleFlag
+     ,windowShow
+     ,windowThaw
+     ,windowTransferDataFromWindow
+     ,windowTransferDataToWindow
+     ,windowUnsetConstraints
+     ,windowUpdateWindowUI
+     ,windowValidate
+     ,windowWarpPointer
+     -- ** WindowCreateEvent
+     ,windowCreateEventGetWindow
+     -- ** WindowDC
+     ,windowDCCreate
+     ,windowDCDelete
+     -- ** WindowDestroyEvent
+     ,windowDestroyEventGetWindow
+     -- ** Wizard
+     ,wizardChain
+     ,wizardCreate
+     ,wizardGetCurrentPage
+     ,wizardGetPageSize
+     ,wizardRunWizard
+     ,wizardSetPageSize
+     -- ** WizardEvent
+     ,wizardEventGetDirection
+     -- ** WizardPageSimple
+     ,wizardPageSimpleCreate
+     ,wizardPageSimpleGetBitmap
+     ,wizardPageSimpleGetNext
+     ,wizardPageSimpleGetPrev
+     ,wizardPageSimpleSetNext
+     ,wizardPageSimpleSetPrev
+     -- ** WxManagedPtr
+     ,managedPtrCreateFromBitmap
+     ,managedPtrCreateFromBrush
+     ,managedPtrCreateFromColour
+     ,managedPtrCreateFromCursor
+     ,managedPtrCreateFromDateTime
+     ,managedPtrCreateFromFont
+     ,managedPtrCreateFromGridCellCoordsArray
+     ,managedPtrCreateFromIcon
+     ,managedPtrCreateFromObject
+     ,managedPtrCreateFromPen
+     ,managedPtrDelete
+     ,managedPtrFinalize
+     ,managedPtrGetDeleteFunction
+     ,managedPtrGetPtr
+     ,managedPtrNoFinalize
+     -- ** WxObject
+     ,objectGetClassInfo
+     ,objectGetClientClosure
+     ,objectIsKindOf
+     ,objectIsScrolledWindow
+     ,objectSafeDelete
+     ,objectSetClientClosure
+     ,wxobjectDelete
+     -- ** XmlResource
+     ,xmlResourceAddHandler
+     ,xmlResourceAddSubclassFactory
+     ,xmlResourceAttachUnknownControl
+     ,xmlResourceClearHandlers
+     ,xmlResourceCompareVersion
+     ,xmlResourceCreate
+     ,xmlResourceCreateFromFile
+     ,xmlResourceDelete
+     ,xmlResourceGet
+     ,xmlResourceGetBitmapButton
+     ,xmlResourceGetBoxSizer
+     ,xmlResourceGetButton
+     ,xmlResourceGetCalendarCtrl
+     ,xmlResourceGetCheckBox
+     ,xmlResourceGetCheckListBox
+     ,xmlResourceGetChoice
+     ,xmlResourceGetComboBox
+     ,xmlResourceGetDomain
+     ,xmlResourceGetFlags
+     ,xmlResourceGetFlexGridSizer
+     ,xmlResourceGetGauge
+     ,xmlResourceGetGrid
+     ,xmlResourceGetGridSizer
+     ,xmlResourceGetHtmlWindow
+     ,xmlResourceGetListBox
+     ,xmlResourceGetListCtrl
+     ,xmlResourceGetMDIChildFrame
+     ,xmlResourceGetMDIParentFrame
+     ,xmlResourceGetMenu
+     ,xmlResourceGetMenuBar
+     ,xmlResourceGetMenuItem
+     ,xmlResourceGetNotebook
+     ,xmlResourceGetPanel
+     ,xmlResourceGetRadioBox
+     ,xmlResourceGetRadioButton
+     ,xmlResourceGetScrollBar
+     ,xmlResourceGetScrolledWindow
+     ,xmlResourceGetSizer
+     ,xmlResourceGetSlider
+     ,xmlResourceGetSpinButton
+     ,xmlResourceGetSpinCtrl
+     ,xmlResourceGetSplitterWindow
+     ,xmlResourceGetStaticBitmap
+     ,xmlResourceGetStaticBox
+     ,xmlResourceGetStaticBoxSizer
+     ,xmlResourceGetStaticLine
+     ,xmlResourceGetStaticText
+     ,xmlResourceGetStyledTextCtrl
+     ,xmlResourceGetTextCtrl
+     ,xmlResourceGetTreeCtrl
+     ,xmlResourceGetVersion
+     ,xmlResourceGetXRCID
+     ,xmlResourceInitAllHandlers
+     ,xmlResourceInsertHandler
+     ,xmlResourceLoad
+     ,xmlResourceLoadBitmap
+     ,xmlResourceLoadDialog
+     ,xmlResourceLoadFrame
+     ,xmlResourceLoadIcon
+     ,xmlResourceLoadMenu
+     ,xmlResourceLoadMenuBar
+     ,xmlResourceLoadPanel
+     ,xmlResourceLoadToolBar
+     ,xmlResourceSet
+     ,xmlResourceSetDomain
+     ,xmlResourceSetFlags
+     ,xmlResourceUnload
+    ) where
+
+import Prelude hiding (id, last, length, lines, max, min, show)
+import System.IO.Unsafe( unsafePerformIO )
+import Graphics.UI.WXCore.WxcTypes hiding (rect, rgb, rgba, sz)
+import Graphics.UI.WXCore.WxcClassTypes
+
+-- | usage: (@managedPtrCreateFromBitmap obj@).
+managedPtrCreateFromBitmap :: Bitmap  a ->  IO (WxManagedPtr  ())
+managedPtrCreateFromBitmap obj 
+  = withObjectResult $
+    withObjectPtr obj $ \cobj_obj -> 
+    wxManagedPtr_CreateFromBitmap cobj_obj  
+foreign import ccall "wxManagedPtr_CreateFromBitmap" wxManagedPtr_CreateFromBitmap :: Ptr (TBitmap a) -> IO (Ptr (TWxManagedPtr ()))
+
+-- | usage: (@managedPtrCreateFromBrush obj@).
+managedPtrCreateFromBrush :: Brush  a ->  IO (WxManagedPtr  ())
+managedPtrCreateFromBrush obj 
+  = withObjectResult $
+    withObjectPtr obj $ \cobj_obj -> 
+    wxManagedPtr_CreateFromBrush cobj_obj  
+foreign import ccall "wxManagedPtr_CreateFromBrush" wxManagedPtr_CreateFromBrush :: Ptr (TBrush a) -> IO (Ptr (TWxManagedPtr ()))
+
+-- | usage: (@managedPtrCreateFromColour obj@).
+managedPtrCreateFromColour :: Color ->  IO (WxManagedPtr  ())
+managedPtrCreateFromColour obj 
+  = withObjectResult $
+    withColourPtr obj $ \cobj_obj -> 
+    wxManagedPtr_CreateFromColour cobj_obj  
+foreign import ccall "wxManagedPtr_CreateFromColour" wxManagedPtr_CreateFromColour :: Ptr (TColour a) -> IO (Ptr (TWxManagedPtr ()))
+
+-- | usage: (@managedPtrCreateFromCursor obj@).
+managedPtrCreateFromCursor :: Cursor  a ->  IO (WxManagedPtr  ())
+managedPtrCreateFromCursor obj 
+  = withObjectResult $
+    withObjectPtr obj $ \cobj_obj -> 
+    wxManagedPtr_CreateFromCursor cobj_obj  
+foreign import ccall "wxManagedPtr_CreateFromCursor" wxManagedPtr_CreateFromCursor :: Ptr (TCursor a) -> IO (Ptr (TWxManagedPtr ()))
+
+-- | usage: (@managedPtrCreateFromDateTime obj@).
+managedPtrCreateFromDateTime :: DateTime  a ->  IO (WxManagedPtr  ())
+managedPtrCreateFromDateTime obj 
+  = withObjectResult $
+    withObjectPtr obj $ \cobj_obj -> 
+    wxManagedPtr_CreateFromDateTime cobj_obj  
+foreign import ccall "wxManagedPtr_CreateFromDateTime" wxManagedPtr_CreateFromDateTime :: Ptr (TDateTime a) -> IO (Ptr (TWxManagedPtr ()))
+
+-- | usage: (@managedPtrCreateFromFont obj@).
+managedPtrCreateFromFont :: Font  a ->  IO (WxManagedPtr  ())
+managedPtrCreateFromFont obj 
+  = withObjectResult $
+    withObjectPtr obj $ \cobj_obj -> 
+    wxManagedPtr_CreateFromFont cobj_obj  
+foreign import ccall "wxManagedPtr_CreateFromFont" wxManagedPtr_CreateFromFont :: Ptr (TFont a) -> IO (Ptr (TWxManagedPtr ()))
+
+-- | usage: (@managedPtrCreateFromGridCellCoordsArray obj@).
+managedPtrCreateFromGridCellCoordsArray :: GridCellCoordsArray  a ->  IO (WxManagedPtr  ())
+managedPtrCreateFromGridCellCoordsArray obj 
+  = withObjectResult $
+    withObjectPtr obj $ \cobj_obj -> 
+    wxManagedPtr_CreateFromGridCellCoordsArray cobj_obj  
+foreign import ccall "wxManagedPtr_CreateFromGridCellCoordsArray" wxManagedPtr_CreateFromGridCellCoordsArray :: Ptr (TGridCellCoordsArray a) -> IO (Ptr (TWxManagedPtr ()))
+
+-- | usage: (@managedPtrCreateFromIcon obj@).
+managedPtrCreateFromIcon :: Icon  a ->  IO (WxManagedPtr  ())
+managedPtrCreateFromIcon obj 
+  = withObjectResult $
+    withObjectPtr obj $ \cobj_obj -> 
+    wxManagedPtr_CreateFromIcon cobj_obj  
+foreign import ccall "wxManagedPtr_CreateFromIcon" wxManagedPtr_CreateFromIcon :: Ptr (TIcon a) -> IO (Ptr (TWxManagedPtr ()))
+
+-- | usage: (@managedPtrCreateFromObject obj@).
+managedPtrCreateFromObject :: WxObject  a ->  IO (WxManagedPtr  ())
+managedPtrCreateFromObject obj 
+  = withObjectResult $
+    withObjectPtr obj $ \cobj_obj -> 
+    wxManagedPtr_CreateFromObject cobj_obj  
+foreign import ccall "wxManagedPtr_CreateFromObject" wxManagedPtr_CreateFromObject :: Ptr (TWxObject a) -> IO (Ptr (TWxManagedPtr ()))
+
+-- | usage: (@managedPtrCreateFromPen obj@).
+managedPtrCreateFromPen :: Pen  a ->  IO (WxManagedPtr  ())
+managedPtrCreateFromPen obj 
+  = withObjectResult $
+    withObjectPtr obj $ \cobj_obj -> 
+    wxManagedPtr_CreateFromPen cobj_obj  
+foreign import ccall "wxManagedPtr_CreateFromPen" wxManagedPtr_CreateFromPen :: Ptr (TPen a) -> IO (Ptr (TWxManagedPtr ()))
+
+-- | usage: (@managedPtrDelete self@).
+managedPtrDelete :: WxManagedPtr  a ->  IO ()
+managedPtrDelete self 
+  = withObjectRef "managedPtrDelete" self $ \cobj_self -> 
+    wxManagedPtr_Delete cobj_self  
+foreign import ccall "wxManagedPtr_Delete" wxManagedPtr_Delete :: Ptr (TWxManagedPtr a) -> IO ()
+
+-- | usage: (@managedPtrFinalize self@).
+managedPtrFinalize :: WxManagedPtr  a ->  IO ()
+managedPtrFinalize self 
+  = withObjectRef "managedPtrFinalize" self $ \cobj_self -> 
+    wxManagedPtr_Finalize cobj_self  
+foreign import ccall "wxManagedPtr_Finalize" wxManagedPtr_Finalize :: Ptr (TWxManagedPtr a) -> IO ()
+
+-- | usage: (@managedPtrGetDeleteFunction@).
+managedPtrGetDeleteFunction ::  IO (Ptr  ())
+managedPtrGetDeleteFunction 
+  = wxManagedPtr_GetDeleteFunction 
+foreign import ccall "wxManagedPtr_GetDeleteFunction" wxManagedPtr_GetDeleteFunction :: IO (Ptr  ())
+
+-- | usage: (@managedPtrGetPtr self@).
+managedPtrGetPtr :: WxManagedPtr  a ->  IO (Ptr  ())
+managedPtrGetPtr self 
+  = withObjectRef "managedPtrGetPtr" self $ \cobj_self -> 
+    wxManagedPtr_GetPtr cobj_self  
+foreign import ccall "wxManagedPtr_GetPtr" wxManagedPtr_GetPtr :: Ptr (TWxManagedPtr a) -> IO (Ptr  ())
+
+-- | usage: (@managedPtrNoFinalize self@).
+managedPtrNoFinalize :: WxManagedPtr  a ->  IO ()
+managedPtrNoFinalize self 
+  = withObjectRef "managedPtrNoFinalize" self $ \cobj_self -> 
+    wxManagedPtr_NoFinalize cobj_self  
+foreign import ccall "wxManagedPtr_NoFinalize" wxManagedPtr_NoFinalize :: Ptr (TWxManagedPtr a) -> IO ()
+
+-- | usage: (@maskCreate bitmap@).
+maskCreate :: Bitmap  a ->  IO (Mask  ())
+maskCreate bitmap 
+  = withObjectResult $
+    withObjectPtr bitmap $ \cobj_bitmap -> 
+    wxMask_Create cobj_bitmap  
+foreign import ccall "wxMask_Create" wxMask_Create :: Ptr (TBitmap a) -> IO (Ptr (TMask ()))
+
+-- | usage: (@maskCreateColoured bitmap colour@).
+maskCreateColoured :: Bitmap  a -> Color ->  IO (Ptr  ())
+maskCreateColoured bitmap colour 
+  = withObjectPtr bitmap $ \cobj_bitmap -> 
+    withColourPtr colour $ \cobj_colour -> 
+    wxMask_CreateColoured cobj_bitmap  cobj_colour  
+foreign import ccall "wxMask_CreateColoured" wxMask_CreateColoured :: Ptr (TBitmap a) -> Ptr (TColour b) -> IO (Ptr  ())
+
+-- | usage: (@mdiChildFrameActivate obj@).
+mdiChildFrameActivate :: MDIChildFrame  a ->  IO ()
+mdiChildFrameActivate _obj 
+  = withObjectRef "mdiChildFrameActivate" _obj $ \cobj__obj -> 
+    wxMDIChildFrame_Activate cobj__obj  
+foreign import ccall "wxMDIChildFrame_Activate" wxMDIChildFrame_Activate :: Ptr (TMDIChildFrame a) -> IO ()
+
+-- | usage: (@mdiChildFrameCreate prt id txt lfttopwdthgt stl@).
+mdiChildFrameCreate :: Window  a -> Id -> String -> Rect -> Style ->  IO (MDIChildFrame  ())
+mdiChildFrameCreate _prt _id _txt _lfttopwdthgt _stl 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    withStringPtr _txt $ \cobj__txt -> 
+    wxMDIChildFrame_Create cobj__prt  (toCInt _id)  cobj__txt  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
+foreign import ccall "wxMDIChildFrame_Create" wxMDIChildFrame_Create :: Ptr (TWindow a) -> CInt -> Ptr (TWxString c) -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TMDIChildFrame ()))
+
+-- | usage: (@mdiParentFrameActivateNext obj@).
+mdiParentFrameActivateNext :: MDIParentFrame  a ->  IO ()
+mdiParentFrameActivateNext _obj 
+  = withObjectRef "mdiParentFrameActivateNext" _obj $ \cobj__obj -> 
+    wxMDIParentFrame_ActivateNext cobj__obj  
+foreign import ccall "wxMDIParentFrame_ActivateNext" wxMDIParentFrame_ActivateNext :: Ptr (TMDIParentFrame a) -> IO ()
+
+-- | usage: (@mdiParentFrameActivatePrevious obj@).
+mdiParentFrameActivatePrevious :: MDIParentFrame  a ->  IO ()
+mdiParentFrameActivatePrevious _obj 
+  = withObjectRef "mdiParentFrameActivatePrevious" _obj $ \cobj__obj -> 
+    wxMDIParentFrame_ActivatePrevious cobj__obj  
+foreign import ccall "wxMDIParentFrame_ActivatePrevious" wxMDIParentFrame_ActivatePrevious :: Ptr (TMDIParentFrame a) -> IO ()
+
+-- | usage: (@mdiParentFrameArrangeIcons obj@).
+mdiParentFrameArrangeIcons :: MDIParentFrame  a ->  IO ()
+mdiParentFrameArrangeIcons _obj 
+  = withObjectRef "mdiParentFrameArrangeIcons" _obj $ \cobj__obj -> 
+    wxMDIParentFrame_ArrangeIcons cobj__obj  
+foreign import ccall "wxMDIParentFrame_ArrangeIcons" wxMDIParentFrame_ArrangeIcons :: Ptr (TMDIParentFrame a) -> IO ()
+
+-- | usage: (@mdiParentFrameCascade obj@).
+mdiParentFrameCascade :: MDIParentFrame  a ->  IO ()
+mdiParentFrameCascade _obj 
+  = withObjectRef "mdiParentFrameCascade" _obj $ \cobj__obj -> 
+    wxMDIParentFrame_Cascade cobj__obj  
+foreign import ccall "wxMDIParentFrame_Cascade" wxMDIParentFrame_Cascade :: Ptr (TMDIParentFrame a) -> IO ()
+
+-- | usage: (@mdiParentFrameCreate prt id txt lfttopwdthgt stl@).
+mdiParentFrameCreate :: Window  a -> Id -> String -> Rect -> Style ->  IO (MDIParentFrame  ())
+mdiParentFrameCreate _prt _id _txt _lfttopwdthgt _stl 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    withStringPtr _txt $ \cobj__txt -> 
+    wxMDIParentFrame_Create cobj__prt  (toCInt _id)  cobj__txt  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
+foreign import ccall "wxMDIParentFrame_Create" wxMDIParentFrame_Create :: Ptr (TWindow a) -> CInt -> Ptr (TWxString c) -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TMDIParentFrame ()))
+
+-- | usage: (@mdiParentFrameGetActiveChild obj@).
+mdiParentFrameGetActiveChild :: MDIParentFrame  a ->  IO (MDIChildFrame  ())
+mdiParentFrameGetActiveChild _obj 
+  = withObjectResult $
+    withObjectRef "mdiParentFrameGetActiveChild" _obj $ \cobj__obj -> 
+    wxMDIParentFrame_GetActiveChild cobj__obj  
+foreign import ccall "wxMDIParentFrame_GetActiveChild" wxMDIParentFrame_GetActiveChild :: Ptr (TMDIParentFrame a) -> IO (Ptr (TMDIChildFrame ()))
+
+-- | usage: (@mdiParentFrameGetClientWindow obj@).
+mdiParentFrameGetClientWindow :: MDIParentFrame  a ->  IO (MDIClientWindow  ())
+mdiParentFrameGetClientWindow _obj 
+  = withObjectResult $
+    withObjectRef "mdiParentFrameGetClientWindow" _obj $ \cobj__obj -> 
+    wxMDIParentFrame_GetClientWindow cobj__obj  
+foreign import ccall "wxMDIParentFrame_GetClientWindow" wxMDIParentFrame_GetClientWindow :: Ptr (TMDIParentFrame a) -> IO (Ptr (TMDIClientWindow ()))
+
+-- | usage: (@mdiParentFrameGetWindowMenu obj@).
+mdiParentFrameGetWindowMenu :: MDIParentFrame  a ->  IO (Menu  ())
+mdiParentFrameGetWindowMenu _obj 
+  = withObjectResult $
+    withObjectRef "mdiParentFrameGetWindowMenu" _obj $ \cobj__obj -> 
+    wxMDIParentFrame_GetWindowMenu cobj__obj  
+foreign import ccall "wxMDIParentFrame_GetWindowMenu" wxMDIParentFrame_GetWindowMenu :: Ptr (TMDIParentFrame a) -> IO (Ptr (TMenu ()))
+
+-- | usage: (@mdiParentFrameOnCreateClient obj@).
+mdiParentFrameOnCreateClient :: MDIParentFrame  a ->  IO (MDIClientWindow  ())
+mdiParentFrameOnCreateClient _obj 
+  = withObjectResult $
+    withObjectRef "mdiParentFrameOnCreateClient" _obj $ \cobj__obj -> 
+    wxMDIParentFrame_OnCreateClient cobj__obj  
+foreign import ccall "wxMDIParentFrame_OnCreateClient" wxMDIParentFrame_OnCreateClient :: Ptr (TMDIParentFrame a) -> IO (Ptr (TMDIClientWindow ()))
+
+-- | usage: (@mdiParentFrameSetWindowMenu obj menu@).
+mdiParentFrameSetWindowMenu :: MDIParentFrame  a -> Menu  b ->  IO ()
+mdiParentFrameSetWindowMenu _obj menu 
+  = withObjectRef "mdiParentFrameSetWindowMenu" _obj $ \cobj__obj -> 
+    withObjectPtr menu $ \cobj_menu -> 
+    wxMDIParentFrame_SetWindowMenu cobj__obj  cobj_menu  
+foreign import ccall "wxMDIParentFrame_SetWindowMenu" wxMDIParentFrame_SetWindowMenu :: Ptr (TMDIParentFrame a) -> Ptr (TMenu b) -> IO ()
+
+-- | usage: (@mdiParentFrameTile obj@).
+mdiParentFrameTile :: MDIParentFrame  a ->  IO ()
+mdiParentFrameTile _obj 
+  = withObjectRef "mdiParentFrameTile" _obj $ \cobj__obj -> 
+    wxMDIParentFrame_Tile cobj__obj  
+foreign import ccall "wxMDIParentFrame_Tile" wxMDIParentFrame_Tile :: Ptr (TMDIParentFrame a) -> IO ()
+
+-- | usage: (@mediaCtrlCreate parent windowID fileName xywh style szBackend name@).
+mediaCtrlCreate :: Window  a -> Int -> String -> Rect -> Int -> String -> String ->  IO (MediaCtrl  ())
+mediaCtrlCreate parent windowID fileName xywh style szBackend name 
+  = withObjectResult $
+    withObjectPtr parent $ \cobj_parent -> 
+    withStringPtr fileName $ \cobj_fileName -> 
+    withStringPtr szBackend $ \cobj_szBackend -> 
+    withStringPtr name $ \cobj_name -> 
+    wxMediaCtrl_Create cobj_parent  (toCInt windowID)  cobj_fileName  (toCIntRectX xywh) (toCIntRectY xywh)(toCIntRectW xywh) (toCIntRectH xywh)  (toCInt style)  cobj_szBackend  cobj_name  
+foreign import ccall "wxMediaCtrl_Create" wxMediaCtrl_Create :: Ptr (TWindow a) -> CInt -> Ptr (TWxString c) -> CInt -> CInt -> CInt -> CInt -> CInt -> Ptr (TWxString f) -> Ptr (TWxString g) -> IO (Ptr (TMediaCtrl ()))
+
+-- | usage: (@mediaCtrlDelete self@).
+mediaCtrlDelete :: MediaCtrl  a ->  IO ()
+mediaCtrlDelete
+  = objectDelete
+
+
+-- | usage: (@mediaCtrlGetBestSize self@).
+mediaCtrlGetBestSize :: MediaCtrl  a ->  IO (Size)
+mediaCtrlGetBestSize self 
+  = withWxSizeResult $
+    withObjectRef "mediaCtrlGetBestSize" self $ \cobj_self -> 
+    wxMediaCtrl_GetBestSize cobj_self  
+foreign import ccall "wxMediaCtrl_GetBestSize" wxMediaCtrl_GetBestSize :: Ptr (TMediaCtrl a) -> IO (Ptr (TWxSize ()))
+
+-- | usage: (@mediaCtrlGetPlaybackRate self@).
+mediaCtrlGetPlaybackRate :: MediaCtrl  a ->  IO Double
+mediaCtrlGetPlaybackRate self 
+  = withObjectRef "mediaCtrlGetPlaybackRate" self $ \cobj_self -> 
+    wxMediaCtrl_GetPlaybackRate cobj_self  
+foreign import ccall "wxMediaCtrl_GetPlaybackRate" wxMediaCtrl_GetPlaybackRate :: Ptr (TMediaCtrl a) -> IO Double
+
+-- | usage: (@mediaCtrlGetState self@).
+mediaCtrlGetState :: MediaCtrl  a ->  IO Int
+mediaCtrlGetState self 
+  = withIntResult $
+    withObjectRef "mediaCtrlGetState" self $ \cobj_self -> 
+    wxMediaCtrl_GetState cobj_self  
+foreign import ccall "wxMediaCtrl_GetState" wxMediaCtrl_GetState :: Ptr (TMediaCtrl a) -> IO CInt
+
+-- | usage: (@mediaCtrlGetVolume self@).
+mediaCtrlGetVolume :: MediaCtrl  a ->  IO Double
+mediaCtrlGetVolume self 
+  = withObjectRef "mediaCtrlGetVolume" self $ \cobj_self -> 
+    wxMediaCtrl_GetVolume cobj_self  
+foreign import ccall "wxMediaCtrl_GetVolume" wxMediaCtrl_GetVolume :: Ptr (TMediaCtrl a) -> IO Double
+
+-- | usage: (@mediaCtrlLength self@).
+mediaCtrlLength :: MediaCtrl  a ->  IO Int64
+mediaCtrlLength self 
+  = withObjectRef "mediaCtrlLength" self $ \cobj_self -> 
+    wxMediaCtrl_Length cobj_self  
+foreign import ccall "wxMediaCtrl_Length" wxMediaCtrl_Length :: Ptr (TMediaCtrl a) -> IO Int64
+
+-- | usage: (@mediaCtrlLoad self fileName@).
+mediaCtrlLoad :: MediaCtrl  a -> String ->  IO Bool
+mediaCtrlLoad self fileName 
+  = withBoolResult $
+    withObjectRef "mediaCtrlLoad" self $ \cobj_self -> 
+    withStringPtr fileName $ \cobj_fileName -> 
+    wxMediaCtrl_Load cobj_self  cobj_fileName  
+foreign import ccall "wxMediaCtrl_Load" wxMediaCtrl_Load :: Ptr (TMediaCtrl a) -> Ptr (TWxString b) -> IO CBool
+
+-- | usage: (@mediaCtrlLoadURI self uri@).
+mediaCtrlLoadURI :: MediaCtrl  a -> String ->  IO Bool
+mediaCtrlLoadURI self uri 
+  = withBoolResult $
+    withObjectRef "mediaCtrlLoadURI" self $ \cobj_self -> 
+    withStringPtr uri $ \cobj_uri -> 
+    wxMediaCtrl_LoadURI cobj_self  cobj_uri  
+foreign import ccall "wxMediaCtrl_LoadURI" wxMediaCtrl_LoadURI :: Ptr (TMediaCtrl a) -> Ptr (TWxString b) -> IO CBool
+
+-- | usage: (@mediaCtrlLoadURIWithProxy self uri proxy@).
+mediaCtrlLoadURIWithProxy :: MediaCtrl  a -> String -> String ->  IO Bool
+mediaCtrlLoadURIWithProxy self uri proxy 
+  = withBoolResult $
+    withObjectRef "mediaCtrlLoadURIWithProxy" self $ \cobj_self -> 
+    withStringPtr uri $ \cobj_uri -> 
+    withStringPtr proxy $ \cobj_proxy -> 
+    wxMediaCtrl_LoadURIWithProxy cobj_self  cobj_uri  cobj_proxy  
+foreign import ccall "wxMediaCtrl_LoadURIWithProxy" wxMediaCtrl_LoadURIWithProxy :: Ptr (TMediaCtrl a) -> Ptr (TWxString b) -> Ptr (TWxString c) -> IO CBool
+
+-- | usage: (@mediaCtrlPause self@).
+mediaCtrlPause :: MediaCtrl  a ->  IO Bool
+mediaCtrlPause self 
+  = withBoolResult $
+    withObjectRef "mediaCtrlPause" self $ \cobj_self -> 
+    wxMediaCtrl_Pause cobj_self  
+foreign import ccall "wxMediaCtrl_Pause" wxMediaCtrl_Pause :: Ptr (TMediaCtrl a) -> IO CBool
+
+-- | usage: (@mediaCtrlPlay self@).
+mediaCtrlPlay :: MediaCtrl  a ->  IO Bool
+mediaCtrlPlay self 
+  = withBoolResult $
+    withObjectRef "mediaCtrlPlay" self $ \cobj_self -> 
+    wxMediaCtrl_Play cobj_self  
+foreign import ccall "wxMediaCtrl_Play" wxMediaCtrl_Play :: Ptr (TMediaCtrl a) -> IO CBool
+
+-- | usage: (@mediaCtrlSeek self offsetWhere mode@).
+mediaCtrlSeek :: MediaCtrl  a -> Int64 -> Int ->  IO Int64
+mediaCtrlSeek self offsetWhere mode 
+  = withObjectRef "mediaCtrlSeek" self $ \cobj_self -> 
+    wxMediaCtrl_Seek cobj_self  offsetWhere  (toCInt mode)  
+foreign import ccall "wxMediaCtrl_Seek" wxMediaCtrl_Seek :: Ptr (TMediaCtrl a) -> Int64 -> CInt -> IO Int64
+
+-- | usage: (@mediaCtrlSetPlaybackRate self dRate@).
+mediaCtrlSetPlaybackRate :: MediaCtrl  a -> Double ->  IO Bool
+mediaCtrlSetPlaybackRate self dRate 
+  = withBoolResult $
+    withObjectRef "mediaCtrlSetPlaybackRate" self $ \cobj_self -> 
+    wxMediaCtrl_SetPlaybackRate cobj_self  dRate  
+foreign import ccall "wxMediaCtrl_SetPlaybackRate" wxMediaCtrl_SetPlaybackRate :: Ptr (TMediaCtrl a) -> Double -> IO CBool
+
+-- | usage: (@mediaCtrlSetVolume self dVolume@).
+mediaCtrlSetVolume :: MediaCtrl  a -> Double ->  IO Bool
+mediaCtrlSetVolume self dVolume 
+  = withBoolResult $
+    withObjectRef "mediaCtrlSetVolume" self $ \cobj_self -> 
+    wxMediaCtrl_SetVolume cobj_self  dVolume  
+foreign import ccall "wxMediaCtrl_SetVolume" wxMediaCtrl_SetVolume :: Ptr (TMediaCtrl a) -> Double -> IO CBool
+
+-- | usage: (@mediaCtrlShowPlayerControls self flags@).
+mediaCtrlShowPlayerControls :: MediaCtrl  a -> Int ->  IO Bool
+mediaCtrlShowPlayerControls self flags 
+  = withBoolResult $
+    withObjectRef "mediaCtrlShowPlayerControls" self $ \cobj_self -> 
+    wxMediaCtrl_ShowPlayerControls cobj_self  (toCInt flags)  
+foreign import ccall "wxMediaCtrl_ShowPlayerControls" wxMediaCtrl_ShowPlayerControls :: Ptr (TMediaCtrl a) -> CInt -> IO CBool
+
+-- | usage: (@mediaCtrlStop self@).
+mediaCtrlStop :: MediaCtrl  a ->  IO Bool
+mediaCtrlStop self 
+  = withBoolResult $
+    withObjectRef "mediaCtrlStop" self $ \cobj_self -> 
+    wxMediaCtrl_Stop cobj_self  
+foreign import ccall "wxMediaCtrl_Stop" wxMediaCtrl_Stop :: Ptr (TMediaCtrl a) -> IO CBool
+
+-- | usage: (@mediaCtrlTell self@).
+mediaCtrlTell :: MediaCtrl  a ->  IO Int64
+mediaCtrlTell self 
+  = withObjectRef "mediaCtrlTell" self $ \cobj_self -> 
+    wxMediaCtrl_Tell cobj_self  
+foreign import ccall "wxMediaCtrl_Tell" wxMediaCtrl_Tell :: Ptr (TMediaCtrl a) -> IO Int64
+
+-- | usage: (@memoryDCCreate@).
+memoryDCCreate ::  IO (MemoryDC  ())
+memoryDCCreate 
+  = withObjectResult $
+    wxMemoryDC_Create 
+foreign import ccall "wxMemoryDC_Create" wxMemoryDC_Create :: IO (Ptr (TMemoryDC ()))
+
+-- | usage: (@memoryDCCreateCompatible dc@).
+memoryDCCreateCompatible :: DC  a ->  IO (MemoryDC  ())
+memoryDCCreateCompatible dc 
+  = withObjectResult $
+    withObjectPtr dc $ \cobj_dc -> 
+    wxMemoryDC_CreateCompatible cobj_dc  
+foreign import ccall "wxMemoryDC_CreateCompatible" wxMemoryDC_CreateCompatible :: Ptr (TDC a) -> IO (Ptr (TMemoryDC ()))
+
+-- | usage: (@memoryDCCreateWithBitmap bitmap@).
+memoryDCCreateWithBitmap :: Bitmap  a ->  IO (MemoryDC  ())
+memoryDCCreateWithBitmap bitmap 
+  = withObjectResult $
+    withObjectPtr bitmap $ \cobj_bitmap -> 
+    wxMemoryDC_CreateWithBitmap cobj_bitmap  
+foreign import ccall "wxMemoryDC_CreateWithBitmap" wxMemoryDC_CreateWithBitmap :: Ptr (TBitmap a) -> IO (Ptr (TMemoryDC ()))
+
+-- | usage: (@memoryDCDelete obj@).
+memoryDCDelete :: MemoryDC  a ->  IO ()
+memoryDCDelete
+  = objectDelete
+
+
+-- | usage: (@memoryDCSelectObject obj bitmap@).
+memoryDCSelectObject :: MemoryDC  a -> Bitmap  b ->  IO ()
+memoryDCSelectObject _obj bitmap 
+  = withObjectRef "memoryDCSelectObject" _obj $ \cobj__obj -> 
+    withObjectPtr bitmap $ \cobj_bitmap -> 
+    wxMemoryDC_SelectObject cobj__obj  cobj_bitmap  
+foreign import ccall "wxMemoryDC_SelectObject" wxMemoryDC_SelectObject :: Ptr (TMemoryDC a) -> Ptr (TBitmap b) -> IO ()
+
+-- | usage: (@memoryInputStreamCreate wxdata len@).
+memoryInputStreamCreate :: Ptr  a -> Int ->  IO (MemoryInputStream  ())
+memoryInputStreamCreate wxdata len 
+  = withObjectResult $
+    wxMemoryInputStream_Create wxdata  (toCInt len)  
+foreign import ccall "wxMemoryInputStream_Create" wxMemoryInputStream_Create :: Ptr  a -> CInt -> IO (Ptr (TMemoryInputStream ()))
+
+-- | usage: (@memoryInputStreamDelete self@).
+memoryInputStreamDelete :: MemoryInputStream  a ->  IO ()
+memoryInputStreamDelete self 
+  = withObjectRef "memoryInputStreamDelete" self $ \cobj_self -> 
+    wxMemoryInputStream_Delete cobj_self  
+foreign import ccall "wxMemoryInputStream_Delete" wxMemoryInputStream_Delete :: Ptr (TMemoryInputStream a) -> IO ()
+
+-- | usage: (@menuAppend obj id text help isCheckable@).
+menuAppend :: Menu  a -> Id -> String -> String -> Bool ->  IO ()
+menuAppend _obj id text help isCheckable 
+  = withObjectRef "menuAppend" _obj $ \cobj__obj -> 
+    withStringPtr text $ \cobj_text -> 
+    withStringPtr help $ \cobj_help -> 
+    wxMenu_Append cobj__obj  (toCInt id)  cobj_text  cobj_help  (toCBool isCheckable)  
+foreign import ccall "wxMenu_Append" wxMenu_Append :: Ptr (TMenu a) -> CInt -> Ptr (TWxString c) -> Ptr (TWxString d) -> CBool -> IO ()
+
+-- | usage: (@menuAppendItem obj itm@).
+menuAppendItem :: Menu  a -> MenuItem  b ->  IO ()
+menuAppendItem _obj _itm 
+  = withObjectRef "menuAppendItem" _obj $ \cobj__obj -> 
+    withObjectPtr _itm $ \cobj__itm -> 
+    wxMenu_AppendItem cobj__obj  cobj__itm  
+foreign import ccall "wxMenu_AppendItem" wxMenu_AppendItem :: Ptr (TMenu a) -> Ptr (TMenuItem b) -> IO ()
+
+-- | usage: (@menuAppendRadioItem self id text help@).
+menuAppendRadioItem :: Menu  a -> Id -> String -> String ->  IO ()
+menuAppendRadioItem self id text help 
+  = withObjectRef "menuAppendRadioItem" self $ \cobj_self -> 
+    withStringPtr text $ \cobj_text -> 
+    withStringPtr help $ \cobj_help -> 
+    wxMenu_AppendRadioItem cobj_self  (toCInt id)  cobj_text  cobj_help  
+foreign import ccall "wxMenu_AppendRadioItem" wxMenu_AppendRadioItem :: Ptr (TMenu a) -> CInt -> Ptr (TWxString c) -> Ptr (TWxString d) -> IO ()
+
+-- | usage: (@menuAppendSeparator obj@).
+menuAppendSeparator :: Menu  a ->  IO ()
+menuAppendSeparator _obj 
+  = withObjectRef "menuAppendSeparator" _obj $ \cobj__obj -> 
+    wxMenu_AppendSeparator cobj__obj  
+foreign import ccall "wxMenu_AppendSeparator" wxMenu_AppendSeparator :: Ptr (TMenu a) -> IO ()
+
+-- | usage: (@menuAppendSub obj id text submenu help@).
+menuAppendSub :: Menu  a -> Id -> String -> Menu  d -> String ->  IO ()
+menuAppendSub _obj id text submenu help 
+  = withObjectRef "menuAppendSub" _obj $ \cobj__obj -> 
+    withStringPtr text $ \cobj_text -> 
+    withObjectPtr submenu $ \cobj_submenu -> 
+    withStringPtr help $ \cobj_help -> 
+    wxMenu_AppendSub cobj__obj  (toCInt id)  cobj_text  cobj_submenu  cobj_help  
+foreign import ccall "wxMenu_AppendSub" wxMenu_AppendSub :: Ptr (TMenu a) -> CInt -> Ptr (TWxString c) -> Ptr (TMenu d) -> Ptr (TWxString e) -> IO ()
+
+-- | usage: (@menuBarAppend obj menu title@).
+menuBarAppend :: MenuBar  a -> Menu  b -> String ->  IO Int
+menuBarAppend _obj menu title 
+  = withIntResult $
+    withObjectRef "menuBarAppend" _obj $ \cobj__obj -> 
+    withObjectPtr menu $ \cobj_menu -> 
+    withStringPtr title $ \cobj_title -> 
+    wxMenuBar_Append cobj__obj  cobj_menu  cobj_title  
+foreign import ccall "wxMenuBar_Append" wxMenuBar_Append :: Ptr (TMenuBar a) -> Ptr (TMenu b) -> Ptr (TWxString c) -> IO CInt
+
+-- | usage: (@menuBarCheck obj id check@).
+menuBarCheck :: MenuBar  a -> Id -> Bool ->  IO ()
+menuBarCheck _obj id check 
+  = withObjectRef "menuBarCheck" _obj $ \cobj__obj -> 
+    wxMenuBar_Check cobj__obj  (toCInt id)  (toCBool check)  
+foreign import ccall "wxMenuBar_Check" wxMenuBar_Check :: Ptr (TMenuBar a) -> CInt -> CBool -> IO ()
+
+-- | usage: (@menuBarCreate style@).
+menuBarCreate :: Int ->  IO (MenuBar  ())
+menuBarCreate _style 
+  = withObjectResult $
+    wxMenuBar_Create (toCInt _style)  
+foreign import ccall "wxMenuBar_Create" wxMenuBar_Create :: CInt -> IO (Ptr (TMenuBar ()))
+
+-- | usage: (@menuBarDeletePointer obj@).
+menuBarDeletePointer :: MenuBar  a ->  IO ()
+menuBarDeletePointer _obj 
+  = withObjectRef "menuBarDeletePointer" _obj $ \cobj__obj -> 
+    wxMenuBar_DeletePointer cobj__obj  
+foreign import ccall "wxMenuBar_DeletePointer" wxMenuBar_DeletePointer :: Ptr (TMenuBar a) -> IO ()
+
+-- | usage: (@menuBarEnable obj enable@).
+menuBarEnable :: MenuBar  a -> Bool ->  IO Int
+menuBarEnable _obj enable 
+  = withIntResult $
+    withObjectRef "menuBarEnable" _obj $ \cobj__obj -> 
+    wxMenuBar_Enable cobj__obj  (toCBool enable)  
+foreign import ccall "wxMenuBar_Enable" wxMenuBar_Enable :: Ptr (TMenuBar a) -> CBool -> IO CInt
+
+-- | usage: (@menuBarEnableItem obj id enable@).
+menuBarEnableItem :: MenuBar  a -> Id -> Bool ->  IO ()
+menuBarEnableItem _obj id enable 
+  = withObjectRef "menuBarEnableItem" _obj $ \cobj__obj -> 
+    wxMenuBar_EnableItem cobj__obj  (toCInt id)  (toCBool enable)  
+foreign import ccall "wxMenuBar_EnableItem" wxMenuBar_EnableItem :: Ptr (TMenuBar a) -> CInt -> CBool -> IO ()
+
+-- | usage: (@menuBarEnableTop obj pos enable@).
+menuBarEnableTop :: MenuBar  a -> Int -> Bool ->  IO ()
+menuBarEnableTop _obj pos enable 
+  = withObjectRef "menuBarEnableTop" _obj $ \cobj__obj -> 
+    wxMenuBar_EnableTop cobj__obj  (toCInt pos)  (toCBool enable)  
+foreign import ccall "wxMenuBar_EnableTop" wxMenuBar_EnableTop :: Ptr (TMenuBar a) -> CInt -> CBool -> IO ()
+
+-- | usage: (@menuBarFindItem obj id@).
+menuBarFindItem :: MenuBar  a -> Id ->  IO (MenuItem  ())
+menuBarFindItem _obj id 
+  = withObjectResult $
+    withObjectRef "menuBarFindItem" _obj $ \cobj__obj -> 
+    wxMenuBar_FindItem cobj__obj  (toCInt id)  
+foreign import ccall "wxMenuBar_FindItem" wxMenuBar_FindItem :: Ptr (TMenuBar a) -> CInt -> IO (Ptr (TMenuItem ()))
+
+-- | usage: (@menuBarFindMenu obj title@).
+menuBarFindMenu :: MenuBar  a -> String ->  IO Int
+menuBarFindMenu _obj title 
+  = withIntResult $
+    withObjectRef "menuBarFindMenu" _obj $ \cobj__obj -> 
+    withStringPtr title $ \cobj_title -> 
+    wxMenuBar_FindMenu cobj__obj  cobj_title  
+foreign import ccall "wxMenuBar_FindMenu" wxMenuBar_FindMenu :: Ptr (TMenuBar a) -> Ptr (TWxString b) -> IO CInt
+
+-- | usage: (@menuBarFindMenuItem obj menuString itemString@).
+menuBarFindMenuItem :: MenuBar  a -> String -> String ->  IO Int
+menuBarFindMenuItem _obj menuString itemString 
+  = withIntResult $
+    withObjectRef "menuBarFindMenuItem" _obj $ \cobj__obj -> 
+    withStringPtr menuString $ \cobj_menuString -> 
+    withStringPtr itemString $ \cobj_itemString -> 
+    wxMenuBar_FindMenuItem cobj__obj  cobj_menuString  cobj_itemString  
+foreign import ccall "wxMenuBar_FindMenuItem" wxMenuBar_FindMenuItem :: Ptr (TMenuBar a) -> Ptr (TWxString b) -> Ptr (TWxString c) -> IO CInt
+
+-- | usage: (@menuBarGetFrame obj@).
+menuBarGetFrame :: MenuBar  a ->  IO (Frame  ())
+menuBarGetFrame _obj 
+  = withObjectResult $
+    withObjectRef "menuBarGetFrame" _obj $ \cobj__obj -> 
+    wxMenuBar_GetFrame cobj__obj  
+foreign import ccall "wxMenuBar_GetFrame" wxMenuBar_GetFrame :: Ptr (TMenuBar a) -> IO (Ptr (TFrame ()))
+
+-- | usage: (@menuBarGetHelpString obj id@).
+menuBarGetHelpString :: MenuBar  a -> Id ->  IO (String)
+menuBarGetHelpString _obj id 
+  = withManagedStringResult $
+    withObjectRef "menuBarGetHelpString" _obj $ \cobj__obj -> 
+    wxMenuBar_GetHelpString cobj__obj  (toCInt id)  
+foreign import ccall "wxMenuBar_GetHelpString" wxMenuBar_GetHelpString :: Ptr (TMenuBar a) -> CInt -> IO (Ptr (TWxString ()))
+
+-- | usage: (@menuBarGetLabel obj id@).
+menuBarGetLabel :: MenuBar  a -> Id ->  IO (String)
+menuBarGetLabel _obj id 
+  = withManagedStringResult $
+    withObjectRef "menuBarGetLabel" _obj $ \cobj__obj -> 
+    wxMenuBar_GetLabel cobj__obj  (toCInt id)  
+foreign import ccall "wxMenuBar_GetLabel" wxMenuBar_GetLabel :: Ptr (TMenuBar a) -> CInt -> IO (Ptr (TWxString ()))
+
+-- | usage: (@menuBarGetMenu obj pos@).
+menuBarGetMenu :: MenuBar  a -> Int ->  IO (Menu  ())
+menuBarGetMenu _obj pos 
+  = withObjectResult $
+    withObjectRef "menuBarGetMenu" _obj $ \cobj__obj -> 
+    wxMenuBar_GetMenu cobj__obj  (toCInt pos)  
+foreign import ccall "wxMenuBar_GetMenu" wxMenuBar_GetMenu :: Ptr (TMenuBar a) -> CInt -> IO (Ptr (TMenu ()))
+
+-- | usage: (@menuBarGetMenuCount obj@).
+menuBarGetMenuCount :: MenuBar  a ->  IO Int
+menuBarGetMenuCount _obj 
+  = withIntResult $
+    withObjectRef "menuBarGetMenuCount" _obj $ \cobj__obj -> 
+    wxMenuBar_GetMenuCount cobj__obj  
+foreign import ccall "wxMenuBar_GetMenuCount" wxMenuBar_GetMenuCount :: Ptr (TMenuBar a) -> IO CInt
+
+-- | usage: (@menuBarGetMenuLabel obj pos@).
+menuBarGetMenuLabel :: MenuBar  a -> Int ->  IO (String)
+menuBarGetMenuLabel _obj pos 
+  = withManagedStringResult $
+    withObjectRef "menuBarGetMenuLabel" _obj $ \cobj__obj -> 
+    wxMenuBar_GetMenuLabel cobj__obj  (toCInt pos)  
+foreign import ccall "wxMenuBar_GetMenuLabel" wxMenuBar_GetMenuLabel :: Ptr (TMenuBar a) -> CInt -> IO (Ptr (TWxString ()))
+
+-- | usage: (@menuBarInsert obj pos menu title@).
+menuBarInsert :: MenuBar  a -> Int -> Menu  c -> String ->  IO Int
+menuBarInsert _obj pos menu title 
+  = withIntResult $
+    withObjectRef "menuBarInsert" _obj $ \cobj__obj -> 
+    withObjectPtr menu $ \cobj_menu -> 
+    withStringPtr title $ \cobj_title -> 
+    wxMenuBar_Insert cobj__obj  (toCInt pos)  cobj_menu  cobj_title  
+foreign import ccall "wxMenuBar_Insert" wxMenuBar_Insert :: Ptr (TMenuBar a) -> CInt -> Ptr (TMenu c) -> Ptr (TWxString d) -> IO CInt
+
+-- | usage: (@menuBarIsChecked obj id@).
+menuBarIsChecked :: MenuBar  a -> Id ->  IO Bool
+menuBarIsChecked _obj id 
+  = withBoolResult $
+    withObjectRef "menuBarIsChecked" _obj $ \cobj__obj -> 
+    wxMenuBar_IsChecked cobj__obj  (toCInt id)  
+foreign import ccall "wxMenuBar_IsChecked" wxMenuBar_IsChecked :: Ptr (TMenuBar a) -> CInt -> IO CBool
+
+-- | usage: (@menuBarIsEnabled obj id@).
+menuBarIsEnabled :: MenuBar  a -> Id ->  IO Bool
+menuBarIsEnabled _obj id 
+  = withBoolResult $
+    withObjectRef "menuBarIsEnabled" _obj $ \cobj__obj -> 
+    wxMenuBar_IsEnabled cobj__obj  (toCInt id)  
+foreign import ccall "wxMenuBar_IsEnabled" wxMenuBar_IsEnabled :: Ptr (TMenuBar a) -> CInt -> IO CBool
+
+-- | usage: (@menuBarRemove obj pos@).
+menuBarRemove :: MenuBar  a -> Int ->  IO (Menu  ())
+menuBarRemove _obj pos 
+  = withObjectResult $
+    withObjectRef "menuBarRemove" _obj $ \cobj__obj -> 
+    wxMenuBar_Remove cobj__obj  (toCInt pos)  
+foreign import ccall "wxMenuBar_Remove" wxMenuBar_Remove :: Ptr (TMenuBar a) -> CInt -> IO (Ptr (TMenu ()))
+
+-- | usage: (@menuBarReplace obj pos menu title@).
+menuBarReplace :: MenuBar  a -> Int -> Menu  c -> String ->  IO (Menu  ())
+menuBarReplace _obj pos menu title 
+  = withObjectResult $
+    withObjectRef "menuBarReplace" _obj $ \cobj__obj -> 
+    withObjectPtr menu $ \cobj_menu -> 
+    withStringPtr title $ \cobj_title -> 
+    wxMenuBar_Replace cobj__obj  (toCInt pos)  cobj_menu  cobj_title  
+foreign import ccall "wxMenuBar_Replace" wxMenuBar_Replace :: Ptr (TMenuBar a) -> CInt -> Ptr (TMenu c) -> Ptr (TWxString d) -> IO (Ptr (TMenu ()))
+
+-- | usage: (@menuBarSetHelpString obj id helpString@).
+menuBarSetHelpString :: MenuBar  a -> Id -> String ->  IO ()
+menuBarSetHelpString _obj id helpString 
+  = withObjectRef "menuBarSetHelpString" _obj $ \cobj__obj -> 
+    withStringPtr helpString $ \cobj_helpString -> 
+    wxMenuBar_SetHelpString cobj__obj  (toCInt id)  cobj_helpString  
+foreign import ccall "wxMenuBar_SetHelpString" wxMenuBar_SetHelpString :: Ptr (TMenuBar a) -> CInt -> Ptr (TWxString c) -> IO ()
+
+-- | usage: (@menuBarSetItemLabel obj id label@).
+menuBarSetItemLabel :: MenuBar  a -> Id -> String ->  IO ()
+menuBarSetItemLabel _obj id label 
+  = withObjectRef "menuBarSetItemLabel" _obj $ \cobj__obj -> 
+    withStringPtr label $ \cobj_label -> 
+    wxMenuBar_SetItemLabel cobj__obj  (toCInt id)  cobj_label  
+foreign import ccall "wxMenuBar_SetItemLabel" wxMenuBar_SetItemLabel :: Ptr (TMenuBar a) -> CInt -> Ptr (TWxString c) -> IO ()
+
+-- | usage: (@menuBarSetLabel obj s@).
+menuBarSetLabel :: MenuBar  a -> String ->  IO ()
+menuBarSetLabel _obj s 
+  = withObjectRef "menuBarSetLabel" _obj $ \cobj__obj -> 
+    withStringPtr s $ \cobj_s -> 
+    wxMenuBar_SetLabel cobj__obj  cobj_s  
+foreign import ccall "wxMenuBar_SetLabel" wxMenuBar_SetLabel :: Ptr (TMenuBar a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@menuBarSetMenuLabel obj pos label@).
+menuBarSetMenuLabel :: MenuBar  a -> Int -> String ->  IO ()
+menuBarSetMenuLabel _obj pos label 
+  = withObjectRef "menuBarSetMenuLabel" _obj $ \cobj__obj -> 
+    withStringPtr label $ \cobj_label -> 
+    wxMenuBar_SetMenuLabel cobj__obj  (toCInt pos)  cobj_label  
+foreign import ccall "wxMenuBar_SetMenuLabel" wxMenuBar_SetMenuLabel :: Ptr (TMenuBar a) -> CInt -> Ptr (TWxString c) -> IO ()
+
+-- | usage: (@menuBreak obj@).
+menuBreak :: Menu  a ->  IO ()
+menuBreak _obj 
+  = withObjectRef "menuBreak" _obj $ \cobj__obj -> 
+    wxMenu_Break cobj__obj  
+foreign import ccall "wxMenu_Break" wxMenu_Break :: Ptr (TMenu a) -> IO ()
+
+-- | usage: (@menuCheck obj id check@).
+menuCheck :: Menu  a -> Id -> Bool ->  IO ()
+menuCheck _obj id check 
+  = withObjectRef "menuCheck" _obj $ \cobj__obj -> 
+    wxMenu_Check cobj__obj  (toCInt id)  (toCBool check)  
+foreign import ccall "wxMenu_Check" wxMenu_Check :: Ptr (TMenu a) -> CInt -> CBool -> IO ()
+
+-- | usage: (@menuCreate title style@).
+menuCreate :: String -> Int ->  IO (Menu  ())
+menuCreate title style 
+  = withObjectResult $
+    withStringPtr title $ \cobj_title -> 
+    wxMenu_Create cobj_title  (toCInt style)  
+foreign import ccall "wxMenu_Create" wxMenu_Create :: Ptr (TWxString a) -> CInt -> IO (Ptr (TMenu ()))
+
+-- | usage: (@menuDeleteById obj id@).
+menuDeleteById :: Menu  a -> Id ->  IO ()
+menuDeleteById _obj id 
+  = withObjectRef "menuDeleteById" _obj $ \cobj__obj -> 
+    wxMenu_DeleteById cobj__obj  (toCInt id)  
+foreign import ccall "wxMenu_DeleteById" wxMenu_DeleteById :: Ptr (TMenu a) -> CInt -> IO ()
+
+-- | usage: (@menuDeleteByItem obj itm@).
+menuDeleteByItem :: Menu  a -> MenuItem  b ->  IO ()
+menuDeleteByItem _obj _itm 
+  = withObjectRef "menuDeleteByItem" _obj $ \cobj__obj -> 
+    withObjectPtr _itm $ \cobj__itm -> 
+    wxMenu_DeleteByItem cobj__obj  cobj__itm  
+foreign import ccall "wxMenu_DeleteByItem" wxMenu_DeleteByItem :: Ptr (TMenu a) -> Ptr (TMenuItem b) -> IO ()
+
+-- | usage: (@menuDeletePointer obj@).
+menuDeletePointer :: Menu  a ->  IO ()
+menuDeletePointer _obj 
+  = withObjectRef "menuDeletePointer" _obj $ \cobj__obj -> 
+    wxMenu_DeletePointer cobj__obj  
+foreign import ccall "wxMenu_DeletePointer" wxMenu_DeletePointer :: Ptr (TMenu a) -> IO ()
+
+-- | usage: (@menuDestroyById obj id@).
+menuDestroyById :: Menu  a -> Id ->  IO ()
+menuDestroyById _obj id 
+  = withObjectRef "menuDestroyById" _obj $ \cobj__obj -> 
+    wxMenu_DestroyById cobj__obj  (toCInt id)  
+foreign import ccall "wxMenu_DestroyById" wxMenu_DestroyById :: Ptr (TMenu a) -> CInt -> IO ()
+
+-- | usage: (@menuDestroyByItem obj itm@).
+menuDestroyByItem :: Menu  a -> MenuItem  b ->  IO ()
+menuDestroyByItem _obj _itm 
+  = withObjectRef "menuDestroyByItem" _obj $ \cobj__obj -> 
+    withObjectPtr _itm $ \cobj__itm -> 
+    wxMenu_DestroyByItem cobj__obj  cobj__itm  
+foreign import ccall "wxMenu_DestroyByItem" wxMenu_DestroyByItem :: Ptr (TMenu a) -> Ptr (TMenuItem b) -> IO ()
+
+-- | usage: (@menuEnable obj id enable@).
+menuEnable :: Menu  a -> Id -> Bool ->  IO ()
+menuEnable _obj id enable 
+  = withObjectRef "menuEnable" _obj $ \cobj__obj -> 
+    wxMenu_Enable cobj__obj  (toCInt id)  (toCBool enable)  
+foreign import ccall "wxMenu_Enable" wxMenu_Enable :: Ptr (TMenu a) -> CInt -> CBool -> IO ()
+
+-- | usage: (@menuEventCopyObject obj obj@).
+menuEventCopyObject :: MenuEvent  a -> Ptr  b ->  IO ()
+menuEventCopyObject _obj obj 
+  = withObjectRef "menuEventCopyObject" _obj $ \cobj__obj -> 
+    wxMenuEvent_CopyObject cobj__obj  obj  
+foreign import ccall "wxMenuEvent_CopyObject" wxMenuEvent_CopyObject :: Ptr (TMenuEvent a) -> Ptr  b -> IO ()
+
+-- | usage: (@menuEventGetMenuId obj@).
+menuEventGetMenuId :: MenuEvent  a ->  IO Int
+menuEventGetMenuId _obj 
+  = withIntResult $
+    withObjectRef "menuEventGetMenuId" _obj $ \cobj__obj -> 
+    wxMenuEvent_GetMenuId cobj__obj  
+foreign import ccall "wxMenuEvent_GetMenuId" wxMenuEvent_GetMenuId :: Ptr (TMenuEvent a) -> IO CInt
+
+-- | usage: (@menuFindItem obj id@).
+menuFindItem :: Menu  a -> Id ->  IO (MenuItem  ())
+menuFindItem _obj id 
+  = withObjectResult $
+    withObjectRef "menuFindItem" _obj $ \cobj__obj -> 
+    wxMenu_FindItem cobj__obj  (toCInt id)  
+foreign import ccall "wxMenu_FindItem" wxMenu_FindItem :: Ptr (TMenu a) -> CInt -> IO (Ptr (TMenuItem ()))
+
+-- | usage: (@menuFindItemByLabel obj itemString@).
+menuFindItemByLabel :: Menu  a -> String ->  IO Int
+menuFindItemByLabel _obj itemString 
+  = withIntResult $
+    withObjectRef "menuFindItemByLabel" _obj $ \cobj__obj -> 
+    withStringPtr itemString $ \cobj_itemString -> 
+    wxMenu_FindItemByLabel cobj__obj  cobj_itemString  
+foreign import ccall "wxMenu_FindItemByLabel" wxMenu_FindItemByLabel :: Ptr (TMenu a) -> Ptr (TWxString b) -> IO CInt
+
+-- | usage: (@menuGetClientData obj@).
+menuGetClientData :: Menu  a ->  IO (ClientData  ())
+menuGetClientData _obj 
+  = withObjectResult $
+    withObjectRef "menuGetClientData" _obj $ \cobj__obj -> 
+    wxMenu_GetClientData cobj__obj  
+foreign import ccall "wxMenu_GetClientData" wxMenu_GetClientData :: Ptr (TMenu a) -> IO (Ptr (TClientData ()))
+
+-- | usage: (@menuGetHelpString obj id@).
+menuGetHelpString :: Menu  a -> Id ->  IO (String)
+menuGetHelpString _obj id 
+  = withManagedStringResult $
+    withObjectRef "menuGetHelpString" _obj $ \cobj__obj -> 
+    wxMenu_GetHelpString cobj__obj  (toCInt id)  
+foreign import ccall "wxMenu_GetHelpString" wxMenu_GetHelpString :: Ptr (TMenu a) -> CInt -> IO (Ptr (TWxString ()))
+
+-- | usage: (@menuGetInvokingWindow obj@).
+menuGetInvokingWindow :: Menu  a ->  IO (Window  ())
+menuGetInvokingWindow _obj 
+  = withObjectResult $
+    withObjectRef "menuGetInvokingWindow" _obj $ \cobj__obj -> 
+    wxMenu_GetInvokingWindow cobj__obj  
+foreign import ccall "wxMenu_GetInvokingWindow" wxMenu_GetInvokingWindow :: Ptr (TMenu a) -> IO (Ptr (TWindow ()))
+
+-- | usage: (@menuGetLabelText obj id@).
+menuGetLabelText :: Menu  a -> Id ->  IO (String)
+menuGetLabelText _obj id 
+  = withManagedStringResult $
+    withObjectRef "menuGetLabelText" _obj $ \cobj__obj -> 
+    wxMenu_GetLabelText cobj__obj  (toCInt id)  
+foreign import ccall "wxMenu_GetLabelText" wxMenu_GetLabelText :: Ptr (TMenu a) -> CInt -> IO (Ptr (TWxString ()))
+
+-- | usage: (@menuGetMenuBar obj@).
+menuGetMenuBar :: Menu  a ->  IO (MenuBar  ())
+menuGetMenuBar _obj 
+  = withObjectResult $
+    withObjectRef "menuGetMenuBar" _obj $ \cobj__obj -> 
+    wxMenu_GetMenuBar cobj__obj  
+foreign import ccall "wxMenu_GetMenuBar" wxMenu_GetMenuBar :: Ptr (TMenu a) -> IO (Ptr (TMenuBar ()))
+
+-- | usage: (@menuGetMenuItemCount obj@).
+menuGetMenuItemCount :: Menu  a ->  IO Int
+menuGetMenuItemCount _obj 
+  = withIntResult $
+    withObjectRef "menuGetMenuItemCount" _obj $ \cobj__obj -> 
+    wxMenu_GetMenuItemCount cobj__obj  
+foreign import ccall "wxMenu_GetMenuItemCount" wxMenu_GetMenuItemCount :: Ptr (TMenu a) -> IO CInt
+
+-- | usage: (@menuGetMenuItems obj lst@).
+menuGetMenuItems :: Menu  a -> List  b ->  IO Int
+menuGetMenuItems _obj _lst 
+  = withIntResult $
+    withObjectRef "menuGetMenuItems" _obj $ \cobj__obj -> 
+    withObjectPtr _lst $ \cobj__lst -> 
+    wxMenu_GetMenuItems cobj__obj  cobj__lst  
+foreign import ccall "wxMenu_GetMenuItems" wxMenu_GetMenuItems :: Ptr (TMenu a) -> Ptr (TList b) -> IO CInt
+
+-- | usage: (@menuGetParent obj@).
+menuGetParent :: Menu  a ->  IO (Menu  ())
+menuGetParent _obj 
+  = withObjectResult $
+    withObjectRef "menuGetParent" _obj $ \cobj__obj -> 
+    wxMenu_GetParent cobj__obj  
+foreign import ccall "wxMenu_GetParent" wxMenu_GetParent :: Ptr (TMenu a) -> IO (Ptr (TMenu ()))
+
+-- | usage: (@menuGetStyle obj@).
+menuGetStyle :: Menu  a ->  IO Int
+menuGetStyle _obj 
+  = withIntResult $
+    withObjectRef "menuGetStyle" _obj $ \cobj__obj -> 
+    wxMenu_GetStyle cobj__obj  
+foreign import ccall "wxMenu_GetStyle" wxMenu_GetStyle :: Ptr (TMenu a) -> IO CInt
+
+-- | usage: (@menuGetTitle obj@).
+menuGetTitle :: Menu  a ->  IO (String)
+menuGetTitle _obj 
+  = withManagedStringResult $
+    withObjectRef "menuGetTitle" _obj $ \cobj__obj -> 
+    wxMenu_GetTitle cobj__obj  
+foreign import ccall "wxMenu_GetTitle" wxMenu_GetTitle :: Ptr (TMenu a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@menuInsert obj pos id text help isCheckable@).
+menuInsert :: Menu  a -> Int -> Id -> String -> String -> Bool ->  IO ()
+menuInsert _obj pos id text help isCheckable 
+  = withObjectRef "menuInsert" _obj $ \cobj__obj -> 
+    withStringPtr text $ \cobj_text -> 
+    withStringPtr help $ \cobj_help -> 
+    wxMenu_Insert cobj__obj  (toCInt pos)  (toCInt id)  cobj_text  cobj_help  (toCBool isCheckable)  
+foreign import ccall "wxMenu_Insert" wxMenu_Insert :: Ptr (TMenu a) -> CInt -> CInt -> Ptr (TWxString d) -> Ptr (TWxString e) -> CBool -> IO ()
+
+-- | usage: (@menuInsertItem obj pos itm@).
+menuInsertItem :: Menu  a -> Int -> MenuItem  c ->  IO ()
+menuInsertItem _obj pos _itm 
+  = withObjectRef "menuInsertItem" _obj $ \cobj__obj -> 
+    withObjectPtr _itm $ \cobj__itm -> 
+    wxMenu_InsertItem cobj__obj  (toCInt pos)  cobj__itm  
+foreign import ccall "wxMenu_InsertItem" wxMenu_InsertItem :: Ptr (TMenu a) -> CInt -> Ptr (TMenuItem c) -> IO ()
+
+-- | usage: (@menuInsertSub obj pos id text submenu help@).
+menuInsertSub :: Menu  a -> Int -> Id -> String -> Menu  e -> String ->  IO ()
+menuInsertSub _obj pos id text submenu help 
+  = withObjectRef "menuInsertSub" _obj $ \cobj__obj -> 
+    withStringPtr text $ \cobj_text -> 
+    withObjectPtr submenu $ \cobj_submenu -> 
+    withStringPtr help $ \cobj_help -> 
+    wxMenu_InsertSub cobj__obj  (toCInt pos)  (toCInt id)  cobj_text  cobj_submenu  cobj_help  
+foreign import ccall "wxMenu_InsertSub" wxMenu_InsertSub :: Ptr (TMenu a) -> CInt -> CInt -> Ptr (TWxString d) -> Ptr (TMenu e) -> Ptr (TWxString f) -> IO ()
+
+-- | usage: (@menuIsAttached obj@).
+menuIsAttached :: Menu  a ->  IO Bool
+menuIsAttached _obj 
+  = withBoolResult $
+    withObjectRef "menuIsAttached" _obj $ \cobj__obj -> 
+    wxMenu_IsAttached cobj__obj  
+foreign import ccall "wxMenu_IsAttached" wxMenu_IsAttached :: Ptr (TMenu a) -> IO CBool
+
+-- | usage: (@menuIsChecked obj id@).
+menuIsChecked :: Menu  a -> Id ->  IO Bool
+menuIsChecked _obj id 
+  = withBoolResult $
+    withObjectRef "menuIsChecked" _obj $ \cobj__obj -> 
+    wxMenu_IsChecked cobj__obj  (toCInt id)  
+foreign import ccall "wxMenu_IsChecked" wxMenu_IsChecked :: Ptr (TMenu a) -> CInt -> IO CBool
+
+-- | usage: (@menuIsEnabled obj id@).
+menuIsEnabled :: Menu  a -> Id ->  IO Bool
+menuIsEnabled _obj id 
+  = withBoolResult $
+    withObjectRef "menuIsEnabled" _obj $ \cobj__obj -> 
+    wxMenu_IsEnabled cobj__obj  (toCInt id)  
+foreign import ccall "wxMenu_IsEnabled" wxMenu_IsEnabled :: Ptr (TMenu a) -> CInt -> IO CBool
+
+-- | usage: (@menuItemCheck obj check@).
+menuItemCheck :: MenuItem  a -> Bool ->  IO ()
+menuItemCheck _obj check 
+  = withObjectRef "menuItemCheck" _obj $ \cobj__obj -> 
+    wxMenuItem_Check cobj__obj  (toCBool check)  
+foreign import ccall "wxMenuItem_Check" wxMenuItem_Check :: Ptr (TMenuItem a) -> CBool -> IO ()
+
+-- | usage: (@menuItemCreate@).
+menuItemCreate ::  IO (MenuItem  ())
+menuItemCreate 
+  = withObjectResult $
+    wxMenuItem_Create 
+foreign import ccall "wxMenuItem_Create" wxMenuItem_Create :: IO (Ptr (TMenuItem ()))
+
+-- | usage: (@menuItemCreateEx id label help itemkind submenu@).
+menuItemCreateEx :: Id -> String -> String -> Int -> Menu  e ->  IO (MenuItem  ())
+menuItemCreateEx id label help itemkind submenu 
+  = withObjectResult $
+    withStringPtr label $ \cobj_label -> 
+    withStringPtr help $ \cobj_help -> 
+    withObjectPtr submenu $ \cobj_submenu -> 
+    wxMenuItem_CreateEx (toCInt id)  cobj_label  cobj_help  (toCInt itemkind)  cobj_submenu  
+foreign import ccall "wxMenuItem_CreateEx" wxMenuItem_CreateEx :: CInt -> Ptr (TWxString b) -> Ptr (TWxString c) -> CInt -> Ptr (TMenu e) -> IO (Ptr (TMenuItem ()))
+
+-- | usage: (@menuItemCreateSeparator@).
+menuItemCreateSeparator ::  IO (MenuItem  ())
+menuItemCreateSeparator 
+  = withObjectResult $
+    wxMenuItem_CreateSeparator 
+foreign import ccall "wxMenuItem_CreateSeparator" wxMenuItem_CreateSeparator :: IO (Ptr (TMenuItem ()))
+
+-- | usage: (@menuItemDelete obj@).
+menuItemDelete :: MenuItem  a ->  IO ()
+menuItemDelete
+  = objectDelete
+
+
+-- | usage: (@menuItemEnable obj enable@).
+menuItemEnable :: MenuItem  a -> Bool ->  IO ()
+menuItemEnable _obj enable 
+  = withObjectRef "menuItemEnable" _obj $ \cobj__obj -> 
+    wxMenuItem_Enable cobj__obj  (toCBool enable)  
+foreign import ccall "wxMenuItem_Enable" wxMenuItem_Enable :: Ptr (TMenuItem a) -> CBool -> IO ()
+
+-- | usage: (@menuItemGetHelp obj@).
+menuItemGetHelp :: MenuItem  a ->  IO (String)
+menuItemGetHelp _obj 
+  = withManagedStringResult $
+    withObjectRef "menuItemGetHelp" _obj $ \cobj__obj -> 
+    wxMenuItem_GetHelp cobj__obj  
+foreign import ccall "wxMenuItem_GetHelp" wxMenuItem_GetHelp :: Ptr (TMenuItem a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@menuItemGetId obj@).
+menuItemGetId :: MenuItem  a ->  IO Int
+menuItemGetId _obj 
+  = withIntResult $
+    withObjectRef "menuItemGetId" _obj $ \cobj__obj -> 
+    wxMenuItem_GetId cobj__obj  
+foreign import ccall "wxMenuItem_GetId" wxMenuItem_GetId :: Ptr (TMenuItem a) -> IO CInt
+
+-- | usage: (@menuItemGetItemLabel obj@).
+menuItemGetItemLabel :: MenuItem  a ->  IO (String)
+menuItemGetItemLabel _obj 
+  = withManagedStringResult $
+    withObjectRef "menuItemGetItemLabel" _obj $ \cobj__obj -> 
+    wxMenuItem_GetItemLabel cobj__obj  
+foreign import ccall "wxMenuItem_GetItemLabel" wxMenuItem_GetItemLabel :: Ptr (TMenuItem a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@menuItemGetItemLabelText obj@).
+menuItemGetItemLabelText :: MenuItem  a ->  IO (String)
+menuItemGetItemLabelText _obj 
+  = withManagedStringResult $
+    withObjectRef "menuItemGetItemLabelText" _obj $ \cobj__obj -> 
+    wxMenuItem_GetItemLabelText cobj__obj  
+foreign import ccall "wxMenuItem_GetItemLabelText" wxMenuItem_GetItemLabelText :: Ptr (TMenuItem a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@menuItemGetLabelText text@).
+menuItemGetLabelText :: String ->  IO (String)
+menuItemGetLabelText text 
+  = withManagedStringResult $
+    withCWString text $ \cstr_text -> 
+    wxMenuItem_GetLabelText cstr_text  
+foreign import ccall "wxMenuItem_GetLabelText" wxMenuItem_GetLabelText :: CWString -> IO (Ptr (TWxString ()))
+
+-- | usage: (@menuItemGetMenu obj@).
+menuItemGetMenu :: MenuItem  a ->  IO (Menu  ())
+menuItemGetMenu _obj 
+  = withObjectResult $
+    withObjectRef "menuItemGetMenu" _obj $ \cobj__obj -> 
+    wxMenuItem_GetMenu cobj__obj  
+foreign import ccall "wxMenuItem_GetMenu" wxMenuItem_GetMenu :: Ptr (TMenuItem a) -> IO (Ptr (TMenu ()))
+
+-- | usage: (@menuItemGetSubMenu obj@).
+menuItemGetSubMenu :: MenuItem  a ->  IO (Menu  ())
+menuItemGetSubMenu _obj 
+  = withObjectResult $
+    withObjectRef "menuItemGetSubMenu" _obj $ \cobj__obj -> 
+    wxMenuItem_GetSubMenu cobj__obj  
+foreign import ccall "wxMenuItem_GetSubMenu" wxMenuItem_GetSubMenu :: Ptr (TMenuItem a) -> IO (Ptr (TMenu ()))
+
+-- | usage: (@menuItemIsCheckable obj@).
+menuItemIsCheckable :: MenuItem  a ->  IO Bool
+menuItemIsCheckable _obj 
+  = withBoolResult $
+    withObjectRef "menuItemIsCheckable" _obj $ \cobj__obj -> 
+    wxMenuItem_IsCheckable cobj__obj  
+foreign import ccall "wxMenuItem_IsCheckable" wxMenuItem_IsCheckable :: Ptr (TMenuItem a) -> IO CBool
+
+-- | usage: (@menuItemIsChecked obj@).
+menuItemIsChecked :: MenuItem  a ->  IO Bool
+menuItemIsChecked _obj 
+  = withBoolResult $
+    withObjectRef "menuItemIsChecked" _obj $ \cobj__obj -> 
+    wxMenuItem_IsChecked cobj__obj  
+foreign import ccall "wxMenuItem_IsChecked" wxMenuItem_IsChecked :: Ptr (TMenuItem a) -> IO CBool
+
+-- | usage: (@menuItemIsEnabled obj@).
+menuItemIsEnabled :: MenuItem  a ->  IO Bool
+menuItemIsEnabled _obj 
+  = withBoolResult $
+    withObjectRef "menuItemIsEnabled" _obj $ \cobj__obj -> 
+    wxMenuItem_IsEnabled cobj__obj  
+foreign import ccall "wxMenuItem_IsEnabled" wxMenuItem_IsEnabled :: Ptr (TMenuItem a) -> IO CBool
+
+-- | usage: (@menuItemIsSeparator obj@).
+menuItemIsSeparator :: MenuItem  a ->  IO Bool
+menuItemIsSeparator _obj 
+  = withBoolResult $
+    withObjectRef "menuItemIsSeparator" _obj $ \cobj__obj -> 
+    wxMenuItem_IsSeparator cobj__obj  
+foreign import ccall "wxMenuItem_IsSeparator" wxMenuItem_IsSeparator :: Ptr (TMenuItem a) -> IO CBool
+
+-- | usage: (@menuItemIsSubMenu obj@).
+menuItemIsSubMenu :: MenuItem  a ->  IO Bool
+menuItemIsSubMenu _obj 
+  = withBoolResult $
+    withObjectRef "menuItemIsSubMenu" _obj $ \cobj__obj -> 
+    wxMenuItem_IsSubMenu cobj__obj  
+foreign import ccall "wxMenuItem_IsSubMenu" wxMenuItem_IsSubMenu :: Ptr (TMenuItem a) -> IO CBool
+
+-- | usage: (@menuItemSetCheckable obj checkable@).
+menuItemSetCheckable :: MenuItem  a -> Bool ->  IO ()
+menuItemSetCheckable _obj checkable 
+  = withObjectRef "menuItemSetCheckable" _obj $ \cobj__obj -> 
+    wxMenuItem_SetCheckable cobj__obj  (toCBool checkable)  
+foreign import ccall "wxMenuItem_SetCheckable" wxMenuItem_SetCheckable :: Ptr (TMenuItem a) -> CBool -> IO ()
+
+-- | usage: (@menuItemSetHelp obj str@).
+menuItemSetHelp :: MenuItem  a -> String ->  IO ()
+menuItemSetHelp _obj str 
+  = withObjectRef "menuItemSetHelp" _obj $ \cobj__obj -> 
+    withStringPtr str $ \cobj_str -> 
+    wxMenuItem_SetHelp cobj__obj  cobj_str  
+foreign import ccall "wxMenuItem_SetHelp" wxMenuItem_SetHelp :: Ptr (TMenuItem a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@menuItemSetId obj id@).
+menuItemSetId :: MenuItem  a -> Id ->  IO ()
+menuItemSetId _obj id 
+  = withObjectRef "menuItemSetId" _obj $ \cobj__obj -> 
+    wxMenuItem_SetId cobj__obj  (toCInt id)  
+foreign import ccall "wxMenuItem_SetId" wxMenuItem_SetId :: Ptr (TMenuItem a) -> CInt -> IO ()
+
+-- | usage: (@menuItemSetItemLabel obj str@).
+menuItemSetItemLabel :: MenuItem  a -> String ->  IO ()
+menuItemSetItemLabel _obj str 
+  = withObjectRef "menuItemSetItemLabel" _obj $ \cobj__obj -> 
+    withStringPtr str $ \cobj_str -> 
+    wxMenuItem_SetItemLabel cobj__obj  cobj_str  
+foreign import ccall "wxMenuItem_SetItemLabel" wxMenuItem_SetItemLabel :: Ptr (TMenuItem a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@menuItemSetSubMenu obj menu@).
+menuItemSetSubMenu :: MenuItem  a -> Menu  b ->  IO ()
+menuItemSetSubMenu _obj menu 
+  = withObjectRef "menuItemSetSubMenu" _obj $ \cobj__obj -> 
+    withObjectPtr menu $ \cobj_menu -> 
+    wxMenuItem_SetSubMenu cobj__obj  cobj_menu  
+foreign import ccall "wxMenuItem_SetSubMenu" wxMenuItem_SetSubMenu :: Ptr (TMenuItem a) -> Ptr (TMenu b) -> IO ()
+
+-- | usage: (@menuPrepend obj id text help isCheckable@).
+menuPrepend :: Menu  a -> Id -> String -> String -> Bool ->  IO ()
+menuPrepend _obj id text help isCheckable 
+  = withObjectRef "menuPrepend" _obj $ \cobj__obj -> 
+    withStringPtr text $ \cobj_text -> 
+    withStringPtr help $ \cobj_help -> 
+    wxMenu_Prepend cobj__obj  (toCInt id)  cobj_text  cobj_help  (toCBool isCheckable)  
+foreign import ccall "wxMenu_Prepend" wxMenu_Prepend :: Ptr (TMenu a) -> CInt -> Ptr (TWxString c) -> Ptr (TWxString d) -> CBool -> IO ()
+
+-- | usage: (@menuPrependItem obj itm@).
+menuPrependItem :: Menu  a -> MenuItem  b ->  IO ()
+menuPrependItem _obj _itm 
+  = withObjectRef "menuPrependItem" _obj $ \cobj__obj -> 
+    withObjectPtr _itm $ \cobj__itm -> 
+    wxMenu_PrependItem cobj__obj  cobj__itm  
+foreign import ccall "wxMenu_PrependItem" wxMenu_PrependItem :: Ptr (TMenu a) -> Ptr (TMenuItem b) -> IO ()
+
+-- | usage: (@menuPrependSub obj id text submenu help@).
+menuPrependSub :: Menu  a -> Id -> String -> Menu  d -> String ->  IO ()
+menuPrependSub _obj id text submenu help 
+  = withObjectRef "menuPrependSub" _obj $ \cobj__obj -> 
+    withStringPtr text $ \cobj_text -> 
+    withObjectPtr submenu $ \cobj_submenu -> 
+    withStringPtr help $ \cobj_help -> 
+    wxMenu_PrependSub cobj__obj  (toCInt id)  cobj_text  cobj_submenu  cobj_help  
+foreign import ccall "wxMenu_PrependSub" wxMenu_PrependSub :: Ptr (TMenu a) -> CInt -> Ptr (TWxString c) -> Ptr (TMenu d) -> Ptr (TWxString e) -> IO ()
+
+-- | usage: (@menuRemoveById obj id itm@).
+menuRemoveById :: Menu  a -> Id -> MenuItem  c ->  IO ()
+menuRemoveById _obj id _itm 
+  = withObjectRef "menuRemoveById" _obj $ \cobj__obj -> 
+    withObjectPtr _itm $ \cobj__itm -> 
+    wxMenu_RemoveById cobj__obj  (toCInt id)  cobj__itm  
+foreign import ccall "wxMenu_RemoveById" wxMenu_RemoveById :: Ptr (TMenu a) -> CInt -> Ptr (TMenuItem c) -> IO ()
+
+-- | usage: (@menuRemoveByItem obj item@).
+menuRemoveByItem :: Menu  a -> Ptr  b ->  IO ()
+menuRemoveByItem _obj item 
+  = withObjectRef "menuRemoveByItem" _obj $ \cobj__obj -> 
+    wxMenu_RemoveByItem cobj__obj  item  
+foreign import ccall "wxMenu_RemoveByItem" wxMenu_RemoveByItem :: Ptr (TMenu a) -> Ptr  b -> IO ()
+
+-- | usage: (@menuSetClientData obj clientData@).
+menuSetClientData :: Menu  a -> ClientData  b ->  IO ()
+menuSetClientData _obj clientData 
+  = withObjectRef "menuSetClientData" _obj $ \cobj__obj -> 
+    withObjectPtr clientData $ \cobj_clientData -> 
+    wxMenu_SetClientData cobj__obj  cobj_clientData  
+foreign import ccall "wxMenu_SetClientData" wxMenu_SetClientData :: Ptr (TMenu a) -> Ptr (TClientData b) -> IO ()
+
+-- | usage: (@menuSetEventHandler obj handler@).
+menuSetEventHandler :: Menu  a -> EvtHandler  b ->  IO ()
+menuSetEventHandler _obj handler 
+  = withObjectRef "menuSetEventHandler" _obj $ \cobj__obj -> 
+    withObjectPtr handler $ \cobj_handler -> 
+    wxMenu_SetEventHandler cobj__obj  cobj_handler  
+foreign import ccall "wxMenu_SetEventHandler" wxMenu_SetEventHandler :: Ptr (TMenu a) -> Ptr (TEvtHandler b) -> IO ()
+
+-- | usage: (@menuSetHelpString obj id helpString@).
+menuSetHelpString :: Menu  a -> Id -> String ->  IO ()
+menuSetHelpString _obj id helpString 
+  = withObjectRef "menuSetHelpString" _obj $ \cobj__obj -> 
+    withStringPtr helpString $ \cobj_helpString -> 
+    wxMenu_SetHelpString cobj__obj  (toCInt id)  cobj_helpString  
+foreign import ccall "wxMenu_SetHelpString" wxMenu_SetHelpString :: Ptr (TMenu a) -> CInt -> Ptr (TWxString c) -> IO ()
+
+-- | usage: (@menuSetInvokingWindow obj win@).
+menuSetInvokingWindow :: Menu  a -> Window  b ->  IO ()
+menuSetInvokingWindow _obj win 
+  = withObjectRef "menuSetInvokingWindow" _obj $ \cobj__obj -> 
+    withObjectPtr win $ \cobj_win -> 
+    wxMenu_SetInvokingWindow cobj__obj  cobj_win  
+foreign import ccall "wxMenu_SetInvokingWindow" wxMenu_SetInvokingWindow :: Ptr (TMenu a) -> Ptr (TWindow b) -> IO ()
+
+-- | usage: (@menuSetLabel obj id label@).
+menuSetLabel :: Menu  a -> Id -> String ->  IO ()
+menuSetLabel _obj id label 
+  = withObjectRef "menuSetLabel" _obj $ \cobj__obj -> 
+    withStringPtr label $ \cobj_label -> 
+    wxMenu_SetLabel cobj__obj  (toCInt id)  cobj_label  
+foreign import ccall "wxMenu_SetLabel" wxMenu_SetLabel :: Ptr (TMenu a) -> CInt -> Ptr (TWxString c) -> IO ()
+
+-- | usage: (@menuSetParent obj parent@).
+menuSetParent :: Menu  a -> Window  b ->  IO ()
+menuSetParent _obj parent 
+  = withObjectRef "menuSetParent" _obj $ \cobj__obj -> 
+    withObjectPtr parent $ \cobj_parent -> 
+    wxMenu_SetParent cobj__obj  cobj_parent  
+foreign import ccall "wxMenu_SetParent" wxMenu_SetParent :: Ptr (TMenu a) -> Ptr (TWindow b) -> IO ()
+
+-- | usage: (@menuSetTitle obj title@).
+menuSetTitle :: Menu  a -> String ->  IO ()
+menuSetTitle _obj title 
+  = withObjectRef "menuSetTitle" _obj $ \cobj__obj -> 
+    withStringPtr title $ \cobj_title -> 
+    wxMenu_SetTitle cobj__obj  cobj_title  
+foreign import ccall "wxMenu_SetTitle" wxMenu_SetTitle :: Ptr (TMenu a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@menuUpdateUI obj source@).
+menuUpdateUI :: Menu  a -> Ptr  b ->  IO ()
+menuUpdateUI _obj source 
+  = withObjectRef "menuUpdateUI" _obj $ \cobj__obj -> 
+    wxMenu_UpdateUI cobj__obj  source  
+foreign import ccall "wxMenu_UpdateUI" wxMenu_UpdateUI :: Ptr (TMenu a) -> Ptr  b -> IO ()
+
+-- | usage: (@messageDialogCreate prt msg cap stl@).
+messageDialogCreate :: Window  a -> String -> String -> Style ->  IO (MessageDialog  ())
+messageDialogCreate _prt _msg _cap _stl 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    withStringPtr _msg $ \cobj__msg -> 
+    withStringPtr _cap $ \cobj__cap -> 
+    wxMessageDialog_Create cobj__prt  cobj__msg  cobj__cap  (toCInt _stl)  
+foreign import ccall "wxMessageDialog_Create" wxMessageDialog_Create :: Ptr (TWindow a) -> Ptr (TWxString b) -> Ptr (TWxString c) -> CInt -> IO (Ptr (TMessageDialog ()))
+
+-- | usage: (@messageDialogDelete obj@).
+messageDialogDelete :: MessageDialog  a ->  IO ()
+messageDialogDelete
+  = objectDelete
+
+
+-- | usage: (@messageDialogShowModal obj@).
+messageDialogShowModal :: MessageDialog  a ->  IO Int
+messageDialogShowModal _obj 
+  = withIntResult $
+    withObjectRef "messageDialogShowModal" _obj $ \cobj__obj -> 
+    wxMessageDialog_ShowModal cobj__obj  
+foreign import ccall "wxMessageDialog_ShowModal" wxMessageDialog_ShowModal :: Ptr (TMessageDialog a) -> IO CInt
+
+-- | usage: (@metafileCreate file@).
+metafileCreate :: String ->  IO (Metafile  ())
+metafileCreate _file 
+  = withObjectResult $
+    withStringPtr _file $ \cobj__file -> 
+    wxMetafile_Create cobj__file  
+foreign import ccall "wxMetafile_Create" wxMetafile_Create :: Ptr (TWxString a) -> IO (Ptr (TMetafile ()))
+
+-- | usage: (@metafileDCClose obj@).
+metafileDCClose :: MetafileDC  a ->  IO (Ptr  ())
+metafileDCClose _obj 
+  = withObjectRef "metafileDCClose" _obj $ \cobj__obj -> 
+    wxMetafileDC_Close cobj__obj  
+foreign import ccall "wxMetafileDC_Close" wxMetafileDC_Close :: Ptr (TMetafileDC a) -> IO (Ptr  ())
+
+-- | usage: (@metafileDCCreate file@).
+metafileDCCreate :: String ->  IO (MetafileDC  ())
+metafileDCCreate _file 
+  = withObjectResult $
+    withStringPtr _file $ \cobj__file -> 
+    wxMetafileDC_Create cobj__file  
+foreign import ccall "wxMetafileDC_Create" wxMetafileDC_Create :: Ptr (TWxString a) -> IO (Ptr (TMetafileDC ()))
+
+-- | usage: (@metafileDCDelete obj@).
+metafileDCDelete :: MetafileDC  a ->  IO ()
+metafileDCDelete
+  = objectDelete
+
+
+-- | usage: (@metafileDelete obj@).
+metafileDelete :: Metafile  a ->  IO ()
+metafileDelete
+  = objectDelete
+
+
+-- | usage: (@metafileIsOk obj@).
+metafileIsOk :: Metafile  a ->  IO Bool
+metafileIsOk _obj 
+  = withBoolResult $
+    withObjectRef "metafileIsOk" _obj $ \cobj__obj -> 
+    wxMetafile_IsOk cobj__obj  
+foreign import ccall "wxMetafile_IsOk" wxMetafile_IsOk :: Ptr (TMetafile a) -> IO CBool
+
+-- | usage: (@metafilePlay obj dc@).
+metafilePlay :: Metafile  a -> DC  b ->  IO Bool
+metafilePlay _obj _dc 
+  = withBoolResult $
+    withObjectRef "metafilePlay" _obj $ \cobj__obj -> 
+    withObjectPtr _dc $ \cobj__dc -> 
+    wxMetafile_Play cobj__obj  cobj__dc  
+foreign import ccall "wxMetafile_Play" wxMetafile_Play :: Ptr (TMetafile a) -> Ptr (TDC b) -> IO CBool
+
+-- | usage: (@metafileSetClipboard obj widthheight@).
+metafileSetClipboard :: Metafile  a -> Size ->  IO Bool
+metafileSetClipboard _obj widthheight 
+  = withBoolResult $
+    withObjectRef "metafileSetClipboard" _obj $ \cobj__obj -> 
+    wxMetafile_SetClipboard cobj__obj  (toCIntSizeW widthheight) (toCIntSizeH widthheight)  
+foreign import ccall "wxMetafile_SetClipboard" wxMetafile_SetClipboard :: Ptr (TMetafile a) -> CInt -> CInt -> IO CBool
+
+-- | usage: (@mimeTypesManagerAddFallbacks obj types@).
+mimeTypesManagerAddFallbacks :: MimeTypesManager  a -> Ptr  b ->  IO ()
+mimeTypesManagerAddFallbacks _obj _types 
+  = withObjectRef "mimeTypesManagerAddFallbacks" _obj $ \cobj__obj -> 
+    wxMimeTypesManager_AddFallbacks cobj__obj  _types  
+foreign import ccall "wxMimeTypesManager_AddFallbacks" wxMimeTypesManager_AddFallbacks :: Ptr (TMimeTypesManager a) -> Ptr  b -> IO ()
+
+-- | usage: (@mimeTypesManagerCreate@).
+mimeTypesManagerCreate ::  IO (MimeTypesManager  ())
+mimeTypesManagerCreate 
+  = withObjectResult $
+    wxMimeTypesManager_Create 
+foreign import ccall "wxMimeTypesManager_Create" wxMimeTypesManager_Create :: IO (Ptr (TMimeTypesManager ()))
+
+-- | usage: (@mimeTypesManagerEnumAllFileTypes obj lst@).
+mimeTypesManagerEnumAllFileTypes :: MimeTypesManager  a -> List  b ->  IO Int
+mimeTypesManagerEnumAllFileTypes _obj _lst 
+  = withIntResult $
+    withObjectRef "mimeTypesManagerEnumAllFileTypes" _obj $ \cobj__obj -> 
+    withObjectPtr _lst $ \cobj__lst -> 
+    wxMimeTypesManager_EnumAllFileTypes cobj__obj  cobj__lst  
+foreign import ccall "wxMimeTypesManager_EnumAllFileTypes" wxMimeTypesManager_EnumAllFileTypes :: Ptr (TMimeTypesManager a) -> Ptr (TList b) -> IO CInt
+
+-- | usage: (@mimeTypesManagerGetFileTypeFromExtension obj ext@).
+mimeTypesManagerGetFileTypeFromExtension :: MimeTypesManager  a -> String ->  IO (FileType  ())
+mimeTypesManagerGetFileTypeFromExtension _obj _ext 
+  = withObjectResult $
+    withObjectRef "mimeTypesManagerGetFileTypeFromExtension" _obj $ \cobj__obj -> 
+    withStringPtr _ext $ \cobj__ext -> 
+    wxMimeTypesManager_GetFileTypeFromExtension cobj__obj  cobj__ext  
+foreign import ccall "wxMimeTypesManager_GetFileTypeFromExtension" wxMimeTypesManager_GetFileTypeFromExtension :: Ptr (TMimeTypesManager a) -> Ptr (TWxString b) -> IO (Ptr (TFileType ()))
+
+-- | usage: (@mimeTypesManagerGetFileTypeFromMimeType obj name@).
+mimeTypesManagerGetFileTypeFromMimeType :: MimeTypesManager  a -> String ->  IO (FileType  ())
+mimeTypesManagerGetFileTypeFromMimeType _obj _name 
+  = withObjectResult $
+    withObjectRef "mimeTypesManagerGetFileTypeFromMimeType" _obj $ \cobj__obj -> 
+    withStringPtr _name $ \cobj__name -> 
+    wxMimeTypesManager_GetFileTypeFromMimeType cobj__obj  cobj__name  
+foreign import ccall "wxMimeTypesManager_GetFileTypeFromMimeType" wxMimeTypesManager_GetFileTypeFromMimeType :: Ptr (TMimeTypesManager a) -> Ptr (TWxString b) -> IO (Ptr (TFileType ()))
+
+-- | usage: (@mimeTypesManagerIsOfType obj wxtype wildcard@).
+mimeTypesManagerIsOfType :: MimeTypesManager  a -> String -> String ->  IO Bool
+mimeTypesManagerIsOfType _obj _type _wildcard 
+  = withBoolResult $
+    withObjectRef "mimeTypesManagerIsOfType" _obj $ \cobj__obj -> 
+    withStringPtr _type $ \cobj__type -> 
+    withStringPtr _wildcard $ \cobj__wildcard -> 
+    wxMimeTypesManager_IsOfType cobj__obj  cobj__type  cobj__wildcard  
+foreign import ccall "wxMimeTypesManager_IsOfType" wxMimeTypesManager_IsOfType :: Ptr (TMimeTypesManager a) -> Ptr (TWxString b) -> Ptr (TWxString c) -> IO CBool
+
+-- | usage: (@miniFrameCreate prt id txt lfttopwdthgt stl@).
+miniFrameCreate :: Window  a -> Id -> String -> Rect -> Style ->  IO (MiniFrame  ())
+miniFrameCreate _prt _id _txt _lfttopwdthgt _stl 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    withStringPtr _txt $ \cobj__txt -> 
+    wxMiniFrame_Create cobj__prt  (toCInt _id)  cobj__txt  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
+foreign import ccall "wxMiniFrame_Create" wxMiniFrame_Create :: Ptr (TWindow a) -> CInt -> Ptr (TWxString c) -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TMiniFrame ()))
+
+-- | usage: (@mirrorDCCreate dc@).
+mirrorDCCreate :: DC  a ->  IO (MirrorDC  ())
+mirrorDCCreate dc 
+  = withObjectResult $
+    withObjectPtr dc $ \cobj_dc -> 
+    wxMirrorDC_Create cobj_dc  
+foreign import ccall "wxMirrorDC_Create" wxMirrorDC_Create :: Ptr (TDC a) -> IO (Ptr (TMirrorDC ()))
+
+-- | usage: (@mirrorDCDelete obj@).
+mirrorDCDelete :: MemoryDC  a ->  IO ()
+mirrorDCDelete _obj 
+  = withObjectPtr _obj $ \cobj__obj -> 
+    wxMirrorDC_Delete cobj__obj  
+foreign import ccall "wxMirrorDC_Delete" wxMirrorDC_Delete :: Ptr (TMemoryDC a) -> IO ()
+
+-- | usage: (@mouseEventAltDown obj@).
+mouseEventAltDown :: MouseEvent  a ->  IO Bool
+mouseEventAltDown _obj 
+  = withBoolResult $
+    withObjectRef "mouseEventAltDown" _obj $ \cobj__obj -> 
+    wxMouseEvent_AltDown cobj__obj  
+foreign import ccall "wxMouseEvent_AltDown" wxMouseEvent_AltDown :: Ptr (TMouseEvent a) -> IO CBool
+
+-- | usage: (@mouseEventButton obj but@).
+mouseEventButton :: MouseEvent  a -> Int ->  IO Bool
+mouseEventButton _obj but 
+  = withBoolResult $
+    withObjectRef "mouseEventButton" _obj $ \cobj__obj -> 
+    wxMouseEvent_Button cobj__obj  (toCInt but)  
+foreign import ccall "wxMouseEvent_Button" wxMouseEvent_Button :: Ptr (TMouseEvent a) -> CInt -> IO CBool
+
+-- | usage: (@mouseEventButtonDClick obj but@).
+mouseEventButtonDClick :: MouseEvent  a -> Int ->  IO Bool
+mouseEventButtonDClick _obj but 
+  = withBoolResult $
+    withObjectRef "mouseEventButtonDClick" _obj $ \cobj__obj -> 
+    wxMouseEvent_ButtonDClick cobj__obj  (toCInt but)  
+foreign import ccall "wxMouseEvent_ButtonDClick" wxMouseEvent_ButtonDClick :: Ptr (TMouseEvent a) -> CInt -> IO CBool
+
+-- | usage: (@mouseEventButtonDown obj but@).
+mouseEventButtonDown :: MouseEvent  a -> Int ->  IO Bool
+mouseEventButtonDown _obj but 
+  = withBoolResult $
+    withObjectRef "mouseEventButtonDown" _obj $ \cobj__obj -> 
+    wxMouseEvent_ButtonDown cobj__obj  (toCInt but)  
+foreign import ccall "wxMouseEvent_ButtonDown" wxMouseEvent_ButtonDown :: Ptr (TMouseEvent a) -> CInt -> IO CBool
+
+-- | usage: (@mouseEventButtonIsDown obj but@).
+mouseEventButtonIsDown :: MouseEvent  a -> Int ->  IO Bool
+mouseEventButtonIsDown _obj but 
+  = withBoolResult $
+    withObjectRef "mouseEventButtonIsDown" _obj $ \cobj__obj -> 
+    wxMouseEvent_ButtonIsDown cobj__obj  (toCInt but)  
+foreign import ccall "wxMouseEvent_ButtonIsDown" wxMouseEvent_ButtonIsDown :: Ptr (TMouseEvent a) -> CInt -> IO CBool
+
+-- | usage: (@mouseEventButtonUp obj but@).
+mouseEventButtonUp :: MouseEvent  a -> Int ->  IO Bool
+mouseEventButtonUp _obj but 
+  = withBoolResult $
+    withObjectRef "mouseEventButtonUp" _obj $ \cobj__obj -> 
+    wxMouseEvent_ButtonUp cobj__obj  (toCInt but)  
+foreign import ccall "wxMouseEvent_ButtonUp" wxMouseEvent_ButtonUp :: Ptr (TMouseEvent a) -> CInt -> IO CBool
+
+-- | usage: (@mouseEventControlDown obj@).
+mouseEventControlDown :: MouseEvent  a ->  IO Bool
+mouseEventControlDown _obj 
+  = withBoolResult $
+    withObjectRef "mouseEventControlDown" _obj $ \cobj__obj -> 
+    wxMouseEvent_ControlDown cobj__obj  
+foreign import ccall "wxMouseEvent_ControlDown" wxMouseEvent_ControlDown :: Ptr (TMouseEvent a) -> IO CBool
+
+-- | usage: (@mouseEventCopyObject obj objectdest@).
+mouseEventCopyObject :: MouseEvent  a -> Ptr  b ->  IO ()
+mouseEventCopyObject _obj objectdest 
+  = withObjectRef "mouseEventCopyObject" _obj $ \cobj__obj -> 
+    wxMouseEvent_CopyObject cobj__obj  objectdest  
+foreign import ccall "wxMouseEvent_CopyObject" wxMouseEvent_CopyObject :: Ptr (TMouseEvent a) -> Ptr  b -> IO ()
+
+-- | usage: (@mouseEventDragging obj@).
+mouseEventDragging :: MouseEvent  a ->  IO Bool
+mouseEventDragging _obj 
+  = withBoolResult $
+    withObjectRef "mouseEventDragging" _obj $ \cobj__obj -> 
+    wxMouseEvent_Dragging cobj__obj  
+foreign import ccall "wxMouseEvent_Dragging" wxMouseEvent_Dragging :: Ptr (TMouseEvent a) -> IO CBool
+
+-- | usage: (@mouseEventEntering obj@).
+mouseEventEntering :: MouseEvent  a ->  IO Bool
+mouseEventEntering _obj 
+  = withBoolResult $
+    withObjectRef "mouseEventEntering" _obj $ \cobj__obj -> 
+    wxMouseEvent_Entering cobj__obj  
+foreign import ccall "wxMouseEvent_Entering" wxMouseEvent_Entering :: Ptr (TMouseEvent a) -> IO CBool
+
+-- | usage: (@mouseEventGetButton obj@).
+mouseEventGetButton :: MouseEvent  a ->  IO Int
+mouseEventGetButton _obj 
+  = withIntResult $
+    withObjectRef "mouseEventGetButton" _obj $ \cobj__obj -> 
+    wxMouseEvent_GetButton cobj__obj  
+foreign import ccall "wxMouseEvent_GetButton" wxMouseEvent_GetButton :: Ptr (TMouseEvent a) -> IO CInt
+
+-- | usage: (@mouseEventGetLogicalPosition obj dc@).
+mouseEventGetLogicalPosition :: MouseEvent  a -> DC  b ->  IO (Point)
+mouseEventGetLogicalPosition _obj dc 
+  = withWxPointResult $
+    withObjectRef "mouseEventGetLogicalPosition" _obj $ \cobj__obj -> 
+    withObjectPtr dc $ \cobj_dc -> 
+    wxMouseEvent_GetLogicalPosition cobj__obj  cobj_dc  
+foreign import ccall "wxMouseEvent_GetLogicalPosition" wxMouseEvent_GetLogicalPosition :: Ptr (TMouseEvent a) -> Ptr (TDC b) -> IO (Ptr (TWxPoint ()))
+
+-- | usage: (@mouseEventGetPosition obj@).
+mouseEventGetPosition :: MouseEvent  a ->  IO (Point)
+mouseEventGetPosition _obj 
+  = withWxPointResult $
+    withObjectRef "mouseEventGetPosition" _obj $ \cobj__obj -> 
+    wxMouseEvent_GetPosition cobj__obj  
+foreign import ccall "wxMouseEvent_GetPosition" wxMouseEvent_GetPosition :: Ptr (TMouseEvent a) -> IO (Ptr (TWxPoint ()))
+
+-- | usage: (@mouseEventGetWheelDelta obj@).
+mouseEventGetWheelDelta :: MouseEvent  a ->  IO Int
+mouseEventGetWheelDelta _obj 
+  = withIntResult $
+    withObjectRef "mouseEventGetWheelDelta" _obj $ \cobj__obj -> 
+    wxMouseEvent_GetWheelDelta cobj__obj  
+foreign import ccall "wxMouseEvent_GetWheelDelta" wxMouseEvent_GetWheelDelta :: Ptr (TMouseEvent a) -> IO CInt
+
+-- | usage: (@mouseEventGetWheelRotation obj@).
+mouseEventGetWheelRotation :: MouseEvent  a ->  IO Int
+mouseEventGetWheelRotation _obj 
+  = withIntResult $
+    withObjectRef "mouseEventGetWheelRotation" _obj $ \cobj__obj -> 
+    wxMouseEvent_GetWheelRotation cobj__obj  
+foreign import ccall "wxMouseEvent_GetWheelRotation" wxMouseEvent_GetWheelRotation :: Ptr (TMouseEvent a) -> IO CInt
+
+-- | usage: (@mouseEventGetX obj@).
+mouseEventGetX :: MouseEvent  a ->  IO Int
+mouseEventGetX _obj 
+  = withIntResult $
+    withObjectRef "mouseEventGetX" _obj $ \cobj__obj -> 
+    wxMouseEvent_GetX cobj__obj  
+foreign import ccall "wxMouseEvent_GetX" wxMouseEvent_GetX :: Ptr (TMouseEvent a) -> IO CInt
+
+-- | usage: (@mouseEventGetY obj@).
+mouseEventGetY :: MouseEvent  a ->  IO Int
+mouseEventGetY _obj 
+  = withIntResult $
+    withObjectRef "mouseEventGetY" _obj $ \cobj__obj -> 
+    wxMouseEvent_GetY cobj__obj  
+foreign import ccall "wxMouseEvent_GetY" wxMouseEvent_GetY :: Ptr (TMouseEvent a) -> IO CInt
+
+-- | usage: (@mouseEventIsButton obj@).
+mouseEventIsButton :: MouseEvent  a ->  IO Bool
+mouseEventIsButton _obj 
+  = withBoolResult $
+    withObjectRef "mouseEventIsButton" _obj $ \cobj__obj -> 
+    wxMouseEvent_IsButton cobj__obj  
+foreign import ccall "wxMouseEvent_IsButton" wxMouseEvent_IsButton :: Ptr (TMouseEvent a) -> IO CBool
+
+-- | usage: (@mouseEventLeaving obj@).
+mouseEventLeaving :: MouseEvent  a ->  IO Bool
+mouseEventLeaving _obj 
+  = withBoolResult $
+    withObjectRef "mouseEventLeaving" _obj $ \cobj__obj -> 
+    wxMouseEvent_Leaving cobj__obj  
+foreign import ccall "wxMouseEvent_Leaving" wxMouseEvent_Leaving :: Ptr (TMouseEvent a) -> IO CBool
+
+-- | usage: (@mouseEventLeftDClick obj@).
+mouseEventLeftDClick :: MouseEvent  a ->  IO Bool
+mouseEventLeftDClick _obj 
+  = withBoolResult $
+    withObjectRef "mouseEventLeftDClick" _obj $ \cobj__obj -> 
+    wxMouseEvent_LeftDClick cobj__obj  
+foreign import ccall "wxMouseEvent_LeftDClick" wxMouseEvent_LeftDClick :: Ptr (TMouseEvent a) -> IO CBool
+
+-- | usage: (@mouseEventLeftDown obj@).
+mouseEventLeftDown :: MouseEvent  a ->  IO Bool
+mouseEventLeftDown _obj 
+  = withBoolResult $
+    withObjectRef "mouseEventLeftDown" _obj $ \cobj__obj -> 
+    wxMouseEvent_LeftDown cobj__obj  
+foreign import ccall "wxMouseEvent_LeftDown" wxMouseEvent_LeftDown :: Ptr (TMouseEvent a) -> IO CBool
+
+-- | usage: (@mouseEventLeftIsDown obj@).
+mouseEventLeftIsDown :: MouseEvent  a ->  IO Bool
+mouseEventLeftIsDown _obj 
+  = withBoolResult $
+    withObjectRef "mouseEventLeftIsDown" _obj $ \cobj__obj -> 
+    wxMouseEvent_LeftIsDown cobj__obj  
+foreign import ccall "wxMouseEvent_LeftIsDown" wxMouseEvent_LeftIsDown :: Ptr (TMouseEvent a) -> IO CBool
+
+-- | usage: (@mouseEventLeftUp obj@).
+mouseEventLeftUp :: MouseEvent  a ->  IO Bool
+mouseEventLeftUp _obj 
+  = withBoolResult $
+    withObjectRef "mouseEventLeftUp" _obj $ \cobj__obj -> 
+    wxMouseEvent_LeftUp cobj__obj  
+foreign import ccall "wxMouseEvent_LeftUp" wxMouseEvent_LeftUp :: Ptr (TMouseEvent a) -> IO CBool
+
+-- | usage: (@mouseEventMetaDown obj@).
+mouseEventMetaDown :: MouseEvent  a ->  IO Bool
+mouseEventMetaDown _obj 
+  = withBoolResult $
+    withObjectRef "mouseEventMetaDown" _obj $ \cobj__obj -> 
+    wxMouseEvent_MetaDown cobj__obj  
+foreign import ccall "wxMouseEvent_MetaDown" wxMouseEvent_MetaDown :: Ptr (TMouseEvent a) -> IO CBool
+
+-- | usage: (@mouseEventMiddleDClick obj@).
+mouseEventMiddleDClick :: MouseEvent  a ->  IO Bool
+mouseEventMiddleDClick _obj 
+  = withBoolResult $
+    withObjectRef "mouseEventMiddleDClick" _obj $ \cobj__obj -> 
+    wxMouseEvent_MiddleDClick cobj__obj  
+foreign import ccall "wxMouseEvent_MiddleDClick" wxMouseEvent_MiddleDClick :: Ptr (TMouseEvent a) -> IO CBool
+
+-- | usage: (@mouseEventMiddleDown obj@).
+mouseEventMiddleDown :: MouseEvent  a ->  IO Bool
+mouseEventMiddleDown _obj 
+  = withBoolResult $
+    withObjectRef "mouseEventMiddleDown" _obj $ \cobj__obj -> 
+    wxMouseEvent_MiddleDown cobj__obj  
+foreign import ccall "wxMouseEvent_MiddleDown" wxMouseEvent_MiddleDown :: Ptr (TMouseEvent a) -> IO CBool
+
+-- | usage: (@mouseEventMiddleIsDown obj@).
+mouseEventMiddleIsDown :: MouseEvent  a ->  IO Bool
+mouseEventMiddleIsDown _obj 
+  = withBoolResult $
+    withObjectRef "mouseEventMiddleIsDown" _obj $ \cobj__obj -> 
+    wxMouseEvent_MiddleIsDown cobj__obj  
+foreign import ccall "wxMouseEvent_MiddleIsDown" wxMouseEvent_MiddleIsDown :: Ptr (TMouseEvent a) -> IO CBool
+
+-- | usage: (@mouseEventMiddleUp obj@).
+mouseEventMiddleUp :: MouseEvent  a ->  IO Bool
+mouseEventMiddleUp _obj 
+  = withBoolResult $
+    withObjectRef "mouseEventMiddleUp" _obj $ \cobj__obj -> 
+    wxMouseEvent_MiddleUp cobj__obj  
+foreign import ccall "wxMouseEvent_MiddleUp" wxMouseEvent_MiddleUp :: Ptr (TMouseEvent a) -> IO CBool
+
+-- | usage: (@mouseEventMoving obj@).
+mouseEventMoving :: MouseEvent  a ->  IO Bool
+mouseEventMoving _obj 
+  = withBoolResult $
+    withObjectRef "mouseEventMoving" _obj $ \cobj__obj -> 
+    wxMouseEvent_Moving cobj__obj  
+foreign import ccall "wxMouseEvent_Moving" wxMouseEvent_Moving :: Ptr (TMouseEvent a) -> IO CBool
+
+-- | usage: (@mouseEventRightDClick obj@).
+mouseEventRightDClick :: MouseEvent  a ->  IO Bool
+mouseEventRightDClick _obj 
+  = withBoolResult $
+    withObjectRef "mouseEventRightDClick" _obj $ \cobj__obj -> 
+    wxMouseEvent_RightDClick cobj__obj  
+foreign import ccall "wxMouseEvent_RightDClick" wxMouseEvent_RightDClick :: Ptr (TMouseEvent a) -> IO CBool
+
+-- | usage: (@mouseEventRightDown obj@).
+mouseEventRightDown :: MouseEvent  a ->  IO Bool
+mouseEventRightDown _obj 
+  = withBoolResult $
+    withObjectRef "mouseEventRightDown" _obj $ \cobj__obj -> 
+    wxMouseEvent_RightDown cobj__obj  
+foreign import ccall "wxMouseEvent_RightDown" wxMouseEvent_RightDown :: Ptr (TMouseEvent a) -> IO CBool
+
+-- | usage: (@mouseEventRightIsDown obj@).
+mouseEventRightIsDown :: MouseEvent  a ->  IO Bool
+mouseEventRightIsDown _obj 
+  = withBoolResult $
+    withObjectRef "mouseEventRightIsDown" _obj $ \cobj__obj -> 
+    wxMouseEvent_RightIsDown cobj__obj  
+foreign import ccall "wxMouseEvent_RightIsDown" wxMouseEvent_RightIsDown :: Ptr (TMouseEvent a) -> IO CBool
+
+-- | usage: (@mouseEventRightUp obj@).
+mouseEventRightUp :: MouseEvent  a ->  IO Bool
+mouseEventRightUp _obj 
+  = withBoolResult $
+    withObjectRef "mouseEventRightUp" _obj $ \cobj__obj -> 
+    wxMouseEvent_RightUp cobj__obj  
+foreign import ccall "wxMouseEvent_RightUp" wxMouseEvent_RightUp :: Ptr (TMouseEvent a) -> IO CBool
+
+-- | usage: (@mouseEventShiftDown obj@).
+mouseEventShiftDown :: MouseEvent  a ->  IO Bool
+mouseEventShiftDown _obj 
+  = withBoolResult $
+    withObjectRef "mouseEventShiftDown" _obj $ \cobj__obj -> 
+    wxMouseEvent_ShiftDown cobj__obj  
+foreign import ccall "wxMouseEvent_ShiftDown" wxMouseEvent_ShiftDown :: Ptr (TMouseEvent a) -> IO CBool
+
+-- | usage: (@moveEventCopyObject obj obj@).
+moveEventCopyObject :: MoveEvent  a -> Ptr  b ->  IO ()
+moveEventCopyObject _obj obj 
+  = withObjectRef "moveEventCopyObject" _obj $ \cobj__obj -> 
+    wxMoveEvent_CopyObject cobj__obj  obj  
+foreign import ccall "wxMoveEvent_CopyObject" wxMoveEvent_CopyObject :: Ptr (TMoveEvent a) -> Ptr  b -> IO ()
+
+-- | usage: (@moveEventGetPosition obj@).
+moveEventGetPosition :: MoveEvent  a ->  IO (Point)
+moveEventGetPosition _obj 
+  = withWxPointResult $
+    withObjectRef "moveEventGetPosition" _obj $ \cobj__obj -> 
+    wxMoveEvent_GetPosition cobj__obj  
+foreign import ccall "wxMoveEvent_GetPosition" wxMoveEvent_GetPosition :: Ptr (TMoveEvent a) -> IO (Ptr (TWxPoint ()))
+
+-- | usage: (@navigationKeyEventGetCurrentFocus obj@).
+navigationKeyEventGetCurrentFocus :: NavigationKeyEvent  a ->  IO (Ptr  ())
+navigationKeyEventGetCurrentFocus _obj 
+  = withObjectRef "navigationKeyEventGetCurrentFocus" _obj $ \cobj__obj -> 
+    wxNavigationKeyEvent_GetCurrentFocus cobj__obj  
+foreign import ccall "wxNavigationKeyEvent_GetCurrentFocus" wxNavigationKeyEvent_GetCurrentFocus :: Ptr (TNavigationKeyEvent a) -> IO (Ptr  ())
+
+-- | usage: (@navigationKeyEventGetDirection obj@).
+navigationKeyEventGetDirection :: NavigationKeyEvent  a ->  IO Bool
+navigationKeyEventGetDirection _obj 
+  = withBoolResult $
+    withObjectRef "navigationKeyEventGetDirection" _obj $ \cobj__obj -> 
+    wxNavigationKeyEvent_GetDirection cobj__obj  
+foreign import ccall "wxNavigationKeyEvent_GetDirection" wxNavigationKeyEvent_GetDirection :: Ptr (TNavigationKeyEvent a) -> IO CBool
+
+-- | usage: (@navigationKeyEventIsWindowChange obj@).
+navigationKeyEventIsWindowChange :: NavigationKeyEvent  a ->  IO Bool
+navigationKeyEventIsWindowChange _obj 
+  = withBoolResult $
+    withObjectRef "navigationKeyEventIsWindowChange" _obj $ \cobj__obj -> 
+    wxNavigationKeyEvent_IsWindowChange cobj__obj  
+foreign import ccall "wxNavigationKeyEvent_IsWindowChange" wxNavigationKeyEvent_IsWindowChange :: Ptr (TNavigationKeyEvent a) -> IO CBool
+
+-- | usage: (@navigationKeyEventSetCurrentFocus obj win@).
+navigationKeyEventSetCurrentFocus :: NavigationKeyEvent  a -> Window  b ->  IO ()
+navigationKeyEventSetCurrentFocus _obj win 
+  = withObjectRef "navigationKeyEventSetCurrentFocus" _obj $ \cobj__obj -> 
+    withObjectPtr win $ \cobj_win -> 
+    wxNavigationKeyEvent_SetCurrentFocus cobj__obj  cobj_win  
+foreign import ccall "wxNavigationKeyEvent_SetCurrentFocus" wxNavigationKeyEvent_SetCurrentFocus :: Ptr (TNavigationKeyEvent a) -> Ptr (TWindow b) -> IO ()
+
+-- | usage: (@navigationKeyEventSetDirection obj bForward@).
+navigationKeyEventSetDirection :: NavigationKeyEvent  a -> Bool ->  IO ()
+navigationKeyEventSetDirection _obj bForward 
+  = withObjectRef "navigationKeyEventSetDirection" _obj $ \cobj__obj -> 
+    wxNavigationKeyEvent_SetDirection cobj__obj  (toCBool bForward)  
+foreign import ccall "wxNavigationKeyEvent_SetDirection" wxNavigationKeyEvent_SetDirection :: Ptr (TNavigationKeyEvent a) -> CBool -> IO ()
+
+-- | usage: (@navigationKeyEventSetWindowChange obj bIs@).
+navigationKeyEventSetWindowChange :: NavigationKeyEvent  a -> Bool ->  IO ()
+navigationKeyEventSetWindowChange _obj bIs 
+  = withObjectRef "navigationKeyEventSetWindowChange" _obj $ \cobj__obj -> 
+    wxNavigationKeyEvent_SetWindowChange cobj__obj  (toCBool bIs)  
+foreign import ccall "wxNavigationKeyEvent_SetWindowChange" wxNavigationKeyEvent_SetWindowChange :: Ptr (TNavigationKeyEvent a) -> CBool -> IO ()
+
+-- | usage: (@navigationKeyEventShouldPropagate obj@).
+navigationKeyEventShouldPropagate :: NavigationKeyEvent  a ->  IO Int
+navigationKeyEventShouldPropagate _obj 
+  = withIntResult $
+    withObjectRef "navigationKeyEventShouldPropagate" _obj $ \cobj__obj -> 
+    wxNavigationKeyEvent_ShouldPropagate cobj__obj  
+foreign import ccall "wxNavigationKeyEvent_ShouldPropagate" wxNavigationKeyEvent_ShouldPropagate :: Ptr (TNavigationKeyEvent a) -> IO CInt
+
+-- | usage: (@notebookAddPage obj pPage strText bSelect imageId@).
+notebookAddPage :: Notebook  a -> Window  b -> String -> Bool -> Int ->  IO Bool
+notebookAddPage _obj pPage strText bSelect imageId 
+  = withBoolResult $
+    withObjectRef "notebookAddPage" _obj $ \cobj__obj -> 
+    withObjectPtr pPage $ \cobj_pPage -> 
+    withStringPtr strText $ \cobj_strText -> 
+    wxNotebook_AddPage cobj__obj  cobj_pPage  cobj_strText  (toCBool bSelect)  (toCInt imageId)  
+foreign import ccall "wxNotebook_AddPage" wxNotebook_AddPage :: Ptr (TNotebook a) -> Ptr (TWindow b) -> Ptr (TWxString c) -> CBool -> CInt -> IO CBool
+
+-- | usage: (@notebookAdvanceSelection obj bForward@).
+notebookAdvanceSelection :: Notebook  a -> Bool ->  IO ()
+notebookAdvanceSelection _obj bForward 
+  = withObjectRef "notebookAdvanceSelection" _obj $ \cobj__obj -> 
+    wxNotebook_AdvanceSelection cobj__obj  (toCBool bForward)  
+foreign import ccall "wxNotebook_AdvanceSelection" wxNotebook_AdvanceSelection :: Ptr (TNotebook a) -> CBool -> IO ()
+
+-- | usage: (@notebookAssignImageList obj imageList@).
+notebookAssignImageList :: Notebook  a -> ImageList  b ->  IO ()
+notebookAssignImageList _obj imageList 
+  = withObjectRef "notebookAssignImageList" _obj $ \cobj__obj -> 
+    withObjectPtr imageList $ \cobj_imageList -> 
+    wxNotebook_AssignImageList cobj__obj  cobj_imageList  
+foreign import ccall "wxNotebook_AssignImageList" wxNotebook_AssignImageList :: Ptr (TNotebook a) -> Ptr (TImageList b) -> IO ()
+
+-- | usage: (@notebookCreate prt id lfttopwdthgt stl@).
+notebookCreate :: Window  a -> Id -> Rect -> Style ->  IO (Notebook  ())
+notebookCreate _prt _id _lfttopwdthgt _stl 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    wxNotebook_Create cobj__prt  (toCInt _id)  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
+foreign import ccall "wxNotebook_Create" wxNotebook_Create :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TNotebook ()))
+
+-- | usage: (@notebookDeleteAllPages obj@).
+notebookDeleteAllPages :: Notebook  a ->  IO Bool
+notebookDeleteAllPages _obj 
+  = withBoolResult $
+    withObjectRef "notebookDeleteAllPages" _obj $ \cobj__obj -> 
+    wxNotebook_DeleteAllPages cobj__obj  
+foreign import ccall "wxNotebook_DeleteAllPages" wxNotebook_DeleteAllPages :: Ptr (TNotebook a) -> IO CBool
+
+-- | usage: (@notebookDeletePage obj nPage@).
+notebookDeletePage :: Notebook  a -> Int ->  IO Bool
+notebookDeletePage _obj nPage 
+  = withBoolResult $
+    withObjectRef "notebookDeletePage" _obj $ \cobj__obj -> 
+    wxNotebook_DeletePage cobj__obj  (toCInt nPage)  
+foreign import ccall "wxNotebook_DeletePage" wxNotebook_DeletePage :: Ptr (TNotebook a) -> CInt -> IO CBool
+
+-- | usage: (@notebookGetImageList obj@).
+notebookGetImageList :: Notebook  a ->  IO (ImageList  ())
+notebookGetImageList _obj 
+  = withObjectResult $
+    withObjectRef "notebookGetImageList" _obj $ \cobj__obj -> 
+    wxNotebook_GetImageList cobj__obj  
+foreign import ccall "wxNotebook_GetImageList" wxNotebook_GetImageList :: Ptr (TNotebook a) -> IO (Ptr (TImageList ()))
+
+-- | usage: (@notebookGetPage obj nPage@).
+notebookGetPage :: Notebook  a -> Int ->  IO (Window  ())
+notebookGetPage _obj nPage 
+  = withObjectResult $
+    withObjectRef "notebookGetPage" _obj $ \cobj__obj -> 
+    wxNotebook_GetPage cobj__obj  (toCInt nPage)  
+foreign import ccall "wxNotebook_GetPage" wxNotebook_GetPage :: Ptr (TNotebook a) -> CInt -> IO (Ptr (TWindow ()))
+
+-- | usage: (@notebookGetPageCount obj@).
+notebookGetPageCount :: Notebook  a ->  IO Int
+notebookGetPageCount _obj 
+  = withIntResult $
+    withObjectRef "notebookGetPageCount" _obj $ \cobj__obj -> 
+    wxNotebook_GetPageCount cobj__obj  
+foreign import ccall "wxNotebook_GetPageCount" wxNotebook_GetPageCount :: Ptr (TNotebook a) -> IO CInt
+
+-- | usage: (@notebookGetPageImage obj nPage@).
+notebookGetPageImage :: Notebook  a -> Int ->  IO Int
+notebookGetPageImage _obj nPage 
+  = withIntResult $
+    withObjectRef "notebookGetPageImage" _obj $ \cobj__obj -> 
+    wxNotebook_GetPageImage cobj__obj  (toCInt nPage)  
+foreign import ccall "wxNotebook_GetPageImage" wxNotebook_GetPageImage :: Ptr (TNotebook a) -> CInt -> IO CInt
+
+-- | usage: (@notebookGetPageText obj nPage@).
+notebookGetPageText :: Notebook  a -> Int ->  IO (String)
+notebookGetPageText _obj nPage 
+  = withManagedStringResult $
+    withObjectRef "notebookGetPageText" _obj $ \cobj__obj -> 
+    wxNotebook_GetPageText cobj__obj  (toCInt nPage)  
+foreign import ccall "wxNotebook_GetPageText" wxNotebook_GetPageText :: Ptr (TNotebook a) -> CInt -> IO (Ptr (TWxString ()))
+
+-- | usage: (@notebookGetRowCount obj@).
+notebookGetRowCount :: Notebook  a ->  IO Int
+notebookGetRowCount _obj 
+  = withIntResult $
+    withObjectRef "notebookGetRowCount" _obj $ \cobj__obj -> 
+    wxNotebook_GetRowCount cobj__obj  
+foreign import ccall "wxNotebook_GetRowCount" wxNotebook_GetRowCount :: Ptr (TNotebook a) -> IO CInt
+
+-- | usage: (@notebookGetSelection obj@).
+notebookGetSelection :: Notebook  a ->  IO Int
+notebookGetSelection _obj 
+  = withIntResult $
+    withObjectRef "notebookGetSelection" _obj $ \cobj__obj -> 
+    wxNotebook_GetSelection cobj__obj  
+foreign import ccall "wxNotebook_GetSelection" wxNotebook_GetSelection :: Ptr (TNotebook a) -> IO CInt
+
+-- | usage: (@notebookHitTest obj xy flags@).
+notebookHitTest :: Notebook  a -> Point -> Ptr CInt ->  IO Int
+notebookHitTest _obj xy flags 
+  = withIntResult $
+    withObjectRef "notebookHitTest" _obj $ \cobj__obj -> 
+    wxNotebook_HitTest cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  flags  
+foreign import ccall "wxNotebook_HitTest" wxNotebook_HitTest :: Ptr (TNotebook a) -> CInt -> CInt -> Ptr CInt -> IO CInt
+
+-- | usage: (@notebookInsertPage obj nPage pPage strText bSelect imageId@).
+notebookInsertPage :: Notebook  a -> Int -> Window  c -> String -> Bool -> Int ->  IO Bool
+notebookInsertPage _obj nPage pPage strText bSelect imageId 
+  = withBoolResult $
+    withObjectRef "notebookInsertPage" _obj $ \cobj__obj -> 
+    withObjectPtr pPage $ \cobj_pPage -> 
+    withStringPtr strText $ \cobj_strText -> 
+    wxNotebook_InsertPage cobj__obj  (toCInt nPage)  cobj_pPage  cobj_strText  (toCBool bSelect)  (toCInt imageId)  
+foreign import ccall "wxNotebook_InsertPage" wxNotebook_InsertPage :: Ptr (TNotebook a) -> CInt -> Ptr (TWindow c) -> Ptr (TWxString d) -> CBool -> CInt -> IO CBool
+
+-- | usage: (@notebookRemovePage obj nPage@).
+notebookRemovePage :: Notebook  a -> Int ->  IO Bool
+notebookRemovePage _obj nPage 
+  = withBoolResult $
+    withObjectRef "notebookRemovePage" _obj $ \cobj__obj -> 
+    wxNotebook_RemovePage cobj__obj  (toCInt nPage)  
+foreign import ccall "wxNotebook_RemovePage" wxNotebook_RemovePage :: Ptr (TNotebook a) -> CInt -> IO CBool
+
+-- | usage: (@notebookSetImageList obj imageList@).
+notebookSetImageList :: Notebook  a -> ImageList  b ->  IO ()
+notebookSetImageList _obj imageList 
+  = withObjectRef "notebookSetImageList" _obj $ \cobj__obj -> 
+    withObjectPtr imageList $ \cobj_imageList -> 
+    wxNotebook_SetImageList cobj__obj  cobj_imageList  
+foreign import ccall "wxNotebook_SetImageList" wxNotebook_SetImageList :: Ptr (TNotebook a) -> Ptr (TImageList b) -> IO ()
+
+-- | usage: (@notebookSetPadding obj wh@).
+notebookSetPadding :: Notebook  a -> Size ->  IO ()
+notebookSetPadding _obj _wh 
+  = withObjectRef "notebookSetPadding" _obj $ \cobj__obj -> 
+    wxNotebook_SetPadding cobj__obj  (toCIntSizeW _wh) (toCIntSizeH _wh)  
+foreign import ccall "wxNotebook_SetPadding" wxNotebook_SetPadding :: Ptr (TNotebook a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@notebookSetPageImage obj nPage nImage@).
+notebookSetPageImage :: Notebook  a -> Int -> Int ->  IO Bool
+notebookSetPageImage _obj nPage nImage 
+  = withBoolResult $
+    withObjectRef "notebookSetPageImage" _obj $ \cobj__obj -> 
+    wxNotebook_SetPageImage cobj__obj  (toCInt nPage)  (toCInt nImage)  
+foreign import ccall "wxNotebook_SetPageImage" wxNotebook_SetPageImage :: Ptr (TNotebook a) -> CInt -> CInt -> IO CBool
+
+-- | usage: (@notebookSetPageSize obj wh@).
+notebookSetPageSize :: Notebook  a -> Size ->  IO ()
+notebookSetPageSize _obj _wh 
+  = withObjectRef "notebookSetPageSize" _obj $ \cobj__obj -> 
+    wxNotebook_SetPageSize cobj__obj  (toCIntSizeW _wh) (toCIntSizeH _wh)  
+foreign import ccall "wxNotebook_SetPageSize" wxNotebook_SetPageSize :: Ptr (TNotebook a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@notebookSetPageText obj nPage strText@).
+notebookSetPageText :: Notebook  a -> Int -> String ->  IO Bool
+notebookSetPageText _obj nPage strText 
+  = withBoolResult $
+    withObjectRef "notebookSetPageText" _obj $ \cobj__obj -> 
+    withStringPtr strText $ \cobj_strText -> 
+    wxNotebook_SetPageText cobj__obj  (toCInt nPage)  cobj_strText  
+foreign import ccall "wxNotebook_SetPageText" wxNotebook_SetPageText :: Ptr (TNotebook a) -> CInt -> Ptr (TWxString c) -> IO CBool
+
+-- | usage: (@notebookSetSelection obj nPage@).
+notebookSetSelection :: Notebook  a -> Int ->  IO Int
+notebookSetSelection _obj nPage 
+  = withIntResult $
+    withObjectRef "notebookSetSelection" _obj $ \cobj__obj -> 
+    wxNotebook_SetSelection cobj__obj  (toCInt nPage)  
+foreign import ccall "wxNotebook_SetSelection" wxNotebook_SetSelection :: Ptr (TNotebook a) -> CInt -> IO CInt
+
+-- | usage: (@notifyEventAllow obj@).
+notifyEventAllow :: NotifyEvent  a ->  IO ()
+notifyEventAllow _obj 
+  = withObjectRef "notifyEventAllow" _obj $ \cobj__obj -> 
+    wxNotifyEvent_Allow cobj__obj  
+foreign import ccall "wxNotifyEvent_Allow" wxNotifyEvent_Allow :: Ptr (TNotifyEvent a) -> IO ()
+
+-- | usage: (@notifyEventCopyObject obj objectdest@).
+notifyEventCopyObject :: NotifyEvent  a -> Ptr  b ->  IO ()
+notifyEventCopyObject _obj objectdest 
+  = withObjectRef "notifyEventCopyObject" _obj $ \cobj__obj -> 
+    wxNotifyEvent_CopyObject cobj__obj  objectdest  
+foreign import ccall "wxNotifyEvent_CopyObject" wxNotifyEvent_CopyObject :: Ptr (TNotifyEvent a) -> Ptr  b -> IO ()
+
+-- | usage: (@notifyEventIsAllowed obj@).
+notifyEventIsAllowed :: NotifyEvent  a ->  IO Bool
+notifyEventIsAllowed _obj 
+  = withBoolResult $
+    withObjectRef "notifyEventIsAllowed" _obj $ \cobj__obj -> 
+    wxNotifyEvent_IsAllowed cobj__obj  
+foreign import ccall "wxNotifyEvent_IsAllowed" wxNotifyEvent_IsAllowed :: Ptr (TNotifyEvent a) -> IO CBool
+
+-- | usage: (@notifyEventVeto obj@).
+notifyEventVeto :: NotifyEvent  a ->  IO ()
+notifyEventVeto _obj 
+  = withObjectRef "notifyEventVeto" _obj $ \cobj__obj -> 
+    wxNotifyEvent_Veto cobj__obj  
+foreign import ccall "wxNotifyEvent_Veto" wxNotifyEvent_Veto :: Ptr (TNotifyEvent a) -> IO ()
+
+-- | usage: (@nullAcceleratorTable@).
+nullAcceleratorTable :: AcceleratorTable  ()
+nullAcceleratorTable 
+  = unsafePerformIO $
+    withObjectResult $
+    wx_Null_AcceleratorTable 
+foreign import ccall "Null_AcceleratorTable" wx_Null_AcceleratorTable :: IO (Ptr (TAcceleratorTable ()))
+
+-- | usage: (@nullBitmap@).
+nullBitmap :: Bitmap  ()
+nullBitmap 
+  = unsafePerformIO $
+    withManagedBitmapResult $
+    wx_Null_Bitmap 
+foreign import ccall "Null_Bitmap" wx_Null_Bitmap :: IO (Ptr (TBitmap ()))
+
+-- | usage: (@nullBrush@).
+nullBrush :: Brush  ()
+nullBrush 
+  = unsafePerformIO $
+    withManagedBrushResult $
+    wx_Null_Brush 
+foreign import ccall "Null_Brush" wx_Null_Brush :: IO (Ptr (TBrush ()))
+
+-- | usage: (@nullColour@).
+nullColour :: Color
+nullColour 
+  = unsafePerformIO $
+    withManagedColourResult $
+    wx_Null_Colour 
+foreign import ccall "Null_Colour" wx_Null_Colour :: IO (Ptr (TColour ()))
+
+-- | usage: (@nullCursor@).
+nullCursor :: Cursor  ()
+nullCursor 
+  = unsafePerformIO $
+    withManagedCursorResult $
+    wx_Null_Cursor 
+foreign import ccall "Null_Cursor" wx_Null_Cursor :: IO (Ptr (TCursor ()))
+
+-- | usage: (@nullFont@).
+nullFont :: Font  ()
+nullFont 
+  = unsafePerformIO $
+    withManagedFontResult $
+    wx_Null_Font 
+foreign import ccall "Null_Font" wx_Null_Font :: IO (Ptr (TFont ()))
+
+-- | usage: (@nullIcon@).
+nullIcon :: Icon  ()
+nullIcon 
+  = unsafePerformIO $
+    withManagedIconResult $
+    wx_Null_Icon 
+foreign import ccall "Null_Icon" wx_Null_Icon :: IO (Ptr (TIcon ()))
+
+-- | usage: (@nullPalette@).
+nullPalette :: Palette  ()
+nullPalette 
+  = unsafePerformIO $
+    withObjectResult $
+    wx_Null_Palette 
+foreign import ccall "Null_Palette" wx_Null_Palette :: IO (Ptr (TPalette ()))
+
+-- | usage: (@nullPen@).
+nullPen :: Pen  ()
+nullPen 
+  = unsafePerformIO $
+    withManagedPenResult $
+    wx_Null_Pen 
+foreign import ccall "Null_Pen" wx_Null_Pen :: IO (Ptr (TPen ()))
+
+-- | usage: (@objectGetClassInfo obj@).
+objectGetClassInfo :: WxObject  a ->  IO (ClassInfo  ())
+objectGetClassInfo _obj 
+  = withObjectResult $
+    withObjectRef "objectGetClassInfo" _obj $ \cobj__obj -> 
+    wxObject_GetClassInfo cobj__obj  
+foreign import ccall "wxObject_GetClassInfo" wxObject_GetClassInfo :: Ptr (TWxObject a) -> IO (Ptr (TClassInfo ()))
+
+{- |  Get the reference data of an object as a closure: only works if properly initialized. Use 'closureGetData' to get to the actual data.  -}
+objectGetClientClosure :: WxObject  a ->  IO (Closure  ())
+objectGetClientClosure _obj 
+  = withObjectResult $
+    withObjectRef "objectGetClientClosure" _obj $ \cobj__obj -> 
+    wxObject_GetClientClosure cobj__obj  
+foreign import ccall "wxObject_GetClientClosure" wxObject_GetClientClosure :: Ptr (TWxObject a) -> IO (Ptr (TClosure ()))
+
+-- | usage: (@objectIsKindOf obj classInfo@).
+objectIsKindOf :: WxObject  a -> ClassInfo  b ->  IO Bool
+objectIsKindOf _obj classInfo 
+  = withBoolResult $
+    withObjectRef "objectIsKindOf" _obj $ \cobj__obj -> 
+    withObjectPtr classInfo $ \cobj_classInfo -> 
+    wxObject_IsKindOf cobj__obj  cobj_classInfo  
+foreign import ccall "wxObject_IsKindOf" wxObject_IsKindOf :: Ptr (TWxObject a) -> Ptr (TClassInfo b) -> IO CBool
+
+-- | usage: (@objectIsScrolledWindow obj@).
+objectIsScrolledWindow :: WxObject  a ->  IO Bool
+objectIsScrolledWindow _obj 
+  = withBoolResult $
+    withObjectRef "objectIsScrolledWindow" _obj $ \cobj__obj -> 
+    wxObject_IsScrolledWindow cobj__obj  
+foreign import ccall "wxObject_IsScrolledWindow" wxObject_IsScrolledWindow :: Ptr (TWxObject a) -> IO CBool
+
+-- | usage: (@objectSafeDelete self@).
+objectSafeDelete :: WxObject  a ->  IO ()
+objectSafeDelete self 
+  = withObjectPtr self $ \cobj_self -> 
+    wxObject_SafeDelete cobj_self  
+foreign import ccall "wxObject_SafeDelete" wxObject_SafeDelete :: Ptr (TWxObject a) -> IO ()
+
+{- |  Set the reference data of an object as a closure. The closure data contains the data while the function is called on deletion. Returns 'True' on success. Only works if the reference data is unused by wxWidgets!  -}
+objectSetClientClosure :: WxObject  a -> Closure  b ->  IO ()
+objectSetClientClosure _obj closure 
+  = withObjectRef "objectSetClientClosure" _obj $ \cobj__obj -> 
+    withObjectPtr closure $ \cobj_closure -> 
+    wxObject_SetClientClosure cobj__obj  cobj_closure  
+foreign import ccall "wxObject_SetClientClosure" wxObject_SetClientClosure :: Ptr (TWxObject a) -> Ptr (TClosure b) -> IO ()
+
+-- | usage: (@outputStreamDelete obj@).
+outputStreamDelete :: OutputStream  a ->  IO ()
+outputStreamDelete _obj 
+  = withObjectRef "outputStreamDelete" _obj $ \cobj__obj -> 
+    wxOutputStream_Delete cobj__obj  
+foreign import ccall "wxOutputStream_Delete" wxOutputStream_Delete :: Ptr (TOutputStream a) -> IO ()
+
+-- | usage: (@outputStreamLastWrite obj@).
+outputStreamLastWrite :: OutputStream  a ->  IO Int
+outputStreamLastWrite _obj 
+  = withIntResult $
+    withObjectRef "outputStreamLastWrite" _obj $ \cobj__obj -> 
+    wxOutputStream_LastWrite cobj__obj  
+foreign import ccall "wxOutputStream_LastWrite" wxOutputStream_LastWrite :: Ptr (TOutputStream a) -> IO CInt
+
+-- | usage: (@outputStreamPutC obj c@).
+outputStreamPutC :: OutputStream  a -> Char ->  IO ()
+outputStreamPutC _obj c 
+  = withObjectRef "outputStreamPutC" _obj $ \cobj__obj -> 
+    wxOutputStream_PutC cobj__obj  (toCWchar c)  
+foreign import ccall "wxOutputStream_PutC" wxOutputStream_PutC :: Ptr (TOutputStream a) -> CWchar -> IO ()
+
+-- | usage: (@outputStreamSeek obj pos mode@).
+outputStreamSeek :: OutputStream  a -> Int -> Int ->  IO Int
+outputStreamSeek _obj pos mode 
+  = withIntResult $
+    withObjectRef "outputStreamSeek" _obj $ \cobj__obj -> 
+    wxOutputStream_Seek cobj__obj  (toCInt pos)  (toCInt mode)  
+foreign import ccall "wxOutputStream_Seek" wxOutputStream_Seek :: Ptr (TOutputStream a) -> CInt -> CInt -> IO CInt
+
+-- | usage: (@outputStreamSync obj@).
+outputStreamSync :: OutputStream  a ->  IO ()
+outputStreamSync _obj 
+  = withObjectRef "outputStreamSync" _obj $ \cobj__obj -> 
+    wxOutputStream_Sync cobj__obj  
+foreign import ccall "wxOutputStream_Sync" wxOutputStream_Sync :: Ptr (TOutputStream a) -> IO ()
+
+-- | usage: (@outputStreamTell obj@).
+outputStreamTell :: OutputStream  a ->  IO Int
+outputStreamTell _obj 
+  = withIntResult $
+    withObjectRef "outputStreamTell" _obj $ \cobj__obj -> 
+    wxOutputStream_Tell cobj__obj  
+foreign import ccall "wxOutputStream_Tell" wxOutputStream_Tell :: Ptr (TOutputStream a) -> IO CInt
+
+-- | usage: (@outputStreamWrite obj buffer size@).
+outputStreamWrite :: OutputStream  a -> Ptr  b -> Int ->  IO ()
+outputStreamWrite _obj buffer size 
+  = withObjectRef "outputStreamWrite" _obj $ \cobj__obj -> 
+    wxOutputStream_Write cobj__obj  buffer  (toCInt size)  
+foreign import ccall "wxOutputStream_Write" wxOutputStream_Write :: Ptr (TOutputStream a) -> Ptr  b -> CInt -> IO ()
+
+-- | usage: (@pGPropertyGetLabel obj@).
+pGPropertyGetLabel :: PGProperty  a ->  IO (String)
+pGPropertyGetLabel _obj 
+  = withManagedStringResult $
+    withObjectRef "pGPropertyGetLabel" _obj $ \cobj__obj -> 
+    wxPGProperty_GetLabel cobj__obj  
+foreign import ccall "wxPGProperty_GetLabel" wxPGProperty_GetLabel :: Ptr (TPGProperty a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@pGPropertyGetName obj@).
+pGPropertyGetName :: PGProperty  a ->  IO (String)
+pGPropertyGetName _obj 
+  = withManagedStringResult $
+    withObjectRef "pGPropertyGetName" _obj $ \cobj__obj -> 
+    wxPGProperty_GetName cobj__obj  
+foreign import ccall "wxPGProperty_GetName" wxPGProperty_GetName :: Ptr (TPGProperty a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@pGPropertyGetValueAsString obj@).
+pGPropertyGetValueAsString :: PGProperty  a ->  IO (String)
+pGPropertyGetValueAsString _obj 
+  = withManagedStringResult $
+    withObjectRef "pGPropertyGetValueAsString" _obj $ \cobj__obj -> 
+    wxPGProperty_GetValueAsString cobj__obj  
+foreign import ccall "wxPGProperty_GetValueAsString" wxPGProperty_GetValueAsString :: Ptr (TPGProperty a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@pGPropertyGetValueType obj@).
+pGPropertyGetValueType :: PGProperty  a ->  IO (String)
+pGPropertyGetValueType _obj 
+  = withManagedStringResult $
+    withObjectRef "pGPropertyGetValueType" _obj $ \cobj__obj -> 
+    wxPGProperty_GetValueType cobj__obj  
+foreign import ccall "wxPGProperty_GetValueType" wxPGProperty_GetValueType :: Ptr (TPGProperty a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@pGPropertySetHelpString obj helpString@).
+pGPropertySetHelpString :: PGProperty  a -> String ->  IO ()
+pGPropertySetHelpString _obj helpString 
+  = withObjectRef "pGPropertySetHelpString" _obj $ \cobj__obj -> 
+    withStringPtr helpString $ \cobj_helpString -> 
+    wxPGProperty_SetHelpString cobj__obj  cobj_helpString  
+foreign import ccall "wxPGProperty_SetHelpString" wxPGProperty_SetHelpString :: Ptr (TPGProperty a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@pageSetupDialogCreate parent wxdata@).
+pageSetupDialogCreate :: Window  a -> PageSetupDialogData  b ->  IO (PageSetupDialog  ())
+pageSetupDialogCreate parent wxdata 
+  = withObjectResult $
+    withObjectPtr parent $ \cobj_parent -> 
+    withObjectPtr wxdata $ \cobj_wxdata -> 
+    wxPageSetupDialog_Create cobj_parent  cobj_wxdata  
+foreign import ccall "wxPageSetupDialog_Create" wxPageSetupDialog_Create :: Ptr (TWindow a) -> Ptr (TPageSetupDialogData b) -> IO (Ptr (TPageSetupDialog ()))
+
+-- | usage: (@pageSetupDialogDataAssign obj@).
+pageSetupDialogDataAssign :: PageSetupDialogData  a ->  IO (PageSetupDialogData  ())
+pageSetupDialogDataAssign _obj 
+  = withRefPageSetupDialogData $ \pref -> 
+    withObjectRef "pageSetupDialogDataAssign" _obj $ \cobj__obj -> 
+    wxPageSetupDialogData_Assign cobj__obj   pref
+foreign import ccall "wxPageSetupDialogData_Assign" wxPageSetupDialogData_Assign :: Ptr (TPageSetupDialogData a) -> Ptr (TPageSetupDialogData ()) -> IO ()
+
+-- | usage: (@pageSetupDialogDataAssignData obj printData@).
+pageSetupDialogDataAssignData :: PageSetupDialogData  a -> PrintData  b ->  IO ()
+pageSetupDialogDataAssignData _obj printData 
+  = withObjectRef "pageSetupDialogDataAssignData" _obj $ \cobj__obj -> 
+    withObjectPtr printData $ \cobj_printData -> 
+    wxPageSetupDialogData_AssignData cobj__obj  cobj_printData  
+foreign import ccall "wxPageSetupDialogData_AssignData" wxPageSetupDialogData_AssignData :: Ptr (TPageSetupDialogData a) -> Ptr (TPrintData b) -> IO ()
+
+-- | usage: (@pageSetupDialogDataCalculateIdFromPaperSize obj@).
+pageSetupDialogDataCalculateIdFromPaperSize :: PageSetupDialogData  a ->  IO ()
+pageSetupDialogDataCalculateIdFromPaperSize _obj 
+  = withObjectRef "pageSetupDialogDataCalculateIdFromPaperSize" _obj $ \cobj__obj -> 
+    wxPageSetupDialogData_CalculateIdFromPaperSize cobj__obj  
+foreign import ccall "wxPageSetupDialogData_CalculateIdFromPaperSize" wxPageSetupDialogData_CalculateIdFromPaperSize :: Ptr (TPageSetupDialogData a) -> IO ()
+
+-- | usage: (@pageSetupDialogDataCalculatePaperSizeFromId obj@).
+pageSetupDialogDataCalculatePaperSizeFromId :: PageSetupDialogData  a ->  IO ()
+pageSetupDialogDataCalculatePaperSizeFromId _obj 
+  = withObjectRef "pageSetupDialogDataCalculatePaperSizeFromId" _obj $ \cobj__obj -> 
+    wxPageSetupDialogData_CalculatePaperSizeFromId cobj__obj  
+foreign import ccall "wxPageSetupDialogData_CalculatePaperSizeFromId" wxPageSetupDialogData_CalculatePaperSizeFromId :: Ptr (TPageSetupDialogData a) -> IO ()
+
+-- | usage: (@pageSetupDialogDataCreate@).
+pageSetupDialogDataCreate ::  IO (PageSetupDialogData  ())
+pageSetupDialogDataCreate 
+  = withManagedObjectResult $
+    wxPageSetupDialogData_Create 
+foreign import ccall "wxPageSetupDialogData_Create" wxPageSetupDialogData_Create :: IO (Ptr (TPageSetupDialogData ()))
+
+-- | usage: (@pageSetupDialogDataCreateFromData printData@).
+pageSetupDialogDataCreateFromData :: PrintData  a ->  IO (PageSetupDialogData  ())
+pageSetupDialogDataCreateFromData printData 
+  = withManagedObjectResult $
+    withObjectPtr printData $ \cobj_printData -> 
+    wxPageSetupDialogData_CreateFromData cobj_printData  
+foreign import ccall "wxPageSetupDialogData_CreateFromData" wxPageSetupDialogData_CreateFromData :: Ptr (TPrintData a) -> IO (Ptr (TPageSetupDialogData ()))
+
+-- | usage: (@pageSetupDialogDataDelete obj@).
+pageSetupDialogDataDelete :: PageSetupDialogData  a ->  IO ()
+pageSetupDialogDataDelete
+  = objectDelete
+
+
+-- | usage: (@pageSetupDialogDataEnableHelp obj flag@).
+pageSetupDialogDataEnableHelp :: PageSetupDialogData  a -> Bool ->  IO ()
+pageSetupDialogDataEnableHelp _obj flag 
+  = withObjectRef "pageSetupDialogDataEnableHelp" _obj $ \cobj__obj -> 
+    wxPageSetupDialogData_EnableHelp cobj__obj  (toCBool flag)  
+foreign import ccall "wxPageSetupDialogData_EnableHelp" wxPageSetupDialogData_EnableHelp :: Ptr (TPageSetupDialogData a) -> CBool -> IO ()
+
+-- | usage: (@pageSetupDialogDataEnableMargins obj flag@).
+pageSetupDialogDataEnableMargins :: PageSetupDialogData  a -> Bool ->  IO ()
+pageSetupDialogDataEnableMargins _obj flag 
+  = withObjectRef "pageSetupDialogDataEnableMargins" _obj $ \cobj__obj -> 
+    wxPageSetupDialogData_EnableMargins cobj__obj  (toCBool flag)  
+foreign import ccall "wxPageSetupDialogData_EnableMargins" wxPageSetupDialogData_EnableMargins :: Ptr (TPageSetupDialogData a) -> CBool -> IO ()
+
+-- | usage: (@pageSetupDialogDataEnableOrientation obj flag@).
+pageSetupDialogDataEnableOrientation :: PageSetupDialogData  a -> Bool ->  IO ()
+pageSetupDialogDataEnableOrientation _obj flag 
+  = withObjectRef "pageSetupDialogDataEnableOrientation" _obj $ \cobj__obj -> 
+    wxPageSetupDialogData_EnableOrientation cobj__obj  (toCBool flag)  
+foreign import ccall "wxPageSetupDialogData_EnableOrientation" wxPageSetupDialogData_EnableOrientation :: Ptr (TPageSetupDialogData a) -> CBool -> IO ()
+
+-- | usage: (@pageSetupDialogDataEnablePaper obj flag@).
+pageSetupDialogDataEnablePaper :: PageSetupDialogData  a -> Bool ->  IO ()
+pageSetupDialogDataEnablePaper _obj flag 
+  = withObjectRef "pageSetupDialogDataEnablePaper" _obj $ \cobj__obj -> 
+    wxPageSetupDialogData_EnablePaper cobj__obj  (toCBool flag)  
+foreign import ccall "wxPageSetupDialogData_EnablePaper" wxPageSetupDialogData_EnablePaper :: Ptr (TPageSetupDialogData a) -> CBool -> IO ()
+
+-- | usage: (@pageSetupDialogDataEnablePrinter obj flag@).
+pageSetupDialogDataEnablePrinter :: PageSetupDialogData  a -> Bool ->  IO ()
+pageSetupDialogDataEnablePrinter _obj flag 
+  = withObjectRef "pageSetupDialogDataEnablePrinter" _obj $ \cobj__obj -> 
+    wxPageSetupDialogData_EnablePrinter cobj__obj  (toCBool flag)  
+foreign import ccall "wxPageSetupDialogData_EnablePrinter" wxPageSetupDialogData_EnablePrinter :: Ptr (TPageSetupDialogData a) -> CBool -> IO ()
+
+-- | usage: (@pageSetupDialogDataGetDefaultInfo obj@).
+pageSetupDialogDataGetDefaultInfo :: PageSetupDialogData  a ->  IO Bool
+pageSetupDialogDataGetDefaultInfo _obj 
+  = withBoolResult $
+    withObjectRef "pageSetupDialogDataGetDefaultInfo" _obj $ \cobj__obj -> 
+    wxPageSetupDialogData_GetDefaultInfo cobj__obj  
+foreign import ccall "wxPageSetupDialogData_GetDefaultInfo" wxPageSetupDialogData_GetDefaultInfo :: Ptr (TPageSetupDialogData a) -> IO CBool
+
+-- | usage: (@pageSetupDialogDataGetDefaultMinMargins obj@).
+pageSetupDialogDataGetDefaultMinMargins :: PageSetupDialogData  a ->  IO Bool
+pageSetupDialogDataGetDefaultMinMargins _obj 
+  = withBoolResult $
+    withObjectRef "pageSetupDialogDataGetDefaultMinMargins" _obj $ \cobj__obj -> 
+    wxPageSetupDialogData_GetDefaultMinMargins cobj__obj  
+foreign import ccall "wxPageSetupDialogData_GetDefaultMinMargins" wxPageSetupDialogData_GetDefaultMinMargins :: Ptr (TPageSetupDialogData a) -> IO CBool
+
+-- | usage: (@pageSetupDialogDataGetEnableHelp obj@).
+pageSetupDialogDataGetEnableHelp :: PageSetupDialogData  a ->  IO Bool
+pageSetupDialogDataGetEnableHelp _obj 
+  = withBoolResult $
+    withObjectRef "pageSetupDialogDataGetEnableHelp" _obj $ \cobj__obj -> 
+    wxPageSetupDialogData_GetEnableHelp cobj__obj  
+foreign import ccall "wxPageSetupDialogData_GetEnableHelp" wxPageSetupDialogData_GetEnableHelp :: Ptr (TPageSetupDialogData a) -> IO CBool
+
+-- | usage: (@pageSetupDialogDataGetEnableMargins obj@).
+pageSetupDialogDataGetEnableMargins :: PageSetupDialogData  a ->  IO Bool
+pageSetupDialogDataGetEnableMargins _obj 
+  = withBoolResult $
+    withObjectRef "pageSetupDialogDataGetEnableMargins" _obj $ \cobj__obj -> 
+    wxPageSetupDialogData_GetEnableMargins cobj__obj  
+foreign import ccall "wxPageSetupDialogData_GetEnableMargins" wxPageSetupDialogData_GetEnableMargins :: Ptr (TPageSetupDialogData a) -> IO CBool
+
+-- | usage: (@pageSetupDialogDataGetEnableOrientation obj@).
+pageSetupDialogDataGetEnableOrientation :: PageSetupDialogData  a ->  IO Bool
+pageSetupDialogDataGetEnableOrientation _obj 
+  = withBoolResult $
+    withObjectRef "pageSetupDialogDataGetEnableOrientation" _obj $ \cobj__obj -> 
+    wxPageSetupDialogData_GetEnableOrientation cobj__obj  
+foreign import ccall "wxPageSetupDialogData_GetEnableOrientation" wxPageSetupDialogData_GetEnableOrientation :: Ptr (TPageSetupDialogData a) -> IO CBool
+
+-- | usage: (@pageSetupDialogDataGetEnablePaper obj@).
+pageSetupDialogDataGetEnablePaper :: PageSetupDialogData  a ->  IO Bool
+pageSetupDialogDataGetEnablePaper _obj 
+  = withBoolResult $
+    withObjectRef "pageSetupDialogDataGetEnablePaper" _obj $ \cobj__obj -> 
+    wxPageSetupDialogData_GetEnablePaper cobj__obj  
+foreign import ccall "wxPageSetupDialogData_GetEnablePaper" wxPageSetupDialogData_GetEnablePaper :: Ptr (TPageSetupDialogData a) -> IO CBool
+
+-- | usage: (@pageSetupDialogDataGetEnablePrinter obj@).
+pageSetupDialogDataGetEnablePrinter :: PageSetupDialogData  a ->  IO Bool
+pageSetupDialogDataGetEnablePrinter _obj 
+  = withBoolResult $
+    withObjectRef "pageSetupDialogDataGetEnablePrinter" _obj $ \cobj__obj -> 
+    wxPageSetupDialogData_GetEnablePrinter cobj__obj  
+foreign import ccall "wxPageSetupDialogData_GetEnablePrinter" wxPageSetupDialogData_GetEnablePrinter :: Ptr (TPageSetupDialogData a) -> IO CBool
+
+-- | usage: (@pageSetupDialogDataGetMarginBottomRight obj@).
+pageSetupDialogDataGetMarginBottomRight :: PageSetupDialogData  a ->  IO (Point)
+pageSetupDialogDataGetMarginBottomRight _obj 
+  = withWxPointResult $
+    withObjectRef "pageSetupDialogDataGetMarginBottomRight" _obj $ \cobj__obj -> 
+    wxPageSetupDialogData_GetMarginBottomRight cobj__obj  
+foreign import ccall "wxPageSetupDialogData_GetMarginBottomRight" wxPageSetupDialogData_GetMarginBottomRight :: Ptr (TPageSetupDialogData a) -> IO (Ptr (TWxPoint ()))
+
+-- | usage: (@pageSetupDialogDataGetMarginTopLeft obj@).
+pageSetupDialogDataGetMarginTopLeft :: PageSetupDialogData  a ->  IO (Point)
+pageSetupDialogDataGetMarginTopLeft _obj 
+  = withWxPointResult $
+    withObjectRef "pageSetupDialogDataGetMarginTopLeft" _obj $ \cobj__obj -> 
+    wxPageSetupDialogData_GetMarginTopLeft cobj__obj  
+foreign import ccall "wxPageSetupDialogData_GetMarginTopLeft" wxPageSetupDialogData_GetMarginTopLeft :: Ptr (TPageSetupDialogData a) -> IO (Ptr (TWxPoint ()))
+
+-- | usage: (@pageSetupDialogDataGetMinMarginBottomRight obj@).
+pageSetupDialogDataGetMinMarginBottomRight :: PageSetupDialogData  a ->  IO (Point)
+pageSetupDialogDataGetMinMarginBottomRight _obj 
+  = withWxPointResult $
+    withObjectRef "pageSetupDialogDataGetMinMarginBottomRight" _obj $ \cobj__obj -> 
+    wxPageSetupDialogData_GetMinMarginBottomRight cobj__obj  
+foreign import ccall "wxPageSetupDialogData_GetMinMarginBottomRight" wxPageSetupDialogData_GetMinMarginBottomRight :: Ptr (TPageSetupDialogData a) -> IO (Ptr (TWxPoint ()))
+
+-- | usage: (@pageSetupDialogDataGetMinMarginTopLeft obj@).
+pageSetupDialogDataGetMinMarginTopLeft :: PageSetupDialogData  a ->  IO (Point)
+pageSetupDialogDataGetMinMarginTopLeft _obj 
+  = withWxPointResult $
+    withObjectRef "pageSetupDialogDataGetMinMarginTopLeft" _obj $ \cobj__obj -> 
+    wxPageSetupDialogData_GetMinMarginTopLeft cobj__obj  
+foreign import ccall "wxPageSetupDialogData_GetMinMarginTopLeft" wxPageSetupDialogData_GetMinMarginTopLeft :: Ptr (TPageSetupDialogData a) -> IO (Ptr (TWxPoint ()))
+
+-- | usage: (@pageSetupDialogDataGetPaperId obj@).
+pageSetupDialogDataGetPaperId :: PageSetupDialogData  a ->  IO Int
+pageSetupDialogDataGetPaperId _obj 
+  = withIntResult $
+    withObjectRef "pageSetupDialogDataGetPaperId" _obj $ \cobj__obj -> 
+    wxPageSetupDialogData_GetPaperId cobj__obj  
+foreign import ccall "wxPageSetupDialogData_GetPaperId" wxPageSetupDialogData_GetPaperId :: Ptr (TPageSetupDialogData a) -> IO CInt
+
+-- | usage: (@pageSetupDialogDataGetPaperSize obj@).
+pageSetupDialogDataGetPaperSize :: PageSetupDialogData  a ->  IO (Size)
+pageSetupDialogDataGetPaperSize _obj 
+  = withWxSizeResult $
+    withObjectRef "pageSetupDialogDataGetPaperSize" _obj $ \cobj__obj -> 
+    wxPageSetupDialogData_GetPaperSize cobj__obj  
+foreign import ccall "wxPageSetupDialogData_GetPaperSize" wxPageSetupDialogData_GetPaperSize :: Ptr (TPageSetupDialogData a) -> IO (Ptr (TWxSize ()))
+
+-- | usage: (@pageSetupDialogDataGetPrintData obj@).
+pageSetupDialogDataGetPrintData :: PageSetupDialogData  a ->  IO (PrintData  ())
+pageSetupDialogDataGetPrintData _obj 
+  = withRefPrintData $ \pref -> 
+    withObjectRef "pageSetupDialogDataGetPrintData" _obj $ \cobj__obj -> 
+    wxPageSetupDialogData_GetPrintData cobj__obj   pref
+foreign import ccall "wxPageSetupDialogData_GetPrintData" wxPageSetupDialogData_GetPrintData :: Ptr (TPageSetupDialogData a) -> Ptr (TPrintData ()) -> IO ()
+
+-- | usage: (@pageSetupDialogDataSetDefaultInfo obj flag@).
+pageSetupDialogDataSetDefaultInfo :: PageSetupDialogData  a -> Bool ->  IO ()
+pageSetupDialogDataSetDefaultInfo _obj flag 
+  = withObjectRef "pageSetupDialogDataSetDefaultInfo" _obj $ \cobj__obj -> 
+    wxPageSetupDialogData_SetDefaultInfo cobj__obj  (toCBool flag)  
+foreign import ccall "wxPageSetupDialogData_SetDefaultInfo" wxPageSetupDialogData_SetDefaultInfo :: Ptr (TPageSetupDialogData a) -> CBool -> IO ()
+
+-- | usage: (@pageSetupDialogDataSetDefaultMinMargins obj flag@).
+pageSetupDialogDataSetDefaultMinMargins :: PageSetupDialogData  a -> Int ->  IO ()
+pageSetupDialogDataSetDefaultMinMargins _obj flag 
+  = withObjectRef "pageSetupDialogDataSetDefaultMinMargins" _obj $ \cobj__obj -> 
+    wxPageSetupDialogData_SetDefaultMinMargins cobj__obj  (toCInt flag)  
+foreign import ccall "wxPageSetupDialogData_SetDefaultMinMargins" wxPageSetupDialogData_SetDefaultMinMargins :: Ptr (TPageSetupDialogData a) -> CInt -> IO ()
+
+-- | usage: (@pageSetupDialogDataSetMarginBottomRight obj xy@).
+pageSetupDialogDataSetMarginBottomRight :: PageSetupDialogData  a -> Point ->  IO ()
+pageSetupDialogDataSetMarginBottomRight _obj xy 
+  = withObjectRef "pageSetupDialogDataSetMarginBottomRight" _obj $ \cobj__obj -> 
+    wxPageSetupDialogData_SetMarginBottomRight cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxPageSetupDialogData_SetMarginBottomRight" wxPageSetupDialogData_SetMarginBottomRight :: Ptr (TPageSetupDialogData a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@pageSetupDialogDataSetMarginTopLeft obj xy@).
+pageSetupDialogDataSetMarginTopLeft :: PageSetupDialogData  a -> Point ->  IO ()
+pageSetupDialogDataSetMarginTopLeft _obj xy 
+  = withObjectRef "pageSetupDialogDataSetMarginTopLeft" _obj $ \cobj__obj -> 
+    wxPageSetupDialogData_SetMarginTopLeft cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxPageSetupDialogData_SetMarginTopLeft" wxPageSetupDialogData_SetMarginTopLeft :: Ptr (TPageSetupDialogData a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@pageSetupDialogDataSetMinMarginBottomRight obj xy@).
+pageSetupDialogDataSetMinMarginBottomRight :: PageSetupDialogData  a -> Point ->  IO ()
+pageSetupDialogDataSetMinMarginBottomRight _obj xy 
+  = withObjectRef "pageSetupDialogDataSetMinMarginBottomRight" _obj $ \cobj__obj -> 
+    wxPageSetupDialogData_SetMinMarginBottomRight cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxPageSetupDialogData_SetMinMarginBottomRight" wxPageSetupDialogData_SetMinMarginBottomRight :: Ptr (TPageSetupDialogData a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@pageSetupDialogDataSetMinMarginTopLeft obj xy@).
+pageSetupDialogDataSetMinMarginTopLeft :: PageSetupDialogData  a -> Point ->  IO ()
+pageSetupDialogDataSetMinMarginTopLeft _obj xy 
+  = withObjectRef "pageSetupDialogDataSetMinMarginTopLeft" _obj $ \cobj__obj -> 
+    wxPageSetupDialogData_SetMinMarginTopLeft cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxPageSetupDialogData_SetMinMarginTopLeft" wxPageSetupDialogData_SetMinMarginTopLeft :: Ptr (TPageSetupDialogData a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@pageSetupDialogDataSetPaperId obj id@).
+pageSetupDialogDataSetPaperId :: PageSetupDialogData  a -> Ptr  b ->  IO ()
+pageSetupDialogDataSetPaperId _obj id 
+  = withObjectRef "pageSetupDialogDataSetPaperId" _obj $ \cobj__obj -> 
+    wxPageSetupDialogData_SetPaperId cobj__obj  id  
+foreign import ccall "wxPageSetupDialogData_SetPaperId" wxPageSetupDialogData_SetPaperId :: Ptr (TPageSetupDialogData a) -> Ptr  b -> IO ()
+
+-- | usage: (@pageSetupDialogDataSetPaperSize obj wh@).
+pageSetupDialogDataSetPaperSize :: PageSetupDialogData  a -> Size ->  IO ()
+pageSetupDialogDataSetPaperSize _obj wh 
+  = withObjectRef "pageSetupDialogDataSetPaperSize" _obj $ \cobj__obj -> 
+    wxPageSetupDialogData_SetPaperSize cobj__obj  (toCIntSizeW wh) (toCIntSizeH wh)  
+foreign import ccall "wxPageSetupDialogData_SetPaperSize" wxPageSetupDialogData_SetPaperSize :: Ptr (TPageSetupDialogData a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@pageSetupDialogDataSetPaperSizeId obj id@).
+pageSetupDialogDataSetPaperSizeId :: PageSetupDialogData  a -> Id ->  IO ()
+pageSetupDialogDataSetPaperSizeId _obj id 
+  = withObjectRef "pageSetupDialogDataSetPaperSizeId" _obj $ \cobj__obj -> 
+    wxPageSetupDialogData_SetPaperSizeId cobj__obj  (toCInt id)  
+foreign import ccall "wxPageSetupDialogData_SetPaperSizeId" wxPageSetupDialogData_SetPaperSizeId :: Ptr (TPageSetupDialogData a) -> CInt -> IO ()
+
+-- | usage: (@pageSetupDialogDataSetPrintData obj printData@).
+pageSetupDialogDataSetPrintData :: PageSetupDialogData  a -> PrintData  b ->  IO ()
+pageSetupDialogDataSetPrintData _obj printData 
+  = withObjectRef "pageSetupDialogDataSetPrintData" _obj $ \cobj__obj -> 
+    withObjectPtr printData $ \cobj_printData -> 
+    wxPageSetupDialogData_SetPrintData cobj__obj  cobj_printData  
+foreign import ccall "wxPageSetupDialogData_SetPrintData" wxPageSetupDialogData_SetPrintData :: Ptr (TPageSetupDialogData a) -> Ptr (TPrintData b) -> IO ()
+
+-- | usage: (@pageSetupDialogGetPageSetupData obj@).
+pageSetupDialogGetPageSetupData :: PageSetupDialog  a ->  IO (PageSetupDialogData  ())
+pageSetupDialogGetPageSetupData _obj 
+  = withRefPageSetupDialogData $ \pref -> 
+    withObjectRef "pageSetupDialogGetPageSetupData" _obj $ \cobj__obj -> 
+    wxPageSetupDialog_GetPageSetupData cobj__obj   pref
+foreign import ccall "wxPageSetupDialog_GetPageSetupData" wxPageSetupDialog_GetPageSetupData :: Ptr (TPageSetupDialog a) -> Ptr (TPageSetupDialogData ()) -> IO ()
+
+-- | usage: (@pageSetupDialogShowModal obj@).
+pageSetupDialogShowModal :: PageSetupDialog  a ->  IO Int
+pageSetupDialogShowModal _obj 
+  = withIntResult $
+    withObjectRef "pageSetupDialogShowModal" _obj $ \cobj__obj -> 
+    wxPageSetupDialog_ShowModal cobj__obj  
+foreign import ccall "wxPageSetupDialog_ShowModal" wxPageSetupDialog_ShowModal :: Ptr (TPageSetupDialog a) -> IO CInt
+
+-- | usage: (@paintDCCreate win@).
+paintDCCreate :: Window  a ->  IO (PaintDC  ())
+paintDCCreate win 
+  = withObjectResult $
+    withObjectPtr win $ \cobj_win -> 
+    wxPaintDC_Create cobj_win  
+foreign import ccall "wxPaintDC_Create" wxPaintDC_Create :: Ptr (TWindow a) -> IO (Ptr (TPaintDC ()))
+
+-- | usage: (@paintDCDelete obj@).
+paintDCDelete :: PaintDC  a ->  IO ()
+paintDCDelete
+  = objectDelete
+
+
+-- | usage: (@paletteAssign obj palette@).
+paletteAssign :: Palette  a -> Palette  b ->  IO ()
+paletteAssign _obj palette 
+  = withObjectRef "paletteAssign" _obj $ \cobj__obj -> 
+    withObjectPtr palette $ \cobj_palette -> 
+    wxPalette_Assign cobj__obj  cobj_palette  
+foreign import ccall "wxPalette_Assign" wxPalette_Assign :: Ptr (TPalette a) -> Ptr (TPalette b) -> IO ()
+
+-- | usage: (@paletteChangedEventCopyObject obj obj@).
+paletteChangedEventCopyObject :: PaletteChangedEvent  a -> Ptr  b ->  IO ()
+paletteChangedEventCopyObject _obj obj 
+  = withObjectRef "paletteChangedEventCopyObject" _obj $ \cobj__obj -> 
+    wxPaletteChangedEvent_CopyObject cobj__obj  obj  
+foreign import ccall "wxPaletteChangedEvent_CopyObject" wxPaletteChangedEvent_CopyObject :: Ptr (TPaletteChangedEvent a) -> Ptr  b -> IO ()
+
+-- | usage: (@paletteChangedEventGetChangedWindow obj@).
+paletteChangedEventGetChangedWindow :: PaletteChangedEvent  a ->  IO (Ptr  ())
+paletteChangedEventGetChangedWindow _obj 
+  = withObjectRef "paletteChangedEventGetChangedWindow" _obj $ \cobj__obj -> 
+    wxPaletteChangedEvent_GetChangedWindow cobj__obj  
+foreign import ccall "wxPaletteChangedEvent_GetChangedWindow" wxPaletteChangedEvent_GetChangedWindow :: Ptr (TPaletteChangedEvent a) -> IO (Ptr  ())
+
+-- | usage: (@paletteChangedEventSetChangedWindow obj win@).
+paletteChangedEventSetChangedWindow :: PaletteChangedEvent  a -> Window  b ->  IO ()
+paletteChangedEventSetChangedWindow _obj win 
+  = withObjectRef "paletteChangedEventSetChangedWindow" _obj $ \cobj__obj -> 
+    withObjectPtr win $ \cobj_win -> 
+    wxPaletteChangedEvent_SetChangedWindow cobj__obj  cobj_win  
+foreign import ccall "wxPaletteChangedEvent_SetChangedWindow" wxPaletteChangedEvent_SetChangedWindow :: Ptr (TPaletteChangedEvent a) -> Ptr (TWindow b) -> IO ()
+
+-- | usage: (@paletteCreateDefault@).
+paletteCreateDefault ::  IO (Palette  ())
+paletteCreateDefault 
+  = withObjectResult $
+    wxPalette_CreateDefault 
+foreign import ccall "wxPalette_CreateDefault" wxPalette_CreateDefault :: IO (Ptr (TPalette ()))
+
+-- | usage: (@paletteCreateRGB n red green blue@).
+paletteCreateRGB :: Int -> Ptr  b -> Ptr  c -> Ptr  d ->  IO (Palette  ())
+paletteCreateRGB n red green blue 
+  = withObjectResult $
+    wxPalette_CreateRGB (toCInt n)  red  green  blue  
+foreign import ccall "wxPalette_CreateRGB" wxPalette_CreateRGB :: CInt -> Ptr  b -> Ptr  c -> Ptr  d -> IO (Ptr (TPalette ()))
+
+-- | usage: (@paletteDelete obj@).
+paletteDelete :: Palette  a ->  IO ()
+paletteDelete
+  = objectDelete
+
+
+-- | usage: (@paletteGetPixel obj redgreenblue@).
+paletteGetPixel :: Palette  a -> Color ->  IO Int
+paletteGetPixel _obj redgreenblue 
+  = withIntResult $
+    withObjectRef "paletteGetPixel" _obj $ \cobj__obj -> 
+    wxPalette_GetPixel cobj__obj  (colorRed redgreenblue) (colorGreen redgreenblue) (colorBlue redgreenblue)  
+foreign import ccall "wxPalette_GetPixel" wxPalette_GetPixel :: Ptr (TPalette a) -> Word8 -> Word8 -> Word8 -> IO CInt
+
+-- | usage: (@paletteGetRGB obj pixel red green blue@).
+paletteGetRGB :: Palette  a -> Int -> Ptr  c -> Ptr  d -> Ptr  e ->  IO Bool
+paletteGetRGB _obj pixel red green blue 
+  = withBoolResult $
+    withObjectRef "paletteGetRGB" _obj $ \cobj__obj -> 
+    wxPalette_GetRGB cobj__obj  (toCInt pixel)  red  green  blue  
+foreign import ccall "wxPalette_GetRGB" wxPalette_GetRGB :: Ptr (TPalette a) -> CInt -> Ptr  c -> Ptr  d -> Ptr  e -> IO CBool
+
+-- | usage: (@paletteIsEqual obj palette@).
+paletteIsEqual :: Palette  a -> Palette  b ->  IO Bool
+paletteIsEqual _obj palette 
+  = withBoolResult $
+    withObjectRef "paletteIsEqual" _obj $ \cobj__obj -> 
+    withObjectPtr palette $ \cobj_palette -> 
+    wxPalette_IsEqual cobj__obj  cobj_palette  
+foreign import ccall "wxPalette_IsEqual" wxPalette_IsEqual :: Ptr (TPalette a) -> Ptr (TPalette b) -> IO CBool
+
+-- | usage: (@paletteIsOk obj@).
+paletteIsOk :: Palette  a ->  IO Bool
+paletteIsOk _obj 
+  = withBoolResult $
+    withObjectRef "paletteIsOk" _obj $ \cobj__obj -> 
+    wxPalette_IsOk cobj__obj  
+foreign import ccall "wxPalette_IsOk" wxPalette_IsOk :: Ptr (TPalette a) -> IO CBool
+
+-- | usage: (@panelCreate prt id lfttopwdthgt stl@).
+panelCreate :: Window  a -> Id -> Rect -> Style ->  IO (Panel  ())
+panelCreate _prt _id _lfttopwdthgt _stl 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    wxPanel_Create cobj__prt  (toCInt _id)  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
+foreign import ccall "wxPanel_Create" wxPanel_Create :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TPanel ()))
+
+-- | usage: (@panelInitDialog obj@).
+panelInitDialog :: Panel  a ->  IO ()
+panelInitDialog _obj 
+  = withObjectRef "panelInitDialog" _obj $ \cobj__obj -> 
+    wxPanel_InitDialog cobj__obj  
+foreign import ccall "wxPanel_InitDialog" wxPanel_InitDialog :: Ptr (TPanel a) -> IO ()
+
+-- | usage: (@panelSetFocus obj@).
+panelSetFocus :: Panel  a ->  IO ()
+panelSetFocus _obj 
+  = withObjectRef "panelSetFocus" _obj $ \cobj__obj -> 
+    wxPanel_SetFocus cobj__obj  
+foreign import ccall "wxPanel_SetFocus" wxPanel_SetFocus :: Ptr (TPanel a) -> IO ()
+
+-- | usage: (@penAssign obj pen@).
+penAssign :: Pen  a -> Pen  b ->  IO ()
+penAssign _obj pen 
+  = withObjectRef "penAssign" _obj $ \cobj__obj -> 
+    withObjectPtr pen $ \cobj_pen -> 
+    wxPen_Assign cobj__obj  cobj_pen  
+foreign import ccall "wxPen_Assign" wxPen_Assign :: Ptr (TPen a) -> Ptr (TPen b) -> IO ()
+
+-- | usage: (@penCreateDefault@).
+penCreateDefault ::  IO (Pen  ())
+penCreateDefault 
+  = withManagedPenResult $
+    wxPen_CreateDefault 
+foreign import ccall "wxPen_CreateDefault" wxPen_CreateDefault :: IO (Ptr (TPen ()))
+
+-- | usage: (@penCreateFromBitmap stipple width@).
+penCreateFromBitmap :: Bitmap  a -> Int ->  IO (Pen  ())
+penCreateFromBitmap stipple width 
+  = withManagedPenResult $
+    withObjectPtr stipple $ \cobj_stipple -> 
+    wxPen_CreateFromBitmap cobj_stipple  (toCInt width)  
+foreign import ccall "wxPen_CreateFromBitmap" wxPen_CreateFromBitmap :: Ptr (TBitmap a) -> CInt -> IO (Ptr (TPen ()))
+
+-- | usage: (@penCreateFromColour col width style@).
+penCreateFromColour :: Color -> Int -> Int ->  IO (Pen  ())
+penCreateFromColour col width style 
+  = withManagedPenResult $
+    withColourPtr col $ \cobj_col -> 
+    wxPen_CreateFromColour cobj_col  (toCInt width)  (toCInt style)  
+foreign import ccall "wxPen_CreateFromColour" wxPen_CreateFromColour :: Ptr (TColour a) -> CInt -> CInt -> IO (Ptr (TPen ()))
+
+-- | usage: (@penCreateFromStock id@).
+penCreateFromStock :: Id ->  IO (Pen  ())
+penCreateFromStock id 
+  = withManagedPenResult $
+    wxPen_CreateFromStock (toCInt id)  
+foreign import ccall "wxPen_CreateFromStock" wxPen_CreateFromStock :: CInt -> IO (Ptr (TPen ()))
+
+-- | usage: (@penDelete obj@).
+penDelete :: Pen  a ->  IO ()
+penDelete
+  = objectDelete
+
+
+-- | usage: (@penGetCap obj@).
+penGetCap :: Pen  a ->  IO Int
+penGetCap _obj 
+  = withIntResult $
+    withObjectRef "penGetCap" _obj $ \cobj__obj -> 
+    wxPen_GetCap cobj__obj  
+foreign import ccall "wxPen_GetCap" wxPen_GetCap :: Ptr (TPen a) -> IO CInt
+
+-- | usage: (@penGetColour obj@).
+penGetColour :: Pen  a ->  IO (Color)
+penGetColour _obj 
+  = withRefColour $ \pref -> 
+    withObjectRef "penGetColour" _obj $ \cobj__obj -> 
+    wxPen_GetColour cobj__obj   pref
+foreign import ccall "wxPen_GetColour" wxPen_GetColour :: Ptr (TPen a) -> Ptr (TColour ()) -> IO ()
+
+-- | usage: (@penGetDashes obj ptr@).
+penGetDashes :: Pen  a -> Ptr  b ->  IO Int
+penGetDashes _obj ptr 
+  = withIntResult $
+    withObjectRef "penGetDashes" _obj $ \cobj__obj -> 
+    wxPen_GetDashes cobj__obj  ptr  
+foreign import ccall "wxPen_GetDashes" wxPen_GetDashes :: Ptr (TPen a) -> Ptr  b -> IO CInt
+
+-- | usage: (@penGetJoin obj@).
+penGetJoin :: Pen  a ->  IO Int
+penGetJoin _obj 
+  = withIntResult $
+    withObjectRef "penGetJoin" _obj $ \cobj__obj -> 
+    wxPen_GetJoin cobj__obj  
+foreign import ccall "wxPen_GetJoin" wxPen_GetJoin :: Ptr (TPen a) -> IO CInt
+
+-- | usage: (@penGetStipple obj@).
+penGetStipple :: Pen  a ->  IO (Bitmap  ())
+penGetStipple _obj 
+  = withRefBitmap $ \pref -> 
+    withObjectRef "penGetStipple" _obj $ \cobj__obj -> 
+    wxPen_GetStipple cobj__obj   pref
+foreign import ccall "wxPen_GetStipple" wxPen_GetStipple :: Ptr (TPen a) -> Ptr (TBitmap ()) -> IO ()
+
+-- | usage: (@penGetStyle obj@).
+penGetStyle :: Pen  a ->  IO Int
+penGetStyle _obj 
+  = withIntResult $
+    withObjectRef "penGetStyle" _obj $ \cobj__obj -> 
+    wxPen_GetStyle cobj__obj  
+foreign import ccall "wxPen_GetStyle" wxPen_GetStyle :: Ptr (TPen a) -> IO CInt
+
+-- | usage: (@penGetWidth obj@).
+penGetWidth :: Pen  a ->  IO Int
+penGetWidth _obj 
+  = withIntResult $
+    withObjectRef "penGetWidth" _obj $ \cobj__obj -> 
+    wxPen_GetWidth cobj__obj  
+foreign import ccall "wxPen_GetWidth" wxPen_GetWidth :: Ptr (TPen a) -> IO CInt
+
+-- | usage: (@penIsEqual obj pen@).
+penIsEqual :: Pen  a -> Pen  b ->  IO Bool
+penIsEqual _obj pen 
+  = withBoolResult $
+    withObjectRef "penIsEqual" _obj $ \cobj__obj -> 
+    withObjectPtr pen $ \cobj_pen -> 
+    wxPen_IsEqual cobj__obj  cobj_pen  
+foreign import ccall "wxPen_IsEqual" wxPen_IsEqual :: Ptr (TPen a) -> Ptr (TPen b) -> IO CBool
+
+-- | usage: (@penIsOk obj@).
+penIsOk :: Pen  a ->  IO Bool
+penIsOk _obj 
+  = withBoolResult $
+    withObjectRef "penIsOk" _obj $ \cobj__obj -> 
+    wxPen_IsOk cobj__obj  
+foreign import ccall "wxPen_IsOk" wxPen_IsOk :: Ptr (TPen a) -> IO CBool
+
+-- | usage: (@penIsStatic self@).
+penIsStatic :: Pen  a ->  IO Bool
+penIsStatic self 
+  = withBoolResult $
+    withObjectPtr self $ \cobj_self -> 
+    wxPen_IsStatic cobj_self  
+foreign import ccall "wxPen_IsStatic" wxPen_IsStatic :: Ptr (TPen a) -> IO CBool
+
+-- | usage: (@penSafeDelete self@).
+penSafeDelete :: Pen  a ->  IO ()
+penSafeDelete self 
+  = withObjectPtr self $ \cobj_self -> 
+    wxPen_SafeDelete cobj_self  
+foreign import ccall "wxPen_SafeDelete" wxPen_SafeDelete :: Ptr (TPen a) -> IO ()
+
+-- | usage: (@penSetCap obj cap@).
+penSetCap :: Pen  a -> Int ->  IO ()
+penSetCap _obj cap 
+  = withObjectRef "penSetCap" _obj $ \cobj__obj -> 
+    wxPen_SetCap cobj__obj  (toCInt cap)  
+foreign import ccall "wxPen_SetCap" wxPen_SetCap :: Ptr (TPen a) -> CInt -> IO ()
+
+-- | usage: (@penSetColour obj col@).
+penSetColour :: Pen  a -> Color ->  IO ()
+penSetColour _obj col 
+  = withObjectRef "penSetColour" _obj $ \cobj__obj -> 
+    withColourPtr col $ \cobj_col -> 
+    wxPen_SetColour cobj__obj  cobj_col  
+foreign import ccall "wxPen_SetColour" wxPen_SetColour :: Ptr (TPen a) -> Ptr (TColour b) -> IO ()
+
+-- | usage: (@penSetColourSingle obj r g b@).
+penSetColourSingle :: Pen  a -> Char -> Char -> Char ->  IO ()
+penSetColourSingle _obj r g b 
+  = withObjectRef "penSetColourSingle" _obj $ \cobj__obj -> 
+    wxPen_SetColourSingle cobj__obj  (toCWchar r)  (toCWchar g)  (toCWchar b)  
+foreign import ccall "wxPen_SetColourSingle" wxPen_SetColourSingle :: Ptr (TPen a) -> CWchar -> CWchar -> CWchar -> IO ()
+
+-- | usage: (@penSetDashes obj nbdashes dash@).
+penSetDashes :: Pen  a -> Int -> Ptr  c ->  IO ()
+penSetDashes _obj nbdashes dash 
+  = withObjectRef "penSetDashes" _obj $ \cobj__obj -> 
+    wxPen_SetDashes cobj__obj  (toCInt nbdashes)  dash  
+foreign import ccall "wxPen_SetDashes" wxPen_SetDashes :: Ptr (TPen a) -> CInt -> Ptr  c -> IO ()
+
+-- | usage: (@penSetJoin obj join@).
+penSetJoin :: Pen  a -> Int ->  IO ()
+penSetJoin _obj join 
+  = withObjectRef "penSetJoin" _obj $ \cobj__obj -> 
+    wxPen_SetJoin cobj__obj  (toCInt join)  
+foreign import ccall "wxPen_SetJoin" wxPen_SetJoin :: Ptr (TPen a) -> CInt -> IO ()
+
+-- | usage: (@penSetStipple obj stipple@).
+penSetStipple :: Pen  a -> Bitmap  b ->  IO ()
+penSetStipple _obj stipple 
+  = withObjectRef "penSetStipple" _obj $ \cobj__obj -> 
+    withObjectPtr stipple $ \cobj_stipple -> 
+    wxPen_SetStipple cobj__obj  cobj_stipple  
+foreign import ccall "wxPen_SetStipple" wxPen_SetStipple :: Ptr (TPen a) -> Ptr (TBitmap b) -> IO ()
+
+-- | usage: (@penSetStyle obj style@).
+penSetStyle :: Pen  a -> Int ->  IO ()
+penSetStyle _obj style 
+  = withObjectRef "penSetStyle" _obj $ \cobj__obj -> 
+    wxPen_SetStyle cobj__obj  (toCInt style)  
+foreign import ccall "wxPen_SetStyle" wxPen_SetStyle :: Ptr (TPen a) -> CInt -> IO ()
+
+-- | usage: (@penSetWidth obj width@).
+penSetWidth :: Pen  a -> Int ->  IO ()
+penSetWidth _obj width 
+  = withObjectRef "penSetWidth" _obj $ \cobj__obj -> 
+    wxPen_SetWidth cobj__obj  (toCInt width)  
+foreign import ccall "wxPen_SetWidth" wxPen_SetWidth :: Ptr (TPen a) -> CInt -> IO ()
+
+-- | usage: (@popProvider@).
+popProvider ::  IO Bool
+popProvider 
+  = withBoolResult $
+    wx_PopProvider 
+foreign import ccall "PopProvider" wx_PopProvider :: IO CBool
+
+-- | usage: (@postScriptDCCreate wxdata@).
+postScriptDCCreate :: PrintData  a ->  IO (PostScriptDC  ())
+postScriptDCCreate wxdata 
+  = withObjectResult $
+    withObjectPtr wxdata $ \cobj_wxdata -> 
+    wxPostScriptDC_Create cobj_wxdata  
+foreign import ccall "wxPostScriptDC_Create" wxPostScriptDC_Create :: Ptr (TPrintData a) -> IO (Ptr (TPostScriptDC ()))
+
+-- | usage: (@postScriptDCDelete self@).
+postScriptDCDelete :: PostScriptDC  a ->  IO ()
+postScriptDCDelete
+  = objectDelete
+
+
+-- | usage: (@postScriptDCGetResolution self@).
+postScriptDCGetResolution :: PostScriptDC  a ->  IO Int
+postScriptDCGetResolution self 
+  = withIntResult $
+    withObjectRef "postScriptDCGetResolution" self $ \cobj_self -> 
+    wxPostScriptDC_GetResolution cobj_self  
+foreign import ccall "wxPostScriptDC_GetResolution" wxPostScriptDC_GetResolution :: Ptr (TPostScriptDC a) -> IO CInt
+
+-- | usage: (@postScriptDCSetResolution self ppi@).
+postScriptDCSetResolution :: PostScriptDC  a -> Int ->  IO ()
+postScriptDCSetResolution self ppi 
+  = withObjectRef "postScriptDCSetResolution" self $ \cobj_self -> 
+    wxPostScriptDC_SetResolution cobj_self  (toCInt ppi)  
+foreign import ccall "wxPostScriptDC_SetResolution" wxPostScriptDC_SetResolution :: Ptr (TPostScriptDC a) -> CInt -> IO ()
+
+-- | usage: (@postScriptPrintNativeDataCreate@).
+postScriptPrintNativeDataCreate ::  IO (PostScriptPrintNativeData  ())
+postScriptPrintNativeDataCreate 
+  = withObjectResult $
+    wxPostScriptPrintNativeData_Create 
+foreign import ccall "wxPostScriptPrintNativeData_Create" wxPostScriptPrintNativeData_Create :: IO (Ptr (TPostScriptPrintNativeData ()))
+
+-- | usage: (@postScriptPrintNativeDataDelete obj@).
+postScriptPrintNativeDataDelete :: PostScriptPrintNativeData  a ->  IO ()
+postScriptPrintNativeDataDelete
+  = objectDelete
+
+
+-- | usage: (@previewCanvasCreate preview parent xywh style@).
+previewCanvasCreate :: PrintPreview  a -> Window  b -> Rect -> Int ->  IO (PreviewCanvas  ())
+previewCanvasCreate preview parent xywh style 
+  = withObjectResult $
+    withObjectPtr preview $ \cobj_preview -> 
+    withObjectPtr parent $ \cobj_parent -> 
+    wxPreviewCanvas_Create cobj_preview  cobj_parent  (toCIntRectX xywh) (toCIntRectY xywh)(toCIntRectW xywh) (toCIntRectH xywh)  (toCInt style)  
+foreign import ccall "wxPreviewCanvas_Create" wxPreviewCanvas_Create :: Ptr (TPrintPreview a) -> Ptr (TWindow b) -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TPreviewCanvas ()))
+
+{- |  Usage: @previewFrameCreate printPreview parent title rect name @.  -}
+previewFrameCreate :: PrintPreview  a -> Frame  b -> String -> Rect -> Style -> String ->  IO (PreviewFrame  ())
+previewFrameCreate preview parent title xywidthheight _stl name 
+  = withObjectResult $
+    withObjectPtr preview $ \cobj_preview -> 
+    withObjectPtr parent $ \cobj_parent -> 
+    withStringPtr title $ \cobj_title -> 
+    withStringPtr name $ \cobj_name -> 
+    wxPreviewFrame_Create cobj_preview  cobj_parent  cobj_title  (toCIntRectX xywidthheight) (toCIntRectY xywidthheight)(toCIntRectW xywidthheight) (toCIntRectH xywidthheight)  (toCInt _stl)  cobj_name  
+foreign import ccall "wxPreviewFrame_Create" wxPreviewFrame_Create :: Ptr (TPrintPreview a) -> Ptr (TFrame b) -> Ptr (TWxString c) -> CInt -> CInt -> CInt -> CInt -> CInt -> Ptr (TWxString f) -> IO (Ptr (TPreviewFrame ()))
+
+-- | usage: (@previewFrameDelete self@).
+previewFrameDelete :: PreviewFrame  a ->  IO ()
+previewFrameDelete
+  = objectDelete
+
+
+{- |  Usage: @previewFrameInitialize self@, call this before showing the frame.  -}
+previewFrameInitialize :: PreviewFrame  a ->  IO ()
+previewFrameInitialize self 
+  = withObjectRef "previewFrameInitialize" self $ \cobj_self -> 
+    wxPreviewFrame_Initialize cobj_self  
+foreign import ccall "wxPreviewFrame_Initialize" wxPreviewFrame_Initialize :: Ptr (TPreviewFrame a) -> IO ()
+
+-- | usage: (@printDataAssign obj wxdata@).
+printDataAssign :: PrintData  a -> PrintData  b ->  IO ()
+printDataAssign _obj wxdata 
+  = withObjectRef "printDataAssign" _obj $ \cobj__obj -> 
+    withObjectPtr wxdata $ \cobj_wxdata -> 
+    wxPrintData_Assign cobj__obj  cobj_wxdata  
+foreign import ccall "wxPrintData_Assign" wxPrintData_Assign :: Ptr (TPrintData a) -> Ptr (TPrintData b) -> IO ()
+
+-- | usage: (@printDataCreate@).
+printDataCreate ::  IO (PrintData  ())
+printDataCreate 
+  = withManagedObjectResult $
+    wxPrintData_Create 
+foreign import ccall "wxPrintData_Create" wxPrintData_Create :: IO (Ptr (TPrintData ()))
+
+-- | usage: (@printDataDelete obj@).
+printDataDelete :: PrintData  a ->  IO ()
+printDataDelete
+  = objectDelete
+
+
+-- | usage: (@printDataGetCollate obj@).
+printDataGetCollate :: PrintData  a ->  IO Bool
+printDataGetCollate _obj 
+  = withBoolResult $
+    withObjectRef "printDataGetCollate" _obj $ \cobj__obj -> 
+    wxPrintData_GetCollate cobj__obj  
+foreign import ccall "wxPrintData_GetCollate" wxPrintData_GetCollate :: Ptr (TPrintData a) -> IO CBool
+
+-- | usage: (@printDataGetColour obj@).
+printDataGetColour :: PrintData  a ->  IO Bool
+printDataGetColour _obj 
+  = withBoolResult $
+    withObjectRef "printDataGetColour" _obj $ \cobj__obj -> 
+    wxPrintData_GetColour cobj__obj  
+foreign import ccall "wxPrintData_GetColour" wxPrintData_GetColour :: Ptr (TPrintData a) -> IO CBool
+
+-- | usage: (@printDataGetDuplex obj@).
+printDataGetDuplex :: PrintData  a ->  IO Int
+printDataGetDuplex _obj 
+  = withIntResult $
+    withObjectRef "printDataGetDuplex" _obj $ \cobj__obj -> 
+    wxPrintData_GetDuplex cobj__obj  
+foreign import ccall "wxPrintData_GetDuplex" wxPrintData_GetDuplex :: Ptr (TPrintData a) -> IO CInt
+
+-- | usage: (@printDataGetFilename obj@).
+printDataGetFilename :: PrintData  a ->  IO (String)
+printDataGetFilename _obj 
+  = withManagedStringResult $
+    withObjectRef "printDataGetFilename" _obj $ \cobj__obj -> 
+    wxPrintData_GetFilename cobj__obj  
+foreign import ccall "wxPrintData_GetFilename" wxPrintData_GetFilename :: Ptr (TPrintData a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@printDataGetFontMetricPath obj@).
+printDataGetFontMetricPath :: PrintData  a ->  IO (String)
+printDataGetFontMetricPath _obj 
+  = withManagedStringResult $
+    withObjectRef "printDataGetFontMetricPath" _obj $ \cobj__obj -> 
+    wxPrintData_GetFontMetricPath cobj__obj  
+foreign import ccall "wxPrintData_GetFontMetricPath" wxPrintData_GetFontMetricPath :: Ptr (TPrintData a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@printDataGetNoCopies obj@).
+printDataGetNoCopies :: PrintData  a ->  IO Int
+printDataGetNoCopies _obj 
+  = withIntResult $
+    withObjectRef "printDataGetNoCopies" _obj $ \cobj__obj -> 
+    wxPrintData_GetNoCopies cobj__obj  
+foreign import ccall "wxPrintData_GetNoCopies" wxPrintData_GetNoCopies :: Ptr (TPrintData a) -> IO CInt
+
+-- | usage: (@printDataGetOrientation obj@).
+printDataGetOrientation :: PrintData  a ->  IO Int
+printDataGetOrientation _obj 
+  = withIntResult $
+    withObjectRef "printDataGetOrientation" _obj $ \cobj__obj -> 
+    wxPrintData_GetOrientation cobj__obj  
+foreign import ccall "wxPrintData_GetOrientation" wxPrintData_GetOrientation :: Ptr (TPrintData a) -> IO CInt
+
+-- | usage: (@printDataGetPaperId obj@).
+printDataGetPaperId :: PrintData  a ->  IO Int
+printDataGetPaperId _obj 
+  = withIntResult $
+    withObjectRef "printDataGetPaperId" _obj $ \cobj__obj -> 
+    wxPrintData_GetPaperId cobj__obj  
+foreign import ccall "wxPrintData_GetPaperId" wxPrintData_GetPaperId :: Ptr (TPrintData a) -> IO CInt
+
+-- | usage: (@printDataGetPaperSize obj@).
+printDataGetPaperSize :: PrintData  a ->  IO (Size)
+printDataGetPaperSize _obj 
+  = withWxSizeResult $
+    withObjectRef "printDataGetPaperSize" _obj $ \cobj__obj -> 
+    wxPrintData_GetPaperSize cobj__obj  
+foreign import ccall "wxPrintData_GetPaperSize" wxPrintData_GetPaperSize :: Ptr (TPrintData a) -> IO (Ptr (TWxSize ()))
+
+-- | usage: (@printDataGetPreviewCommand obj@).
+printDataGetPreviewCommand :: PrintData  a ->  IO (String)
+printDataGetPreviewCommand _obj 
+  = withManagedStringResult $
+    withObjectRef "printDataGetPreviewCommand" _obj $ \cobj__obj -> 
+    wxPrintData_GetPreviewCommand cobj__obj  
+foreign import ccall "wxPrintData_GetPreviewCommand" wxPrintData_GetPreviewCommand :: Ptr (TPrintData a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@printDataGetPrintMode obj@).
+printDataGetPrintMode :: PrintData  a ->  IO Int
+printDataGetPrintMode _obj 
+  = withIntResult $
+    withObjectRef "printDataGetPrintMode" _obj $ \cobj__obj -> 
+    wxPrintData_GetPrintMode cobj__obj  
+foreign import ccall "wxPrintData_GetPrintMode" wxPrintData_GetPrintMode :: Ptr (TPrintData a) -> IO CInt
+
+-- | usage: (@printDataGetPrinterCommand obj@).
+printDataGetPrinterCommand :: PrintData  a ->  IO (String)
+printDataGetPrinterCommand _obj 
+  = withManagedStringResult $
+    withObjectRef "printDataGetPrinterCommand" _obj $ \cobj__obj -> 
+    wxPrintData_GetPrinterCommand cobj__obj  
+foreign import ccall "wxPrintData_GetPrinterCommand" wxPrintData_GetPrinterCommand :: Ptr (TPrintData a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@printDataGetPrinterName obj@).
+printDataGetPrinterName :: PrintData  a ->  IO (String)
+printDataGetPrinterName _obj 
+  = withManagedStringResult $
+    withObjectRef "printDataGetPrinterName" _obj $ \cobj__obj -> 
+    wxPrintData_GetPrinterName cobj__obj  
+foreign import ccall "wxPrintData_GetPrinterName" wxPrintData_GetPrinterName :: Ptr (TPrintData a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@printDataGetPrinterOptions obj@).
+printDataGetPrinterOptions :: PrintData  a ->  IO (String)
+printDataGetPrinterOptions _obj 
+  = withManagedStringResult $
+    withObjectRef "printDataGetPrinterOptions" _obj $ \cobj__obj -> 
+    wxPrintData_GetPrinterOptions cobj__obj  
+foreign import ccall "wxPrintData_GetPrinterOptions" wxPrintData_GetPrinterOptions :: Ptr (TPrintData a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@printDataGetPrinterScaleX obj@).
+printDataGetPrinterScaleX :: PrintData  a ->  IO Double
+printDataGetPrinterScaleX _obj 
+  = withObjectRef "printDataGetPrinterScaleX" _obj $ \cobj__obj -> 
+    wxPrintData_GetPrinterScaleX cobj__obj  
+foreign import ccall "wxPrintData_GetPrinterScaleX" wxPrintData_GetPrinterScaleX :: Ptr (TPrintData a) -> IO Double
+
+-- | usage: (@printDataGetPrinterScaleY obj@).
+printDataGetPrinterScaleY :: PrintData  a ->  IO Double
+printDataGetPrinterScaleY _obj 
+  = withObjectRef "printDataGetPrinterScaleY" _obj $ \cobj__obj -> 
+    wxPrintData_GetPrinterScaleY cobj__obj  
+foreign import ccall "wxPrintData_GetPrinterScaleY" wxPrintData_GetPrinterScaleY :: Ptr (TPrintData a) -> IO Double
+
+-- | usage: (@printDataGetPrinterTranslateX obj@).
+printDataGetPrinterTranslateX :: PrintData  a ->  IO Int
+printDataGetPrinterTranslateX _obj 
+  = withIntResult $
+    withObjectRef "printDataGetPrinterTranslateX" _obj $ \cobj__obj -> 
+    wxPrintData_GetPrinterTranslateX cobj__obj  
+foreign import ccall "wxPrintData_GetPrinterTranslateX" wxPrintData_GetPrinterTranslateX :: Ptr (TPrintData a) -> IO CInt
+
+-- | usage: (@printDataGetPrinterTranslateY obj@).
+printDataGetPrinterTranslateY :: PrintData  a ->  IO Int
+printDataGetPrinterTranslateY _obj 
+  = withIntResult $
+    withObjectRef "printDataGetPrinterTranslateY" _obj $ \cobj__obj -> 
+    wxPrintData_GetPrinterTranslateY cobj__obj  
+foreign import ccall "wxPrintData_GetPrinterTranslateY" wxPrintData_GetPrinterTranslateY :: Ptr (TPrintData a) -> IO CInt
+
+-- | usage: (@printDataGetQuality obj@).
+printDataGetQuality :: PrintData  a ->  IO Int
+printDataGetQuality _obj 
+  = withIntResult $
+    withObjectRef "printDataGetQuality" _obj $ \cobj__obj -> 
+    wxPrintData_GetQuality cobj__obj  
+foreign import ccall "wxPrintData_GetQuality" wxPrintData_GetQuality :: Ptr (TPrintData a) -> IO CInt
+
+-- | usage: (@printDataSetCollate obj flag@).
+printDataSetCollate :: PrintData  a -> Bool ->  IO ()
+printDataSetCollate _obj flag 
+  = withObjectRef "printDataSetCollate" _obj $ \cobj__obj -> 
+    wxPrintData_SetCollate cobj__obj  (toCBool flag)  
+foreign import ccall "wxPrintData_SetCollate" wxPrintData_SetCollate :: Ptr (TPrintData a) -> CBool -> IO ()
+
+-- | usage: (@printDataSetColour obj colour@).
+printDataSetColour :: PrintData  a -> Bool ->  IO ()
+printDataSetColour _obj colour 
+  = withObjectRef "printDataSetColour" _obj $ \cobj__obj -> 
+    wxPrintData_SetColour cobj__obj  (toCBool colour)  
+foreign import ccall "wxPrintData_SetColour" wxPrintData_SetColour :: Ptr (TPrintData a) -> CBool -> IO ()
+
+-- | usage: (@printDataSetDuplex obj duplex@).
+printDataSetDuplex :: PrintData  a -> Int ->  IO ()
+printDataSetDuplex _obj duplex 
+  = withObjectRef "printDataSetDuplex" _obj $ \cobj__obj -> 
+    wxPrintData_SetDuplex cobj__obj  (toCInt duplex)  
+foreign import ccall "wxPrintData_SetDuplex" wxPrintData_SetDuplex :: Ptr (TPrintData a) -> CInt -> IO ()
+
+-- | usage: (@printDataSetFilename obj filename@).
+printDataSetFilename :: PrintData  a -> String ->  IO ()
+printDataSetFilename _obj filename 
+  = withObjectRef "printDataSetFilename" _obj $ \cobj__obj -> 
+    withStringPtr filename $ \cobj_filename -> 
+    wxPrintData_SetFilename cobj__obj  cobj_filename  
+foreign import ccall "wxPrintData_SetFilename" wxPrintData_SetFilename :: Ptr (TPrintData a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@printDataSetFontMetricPath obj path@).
+printDataSetFontMetricPath :: PrintData  a -> String ->  IO ()
+printDataSetFontMetricPath _obj path 
+  = withObjectRef "printDataSetFontMetricPath" _obj $ \cobj__obj -> 
+    withStringPtr path $ \cobj_path -> 
+    wxPrintData_SetFontMetricPath cobj__obj  cobj_path  
+foreign import ccall "wxPrintData_SetFontMetricPath" wxPrintData_SetFontMetricPath :: Ptr (TPrintData a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@printDataSetNoCopies obj v@).
+printDataSetNoCopies :: PrintData  a -> Int ->  IO ()
+printDataSetNoCopies _obj v 
+  = withObjectRef "printDataSetNoCopies" _obj $ \cobj__obj -> 
+    wxPrintData_SetNoCopies cobj__obj  (toCInt v)  
+foreign import ccall "wxPrintData_SetNoCopies" wxPrintData_SetNoCopies :: Ptr (TPrintData a) -> CInt -> IO ()
+
+-- | usage: (@printDataSetOrientation obj orient@).
+printDataSetOrientation :: PrintData  a -> Int ->  IO ()
+printDataSetOrientation _obj orient 
+  = withObjectRef "printDataSetOrientation" _obj $ \cobj__obj -> 
+    wxPrintData_SetOrientation cobj__obj  (toCInt orient)  
+foreign import ccall "wxPrintData_SetOrientation" wxPrintData_SetOrientation :: Ptr (TPrintData a) -> CInt -> IO ()
+
+-- | usage: (@printDataSetPaperId obj sizeId@).
+printDataSetPaperId :: PrintData  a -> Int ->  IO ()
+printDataSetPaperId _obj sizeId 
+  = withObjectRef "printDataSetPaperId" _obj $ \cobj__obj -> 
+    wxPrintData_SetPaperId cobj__obj  (toCInt sizeId)  
+foreign import ccall "wxPrintData_SetPaperId" wxPrintData_SetPaperId :: Ptr (TPrintData a) -> CInt -> IO ()
+
+-- | usage: (@printDataSetPaperSize obj wh@).
+printDataSetPaperSize :: PrintData  a -> Size ->  IO ()
+printDataSetPaperSize _obj wh 
+  = withObjectRef "printDataSetPaperSize" _obj $ \cobj__obj -> 
+    wxPrintData_SetPaperSize cobj__obj  (toCIntSizeW wh) (toCIntSizeH wh)  
+foreign import ccall "wxPrintData_SetPaperSize" wxPrintData_SetPaperSize :: Ptr (TPrintData a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@printDataSetPreviewCommand obj command@).
+printDataSetPreviewCommand :: PrintData  a -> Command  b ->  IO ()
+printDataSetPreviewCommand _obj command 
+  = withObjectRef "printDataSetPreviewCommand" _obj $ \cobj__obj -> 
+    withObjectPtr command $ \cobj_command -> 
+    wxPrintData_SetPreviewCommand cobj__obj  cobj_command  
+foreign import ccall "wxPrintData_SetPreviewCommand" wxPrintData_SetPreviewCommand :: Ptr (TPrintData a) -> Ptr (TCommand b) -> IO ()
+
+-- | usage: (@printDataSetPrintMode obj printMode@).
+printDataSetPrintMode :: PrintData  a -> Int ->  IO ()
+printDataSetPrintMode _obj printMode 
+  = withObjectRef "printDataSetPrintMode" _obj $ \cobj__obj -> 
+    wxPrintData_SetPrintMode cobj__obj  (toCInt printMode)  
+foreign import ccall "wxPrintData_SetPrintMode" wxPrintData_SetPrintMode :: Ptr (TPrintData a) -> CInt -> IO ()
+
+-- | usage: (@printDataSetPrinterCommand obj command@).
+printDataSetPrinterCommand :: PrintData  a -> Command  b ->  IO ()
+printDataSetPrinterCommand _obj command 
+  = withObjectRef "printDataSetPrinterCommand" _obj $ \cobj__obj -> 
+    withObjectPtr command $ \cobj_command -> 
+    wxPrintData_SetPrinterCommand cobj__obj  cobj_command  
+foreign import ccall "wxPrintData_SetPrinterCommand" wxPrintData_SetPrinterCommand :: Ptr (TPrintData a) -> Ptr (TCommand b) -> IO ()
+
+-- | usage: (@printDataSetPrinterName obj name@).
+printDataSetPrinterName :: PrintData  a -> String ->  IO ()
+printDataSetPrinterName _obj name 
+  = withObjectRef "printDataSetPrinterName" _obj $ \cobj__obj -> 
+    withStringPtr name $ \cobj_name -> 
+    wxPrintData_SetPrinterName cobj__obj  cobj_name  
+foreign import ccall "wxPrintData_SetPrinterName" wxPrintData_SetPrinterName :: Ptr (TPrintData a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@printDataSetPrinterOptions obj options@).
+printDataSetPrinterOptions :: PrintData  a -> String ->  IO ()
+printDataSetPrinterOptions _obj options 
+  = withObjectRef "printDataSetPrinterOptions" _obj $ \cobj__obj -> 
+    withStringPtr options $ \cobj_options -> 
+    wxPrintData_SetPrinterOptions cobj__obj  cobj_options  
+foreign import ccall "wxPrintData_SetPrinterOptions" wxPrintData_SetPrinterOptions :: Ptr (TPrintData a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@printDataSetPrinterScaleX obj x@).
+printDataSetPrinterScaleX :: PrintData  a -> Double ->  IO ()
+printDataSetPrinterScaleX _obj x 
+  = withObjectRef "printDataSetPrinterScaleX" _obj $ \cobj__obj -> 
+    wxPrintData_SetPrinterScaleX cobj__obj  x  
+foreign import ccall "wxPrintData_SetPrinterScaleX" wxPrintData_SetPrinterScaleX :: Ptr (TPrintData a) -> Double -> IO ()
+
+-- | usage: (@printDataSetPrinterScaleY obj y@).
+printDataSetPrinterScaleY :: PrintData  a -> Double ->  IO ()
+printDataSetPrinterScaleY _obj y 
+  = withObjectRef "printDataSetPrinterScaleY" _obj $ \cobj__obj -> 
+    wxPrintData_SetPrinterScaleY cobj__obj  y  
+foreign import ccall "wxPrintData_SetPrinterScaleY" wxPrintData_SetPrinterScaleY :: Ptr (TPrintData a) -> Double -> IO ()
+
+-- | usage: (@printDataSetPrinterScaling obj x y@).
+printDataSetPrinterScaling :: PrintData  a -> Double -> Double ->  IO ()
+printDataSetPrinterScaling _obj x y 
+  = withObjectRef "printDataSetPrinterScaling" _obj $ \cobj__obj -> 
+    wxPrintData_SetPrinterScaling cobj__obj  x  y  
+foreign import ccall "wxPrintData_SetPrinterScaling" wxPrintData_SetPrinterScaling :: Ptr (TPrintData a) -> Double -> Double -> IO ()
+
+-- | usage: (@printDataSetPrinterTranslateX obj x@).
+printDataSetPrinterTranslateX :: PrintData  a -> Int ->  IO ()
+printDataSetPrinterTranslateX _obj x 
+  = withObjectRef "printDataSetPrinterTranslateX" _obj $ \cobj__obj -> 
+    wxPrintData_SetPrinterTranslateX cobj__obj  (toCInt x)  
+foreign import ccall "wxPrintData_SetPrinterTranslateX" wxPrintData_SetPrinterTranslateX :: Ptr (TPrintData a) -> CInt -> IO ()
+
+-- | usage: (@printDataSetPrinterTranslateY obj y@).
+printDataSetPrinterTranslateY :: PrintData  a -> Int ->  IO ()
+printDataSetPrinterTranslateY _obj y 
+  = withObjectRef "printDataSetPrinterTranslateY" _obj $ \cobj__obj -> 
+    wxPrintData_SetPrinterTranslateY cobj__obj  (toCInt y)  
+foreign import ccall "wxPrintData_SetPrinterTranslateY" wxPrintData_SetPrinterTranslateY :: Ptr (TPrintData a) -> CInt -> IO ()
+
+-- | usage: (@printDataSetPrinterTranslation obj xy@).
+printDataSetPrinterTranslation :: PrintData  a -> Point ->  IO ()
+printDataSetPrinterTranslation _obj xy 
+  = withObjectRef "printDataSetPrinterTranslation" _obj $ \cobj__obj -> 
+    wxPrintData_SetPrinterTranslation cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxPrintData_SetPrinterTranslation" wxPrintData_SetPrinterTranslation :: Ptr (TPrintData a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@printDataSetQuality obj quality@).
+printDataSetQuality :: PrintData  a -> Int ->  IO ()
+printDataSetQuality _obj quality 
+  = withObjectRef "printDataSetQuality" _obj $ \cobj__obj -> 
+    wxPrintData_SetQuality cobj__obj  (toCInt quality)  
+foreign import ccall "wxPrintData_SetQuality" wxPrintData_SetQuality :: Ptr (TPrintData a) -> CInt -> IO ()
+
+-- | usage: (@printDialogCreate parent wxdata@).
+printDialogCreate :: Window  a -> PrintDialogData  b ->  IO (PrintDialog  ())
+printDialogCreate parent wxdata 
+  = withObjectResult $
+    withObjectPtr parent $ \cobj_parent -> 
+    withObjectPtr wxdata $ \cobj_wxdata -> 
+    wxPrintDialog_Create cobj_parent  cobj_wxdata  
+foreign import ccall "wxPrintDialog_Create" wxPrintDialog_Create :: Ptr (TWindow a) -> Ptr (TPrintDialogData b) -> IO (Ptr (TPrintDialog ()))
+
+-- | usage: (@printDialogDataAssign obj wxdata@).
+printDialogDataAssign :: PrintDialogData  a -> PrintDialogData  b ->  IO ()
+printDialogDataAssign _obj wxdata 
+  = withObjectRef "printDialogDataAssign" _obj $ \cobj__obj -> 
+    withObjectPtr wxdata $ \cobj_wxdata -> 
+    wxPrintDialogData_Assign cobj__obj  cobj_wxdata  
+foreign import ccall "wxPrintDialogData_Assign" wxPrintDialogData_Assign :: Ptr (TPrintDialogData a) -> Ptr (TPrintDialogData b) -> IO ()
+
+-- | usage: (@printDialogDataAssignData obj wxdata@).
+printDialogDataAssignData :: PrintDialogData  a -> PrintData  b ->  IO ()
+printDialogDataAssignData _obj wxdata 
+  = withObjectRef "printDialogDataAssignData" _obj $ \cobj__obj -> 
+    withObjectPtr wxdata $ \cobj_wxdata -> 
+    wxPrintDialogData_AssignData cobj__obj  cobj_wxdata  
+foreign import ccall "wxPrintDialogData_AssignData" wxPrintDialogData_AssignData :: Ptr (TPrintDialogData a) -> Ptr (TPrintData b) -> IO ()
+
+-- | usage: (@printDialogDataCreateDefault@).
+printDialogDataCreateDefault ::  IO (PrintDialogData  ())
+printDialogDataCreateDefault 
+  = withManagedObjectResult $
+    wxPrintDialogData_CreateDefault 
+foreign import ccall "wxPrintDialogData_CreateDefault" wxPrintDialogData_CreateDefault :: IO (Ptr (TPrintDialogData ()))
+
+-- | usage: (@printDialogDataCreateFromData printData@).
+printDialogDataCreateFromData :: PrintData  a ->  IO (PrintDialogData  ())
+printDialogDataCreateFromData printData 
+  = withManagedObjectResult $
+    withObjectPtr printData $ \cobj_printData -> 
+    wxPrintDialogData_CreateFromData cobj_printData  
+foreign import ccall "wxPrintDialogData_CreateFromData" wxPrintDialogData_CreateFromData :: Ptr (TPrintData a) -> IO (Ptr (TPrintDialogData ()))
+
+-- | usage: (@printDialogDataDelete obj@).
+printDialogDataDelete :: PrintDialogData  a ->  IO ()
+printDialogDataDelete
+  = objectDelete
+
+
+-- | usage: (@printDialogDataEnableHelp obj flag@).
+printDialogDataEnableHelp :: PrintDialogData  a -> Bool ->  IO ()
+printDialogDataEnableHelp _obj flag 
+  = withObjectRef "printDialogDataEnableHelp" _obj $ \cobj__obj -> 
+    wxPrintDialogData_EnableHelp cobj__obj  (toCBool flag)  
+foreign import ccall "wxPrintDialogData_EnableHelp" wxPrintDialogData_EnableHelp :: Ptr (TPrintDialogData a) -> CBool -> IO ()
+
+-- | usage: (@printDialogDataEnablePageNumbers obj flag@).
+printDialogDataEnablePageNumbers :: PrintDialogData  a -> Bool ->  IO ()
+printDialogDataEnablePageNumbers _obj flag 
+  = withObjectRef "printDialogDataEnablePageNumbers" _obj $ \cobj__obj -> 
+    wxPrintDialogData_EnablePageNumbers cobj__obj  (toCBool flag)  
+foreign import ccall "wxPrintDialogData_EnablePageNumbers" wxPrintDialogData_EnablePageNumbers :: Ptr (TPrintDialogData a) -> CBool -> IO ()
+
+-- | usage: (@printDialogDataEnablePrintToFile obj flag@).
+printDialogDataEnablePrintToFile :: PrintDialogData  a -> Bool ->  IO ()
+printDialogDataEnablePrintToFile _obj flag 
+  = withObjectRef "printDialogDataEnablePrintToFile" _obj $ \cobj__obj -> 
+    wxPrintDialogData_EnablePrintToFile cobj__obj  (toCBool flag)  
+foreign import ccall "wxPrintDialogData_EnablePrintToFile" wxPrintDialogData_EnablePrintToFile :: Ptr (TPrintDialogData a) -> CBool -> IO ()
+
+-- | usage: (@printDialogDataEnableSelection obj flag@).
+printDialogDataEnableSelection :: PrintDialogData  a -> Bool ->  IO ()
+printDialogDataEnableSelection _obj flag 
+  = withObjectRef "printDialogDataEnableSelection" _obj $ \cobj__obj -> 
+    wxPrintDialogData_EnableSelection cobj__obj  (toCBool flag)  
+foreign import ccall "wxPrintDialogData_EnableSelection" wxPrintDialogData_EnableSelection :: Ptr (TPrintDialogData a) -> CBool -> IO ()
+
+-- | usage: (@printDialogDataGetAllPages obj@).
+printDialogDataGetAllPages :: PrintDialogData  a ->  IO Int
+printDialogDataGetAllPages _obj 
+  = withIntResult $
+    withObjectRef "printDialogDataGetAllPages" _obj $ \cobj__obj -> 
+    wxPrintDialogData_GetAllPages cobj__obj  
+foreign import ccall "wxPrintDialogData_GetAllPages" wxPrintDialogData_GetAllPages :: Ptr (TPrintDialogData a) -> IO CInt
+
+-- | usage: (@printDialogDataGetCollate obj@).
+printDialogDataGetCollate :: PrintDialogData  a ->  IO Bool
+printDialogDataGetCollate _obj 
+  = withBoolResult $
+    withObjectRef "printDialogDataGetCollate" _obj $ \cobj__obj -> 
+    wxPrintDialogData_GetCollate cobj__obj  
+foreign import ccall "wxPrintDialogData_GetCollate" wxPrintDialogData_GetCollate :: Ptr (TPrintDialogData a) -> IO CBool
+
+-- | usage: (@printDialogDataGetEnableHelp obj@).
+printDialogDataGetEnableHelp :: PrintDialogData  a ->  IO Bool
+printDialogDataGetEnableHelp _obj 
+  = withBoolResult $
+    withObjectRef "printDialogDataGetEnableHelp" _obj $ \cobj__obj -> 
+    wxPrintDialogData_GetEnableHelp cobj__obj  
+foreign import ccall "wxPrintDialogData_GetEnableHelp" wxPrintDialogData_GetEnableHelp :: Ptr (TPrintDialogData a) -> IO CBool
+
+-- | usage: (@printDialogDataGetEnablePageNumbers obj@).
+printDialogDataGetEnablePageNumbers :: PrintDialogData  a ->  IO Bool
+printDialogDataGetEnablePageNumbers _obj 
+  = withBoolResult $
+    withObjectRef "printDialogDataGetEnablePageNumbers" _obj $ \cobj__obj -> 
+    wxPrintDialogData_GetEnablePageNumbers cobj__obj  
+foreign import ccall "wxPrintDialogData_GetEnablePageNumbers" wxPrintDialogData_GetEnablePageNumbers :: Ptr (TPrintDialogData a) -> IO CBool
+
+-- | usage: (@printDialogDataGetEnablePrintToFile obj@).
+printDialogDataGetEnablePrintToFile :: PrintDialogData  a ->  IO Bool
+printDialogDataGetEnablePrintToFile _obj 
+  = withBoolResult $
+    withObjectRef "printDialogDataGetEnablePrintToFile" _obj $ \cobj__obj -> 
+    wxPrintDialogData_GetEnablePrintToFile cobj__obj  
+foreign import ccall "wxPrintDialogData_GetEnablePrintToFile" wxPrintDialogData_GetEnablePrintToFile :: Ptr (TPrintDialogData a) -> IO CBool
+
+-- | usage: (@printDialogDataGetEnableSelection obj@).
+printDialogDataGetEnableSelection :: PrintDialogData  a ->  IO Bool
+printDialogDataGetEnableSelection _obj 
+  = withBoolResult $
+    withObjectRef "printDialogDataGetEnableSelection" _obj $ \cobj__obj -> 
+    wxPrintDialogData_GetEnableSelection cobj__obj  
+foreign import ccall "wxPrintDialogData_GetEnableSelection" wxPrintDialogData_GetEnableSelection :: Ptr (TPrintDialogData a) -> IO CBool
+
+-- | usage: (@printDialogDataGetFromPage obj@).
+printDialogDataGetFromPage :: PrintDialogData  a ->  IO Int
+printDialogDataGetFromPage _obj 
+  = withIntResult $
+    withObjectRef "printDialogDataGetFromPage" _obj $ \cobj__obj -> 
+    wxPrintDialogData_GetFromPage cobj__obj  
+foreign import ccall "wxPrintDialogData_GetFromPage" wxPrintDialogData_GetFromPage :: Ptr (TPrintDialogData a) -> IO CInt
+
+-- | usage: (@printDialogDataGetMaxPage obj@).
+printDialogDataGetMaxPage :: PrintDialogData  a ->  IO Int
+printDialogDataGetMaxPage _obj 
+  = withIntResult $
+    withObjectRef "printDialogDataGetMaxPage" _obj $ \cobj__obj -> 
+    wxPrintDialogData_GetMaxPage cobj__obj  
+foreign import ccall "wxPrintDialogData_GetMaxPage" wxPrintDialogData_GetMaxPage :: Ptr (TPrintDialogData a) -> IO CInt
+
+-- | usage: (@printDialogDataGetMinPage obj@).
+printDialogDataGetMinPage :: PrintDialogData  a ->  IO Int
+printDialogDataGetMinPage _obj 
+  = withIntResult $
+    withObjectRef "printDialogDataGetMinPage" _obj $ \cobj__obj -> 
+    wxPrintDialogData_GetMinPage cobj__obj  
+foreign import ccall "wxPrintDialogData_GetMinPage" wxPrintDialogData_GetMinPage :: Ptr (TPrintDialogData a) -> IO CInt
+
+-- | usage: (@printDialogDataGetNoCopies obj@).
+printDialogDataGetNoCopies :: PrintDialogData  a ->  IO Int
+printDialogDataGetNoCopies _obj 
+  = withIntResult $
+    withObjectRef "printDialogDataGetNoCopies" _obj $ \cobj__obj -> 
+    wxPrintDialogData_GetNoCopies cobj__obj  
+foreign import ccall "wxPrintDialogData_GetNoCopies" wxPrintDialogData_GetNoCopies :: Ptr (TPrintDialogData a) -> IO CInt
+
+-- | usage: (@printDialogDataGetPrintData obj@).
+printDialogDataGetPrintData :: PrintDialogData  a ->  IO (PrintData  ())
+printDialogDataGetPrintData _obj 
+  = withRefPrintData $ \pref -> 
+    withObjectRef "printDialogDataGetPrintData" _obj $ \cobj__obj -> 
+    wxPrintDialogData_GetPrintData cobj__obj   pref
+foreign import ccall "wxPrintDialogData_GetPrintData" wxPrintDialogData_GetPrintData :: Ptr (TPrintDialogData a) -> Ptr (TPrintData ()) -> IO ()
+
+-- | usage: (@printDialogDataGetPrintToFile obj@).
+printDialogDataGetPrintToFile :: PrintDialogData  a ->  IO Bool
+printDialogDataGetPrintToFile _obj 
+  = withBoolResult $
+    withObjectRef "printDialogDataGetPrintToFile" _obj $ \cobj__obj -> 
+    wxPrintDialogData_GetPrintToFile cobj__obj  
+foreign import ccall "wxPrintDialogData_GetPrintToFile" wxPrintDialogData_GetPrintToFile :: Ptr (TPrintDialogData a) -> IO CBool
+
+-- | usage: (@printDialogDataGetSelection obj@).
+printDialogDataGetSelection :: PrintDialogData  a ->  IO Bool
+printDialogDataGetSelection _obj 
+  = withBoolResult $
+    withObjectRef "printDialogDataGetSelection" _obj $ \cobj__obj -> 
+    wxPrintDialogData_GetSelection cobj__obj  
+foreign import ccall "wxPrintDialogData_GetSelection" wxPrintDialogData_GetSelection :: Ptr (TPrintDialogData a) -> IO CBool
+
+-- | usage: (@printDialogDataGetToPage obj@).
+printDialogDataGetToPage :: PrintDialogData  a ->  IO Int
+printDialogDataGetToPage _obj 
+  = withIntResult $
+    withObjectRef "printDialogDataGetToPage" _obj $ \cobj__obj -> 
+    wxPrintDialogData_GetToPage cobj__obj  
+foreign import ccall "wxPrintDialogData_GetToPage" wxPrintDialogData_GetToPage :: Ptr (TPrintDialogData a) -> IO CInt
+
+-- | usage: (@printDialogDataSetAllPages obj flag@).
+printDialogDataSetAllPages :: PrintDialogData  a -> Bool ->  IO ()
+printDialogDataSetAllPages _obj flag 
+  = withObjectRef "printDialogDataSetAllPages" _obj $ \cobj__obj -> 
+    wxPrintDialogData_SetAllPages cobj__obj  (toCBool flag)  
+foreign import ccall "wxPrintDialogData_SetAllPages" wxPrintDialogData_SetAllPages :: Ptr (TPrintDialogData a) -> CBool -> IO ()
+
+-- | usage: (@printDialogDataSetCollate obj flag@).
+printDialogDataSetCollate :: PrintDialogData  a -> Bool ->  IO ()
+printDialogDataSetCollate _obj flag 
+  = withObjectRef "printDialogDataSetCollate" _obj $ \cobj__obj -> 
+    wxPrintDialogData_SetCollate cobj__obj  (toCBool flag)  
+foreign import ccall "wxPrintDialogData_SetCollate" wxPrintDialogData_SetCollate :: Ptr (TPrintDialogData a) -> CBool -> IO ()
+
+-- | usage: (@printDialogDataSetFromPage obj v@).
+printDialogDataSetFromPage :: PrintDialogData  a -> Int ->  IO ()
+printDialogDataSetFromPage _obj v 
+  = withObjectRef "printDialogDataSetFromPage" _obj $ \cobj__obj -> 
+    wxPrintDialogData_SetFromPage cobj__obj  (toCInt v)  
+foreign import ccall "wxPrintDialogData_SetFromPage" wxPrintDialogData_SetFromPage :: Ptr (TPrintDialogData a) -> CInt -> IO ()
+
+-- | usage: (@printDialogDataSetMaxPage obj v@).
+printDialogDataSetMaxPage :: PrintDialogData  a -> Int ->  IO ()
+printDialogDataSetMaxPage _obj v 
+  = withObjectRef "printDialogDataSetMaxPage" _obj $ \cobj__obj -> 
+    wxPrintDialogData_SetMaxPage cobj__obj  (toCInt v)  
+foreign import ccall "wxPrintDialogData_SetMaxPage" wxPrintDialogData_SetMaxPage :: Ptr (TPrintDialogData a) -> CInt -> IO ()
+
+-- | usage: (@printDialogDataSetMinPage obj v@).
+printDialogDataSetMinPage :: PrintDialogData  a -> Int ->  IO ()
+printDialogDataSetMinPage _obj v 
+  = withObjectRef "printDialogDataSetMinPage" _obj $ \cobj__obj -> 
+    wxPrintDialogData_SetMinPage cobj__obj  (toCInt v)  
+foreign import ccall "wxPrintDialogData_SetMinPage" wxPrintDialogData_SetMinPage :: Ptr (TPrintDialogData a) -> CInt -> IO ()
+
+-- | usage: (@printDialogDataSetNoCopies obj v@).
+printDialogDataSetNoCopies :: PrintDialogData  a -> Int ->  IO ()
+printDialogDataSetNoCopies _obj v 
+  = withObjectRef "printDialogDataSetNoCopies" _obj $ \cobj__obj -> 
+    wxPrintDialogData_SetNoCopies cobj__obj  (toCInt v)  
+foreign import ccall "wxPrintDialogData_SetNoCopies" wxPrintDialogData_SetNoCopies :: Ptr (TPrintDialogData a) -> CInt -> IO ()
+
+-- | usage: (@printDialogDataSetPrintData obj printData@).
+printDialogDataSetPrintData :: PrintDialogData  a -> PrintData  b ->  IO ()
+printDialogDataSetPrintData _obj printData 
+  = withObjectRef "printDialogDataSetPrintData" _obj $ \cobj__obj -> 
+    withObjectPtr printData $ \cobj_printData -> 
+    wxPrintDialogData_SetPrintData cobj__obj  cobj_printData  
+foreign import ccall "wxPrintDialogData_SetPrintData" wxPrintDialogData_SetPrintData :: Ptr (TPrintDialogData a) -> Ptr (TPrintData b) -> IO ()
+
+-- | usage: (@printDialogDataSetPrintToFile obj flag@).
+printDialogDataSetPrintToFile :: PrintDialogData  a -> Bool ->  IO ()
+printDialogDataSetPrintToFile _obj flag 
+  = withObjectRef "printDialogDataSetPrintToFile" _obj $ \cobj__obj -> 
+    wxPrintDialogData_SetPrintToFile cobj__obj  (toCBool flag)  
+foreign import ccall "wxPrintDialogData_SetPrintToFile" wxPrintDialogData_SetPrintToFile :: Ptr (TPrintDialogData a) -> CBool -> IO ()
+
+-- | usage: (@printDialogDataSetSelection obj flag@).
+printDialogDataSetSelection :: PrintDialogData  a -> Bool ->  IO ()
+printDialogDataSetSelection _obj flag 
+  = withObjectRef "printDialogDataSetSelection" _obj $ \cobj__obj -> 
+    wxPrintDialogData_SetSelection cobj__obj  (toCBool flag)  
+foreign import ccall "wxPrintDialogData_SetSelection" wxPrintDialogData_SetSelection :: Ptr (TPrintDialogData a) -> CBool -> IO ()
+
+-- | usage: (@printDialogDataSetToPage obj v@).
+printDialogDataSetToPage :: PrintDialogData  a -> Int ->  IO ()
+printDialogDataSetToPage _obj v 
+  = withObjectRef "printDialogDataSetToPage" _obj $ \cobj__obj -> 
+    wxPrintDialogData_SetToPage cobj__obj  (toCInt v)  
+foreign import ccall "wxPrintDialogData_SetToPage" wxPrintDialogData_SetToPage :: Ptr (TPrintDialogData a) -> CInt -> IO ()
+
+-- | usage: (@printDialogGetPrintDC obj@).
+printDialogGetPrintDC :: PrintDialog  a ->  IO (DC  ())
+printDialogGetPrintDC _obj 
+  = withObjectResult $
+    withObjectRef "printDialogGetPrintDC" _obj $ \cobj__obj -> 
+    wxPrintDialog_GetPrintDC cobj__obj  
+foreign import ccall "wxPrintDialog_GetPrintDC" wxPrintDialog_GetPrintDC :: Ptr (TPrintDialog a) -> IO (Ptr (TDC ()))
+
+-- | usage: (@printDialogGetPrintData obj@).
+printDialogGetPrintData :: PrintDialog  a ->  IO (PrintData  ())
+printDialogGetPrintData _obj 
+  = withRefPrintData $ \pref -> 
+    withObjectRef "printDialogGetPrintData" _obj $ \cobj__obj -> 
+    wxPrintDialog_GetPrintData cobj__obj   pref
+foreign import ccall "wxPrintDialog_GetPrintData" wxPrintDialog_GetPrintData :: Ptr (TPrintDialog a) -> Ptr (TPrintData ()) -> IO ()
+
+-- | usage: (@printDialogGetPrintDialogData obj@).
+printDialogGetPrintDialogData :: PrintDialog  a ->  IO (PrintDialogData  ())
+printDialogGetPrintDialogData _obj 
+  = withManagedObjectResult $
+    withObjectRef "printDialogGetPrintDialogData" _obj $ \cobj__obj -> 
+    wxPrintDialog_GetPrintDialogData cobj__obj  
+foreign import ccall "wxPrintDialog_GetPrintDialogData" wxPrintDialog_GetPrintDialogData :: Ptr (TPrintDialog a) -> IO (Ptr (TPrintDialogData ()))
+
+-- | usage: (@printPreviewCreateFromData printout printoutForPrinting wxdata@).
+printPreviewCreateFromData :: Printout  a -> Printout  b -> PrintData  c ->  IO (PrintPreview  ())
+printPreviewCreateFromData printout printoutForPrinting wxdata 
+  = withObjectResult $
+    withObjectPtr printout $ \cobj_printout -> 
+    withObjectPtr printoutForPrinting $ \cobj_printoutForPrinting -> 
+    withObjectPtr wxdata $ \cobj_wxdata -> 
+    wxPrintPreview_CreateFromData cobj_printout  cobj_printoutForPrinting  cobj_wxdata  
+foreign import ccall "wxPrintPreview_CreateFromData" wxPrintPreview_CreateFromData :: Ptr (TPrintout a) -> Ptr (TPrintout b) -> Ptr (TPrintData c) -> IO (Ptr (TPrintPreview ()))
+
+-- | usage: (@printPreviewCreateFromDialogData printout printoutForPrinting wxdata@).
+printPreviewCreateFromDialogData :: Printout  a -> Printout  b -> PrintDialogData  c ->  IO (PrintPreview  ())
+printPreviewCreateFromDialogData printout printoutForPrinting wxdata 
+  = withObjectResult $
+    withObjectPtr printout $ \cobj_printout -> 
+    withObjectPtr printoutForPrinting $ \cobj_printoutForPrinting -> 
+    withObjectPtr wxdata $ \cobj_wxdata -> 
+    wxPrintPreview_CreateFromDialogData cobj_printout  cobj_printoutForPrinting  cobj_wxdata  
+foreign import ccall "wxPrintPreview_CreateFromDialogData" wxPrintPreview_CreateFromDialogData :: Ptr (TPrintout a) -> Ptr (TPrintout b) -> Ptr (TPrintDialogData c) -> IO (Ptr (TPrintPreview ()))
+
+-- | usage: (@printPreviewDelete obj@).
+printPreviewDelete :: PrintPreview  a ->  IO ()
+printPreviewDelete
+  = objectDelete
+
+
+-- | usage: (@printPreviewDetermineScaling obj@).
+printPreviewDetermineScaling :: PrintPreview  a ->  IO ()
+printPreviewDetermineScaling _obj 
+  = withObjectRef "printPreviewDetermineScaling" _obj $ \cobj__obj -> 
+    wxPrintPreview_DetermineScaling cobj__obj  
+foreign import ccall "wxPrintPreview_DetermineScaling" wxPrintPreview_DetermineScaling :: Ptr (TPrintPreview a) -> IO ()
+
+-- | usage: (@printPreviewDrawBlankPage obj canvas dc@).
+printPreviewDrawBlankPage :: PrintPreview  a -> PreviewCanvas  b -> DC  c ->  IO Bool
+printPreviewDrawBlankPage _obj canvas dc 
+  = withBoolResult $
+    withObjectRef "printPreviewDrawBlankPage" _obj $ \cobj__obj -> 
+    withObjectPtr canvas $ \cobj_canvas -> 
+    withObjectPtr dc $ \cobj_dc -> 
+    wxPrintPreview_DrawBlankPage cobj__obj  cobj_canvas  cobj_dc  
+foreign import ccall "wxPrintPreview_DrawBlankPage" wxPrintPreview_DrawBlankPage :: Ptr (TPrintPreview a) -> Ptr (TPreviewCanvas b) -> Ptr (TDC c) -> IO CBool
+
+-- | usage: (@printPreviewGetCanvas obj@).
+printPreviewGetCanvas :: PrintPreview  a ->  IO (PreviewCanvas  ())
+printPreviewGetCanvas _obj 
+  = withObjectResult $
+    withObjectRef "printPreviewGetCanvas" _obj $ \cobj__obj -> 
+    wxPrintPreview_GetCanvas cobj__obj  
+foreign import ccall "wxPrintPreview_GetCanvas" wxPrintPreview_GetCanvas :: Ptr (TPrintPreview a) -> IO (Ptr (TPreviewCanvas ()))
+
+-- | usage: (@printPreviewGetCurrentPage obj@).
+printPreviewGetCurrentPage :: PrintPreview  a ->  IO Int
+printPreviewGetCurrentPage _obj 
+  = withIntResult $
+    withObjectRef "printPreviewGetCurrentPage" _obj $ \cobj__obj -> 
+    wxPrintPreview_GetCurrentPage cobj__obj  
+foreign import ccall "wxPrintPreview_GetCurrentPage" wxPrintPreview_GetCurrentPage :: Ptr (TPrintPreview a) -> IO CInt
+
+-- | usage: (@printPreviewGetFrame obj@).
+printPreviewGetFrame :: PrintPreview  a ->  IO (Frame  ())
+printPreviewGetFrame _obj 
+  = withObjectResult $
+    withObjectRef "printPreviewGetFrame" _obj $ \cobj__obj -> 
+    wxPrintPreview_GetFrame cobj__obj  
+foreign import ccall "wxPrintPreview_GetFrame" wxPrintPreview_GetFrame :: Ptr (TPrintPreview a) -> IO (Ptr (TFrame ()))
+
+-- | usage: (@printPreviewGetMaxPage obj@).
+printPreviewGetMaxPage :: PrintPreview  a ->  IO Int
+printPreviewGetMaxPage _obj 
+  = withIntResult $
+    withObjectRef "printPreviewGetMaxPage" _obj $ \cobj__obj -> 
+    wxPrintPreview_GetMaxPage cobj__obj  
+foreign import ccall "wxPrintPreview_GetMaxPage" wxPrintPreview_GetMaxPage :: Ptr (TPrintPreview a) -> IO CInt
+
+-- | usage: (@printPreviewGetMinPage obj@).
+printPreviewGetMinPage :: PrintPreview  a ->  IO Int
+printPreviewGetMinPage _obj 
+  = withIntResult $
+    withObjectRef "printPreviewGetMinPage" _obj $ \cobj__obj -> 
+    wxPrintPreview_GetMinPage cobj__obj  
+foreign import ccall "wxPrintPreview_GetMinPage" wxPrintPreview_GetMinPage :: Ptr (TPrintPreview a) -> IO CInt
+
+-- | usage: (@printPreviewGetPrintDialogData obj@).
+printPreviewGetPrintDialogData :: PrintPreview  a ->  IO (PrintDialogData  ())
+printPreviewGetPrintDialogData _obj 
+  = withRefPrintDialogData $ \pref -> 
+    withObjectRef "printPreviewGetPrintDialogData" _obj $ \cobj__obj -> 
+    wxPrintPreview_GetPrintDialogData cobj__obj   pref
+foreign import ccall "wxPrintPreview_GetPrintDialogData" wxPrintPreview_GetPrintDialogData :: Ptr (TPrintPreview a) -> Ptr (TPrintDialogData ()) -> IO ()
+
+-- | usage: (@printPreviewGetPrintout obj@).
+printPreviewGetPrintout :: PrintPreview  a ->  IO (Printout  ())
+printPreviewGetPrintout _obj 
+  = withObjectResult $
+    withObjectRef "printPreviewGetPrintout" _obj $ \cobj__obj -> 
+    wxPrintPreview_GetPrintout cobj__obj  
+foreign import ccall "wxPrintPreview_GetPrintout" wxPrintPreview_GetPrintout :: Ptr (TPrintPreview a) -> IO (Ptr (TPrintout ()))
+
+-- | usage: (@printPreviewGetPrintoutForPrinting obj@).
+printPreviewGetPrintoutForPrinting :: PrintPreview  a ->  IO (Printout  ())
+printPreviewGetPrintoutForPrinting _obj 
+  = withObjectResult $
+    withObjectRef "printPreviewGetPrintoutForPrinting" _obj $ \cobj__obj -> 
+    wxPrintPreview_GetPrintoutForPrinting cobj__obj  
+foreign import ccall "wxPrintPreview_GetPrintoutForPrinting" wxPrintPreview_GetPrintoutForPrinting :: Ptr (TPrintPreview a) -> IO (Ptr (TPrintout ()))
+
+-- | usage: (@printPreviewGetZoom obj@).
+printPreviewGetZoom :: PrintPreview  a ->  IO Int
+printPreviewGetZoom _obj 
+  = withIntResult $
+    withObjectRef "printPreviewGetZoom" _obj $ \cobj__obj -> 
+    wxPrintPreview_GetZoom cobj__obj  
+foreign import ccall "wxPrintPreview_GetZoom" wxPrintPreview_GetZoom :: Ptr (TPrintPreview a) -> IO CInt
+
+-- | usage: (@printPreviewIsOk obj@).
+printPreviewIsOk :: PrintPreview  a ->  IO Bool
+printPreviewIsOk _obj 
+  = withBoolResult $
+    withObjectRef "printPreviewIsOk" _obj $ \cobj__obj -> 
+    wxPrintPreview_IsOk cobj__obj  
+foreign import ccall "wxPrintPreview_IsOk" wxPrintPreview_IsOk :: Ptr (TPrintPreview a) -> IO CBool
+
+-- | usage: (@printPreviewPaintPage obj canvas dc@).
+printPreviewPaintPage :: PrintPreview  a -> PrintPreview  b -> DC  c ->  IO Bool
+printPreviewPaintPage _obj canvas dc 
+  = withBoolResult $
+    withObjectRef "printPreviewPaintPage" _obj $ \cobj__obj -> 
+    withObjectPtr canvas $ \cobj_canvas -> 
+    withObjectPtr dc $ \cobj_dc -> 
+    wxPrintPreview_PaintPage cobj__obj  cobj_canvas  cobj_dc  
+foreign import ccall "wxPrintPreview_PaintPage" wxPrintPreview_PaintPage :: Ptr (TPrintPreview a) -> Ptr (TPrintPreview b) -> Ptr (TDC c) -> IO CBool
+
+-- | usage: (@printPreviewPrint obj interactive@).
+printPreviewPrint :: PrintPreview  a -> Bool ->  IO Bool
+printPreviewPrint _obj interactive 
+  = withBoolResult $
+    withObjectRef "printPreviewPrint" _obj $ \cobj__obj -> 
+    wxPrintPreview_Print cobj__obj  (toCBool interactive)  
+foreign import ccall "wxPrintPreview_Print" wxPrintPreview_Print :: Ptr (TPrintPreview a) -> CBool -> IO CBool
+
+-- | usage: (@printPreviewRenderPage obj pageNum@).
+printPreviewRenderPage :: PrintPreview  a -> Int ->  IO Bool
+printPreviewRenderPage _obj pageNum 
+  = withBoolResult $
+    withObjectRef "printPreviewRenderPage" _obj $ \cobj__obj -> 
+    wxPrintPreview_RenderPage cobj__obj  (toCInt pageNum)  
+foreign import ccall "wxPrintPreview_RenderPage" wxPrintPreview_RenderPage :: Ptr (TPrintPreview a) -> CInt -> IO CBool
+
+-- | usage: (@printPreviewSetCanvas obj canvas@).
+printPreviewSetCanvas :: PrintPreview  a -> PreviewCanvas  b ->  IO ()
+printPreviewSetCanvas _obj canvas 
+  = withObjectRef "printPreviewSetCanvas" _obj $ \cobj__obj -> 
+    withObjectPtr canvas $ \cobj_canvas -> 
+    wxPrintPreview_SetCanvas cobj__obj  cobj_canvas  
+foreign import ccall "wxPrintPreview_SetCanvas" wxPrintPreview_SetCanvas :: Ptr (TPrintPreview a) -> Ptr (TPreviewCanvas b) -> IO ()
+
+-- | usage: (@printPreviewSetCurrentPage obj pageNum@).
+printPreviewSetCurrentPage :: PrintPreview  a -> Int ->  IO Bool
+printPreviewSetCurrentPage _obj pageNum 
+  = withBoolResult $
+    withObjectRef "printPreviewSetCurrentPage" _obj $ \cobj__obj -> 
+    wxPrintPreview_SetCurrentPage cobj__obj  (toCInt pageNum)  
+foreign import ccall "wxPrintPreview_SetCurrentPage" wxPrintPreview_SetCurrentPage :: Ptr (TPrintPreview a) -> CInt -> IO CBool
+
+-- | usage: (@printPreviewSetFrame obj frame@).
+printPreviewSetFrame :: PrintPreview  a -> Frame  b ->  IO ()
+printPreviewSetFrame _obj frame 
+  = withObjectRef "printPreviewSetFrame" _obj $ \cobj__obj -> 
+    withObjectPtr frame $ \cobj_frame -> 
+    wxPrintPreview_SetFrame cobj__obj  cobj_frame  
+foreign import ccall "wxPrintPreview_SetFrame" wxPrintPreview_SetFrame :: Ptr (TPrintPreview a) -> Ptr (TFrame b) -> IO ()
+
+-- | usage: (@printPreviewSetOk obj ok@).
+printPreviewSetOk :: PrintPreview  a -> Bool ->  IO ()
+printPreviewSetOk _obj ok 
+  = withObjectRef "printPreviewSetOk" _obj $ \cobj__obj -> 
+    wxPrintPreview_SetOk cobj__obj  (toCBool ok)  
+foreign import ccall "wxPrintPreview_SetOk" wxPrintPreview_SetOk :: Ptr (TPrintPreview a) -> CBool -> IO ()
+
+-- | usage: (@printPreviewSetPrintout obj printout@).
+printPreviewSetPrintout :: PrintPreview  a -> Printout  b ->  IO ()
+printPreviewSetPrintout _obj printout 
+  = withObjectRef "printPreviewSetPrintout" _obj $ \cobj__obj -> 
+    withObjectPtr printout $ \cobj_printout -> 
+    wxPrintPreview_SetPrintout cobj__obj  cobj_printout  
+foreign import ccall "wxPrintPreview_SetPrintout" wxPrintPreview_SetPrintout :: Ptr (TPrintPreview a) -> Ptr (TPrintout b) -> IO ()
+
+-- | usage: (@printPreviewSetZoom obj percent@).
+printPreviewSetZoom :: PrintPreview  a -> Int ->  IO ()
+printPreviewSetZoom _obj percent 
+  = withObjectRef "printPreviewSetZoom" _obj $ \cobj__obj -> 
+    wxPrintPreview_SetZoom cobj__obj  (toCInt percent)  
+foreign import ccall "wxPrintPreview_SetZoom" wxPrintPreview_SetZoom :: Ptr (TPrintPreview a) -> CInt -> IO ()
+
+-- | usage: (@printerCreate wxdata@).
+printerCreate :: PrintDialogData  a ->  IO (Printer  ())
+printerCreate wxdata 
+  = withObjectResult $
+    withObjectPtr wxdata $ \cobj_wxdata -> 
+    wxPrinter_Create cobj_wxdata  
+foreign import ccall "wxPrinter_Create" wxPrinter_Create :: Ptr (TPrintDialogData a) -> IO (Ptr (TPrinter ()))
+
+-- | usage: (@printerCreateAbortWindow obj parent printout@).
+printerCreateAbortWindow :: Printer  a -> Window  b -> Printout  c ->  IO (Window  ())
+printerCreateAbortWindow _obj parent printout 
+  = withObjectResult $
+    withObjectRef "printerCreateAbortWindow" _obj $ \cobj__obj -> 
+    withObjectPtr parent $ \cobj_parent -> 
+    withObjectPtr printout $ \cobj_printout -> 
+    wxPrinter_CreateAbortWindow cobj__obj  cobj_parent  cobj_printout  
+foreign import ccall "wxPrinter_CreateAbortWindow" wxPrinter_CreateAbortWindow :: Ptr (TPrinter a) -> Ptr (TWindow b) -> Ptr (TPrintout c) -> IO (Ptr (TWindow ()))
+
+-- | usage: (@printerDCCreate wxdata@).
+printerDCCreate :: PrintData  a ->  IO (PrinterDC  ())
+printerDCCreate wxdata 
+  = withObjectResult $
+    withObjectPtr wxdata $ \cobj_wxdata -> 
+    wxPrinterDC_Create cobj_wxdata  
+foreign import ccall "wxPrinterDC_Create" wxPrinterDC_Create :: Ptr (TPrintData a) -> IO (Ptr (TPrinterDC ()))
+
+-- | usage: (@printerDCDelete self@).
+printerDCDelete :: PrinterDC  a ->  IO ()
+printerDCDelete
+  = objectDelete
+
+
+-- | usage: (@printerDCGetPaperRect self@).
+printerDCGetPaperRect :: PrinterDC  a ->  IO (Rect)
+printerDCGetPaperRect self 
+  = withWxRectResult $
+    withObjectRef "printerDCGetPaperRect" self $ \cobj_self -> 
+    wxPrinterDC_GetPaperRect cobj_self  
+foreign import ccall "wxPrinterDC_GetPaperRect" wxPrinterDC_GetPaperRect :: Ptr (TPrinterDC a) -> IO (Ptr (TWxRect ()))
+
+-- | usage: (@printerDelete obj@).
+printerDelete :: Printer  a ->  IO ()
+printerDelete
+  = objectDelete
+
+
+-- | usage: (@printerGetAbort obj@).
+printerGetAbort :: Printer  a ->  IO Bool
+printerGetAbort _obj 
+  = withBoolResult $
+    withObjectRef "printerGetAbort" _obj $ \cobj__obj -> 
+    wxPrinter_GetAbort cobj__obj  
+foreign import ccall "wxPrinter_GetAbort" wxPrinter_GetAbort :: Ptr (TPrinter a) -> IO CBool
+
+-- | usage: (@printerGetLastError obj@).
+printerGetLastError :: Printer  a ->  IO Int
+printerGetLastError _obj 
+  = withIntResult $
+    withObjectRef "printerGetLastError" _obj $ \cobj__obj -> 
+    wxPrinter_GetLastError cobj__obj  
+foreign import ccall "wxPrinter_GetLastError" wxPrinter_GetLastError :: Ptr (TPrinter a) -> IO CInt
+
+-- | usage: (@printerGetPrintDialogData obj@).
+printerGetPrintDialogData :: Printer  a ->  IO (PrintDialogData  ())
+printerGetPrintDialogData _obj 
+  = withRefPrintDialogData $ \pref -> 
+    withObjectRef "printerGetPrintDialogData" _obj $ \cobj__obj -> 
+    wxPrinter_GetPrintDialogData cobj__obj   pref
+foreign import ccall "wxPrinter_GetPrintDialogData" wxPrinter_GetPrintDialogData :: Ptr (TPrinter a) -> Ptr (TPrintDialogData ()) -> IO ()
+
+-- | usage: (@printerPrint obj parent printout prompt@).
+printerPrint :: Printer  a -> Window  b -> Printout  c -> Bool ->  IO Bool
+printerPrint _obj parent printout prompt 
+  = withBoolResult $
+    withObjectRef "printerPrint" _obj $ \cobj__obj -> 
+    withObjectPtr parent $ \cobj_parent -> 
+    withObjectPtr printout $ \cobj_printout -> 
+    wxPrinter_Print cobj__obj  cobj_parent  cobj_printout  (toCBool prompt)  
+foreign import ccall "wxPrinter_Print" wxPrinter_Print :: Ptr (TPrinter a) -> Ptr (TWindow b) -> Ptr (TPrintout c) -> CBool -> IO CBool
+
+-- | usage: (@printerPrintDialog obj parent@).
+printerPrintDialog :: Printer  a -> Window  b ->  IO (DC  ())
+printerPrintDialog _obj parent 
+  = withObjectResult $
+    withObjectRef "printerPrintDialog" _obj $ \cobj__obj -> 
+    withObjectPtr parent $ \cobj_parent -> 
+    wxPrinter_PrintDialog cobj__obj  cobj_parent  
+foreign import ccall "wxPrinter_PrintDialog" wxPrinter_PrintDialog :: Ptr (TPrinter a) -> Ptr (TWindow b) -> IO (Ptr (TDC ()))
+
+-- | usage: (@printerReportError obj parent printout message@).
+printerReportError :: Printer  a -> Window  b -> Printout  c -> String ->  IO ()
+printerReportError _obj parent printout message 
+  = withObjectRef "printerReportError" _obj $ \cobj__obj -> 
+    withObjectPtr parent $ \cobj_parent -> 
+    withObjectPtr printout $ \cobj_printout -> 
+    withStringPtr message $ \cobj_message -> 
+    wxPrinter_ReportError cobj__obj  cobj_parent  cobj_printout  cobj_message  
+foreign import ccall "wxPrinter_ReportError" wxPrinter_ReportError :: Ptr (TPrinter a) -> Ptr (TWindow b) -> Ptr (TPrintout c) -> Ptr (TWxString d) -> IO ()
+
+-- | usage: (@printerSetup obj parent@).
+printerSetup :: Printer  a -> Window  b ->  IO Bool
+printerSetup _obj parent 
+  = withBoolResult $
+    withObjectRef "printerSetup" _obj $ \cobj__obj -> 
+    withObjectPtr parent $ \cobj_parent -> 
+    wxPrinter_Setup cobj__obj  cobj_parent  
+foreign import ccall "wxPrinter_Setup" wxPrinter_Setup :: Ptr (TPrinter a) -> Ptr (TWindow b) -> IO CBool
+
+-- | usage: (@printoutGetDC obj@).
+printoutGetDC :: Printout  a ->  IO (DC  ())
+printoutGetDC _obj 
+  = withObjectResult $
+    withObjectRef "printoutGetDC" _obj $ \cobj__obj -> 
+    wxPrintout_GetDC cobj__obj  
+foreign import ccall "wxPrintout_GetDC" wxPrintout_GetDC :: Ptr (TPrintout a) -> IO (Ptr (TDC ()))
+
+-- | usage: (@printoutGetPPIPrinter obj@).
+printoutGetPPIPrinter :: Printout  a ->  IO Point
+printoutGetPPIPrinter _obj 
+  = withPointResult $ \px py -> 
+    withObjectRef "printoutGetPPIPrinter" _obj $ \cobj__obj -> 
+    wxPrintout_GetPPIPrinter cobj__obj   px py
+foreign import ccall "wxPrintout_GetPPIPrinter" wxPrintout_GetPPIPrinter :: Ptr (TPrintout a) -> Ptr CInt -> Ptr CInt -> IO ()
+
+-- | usage: (@printoutGetPPIScreen obj@).
+printoutGetPPIScreen :: Printout  a ->  IO Point
+printoutGetPPIScreen _obj 
+  = withPointResult $ \px py -> 
+    withObjectRef "printoutGetPPIScreen" _obj $ \cobj__obj -> 
+    wxPrintout_GetPPIScreen cobj__obj   px py
+foreign import ccall "wxPrintout_GetPPIScreen" wxPrintout_GetPPIScreen :: Ptr (TPrintout a) -> Ptr CInt -> Ptr CInt -> IO ()
+
+-- | usage: (@printoutGetPageSizeMM obj@).
+printoutGetPageSizeMM :: Printout  a ->  IO Size
+printoutGetPageSizeMM _obj 
+  = withSizeResult $ \pw ph -> 
+    withObjectRef "printoutGetPageSizeMM" _obj $ \cobj__obj -> 
+    wxPrintout_GetPageSizeMM cobj__obj   pw ph
+foreign import ccall "wxPrintout_GetPageSizeMM" wxPrintout_GetPageSizeMM :: Ptr (TPrintout a) -> Ptr CInt -> Ptr CInt -> IO ()
+
+-- | usage: (@printoutGetPageSizePixels obj@).
+printoutGetPageSizePixels :: Printout  a ->  IO Size
+printoutGetPageSizePixels _obj 
+  = withSizeResult $ \pw ph -> 
+    withObjectRef "printoutGetPageSizePixels" _obj $ \cobj__obj -> 
+    wxPrintout_GetPageSizePixels cobj__obj   pw ph
+foreign import ccall "wxPrintout_GetPageSizePixels" wxPrintout_GetPageSizePixels :: Ptr (TPrintout a) -> Ptr CInt -> Ptr CInt -> IO ()
+
+-- | usage: (@printoutGetTitle obj@).
+printoutGetTitle :: Printout  a ->  IO (String)
+printoutGetTitle _obj 
+  = withManagedStringResult $
+    withObjectRef "printoutGetTitle" _obj $ \cobj__obj -> 
+    wxPrintout_GetTitle cobj__obj  
+foreign import ccall "wxPrintout_GetTitle" wxPrintout_GetTitle :: Ptr (TPrintout a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@printoutIsPreview obj@).
+printoutIsPreview :: Printout  a ->  IO Bool
+printoutIsPreview _obj 
+  = withBoolResult $
+    withObjectRef "printoutIsPreview" _obj $ \cobj__obj -> 
+    wxPrintout_IsPreview cobj__obj  
+foreign import ccall "wxPrintout_IsPreview" wxPrintout_IsPreview :: Ptr (TPrintout a) -> IO CBool
+
+-- | usage: (@printoutSetDC obj dc@).
+printoutSetDC :: Printout  a -> DC  b ->  IO ()
+printoutSetDC _obj dc 
+  = withObjectRef "printoutSetDC" _obj $ \cobj__obj -> 
+    withObjectPtr dc $ \cobj_dc -> 
+    wxPrintout_SetDC cobj__obj  cobj_dc  
+foreign import ccall "wxPrintout_SetDC" wxPrintout_SetDC :: Ptr (TPrintout a) -> Ptr (TDC b) -> IO ()
+
+-- | usage: (@printoutSetPPIPrinter obj xy@).
+printoutSetPPIPrinter :: Printout  a -> Point ->  IO ()
+printoutSetPPIPrinter _obj xy 
+  = withObjectRef "printoutSetPPIPrinter" _obj $ \cobj__obj -> 
+    wxPrintout_SetPPIPrinter cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxPrintout_SetPPIPrinter" wxPrintout_SetPPIPrinter :: Ptr (TPrintout a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@printoutSetPPIScreen obj xy@).
+printoutSetPPIScreen :: Printout  a -> Point ->  IO ()
+printoutSetPPIScreen _obj xy 
+  = withObjectRef "printoutSetPPIScreen" _obj $ \cobj__obj -> 
+    wxPrintout_SetPPIScreen cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxPrintout_SetPPIScreen" wxPrintout_SetPPIScreen :: Ptr (TPrintout a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@printoutSetPageSizeMM obj wh@).
+printoutSetPageSizeMM :: Printout  a -> Size ->  IO ()
+printoutSetPageSizeMM _obj wh 
+  = withObjectRef "printoutSetPageSizeMM" _obj $ \cobj__obj -> 
+    wxPrintout_SetPageSizeMM cobj__obj  (toCIntSizeW wh) (toCIntSizeH wh)  
+foreign import ccall "wxPrintout_SetPageSizeMM" wxPrintout_SetPageSizeMM :: Ptr (TPrintout a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@printoutSetPageSizePixels obj wh@).
+printoutSetPageSizePixels :: Printout  a -> Size ->  IO ()
+printoutSetPageSizePixels _obj wh 
+  = withObjectRef "printoutSetPageSizePixels" _obj $ \cobj__obj -> 
+    wxPrintout_SetPageSizePixels cobj__obj  (toCIntSizeW wh) (toCIntSizeH wh)  
+foreign import ccall "wxPrintout_SetPageSizePixels" wxPrintout_SetPageSizePixels :: Ptr (TPrintout a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@processCloseOutput obj@).
+processCloseOutput :: Process  a ->  IO ()
+processCloseOutput _obj 
+  = withObjectRef "processCloseOutput" _obj $ \cobj__obj -> 
+    wxProcess_CloseOutput cobj__obj  
+foreign import ccall "wxProcess_CloseOutput" wxProcess_CloseOutput :: Ptr (TProcess a) -> IO ()
+
+-- | usage: (@processCreateDefault prt id@).
+processCreateDefault :: Window  a -> Id ->  IO (Process  ())
+processCreateDefault _prt _id 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    wxProcess_CreateDefault cobj__prt  (toCInt _id)  
+foreign import ccall "wxProcess_CreateDefault" wxProcess_CreateDefault :: Ptr (TWindow a) -> CInt -> IO (Ptr (TProcess ()))
+
+-- | usage: (@processCreateRedirect prt rdr@).
+processCreateRedirect :: Window  a -> Bool ->  IO (Process  ())
+processCreateRedirect _prt _rdr 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    wxProcess_CreateRedirect cobj__prt  (toCBool _rdr)  
+foreign import ccall "wxProcess_CreateRedirect" wxProcess_CreateRedirect :: Ptr (TWindow a) -> CBool -> IO (Ptr (TProcess ()))
+
+-- | usage: (@processDelete obj@).
+processDelete :: Process  a ->  IO ()
+processDelete
+  = objectDelete
+
+
+-- | usage: (@processDetach obj@).
+processDetach :: Process  a ->  IO ()
+processDetach _obj 
+  = withObjectRef "processDetach" _obj $ \cobj__obj -> 
+    wxProcess_Detach cobj__obj  
+foreign import ccall "wxProcess_Detach" wxProcess_Detach :: Ptr (TProcess a) -> IO ()
+
+-- | usage: (@processEventGetExitCode obj@).
+processEventGetExitCode :: ProcessEvent  a ->  IO Int
+processEventGetExitCode _obj 
+  = withIntResult $
+    withObjectRef "processEventGetExitCode" _obj $ \cobj__obj -> 
+    wxProcessEvent_GetExitCode cobj__obj  
+foreign import ccall "wxProcessEvent_GetExitCode" wxProcessEvent_GetExitCode :: Ptr (TProcessEvent a) -> IO CInt
+
+-- | usage: (@processEventGetPid obj@).
+processEventGetPid :: ProcessEvent  a ->  IO Int
+processEventGetPid _obj 
+  = withIntResult $
+    withObjectRef "processEventGetPid" _obj $ \cobj__obj -> 
+    wxProcessEvent_GetPid cobj__obj  
+foreign import ccall "wxProcessEvent_GetPid" wxProcessEvent_GetPid :: Ptr (TProcessEvent a) -> IO CInt
+
+-- | usage: (@processGetErrorStream obj@).
+processGetErrorStream :: Process  a ->  IO (InputStream  ())
+processGetErrorStream _obj 
+  = withObjectResult $
+    withObjectRef "processGetErrorStream" _obj $ \cobj__obj -> 
+    wxProcess_GetErrorStream cobj__obj  
+foreign import ccall "wxProcess_GetErrorStream" wxProcess_GetErrorStream :: Ptr (TProcess a) -> IO (Ptr (TInputStream ()))
+
+-- | usage: (@processGetInputStream obj@).
+processGetInputStream :: Process  a ->  IO (InputStream  ())
+processGetInputStream _obj 
+  = withObjectResult $
+    withObjectRef "processGetInputStream" _obj $ \cobj__obj -> 
+    wxProcess_GetInputStream cobj__obj  
+foreign import ccall "wxProcess_GetInputStream" wxProcess_GetInputStream :: Ptr (TProcess a) -> IO (Ptr (TInputStream ()))
+
+-- | usage: (@processGetOutputStream obj@).
+processGetOutputStream :: Process  a ->  IO (OutputStream  ())
+processGetOutputStream _obj 
+  = withObjectResult $
+    withObjectRef "processGetOutputStream" _obj $ \cobj__obj -> 
+    wxProcess_GetOutputStream cobj__obj  
+foreign import ccall "wxProcess_GetOutputStream" wxProcess_GetOutputStream :: Ptr (TProcess a) -> IO (Ptr (TOutputStream ()))
+
+-- | usage: (@processIsErrorAvailable obj@).
+processIsErrorAvailable :: Process  a ->  IO Bool
+processIsErrorAvailable _obj 
+  = withBoolResult $
+    withObjectRef "processIsErrorAvailable" _obj $ \cobj__obj -> 
+    wxProcess_IsErrorAvailable cobj__obj  
+foreign import ccall "wxProcess_IsErrorAvailable" wxProcess_IsErrorAvailable :: Ptr (TProcess a) -> IO CBool
+
+-- | usage: (@processIsInputAvailable obj@).
+processIsInputAvailable :: Process  a ->  IO Bool
+processIsInputAvailable _obj 
+  = withBoolResult $
+    withObjectRef "processIsInputAvailable" _obj $ \cobj__obj -> 
+    wxProcess_IsInputAvailable cobj__obj  
+foreign import ccall "wxProcess_IsInputAvailable" wxProcess_IsInputAvailable :: Ptr (TProcess a) -> IO CBool
+
+-- | usage: (@processIsInputOpened obj@).
+processIsInputOpened :: Process  a ->  IO Bool
+processIsInputOpened _obj 
+  = withBoolResult $
+    withObjectRef "processIsInputOpened" _obj $ \cobj__obj -> 
+    wxProcess_IsInputOpened cobj__obj  
+foreign import ccall "wxProcess_IsInputOpened" wxProcess_IsInputOpened :: Ptr (TProcess a) -> IO CBool
+
+-- | usage: (@processIsRedirected obj@).
+processIsRedirected :: Process  a ->  IO Bool
+processIsRedirected _obj 
+  = withBoolResult $
+    withObjectRef "processIsRedirected" _obj $ \cobj__obj -> 
+    wxProcess_IsRedirected cobj__obj  
+foreign import ccall "wxProcess_IsRedirected" wxProcess_IsRedirected :: Ptr (TProcess a) -> IO CBool
+
+-- | usage: (@processOpen cmd flags@).
+processOpen :: String -> Int ->  IO (Process  ())
+processOpen cmd flags 
+  = withObjectResult $
+    withStringPtr cmd $ \cobj_cmd -> 
+    wxProcess_Open cobj_cmd  (toCInt flags)  
+foreign import ccall "wxProcess_Open" wxProcess_Open :: Ptr (TWxString a) -> CInt -> IO (Ptr (TProcess ()))
+
+-- | usage: (@processRedirect obj@).
+processRedirect :: Process  a ->  IO ()
+processRedirect _obj 
+  = withObjectRef "processRedirect" _obj $ \cobj__obj -> 
+    wxProcess_Redirect cobj__obj  
+foreign import ccall "wxProcess_Redirect" wxProcess_Redirect :: Ptr (TProcess a) -> IO ()
+
+-- | usage: (@progressDialogCreate title message max parent style@).
+progressDialogCreate :: String -> String -> Int -> Window  d -> Int ->  IO (ProgressDialog  ())
+progressDialogCreate title message max parent style 
+  = withObjectResult $
+    withStringPtr title $ \cobj_title -> 
+    withStringPtr message $ \cobj_message -> 
+    withObjectPtr parent $ \cobj_parent -> 
+    wxProgressDialog_Create cobj_title  cobj_message  (toCInt max)  cobj_parent  (toCInt style)  
+foreign import ccall "wxProgressDialog_Create" wxProgressDialog_Create :: Ptr (TWxString a) -> Ptr (TWxString b) -> CInt -> Ptr (TWindow d) -> CInt -> IO (Ptr (TProgressDialog ()))
+
+-- | usage: (@progressDialogResume obj@).
+progressDialogResume :: ProgressDialog  a ->  IO ()
+progressDialogResume obj 
+  = withObjectRef "progressDialogResume" obj $ \cobj_obj -> 
+    wxProgressDialog_Resume cobj_obj  
+foreign import ccall "wxProgressDialog_Resume" wxProgressDialog_Resume :: Ptr (TProgressDialog a) -> IO ()
+
+-- | usage: (@progressDialogUpdate obj value@).
+progressDialogUpdate :: ProgressDialog  a -> Int ->  IO Bool
+progressDialogUpdate obj value 
+  = withBoolResult $
+    withObjectRef "progressDialogUpdate" obj $ \cobj_obj -> 
+    wxProgressDialog_Update cobj_obj  (toCInt value)  
+foreign import ccall "wxProgressDialog_Update" wxProgressDialog_Update :: Ptr (TProgressDialog a) -> CInt -> IO CBool
+
+-- | usage: (@progressDialogUpdateWithMessage obj value message@).
+progressDialogUpdateWithMessage :: ProgressDialog  a -> Int -> String ->  IO Bool
+progressDialogUpdateWithMessage obj value message 
+  = withBoolResult $
+    withObjectRef "progressDialogUpdateWithMessage" obj $ \cobj_obj -> 
+    withStringPtr message $ \cobj_message -> 
+    wxProgressDialog_UpdateWithMessage cobj_obj  (toCInt value)  cobj_message  
+foreign import ccall "wxProgressDialog_UpdateWithMessage" wxProgressDialog_UpdateWithMessage :: Ptr (TProgressDialog a) -> CInt -> Ptr (TWxString c) -> IO CBool
+
+-- | usage: (@propertyCategoryCreate label@).
+propertyCategoryCreate :: String ->  IO (PropertyCategory  ())
+propertyCategoryCreate label 
+  = withObjectResult $
+    withStringPtr label $ \cobj_label -> 
+    wxPropertyCategory_Create cobj_label  
+foreign import ccall "wxPropertyCategory_Create" wxPropertyCategory_Create :: Ptr (TWxString a) -> IO (Ptr (TPropertyCategory ()))
+
+-- | usage: (@propertyGridAppend obj prop@).
+propertyGridAppend :: PropertyGrid  a -> PGProperty  b ->  IO (PGProperty  ())
+propertyGridAppend _obj prop 
+  = withObjectResult $
+    withObjectRef "propertyGridAppend" _obj $ \cobj__obj -> 
+    withObjectPtr prop $ \cobj_prop -> 
+    wxPropertyGrid_Append cobj__obj  cobj_prop  
+foreign import ccall "wxPropertyGrid_Append" wxPropertyGrid_Append :: Ptr (TPropertyGrid a) -> Ptr (TPGProperty b) -> IO (Ptr (TPGProperty ()))
+
+-- | usage: (@propertyGridCreate prt id lfttopwdthgt stl@).
+propertyGridCreate :: Window  a -> Id -> Rect -> Style ->  IO (PropertyGrid  ())
+propertyGridCreate _prt _id _lfttopwdthgt _stl 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    wxPropertyGrid_Create cobj__prt  (toCInt _id)  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
+foreign import ccall "wxPropertyGrid_Create" wxPropertyGrid_Create :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TPropertyGrid ()))
+
+-- | usage: (@propertyGridDisableProperty obj propName@).
+propertyGridDisableProperty :: PropertyGrid  a -> String ->  IO Bool
+propertyGridDisableProperty _obj propName 
+  = withBoolResult $
+    withObjectRef "propertyGridDisableProperty" _obj $ \cobj__obj -> 
+    withStringPtr propName $ \cobj_propName -> 
+    wxPropertyGrid_DisableProperty cobj__obj  cobj_propName  
+foreign import ccall "wxPropertyGrid_DisableProperty" wxPropertyGrid_DisableProperty :: Ptr (TPropertyGrid a) -> Ptr (TWxString b) -> IO CBool
+
+-- | usage: (@propertyGridEventGetProperty obj@).
+propertyGridEventGetProperty :: PropertyGridEvent  a ->  IO (PGProperty  ())
+propertyGridEventGetProperty _obj 
+  = withObjectResult $
+    withObjectRef "propertyGridEventGetProperty" _obj $ \cobj__obj -> 
+    wxPropertyGridEvent_GetProperty cobj__obj  
+foreign import ccall "wxPropertyGridEvent_GetProperty" wxPropertyGridEvent_GetProperty :: Ptr (TPropertyGridEvent a) -> IO (Ptr (TPGProperty ()))
+
+-- | usage: (@propertyGridEventHasProperty obj@).
+propertyGridEventHasProperty :: PropertyGridEvent  a ->  IO Bool
+propertyGridEventHasProperty _obj 
+  = withBoolResult $
+    withObjectRef "propertyGridEventHasProperty" _obj $ \cobj__obj -> 
+    wxPropertyGridEvent_HasProperty cobj__obj  
+foreign import ccall "wxPropertyGridEvent_HasProperty" wxPropertyGridEvent_HasProperty :: Ptr (TPropertyGridEvent a) -> IO CBool
+
+-- | usage: (@pushProvider provider@).
+pushProvider :: ArtProvider  a ->  IO ()
+pushProvider provider 
+  = withObjectPtr provider $ \cobj_provider -> 
+    wx_PushProvider cobj_provider  
+foreign import ccall "PushProvider" wx_PushProvider :: Ptr (TArtProvider a) -> IO ()
+
+-- | usage: (@quantize src dest desiredNoColours eightBitData flags@).
+quantize :: Image  a -> Image  b -> Int -> Ptr  d -> Int ->  IO Bool
+quantize src dest desiredNoColours eightBitData flags 
+  = withBoolResult $
+    withObjectPtr src $ \cobj_src -> 
+    withObjectPtr dest $ \cobj_dest -> 
+    wx_Quantize cobj_src  cobj_dest  (toCInt desiredNoColours)  eightBitData  (toCInt flags)  
+foreign import ccall "Quantize" wx_Quantize :: Ptr (TImage a) -> Ptr (TImage b) -> CInt -> Ptr  d -> CInt -> IO CBool
+
+-- | usage: (@quantizePalette src dest pPalette desiredNoColours eightBitData flags@).
+quantizePalette :: Image  a -> Image  b -> Ptr  c -> Int -> Ptr  e -> Int ->  IO Bool
+quantizePalette src dest pPalette desiredNoColours eightBitData flags 
+  = withBoolResult $
+    withObjectPtr src $ \cobj_src -> 
+    withObjectPtr dest $ \cobj_dest -> 
+    wx_QuantizePalette cobj_src  cobj_dest  pPalette  (toCInt desiredNoColours)  eightBitData  (toCInt flags)  
+foreign import ccall "QuantizePalette" wx_QuantizePalette :: Ptr (TImage a) -> Ptr (TImage b) -> Ptr  c -> CInt -> Ptr  e -> CInt -> IO CBool
+
+-- | usage: (@queryLayoutInfoEventCreate id@).
+queryLayoutInfoEventCreate :: Id ->  IO (QueryLayoutInfoEvent  ())
+queryLayoutInfoEventCreate id 
+  = withObjectResult $
+    wxQueryLayoutInfoEvent_Create (toCInt id)  
+foreign import ccall "wxQueryLayoutInfoEvent_Create" wxQueryLayoutInfoEvent_Create :: CInt -> IO (Ptr (TQueryLayoutInfoEvent ()))
+
+-- | usage: (@queryLayoutInfoEventGetAlignment obj@).
+queryLayoutInfoEventGetAlignment :: QueryLayoutInfoEvent  a ->  IO Int
+queryLayoutInfoEventGetAlignment _obj 
+  = withIntResult $
+    withObjectRef "queryLayoutInfoEventGetAlignment" _obj $ \cobj__obj -> 
+    wxQueryLayoutInfoEvent_GetAlignment cobj__obj  
+foreign import ccall "wxQueryLayoutInfoEvent_GetAlignment" wxQueryLayoutInfoEvent_GetAlignment :: Ptr (TQueryLayoutInfoEvent a) -> IO CInt
+
+-- | usage: (@queryLayoutInfoEventGetFlags obj@).
+queryLayoutInfoEventGetFlags :: QueryLayoutInfoEvent  a ->  IO Int
+queryLayoutInfoEventGetFlags _obj 
+  = withIntResult $
+    withObjectRef "queryLayoutInfoEventGetFlags" _obj $ \cobj__obj -> 
+    wxQueryLayoutInfoEvent_GetFlags cobj__obj  
+foreign import ccall "wxQueryLayoutInfoEvent_GetFlags" wxQueryLayoutInfoEvent_GetFlags :: Ptr (TQueryLayoutInfoEvent a) -> IO CInt
+
+-- | usage: (@queryLayoutInfoEventGetOrientation obj@).
+queryLayoutInfoEventGetOrientation :: QueryLayoutInfoEvent  a ->  IO Int
+queryLayoutInfoEventGetOrientation _obj 
+  = withIntResult $
+    withObjectRef "queryLayoutInfoEventGetOrientation" _obj $ \cobj__obj -> 
+    wxQueryLayoutInfoEvent_GetOrientation cobj__obj  
+foreign import ccall "wxQueryLayoutInfoEvent_GetOrientation" wxQueryLayoutInfoEvent_GetOrientation :: Ptr (TQueryLayoutInfoEvent a) -> IO CInt
+
+-- | usage: (@queryLayoutInfoEventGetRequestedLength obj@).
+queryLayoutInfoEventGetRequestedLength :: QueryLayoutInfoEvent  a ->  IO Int
+queryLayoutInfoEventGetRequestedLength _obj 
+  = withIntResult $
+    withObjectRef "queryLayoutInfoEventGetRequestedLength" _obj $ \cobj__obj -> 
+    wxQueryLayoutInfoEvent_GetRequestedLength cobj__obj  
+foreign import ccall "wxQueryLayoutInfoEvent_GetRequestedLength" wxQueryLayoutInfoEvent_GetRequestedLength :: Ptr (TQueryLayoutInfoEvent a) -> IO CInt
+
+-- | usage: (@queryLayoutInfoEventGetSize obj@).
+queryLayoutInfoEventGetSize :: QueryLayoutInfoEvent  a ->  IO (Size)
+queryLayoutInfoEventGetSize _obj 
+  = withWxSizeResult $
+    withObjectRef "queryLayoutInfoEventGetSize" _obj $ \cobj__obj -> 
+    wxQueryLayoutInfoEvent_GetSize cobj__obj  
+foreign import ccall "wxQueryLayoutInfoEvent_GetSize" wxQueryLayoutInfoEvent_GetSize :: Ptr (TQueryLayoutInfoEvent a) -> IO (Ptr (TWxSize ()))
+
+-- | usage: (@queryLayoutInfoEventSetAlignment obj align@).
+queryLayoutInfoEventSetAlignment :: QueryLayoutInfoEvent  a -> Int ->  IO ()
+queryLayoutInfoEventSetAlignment _obj align 
+  = withObjectRef "queryLayoutInfoEventSetAlignment" _obj $ \cobj__obj -> 
+    wxQueryLayoutInfoEvent_SetAlignment cobj__obj  (toCInt align)  
+foreign import ccall "wxQueryLayoutInfoEvent_SetAlignment" wxQueryLayoutInfoEvent_SetAlignment :: Ptr (TQueryLayoutInfoEvent a) -> CInt -> IO ()
+
+-- | usage: (@queryLayoutInfoEventSetFlags obj flags@).
+queryLayoutInfoEventSetFlags :: QueryLayoutInfoEvent  a -> Int ->  IO ()
+queryLayoutInfoEventSetFlags _obj flags 
+  = withObjectRef "queryLayoutInfoEventSetFlags" _obj $ \cobj__obj -> 
+    wxQueryLayoutInfoEvent_SetFlags cobj__obj  (toCInt flags)  
+foreign import ccall "wxQueryLayoutInfoEvent_SetFlags" wxQueryLayoutInfoEvent_SetFlags :: Ptr (TQueryLayoutInfoEvent a) -> CInt -> IO ()
+
+-- | usage: (@queryLayoutInfoEventSetOrientation obj orient@).
+queryLayoutInfoEventSetOrientation :: QueryLayoutInfoEvent  a -> Int ->  IO ()
+queryLayoutInfoEventSetOrientation _obj orient 
+  = withObjectRef "queryLayoutInfoEventSetOrientation" _obj $ \cobj__obj -> 
+    wxQueryLayoutInfoEvent_SetOrientation cobj__obj  (toCInt orient)  
+foreign import ccall "wxQueryLayoutInfoEvent_SetOrientation" wxQueryLayoutInfoEvent_SetOrientation :: Ptr (TQueryLayoutInfoEvent a) -> CInt -> IO ()
+
+-- | usage: (@queryLayoutInfoEventSetRequestedLength obj length@).
+queryLayoutInfoEventSetRequestedLength :: QueryLayoutInfoEvent  a -> Int ->  IO ()
+queryLayoutInfoEventSetRequestedLength _obj length 
+  = withObjectRef "queryLayoutInfoEventSetRequestedLength" _obj $ \cobj__obj -> 
+    wxQueryLayoutInfoEvent_SetRequestedLength cobj__obj  (toCInt length)  
+foreign import ccall "wxQueryLayoutInfoEvent_SetRequestedLength" wxQueryLayoutInfoEvent_SetRequestedLength :: Ptr (TQueryLayoutInfoEvent a) -> CInt -> IO ()
+
+-- | usage: (@queryLayoutInfoEventSetSize obj wh@).
+queryLayoutInfoEventSetSize :: QueryLayoutInfoEvent  a -> Size ->  IO ()
+queryLayoutInfoEventSetSize _obj wh 
+  = withObjectRef "queryLayoutInfoEventSetSize" _obj $ \cobj__obj -> 
+    wxQueryLayoutInfoEvent_SetSize cobj__obj  (toCIntSizeW wh) (toCIntSizeH wh)  
+foreign import ccall "wxQueryLayoutInfoEvent_SetSize" wxQueryLayoutInfoEvent_SetSize :: Ptr (TQueryLayoutInfoEvent a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@queryNewPaletteEventCopyObject obj obj@).
+queryNewPaletteEventCopyObject :: QueryNewPaletteEvent  a -> WxObject  b ->  IO ()
+queryNewPaletteEventCopyObject _obj obj 
+  = withObjectRef "queryNewPaletteEventCopyObject" _obj $ \cobj__obj -> 
+    withObjectPtr obj $ \cobj_obj -> 
+    wxQueryNewPaletteEvent_CopyObject cobj__obj  cobj_obj  
+foreign import ccall "wxQueryNewPaletteEvent_CopyObject" wxQueryNewPaletteEvent_CopyObject :: Ptr (TQueryNewPaletteEvent a) -> Ptr (TWxObject b) -> IO ()
+
+-- | usage: (@queryNewPaletteEventGetPaletteRealized obj@).
+queryNewPaletteEventGetPaletteRealized :: QueryNewPaletteEvent  a ->  IO Bool
+queryNewPaletteEventGetPaletteRealized _obj 
+  = withBoolResult $
+    withObjectRef "queryNewPaletteEventGetPaletteRealized" _obj $ \cobj__obj -> 
+    wxQueryNewPaletteEvent_GetPaletteRealized cobj__obj  
+foreign import ccall "wxQueryNewPaletteEvent_GetPaletteRealized" wxQueryNewPaletteEvent_GetPaletteRealized :: Ptr (TQueryNewPaletteEvent a) -> IO CBool
+
+-- | usage: (@queryNewPaletteEventSetPaletteRealized obj realized@).
+queryNewPaletteEventSetPaletteRealized :: QueryNewPaletteEvent  a -> Bool ->  IO ()
+queryNewPaletteEventSetPaletteRealized _obj realized 
+  = withObjectRef "queryNewPaletteEventSetPaletteRealized" _obj $ \cobj__obj -> 
+    wxQueryNewPaletteEvent_SetPaletteRealized cobj__obj  (toCBool realized)  
+foreign import ccall "wxQueryNewPaletteEvent_SetPaletteRealized" wxQueryNewPaletteEvent_SetPaletteRealized :: Ptr (TQueryNewPaletteEvent a) -> CBool -> IO ()
+
+-- | usage: (@radioBoxCreate prt id txt lfttopwdthgt nstr dim stl@).
+radioBoxCreate :: Window  a -> Id -> String -> Rect -> [String] -> Int -> Style ->  IO (RadioBox  ())
+radioBoxCreate _prt _id _txt _lfttopwdthgt nstr _dim _stl 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    withStringPtr _txt $ \cobj__txt -> 
+    withArrayWString nstr $ \carrlen_nstr carr_nstr -> 
+    wxRadioBox_Create cobj__prt  (toCInt _id)  cobj__txt  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  carrlen_nstr carr_nstr  (toCInt _dim)  (toCInt _stl)  
+foreign import ccall "wxRadioBox_Create" wxRadioBox_Create :: Ptr (TWindow a) -> CInt -> Ptr (TWxString c) -> CInt -> CInt -> CInt -> CInt -> CInt -> Ptr (Ptr CWchar) -> CInt -> CInt -> IO (Ptr (TRadioBox ()))
+
+-- | usage: (@radioBoxEnableItem obj item enable@).
+radioBoxEnableItem :: RadioBox  a -> Int -> Bool ->  IO ()
+radioBoxEnableItem _obj item enable 
+  = withObjectRef "radioBoxEnableItem" _obj $ \cobj__obj -> 
+    wxRadioBox_EnableItem cobj__obj  (toCInt item)  (toCBool enable)  
+foreign import ccall "wxRadioBox_EnableItem" wxRadioBox_EnableItem :: Ptr (TRadioBox a) -> CInt -> CBool -> IO ()
+
+-- | usage: (@radioBoxFindString obj s@).
+radioBoxFindString :: RadioBox  a -> String ->  IO Int
+radioBoxFindString _obj s 
+  = withIntResult $
+    withObjectRef "radioBoxFindString" _obj $ \cobj__obj -> 
+    withStringPtr s $ \cobj_s -> 
+    wxRadioBox_FindString cobj__obj  cobj_s  
+foreign import ccall "wxRadioBox_FindString" wxRadioBox_FindString :: Ptr (TRadioBox a) -> Ptr (TWxString b) -> IO CInt
+
+-- | usage: (@radioBoxGetItemLabel obj item@).
+radioBoxGetItemLabel :: RadioBox  a -> Int ->  IO (String)
+radioBoxGetItemLabel _obj item 
+  = withManagedStringResult $
+    withObjectRef "radioBoxGetItemLabel" _obj $ \cobj__obj -> 
+    wxRadioBox_GetItemLabel cobj__obj  (toCInt item)  
+foreign import ccall "wxRadioBox_GetItemLabel" wxRadioBox_GetItemLabel :: Ptr (TRadioBox a) -> CInt -> IO (Ptr (TWxString ()))
+
+-- | usage: (@radioBoxGetNumberOfRowsOrCols obj@).
+radioBoxGetNumberOfRowsOrCols :: RadioBox  a ->  IO Int
+radioBoxGetNumberOfRowsOrCols _obj 
+  = withIntResult $
+    withObjectRef "radioBoxGetNumberOfRowsOrCols" _obj $ \cobj__obj -> 
+    wxRadioBox_GetNumberOfRowsOrCols cobj__obj  
+foreign import ccall "wxRadioBox_GetNumberOfRowsOrCols" wxRadioBox_GetNumberOfRowsOrCols :: Ptr (TRadioBox a) -> IO CInt
+
+-- | usage: (@radioBoxGetSelection obj@).
+radioBoxGetSelection :: RadioBox  a ->  IO Int
+radioBoxGetSelection _obj 
+  = withIntResult $
+    withObjectRef "radioBoxGetSelection" _obj $ \cobj__obj -> 
+    wxRadioBox_GetSelection cobj__obj  
+foreign import ccall "wxRadioBox_GetSelection" wxRadioBox_GetSelection :: Ptr (TRadioBox a) -> IO CInt
+
+-- | usage: (@radioBoxGetStringSelection obj@).
+radioBoxGetStringSelection :: RadioBox  a ->  IO (String)
+radioBoxGetStringSelection _obj 
+  = withManagedStringResult $
+    withObjectRef "radioBoxGetStringSelection" _obj $ \cobj__obj -> 
+    wxRadioBox_GetStringSelection cobj__obj  
+foreign import ccall "wxRadioBox_GetStringSelection" wxRadioBox_GetStringSelection :: Ptr (TRadioBox a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@radioBoxNumber obj@).
+radioBoxNumber :: RadioBox  a ->  IO Int
+radioBoxNumber _obj 
+  = withIntResult $
+    withObjectRef "radioBoxNumber" _obj $ \cobj__obj -> 
+    wxRadioBox_Number cobj__obj  
+foreign import ccall "wxRadioBox_Number" wxRadioBox_Number :: Ptr (TRadioBox a) -> IO CInt
+
+-- | usage: (@radioBoxSetItemBitmap obj item bitmap@).
+radioBoxSetItemBitmap :: RadioBox  a -> Int -> Bitmap  c ->  IO ()
+radioBoxSetItemBitmap _obj item bitmap 
+  = withObjectRef "radioBoxSetItemBitmap" _obj $ \cobj__obj -> 
+    withObjectPtr bitmap $ \cobj_bitmap -> 
+    wxRadioBox_SetItemBitmap cobj__obj  (toCInt item)  cobj_bitmap  
+foreign import ccall "wxRadioBox_SetItemBitmap" wxRadioBox_SetItemBitmap :: Ptr (TRadioBox a) -> CInt -> Ptr (TBitmap c) -> IO ()
+
+-- | usage: (@radioBoxSetItemLabel obj item label@).
+radioBoxSetItemLabel :: RadioBox  a -> Int -> String ->  IO ()
+radioBoxSetItemLabel _obj item label 
+  = withObjectRef "radioBoxSetItemLabel" _obj $ \cobj__obj -> 
+    withStringPtr label $ \cobj_label -> 
+    wxRadioBox_SetItemLabel cobj__obj  (toCInt item)  cobj_label  
+foreign import ccall "wxRadioBox_SetItemLabel" wxRadioBox_SetItemLabel :: Ptr (TRadioBox a) -> CInt -> Ptr (TWxString c) -> IO ()
+
+-- | usage: (@radioBoxSetNumberOfRowsOrCols obj n@).
+radioBoxSetNumberOfRowsOrCols :: RadioBox  a -> Int ->  IO ()
+radioBoxSetNumberOfRowsOrCols _obj n 
+  = withObjectRef "radioBoxSetNumberOfRowsOrCols" _obj $ \cobj__obj -> 
+    wxRadioBox_SetNumberOfRowsOrCols cobj__obj  (toCInt n)  
+foreign import ccall "wxRadioBox_SetNumberOfRowsOrCols" wxRadioBox_SetNumberOfRowsOrCols :: Ptr (TRadioBox a) -> CInt -> IO ()
+
+-- | usage: (@radioBoxSetSelection obj n@).
+radioBoxSetSelection :: RadioBox  a -> Int ->  IO ()
+radioBoxSetSelection _obj _n 
+  = withObjectRef "radioBoxSetSelection" _obj $ \cobj__obj -> 
+    wxRadioBox_SetSelection cobj__obj  (toCInt _n)  
+foreign import ccall "wxRadioBox_SetSelection" wxRadioBox_SetSelection :: Ptr (TRadioBox a) -> CInt -> IO ()
+
+-- | usage: (@radioBoxSetStringSelection obj s@).
+radioBoxSetStringSelection :: RadioBox  a -> String ->  IO ()
+radioBoxSetStringSelection _obj s 
+  = withObjectRef "radioBoxSetStringSelection" _obj $ \cobj__obj -> 
+    withStringPtr s $ \cobj_s -> 
+    wxRadioBox_SetStringSelection cobj__obj  cobj_s  
+foreign import ccall "wxRadioBox_SetStringSelection" wxRadioBox_SetStringSelection :: Ptr (TRadioBox a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@radioBoxShowItem obj item show@).
+radioBoxShowItem :: RadioBox  a -> Int -> Bool ->  IO ()
+radioBoxShowItem _obj item show 
+  = withObjectRef "radioBoxShowItem" _obj $ \cobj__obj -> 
+    wxRadioBox_ShowItem cobj__obj  (toCInt item)  (toCBool show)  
+foreign import ccall "wxRadioBox_ShowItem" wxRadioBox_ShowItem :: Ptr (TRadioBox a) -> CInt -> CBool -> IO ()
+
+-- | usage: (@radioButtonCreate prt id txt lfttopwdthgt stl@).
+radioButtonCreate :: Window  a -> Id -> String -> Rect -> Style ->  IO (RadioButton  ())
+radioButtonCreate _prt _id _txt _lfttopwdthgt _stl 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    withStringPtr _txt $ \cobj__txt -> 
+    wxRadioButton_Create cobj__prt  (toCInt _id)  cobj__txt  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
+foreign import ccall "wxRadioButton_Create" wxRadioButton_Create :: Ptr (TWindow a) -> CInt -> Ptr (TWxString c) -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TRadioButton ()))
+
+-- | usage: (@radioButtonGetValue obj@).
+radioButtonGetValue :: RadioButton  a ->  IO Bool
+radioButtonGetValue _obj 
+  = withBoolResult $
+    withObjectRef "radioButtonGetValue" _obj $ \cobj__obj -> 
+    wxRadioButton_GetValue cobj__obj  
+foreign import ccall "wxRadioButton_GetValue" wxRadioButton_GetValue :: Ptr (TRadioButton a) -> IO CBool
+
+-- | usage: (@radioButtonSetValue obj value@).
+radioButtonSetValue :: RadioButton  a -> Bool ->  IO ()
+radioButtonSetValue _obj value 
+  = withObjectRef "radioButtonSetValue" _obj $ \cobj__obj -> 
+    wxRadioButton_SetValue cobj__obj  (toCBool value)  
+foreign import ccall "wxRadioButton_SetValue" wxRadioButton_SetValue :: Ptr (TRadioButton a) -> CBool -> IO ()
+
+-- | usage: (@regionAssign obj region@).
+regionAssign :: Region  a -> Region  b ->  IO ()
+regionAssign _obj region 
+  = withObjectRef "regionAssign" _obj $ \cobj__obj -> 
+    withObjectPtr region $ \cobj_region -> 
+    wxRegion_Assign cobj__obj  cobj_region  
+foreign import ccall "wxRegion_Assign" wxRegion_Assign :: Ptr (TRegion a) -> Ptr (TRegion b) -> IO ()
+
+-- | usage: (@regionClear obj@).
+regionClear :: Region  a ->  IO ()
+regionClear _obj 
+  = withObjectRef "regionClear" _obj $ \cobj__obj -> 
+    wxRegion_Clear cobj__obj  
+foreign import ccall "wxRegion_Clear" wxRegion_Clear :: Ptr (TRegion a) -> IO ()
+
+-- | usage: (@regionContainsPoint obj xy@).
+regionContainsPoint :: Region  a -> Point ->  IO Bool
+regionContainsPoint _obj xy 
+  = withBoolResult $
+    withObjectRef "regionContainsPoint" _obj $ \cobj__obj -> 
+    wxRegion_ContainsPoint cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxRegion_ContainsPoint" wxRegion_ContainsPoint :: Ptr (TRegion a) -> CInt -> CInt -> IO CBool
+
+-- | usage: (@regionContainsRect obj xywidthheight@).
+regionContainsRect :: Region  a -> Rect ->  IO Bool
+regionContainsRect _obj xywidthheight 
+  = withBoolResult $
+    withObjectRef "regionContainsRect" _obj $ \cobj__obj -> 
+    wxRegion_ContainsRect cobj__obj  (toCIntRectX xywidthheight) (toCIntRectY xywidthheight)(toCIntRectW xywidthheight) (toCIntRectH xywidthheight)  
+foreign import ccall "wxRegion_ContainsRect" wxRegion_ContainsRect :: Ptr (TRegion a) -> CInt -> CInt -> CInt -> CInt -> IO CBool
+
+-- | usage: (@regionCreateDefault@).
+regionCreateDefault ::  IO (Region  ())
+regionCreateDefault 
+  = withObjectResult $
+    wxRegion_CreateDefault 
+foreign import ccall "wxRegion_CreateDefault" wxRegion_CreateDefault :: IO (Ptr (TRegion ()))
+
+-- | usage: (@regionCreateFromRect xywh@).
+regionCreateFromRect :: Rect ->  IO (Region  ())
+regionCreateFromRect xywh 
+  = withObjectResult $
+    wxRegion_CreateFromRect (toCIntRectX xywh) (toCIntRectY xywh)(toCIntRectW xywh) (toCIntRectH xywh)  
+foreign import ccall "wxRegion_CreateFromRect" wxRegion_CreateFromRect :: CInt -> CInt -> CInt -> CInt -> IO (Ptr (TRegion ()))
+
+-- | usage: (@regionDelete obj@).
+regionDelete :: Region  a ->  IO ()
+regionDelete
+  = objectDelete
+
+
+-- | usage: (@regionGetBox obj@).
+regionGetBox :: Region  a ->  IO Rect
+regionGetBox _obj 
+  = withRectResult $ \px py pw ph -> 
+    withObjectRef "regionGetBox" _obj $ \cobj__obj -> 
+    wxRegion_GetBox cobj__obj  px py pw ph
+foreign import ccall "wxRegion_GetBox" wxRegion_GetBox :: Ptr (TRegion a) -> Ptr CInt -> Ptr CInt -> Ptr CInt -> Ptr CInt -> IO ()
+
+-- | usage: (@regionIntersectRect obj xywidthheight@).
+regionIntersectRect :: Region  a -> Rect ->  IO Bool
+regionIntersectRect _obj xywidthheight 
+  = withBoolResult $
+    withObjectRef "regionIntersectRect" _obj $ \cobj__obj -> 
+    wxRegion_IntersectRect cobj__obj  (toCIntRectX xywidthheight) (toCIntRectY xywidthheight)(toCIntRectW xywidthheight) (toCIntRectH xywidthheight)  
+foreign import ccall "wxRegion_IntersectRect" wxRegion_IntersectRect :: Ptr (TRegion a) -> CInt -> CInt -> CInt -> CInt -> IO CBool
+
+-- | usage: (@regionIntersectRegion obj region@).
+regionIntersectRegion :: Region  a -> Region  b ->  IO Bool
+regionIntersectRegion _obj region 
+  = withBoolResult $
+    withObjectRef "regionIntersectRegion" _obj $ \cobj__obj -> 
+    withObjectPtr region $ \cobj_region -> 
+    wxRegion_IntersectRegion cobj__obj  cobj_region  
+foreign import ccall "wxRegion_IntersectRegion" wxRegion_IntersectRegion :: Ptr (TRegion a) -> Ptr (TRegion b) -> IO CBool
+
+-- | usage: (@regionIsEmpty obj@).
+regionIsEmpty :: Region  a ->  IO Bool
+regionIsEmpty _obj 
+  = withBoolResult $
+    withObjectRef "regionIsEmpty" _obj $ \cobj__obj -> 
+    wxRegion_IsEmpty cobj__obj  
+foreign import ccall "wxRegion_IsEmpty" wxRegion_IsEmpty :: Ptr (TRegion a) -> IO CBool
+
+-- | usage: (@regionIteratorCreate@).
+regionIteratorCreate ::  IO (RegionIterator  ())
+regionIteratorCreate 
+  = withObjectResult $
+    wxRegionIterator_Create 
+foreign import ccall "wxRegionIterator_Create" wxRegionIterator_Create :: IO (Ptr (TRegionIterator ()))
+
+-- | usage: (@regionIteratorCreateFromRegion region@).
+regionIteratorCreateFromRegion :: Region  a ->  IO (RegionIterator  ())
+regionIteratorCreateFromRegion region 
+  = withObjectResult $
+    withObjectPtr region $ \cobj_region -> 
+    wxRegionIterator_CreateFromRegion cobj_region  
+foreign import ccall "wxRegionIterator_CreateFromRegion" wxRegionIterator_CreateFromRegion :: Ptr (TRegion a) -> IO (Ptr (TRegionIterator ()))
+
+-- | usage: (@regionIteratorDelete obj@).
+regionIteratorDelete :: RegionIterator  a ->  IO ()
+regionIteratorDelete
+  = objectDelete
+
+
+-- | usage: (@regionIteratorGetHeight obj@).
+regionIteratorGetHeight :: RegionIterator  a ->  IO Int
+regionIteratorGetHeight _obj 
+  = withIntResult $
+    withObjectRef "regionIteratorGetHeight" _obj $ \cobj__obj -> 
+    wxRegionIterator_GetHeight cobj__obj  
+foreign import ccall "wxRegionIterator_GetHeight" wxRegionIterator_GetHeight :: Ptr (TRegionIterator a) -> IO CInt
+
+-- | usage: (@regionIteratorGetWidth obj@).
+regionIteratorGetWidth :: RegionIterator  a ->  IO Int
+regionIteratorGetWidth _obj 
+  = withIntResult $
+    withObjectRef "regionIteratorGetWidth" _obj $ \cobj__obj -> 
+    wxRegionIterator_GetWidth cobj__obj  
+foreign import ccall "wxRegionIterator_GetWidth" wxRegionIterator_GetWidth :: Ptr (TRegionIterator a) -> IO CInt
+
+-- | usage: (@regionIteratorGetX obj@).
+regionIteratorGetX :: RegionIterator  a ->  IO Int
+regionIteratorGetX _obj 
+  = withIntResult $
+    withObjectRef "regionIteratorGetX" _obj $ \cobj__obj -> 
+    wxRegionIterator_GetX cobj__obj  
+foreign import ccall "wxRegionIterator_GetX" wxRegionIterator_GetX :: Ptr (TRegionIterator a) -> IO CInt
+
+-- | usage: (@regionIteratorGetY obj@).
+regionIteratorGetY :: RegionIterator  a ->  IO Int
+regionIteratorGetY _obj 
+  = withIntResult $
+    withObjectRef "regionIteratorGetY" _obj $ \cobj__obj -> 
+    wxRegionIterator_GetY cobj__obj  
+foreign import ccall "wxRegionIterator_GetY" wxRegionIterator_GetY :: Ptr (TRegionIterator a) -> IO CInt
+
+-- | usage: (@regionIteratorHaveRects obj@).
+regionIteratorHaveRects :: RegionIterator  a ->  IO Bool
+regionIteratorHaveRects _obj 
+  = withBoolResult $
+    withObjectRef "regionIteratorHaveRects" _obj $ \cobj__obj -> 
+    wxRegionIterator_HaveRects cobj__obj  
+foreign import ccall "wxRegionIterator_HaveRects" wxRegionIterator_HaveRects :: Ptr (TRegionIterator a) -> IO CBool
+
+-- | usage: (@regionIteratorNext obj@).
+regionIteratorNext :: RegionIterator  a ->  IO ()
+regionIteratorNext _obj 
+  = withObjectRef "regionIteratorNext" _obj $ \cobj__obj -> 
+    wxRegionIterator_Next cobj__obj  
+foreign import ccall "wxRegionIterator_Next" wxRegionIterator_Next :: Ptr (TRegionIterator a) -> IO ()
+
+-- | usage: (@regionIteratorReset obj@).
+regionIteratorReset :: RegionIterator  a ->  IO ()
+regionIteratorReset _obj 
+  = withObjectRef "regionIteratorReset" _obj $ \cobj__obj -> 
+    wxRegionIterator_Reset cobj__obj  
+foreign import ccall "wxRegionIterator_Reset" wxRegionIterator_Reset :: Ptr (TRegionIterator a) -> IO ()
+
+-- | usage: (@regionIteratorResetToRegion obj region@).
+regionIteratorResetToRegion :: RegionIterator  a -> Region  b ->  IO ()
+regionIteratorResetToRegion _obj region 
+  = withObjectRef "regionIteratorResetToRegion" _obj $ \cobj__obj -> 
+    withObjectPtr region $ \cobj_region -> 
+    wxRegionIterator_ResetToRegion cobj__obj  cobj_region  
+foreign import ccall "wxRegionIterator_ResetToRegion" wxRegionIterator_ResetToRegion :: Ptr (TRegionIterator a) -> Ptr (TRegion b) -> IO ()
+
+-- | usage: (@regionSubtractRect obj xywidthheight@).
+regionSubtractRect :: Region  a -> Rect ->  IO Bool
+regionSubtractRect _obj xywidthheight 
+  = withBoolResult $
+    withObjectRef "regionSubtractRect" _obj $ \cobj__obj -> 
+    wxRegion_SubtractRect cobj__obj  (toCIntRectX xywidthheight) (toCIntRectY xywidthheight)(toCIntRectW xywidthheight) (toCIntRectH xywidthheight)  
+foreign import ccall "wxRegion_SubtractRect" wxRegion_SubtractRect :: Ptr (TRegion a) -> CInt -> CInt -> CInt -> CInt -> IO CBool
+
+-- | usage: (@regionSubtractRegion obj region@).
+regionSubtractRegion :: Region  a -> Region  b ->  IO Bool
+regionSubtractRegion _obj region 
+  = withBoolResult $
+    withObjectRef "regionSubtractRegion" _obj $ \cobj__obj -> 
+    withObjectPtr region $ \cobj_region -> 
+    wxRegion_SubtractRegion cobj__obj  cobj_region  
+foreign import ccall "wxRegion_SubtractRegion" wxRegion_SubtractRegion :: Ptr (TRegion a) -> Ptr (TRegion b) -> IO CBool
+
+-- | usage: (@regionUnionRect obj xywidthheight@).
+regionUnionRect :: Region  a -> Rect ->  IO Bool
+regionUnionRect _obj xywidthheight 
+  = withBoolResult $
+    withObjectRef "regionUnionRect" _obj $ \cobj__obj -> 
+    wxRegion_UnionRect cobj__obj  (toCIntRectX xywidthheight) (toCIntRectY xywidthheight)(toCIntRectW xywidthheight) (toCIntRectH xywidthheight)  
+foreign import ccall "wxRegion_UnionRect" wxRegion_UnionRect :: Ptr (TRegion a) -> CInt -> CInt -> CInt -> CInt -> IO CBool
+
+-- | usage: (@regionUnionRegion obj region@).
+regionUnionRegion :: Region  a -> Region  b ->  IO Bool
+regionUnionRegion _obj region 
+  = withBoolResult $
+    withObjectRef "regionUnionRegion" _obj $ \cobj__obj -> 
+    withObjectPtr region $ \cobj_region -> 
+    wxRegion_UnionRegion cobj__obj  cobj_region  
+foreign import ccall "wxRegion_UnionRegion" wxRegion_UnionRegion :: Ptr (TRegion a) -> Ptr (TRegion b) -> IO CBool
+
+-- | usage: (@regionXorRect obj xywidthheight@).
+regionXorRect :: Region  a -> Rect ->  IO Bool
+regionXorRect _obj xywidthheight 
+  = withBoolResult $
+    withObjectRef "regionXorRect" _obj $ \cobj__obj -> 
+    wxRegion_XorRect cobj__obj  (toCIntRectX xywidthheight) (toCIntRectY xywidthheight)(toCIntRectW xywidthheight) (toCIntRectH xywidthheight)  
+foreign import ccall "wxRegion_XorRect" wxRegion_XorRect :: Ptr (TRegion a) -> CInt -> CInt -> CInt -> CInt -> IO CBool
+
+-- | usage: (@regionXorRegion obj region@).
+regionXorRegion :: Region  a -> Region  b ->  IO Bool
+regionXorRegion _obj region 
+  = withBoolResult $
+    withObjectRef "regionXorRegion" _obj $ \cobj__obj -> 
+    withObjectPtr region $ \cobj_region -> 
+    wxRegion_XorRegion cobj__obj  cobj_region  
+foreign import ccall "wxRegion_XorRegion" wxRegion_XorRegion :: Ptr (TRegion a) -> Ptr (TRegion b) -> IO CBool
+
+-- | usage: (@removeProvider provider@).
+removeProvider :: ArtProvider  a ->  IO Bool
+removeProvider provider 
+  = withBoolResult $
+    withObjectPtr provider $ \cobj_provider -> 
+    wx_RemoveProvider cobj_provider  
+foreign import ccall "RemoveProvider" wx_RemoveProvider :: Ptr (TArtProvider a) -> IO CBool
+
+-- | usage: (@sashEventCreate id edge@).
+sashEventCreate :: Id -> Int ->  IO (SashEvent  ())
+sashEventCreate id edge 
+  = withObjectResult $
+    wxSashEvent_Create (toCInt id)  (toCInt edge)  
+foreign import ccall "wxSashEvent_Create" wxSashEvent_Create :: CInt -> CInt -> IO (Ptr (TSashEvent ()))
+
+-- | usage: (@sashEventGetDragRect obj@).
+sashEventGetDragRect :: SashEvent  a ->  IO (Rect)
+sashEventGetDragRect _obj 
+  = withWxRectResult $
+    withObjectRef "sashEventGetDragRect" _obj $ \cobj__obj -> 
+    wxSashEvent_GetDragRect cobj__obj  
+foreign import ccall "wxSashEvent_GetDragRect" wxSashEvent_GetDragRect :: Ptr (TSashEvent a) -> IO (Ptr (TWxRect ()))
+
+-- | usage: (@sashEventGetDragStatus obj@).
+sashEventGetDragStatus :: SashEvent  a ->  IO Int
+sashEventGetDragStatus _obj 
+  = withIntResult $
+    withObjectRef "sashEventGetDragStatus" _obj $ \cobj__obj -> 
+    wxSashEvent_GetDragStatus cobj__obj  
+foreign import ccall "wxSashEvent_GetDragStatus" wxSashEvent_GetDragStatus :: Ptr (TSashEvent a) -> IO CInt
+
+-- | usage: (@sashEventGetEdge obj@).
+sashEventGetEdge :: SashEvent  a ->  IO Int
+sashEventGetEdge _obj 
+  = withIntResult $
+    withObjectRef "sashEventGetEdge" _obj $ \cobj__obj -> 
+    wxSashEvent_GetEdge cobj__obj  
+foreign import ccall "wxSashEvent_GetEdge" wxSashEvent_GetEdge :: Ptr (TSashEvent a) -> IO CInt
+
+-- | usage: (@sashEventSetDragRect obj xywh@).
+sashEventSetDragRect :: SashEvent  a -> Rect ->  IO ()
+sashEventSetDragRect _obj xywh 
+  = withObjectRef "sashEventSetDragRect" _obj $ \cobj__obj -> 
+    wxSashEvent_SetDragRect cobj__obj  (toCIntRectX xywh) (toCIntRectY xywh)(toCIntRectW xywh) (toCIntRectH xywh)  
+foreign import ccall "wxSashEvent_SetDragRect" wxSashEvent_SetDragRect :: Ptr (TSashEvent a) -> CInt -> CInt -> CInt -> CInt -> IO ()
+
+-- | usage: (@sashEventSetDragStatus obj status@).
+sashEventSetDragStatus :: SashEvent  a -> Int ->  IO ()
+sashEventSetDragStatus _obj status 
+  = withObjectRef "sashEventSetDragStatus" _obj $ \cobj__obj -> 
+    wxSashEvent_SetDragStatus cobj__obj  (toCInt status)  
+foreign import ccall "wxSashEvent_SetDragStatus" wxSashEvent_SetDragStatus :: Ptr (TSashEvent a) -> CInt -> IO ()
+
+-- | usage: (@sashEventSetEdge obj edge@).
+sashEventSetEdge :: SashEvent  a -> Int ->  IO ()
+sashEventSetEdge _obj edge 
+  = withObjectRef "sashEventSetEdge" _obj $ \cobj__obj -> 
+    wxSashEvent_SetEdge cobj__obj  (toCInt edge)  
+foreign import ccall "wxSashEvent_SetEdge" wxSashEvent_SetEdge :: Ptr (TSashEvent a) -> CInt -> IO ()
+
+-- | usage: (@sashLayoutWindowCreate par id xywh stl@).
+sashLayoutWindowCreate :: Window  a -> Id -> Rect -> Style ->  IO (SashLayoutWindow  ())
+sashLayoutWindowCreate _par _id _xywh _stl 
+  = withObjectResult $
+    withObjectPtr _par $ \cobj__par -> 
+    wxSashLayoutWindow_Create cobj__par  (toCInt _id)  (toCIntRectX _xywh) (toCIntRectY _xywh)(toCIntRectW _xywh) (toCIntRectH _xywh)  (toCInt _stl)  
+foreign import ccall "wxSashLayoutWindow_Create" wxSashLayoutWindow_Create :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TSashLayoutWindow ()))
+
+-- | usage: (@sashLayoutWindowGetAlignment obj@).
+sashLayoutWindowGetAlignment :: SashLayoutWindow  a ->  IO Int
+sashLayoutWindowGetAlignment _obj 
+  = withIntResult $
+    withObjectRef "sashLayoutWindowGetAlignment" _obj $ \cobj__obj -> 
+    wxSashLayoutWindow_GetAlignment cobj__obj  
+foreign import ccall "wxSashLayoutWindow_GetAlignment" wxSashLayoutWindow_GetAlignment :: Ptr (TSashLayoutWindow a) -> IO CInt
+
+-- | usage: (@sashLayoutWindowGetOrientation obj@).
+sashLayoutWindowGetOrientation :: SashLayoutWindow  a ->  IO Int
+sashLayoutWindowGetOrientation _obj 
+  = withIntResult $
+    withObjectRef "sashLayoutWindowGetOrientation" _obj $ \cobj__obj -> 
+    wxSashLayoutWindow_GetOrientation cobj__obj  
+foreign import ccall "wxSashLayoutWindow_GetOrientation" wxSashLayoutWindow_GetOrientation :: Ptr (TSashLayoutWindow a) -> IO CInt
+
+-- | usage: (@sashLayoutWindowSetAlignment obj align@).
+sashLayoutWindowSetAlignment :: SashLayoutWindow  a -> Int ->  IO ()
+sashLayoutWindowSetAlignment _obj align 
+  = withObjectRef "sashLayoutWindowSetAlignment" _obj $ \cobj__obj -> 
+    wxSashLayoutWindow_SetAlignment cobj__obj  (toCInt align)  
+foreign import ccall "wxSashLayoutWindow_SetAlignment" wxSashLayoutWindow_SetAlignment :: Ptr (TSashLayoutWindow a) -> CInt -> IO ()
+
+-- | usage: (@sashLayoutWindowSetDefaultSize obj wh@).
+sashLayoutWindowSetDefaultSize :: SashLayoutWindow  a -> Size ->  IO ()
+sashLayoutWindowSetDefaultSize _obj wh 
+  = withObjectRef "sashLayoutWindowSetDefaultSize" _obj $ \cobj__obj -> 
+    wxSashLayoutWindow_SetDefaultSize cobj__obj  (toCIntSizeW wh) (toCIntSizeH wh)  
+foreign import ccall "wxSashLayoutWindow_SetDefaultSize" wxSashLayoutWindow_SetDefaultSize :: Ptr (TSashLayoutWindow a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@sashLayoutWindowSetOrientation obj orient@).
+sashLayoutWindowSetOrientation :: SashLayoutWindow  a -> Int ->  IO ()
+sashLayoutWindowSetOrientation _obj orient 
+  = withObjectRef "sashLayoutWindowSetOrientation" _obj $ \cobj__obj -> 
+    wxSashLayoutWindow_SetOrientation cobj__obj  (toCInt orient)  
+foreign import ccall "wxSashLayoutWindow_SetOrientation" wxSashLayoutWindow_SetOrientation :: Ptr (TSashLayoutWindow a) -> CInt -> IO ()
+
+-- | usage: (@sashWindowCreate par id xywh stl@).
+sashWindowCreate :: Window  a -> Id -> Rect -> Style ->  IO (SashWindow  ())
+sashWindowCreate _par _id _xywh _stl 
+  = withObjectResult $
+    withObjectPtr _par $ \cobj__par -> 
+    wxSashWindow_Create cobj__par  (toCInt _id)  (toCIntRectX _xywh) (toCIntRectY _xywh)(toCIntRectW _xywh) (toCIntRectH _xywh)  (toCInt _stl)  
+foreign import ccall "wxSashWindow_Create" wxSashWindow_Create :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TSashWindow ()))
+
+-- | usage: (@sashWindowGetDefaultBorderSize obj@).
+sashWindowGetDefaultBorderSize :: SashWindow  a ->  IO Int
+sashWindowGetDefaultBorderSize _obj 
+  = withIntResult $
+    withObjectRef "sashWindowGetDefaultBorderSize" _obj $ \cobj__obj -> 
+    wxSashWindow_GetDefaultBorderSize cobj__obj  
+foreign import ccall "wxSashWindow_GetDefaultBorderSize" wxSashWindow_GetDefaultBorderSize :: Ptr (TSashWindow a) -> IO CInt
+
+-- | usage: (@sashWindowGetEdgeMargin obj edge@).
+sashWindowGetEdgeMargin :: SashWindow  a -> Int ->  IO Int
+sashWindowGetEdgeMargin _obj edge 
+  = withIntResult $
+    withObjectRef "sashWindowGetEdgeMargin" _obj $ \cobj__obj -> 
+    wxSashWindow_GetEdgeMargin cobj__obj  (toCInt edge)  
+foreign import ccall "wxSashWindow_GetEdgeMargin" wxSashWindow_GetEdgeMargin :: Ptr (TSashWindow a) -> CInt -> IO CInt
+
+-- | usage: (@sashWindowGetExtraBorderSize obj@).
+sashWindowGetExtraBorderSize :: SashWindow  a ->  IO Int
+sashWindowGetExtraBorderSize _obj 
+  = withIntResult $
+    withObjectRef "sashWindowGetExtraBorderSize" _obj $ \cobj__obj -> 
+    wxSashWindow_GetExtraBorderSize cobj__obj  
+foreign import ccall "wxSashWindow_GetExtraBorderSize" wxSashWindow_GetExtraBorderSize :: Ptr (TSashWindow a) -> IO CInt
+
+-- | usage: (@sashWindowGetMaximumSizeX obj@).
+sashWindowGetMaximumSizeX :: SashWindow  a ->  IO Int
+sashWindowGetMaximumSizeX _obj 
+  = withIntResult $
+    withObjectRef "sashWindowGetMaximumSizeX" _obj $ \cobj__obj -> 
+    wxSashWindow_GetMaximumSizeX cobj__obj  
+foreign import ccall "wxSashWindow_GetMaximumSizeX" wxSashWindow_GetMaximumSizeX :: Ptr (TSashWindow a) -> IO CInt
+
+-- | usage: (@sashWindowGetMaximumSizeY obj@).
+sashWindowGetMaximumSizeY :: SashWindow  a ->  IO Int
+sashWindowGetMaximumSizeY _obj 
+  = withIntResult $
+    withObjectRef "sashWindowGetMaximumSizeY" _obj $ \cobj__obj -> 
+    wxSashWindow_GetMaximumSizeY cobj__obj  
+foreign import ccall "wxSashWindow_GetMaximumSizeY" wxSashWindow_GetMaximumSizeY :: Ptr (TSashWindow a) -> IO CInt
+
+-- | usage: (@sashWindowGetMinimumSizeX obj@).
+sashWindowGetMinimumSizeX :: SashWindow  a ->  IO Int
+sashWindowGetMinimumSizeX _obj 
+  = withIntResult $
+    withObjectRef "sashWindowGetMinimumSizeX" _obj $ \cobj__obj -> 
+    wxSashWindow_GetMinimumSizeX cobj__obj  
+foreign import ccall "wxSashWindow_GetMinimumSizeX" wxSashWindow_GetMinimumSizeX :: Ptr (TSashWindow a) -> IO CInt
+
+-- | usage: (@sashWindowGetMinimumSizeY obj@).
+sashWindowGetMinimumSizeY :: SashWindow  a ->  IO Int
+sashWindowGetMinimumSizeY _obj 
+  = withIntResult $
+    withObjectRef "sashWindowGetMinimumSizeY" _obj $ \cobj__obj -> 
+    wxSashWindow_GetMinimumSizeY cobj__obj  
+foreign import ccall "wxSashWindow_GetMinimumSizeY" wxSashWindow_GetMinimumSizeY :: Ptr (TSashWindow a) -> IO CInt
+
+-- | usage: (@sashWindowGetSashVisible obj edge@).
+sashWindowGetSashVisible :: SashWindow  a -> Int ->  IO Bool
+sashWindowGetSashVisible _obj edge 
+  = withBoolResult $
+    withObjectRef "sashWindowGetSashVisible" _obj $ \cobj__obj -> 
+    wxSashWindow_GetSashVisible cobj__obj  (toCInt edge)  
+foreign import ccall "wxSashWindow_GetSashVisible" wxSashWindow_GetSashVisible :: Ptr (TSashWindow a) -> CInt -> IO CBool
+
+-- | usage: (@sashWindowHasBorder obj edge@).
+sashWindowHasBorder :: SashWindow  a -> Int ->  IO Bool
+sashWindowHasBorder _obj edge 
+  = withBoolResult $
+    withObjectRef "sashWindowHasBorder" _obj $ \cobj__obj -> 
+    wxSashWindow_HasBorder cobj__obj  (toCInt edge)  
+foreign import ccall "wxSashWindow_HasBorder" wxSashWindow_HasBorder :: Ptr (TSashWindow a) -> CInt -> IO CBool
+
+-- | usage: (@sashWindowSetDefaultBorderSize obj width@).
+sashWindowSetDefaultBorderSize :: SashWindow  a -> Int ->  IO ()
+sashWindowSetDefaultBorderSize _obj width 
+  = withObjectRef "sashWindowSetDefaultBorderSize" _obj $ \cobj__obj -> 
+    wxSashWindow_SetDefaultBorderSize cobj__obj  (toCInt width)  
+foreign import ccall "wxSashWindow_SetDefaultBorderSize" wxSashWindow_SetDefaultBorderSize :: Ptr (TSashWindow a) -> CInt -> IO ()
+
+-- | usage: (@sashWindowSetExtraBorderSize obj width@).
+sashWindowSetExtraBorderSize :: SashWindow  a -> Int ->  IO ()
+sashWindowSetExtraBorderSize _obj width 
+  = withObjectRef "sashWindowSetExtraBorderSize" _obj $ \cobj__obj -> 
+    wxSashWindow_SetExtraBorderSize cobj__obj  (toCInt width)  
+foreign import ccall "wxSashWindow_SetExtraBorderSize" wxSashWindow_SetExtraBorderSize :: Ptr (TSashWindow a) -> CInt -> IO ()
+
+-- | usage: (@sashWindowSetMaximumSizeX obj max@).
+sashWindowSetMaximumSizeX :: SashWindow  a -> Int ->  IO ()
+sashWindowSetMaximumSizeX _obj max 
+  = withObjectRef "sashWindowSetMaximumSizeX" _obj $ \cobj__obj -> 
+    wxSashWindow_SetMaximumSizeX cobj__obj  (toCInt max)  
+foreign import ccall "wxSashWindow_SetMaximumSizeX" wxSashWindow_SetMaximumSizeX :: Ptr (TSashWindow a) -> CInt -> IO ()
+
+-- | usage: (@sashWindowSetMaximumSizeY obj max@).
+sashWindowSetMaximumSizeY :: SashWindow  a -> Int ->  IO ()
+sashWindowSetMaximumSizeY _obj max 
+  = withObjectRef "sashWindowSetMaximumSizeY" _obj $ \cobj__obj -> 
+    wxSashWindow_SetMaximumSizeY cobj__obj  (toCInt max)  
+foreign import ccall "wxSashWindow_SetMaximumSizeY" wxSashWindow_SetMaximumSizeY :: Ptr (TSashWindow a) -> CInt -> IO ()
+
+-- | usage: (@sashWindowSetMinimumSizeX obj min@).
+sashWindowSetMinimumSizeX :: SashWindow  a -> Int ->  IO ()
+sashWindowSetMinimumSizeX _obj min 
+  = withObjectRef "sashWindowSetMinimumSizeX" _obj $ \cobj__obj -> 
+    wxSashWindow_SetMinimumSizeX cobj__obj  (toCInt min)  
+foreign import ccall "wxSashWindow_SetMinimumSizeX" wxSashWindow_SetMinimumSizeX :: Ptr (TSashWindow a) -> CInt -> IO ()
+
+-- | usage: (@sashWindowSetMinimumSizeY obj min@).
+sashWindowSetMinimumSizeY :: SashWindow  a -> Int ->  IO ()
+sashWindowSetMinimumSizeY _obj min 
+  = withObjectRef "sashWindowSetMinimumSizeY" _obj $ \cobj__obj -> 
+    wxSashWindow_SetMinimumSizeY cobj__obj  (toCInt min)  
+foreign import ccall "wxSashWindow_SetMinimumSizeY" wxSashWindow_SetMinimumSizeY :: Ptr (TSashWindow a) -> CInt -> IO ()
+
+-- | usage: (@sashWindowSetSashBorder obj edge border@).
+sashWindowSetSashBorder :: SashWindow  a -> Int -> Bool ->  IO ()
+sashWindowSetSashBorder _obj edge border 
+  = withObjectRef "sashWindowSetSashBorder" _obj $ \cobj__obj -> 
+    wxSashWindow_SetSashBorder cobj__obj  (toCInt edge)  (toCBool border)  
+foreign import ccall "wxSashWindow_SetSashBorder" wxSashWindow_SetSashBorder :: Ptr (TSashWindow a) -> CInt -> CBool -> IO ()
+
+-- | usage: (@sashWindowSetSashVisible obj edge sash@).
+sashWindowSetSashVisible :: SashWindow  a -> Int -> Bool ->  IO ()
+sashWindowSetSashVisible _obj edge sash 
+  = withObjectRef "sashWindowSetSashVisible" _obj $ \cobj__obj -> 
+    wxSashWindow_SetSashVisible cobj__obj  (toCInt edge)  (toCBool sash)  
+foreign import ccall "wxSashWindow_SetSashVisible" wxSashWindow_SetSashVisible :: Ptr (TSashWindow a) -> CInt -> CBool -> IO ()
+
+-- | usage: (@screenDCCreate@).
+screenDCCreate ::  IO (ScreenDC  ())
+screenDCCreate 
+  = withObjectResult $
+    wxScreenDC_Create 
+foreign import ccall "wxScreenDC_Create" wxScreenDC_Create :: IO (Ptr (TScreenDC ()))
+
+-- | usage: (@screenDCDelete obj@).
+screenDCDelete :: ScreenDC  a ->  IO ()
+screenDCDelete
+  = objectDelete
+
+
+-- | usage: (@screenDCEndDrawingOnTop obj@).
+screenDCEndDrawingOnTop :: ScreenDC  a ->  IO Bool
+screenDCEndDrawingOnTop _obj 
+  = withBoolResult $
+    withObjectRef "screenDCEndDrawingOnTop" _obj $ \cobj__obj -> 
+    wxScreenDC_EndDrawingOnTop cobj__obj  
+foreign import ccall "wxScreenDC_EndDrawingOnTop" wxScreenDC_EndDrawingOnTop :: Ptr (TScreenDC a) -> IO CBool
+
+-- | usage: (@screenDCStartDrawingOnTop obj xywh@).
+screenDCStartDrawingOnTop :: ScreenDC  a -> Rect ->  IO Bool
+screenDCStartDrawingOnTop _obj xywh 
+  = withBoolResult $
+    withObjectRef "screenDCStartDrawingOnTop" _obj $ \cobj__obj -> 
+    wxScreenDC_StartDrawingOnTop cobj__obj  (toCIntRectX xywh) (toCIntRectY xywh)(toCIntRectW xywh) (toCIntRectH xywh)  
+foreign import ccall "wxScreenDC_StartDrawingOnTop" wxScreenDC_StartDrawingOnTop :: Ptr (TScreenDC a) -> CInt -> CInt -> CInt -> CInt -> IO CBool
+
+-- | usage: (@screenDCStartDrawingOnTopOfWin obj win@).
+screenDCStartDrawingOnTopOfWin :: ScreenDC  a -> Window  b ->  IO Bool
+screenDCStartDrawingOnTopOfWin _obj win 
+  = withBoolResult $
+    withObjectRef "screenDCStartDrawingOnTopOfWin" _obj $ \cobj__obj -> 
+    withObjectPtr win $ \cobj_win -> 
+    wxScreenDC_StartDrawingOnTopOfWin cobj__obj  cobj_win  
+foreign import ccall "wxScreenDC_StartDrawingOnTopOfWin" wxScreenDC_StartDrawingOnTopOfWin :: Ptr (TScreenDC a) -> Ptr (TWindow b) -> IO CBool
+
+-- | usage: (@scrollBarCreate prt id lfttopwdthgt stl@).
+scrollBarCreate :: Window  a -> Id -> Rect -> Style ->  IO (ScrollBar  ())
+scrollBarCreate _prt _id _lfttopwdthgt _stl 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    wxScrollBar_Create cobj__prt  (toCInt _id)  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
+foreign import ccall "wxScrollBar_Create" wxScrollBar_Create :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TScrollBar ()))
+
+-- | usage: (@scrollBarGetPageSize obj@).
+scrollBarGetPageSize :: ScrollBar  a ->  IO Int
+scrollBarGetPageSize _obj 
+  = withIntResult $
+    withObjectRef "scrollBarGetPageSize" _obj $ \cobj__obj -> 
+    wxScrollBar_GetPageSize cobj__obj  
+foreign import ccall "wxScrollBar_GetPageSize" wxScrollBar_GetPageSize :: Ptr (TScrollBar a) -> IO CInt
+
+-- | usage: (@scrollBarGetRange obj@).
+scrollBarGetRange :: ScrollBar  a ->  IO Int
+scrollBarGetRange _obj 
+  = withIntResult $
+    withObjectRef "scrollBarGetRange" _obj $ \cobj__obj -> 
+    wxScrollBar_GetRange cobj__obj  
+foreign import ccall "wxScrollBar_GetRange" wxScrollBar_GetRange :: Ptr (TScrollBar a) -> IO CInt
+
+-- | usage: (@scrollBarGetThumbPosition obj@).
+scrollBarGetThumbPosition :: ScrollBar  a ->  IO Int
+scrollBarGetThumbPosition _obj 
+  = withIntResult $
+    withObjectRef "scrollBarGetThumbPosition" _obj $ \cobj__obj -> 
+    wxScrollBar_GetThumbPosition cobj__obj  
+foreign import ccall "wxScrollBar_GetThumbPosition" wxScrollBar_GetThumbPosition :: Ptr (TScrollBar a) -> IO CInt
+
+-- | usage: (@scrollBarGetThumbSize obj@).
+scrollBarGetThumbSize :: ScrollBar  a ->  IO Int
+scrollBarGetThumbSize _obj 
+  = withIntResult $
+    withObjectRef "scrollBarGetThumbSize" _obj $ \cobj__obj -> 
+    wxScrollBar_GetThumbSize cobj__obj  
+foreign import ccall "wxScrollBar_GetThumbSize" wxScrollBar_GetThumbSize :: Ptr (TScrollBar a) -> IO CInt
+
+-- | usage: (@scrollBarSetScrollbar obj position thumbSize range pageSize refresh@).
+scrollBarSetScrollbar :: ScrollBar  a -> Int -> Int -> Int -> Int -> Bool ->  IO ()
+scrollBarSetScrollbar _obj position thumbSize range pageSize refresh 
+  = withObjectRef "scrollBarSetScrollbar" _obj $ \cobj__obj -> 
+    wxScrollBar_SetScrollbar cobj__obj  (toCInt position)  (toCInt thumbSize)  (toCInt range)  (toCInt pageSize)  (toCBool refresh)  
+foreign import ccall "wxScrollBar_SetScrollbar" wxScrollBar_SetScrollbar :: Ptr (TScrollBar a) -> CInt -> CInt -> CInt -> CInt -> CBool -> IO ()
+
+-- | usage: (@scrollBarSetThumbPosition obj viewStart@).
+scrollBarSetThumbPosition :: ScrollBar  a -> Int ->  IO ()
+scrollBarSetThumbPosition _obj viewStart 
+  = withObjectRef "scrollBarSetThumbPosition" _obj $ \cobj__obj -> 
+    wxScrollBar_SetThumbPosition cobj__obj  (toCInt viewStart)  
+foreign import ccall "wxScrollBar_SetThumbPosition" wxScrollBar_SetThumbPosition :: Ptr (TScrollBar a) -> CInt -> IO ()
+
+-- | usage: (@scrollEventGetOrientation obj@).
+scrollEventGetOrientation :: ScrollEvent  a ->  IO Int
+scrollEventGetOrientation _obj 
+  = withIntResult $
+    withObjectRef "scrollEventGetOrientation" _obj $ \cobj__obj -> 
+    wxScrollEvent_GetOrientation cobj__obj  
+foreign import ccall "wxScrollEvent_GetOrientation" wxScrollEvent_GetOrientation :: Ptr (TScrollEvent a) -> IO CInt
+
+-- | usage: (@scrollEventGetPosition obj@).
+scrollEventGetPosition :: ScrollEvent  a ->  IO Int
+scrollEventGetPosition _obj 
+  = withIntResult $
+    withObjectRef "scrollEventGetPosition" _obj $ \cobj__obj -> 
+    wxScrollEvent_GetPosition cobj__obj  
+foreign import ccall "wxScrollEvent_GetPosition" wxScrollEvent_GetPosition :: Ptr (TScrollEvent a) -> IO CInt
+
+-- | usage: (@scrollWinEventGetOrientation obj@).
+scrollWinEventGetOrientation :: ScrollWinEvent  a ->  IO Int
+scrollWinEventGetOrientation _obj 
+  = withIntResult $
+    withObjectRef "scrollWinEventGetOrientation" _obj $ \cobj__obj -> 
+    wxScrollWinEvent_GetOrientation cobj__obj  
+foreign import ccall "wxScrollWinEvent_GetOrientation" wxScrollWinEvent_GetOrientation :: Ptr (TScrollWinEvent a) -> IO CInt
+
+-- | usage: (@scrollWinEventGetPosition obj@).
+scrollWinEventGetPosition :: ScrollWinEvent  a ->  IO Int
+scrollWinEventGetPosition _obj 
+  = withIntResult $
+    withObjectRef "scrollWinEventGetPosition" _obj $ \cobj__obj -> 
+    wxScrollWinEvent_GetPosition cobj__obj  
+foreign import ccall "wxScrollWinEvent_GetPosition" wxScrollWinEvent_GetPosition :: Ptr (TScrollWinEvent a) -> IO CInt
+
+-- | usage: (@scrollWinEventSetOrientation obj orient@).
+scrollWinEventSetOrientation :: ScrollWinEvent  a -> Int ->  IO ()
+scrollWinEventSetOrientation _obj orient 
+  = withObjectRef "scrollWinEventSetOrientation" _obj $ \cobj__obj -> 
+    wxScrollWinEvent_SetOrientation cobj__obj  (toCInt orient)  
+foreign import ccall "wxScrollWinEvent_SetOrientation" wxScrollWinEvent_SetOrientation :: Ptr (TScrollWinEvent a) -> CInt -> IO ()
+
+-- | usage: (@scrollWinEventSetPosition obj pos@).
+scrollWinEventSetPosition :: ScrollWinEvent  a -> Int ->  IO ()
+scrollWinEventSetPosition _obj pos 
+  = withObjectRef "scrollWinEventSetPosition" _obj $ \cobj__obj -> 
+    wxScrollWinEvent_SetPosition cobj__obj  (toCInt pos)  
+foreign import ccall "wxScrollWinEvent_SetPosition" wxScrollWinEvent_SetPosition :: Ptr (TScrollWinEvent a) -> CInt -> IO ()
+
+-- | usage: (@scrolledWindowAdjustScrollbars obj@).
+scrolledWindowAdjustScrollbars :: ScrolledWindow  a ->  IO ()
+scrolledWindowAdjustScrollbars _obj 
+  = withObjectRef "scrolledWindowAdjustScrollbars" _obj $ \cobj__obj -> 
+    wxScrolledWindow_AdjustScrollbars cobj__obj  
+foreign import ccall "wxScrolledWindow_AdjustScrollbars" wxScrolledWindow_AdjustScrollbars :: Ptr (TScrolledWindow a) -> IO ()
+
+-- | usage: (@scrolledWindowCalcScrolledPosition obj xy@).
+scrolledWindowCalcScrolledPosition :: ScrolledWindow  a -> Point ->  IO Point
+scrolledWindowCalcScrolledPosition _obj xy 
+  = withPointResult $ \px py -> 
+    withObjectRef "scrolledWindowCalcScrolledPosition" _obj $ \cobj__obj -> 
+    wxScrolledWindow_CalcScrolledPosition cobj__obj  (toCIntPointX xy) (toCIntPointY xy)   px py
+foreign import ccall "wxScrolledWindow_CalcScrolledPosition" wxScrolledWindow_CalcScrolledPosition :: Ptr (TScrolledWindow a) -> CInt -> CInt -> Ptr CInt -> Ptr CInt -> IO ()
+
+-- | usage: (@scrolledWindowCalcUnscrolledPosition obj xy@).
+scrolledWindowCalcUnscrolledPosition :: ScrolledWindow  a -> Point ->  IO Point
+scrolledWindowCalcUnscrolledPosition _obj xy 
+  = withPointResult $ \px py -> 
+    withObjectRef "scrolledWindowCalcUnscrolledPosition" _obj $ \cobj__obj -> 
+    wxScrolledWindow_CalcUnscrolledPosition cobj__obj  (toCIntPointX xy) (toCIntPointY xy)   px py
+foreign import ccall "wxScrolledWindow_CalcUnscrolledPosition" wxScrolledWindow_CalcUnscrolledPosition :: Ptr (TScrolledWindow a) -> CInt -> CInt -> Ptr CInt -> Ptr CInt -> IO ()
+
+-- | usage: (@scrolledWindowCreate prt id lfttopwdthgt stl@).
+scrolledWindowCreate :: Window  a -> Id -> Rect -> Style ->  IO (ScrolledWindow  ())
+scrolledWindowCreate _prt _id _lfttopwdthgt _stl 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    wxScrolledWindow_Create cobj__prt  (toCInt _id)  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
+foreign import ccall "wxScrolledWindow_Create" wxScrolledWindow_Create :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TScrolledWindow ()))
+
+-- | usage: (@scrolledWindowEnableScrolling obj xscrolling yscrolling@).
+scrolledWindowEnableScrolling :: ScrolledWindow  a -> Bool -> Bool ->  IO ()
+scrolledWindowEnableScrolling _obj xscrolling yscrolling 
+  = withObjectRef "scrolledWindowEnableScrolling" _obj $ \cobj__obj -> 
+    wxScrolledWindow_EnableScrolling cobj__obj  (toCBool xscrolling)  (toCBool yscrolling)  
+foreign import ccall "wxScrolledWindow_EnableScrolling" wxScrolledWindow_EnableScrolling :: Ptr (TScrolledWindow a) -> CBool -> CBool -> IO ()
+
+-- | usage: (@scrolledWindowGetScaleX obj@).
+scrolledWindowGetScaleX :: ScrolledWindow  a ->  IO Double
+scrolledWindowGetScaleX _obj 
+  = withObjectRef "scrolledWindowGetScaleX" _obj $ \cobj__obj -> 
+    wxScrolledWindow_GetScaleX cobj__obj  
+foreign import ccall "wxScrolledWindow_GetScaleX" wxScrolledWindow_GetScaleX :: Ptr (TScrolledWindow a) -> IO Double
+
+-- | usage: (@scrolledWindowGetScaleY obj@).
+scrolledWindowGetScaleY :: ScrolledWindow  a ->  IO Double
+scrolledWindowGetScaleY _obj 
+  = withObjectRef "scrolledWindowGetScaleY" _obj $ \cobj__obj -> 
+    wxScrolledWindow_GetScaleY cobj__obj  
+foreign import ccall "wxScrolledWindow_GetScaleY" wxScrolledWindow_GetScaleY :: Ptr (TScrolledWindow a) -> IO Double
+
+-- | usage: (@scrolledWindowGetScrollPageSize obj orient@).
+scrolledWindowGetScrollPageSize :: ScrolledWindow  a -> Int ->  IO Int
+scrolledWindowGetScrollPageSize _obj orient 
+  = withIntResult $
+    withObjectRef "scrolledWindowGetScrollPageSize" _obj $ \cobj__obj -> 
+    wxScrolledWindow_GetScrollPageSize cobj__obj  (toCInt orient)  
+foreign import ccall "wxScrolledWindow_GetScrollPageSize" wxScrolledWindow_GetScrollPageSize :: Ptr (TScrolledWindow a) -> CInt -> IO CInt
+
+-- | usage: (@scrolledWindowGetScrollPixelsPerUnit obj@).
+scrolledWindowGetScrollPixelsPerUnit :: ScrolledWindow  a ->  IO Point
+scrolledWindowGetScrollPixelsPerUnit _obj 
+  = withPointResult $ \px py -> 
+    withObjectRef "scrolledWindowGetScrollPixelsPerUnit" _obj $ \cobj__obj -> 
+    wxScrolledWindow_GetScrollPixelsPerUnit cobj__obj   px py
+foreign import ccall "wxScrolledWindow_GetScrollPixelsPerUnit" wxScrolledWindow_GetScrollPixelsPerUnit :: Ptr (TScrolledWindow a) -> Ptr CInt -> Ptr CInt -> IO ()
+
+-- | usage: (@scrolledWindowGetTargetWindow obj@).
+scrolledWindowGetTargetWindow :: ScrolledWindow  a ->  IO (Window  ())
+scrolledWindowGetTargetWindow _obj 
+  = withObjectResult $
+    withObjectRef "scrolledWindowGetTargetWindow" _obj $ \cobj__obj -> 
+    wxScrolledWindow_GetTargetWindow cobj__obj  
+foreign import ccall "wxScrolledWindow_GetTargetWindow" wxScrolledWindow_GetTargetWindow :: Ptr (TScrolledWindow a) -> IO (Ptr (TWindow ()))
+
+-- | usage: (@scrolledWindowGetViewStart obj@).
+scrolledWindowGetViewStart :: ScrolledWindow  a ->  IO Point
+scrolledWindowGetViewStart _obj 
+  = withPointResult $ \px py -> 
+    withObjectRef "scrolledWindowGetViewStart" _obj $ \cobj__obj -> 
+    wxScrolledWindow_GetViewStart cobj__obj   px py
+foreign import ccall "wxScrolledWindow_GetViewStart" wxScrolledWindow_GetViewStart :: Ptr (TScrolledWindow a) -> Ptr CInt -> Ptr CInt -> IO ()
+
+-- | usage: (@scrolledWindowGetVirtualSize obj@).
+scrolledWindowGetVirtualSize :: ScrolledWindow  a ->  IO Size
+scrolledWindowGetVirtualSize _obj 
+  = withSizeResult $ \pw ph -> 
+    withObjectRef "scrolledWindowGetVirtualSize" _obj $ \cobj__obj -> 
+    wxScrolledWindow_GetVirtualSize cobj__obj   pw ph
+foreign import ccall "wxScrolledWindow_GetVirtualSize" wxScrolledWindow_GetVirtualSize :: Ptr (TScrolledWindow a) -> Ptr CInt -> Ptr CInt -> IO ()
+
+-- | usage: (@scrolledWindowOnDraw obj dc@).
+scrolledWindowOnDraw :: ScrolledWindow  a -> DC  b ->  IO ()
+scrolledWindowOnDraw _obj dc 
+  = withObjectRef "scrolledWindowOnDraw" _obj $ \cobj__obj -> 
+    withObjectPtr dc $ \cobj_dc -> 
+    wxScrolledWindow_OnDraw cobj__obj  cobj_dc  
+foreign import ccall "wxScrolledWindow_OnDraw" wxScrolledWindow_OnDraw :: Ptr (TScrolledWindow a) -> Ptr (TDC b) -> IO ()
+
+-- | usage: (@scrolledWindowPrepareDC obj dc@).
+scrolledWindowPrepareDC :: ScrolledWindow  a -> DC  b ->  IO ()
+scrolledWindowPrepareDC _obj dc 
+  = withObjectRef "scrolledWindowPrepareDC" _obj $ \cobj__obj -> 
+    withObjectPtr dc $ \cobj_dc -> 
+    wxScrolledWindow_PrepareDC cobj__obj  cobj_dc  
+foreign import ccall "wxScrolledWindow_PrepareDC" wxScrolledWindow_PrepareDC :: Ptr (TScrolledWindow a) -> Ptr (TDC b) -> IO ()
+
+-- | usage: (@scrolledWindowScroll obj xposypos@).
+scrolledWindowScroll :: ScrolledWindow  a -> Point ->  IO ()
+scrolledWindowScroll _obj xposypos 
+  = withObjectRef "scrolledWindowScroll" _obj $ \cobj__obj -> 
+    wxScrolledWindow_Scroll cobj__obj  (toCIntPointX xposypos) (toCIntPointY xposypos)  
+foreign import ccall "wxScrolledWindow_Scroll" wxScrolledWindow_Scroll :: Ptr (TScrolledWindow a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@scrolledWindowSetScale obj xs ys@).
+scrolledWindowSetScale :: ScrolledWindow  a -> Double -> Double ->  IO ()
+scrolledWindowSetScale _obj xs ys 
+  = withObjectRef "scrolledWindowSetScale" _obj $ \cobj__obj -> 
+    wxScrolledWindow_SetScale cobj__obj  xs  ys  
+foreign import ccall "wxScrolledWindow_SetScale" wxScrolledWindow_SetScale :: Ptr (TScrolledWindow a) -> Double -> Double -> IO ()
+
+-- | usage: (@scrolledWindowSetScrollPageSize obj orient pageSize@).
+scrolledWindowSetScrollPageSize :: ScrolledWindow  a -> Int -> Int ->  IO ()
+scrolledWindowSetScrollPageSize _obj orient pageSize 
+  = withObjectRef "scrolledWindowSetScrollPageSize" _obj $ \cobj__obj -> 
+    wxScrolledWindow_SetScrollPageSize cobj__obj  (toCInt orient)  (toCInt pageSize)  
+foreign import ccall "wxScrolledWindow_SetScrollPageSize" wxScrolledWindow_SetScrollPageSize :: Ptr (TScrolledWindow a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@scrolledWindowSetScrollRate obj xstep ystep@).
+scrolledWindowSetScrollRate :: ScrolledWindow  a -> Int -> Int ->  IO ()
+scrolledWindowSetScrollRate _obj xstep ystep 
+  = withObjectRef "scrolledWindowSetScrollRate" _obj $ \cobj__obj -> 
+    wxScrolledWindow_SetScrollRate cobj__obj  (toCInt xstep)  (toCInt ystep)  
+foreign import ccall "wxScrolledWindow_SetScrollRate" wxScrolledWindow_SetScrollRate :: Ptr (TScrolledWindow a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@scrolledWindowSetScrollbars obj pixelsPerUnitX pixelsPerUnitY noUnitsX noUnitsY xPos yPos noRefresh@).
+scrolledWindowSetScrollbars :: ScrolledWindow  a -> Int -> Int -> Int -> Int -> Int -> Int -> Bool ->  IO ()
+scrolledWindowSetScrollbars _obj pixelsPerUnitX pixelsPerUnitY noUnitsX noUnitsY xPos yPos noRefresh 
+  = withObjectRef "scrolledWindowSetScrollbars" _obj $ \cobj__obj -> 
+    wxScrolledWindow_SetScrollbars cobj__obj  (toCInt pixelsPerUnitX)  (toCInt pixelsPerUnitY)  (toCInt noUnitsX)  (toCInt noUnitsY)  (toCInt xPos)  (toCInt yPos)  (toCBool noRefresh)  
+foreign import ccall "wxScrolledWindow_SetScrollbars" wxScrolledWindow_SetScrollbars :: Ptr (TScrolledWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> CBool -> IO ()
+
+-- | usage: (@scrolledWindowSetTargetWindow obj target@).
+scrolledWindowSetTargetWindow :: ScrolledWindow  a -> Window  b ->  IO ()
+scrolledWindowSetTargetWindow _obj target 
+  = withObjectRef "scrolledWindowSetTargetWindow" _obj $ \cobj__obj -> 
+    withObjectPtr target $ \cobj_target -> 
+    wxScrolledWindow_SetTargetWindow cobj__obj  cobj_target  
+foreign import ccall "wxScrolledWindow_SetTargetWindow" wxScrolledWindow_SetTargetWindow :: Ptr (TScrolledWindow a) -> Ptr (TWindow b) -> IO ()
+
+-- | usage: (@scrolledWindowShowScrollbars obj showh showv@).
+scrolledWindowShowScrollbars :: ScrolledWindow  a -> Int -> Int ->  IO ()
+scrolledWindowShowScrollbars _obj showh showv 
+  = withObjectRef "scrolledWindowShowScrollbars" _obj $ \cobj__obj -> 
+    wxScrolledWindow_ShowScrollbars cobj__obj  (toCInt showh)  (toCInt showv)  
+foreign import ccall "wxScrolledWindow_ShowScrollbars" wxScrolledWindow_ShowScrollbars :: Ptr (TScrolledWindow a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@scrolledWindowViewStart obj@).
+scrolledWindowViewStart :: ScrolledWindow  a ->  IO Point
+scrolledWindowViewStart _obj 
+  = withPointResult $ \px py -> 
+    withObjectRef "scrolledWindowViewStart" _obj $ \cobj__obj -> 
+    wxScrolledWindow_ViewStart cobj__obj   px py
+foreign import ccall "wxScrolledWindow_ViewStart" wxScrolledWindow_ViewStart :: Ptr (TScrolledWindow a) -> Ptr CInt -> Ptr CInt -> IO ()
+
+-- | usage: (@setCursorEventGetCursor obj@).
+setCursorEventGetCursor :: SetCursorEvent  a ->  IO (Cursor  ())
+setCursorEventGetCursor _obj 
+  = withManagedCursorResult $
+    withObjectRef "setCursorEventGetCursor" _obj $ \cobj__obj -> 
+    wxSetCursorEvent_GetCursor cobj__obj  
+foreign import ccall "wxSetCursorEvent_GetCursor" wxSetCursorEvent_GetCursor :: Ptr (TSetCursorEvent a) -> IO (Ptr (TCursor ()))
+
+-- | usage: (@setCursorEventGetX obj@).
+setCursorEventGetX :: SetCursorEvent  a ->  IO Int
+setCursorEventGetX _obj 
+  = withIntResult $
+    withObjectRef "setCursorEventGetX" _obj $ \cobj__obj -> 
+    wxSetCursorEvent_GetX cobj__obj  
+foreign import ccall "wxSetCursorEvent_GetX" wxSetCursorEvent_GetX :: Ptr (TSetCursorEvent a) -> IO CInt
+
+-- | usage: (@setCursorEventGetY obj@).
+setCursorEventGetY :: SetCursorEvent  a ->  IO Int
+setCursorEventGetY _obj 
+  = withIntResult $
+    withObjectRef "setCursorEventGetY" _obj $ \cobj__obj -> 
+    wxSetCursorEvent_GetY cobj__obj  
+foreign import ccall "wxSetCursorEvent_GetY" wxSetCursorEvent_GetY :: Ptr (TSetCursorEvent a) -> IO CInt
+
+-- | usage: (@setCursorEventHasCursor obj@).
+setCursorEventHasCursor :: SetCursorEvent  a ->  IO Bool
+setCursorEventHasCursor _obj 
+  = withBoolResult $
+    withObjectRef "setCursorEventHasCursor" _obj $ \cobj__obj -> 
+    wxSetCursorEvent_HasCursor cobj__obj  
+foreign import ccall "wxSetCursorEvent_HasCursor" wxSetCursorEvent_HasCursor :: Ptr (TSetCursorEvent a) -> IO CBool
+
+-- | usage: (@setCursorEventSetCursor obj cursor@).
+setCursorEventSetCursor :: SetCursorEvent  a -> Cursor  b ->  IO ()
+setCursorEventSetCursor _obj cursor 
+  = withObjectRef "setCursorEventSetCursor" _obj $ \cobj__obj -> 
+    withObjectPtr cursor $ \cobj_cursor -> 
+    wxSetCursorEvent_SetCursor cobj__obj  cobj_cursor  
+foreign import ccall "wxSetCursorEvent_SetCursor" wxSetCursorEvent_SetCursor :: Ptr (TSetCursorEvent a) -> Ptr (TCursor b) -> IO ()
+
+-- | usage: (@showEventCopyObject obj obj@).
+showEventCopyObject :: ShowEvent  a -> WxObject  b ->  IO ()
+showEventCopyObject _obj obj 
+  = withObjectRef "showEventCopyObject" _obj $ \cobj__obj -> 
+    withObjectPtr obj $ \cobj_obj -> 
+    wxShowEvent_CopyObject cobj__obj  cobj_obj  
+foreign import ccall "wxShowEvent_CopyObject" wxShowEvent_CopyObject :: Ptr (TShowEvent a) -> Ptr (TWxObject b) -> IO ()
+
+-- | usage: (@showEventIsShown obj@).
+showEventIsShown :: ShowEvent  a ->  IO Bool
+showEventIsShown _obj 
+  = withBoolResult $
+    withObjectRef "showEventIsShown" _obj $ \cobj__obj -> 
+    wxShowEvent_IsShown cobj__obj  
+foreign import ccall "wxShowEvent_IsShown" wxShowEvent_IsShown :: Ptr (TShowEvent a) -> IO CBool
+
+-- | usage: (@showEventSetShow obj show@).
+showEventSetShow :: ShowEvent  a -> Bool ->  IO ()
+showEventSetShow _obj show 
+  = withObjectRef "showEventSetShow" _obj $ \cobj__obj -> 
+    wxShowEvent_SetShow cobj__obj  (toCBool show)  
+foreign import ccall "wxShowEvent_SetShow" wxShowEvent_SetShow :: Ptr (TShowEvent a) -> CBool -> IO ()
+
+-- | usage: (@simpleHelpProviderCreate@).
+simpleHelpProviderCreate ::  IO (SimpleHelpProvider  ())
+simpleHelpProviderCreate 
+  = withObjectResult $
+    wxSimpleHelpProvider_Create 
+foreign import ccall "wxSimpleHelpProvider_Create" wxSimpleHelpProvider_Create :: IO (Ptr (TSimpleHelpProvider ()))
+
+-- | usage: (@singleInstanceCheckerCreate obj name path@).
+singleInstanceCheckerCreate :: Ptr  a -> String -> String ->  IO Bool
+singleInstanceCheckerCreate _obj name path 
+  = withBoolResult $
+    withStringPtr name $ \cobj_name -> 
+    withStringPtr path $ \cobj_path -> 
+    wxSingleInstanceChecker_Create _obj  cobj_name  cobj_path  
+foreign import ccall "wxSingleInstanceChecker_Create" wxSingleInstanceChecker_Create :: Ptr  a -> Ptr (TWxString b) -> Ptr (TWxString c) -> IO CBool
+
+-- | usage: (@singleInstanceCheckerCreateDefault@).
+singleInstanceCheckerCreateDefault ::  IO (SingleInstanceChecker  ())
+singleInstanceCheckerCreateDefault 
+  = withObjectResult $
+    wxSingleInstanceChecker_CreateDefault 
+foreign import ccall "wxSingleInstanceChecker_CreateDefault" wxSingleInstanceChecker_CreateDefault :: IO (Ptr (TSingleInstanceChecker ()))
+
+-- | usage: (@singleInstanceCheckerDelete obj@).
+singleInstanceCheckerDelete :: SingleInstanceChecker  a ->  IO ()
+singleInstanceCheckerDelete _obj 
+  = withObjectRef "singleInstanceCheckerDelete" _obj $ \cobj__obj -> 
+    wxSingleInstanceChecker_Delete cobj__obj  
+foreign import ccall "wxSingleInstanceChecker_Delete" wxSingleInstanceChecker_Delete :: Ptr (TSingleInstanceChecker a) -> IO ()
+
+-- | usage: (@singleInstanceCheckerIsAnotherRunning obj@).
+singleInstanceCheckerIsAnotherRunning :: SingleInstanceChecker  a ->  IO Bool
+singleInstanceCheckerIsAnotherRunning _obj 
+  = withBoolResult $
+    withObjectRef "singleInstanceCheckerIsAnotherRunning" _obj $ \cobj__obj -> 
+    wxSingleInstanceChecker_IsAnotherRunning cobj__obj  
+foreign import ccall "wxSingleInstanceChecker_IsAnotherRunning" wxSingleInstanceChecker_IsAnotherRunning :: Ptr (TSingleInstanceChecker a) -> IO CBool
+
+-- | usage: (@sizeEventCopyObject obj obj@).
+sizeEventCopyObject :: SizeEvent  a -> Ptr  b ->  IO ()
+sizeEventCopyObject _obj obj 
+  = withObjectRef "sizeEventCopyObject" _obj $ \cobj__obj -> 
+    wxSizeEvent_CopyObject cobj__obj  obj  
+foreign import ccall "wxSizeEvent_CopyObject" wxSizeEvent_CopyObject :: Ptr (TSizeEvent a) -> Ptr  b -> IO ()
+
+-- | usage: (@sizeEventGetSize obj@).
+sizeEventGetSize :: SizeEvent  a ->  IO (Size)
+sizeEventGetSize _obj 
+  = withWxSizeResult $
+    withObjectRef "sizeEventGetSize" _obj $ \cobj__obj -> 
+    wxSizeEvent_GetSize cobj__obj  
+foreign import ccall "wxSizeEvent_GetSize" wxSizeEvent_GetSize :: Ptr (TSizeEvent a) -> IO (Ptr (TWxSize ()))
+
+-- | usage: (@sizerAdd obj widthheight option flag border userData@).
+sizerAdd :: Sizer  a -> Size -> Int -> Int -> Int -> Ptr  f ->  IO ()
+sizerAdd _obj widthheight option flag border userData 
+  = withObjectRef "sizerAdd" _obj $ \cobj__obj -> 
+    wxSizer_Add cobj__obj  (toCIntSizeW widthheight) (toCIntSizeH widthheight)  (toCInt option)  (toCInt flag)  (toCInt border)  userData  
+foreign import ccall "wxSizer_Add" wxSizer_Add :: Ptr (TSizer a) -> CInt -> CInt -> CInt -> CInt -> CInt -> Ptr  f -> IO ()
+
+-- | usage: (@sizerAddSizer obj sizer option flag border userData@).
+sizerAddSizer :: Sizer  a -> Sizer  b -> Int -> Int -> Int -> Ptr  f ->  IO ()
+sizerAddSizer _obj sizer option flag border userData 
+  = withObjectRef "sizerAddSizer" _obj $ \cobj__obj -> 
+    withObjectPtr sizer $ \cobj_sizer -> 
+    wxSizer_AddSizer cobj__obj  cobj_sizer  (toCInt option)  (toCInt flag)  (toCInt border)  userData  
+foreign import ccall "wxSizer_AddSizer" wxSizer_AddSizer :: Ptr (TSizer a) -> Ptr (TSizer b) -> CInt -> CInt -> CInt -> Ptr  f -> IO ()
+
+-- | usage: (@sizerAddSpacer obj size@).
+sizerAddSpacer :: Sizer  a -> Int ->  IO ()
+sizerAddSpacer _obj size 
+  = withObjectRef "sizerAddSpacer" _obj $ \cobj__obj -> 
+    wxSizer_AddSpacer cobj__obj  (toCInt size)  
+foreign import ccall "wxSizer_AddSpacer" wxSizer_AddSpacer :: Ptr (TSizer a) -> CInt -> IO ()
+
+-- | usage: (@sizerAddStretchSpacer obj size@).
+sizerAddStretchSpacer :: Sizer  a -> Int ->  IO ()
+sizerAddStretchSpacer _obj size 
+  = withObjectRef "sizerAddStretchSpacer" _obj $ \cobj__obj -> 
+    wxSizer_AddStretchSpacer cobj__obj  (toCInt size)  
+foreign import ccall "wxSizer_AddStretchSpacer" wxSizer_AddStretchSpacer :: Ptr (TSizer a) -> CInt -> IO ()
+
+-- | usage: (@sizerAddWindow obj window option flag border userData@).
+sizerAddWindow :: Sizer  a -> Window  b -> Int -> Int -> Int -> Ptr  f ->  IO ()
+sizerAddWindow _obj window option flag border userData 
+  = withObjectRef "sizerAddWindow" _obj $ \cobj__obj -> 
+    withObjectPtr window $ \cobj_window -> 
+    wxSizer_AddWindow cobj__obj  cobj_window  (toCInt option)  (toCInt flag)  (toCInt border)  userData  
+foreign import ccall "wxSizer_AddWindow" wxSizer_AddWindow :: Ptr (TSizer a) -> Ptr (TWindow b) -> CInt -> CInt -> CInt -> Ptr  f -> IO ()
+
+-- | usage: (@sizerCalcMin obj@).
+sizerCalcMin :: Sizer  a ->  IO (Size)
+sizerCalcMin _obj 
+  = withWxSizeResult $
+    withObjectRef "sizerCalcMin" _obj $ \cobj__obj -> 
+    wxSizer_CalcMin cobj__obj  
+foreign import ccall "wxSizer_CalcMin" wxSizer_CalcMin :: Ptr (TSizer a) -> IO (Ptr (TWxSize ()))
+
+-- | usage: (@sizerClear obj deletewindows@).
+sizerClear :: Sizer  a -> Bool ->  IO ()
+sizerClear _obj deletewindows 
+  = withObjectRef "sizerClear" _obj $ \cobj__obj -> 
+    wxSizer_Clear cobj__obj  (toCBool deletewindows)  
+foreign import ccall "wxSizer_Clear" wxSizer_Clear :: Ptr (TSizer a) -> CBool -> IO ()
+
+-- | usage: (@sizerDetach obj index@).
+sizerDetach :: Sizer  a -> Int ->  IO Bool
+sizerDetach _obj index 
+  = withBoolResult $
+    withObjectRef "sizerDetach" _obj $ \cobj__obj -> 
+    wxSizer_Detach cobj__obj  (toCInt index)  
+foreign import ccall "wxSizer_Detach" wxSizer_Detach :: Ptr (TSizer a) -> CInt -> IO CBool
+
+-- | usage: (@sizerDetachSizer obj sizer@).
+sizerDetachSizer :: Sizer  a -> Sizer  b ->  IO Bool
+sizerDetachSizer _obj sizer 
+  = withBoolResult $
+    withObjectRef "sizerDetachSizer" _obj $ \cobj__obj -> 
+    withObjectPtr sizer $ \cobj_sizer -> 
+    wxSizer_DetachSizer cobj__obj  cobj_sizer  
+foreign import ccall "wxSizer_DetachSizer" wxSizer_DetachSizer :: Ptr (TSizer a) -> Ptr (TSizer b) -> IO CBool
+
+-- | usage: (@sizerDetachWindow obj window@).
+sizerDetachWindow :: Sizer  a -> Window  b ->  IO Bool
+sizerDetachWindow _obj window 
+  = withBoolResult $
+    withObjectRef "sizerDetachWindow" _obj $ \cobj__obj -> 
+    withObjectPtr window $ \cobj_window -> 
+    wxSizer_DetachWindow cobj__obj  cobj_window  
+foreign import ccall "wxSizer_DetachWindow" wxSizer_DetachWindow :: Ptr (TSizer a) -> Ptr (TWindow b) -> IO CBool
+
+-- | usage: (@sizerFit obj window@).
+sizerFit :: Sizer  a -> Window  b ->  IO ()
+sizerFit _obj window 
+  = withObjectRef "sizerFit" _obj $ \cobj__obj -> 
+    withObjectPtr window $ \cobj_window -> 
+    wxSizer_Fit cobj__obj  cobj_window  
+foreign import ccall "wxSizer_Fit" wxSizer_Fit :: Ptr (TSizer a) -> Ptr (TWindow b) -> IO ()
+
+-- | usage: (@sizerFitInside obj window@).
+sizerFitInside :: Sizer  a -> Window  b ->  IO ()
+sizerFitInside _obj window 
+  = withObjectRef "sizerFitInside" _obj $ \cobj__obj -> 
+    withObjectPtr window $ \cobj_window -> 
+    wxSizer_FitInside cobj__obj  cobj_window  
+foreign import ccall "wxSizer_FitInside" wxSizer_FitInside :: Ptr (TSizer a) -> Ptr (TWindow b) -> IO ()
+
+-- | usage: (@sizerGetChildren obj res cnt@).
+sizerGetChildren :: Sizer  a -> Ptr  b -> Int ->  IO Int
+sizerGetChildren _obj _res _cnt 
+  = withIntResult $
+    withObjectRef "sizerGetChildren" _obj $ \cobj__obj -> 
+    wxSizer_GetChildren cobj__obj  _res  (toCInt _cnt)  
+foreign import ccall "wxSizer_GetChildren" wxSizer_GetChildren :: Ptr (TSizer a) -> Ptr  b -> CInt -> IO CInt
+
+-- | usage: (@sizerGetContainingWindow obj@).
+sizerGetContainingWindow :: Sizer  a ->  IO (Window  ())
+sizerGetContainingWindow _obj 
+  = withObjectResult $
+    withObjectRef "sizerGetContainingWindow" _obj $ \cobj__obj -> 
+    wxSizer_GetContainingWindow cobj__obj  
+foreign import ccall "wxSizer_GetContainingWindow" wxSizer_GetContainingWindow :: Ptr (TSizer a) -> IO (Ptr (TWindow ()))
+
+-- | usage: (@sizerGetItem obj index@).
+sizerGetItem :: Sizer  a -> Int ->  IO (SizerItem  ())
+sizerGetItem _obj index 
+  = withObjectResult $
+    withObjectRef "sizerGetItem" _obj $ \cobj__obj -> 
+    wxSizer_GetItem cobj__obj  (toCInt index)  
+foreign import ccall "wxSizer_GetItem" wxSizer_GetItem :: Ptr (TSizer a) -> CInt -> IO (Ptr (TSizerItem ()))
+
+-- | usage: (@sizerGetItemSizer obj window recursive@).
+sizerGetItemSizer :: Sizer  a -> Sizer  b -> Bool ->  IO (SizerItem  ())
+sizerGetItemSizer _obj window recursive 
+  = withObjectResult $
+    withObjectRef "sizerGetItemSizer" _obj $ \cobj__obj -> 
+    withObjectPtr window $ \cobj_window -> 
+    wxSizer_GetItemSizer cobj__obj  cobj_window  (toCBool recursive)  
+foreign import ccall "wxSizer_GetItemSizer" wxSizer_GetItemSizer :: Ptr (TSizer a) -> Ptr (TSizer b) -> CBool -> IO (Ptr (TSizerItem ()))
+
+-- | usage: (@sizerGetItemWindow obj window recursive@).
+sizerGetItemWindow :: Sizer  a -> Window  b -> Bool ->  IO (SizerItem  ())
+sizerGetItemWindow _obj window recursive 
+  = withObjectResult $
+    withObjectRef "sizerGetItemWindow" _obj $ \cobj__obj -> 
+    withObjectPtr window $ \cobj_window -> 
+    wxSizer_GetItemWindow cobj__obj  cobj_window  (toCBool recursive)  
+foreign import ccall "wxSizer_GetItemWindow" wxSizer_GetItemWindow :: Ptr (TSizer a) -> Ptr (TWindow b) -> CBool -> IO (Ptr (TSizerItem ()))
+
+-- | usage: (@sizerGetMinSize obj@).
+sizerGetMinSize :: Sizer  a ->  IO (Size)
+sizerGetMinSize _obj 
+  = withWxSizeResult $
+    withObjectRef "sizerGetMinSize" _obj $ \cobj__obj -> 
+    wxSizer_GetMinSize cobj__obj  
+foreign import ccall "wxSizer_GetMinSize" wxSizer_GetMinSize :: Ptr (TSizer a) -> IO (Ptr (TWxSize ()))
+
+-- | usage: (@sizerGetPosition obj@).
+sizerGetPosition :: Sizer  a ->  IO (Point)
+sizerGetPosition _obj 
+  = withWxPointResult $
+    withObjectRef "sizerGetPosition" _obj $ \cobj__obj -> 
+    wxSizer_GetPosition cobj__obj  
+foreign import ccall "wxSizer_GetPosition" wxSizer_GetPosition :: Ptr (TSizer a) -> IO (Ptr (TWxPoint ()))
+
+-- | usage: (@sizerGetSize obj@).
+sizerGetSize :: Sizer  a ->  IO (Size)
+sizerGetSize _obj 
+  = withWxSizeResult $
+    withObjectRef "sizerGetSize" _obj $ \cobj__obj -> 
+    wxSizer_GetSize cobj__obj  
+foreign import ccall "wxSizer_GetSize" wxSizer_GetSize :: Ptr (TSizer a) -> IO (Ptr (TWxSize ()))
+
+-- | usage: (@sizerHide obj index@).
+sizerHide :: Window  a -> Int ->  IO Bool
+sizerHide _obj index 
+  = withBoolResult $
+    withObjectPtr _obj $ \cobj__obj -> 
+    wxSizer_Hide cobj__obj  (toCInt index)  
+foreign import ccall "wxSizer_Hide" wxSizer_Hide :: Ptr (TWindow a) -> CInt -> IO CBool
+
+-- | usage: (@sizerHideSizer obj sizer@).
+sizerHideSizer :: Window  a -> Sizer  b ->  IO Bool
+sizerHideSizer _obj sizer 
+  = withBoolResult $
+    withObjectPtr _obj $ \cobj__obj -> 
+    withObjectPtr sizer $ \cobj_sizer -> 
+    wxSizer_HideSizer cobj__obj  cobj_sizer  
+foreign import ccall "wxSizer_HideSizer" wxSizer_HideSizer :: Ptr (TWindow a) -> Ptr (TSizer b) -> IO CBool
+
+-- | usage: (@sizerHideWindow obj window@).
+sizerHideWindow :: Window  a -> Window  b ->  IO Bool
+sizerHideWindow _obj window 
+  = withBoolResult $
+    withObjectPtr _obj $ \cobj__obj -> 
+    withObjectPtr window $ \cobj_window -> 
+    wxSizer_HideWindow cobj__obj  cobj_window  
+foreign import ccall "wxSizer_HideWindow" wxSizer_HideWindow :: Ptr (TWindow a) -> Ptr (TWindow b) -> IO CBool
+
+-- | usage: (@sizerInsert obj before widthheight option flag border userData@).
+sizerInsert :: Sizer  a -> Int -> Size -> Int -> Int -> Int -> Ptr  g ->  IO ()
+sizerInsert _obj before widthheight option flag border userData 
+  = withObjectRef "sizerInsert" _obj $ \cobj__obj -> 
+    wxSizer_Insert cobj__obj  (toCInt before)  (toCIntSizeW widthheight) (toCIntSizeH widthheight)  (toCInt option)  (toCInt flag)  (toCInt border)  userData  
+foreign import ccall "wxSizer_Insert" wxSizer_Insert :: Ptr (TSizer a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> Ptr  g -> IO ()
+
+-- | usage: (@sizerInsertSizer obj before sizer option flag border userData@).
+sizerInsertSizer :: Sizer  a -> Int -> Sizer  c -> Int -> Int -> Int -> Ptr  g ->  IO ()
+sizerInsertSizer _obj before sizer option flag border userData 
+  = withObjectRef "sizerInsertSizer" _obj $ \cobj__obj -> 
+    withObjectPtr sizer $ \cobj_sizer -> 
+    wxSizer_InsertSizer cobj__obj  (toCInt before)  cobj_sizer  (toCInt option)  (toCInt flag)  (toCInt border)  userData  
+foreign import ccall "wxSizer_InsertSizer" wxSizer_InsertSizer :: Ptr (TSizer a) -> CInt -> Ptr (TSizer c) -> CInt -> CInt -> CInt -> Ptr  g -> IO ()
+
+-- | usage: (@sizerInsertSpacer obj index size@).
+sizerInsertSpacer :: Sizer  a -> Int -> Int ->  IO (SizerItem  ())
+sizerInsertSpacer _obj index size 
+  = withObjectResult $
+    withObjectRef "sizerInsertSpacer" _obj $ \cobj__obj -> 
+    wxSizer_InsertSpacer cobj__obj  (toCInt index)  (toCInt size)  
+foreign import ccall "wxSizer_InsertSpacer" wxSizer_InsertSpacer :: Ptr (TSizer a) -> CInt -> CInt -> IO (Ptr (TSizerItem ()))
+
+-- | usage: (@sizerInsertStretchSpacer obj index prop@).
+sizerInsertStretchSpacer :: Sizer  a -> Int -> Int ->  IO (SizerItem  ())
+sizerInsertStretchSpacer _obj index prop 
+  = withObjectResult $
+    withObjectRef "sizerInsertStretchSpacer" _obj $ \cobj__obj -> 
+    wxSizer_InsertStretchSpacer cobj__obj  (toCInt index)  (toCInt prop)  
+foreign import ccall "wxSizer_InsertStretchSpacer" wxSizer_InsertStretchSpacer :: Ptr (TSizer a) -> CInt -> CInt -> IO (Ptr (TSizerItem ()))
+
+-- | usage: (@sizerInsertWindow obj before window option flag border userData@).
+sizerInsertWindow :: Sizer  a -> Int -> Window  c -> Int -> Int -> Int -> Ptr  g ->  IO ()
+sizerInsertWindow _obj before window option flag border userData 
+  = withObjectRef "sizerInsertWindow" _obj $ \cobj__obj -> 
+    withObjectPtr window $ \cobj_window -> 
+    wxSizer_InsertWindow cobj__obj  (toCInt before)  cobj_window  (toCInt option)  (toCInt flag)  (toCInt border)  userData  
+foreign import ccall "wxSizer_InsertWindow" wxSizer_InsertWindow :: Ptr (TSizer a) -> CInt -> Ptr (TWindow c) -> CInt -> CInt -> CInt -> Ptr  g -> IO ()
+
+-- | usage: (@sizerIsShown obj index@).
+sizerIsShown :: Sizer  a -> Int ->  IO Bool
+sizerIsShown _obj index 
+  = withBoolResult $
+    withObjectRef "sizerIsShown" _obj $ \cobj__obj -> 
+    wxSizer_IsShown cobj__obj  (toCInt index)  
+foreign import ccall "wxSizer_IsShown" wxSizer_IsShown :: Ptr (TSizer a) -> CInt -> IO CBool
+
+-- | usage: (@sizerIsShownSizer obj sizer@).
+sizerIsShownSizer :: Sizer  a -> Ptr (Ptr (TSizer b)) ->  IO Bool
+sizerIsShownSizer _obj sizer 
+  = withBoolResult $
+    withObjectRef "sizerIsShownSizer" _obj $ \cobj__obj -> 
+    wxSizer_IsShownSizer cobj__obj  sizer  
+foreign import ccall "wxSizer_IsShownSizer" wxSizer_IsShownSizer :: Ptr (TSizer a) -> Ptr (Ptr (TSizer b)) -> IO CBool
+
+-- | usage: (@sizerIsShownWindow obj window@).
+sizerIsShownWindow :: Sizer  a -> Ptr (Ptr (TWindow b)) ->  IO Bool
+sizerIsShownWindow _obj window 
+  = withBoolResult $
+    withObjectRef "sizerIsShownWindow" _obj $ \cobj__obj -> 
+    wxSizer_IsShownWindow cobj__obj  window  
+foreign import ccall "wxSizer_IsShownWindow" wxSizer_IsShownWindow :: Ptr (TSizer a) -> Ptr (Ptr (TWindow b)) -> IO CBool
+
+-- | usage: (@sizerItemAssignSizer obj sizer@).
+sizerItemAssignSizer :: SizerItem  a -> Sizer  b ->  IO ()
+sizerItemAssignSizer _obj sizer 
+  = withObjectRef "sizerItemAssignSizer" _obj $ \cobj__obj -> 
+    withObjectPtr sizer $ \cobj_sizer -> 
+    wxSizerItem_AssignSizer cobj__obj  cobj_sizer  
+foreign import ccall "wxSizerItem_AssignSizer" wxSizerItem_AssignSizer :: Ptr (TSizerItem a) -> Ptr (TSizer b) -> IO ()
+
+-- | usage: (@sizerItemAssignSpacer obj widthheight@).
+sizerItemAssignSpacer :: SizerItem  a -> Size ->  IO ()
+sizerItemAssignSpacer _obj widthheight 
+  = withObjectRef "sizerItemAssignSpacer" _obj $ \cobj__obj -> 
+    wxSizerItem_AssignSpacer cobj__obj  (toCIntSizeW widthheight) (toCIntSizeH widthheight)  
+foreign import ccall "wxSizerItem_AssignSpacer" wxSizerItem_AssignSpacer :: Ptr (TSizerItem a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@sizerItemAssignWindow obj window@).
+sizerItemAssignWindow :: SizerItem  a -> Window  b ->  IO ()
+sizerItemAssignWindow _obj window 
+  = withObjectRef "sizerItemAssignWindow" _obj $ \cobj__obj -> 
+    withObjectPtr window $ \cobj_window -> 
+    wxSizerItem_AssignWindow cobj__obj  cobj_window  
+foreign import ccall "wxSizerItem_AssignWindow" wxSizerItem_AssignWindow :: Ptr (TSizerItem a) -> Ptr (TWindow b) -> IO ()
+
+-- | usage: (@sizerItemCalcMin obj@).
+sizerItemCalcMin :: SizerItem  a ->  IO (Size)
+sizerItemCalcMin _obj 
+  = withWxSizeResult $
+    withObjectRef "sizerItemCalcMin" _obj $ \cobj__obj -> 
+    wxSizerItem_CalcMin cobj__obj  
+foreign import ccall "wxSizerItem_CalcMin" wxSizerItem_CalcMin :: Ptr (TSizerItem a) -> IO (Ptr (TWxSize ()))
+
+-- | usage: (@sizerItemCreate widthheight option flag border userData@).
+sizerItemCreate :: Size -> Int -> Int -> Int -> Ptr  e ->  IO (SizerItem  ())
+sizerItemCreate widthheight option flag border userData 
+  = withObjectResult $
+    wxSizerItem_Create (toCIntSizeW widthheight) (toCIntSizeH widthheight)  (toCInt option)  (toCInt flag)  (toCInt border)  userData  
+foreign import ccall "wxSizerItem_Create" wxSizerItem_Create :: CInt -> CInt -> CInt -> CInt -> CInt -> Ptr  e -> IO (Ptr (TSizerItem ()))
+
+-- | usage: (@sizerItemCreateInSizer sizer option flag border userData@).
+sizerItemCreateInSizer :: Sizer  a -> Int -> Int -> Int -> Ptr  e ->  IO (Ptr  ())
+sizerItemCreateInSizer sizer option flag border userData 
+  = withObjectPtr sizer $ \cobj_sizer -> 
+    wxSizerItem_CreateInSizer cobj_sizer  (toCInt option)  (toCInt flag)  (toCInt border)  userData  
+foreign import ccall "wxSizerItem_CreateInSizer" wxSizerItem_CreateInSizer :: Ptr (TSizer a) -> CInt -> CInt -> CInt -> Ptr  e -> IO (Ptr  ())
+
+-- | usage: (@sizerItemCreateInWindow window option flag border userData@).
+sizerItemCreateInWindow :: Window  a -> Int -> Int -> Int -> Ptr  e ->  IO (Ptr  ())
+sizerItemCreateInWindow window option flag border userData 
+  = withObjectPtr window $ \cobj_window -> 
+    wxSizerItem_CreateInWindow cobj_window  (toCInt option)  (toCInt flag)  (toCInt border)  userData  
+foreign import ccall "wxSizerItem_CreateInWindow" wxSizerItem_CreateInWindow :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> Ptr  e -> IO (Ptr  ())
+
+-- | usage: (@sizerItemDelete obj@).
+sizerItemDelete :: SizerItem  a ->  IO ()
+sizerItemDelete
+  = objectDelete
+
+
+-- | usage: (@sizerItemDeleteWindows obj@).
+sizerItemDeleteWindows :: SizerItem  a ->  IO ()
+sizerItemDeleteWindows _obj 
+  = withObjectRef "sizerItemDeleteWindows" _obj $ \cobj__obj -> 
+    wxSizerItem_DeleteWindows cobj__obj  
+foreign import ccall "wxSizerItem_DeleteWindows" wxSizerItem_DeleteWindows :: Ptr (TSizerItem a) -> IO ()
+
+-- | usage: (@sizerItemDetachSizer obj@).
+sizerItemDetachSizer :: SizerItem  a ->  IO ()
+sizerItemDetachSizer _obj 
+  = withObjectRef "sizerItemDetachSizer" _obj $ \cobj__obj -> 
+    wxSizerItem_DetachSizer cobj__obj  
+foreign import ccall "wxSizerItem_DetachSizer" wxSizerItem_DetachSizer :: Ptr (TSizerItem a) -> IO ()
+
+-- | usage: (@sizerItemGetBorder obj@).
+sizerItemGetBorder :: SizerItem  a ->  IO Int
+sizerItemGetBorder _obj 
+  = withIntResult $
+    withObjectRef "sizerItemGetBorder" _obj $ \cobj__obj -> 
+    wxSizerItem_GetBorder cobj__obj  
+foreign import ccall "wxSizerItem_GetBorder" wxSizerItem_GetBorder :: Ptr (TSizerItem a) -> IO CInt
+
+-- | usage: (@sizerItemGetFlag obj@).
+sizerItemGetFlag :: SizerItem  a ->  IO Int
+sizerItemGetFlag _obj 
+  = withIntResult $
+    withObjectRef "sizerItemGetFlag" _obj $ \cobj__obj -> 
+    wxSizerItem_GetFlag cobj__obj  
+foreign import ccall "wxSizerItem_GetFlag" wxSizerItem_GetFlag :: Ptr (TSizerItem a) -> IO CInt
+
+-- | usage: (@sizerItemGetMinSize obj@).
+sizerItemGetMinSize :: SizerItem  a ->  IO (Size)
+sizerItemGetMinSize _obj 
+  = withWxSizeResult $
+    withObjectRef "sizerItemGetMinSize" _obj $ \cobj__obj -> 
+    wxSizerItem_GetMinSize cobj__obj  
+foreign import ccall "wxSizerItem_GetMinSize" wxSizerItem_GetMinSize :: Ptr (TSizerItem a) -> IO (Ptr (TWxSize ()))
+
+-- | usage: (@sizerItemGetPosition obj@).
+sizerItemGetPosition :: SizerItem  a ->  IO (Point)
+sizerItemGetPosition _obj 
+  = withWxPointResult $
+    withObjectRef "sizerItemGetPosition" _obj $ \cobj__obj -> 
+    wxSizerItem_GetPosition cobj__obj  
+foreign import ccall "wxSizerItem_GetPosition" wxSizerItem_GetPosition :: Ptr (TSizerItem a) -> IO (Ptr (TWxPoint ()))
+
+-- | usage: (@sizerItemGetProportion obj@).
+sizerItemGetProportion :: SizerItem  a ->  IO Int
+sizerItemGetProportion _obj 
+  = withIntResult $
+    withObjectRef "sizerItemGetProportion" _obj $ \cobj__obj -> 
+    wxSizerItem_GetProportion cobj__obj  
+foreign import ccall "wxSizerItem_GetProportion" wxSizerItem_GetProportion :: Ptr (TSizerItem a) -> IO CInt
+
+-- | usage: (@sizerItemGetRatio obj@).
+sizerItemGetRatio :: SizerItem  a ->  IO Float
+sizerItemGetRatio _obj 
+  = withObjectRef "sizerItemGetRatio" _obj $ \cobj__obj -> 
+    wxSizerItem_GetRatio cobj__obj  
+foreign import ccall "wxSizerItem_GetRatio" wxSizerItem_GetRatio :: Ptr (TSizerItem a) -> IO Float
+
+-- | usage: (@sizerItemGetRect obj@).
+sizerItemGetRect :: SizerItem  a ->  IO (Rect)
+sizerItemGetRect _obj 
+  = withWxRectResult $
+    withObjectRef "sizerItemGetRect" _obj $ \cobj__obj -> 
+    wxSizerItem_GetRect cobj__obj  
+foreign import ccall "wxSizerItem_GetRect" wxSizerItem_GetRect :: Ptr (TSizerItem a) -> IO (Ptr (TWxRect ()))
+
+-- | usage: (@sizerItemGetSize obj@).
+sizerItemGetSize :: SizerItem  a ->  IO (Size)
+sizerItemGetSize _obj 
+  = withWxSizeResult $
+    withObjectRef "sizerItemGetSize" _obj $ \cobj__obj -> 
+    wxSizerItem_GetSize cobj__obj  
+foreign import ccall "wxSizerItem_GetSize" wxSizerItem_GetSize :: Ptr (TSizerItem a) -> IO (Ptr (TWxSize ()))
+
+-- | usage: (@sizerItemGetSizer obj@).
+sizerItemGetSizer :: SizerItem  a ->  IO (Sizer  ())
+sizerItemGetSizer _obj 
+  = withObjectResult $
+    withObjectRef "sizerItemGetSizer" _obj $ \cobj__obj -> 
+    wxSizerItem_GetSizer cobj__obj  
+foreign import ccall "wxSizerItem_GetSizer" wxSizerItem_GetSizer :: Ptr (TSizerItem a) -> IO (Ptr (TSizer ()))
+
+-- | usage: (@sizerItemGetSpacer obj@).
+sizerItemGetSpacer :: SizerItem  a ->  IO (Size)
+sizerItemGetSpacer _obj 
+  = withWxSizeResult $
+    withObjectRef "sizerItemGetSpacer" _obj $ \cobj__obj -> 
+    wxSizerItem_GetSpacer cobj__obj  
+foreign import ccall "wxSizerItem_GetSpacer" wxSizerItem_GetSpacer :: Ptr (TSizerItem a) -> IO (Ptr (TWxSize ()))
+
+-- | usage: (@sizerItemGetUserData obj@).
+sizerItemGetUserData :: SizerItem  a ->  IO (Ptr  ())
+sizerItemGetUserData _obj 
+  = withObjectRef "sizerItemGetUserData" _obj $ \cobj__obj -> 
+    wxSizerItem_GetUserData cobj__obj  
+foreign import ccall "wxSizerItem_GetUserData" wxSizerItem_GetUserData :: Ptr (TSizerItem a) -> IO (Ptr  ())
+
+-- | usage: (@sizerItemGetWindow obj@).
+sizerItemGetWindow :: SizerItem  a ->  IO (Window  ())
+sizerItemGetWindow _obj 
+  = withObjectResult $
+    withObjectRef "sizerItemGetWindow" _obj $ \cobj__obj -> 
+    wxSizerItem_GetWindow cobj__obj  
+foreign import ccall "wxSizerItem_GetWindow" wxSizerItem_GetWindow :: Ptr (TSizerItem a) -> IO (Ptr (TWindow ()))
+
+-- | usage: (@sizerItemIsShown obj@).
+sizerItemIsShown :: SizerItem  a ->  IO Bool
+sizerItemIsShown _obj 
+  = withBoolResult $
+    withObjectRef "sizerItemIsShown" _obj $ \cobj__obj -> 
+    wxSizerItem_IsShown cobj__obj  
+foreign import ccall "wxSizerItem_IsShown" wxSizerItem_IsShown :: Ptr (TSizerItem a) -> IO CBool
+
+-- | usage: (@sizerItemIsSizer obj@).
+sizerItemIsSizer :: SizerItem  a ->  IO Bool
+sizerItemIsSizer _obj 
+  = withBoolResult $
+    withObjectRef "sizerItemIsSizer" _obj $ \cobj__obj -> 
+    wxSizerItem_IsSizer cobj__obj  
+foreign import ccall "wxSizerItem_IsSizer" wxSizerItem_IsSizer :: Ptr (TSizerItem a) -> IO CBool
+
+-- | usage: (@sizerItemIsSpacer obj@).
+sizerItemIsSpacer :: SizerItem  a ->  IO Bool
+sizerItemIsSpacer _obj 
+  = withBoolResult $
+    withObjectRef "sizerItemIsSpacer" _obj $ \cobj__obj -> 
+    wxSizerItem_IsSpacer cobj__obj  
+foreign import ccall "wxSizerItem_IsSpacer" wxSizerItem_IsSpacer :: Ptr (TSizerItem a) -> IO CBool
+
+-- | usage: (@sizerItemIsWindow obj@).
+sizerItemIsWindow :: SizerItem  a ->  IO Bool
+sizerItemIsWindow _obj 
+  = withBoolResult $
+    withObjectRef "sizerItemIsWindow" _obj $ \cobj__obj -> 
+    wxSizerItem_IsWindow cobj__obj  
+foreign import ccall "wxSizerItem_IsWindow" wxSizerItem_IsWindow :: Ptr (TSizerItem a) -> IO CBool
+
+-- | usage: (@sizerItemSetBorder obj border@).
+sizerItemSetBorder :: SizerItem  a -> Int ->  IO ()
+sizerItemSetBorder _obj border 
+  = withObjectRef "sizerItemSetBorder" _obj $ \cobj__obj -> 
+    wxSizerItem_SetBorder cobj__obj  (toCInt border)  
+foreign import ccall "wxSizerItem_SetBorder" wxSizerItem_SetBorder :: Ptr (TSizerItem a) -> CInt -> IO ()
+
+-- | usage: (@sizerItemSetDimension obj xywh@).
+sizerItemSetDimension :: SizerItem  a -> Rect ->  IO ()
+sizerItemSetDimension _obj _xywh 
+  = withObjectRef "sizerItemSetDimension" _obj $ \cobj__obj -> 
+    wxSizerItem_SetDimension cobj__obj  (toCIntRectX _xywh) (toCIntRectY _xywh)(toCIntRectW _xywh) (toCIntRectH _xywh)  
+foreign import ccall "wxSizerItem_SetDimension" wxSizerItem_SetDimension :: Ptr (TSizerItem a) -> CInt -> CInt -> CInt -> CInt -> IO ()
+
+-- | usage: (@sizerItemSetFlag obj flag@).
+sizerItemSetFlag :: SizerItem  a -> Int ->  IO ()
+sizerItemSetFlag _obj flag 
+  = withObjectRef "sizerItemSetFlag" _obj $ \cobj__obj -> 
+    wxSizerItem_SetFlag cobj__obj  (toCInt flag)  
+foreign import ccall "wxSizerItem_SetFlag" wxSizerItem_SetFlag :: Ptr (TSizerItem a) -> CInt -> IO ()
+
+-- | usage: (@sizerItemSetFloatRatio obj ratio@).
+sizerItemSetFloatRatio :: SizerItem  a -> Float ->  IO ()
+sizerItemSetFloatRatio _obj ratio 
+  = withObjectRef "sizerItemSetFloatRatio" _obj $ \cobj__obj -> 
+    wxSizerItem_SetFloatRatio cobj__obj  ratio  
+foreign import ccall "wxSizerItem_SetFloatRatio" wxSizerItem_SetFloatRatio :: Ptr (TSizerItem a) -> Float -> IO ()
+
+-- | usage: (@sizerItemSetInitSize obj xy@).
+sizerItemSetInitSize :: SizerItem  a -> Point ->  IO ()
+sizerItemSetInitSize _obj xy 
+  = withObjectRef "sizerItemSetInitSize" _obj $ \cobj__obj -> 
+    wxSizerItem_SetInitSize cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxSizerItem_SetInitSize" wxSizerItem_SetInitSize :: Ptr (TSizerItem a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@sizerItemSetProportion obj proportion@).
+sizerItemSetProportion :: SizerItem  a -> Int ->  IO ()
+sizerItemSetProportion _obj proportion 
+  = withObjectRef "sizerItemSetProportion" _obj $ \cobj__obj -> 
+    wxSizerItem_SetProportion cobj__obj  (toCInt proportion)  
+foreign import ccall "wxSizerItem_SetProportion" wxSizerItem_SetProportion :: Ptr (TSizerItem a) -> CInt -> IO ()
+
+-- | usage: (@sizerItemSetRatio obj widthheight@).
+sizerItemSetRatio :: SizerItem  a -> Size ->  IO ()
+sizerItemSetRatio _obj widthheight 
+  = withObjectRef "sizerItemSetRatio" _obj $ \cobj__obj -> 
+    wxSizerItem_SetRatio cobj__obj  (toCIntSizeW widthheight) (toCIntSizeH widthheight)  
+foreign import ccall "wxSizerItem_SetRatio" wxSizerItem_SetRatio :: Ptr (TSizerItem a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@sizerItemShow obj show@).
+sizerItemShow :: SizerItem  a -> Int ->  IO ()
+sizerItemShow _obj show 
+  = withObjectRef "sizerItemShow" _obj $ \cobj__obj -> 
+    wxSizerItem_Show cobj__obj  (toCInt show)  
+foreign import ccall "wxSizerItem_Show" wxSizerItem_Show :: Ptr (TSizerItem a) -> CInt -> IO ()
+
+-- | usage: (@sizerLayout obj@).
+sizerLayout :: Sizer  a ->  IO ()
+sizerLayout _obj 
+  = withObjectRef "sizerLayout" _obj $ \cobj__obj -> 
+    wxSizer_Layout cobj__obj  
+foreign import ccall "wxSizer_Layout" wxSizer_Layout :: Ptr (TSizer a) -> IO ()
+
+-- | usage: (@sizerPrepend obj widthheight option flag border userData@).
+sizerPrepend :: Sizer  a -> Size -> Int -> Int -> Int -> Ptr  f ->  IO ()
+sizerPrepend _obj widthheight option flag border userData 
+  = withObjectRef "sizerPrepend" _obj $ \cobj__obj -> 
+    wxSizer_Prepend cobj__obj  (toCIntSizeW widthheight) (toCIntSizeH widthheight)  (toCInt option)  (toCInt flag)  (toCInt border)  userData  
+foreign import ccall "wxSizer_Prepend" wxSizer_Prepend :: Ptr (TSizer a) -> CInt -> CInt -> CInt -> CInt -> CInt -> Ptr  f -> IO ()
+
+-- | usage: (@sizerPrependSizer obj sizer option flag border userData@).
+sizerPrependSizer :: Sizer  a -> Sizer  b -> Int -> Int -> Int -> Ptr  f ->  IO ()
+sizerPrependSizer _obj sizer option flag border userData 
+  = withObjectRef "sizerPrependSizer" _obj $ \cobj__obj -> 
+    withObjectPtr sizer $ \cobj_sizer -> 
+    wxSizer_PrependSizer cobj__obj  cobj_sizer  (toCInt option)  (toCInt flag)  (toCInt border)  userData  
+foreign import ccall "wxSizer_PrependSizer" wxSizer_PrependSizer :: Ptr (TSizer a) -> Ptr (TSizer b) -> CInt -> CInt -> CInt -> Ptr  f -> IO ()
+
+-- | usage: (@sizerPrependSpacer obj size@).
+sizerPrependSpacer :: Sizer  a -> Int ->  IO (SizerItem  ())
+sizerPrependSpacer _obj size 
+  = withObjectResult $
+    withObjectRef "sizerPrependSpacer" _obj $ \cobj__obj -> 
+    wxSizer_PrependSpacer cobj__obj  (toCInt size)  
+foreign import ccall "wxSizer_PrependSpacer" wxSizer_PrependSpacer :: Ptr (TSizer a) -> CInt -> IO (Ptr (TSizerItem ()))
+
+-- | usage: (@sizerPrependStretchSpacer obj prop@).
+sizerPrependStretchSpacer :: Sizer  a -> Int ->  IO (SizerItem  ())
+sizerPrependStretchSpacer _obj prop 
+  = withObjectResult $
+    withObjectRef "sizerPrependStretchSpacer" _obj $ \cobj__obj -> 
+    wxSizer_PrependStretchSpacer cobj__obj  (toCInt prop)  
+foreign import ccall "wxSizer_PrependStretchSpacer" wxSizer_PrependStretchSpacer :: Ptr (TSizer a) -> CInt -> IO (Ptr (TSizerItem ()))
+
+-- | usage: (@sizerPrependWindow obj window option flag border userData@).
+sizerPrependWindow :: Sizer  a -> Window  b -> Int -> Int -> Int -> Ptr  f ->  IO ()
+sizerPrependWindow _obj window option flag border userData 
+  = withObjectRef "sizerPrependWindow" _obj $ \cobj__obj -> 
+    withObjectPtr window $ \cobj_window -> 
+    wxSizer_PrependWindow cobj__obj  cobj_window  (toCInt option)  (toCInt flag)  (toCInt border)  userData  
+foreign import ccall "wxSizer_PrependWindow" wxSizer_PrependWindow :: Ptr (TSizer a) -> Ptr (TWindow b) -> CInt -> CInt -> CInt -> Ptr  f -> IO ()
+
+-- | usage: (@sizerRecalcSizes obj@).
+sizerRecalcSizes :: Sizer  a ->  IO ()
+sizerRecalcSizes _obj 
+  = withObjectRef "sizerRecalcSizes" _obj $ \cobj__obj -> 
+    wxSizer_RecalcSizes cobj__obj  
+foreign import ccall "wxSizer_RecalcSizes" wxSizer_RecalcSizes :: Ptr (TSizer a) -> IO ()
+
+-- | usage: (@sizerReplace obj oldindex newitem@).
+sizerReplace :: Sizer  a -> Int -> SizerItem  c ->  IO Bool
+sizerReplace _obj oldindex newitem 
+  = withBoolResult $
+    withObjectRef "sizerReplace" _obj $ \cobj__obj -> 
+    withObjectPtr newitem $ \cobj_newitem -> 
+    wxSizer_Replace cobj__obj  (toCInt oldindex)  cobj_newitem  
+foreign import ccall "wxSizer_Replace" wxSizer_Replace :: Ptr (TSizer a) -> CInt -> Ptr (TSizerItem c) -> IO CBool
+
+-- | usage: (@sizerReplaceSizer obj oldsz newsz recursive@).
+sizerReplaceSizer :: Sizer  a -> Sizer  b -> Sizer  c -> Bool ->  IO Bool
+sizerReplaceSizer _obj oldsz newsz recursive 
+  = withBoolResult $
+    withObjectRef "sizerReplaceSizer" _obj $ \cobj__obj -> 
+    withObjectPtr oldsz $ \cobj_oldsz -> 
+    withObjectPtr newsz $ \cobj_newsz -> 
+    wxSizer_ReplaceSizer cobj__obj  cobj_oldsz  cobj_newsz  (toCBool recursive)  
+foreign import ccall "wxSizer_ReplaceSizer" wxSizer_ReplaceSizer :: Ptr (TSizer a) -> Ptr (TSizer b) -> Ptr (TSizer c) -> CBool -> IO CBool
+
+-- | usage: (@sizerReplaceWindow obj oldwin newwin recursive@).
+sizerReplaceWindow :: Sizer  a -> Window  b -> Window  c -> Bool ->  IO Bool
+sizerReplaceWindow _obj oldwin newwin recursive 
+  = withBoolResult $
+    withObjectRef "sizerReplaceWindow" _obj $ \cobj__obj -> 
+    withObjectPtr oldwin $ \cobj_oldwin -> 
+    withObjectPtr newwin $ \cobj_newwin -> 
+    wxSizer_ReplaceWindow cobj__obj  cobj_oldwin  cobj_newwin  (toCBool recursive)  
+foreign import ccall "wxSizer_ReplaceWindow" wxSizer_ReplaceWindow :: Ptr (TSizer a) -> Ptr (TWindow b) -> Ptr (TWindow c) -> CBool -> IO CBool
+
+-- | usage: (@sizerSetDimension obj xywidthheight@).
+sizerSetDimension :: Sizer  a -> Rect ->  IO ()
+sizerSetDimension _obj xywidthheight 
+  = withObjectRef "sizerSetDimension" _obj $ \cobj__obj -> 
+    wxSizer_SetDimension cobj__obj  (toCIntRectX xywidthheight) (toCIntRectY xywidthheight)(toCIntRectW xywidthheight) (toCIntRectH xywidthheight)  
+foreign import ccall "wxSizer_SetDimension" wxSizer_SetDimension :: Ptr (TSizer a) -> CInt -> CInt -> CInt -> CInt -> IO ()
+
+-- | usage: (@sizerSetItemMinSize obj pos widthheight@).
+sizerSetItemMinSize :: Sizer  a -> Int -> Size ->  IO ()
+sizerSetItemMinSize _obj pos widthheight 
+  = withObjectRef "sizerSetItemMinSize" _obj $ \cobj__obj -> 
+    wxSizer_SetItemMinSize cobj__obj  (toCInt pos)  (toCIntSizeW widthheight) (toCIntSizeH widthheight)  
+foreign import ccall "wxSizer_SetItemMinSize" wxSizer_SetItemMinSize :: Ptr (TSizer a) -> CInt -> CInt -> CInt -> IO ()
+
+-- | usage: (@sizerSetItemMinSizeSizer obj sizer widthheight@).
+sizerSetItemMinSizeSizer :: Sizer  a -> Sizer  b -> Size ->  IO ()
+sizerSetItemMinSizeSizer _obj sizer widthheight 
+  = withObjectRef "sizerSetItemMinSizeSizer" _obj $ \cobj__obj -> 
+    withObjectPtr sizer $ \cobj_sizer -> 
+    wxSizer_SetItemMinSizeSizer cobj__obj  cobj_sizer  (toCIntSizeW widthheight) (toCIntSizeH widthheight)  
+foreign import ccall "wxSizer_SetItemMinSizeSizer" wxSizer_SetItemMinSizeSizer :: Ptr (TSizer a) -> Ptr (TSizer b) -> CInt -> CInt -> IO ()
+
+-- | usage: (@sizerSetItemMinSizeWindow obj window widthheight@).
+sizerSetItemMinSizeWindow :: Sizer  a -> Window  b -> Size ->  IO ()
+sizerSetItemMinSizeWindow _obj window widthheight 
+  = withObjectRef "sizerSetItemMinSizeWindow" _obj $ \cobj__obj -> 
+    withObjectPtr window $ \cobj_window -> 
+    wxSizer_SetItemMinSizeWindow cobj__obj  cobj_window  (toCIntSizeW widthheight) (toCIntSizeH widthheight)  
+foreign import ccall "wxSizer_SetItemMinSizeWindow" wxSizer_SetItemMinSizeWindow :: Ptr (TSizer a) -> Ptr (TWindow b) -> CInt -> CInt -> IO ()
+
+-- | usage: (@sizerSetMinSize obj widthheight@).
+sizerSetMinSize :: Sizer  a -> Size ->  IO ()
+sizerSetMinSize _obj widthheight 
+  = withObjectRef "sizerSetMinSize" _obj $ \cobj__obj -> 
+    wxSizer_SetMinSize cobj__obj  (toCIntSizeW widthheight) (toCIntSizeH widthheight)  
+foreign import ccall "wxSizer_SetMinSize" wxSizer_SetMinSize :: Ptr (TSizer a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@sizerSetSizeHints obj window@).
+sizerSetSizeHints :: Sizer  a -> Window  b ->  IO ()
+sizerSetSizeHints _obj window 
+  = withObjectRef "sizerSetSizeHints" _obj $ \cobj__obj -> 
+    withObjectPtr window $ \cobj_window -> 
+    wxSizer_SetSizeHints cobj__obj  cobj_window  
+foreign import ccall "wxSizer_SetSizeHints" wxSizer_SetSizeHints :: Ptr (TSizer a) -> Ptr (TWindow b) -> IO ()
+
+-- | usage: (@sizerShow obj sizer index show@).
+sizerShow :: Sizer  a -> Sizer  b -> Int -> Bool ->  IO Bool
+sizerShow _obj sizer index show 
+  = withBoolResult $
+    withObjectRef "sizerShow" _obj $ \cobj__obj -> 
+    withObjectPtr sizer $ \cobj_sizer -> 
+    wxSizer_Show cobj__obj  cobj_sizer  (toCInt index)  (toCBool show)  
+foreign import ccall "wxSizer_Show" wxSizer_Show :: Ptr (TSizer a) -> Ptr (TSizer b) -> CInt -> CBool -> IO CBool
+
+-- | usage: (@sizerShowSizer obj sizer show recursive@).
+sizerShowSizer :: Sizer  a -> Sizer  b -> Bool -> Bool ->  IO Bool
+sizerShowSizer _obj sizer show recursive 
+  = withBoolResult $
+    withObjectRef "sizerShowSizer" _obj $ \cobj__obj -> 
+    withObjectPtr sizer $ \cobj_sizer -> 
+    wxSizer_ShowSizer cobj__obj  cobj_sizer  (toCBool show)  (toCBool recursive)  
+foreign import ccall "wxSizer_ShowSizer" wxSizer_ShowSizer :: Ptr (TSizer a) -> Ptr (TSizer b) -> CBool -> CBool -> IO CBool
+
+-- | usage: (@sizerShowWindow obj window show recursive@).
+sizerShowWindow :: Sizer  a -> Window  b -> Bool -> Bool ->  IO Bool
+sizerShowWindow _obj window show recursive 
+  = withBoolResult $
+    withObjectRef "sizerShowWindow" _obj $ \cobj__obj -> 
+    withObjectPtr window $ \cobj_window -> 
+    wxSizer_ShowWindow cobj__obj  cobj_window  (toCBool show)  (toCBool recursive)  
+foreign import ccall "wxSizer_ShowWindow" wxSizer_ShowWindow :: Ptr (TSizer a) -> Ptr (TWindow b) -> CBool -> CBool -> IO CBool
+
+-- | usage: (@sliderClearSel obj@).
+sliderClearSel :: Slider  a ->  IO ()
+sliderClearSel _obj 
+  = withObjectRef "sliderClearSel" _obj $ \cobj__obj -> 
+    wxSlider_ClearSel cobj__obj  
+foreign import ccall "wxSlider_ClearSel" wxSlider_ClearSel :: Ptr (TSlider a) -> IO ()
+
+-- | usage: (@sliderClearTicks obj@).
+sliderClearTicks :: Slider  a ->  IO ()
+sliderClearTicks _obj 
+  = withObjectRef "sliderClearTicks" _obj $ \cobj__obj -> 
+    wxSlider_ClearTicks cobj__obj  
+foreign import ccall "wxSlider_ClearTicks" wxSlider_ClearTicks :: Ptr (TSlider a) -> IO ()
+
+-- | usage: (@sliderCreate prt id wxinit min max lfttopwdthgt stl@).
+sliderCreate :: Window  a -> Id -> Int -> Int -> Int -> Rect -> Style ->  IO (Slider  ())
+sliderCreate _prt _id _init _min _max _lfttopwdthgt _stl 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    wxSlider_Create cobj__prt  (toCInt _id)  (toCInt _init)  (toCInt _min)  (toCInt _max)  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
+foreign import ccall "wxSlider_Create" wxSlider_Create :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TSlider ()))
+
+-- | usage: (@sliderGetLineSize obj@).
+sliderGetLineSize :: Slider  a ->  IO Int
+sliderGetLineSize _obj 
+  = withIntResult $
+    withObjectRef "sliderGetLineSize" _obj $ \cobj__obj -> 
+    wxSlider_GetLineSize cobj__obj  
+foreign import ccall "wxSlider_GetLineSize" wxSlider_GetLineSize :: Ptr (TSlider a) -> IO CInt
+
+-- | usage: (@sliderGetMax obj@).
+sliderGetMax :: Slider  a ->  IO Int
+sliderGetMax _obj 
+  = withIntResult $
+    withObjectRef "sliderGetMax" _obj $ \cobj__obj -> 
+    wxSlider_GetMax cobj__obj  
+foreign import ccall "wxSlider_GetMax" wxSlider_GetMax :: Ptr (TSlider a) -> IO CInt
+
+-- | usage: (@sliderGetMin obj@).
+sliderGetMin :: Slider  a ->  IO Int
+sliderGetMin _obj 
+  = withIntResult $
+    withObjectRef "sliderGetMin" _obj $ \cobj__obj -> 
+    wxSlider_GetMin cobj__obj  
+foreign import ccall "wxSlider_GetMin" wxSlider_GetMin :: Ptr (TSlider a) -> IO CInt
+
+-- | usage: (@sliderGetPageSize obj@).
+sliderGetPageSize :: Slider  a ->  IO Int
+sliderGetPageSize _obj 
+  = withIntResult $
+    withObjectRef "sliderGetPageSize" _obj $ \cobj__obj -> 
+    wxSlider_GetPageSize cobj__obj  
+foreign import ccall "wxSlider_GetPageSize" wxSlider_GetPageSize :: Ptr (TSlider a) -> IO CInt
+
+-- | usage: (@sliderGetSelEnd obj@).
+sliderGetSelEnd :: Slider  a ->  IO Int
+sliderGetSelEnd _obj 
+  = withIntResult $
+    withObjectRef "sliderGetSelEnd" _obj $ \cobj__obj -> 
+    wxSlider_GetSelEnd cobj__obj  
+foreign import ccall "wxSlider_GetSelEnd" wxSlider_GetSelEnd :: Ptr (TSlider a) -> IO CInt
+
+-- | usage: (@sliderGetSelStart obj@).
+sliderGetSelStart :: Slider  a ->  IO Int
+sliderGetSelStart _obj 
+  = withIntResult $
+    withObjectRef "sliderGetSelStart" _obj $ \cobj__obj -> 
+    wxSlider_GetSelStart cobj__obj  
+foreign import ccall "wxSlider_GetSelStart" wxSlider_GetSelStart :: Ptr (TSlider a) -> IO CInt
+
+-- | usage: (@sliderGetThumbLength obj@).
+sliderGetThumbLength :: Slider  a ->  IO Int
+sliderGetThumbLength _obj 
+  = withIntResult $
+    withObjectRef "sliderGetThumbLength" _obj $ \cobj__obj -> 
+    wxSlider_GetThumbLength cobj__obj  
+foreign import ccall "wxSlider_GetThumbLength" wxSlider_GetThumbLength :: Ptr (TSlider a) -> IO CInt
+
+-- | usage: (@sliderGetTickFreq obj@).
+sliderGetTickFreq :: Slider  a ->  IO Int
+sliderGetTickFreq _obj 
+  = withIntResult $
+    withObjectRef "sliderGetTickFreq" _obj $ \cobj__obj -> 
+    wxSlider_GetTickFreq cobj__obj  
+foreign import ccall "wxSlider_GetTickFreq" wxSlider_GetTickFreq :: Ptr (TSlider a) -> IO CInt
+
+-- | usage: (@sliderGetValue obj@).
+sliderGetValue :: Slider  a ->  IO Int
+sliderGetValue _obj 
+  = withIntResult $
+    withObjectRef "sliderGetValue" _obj $ \cobj__obj -> 
+    wxSlider_GetValue cobj__obj  
+foreign import ccall "wxSlider_GetValue" wxSlider_GetValue :: Ptr (TSlider a) -> IO CInt
+
+-- | usage: (@sliderSetLineSize obj lineSize@).
+sliderSetLineSize :: Slider  a -> Int ->  IO ()
+sliderSetLineSize _obj lineSize 
+  = withObjectRef "sliderSetLineSize" _obj $ \cobj__obj -> 
+    wxSlider_SetLineSize cobj__obj  (toCInt lineSize)  
+foreign import ccall "wxSlider_SetLineSize" wxSlider_SetLineSize :: Ptr (TSlider a) -> CInt -> IO ()
+
+-- | usage: (@sliderSetPageSize obj pageSize@).
+sliderSetPageSize :: Slider  a -> Int ->  IO ()
+sliderSetPageSize _obj pageSize 
+  = withObjectRef "sliderSetPageSize" _obj $ \cobj__obj -> 
+    wxSlider_SetPageSize cobj__obj  (toCInt pageSize)  
+foreign import ccall "wxSlider_SetPageSize" wxSlider_SetPageSize :: Ptr (TSlider a) -> CInt -> IO ()
+
+-- | usage: (@sliderSetRange obj minValue maxValue@).
+sliderSetRange :: Slider  a -> Int -> Int ->  IO ()
+sliderSetRange _obj minValue maxValue 
+  = withObjectRef "sliderSetRange" _obj $ \cobj__obj -> 
+    wxSlider_SetRange cobj__obj  (toCInt minValue)  (toCInt maxValue)  
+foreign import ccall "wxSlider_SetRange" wxSlider_SetRange :: Ptr (TSlider a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@sliderSetSelection obj minPos maxPos@).
+sliderSetSelection :: Slider  a -> Int -> Int ->  IO ()
+sliderSetSelection _obj minPos maxPos 
+  = withObjectRef "sliderSetSelection" _obj $ \cobj__obj -> 
+    wxSlider_SetSelection cobj__obj  (toCInt minPos)  (toCInt maxPos)  
+foreign import ccall "wxSlider_SetSelection" wxSlider_SetSelection :: Ptr (TSlider a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@sliderSetThumbLength obj len@).
+sliderSetThumbLength :: Slider  a -> Int ->  IO ()
+sliderSetThumbLength _obj len 
+  = withObjectRef "sliderSetThumbLength" _obj $ \cobj__obj -> 
+    wxSlider_SetThumbLength cobj__obj  (toCInt len)  
+foreign import ccall "wxSlider_SetThumbLength" wxSlider_SetThumbLength :: Ptr (TSlider a) -> CInt -> IO ()
+
+-- | usage: (@sliderSetTick obj tickPos@).
+sliderSetTick :: Slider  a -> Int ->  IO ()
+sliderSetTick _obj tickPos 
+  = withObjectRef "sliderSetTick" _obj $ \cobj__obj -> 
+    wxSlider_SetTick cobj__obj  (toCInt tickPos)  
+foreign import ccall "wxSlider_SetTick" wxSlider_SetTick :: Ptr (TSlider a) -> CInt -> IO ()
+
+-- | usage: (@sliderSetValue obj value@).
+sliderSetValue :: Slider  a -> Int ->  IO ()
+sliderSetValue _obj value 
+  = withObjectRef "sliderSetValue" _obj $ \cobj__obj -> 
+    wxSlider_SetValue cobj__obj  (toCInt value)  
+foreign import ccall "wxSlider_SetValue" wxSlider_SetValue :: Ptr (TSlider a) -> CInt -> IO ()
+
+{- |  Usage: @soundCreate fileName isResource@. As yet (Nov 2003) unsupported on MacOS X  -}
+soundCreate :: String -> Bool ->  IO (Sound  ())
+soundCreate fileName isResource 
+  = withManagedObjectResult $
+    withStringPtr fileName $ \cobj_fileName -> 
+    wxSound_Create cobj_fileName  (toCBool isResource)  
+foreign import ccall "wxSound_Create" wxSound_Create :: Ptr (TWxString a) -> CBool -> IO (Ptr (TSound ()))
+
+-- | usage: (@soundDelete self@).
+soundDelete :: Sound  a ->  IO ()
+soundDelete
+  = objectDelete
+
+
+-- | usage: (@soundIsOk self@).
+soundIsOk :: Sound  a ->  IO Bool
+soundIsOk self 
+  = withBoolResult $
+    withObjectRef "soundIsOk" self $ \cobj_self -> 
+    wxSound_IsOk cobj_self  
+foreign import ccall "wxSound_IsOk" wxSound_IsOk :: Ptr (TSound a) -> IO CBool
+
+-- | usage: (@soundPlay self flag@).
+soundPlay :: Sound  a -> Int ->  IO Bool
+soundPlay self flag 
+  = withBoolResult $
+    withObjectRef "soundPlay" self $ \cobj_self -> 
+    wxSound_Play cobj_self  (toCInt flag)  
+foreign import ccall "wxSound_Play" wxSound_Play :: Ptr (TSound a) -> CInt -> IO CBool
+
+-- | usage: (@soundStop self@).
+soundStop :: Sound  a ->  IO ()
+soundStop self 
+  = withObjectRef "soundStop" self $ \cobj_self -> 
+    wxSound_Stop cobj_self  
+foreign import ccall "wxSound_Stop" wxSound_Stop :: Ptr (TSound a) -> IO ()
+
+-- | usage: (@spinButtonCreate prt id lfttopwdthgt stl@).
+spinButtonCreate :: Window  a -> Id -> Rect -> Style ->  IO (SpinButton  ())
+spinButtonCreate _prt _id _lfttopwdthgt _stl 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    wxSpinButton_Create cobj__prt  (toCInt _id)  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
+foreign import ccall "wxSpinButton_Create" wxSpinButton_Create :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TSpinButton ()))
+
+-- | usage: (@spinButtonGetMax obj@).
+spinButtonGetMax :: SpinButton  a ->  IO Int
+spinButtonGetMax _obj 
+  = withIntResult $
+    withObjectRef "spinButtonGetMax" _obj $ \cobj__obj -> 
+    wxSpinButton_GetMax cobj__obj  
+foreign import ccall "wxSpinButton_GetMax" wxSpinButton_GetMax :: Ptr (TSpinButton a) -> IO CInt
+
+-- | usage: (@spinButtonGetMin obj@).
+spinButtonGetMin :: SpinButton  a ->  IO Int
+spinButtonGetMin _obj 
+  = withIntResult $
+    withObjectRef "spinButtonGetMin" _obj $ \cobj__obj -> 
+    wxSpinButton_GetMin cobj__obj  
+foreign import ccall "wxSpinButton_GetMin" wxSpinButton_GetMin :: Ptr (TSpinButton a) -> IO CInt
+
+-- | usage: (@spinButtonGetValue obj@).
+spinButtonGetValue :: SpinButton  a ->  IO Int
+spinButtonGetValue _obj 
+  = withIntResult $
+    withObjectRef "spinButtonGetValue" _obj $ \cobj__obj -> 
+    wxSpinButton_GetValue cobj__obj  
+foreign import ccall "wxSpinButton_GetValue" wxSpinButton_GetValue :: Ptr (TSpinButton a) -> IO CInt
+
+-- | usage: (@spinButtonSetRange obj minVal maxVal@).
+spinButtonSetRange :: SpinButton  a -> Int -> Int ->  IO ()
+spinButtonSetRange _obj minVal maxVal 
+  = withObjectRef "spinButtonSetRange" _obj $ \cobj__obj -> 
+    wxSpinButton_SetRange cobj__obj  (toCInt minVal)  (toCInt maxVal)  
+foreign import ccall "wxSpinButton_SetRange" wxSpinButton_SetRange :: Ptr (TSpinButton a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@spinButtonSetValue obj val@).
+spinButtonSetValue :: SpinButton  a -> Int ->  IO ()
+spinButtonSetValue _obj val 
+  = withObjectRef "spinButtonSetValue" _obj $ \cobj__obj -> 
+    wxSpinButton_SetValue cobj__obj  (toCInt val)  
+foreign import ccall "wxSpinButton_SetValue" wxSpinButton_SetValue :: Ptr (TSpinButton a) -> CInt -> IO ()
+
+-- | usage: (@spinCtrlCreate prt id txt lfttopwdthgt stl min max wxinit@).
+spinCtrlCreate :: Window  a -> Id -> String -> Rect -> Style -> Int -> Int -> Int ->  IO (SpinCtrl  ())
+spinCtrlCreate _prt _id _txt _lfttopwdthgt _stl _min _max _init 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    withStringPtr _txt $ \cobj__txt -> 
+    wxSpinCtrl_Create cobj__prt  (toCInt _id)  cobj__txt  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  (toCInt _min)  (toCInt _max)  (toCInt _init)  
+foreign import ccall "wxSpinCtrl_Create" wxSpinCtrl_Create :: Ptr (TWindow a) -> CInt -> Ptr (TWxString c) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TSpinCtrl ()))
+
+-- | usage: (@spinCtrlGetMax obj@).
+spinCtrlGetMax :: SpinCtrl  a ->  IO Int
+spinCtrlGetMax _obj 
+  = withIntResult $
+    withObjectRef "spinCtrlGetMax" _obj $ \cobj__obj -> 
+    wxSpinCtrl_GetMax cobj__obj  
+foreign import ccall "wxSpinCtrl_GetMax" wxSpinCtrl_GetMax :: Ptr (TSpinCtrl a) -> IO CInt
+
+-- | usage: (@spinCtrlGetMin obj@).
+spinCtrlGetMin :: SpinCtrl  a ->  IO Int
+spinCtrlGetMin _obj 
+  = withIntResult $
+    withObjectRef "spinCtrlGetMin" _obj $ \cobj__obj -> 
+    wxSpinCtrl_GetMin cobj__obj  
+foreign import ccall "wxSpinCtrl_GetMin" wxSpinCtrl_GetMin :: Ptr (TSpinCtrl a) -> IO CInt
+
+-- | usage: (@spinCtrlGetValue obj@).
+spinCtrlGetValue :: SpinCtrl  a ->  IO Int
+spinCtrlGetValue _obj 
+  = withIntResult $
+    withObjectRef "spinCtrlGetValue" _obj $ \cobj__obj -> 
+    wxSpinCtrl_GetValue cobj__obj  
+foreign import ccall "wxSpinCtrl_GetValue" wxSpinCtrl_GetValue :: Ptr (TSpinCtrl a) -> IO CInt
+
+-- | usage: (@spinCtrlSetRange obj minval maxval@).
+spinCtrlSetRange :: SpinCtrl  a -> Int -> Int ->  IO ()
+spinCtrlSetRange _obj minval maxval 
+  = withObjectRef "spinCtrlSetRange" _obj $ \cobj__obj -> 
+    wxSpinCtrl_SetRange cobj__obj  (toCInt minval)  (toCInt maxval)  
+foreign import ccall "wxSpinCtrl_SetRange" wxSpinCtrl_SetRange :: Ptr (TSpinCtrl a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@spinCtrlSetValue obj val@).
+spinCtrlSetValue :: SpinCtrl  a -> Int ->  IO ()
+spinCtrlSetValue _obj val 
+  = withObjectRef "spinCtrlSetValue" _obj $ \cobj__obj -> 
+    wxSpinCtrl_SetValue cobj__obj  (toCInt val)  
+foreign import ccall "wxSpinCtrl_SetValue" wxSpinCtrl_SetValue :: Ptr (TSpinCtrl a) -> CInt -> IO ()
+
+-- | usage: (@spinEventGetPosition obj@).
+spinEventGetPosition :: SpinEvent  a ->  IO Int
+spinEventGetPosition _obj 
+  = withIntResult $
+    withObjectRef "spinEventGetPosition" _obj $ \cobj__obj -> 
+    wxSpinEvent_GetPosition cobj__obj  
+foreign import ccall "wxSpinEvent_GetPosition" wxSpinEvent_GetPosition :: Ptr (TSpinEvent a) -> IO CInt
+
+-- | usage: (@spinEventSetPosition obj pos@).
+spinEventSetPosition :: SpinEvent  a -> Int ->  IO ()
+spinEventSetPosition _obj pos 
+  = withObjectRef "spinEventSetPosition" _obj $ \cobj__obj -> 
+    wxSpinEvent_SetPosition cobj__obj  (toCInt pos)  
+foreign import ccall "wxSpinEvent_SetPosition" wxSpinEvent_SetPosition :: Ptr (TSpinEvent a) -> CInt -> IO ()
+
+-- | usage: (@splashScreenCreate bmp sstl ms parent id lfttopwdthgt stl@).
+splashScreenCreate :: Bitmap  a -> Int -> Int -> Window  d -> Id -> Rect -> Style ->  IO (SplashScreen  ())
+splashScreenCreate _bmp _sstl _ms parent id _lfttopwdthgt _stl 
+  = withObjectResult $
+    withObjectPtr _bmp $ \cobj__bmp -> 
+    withObjectPtr parent $ \cobj_parent -> 
+    wxSplashScreen_Create cobj__bmp  (toCInt _sstl)  (toCInt _ms)  cobj_parent  (toCInt id)  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
+foreign import ccall "wxSplashScreen_Create" wxSplashScreen_Create :: Ptr (TBitmap a) -> CInt -> CInt -> Ptr (TWindow d) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TSplashScreen ()))
+
+-- | usage: (@splashScreenGetSplashStyle obj@).
+splashScreenGetSplashStyle :: SplashScreen  a ->  IO Int
+splashScreenGetSplashStyle _obj 
+  = withIntResult $
+    withObjectRef "splashScreenGetSplashStyle" _obj $ \cobj__obj -> 
+    wxSplashScreen_GetSplashStyle cobj__obj  
+foreign import ccall "wxSplashScreen_GetSplashStyle" wxSplashScreen_GetSplashStyle :: Ptr (TSplashScreen a) -> IO CInt
+
+-- | usage: (@splashScreenGetTimeout obj@).
+splashScreenGetTimeout :: SplashScreen  a ->  IO Int
+splashScreenGetTimeout _obj 
+  = withIntResult $
+    withObjectRef "splashScreenGetTimeout" _obj $ \cobj__obj -> 
+    wxSplashScreen_GetTimeout cobj__obj  
+foreign import ccall "wxSplashScreen_GetTimeout" wxSplashScreen_GetTimeout :: Ptr (TSplashScreen a) -> IO CInt
+
+-- | usage: (@splitterWindowCreate prt id lfttopwdthgt stl@).
+splitterWindowCreate :: Window  a -> Id -> Rect -> Style ->  IO (SplitterWindow  ())
+splitterWindowCreate _prt _id _lfttopwdthgt _stl 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    wxSplitterWindow_Create cobj__prt  (toCInt _id)  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
+foreign import ccall "wxSplitterWindow_Create" wxSplitterWindow_Create :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TSplitterWindow ()))
+
+-- | usage: (@splitterWindowGetBorderSize obj@).
+splitterWindowGetBorderSize :: SplitterWindow  a ->  IO Int
+splitterWindowGetBorderSize _obj 
+  = withIntResult $
+    withObjectRef "splitterWindowGetBorderSize" _obj $ \cobj__obj -> 
+    wxSplitterWindow_GetBorderSize cobj__obj  
+foreign import ccall "wxSplitterWindow_GetBorderSize" wxSplitterWindow_GetBorderSize :: Ptr (TSplitterWindow a) -> IO CInt
+
+-- | usage: (@splitterWindowGetMinimumPaneSize obj@).
+splitterWindowGetMinimumPaneSize :: SplitterWindow  a ->  IO Int
+splitterWindowGetMinimumPaneSize _obj 
+  = withIntResult $
+    withObjectRef "splitterWindowGetMinimumPaneSize" _obj $ \cobj__obj -> 
+    wxSplitterWindow_GetMinimumPaneSize cobj__obj  
+foreign import ccall "wxSplitterWindow_GetMinimumPaneSize" wxSplitterWindow_GetMinimumPaneSize :: Ptr (TSplitterWindow a) -> IO CInt
+
+-- | usage: (@splitterWindowGetSashGravity obj@).
+splitterWindowGetSashGravity :: SplitterWindow  a ->  IO Double
+splitterWindowGetSashGravity _obj 
+  = withObjectRef "splitterWindowGetSashGravity" _obj $ \cobj__obj -> 
+    wxSplitterWindow_GetSashGravity cobj__obj  
+foreign import ccall "wxSplitterWindow_GetSashGravity" wxSplitterWindow_GetSashGravity :: Ptr (TSplitterWindow a) -> IO Double
+
+-- | usage: (@splitterWindowGetSashPosition obj@).
+splitterWindowGetSashPosition :: SplitterWindow  a ->  IO Int
+splitterWindowGetSashPosition _obj 
+  = withIntResult $
+    withObjectRef "splitterWindowGetSashPosition" _obj $ \cobj__obj -> 
+    wxSplitterWindow_GetSashPosition cobj__obj  
+foreign import ccall "wxSplitterWindow_GetSashPosition" wxSplitterWindow_GetSashPosition :: Ptr (TSplitterWindow a) -> IO CInt
+
+-- | usage: (@splitterWindowGetSashSize obj@).
+splitterWindowGetSashSize :: SplitterWindow  a ->  IO Int
+splitterWindowGetSashSize _obj 
+  = withIntResult $
+    withObjectRef "splitterWindowGetSashSize" _obj $ \cobj__obj -> 
+    wxSplitterWindow_GetSashSize cobj__obj  
+foreign import ccall "wxSplitterWindow_GetSashSize" wxSplitterWindow_GetSashSize :: Ptr (TSplitterWindow a) -> IO CInt
+
+-- | usage: (@splitterWindowGetSplitMode obj@).
+splitterWindowGetSplitMode :: SplitterWindow  a ->  IO Int
+splitterWindowGetSplitMode _obj 
+  = withIntResult $
+    withObjectRef "splitterWindowGetSplitMode" _obj $ \cobj__obj -> 
+    wxSplitterWindow_GetSplitMode cobj__obj  
+foreign import ccall "wxSplitterWindow_GetSplitMode" wxSplitterWindow_GetSplitMode :: Ptr (TSplitterWindow a) -> IO CInt
+
+-- | usage: (@splitterWindowGetWindow1 obj@).
+splitterWindowGetWindow1 :: SplitterWindow  a ->  IO (Window  ())
+splitterWindowGetWindow1 _obj 
+  = withObjectResult $
+    withObjectRef "splitterWindowGetWindow1" _obj $ \cobj__obj -> 
+    wxSplitterWindow_GetWindow1 cobj__obj  
+foreign import ccall "wxSplitterWindow_GetWindow1" wxSplitterWindow_GetWindow1 :: Ptr (TSplitterWindow a) -> IO (Ptr (TWindow ()))
+
+-- | usage: (@splitterWindowGetWindow2 obj@).
+splitterWindowGetWindow2 :: SplitterWindow  a ->  IO (Window  ())
+splitterWindowGetWindow2 _obj 
+  = withObjectResult $
+    withObjectRef "splitterWindowGetWindow2" _obj $ \cobj__obj -> 
+    wxSplitterWindow_GetWindow2 cobj__obj  
+foreign import ccall "wxSplitterWindow_GetWindow2" wxSplitterWindow_GetWindow2 :: Ptr (TSplitterWindow a) -> IO (Ptr (TWindow ()))
+
+-- | usage: (@splitterWindowInitialize obj window@).
+splitterWindowInitialize :: SplitterWindow  a -> Window  b ->  IO ()
+splitterWindowInitialize _obj window 
+  = withObjectRef "splitterWindowInitialize" _obj $ \cobj__obj -> 
+    withObjectPtr window $ \cobj_window -> 
+    wxSplitterWindow_Initialize cobj__obj  cobj_window  
+foreign import ccall "wxSplitterWindow_Initialize" wxSplitterWindow_Initialize :: Ptr (TSplitterWindow a) -> Ptr (TWindow b) -> IO ()
+
+-- | usage: (@splitterWindowIsSplit obj@).
+splitterWindowIsSplit :: SplitterWindow  a ->  IO Bool
+splitterWindowIsSplit _obj 
+  = withBoolResult $
+    withObjectRef "splitterWindowIsSplit" _obj $ \cobj__obj -> 
+    wxSplitterWindow_IsSplit cobj__obj  
+foreign import ccall "wxSplitterWindow_IsSplit" wxSplitterWindow_IsSplit :: Ptr (TSplitterWindow a) -> IO CBool
+
+-- | usage: (@splitterWindowReplaceWindow obj winOld winNew@).
+splitterWindowReplaceWindow :: SplitterWindow  a -> Window  b -> Window  c ->  IO Bool
+splitterWindowReplaceWindow _obj winOld winNew 
+  = withBoolResult $
+    withObjectRef "splitterWindowReplaceWindow" _obj $ \cobj__obj -> 
+    withObjectPtr winOld $ \cobj_winOld -> 
+    withObjectPtr winNew $ \cobj_winNew -> 
+    wxSplitterWindow_ReplaceWindow cobj__obj  cobj_winOld  cobj_winNew  
+foreign import ccall "wxSplitterWindow_ReplaceWindow" wxSplitterWindow_ReplaceWindow :: Ptr (TSplitterWindow a) -> Ptr (TWindow b) -> Ptr (TWindow c) -> IO CBool
+
+-- | usage: (@splitterWindowSetBorderSize obj width@).
+splitterWindowSetBorderSize :: SplitterWindow  a -> Int ->  IO ()
+splitterWindowSetBorderSize _obj width 
+  = withObjectRef "splitterWindowSetBorderSize" _obj $ \cobj__obj -> 
+    wxSplitterWindow_SetBorderSize cobj__obj  (toCInt width)  
+foreign import ccall "wxSplitterWindow_SetBorderSize" wxSplitterWindow_SetBorderSize :: Ptr (TSplitterWindow a) -> CInt -> IO ()
+
+-- | usage: (@splitterWindowSetMinimumPaneSize obj min@).
+splitterWindowSetMinimumPaneSize :: SplitterWindow  a -> Int ->  IO ()
+splitterWindowSetMinimumPaneSize _obj min 
+  = withObjectRef "splitterWindowSetMinimumPaneSize" _obj $ \cobj__obj -> 
+    wxSplitterWindow_SetMinimumPaneSize cobj__obj  (toCInt min)  
+foreign import ccall "wxSplitterWindow_SetMinimumPaneSize" wxSplitterWindow_SetMinimumPaneSize :: Ptr (TSplitterWindow a) -> CInt -> IO ()
+
+-- | usage: (@splitterWindowSetSashGravity obj gravity@).
+splitterWindowSetSashGravity :: SplitterWindow  a -> Double ->  IO ()
+splitterWindowSetSashGravity _obj gravity 
+  = withObjectRef "splitterWindowSetSashGravity" _obj $ \cobj__obj -> 
+    wxSplitterWindow_SetSashGravity cobj__obj  gravity  
+foreign import ccall "wxSplitterWindow_SetSashGravity" wxSplitterWindow_SetSashGravity :: Ptr (TSplitterWindow a) -> Double -> IO ()
+
+-- | usage: (@splitterWindowSetSashPosition obj position redraw@).
+splitterWindowSetSashPosition :: SplitterWindow  a -> Int -> Bool ->  IO ()
+splitterWindowSetSashPosition _obj position redraw 
+  = withObjectRef "splitterWindowSetSashPosition" _obj $ \cobj__obj -> 
+    wxSplitterWindow_SetSashPosition cobj__obj  (toCInt position)  (toCBool redraw)  
+foreign import ccall "wxSplitterWindow_SetSashPosition" wxSplitterWindow_SetSashPosition :: Ptr (TSplitterWindow a) -> CInt -> CBool -> IO ()
+
+-- | usage: (@splitterWindowSetSplitMode obj mode@).
+splitterWindowSetSplitMode :: SplitterWindow  a -> Int ->  IO ()
+splitterWindowSetSplitMode _obj mode 
+  = withObjectRef "splitterWindowSetSplitMode" _obj $ \cobj__obj -> 
+    wxSplitterWindow_SetSplitMode cobj__obj  (toCInt mode)  
+foreign import ccall "wxSplitterWindow_SetSplitMode" wxSplitterWindow_SetSplitMode :: Ptr (TSplitterWindow a) -> CInt -> IO ()
+
+-- | usage: (@splitterWindowSplitHorizontally obj window1 window2 sashPosition@).
+splitterWindowSplitHorizontally :: SplitterWindow  a -> Window  b -> Window  c -> Int ->  IO Bool
+splitterWindowSplitHorizontally _obj window1 window2 sashPosition 
+  = withBoolResult $
+    withObjectRef "splitterWindowSplitHorizontally" _obj $ \cobj__obj -> 
+    withObjectPtr window1 $ \cobj_window1 -> 
+    withObjectPtr window2 $ \cobj_window2 -> 
+    wxSplitterWindow_SplitHorizontally cobj__obj  cobj_window1  cobj_window2  (toCInt sashPosition)  
+foreign import ccall "wxSplitterWindow_SplitHorizontally" wxSplitterWindow_SplitHorizontally :: Ptr (TSplitterWindow a) -> Ptr (TWindow b) -> Ptr (TWindow c) -> CInt -> IO CBool
+
+-- | usage: (@splitterWindowSplitVertically obj window1 window2 sashPosition@).
+splitterWindowSplitVertically :: SplitterWindow  a -> Window  b -> Window  c -> Int ->  IO Bool
+splitterWindowSplitVertically _obj window1 window2 sashPosition 
+  = withBoolResult $
+    withObjectRef "splitterWindowSplitVertically" _obj $ \cobj__obj -> 
+    withObjectPtr window1 $ \cobj_window1 -> 
+    withObjectPtr window2 $ \cobj_window2 -> 
+    wxSplitterWindow_SplitVertically cobj__obj  cobj_window1  cobj_window2  (toCInt sashPosition)  
+foreign import ccall "wxSplitterWindow_SplitVertically" wxSplitterWindow_SplitVertically :: Ptr (TSplitterWindow a) -> Ptr (TWindow b) -> Ptr (TWindow c) -> CInt -> IO CBool
+
+-- | usage: (@splitterWindowUnsplit obj toRemove@).
+splitterWindowUnsplit :: SplitterWindow  a -> Window  b ->  IO Bool
+splitterWindowUnsplit _obj toRemove 
+  = withBoolResult $
+    withObjectRef "splitterWindowUnsplit" _obj $ \cobj__obj -> 
+    withObjectPtr toRemove $ \cobj_toRemove -> 
+    wxSplitterWindow_Unsplit cobj__obj  cobj_toRemove  
+foreign import ccall "wxSplitterWindow_Unsplit" wxSplitterWindow_Unsplit :: Ptr (TSplitterWindow a) -> Ptr (TWindow b) -> IO CBool
+
+-- | usage: (@staticBitmapCreate prt id bitmap lfttopwdthgt stl@).
+staticBitmapCreate :: Window  a -> Id -> Bitmap  c -> Rect -> Style ->  IO (StaticBitmap  ())
+staticBitmapCreate _prt _id bitmap _lfttopwdthgt _stl 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    withObjectPtr bitmap $ \cobj_bitmap -> 
+    wxStaticBitmap_Create cobj__prt  (toCInt _id)  cobj_bitmap  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
+foreign import ccall "wxStaticBitmap_Create" wxStaticBitmap_Create :: Ptr (TWindow a) -> CInt -> Ptr (TBitmap c) -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TStaticBitmap ()))
+
+-- | usage: (@staticBitmapDelete obj@).
+staticBitmapDelete :: StaticBitmap  a ->  IO ()
+staticBitmapDelete
+  = objectDelete
+
+
+-- | usage: (@staticBitmapGetBitmap obj@).
+staticBitmapGetBitmap :: StaticBitmap  a ->  IO (Bitmap  ())
+staticBitmapGetBitmap _obj 
+  = withRefBitmap $ \pref -> 
+    withObjectRef "staticBitmapGetBitmap" _obj $ \cobj__obj -> 
+    wxStaticBitmap_GetBitmap cobj__obj   pref
+foreign import ccall "wxStaticBitmap_GetBitmap" wxStaticBitmap_GetBitmap :: Ptr (TStaticBitmap a) -> Ptr (TBitmap ()) -> IO ()
+
+-- | usage: (@staticBitmapGetIcon obj@).
+staticBitmapGetIcon :: StaticBitmap  a ->  IO (Icon  ())
+staticBitmapGetIcon _obj 
+  = withRefIcon $ \pref -> 
+    withObjectRef "staticBitmapGetIcon" _obj $ \cobj__obj -> 
+    wxStaticBitmap_GetIcon cobj__obj   pref
+foreign import ccall "wxStaticBitmap_GetIcon" wxStaticBitmap_GetIcon :: Ptr (TStaticBitmap a) -> Ptr (TIcon ()) -> IO ()
+
+-- | usage: (@staticBitmapSetBitmap obj bitmap@).
+staticBitmapSetBitmap :: StaticBitmap  a -> Bitmap  b ->  IO ()
+staticBitmapSetBitmap _obj bitmap 
+  = withObjectRef "staticBitmapSetBitmap" _obj $ \cobj__obj -> 
+    withObjectPtr bitmap $ \cobj_bitmap -> 
+    wxStaticBitmap_SetBitmap cobj__obj  cobj_bitmap  
+foreign import ccall "wxStaticBitmap_SetBitmap" wxStaticBitmap_SetBitmap :: Ptr (TStaticBitmap a) -> Ptr (TBitmap b) -> IO ()
+
+-- | usage: (@staticBitmapSetIcon obj icon@).
+staticBitmapSetIcon :: StaticBitmap  a -> Icon  b ->  IO ()
+staticBitmapSetIcon _obj icon 
+  = withObjectRef "staticBitmapSetIcon" _obj $ \cobj__obj -> 
+    withObjectPtr icon $ \cobj_icon -> 
+    wxStaticBitmap_SetIcon cobj__obj  cobj_icon  
+foreign import ccall "wxStaticBitmap_SetIcon" wxStaticBitmap_SetIcon :: Ptr (TStaticBitmap a) -> Ptr (TIcon b) -> IO ()
+
+-- | usage: (@staticBoxCreate prt id txt lfttopwdthgt stl@).
+staticBoxCreate :: Window  a -> Id -> String -> Rect -> Style ->  IO (StaticBox  ())
+staticBoxCreate _prt _id _txt _lfttopwdthgt _stl 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    withStringPtr _txt $ \cobj__txt -> 
+    wxStaticBox_Create cobj__prt  (toCInt _id)  cobj__txt  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
+foreign import ccall "wxStaticBox_Create" wxStaticBox_Create :: Ptr (TWindow a) -> CInt -> Ptr (TWxString c) -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TStaticBox ()))
+
+-- | usage: (@staticBoxSizerCalcMin obj@).
+staticBoxSizerCalcMin :: StaticBoxSizer  a ->  IO (Size)
+staticBoxSizerCalcMin _obj 
+  = withWxSizeResult $
+    withObjectRef "staticBoxSizerCalcMin" _obj $ \cobj__obj -> 
+    wxStaticBoxSizer_CalcMin cobj__obj  
+foreign import ccall "wxStaticBoxSizer_CalcMin" wxStaticBoxSizer_CalcMin :: Ptr (TStaticBoxSizer a) -> IO (Ptr (TWxSize ()))
+
+-- | usage: (@staticBoxSizerCreate box orient@).
+staticBoxSizerCreate :: StaticBox  a -> Int ->  IO (StaticBoxSizer  ())
+staticBoxSizerCreate box orient 
+  = withObjectResult $
+    withObjectPtr box $ \cobj_box -> 
+    wxStaticBoxSizer_Create cobj_box  (toCInt orient)  
+foreign import ccall "wxStaticBoxSizer_Create" wxStaticBoxSizer_Create :: Ptr (TStaticBox a) -> CInt -> IO (Ptr (TStaticBoxSizer ()))
+
+-- | usage: (@staticBoxSizerGetStaticBox obj@).
+staticBoxSizerGetStaticBox :: StaticBoxSizer  a ->  IO (StaticBox  ())
+staticBoxSizerGetStaticBox _obj 
+  = withObjectResult $
+    withObjectRef "staticBoxSizerGetStaticBox" _obj $ \cobj__obj -> 
+    wxStaticBoxSizer_GetStaticBox cobj__obj  
+foreign import ccall "wxStaticBoxSizer_GetStaticBox" wxStaticBoxSizer_GetStaticBox :: Ptr (TStaticBoxSizer a) -> IO (Ptr (TStaticBox ()))
+
+-- | usage: (@staticBoxSizerRecalcSizes obj@).
+staticBoxSizerRecalcSizes :: StaticBoxSizer  a ->  IO ()
+staticBoxSizerRecalcSizes _obj 
+  = withObjectRef "staticBoxSizerRecalcSizes" _obj $ \cobj__obj -> 
+    wxStaticBoxSizer_RecalcSizes cobj__obj  
+foreign import ccall "wxStaticBoxSizer_RecalcSizes" wxStaticBoxSizer_RecalcSizes :: Ptr (TStaticBoxSizer a) -> IO ()
+
+-- | usage: (@staticLineCreate prt id lfttopwdthgt stl@).
+staticLineCreate :: Window  a -> Id -> Rect -> Style ->  IO (StaticLine  ())
+staticLineCreate _prt _id _lfttopwdthgt _stl 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    wxStaticLine_Create cobj__prt  (toCInt _id)  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
+foreign import ccall "wxStaticLine_Create" wxStaticLine_Create :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TStaticLine ()))
+
+-- | usage: (@staticLineGetDefaultSize obj@).
+staticLineGetDefaultSize :: StaticLine  a ->  IO Int
+staticLineGetDefaultSize _obj 
+  = withIntResult $
+    withObjectRef "staticLineGetDefaultSize" _obj $ \cobj__obj -> 
+    wxStaticLine_GetDefaultSize cobj__obj  
+foreign import ccall "wxStaticLine_GetDefaultSize" wxStaticLine_GetDefaultSize :: Ptr (TStaticLine a) -> IO CInt
+
+-- | usage: (@staticLineIsVertical obj@).
+staticLineIsVertical :: StaticLine  a ->  IO Bool
+staticLineIsVertical _obj 
+  = withBoolResult $
+    withObjectRef "staticLineIsVertical" _obj $ \cobj__obj -> 
+    wxStaticLine_IsVertical cobj__obj  
+foreign import ccall "wxStaticLine_IsVertical" wxStaticLine_IsVertical :: Ptr (TStaticLine a) -> IO CBool
+
+-- | usage: (@staticTextCreate prt id txt lfttopwdthgt stl@).
+staticTextCreate :: Window  a -> Id -> String -> Rect -> Style ->  IO (StaticText  ())
+staticTextCreate _prt _id _txt _lfttopwdthgt _stl 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    withStringPtr _txt $ \cobj__txt -> 
+    wxStaticText_Create cobj__prt  (toCInt _id)  cobj__txt  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
+foreign import ccall "wxStaticText_Create" wxStaticText_Create :: Ptr (TWindow a) -> CInt -> Ptr (TWxString c) -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TStaticText ()))
+
+-- | usage: (@statusBarCreate prt id lfttopwdthgt stl@).
+statusBarCreate :: Window  a -> Id -> Rect -> Style ->  IO (StatusBar  ())
+statusBarCreate _prt _id _lfttopwdthgt _stl 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    wxStatusBar_Create cobj__prt  (toCInt _id)  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
+foreign import ccall "wxStatusBar_Create" wxStatusBar_Create :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TStatusBar ()))
+
+-- | usage: (@statusBarGetBorderX obj@).
+statusBarGetBorderX :: StatusBar  a ->  IO Int
+statusBarGetBorderX _obj 
+  = withIntResult $
+    withObjectRef "statusBarGetBorderX" _obj $ \cobj__obj -> 
+    wxStatusBar_GetBorderX cobj__obj  
+foreign import ccall "wxStatusBar_GetBorderX" wxStatusBar_GetBorderX :: Ptr (TStatusBar a) -> IO CInt
+
+-- | usage: (@statusBarGetBorderY obj@).
+statusBarGetBorderY :: StatusBar  a ->  IO Int
+statusBarGetBorderY _obj 
+  = withIntResult $
+    withObjectRef "statusBarGetBorderY" _obj $ \cobj__obj -> 
+    wxStatusBar_GetBorderY cobj__obj  
+foreign import ccall "wxStatusBar_GetBorderY" wxStatusBar_GetBorderY :: Ptr (TStatusBar a) -> IO CInt
+
+-- | usage: (@statusBarGetFieldsCount obj@).
+statusBarGetFieldsCount :: StatusBar  a ->  IO Int
+statusBarGetFieldsCount _obj 
+  = withIntResult $
+    withObjectRef "statusBarGetFieldsCount" _obj $ \cobj__obj -> 
+    wxStatusBar_GetFieldsCount cobj__obj  
+foreign import ccall "wxStatusBar_GetFieldsCount" wxStatusBar_GetFieldsCount :: Ptr (TStatusBar a) -> IO CInt
+
+-- | usage: (@statusBarGetStatusText obj number@).
+statusBarGetStatusText :: StatusBar  a -> Int ->  IO (String)
+statusBarGetStatusText _obj number 
+  = withManagedStringResult $
+    withObjectRef "statusBarGetStatusText" _obj $ \cobj__obj -> 
+    wxStatusBar_GetStatusText cobj__obj  (toCInt number)  
+foreign import ccall "wxStatusBar_GetStatusText" wxStatusBar_GetStatusText :: Ptr (TStatusBar a) -> CInt -> IO (Ptr (TWxString ()))
+
+-- | usage: (@statusBarSetFieldsCount obj number widths@).
+statusBarSetFieldsCount :: StatusBar  a -> Int -> Ptr CInt ->  IO ()
+statusBarSetFieldsCount _obj number widths 
+  = withObjectRef "statusBarSetFieldsCount" _obj $ \cobj__obj -> 
+    wxStatusBar_SetFieldsCount cobj__obj  (toCInt number)  widths  
+foreign import ccall "wxStatusBar_SetFieldsCount" wxStatusBar_SetFieldsCount :: Ptr (TStatusBar a) -> CInt -> Ptr CInt -> IO ()
+
+-- | usage: (@statusBarSetMinHeight obj height@).
+statusBarSetMinHeight :: StatusBar  a -> Int ->  IO ()
+statusBarSetMinHeight _obj height 
+  = withObjectRef "statusBarSetMinHeight" _obj $ \cobj__obj -> 
+    wxStatusBar_SetMinHeight cobj__obj  (toCInt height)  
+foreign import ccall "wxStatusBar_SetMinHeight" wxStatusBar_SetMinHeight :: Ptr (TStatusBar a) -> CInt -> IO ()
+
+-- | usage: (@statusBarSetStatusText obj text number@).
+statusBarSetStatusText :: StatusBar  a -> String -> Int ->  IO ()
+statusBarSetStatusText _obj text number 
+  = withObjectRef "statusBarSetStatusText" _obj $ \cobj__obj -> 
+    withStringPtr text $ \cobj_text -> 
+    wxStatusBar_SetStatusText cobj__obj  cobj_text  (toCInt number)  
+foreign import ccall "wxStatusBar_SetStatusText" wxStatusBar_SetStatusText :: Ptr (TStatusBar a) -> Ptr (TWxString b) -> CInt -> IO ()
+
+-- | usage: (@statusBarSetStatusWidths obj n widths@).
+statusBarSetStatusWidths :: StatusBar  a -> Int -> Ptr CInt ->  IO ()
+statusBarSetStatusWidths _obj n widths 
+  = withObjectRef "statusBarSetStatusWidths" _obj $ \cobj__obj -> 
+    wxStatusBar_SetStatusWidths cobj__obj  (toCInt n)  widths  
+foreign import ccall "wxStatusBar_SetStatusWidths" wxStatusBar_SetStatusWidths :: Ptr (TStatusBar a) -> CInt -> Ptr CInt -> IO ()
+
+-- | usage: (@stopWatchCreate@).
+stopWatchCreate ::  IO (StopWatch  ())
+stopWatchCreate 
+  = withObjectResult $
+    wxStopWatch_Create 
+foreign import ccall "wxStopWatch_Create" wxStopWatch_Create :: IO (Ptr (TStopWatch ()))
+
+-- | usage: (@stopWatchDelete obj@).
+stopWatchDelete :: StopWatch  a ->  IO ()
+stopWatchDelete _obj 
+  = withObjectRef "stopWatchDelete" _obj $ \cobj__obj -> 
+    wxStopWatch_Delete cobj__obj  
+foreign import ccall "wxStopWatch_Delete" wxStopWatch_Delete :: Ptr (TStopWatch a) -> IO ()
+
+-- | usage: (@stopWatchPause obj@).
+stopWatchPause :: StopWatch  a ->  IO ()
+stopWatchPause _obj 
+  = withObjectRef "stopWatchPause" _obj $ \cobj__obj -> 
+    wxStopWatch_Pause cobj__obj  
+foreign import ccall "wxStopWatch_Pause" wxStopWatch_Pause :: Ptr (TStopWatch a) -> IO ()
+
+-- | usage: (@stopWatchResume obj@).
+stopWatchResume :: StopWatch  a ->  IO ()
+stopWatchResume _obj 
+  = withObjectRef "stopWatchResume" _obj $ \cobj__obj -> 
+    wxStopWatch_Resume cobj__obj  
+foreign import ccall "wxStopWatch_Resume" wxStopWatch_Resume :: Ptr (TStopWatch a) -> IO ()
+
+-- | usage: (@stopWatchStart obj msec@).
+stopWatchStart :: StopWatch  a -> Int ->  IO ()
+stopWatchStart _obj msec 
+  = withObjectRef "stopWatchStart" _obj $ \cobj__obj -> 
+    wxStopWatch_Start cobj__obj  (toCInt msec)  
+foreign import ccall "wxStopWatch_Start" wxStopWatch_Start :: Ptr (TStopWatch a) -> CInt -> IO ()
+
+-- | usage: (@stopWatchTime obj@).
+stopWatchTime :: StopWatch  a ->  IO Int
+stopWatchTime _obj 
+  = withIntResult $
+    withObjectRef "stopWatchTime" _obj $ \cobj__obj -> 
+    wxStopWatch_Time cobj__obj  
+foreign import ccall "wxStopWatch_Time" wxStopWatch_Time :: Ptr (TStopWatch a) -> IO CInt
+
+-- | usage: (@streamBaseDelete obj@).
+streamBaseDelete :: StreamBase  a ->  IO ()
+streamBaseDelete obj 
+  = withObjectRef "streamBaseDelete" obj $ \cobj_obj -> 
+    wxStreamBase_Delete cobj_obj  
+foreign import ccall "wxStreamBase_Delete" wxStreamBase_Delete :: Ptr (TStreamBase a) -> IO ()
+
+-- | usage: (@streamBaseGetLastError obj@).
+streamBaseGetLastError :: StreamBase  a ->  IO Int
+streamBaseGetLastError _obj 
+  = withIntResult $
+    withObjectRef "streamBaseGetLastError" _obj $ \cobj__obj -> 
+    wxStreamBase_GetLastError cobj__obj  
+foreign import ccall "wxStreamBase_GetLastError" wxStreamBase_GetLastError :: Ptr (TStreamBase a) -> IO CInt
+
+-- | usage: (@streamBaseGetSize obj@).
+streamBaseGetSize :: StreamBase  a ->  IO Int
+streamBaseGetSize _obj 
+  = withIntResult $
+    withObjectRef "streamBaseGetSize" _obj $ \cobj__obj -> 
+    wxStreamBase_GetSize cobj__obj  
+foreign import ccall "wxStreamBase_GetSize" wxStreamBase_GetSize :: Ptr (TStreamBase a) -> IO CInt
+
+-- | usage: (@streamBaseIsOk obj@).
+streamBaseIsOk :: StreamBase  a ->  IO Bool
+streamBaseIsOk _obj 
+  = withBoolResult $
+    withObjectRef "streamBaseIsOk" _obj $ \cobj__obj -> 
+    wxStreamBase_IsOk cobj__obj  
+foreign import ccall "wxStreamBase_IsOk" wxStreamBase_IsOk :: Ptr (TStreamBase a) -> IO CBool
+
+-- | usage: (@stringPropertyCreate label name value@).
+stringPropertyCreate :: String -> String -> String ->  IO (StringProperty  ())
+stringPropertyCreate label name value 
+  = withObjectResult $
+    withStringPtr label $ \cobj_label -> 
+    withStringPtr name $ \cobj_name -> 
+    withStringPtr value $ \cobj_value -> 
+    wxStringProperty_Create cobj_label  cobj_name  cobj_value  
+foreign import ccall "wxStringProperty_Create" wxStringProperty_Create :: Ptr (TWxString a) -> Ptr (TWxString b) -> Ptr (TWxString c) -> IO (Ptr (TStringProperty ()))
+
+-- | usage: (@styledTextCtrlAddRefDocument obj docPointer@).
+styledTextCtrlAddRefDocument :: StyledTextCtrl  a -> STCDoc  b ->  IO ()
+styledTextCtrlAddRefDocument _obj docPointer 
+  = withObjectRef "styledTextCtrlAddRefDocument" _obj $ \cobj__obj -> 
+    withObjectPtr docPointer $ \cobj_docPointer -> 
+    wxStyledTextCtrl_AddRefDocument cobj__obj  cobj_docPointer  
+foreign import ccall "wxStyledTextCtrl_AddRefDocument" wxStyledTextCtrl_AddRefDocument :: Ptr (TStyledTextCtrl a) -> Ptr (TSTCDoc b) -> IO ()
+
+-- | usage: (@styledTextCtrlAddStyledText obj wxdata@).
+styledTextCtrlAddStyledText :: StyledTextCtrl  a -> MemoryBuffer  b ->  IO ()
+styledTextCtrlAddStyledText _obj wxdata 
+  = withObjectRef "styledTextCtrlAddStyledText" _obj $ \cobj__obj -> 
+    withObjectPtr wxdata $ \cobj_wxdata -> 
+    wxStyledTextCtrl_AddStyledText cobj__obj  cobj_wxdata  
+foreign import ccall "wxStyledTextCtrl_AddStyledText" wxStyledTextCtrl_AddStyledText :: Ptr (TStyledTextCtrl a) -> Ptr (TMemoryBuffer b) -> IO ()
+
+-- | usage: (@styledTextCtrlAddText obj text@).
+styledTextCtrlAddText :: StyledTextCtrl  a -> String ->  IO ()
+styledTextCtrlAddText _obj text 
+  = withObjectRef "styledTextCtrlAddText" _obj $ \cobj__obj -> 
+    withStringPtr text $ \cobj_text -> 
+    wxStyledTextCtrl_AddText cobj__obj  cobj_text  
+foreign import ccall "wxStyledTextCtrl_AddText" wxStyledTextCtrl_AddText :: Ptr (TStyledTextCtrl a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@styledTextCtrlAppendText obj text@).
+styledTextCtrlAppendText :: StyledTextCtrl  a -> String ->  IO ()
+styledTextCtrlAppendText _obj text 
+  = withObjectRef "styledTextCtrlAppendText" _obj $ \cobj__obj -> 
+    withStringPtr text $ \cobj_text -> 
+    wxStyledTextCtrl_AppendText cobj__obj  cobj_text  
+foreign import ccall "wxStyledTextCtrl_AppendText" wxStyledTextCtrl_AppendText :: Ptr (TStyledTextCtrl a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@styledTextCtrlAutoCompActive obj@).
+styledTextCtrlAutoCompActive :: StyledTextCtrl  a ->  IO Bool
+styledTextCtrlAutoCompActive _obj 
+  = withBoolResult $
+    withObjectRef "styledTextCtrlAutoCompActive" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_AutoCompActive cobj__obj  
+foreign import ccall "wxStyledTextCtrl_AutoCompActive" wxStyledTextCtrl_AutoCompActive :: Ptr (TStyledTextCtrl a) -> IO CBool
+
+-- | usage: (@styledTextCtrlAutoCompCancel obj@).
+styledTextCtrlAutoCompCancel :: StyledTextCtrl  a ->  IO ()
+styledTextCtrlAutoCompCancel _obj 
+  = withObjectRef "styledTextCtrlAutoCompCancel" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_AutoCompCancel cobj__obj  
+foreign import ccall "wxStyledTextCtrl_AutoCompCancel" wxStyledTextCtrl_AutoCompCancel :: Ptr (TStyledTextCtrl a) -> IO ()
+
+-- | usage: (@styledTextCtrlAutoCompComplete obj@).
+styledTextCtrlAutoCompComplete :: StyledTextCtrl  a ->  IO ()
+styledTextCtrlAutoCompComplete _obj 
+  = withObjectRef "styledTextCtrlAutoCompComplete" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_AutoCompComplete cobj__obj  
+foreign import ccall "wxStyledTextCtrl_AutoCompComplete" wxStyledTextCtrl_AutoCompComplete :: Ptr (TStyledTextCtrl a) -> IO ()
+
+-- | usage: (@styledTextCtrlAutoCompGetAutoHide obj@).
+styledTextCtrlAutoCompGetAutoHide :: StyledTextCtrl  a ->  IO Bool
+styledTextCtrlAutoCompGetAutoHide _obj 
+  = withBoolResult $
+    withObjectRef "styledTextCtrlAutoCompGetAutoHide" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_AutoCompGetAutoHide cobj__obj  
+foreign import ccall "wxStyledTextCtrl_AutoCompGetAutoHide" wxStyledTextCtrl_AutoCompGetAutoHide :: Ptr (TStyledTextCtrl a) -> IO CBool
+
+-- | usage: (@styledTextCtrlAutoCompGetCancelAtStart obj@).
+styledTextCtrlAutoCompGetCancelAtStart :: StyledTextCtrl  a ->  IO Bool
+styledTextCtrlAutoCompGetCancelAtStart _obj 
+  = withBoolResult $
+    withObjectRef "styledTextCtrlAutoCompGetCancelAtStart" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_AutoCompGetCancelAtStart cobj__obj  
+foreign import ccall "wxStyledTextCtrl_AutoCompGetCancelAtStart" wxStyledTextCtrl_AutoCompGetCancelAtStart :: Ptr (TStyledTextCtrl a) -> IO CBool
+
+-- | usage: (@styledTextCtrlAutoCompGetChooseSingle obj@).
+styledTextCtrlAutoCompGetChooseSingle :: StyledTextCtrl  a ->  IO Bool
+styledTextCtrlAutoCompGetChooseSingle _obj 
+  = withBoolResult $
+    withObjectRef "styledTextCtrlAutoCompGetChooseSingle" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_AutoCompGetChooseSingle cobj__obj  
+foreign import ccall "wxStyledTextCtrl_AutoCompGetChooseSingle" wxStyledTextCtrl_AutoCompGetChooseSingle :: Ptr (TStyledTextCtrl a) -> IO CBool
+
+-- | usage: (@styledTextCtrlAutoCompGetDropRestOfWord obj@).
+styledTextCtrlAutoCompGetDropRestOfWord :: StyledTextCtrl  a ->  IO Bool
+styledTextCtrlAutoCompGetDropRestOfWord _obj 
+  = withBoolResult $
+    withObjectRef "styledTextCtrlAutoCompGetDropRestOfWord" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_AutoCompGetDropRestOfWord cobj__obj  
+foreign import ccall "wxStyledTextCtrl_AutoCompGetDropRestOfWord" wxStyledTextCtrl_AutoCompGetDropRestOfWord :: Ptr (TStyledTextCtrl a) -> IO CBool
+
+-- | usage: (@styledTextCtrlAutoCompGetIgnoreCase obj@).
+styledTextCtrlAutoCompGetIgnoreCase :: StyledTextCtrl  a ->  IO Bool
+styledTextCtrlAutoCompGetIgnoreCase _obj 
+  = withBoolResult $
+    withObjectRef "styledTextCtrlAutoCompGetIgnoreCase" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_AutoCompGetIgnoreCase cobj__obj  
+foreign import ccall "wxStyledTextCtrl_AutoCompGetIgnoreCase" wxStyledTextCtrl_AutoCompGetIgnoreCase :: Ptr (TStyledTextCtrl a) -> IO CBool
+
+-- | usage: (@styledTextCtrlAutoCompGetSeparator obj@).
+styledTextCtrlAutoCompGetSeparator :: StyledTextCtrl  a ->  IO Int
+styledTextCtrlAutoCompGetSeparator _obj 
+  = withIntResult $
+    withObjectRef "styledTextCtrlAutoCompGetSeparator" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_AutoCompGetSeparator cobj__obj  
+foreign import ccall "wxStyledTextCtrl_AutoCompGetSeparator" wxStyledTextCtrl_AutoCompGetSeparator :: Ptr (TStyledTextCtrl a) -> IO CInt
+
+-- | usage: (@styledTextCtrlAutoCompGetTypeSeparator obj@).
+styledTextCtrlAutoCompGetTypeSeparator :: StyledTextCtrl  a ->  IO Int
+styledTextCtrlAutoCompGetTypeSeparator _obj 
+  = withIntResult $
+    withObjectRef "styledTextCtrlAutoCompGetTypeSeparator" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_AutoCompGetTypeSeparator cobj__obj  
+foreign import ccall "wxStyledTextCtrl_AutoCompGetTypeSeparator" wxStyledTextCtrl_AutoCompGetTypeSeparator :: Ptr (TStyledTextCtrl a) -> IO CInt
+
+-- | usage: (@styledTextCtrlAutoCompPosStart obj@).
+styledTextCtrlAutoCompPosStart :: StyledTextCtrl  a ->  IO Int
+styledTextCtrlAutoCompPosStart _obj 
+  = withIntResult $
+    withObjectRef "styledTextCtrlAutoCompPosStart" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_AutoCompPosStart cobj__obj  
+foreign import ccall "wxStyledTextCtrl_AutoCompPosStart" wxStyledTextCtrl_AutoCompPosStart :: Ptr (TStyledTextCtrl a) -> IO CInt
+
+-- | usage: (@styledTextCtrlAutoCompSelect obj text@).
+styledTextCtrlAutoCompSelect :: StyledTextCtrl  a -> String ->  IO ()
+styledTextCtrlAutoCompSelect _obj text 
+  = withObjectRef "styledTextCtrlAutoCompSelect" _obj $ \cobj__obj -> 
+    withStringPtr text $ \cobj_text -> 
+    wxStyledTextCtrl_AutoCompSelect cobj__obj  cobj_text  
+foreign import ccall "wxStyledTextCtrl_AutoCompSelect" wxStyledTextCtrl_AutoCompSelect :: Ptr (TStyledTextCtrl a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@styledTextCtrlAutoCompSetAutoHide obj autoHide@).
+styledTextCtrlAutoCompSetAutoHide :: StyledTextCtrl  a -> Bool ->  IO ()
+styledTextCtrlAutoCompSetAutoHide _obj autoHide 
+  = withObjectRef "styledTextCtrlAutoCompSetAutoHide" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_AutoCompSetAutoHide cobj__obj  (toCBool autoHide)  
+foreign import ccall "wxStyledTextCtrl_AutoCompSetAutoHide" wxStyledTextCtrl_AutoCompSetAutoHide :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()
+
+-- | usage: (@styledTextCtrlAutoCompSetCancelAtStart obj cancel@).
+styledTextCtrlAutoCompSetCancelAtStart :: StyledTextCtrl  a -> Bool ->  IO ()
+styledTextCtrlAutoCompSetCancelAtStart _obj cancel 
+  = withObjectRef "styledTextCtrlAutoCompSetCancelAtStart" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_AutoCompSetCancelAtStart cobj__obj  (toCBool cancel)  
+foreign import ccall "wxStyledTextCtrl_AutoCompSetCancelAtStart" wxStyledTextCtrl_AutoCompSetCancelAtStart :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()
+
+-- | usage: (@styledTextCtrlAutoCompSetChooseSingle obj chooseSingle@).
+styledTextCtrlAutoCompSetChooseSingle :: StyledTextCtrl  a -> Bool ->  IO ()
+styledTextCtrlAutoCompSetChooseSingle _obj chooseSingle 
+  = withObjectRef "styledTextCtrlAutoCompSetChooseSingle" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_AutoCompSetChooseSingle cobj__obj  (toCBool chooseSingle)  
+foreign import ccall "wxStyledTextCtrl_AutoCompSetChooseSingle" wxStyledTextCtrl_AutoCompSetChooseSingle :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()
+
+-- | usage: (@styledTextCtrlAutoCompSetDropRestOfWord obj dropRestOfWord@).
+styledTextCtrlAutoCompSetDropRestOfWord :: StyledTextCtrl  a -> Bool ->  IO ()
+styledTextCtrlAutoCompSetDropRestOfWord _obj dropRestOfWord 
+  = withObjectRef "styledTextCtrlAutoCompSetDropRestOfWord" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_AutoCompSetDropRestOfWord cobj__obj  (toCBool dropRestOfWord)  
+foreign import ccall "wxStyledTextCtrl_AutoCompSetDropRestOfWord" wxStyledTextCtrl_AutoCompSetDropRestOfWord :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()
+
+-- | usage: (@styledTextCtrlAutoCompSetFillUps obj characterSet@).
+styledTextCtrlAutoCompSetFillUps :: StyledTextCtrl  a -> String ->  IO ()
+styledTextCtrlAutoCompSetFillUps _obj characterSet 
+  = withObjectRef "styledTextCtrlAutoCompSetFillUps" _obj $ \cobj__obj -> 
+    withStringPtr characterSet $ \cobj_characterSet -> 
+    wxStyledTextCtrl_AutoCompSetFillUps cobj__obj  cobj_characterSet  
+foreign import ccall "wxStyledTextCtrl_AutoCompSetFillUps" wxStyledTextCtrl_AutoCompSetFillUps :: Ptr (TStyledTextCtrl a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@styledTextCtrlAutoCompSetIgnoreCase obj ignoreCase@).
+styledTextCtrlAutoCompSetIgnoreCase :: StyledTextCtrl  a -> Bool ->  IO ()
+styledTextCtrlAutoCompSetIgnoreCase _obj ignoreCase 
+  = withObjectRef "styledTextCtrlAutoCompSetIgnoreCase" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_AutoCompSetIgnoreCase cobj__obj  (toCBool ignoreCase)  
+foreign import ccall "wxStyledTextCtrl_AutoCompSetIgnoreCase" wxStyledTextCtrl_AutoCompSetIgnoreCase :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()
+
+-- | usage: (@styledTextCtrlAutoCompSetSeparator obj separatorCharacter@).
+styledTextCtrlAutoCompSetSeparator :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlAutoCompSetSeparator _obj separatorCharacter 
+  = withObjectRef "styledTextCtrlAutoCompSetSeparator" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_AutoCompSetSeparator cobj__obj  (toCInt separatorCharacter)  
+foreign import ccall "wxStyledTextCtrl_AutoCompSetSeparator" wxStyledTextCtrl_AutoCompSetSeparator :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlAutoCompSetTypeSeparator obj separatorCharacter@).
+styledTextCtrlAutoCompSetTypeSeparator :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlAutoCompSetTypeSeparator _obj separatorCharacter 
+  = withObjectRef "styledTextCtrlAutoCompSetTypeSeparator" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_AutoCompSetTypeSeparator cobj__obj  (toCInt separatorCharacter)  
+foreign import ccall "wxStyledTextCtrl_AutoCompSetTypeSeparator" wxStyledTextCtrl_AutoCompSetTypeSeparator :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlAutoCompShow obj lenEntered itemList@).
+styledTextCtrlAutoCompShow :: StyledTextCtrl  a -> Int -> String ->  IO ()
+styledTextCtrlAutoCompShow _obj lenEntered itemList 
+  = withObjectRef "styledTextCtrlAutoCompShow" _obj $ \cobj__obj -> 
+    withStringPtr itemList $ \cobj_itemList -> 
+    wxStyledTextCtrl_AutoCompShow cobj__obj  (toCInt lenEntered)  cobj_itemList  
+foreign import ccall "wxStyledTextCtrl_AutoCompShow" wxStyledTextCtrl_AutoCompShow :: Ptr (TStyledTextCtrl a) -> CInt -> Ptr (TWxString c) -> IO ()
+
+-- | usage: (@styledTextCtrlAutoCompStops obj characterSet@).
+styledTextCtrlAutoCompStops :: StyledTextCtrl  a -> String ->  IO ()
+styledTextCtrlAutoCompStops _obj characterSet 
+  = withObjectRef "styledTextCtrlAutoCompStops" _obj $ \cobj__obj -> 
+    withStringPtr characterSet $ \cobj_characterSet -> 
+    wxStyledTextCtrl_AutoCompStops cobj__obj  cobj_characterSet  
+foreign import ccall "wxStyledTextCtrl_AutoCompStops" wxStyledTextCtrl_AutoCompStops :: Ptr (TStyledTextCtrl a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@styledTextCtrlBeginUndoAction obj@).
+styledTextCtrlBeginUndoAction :: StyledTextCtrl  a ->  IO ()
+styledTextCtrlBeginUndoAction _obj 
+  = withObjectRef "styledTextCtrlBeginUndoAction" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_BeginUndoAction cobj__obj  
+foreign import ccall "wxStyledTextCtrl_BeginUndoAction" wxStyledTextCtrl_BeginUndoAction :: Ptr (TStyledTextCtrl a) -> IO ()
+
+-- | usage: (@styledTextCtrlBraceBadLight obj pos@).
+styledTextCtrlBraceBadLight :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlBraceBadLight _obj pos 
+  = withObjectRef "styledTextCtrlBraceBadLight" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_BraceBadLight cobj__obj  (toCInt pos)  
+foreign import ccall "wxStyledTextCtrl_BraceBadLight" wxStyledTextCtrl_BraceBadLight :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlBraceHighlight obj pos1 pos2@).
+styledTextCtrlBraceHighlight :: StyledTextCtrl  a -> Int -> Int ->  IO ()
+styledTextCtrlBraceHighlight _obj pos1 pos2 
+  = withObjectRef "styledTextCtrlBraceHighlight" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_BraceHighlight cobj__obj  (toCInt pos1)  (toCInt pos2)  
+foreign import ccall "wxStyledTextCtrl_BraceHighlight" wxStyledTextCtrl_BraceHighlight :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlBraceMatch obj pos@).
+styledTextCtrlBraceMatch :: StyledTextCtrl  a -> Int ->  IO Int
+styledTextCtrlBraceMatch _obj pos 
+  = withIntResult $
+    withObjectRef "styledTextCtrlBraceMatch" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_BraceMatch cobj__obj  (toCInt pos)  
+foreign import ccall "wxStyledTextCtrl_BraceMatch" wxStyledTextCtrl_BraceMatch :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt
+
+-- | usage: (@styledTextCtrlCallTipActive obj@).
+styledTextCtrlCallTipActive :: StyledTextCtrl  a ->  IO Bool
+styledTextCtrlCallTipActive _obj 
+  = withBoolResult $
+    withObjectRef "styledTextCtrlCallTipActive" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_CallTipActive cobj__obj  
+foreign import ccall "wxStyledTextCtrl_CallTipActive" wxStyledTextCtrl_CallTipActive :: Ptr (TStyledTextCtrl a) -> IO CBool
+
+-- | usage: (@styledTextCtrlCallTipCancel obj@).
+styledTextCtrlCallTipCancel :: StyledTextCtrl  a ->  IO ()
+styledTextCtrlCallTipCancel _obj 
+  = withObjectRef "styledTextCtrlCallTipCancel" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_CallTipCancel cobj__obj  
+foreign import ccall "wxStyledTextCtrl_CallTipCancel" wxStyledTextCtrl_CallTipCancel :: Ptr (TStyledTextCtrl a) -> IO ()
+
+-- | usage: (@styledTextCtrlCallTipPosAtStart obj@).
+styledTextCtrlCallTipPosAtStart :: StyledTextCtrl  a ->  IO Int
+styledTextCtrlCallTipPosAtStart _obj 
+  = withIntResult $
+    withObjectRef "styledTextCtrlCallTipPosAtStart" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_CallTipPosAtStart cobj__obj  
+foreign import ccall "wxStyledTextCtrl_CallTipPosAtStart" wxStyledTextCtrl_CallTipPosAtStart :: Ptr (TStyledTextCtrl a) -> IO CInt
+
+-- | usage: (@styledTextCtrlCallTipSetBackground obj backrbackgbackb@).
+styledTextCtrlCallTipSetBackground :: StyledTextCtrl  a -> Color ->  IO ()
+styledTextCtrlCallTipSetBackground _obj backrbackgbackb 
+  = withObjectRef "styledTextCtrlCallTipSetBackground" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_CallTipSetBackground cobj__obj  (colorRed backrbackgbackb) (colorGreen backrbackgbackb) (colorBlue backrbackgbackb)  
+foreign import ccall "wxStyledTextCtrl_CallTipSetBackground" wxStyledTextCtrl_CallTipSetBackground :: Ptr (TStyledTextCtrl a) -> Word8 -> Word8 -> Word8 -> IO ()
+
+-- | usage: (@styledTextCtrlCallTipSetForeground obj forerforegforeb@).
+styledTextCtrlCallTipSetForeground :: StyledTextCtrl  a -> Color ->  IO ()
+styledTextCtrlCallTipSetForeground _obj forerforegforeb 
+  = withObjectRef "styledTextCtrlCallTipSetForeground" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_CallTipSetForeground cobj__obj  (colorRed forerforegforeb) (colorGreen forerforegforeb) (colorBlue forerforegforeb)  
+foreign import ccall "wxStyledTextCtrl_CallTipSetForeground" wxStyledTextCtrl_CallTipSetForeground :: Ptr (TStyledTextCtrl a) -> Word8 -> Word8 -> Word8 -> IO ()
+
+-- | usage: (@styledTextCtrlCallTipSetForegroundHighlight obj forerforegforeb@).
+styledTextCtrlCallTipSetForegroundHighlight :: StyledTextCtrl  a -> Color ->  IO ()
+styledTextCtrlCallTipSetForegroundHighlight _obj forerforegforeb 
+  = withObjectRef "styledTextCtrlCallTipSetForegroundHighlight" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_CallTipSetForegroundHighlight cobj__obj  (colorRed forerforegforeb) (colorGreen forerforegforeb) (colorBlue forerforegforeb)  
+foreign import ccall "wxStyledTextCtrl_CallTipSetForegroundHighlight" wxStyledTextCtrl_CallTipSetForegroundHighlight :: Ptr (TStyledTextCtrl a) -> Word8 -> Word8 -> Word8 -> IO ()
+
+-- | usage: (@styledTextCtrlCallTipSetHighlight obj start end@).
+styledTextCtrlCallTipSetHighlight :: StyledTextCtrl  a -> Int -> Int ->  IO ()
+styledTextCtrlCallTipSetHighlight _obj start end 
+  = withObjectRef "styledTextCtrlCallTipSetHighlight" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_CallTipSetHighlight cobj__obj  (toCInt start)  (toCInt end)  
+foreign import ccall "wxStyledTextCtrl_CallTipSetHighlight" wxStyledTextCtrl_CallTipSetHighlight :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlCallTipShow obj pos definition@).
+styledTextCtrlCallTipShow :: StyledTextCtrl  a -> Int -> String ->  IO ()
+styledTextCtrlCallTipShow _obj pos definition 
+  = withObjectRef "styledTextCtrlCallTipShow" _obj $ \cobj__obj -> 
+    withStringPtr definition $ \cobj_definition -> 
+    wxStyledTextCtrl_CallTipShow cobj__obj  (toCInt pos)  cobj_definition  
+foreign import ccall "wxStyledTextCtrl_CallTipShow" wxStyledTextCtrl_CallTipShow :: Ptr (TStyledTextCtrl a) -> CInt -> Ptr (TWxString c) -> IO ()
+
+-- | usage: (@styledTextCtrlCanPaste obj@).
+styledTextCtrlCanPaste :: StyledTextCtrl  a ->  IO Bool
+styledTextCtrlCanPaste _obj 
+  = withBoolResult $
+    withObjectRef "styledTextCtrlCanPaste" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_CanPaste cobj__obj  
+foreign import ccall "wxStyledTextCtrl_CanPaste" wxStyledTextCtrl_CanPaste :: Ptr (TStyledTextCtrl a) -> IO CBool
+
+-- | usage: (@styledTextCtrlCanRedo obj@).
+styledTextCtrlCanRedo :: StyledTextCtrl  a ->  IO Bool
+styledTextCtrlCanRedo _obj 
+  = withBoolResult $
+    withObjectRef "styledTextCtrlCanRedo" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_CanRedo cobj__obj  
+foreign import ccall "wxStyledTextCtrl_CanRedo" wxStyledTextCtrl_CanRedo :: Ptr (TStyledTextCtrl a) -> IO CBool
+
+-- | usage: (@styledTextCtrlCanUndo obj@).
+styledTextCtrlCanUndo :: StyledTextCtrl  a ->  IO Bool
+styledTextCtrlCanUndo _obj 
+  = withBoolResult $
+    withObjectRef "styledTextCtrlCanUndo" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_CanUndo cobj__obj  
+foreign import ccall "wxStyledTextCtrl_CanUndo" wxStyledTextCtrl_CanUndo :: Ptr (TStyledTextCtrl a) -> IO CBool
+
+-- | usage: (@styledTextCtrlChooseCaretX obj@).
+styledTextCtrlChooseCaretX :: StyledTextCtrl  a ->  IO ()
+styledTextCtrlChooseCaretX _obj 
+  = withObjectRef "styledTextCtrlChooseCaretX" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_ChooseCaretX cobj__obj  
+foreign import ccall "wxStyledTextCtrl_ChooseCaretX" wxStyledTextCtrl_ChooseCaretX :: Ptr (TStyledTextCtrl a) -> IO ()
+
+-- | usage: (@styledTextCtrlClear obj@).
+styledTextCtrlClear :: StyledTextCtrl  a ->  IO ()
+styledTextCtrlClear _obj 
+  = withObjectRef "styledTextCtrlClear" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_Clear cobj__obj  
+foreign import ccall "wxStyledTextCtrl_Clear" wxStyledTextCtrl_Clear :: Ptr (TStyledTextCtrl a) -> IO ()
+
+-- | usage: (@styledTextCtrlClearAll obj@).
+styledTextCtrlClearAll :: StyledTextCtrl  a ->  IO ()
+styledTextCtrlClearAll _obj 
+  = withObjectRef "styledTextCtrlClearAll" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_ClearAll cobj__obj  
+foreign import ccall "wxStyledTextCtrl_ClearAll" wxStyledTextCtrl_ClearAll :: Ptr (TStyledTextCtrl a) -> IO ()
+
+-- | usage: (@styledTextCtrlClearDocumentStyle obj@).
+styledTextCtrlClearDocumentStyle :: StyledTextCtrl  a ->  IO ()
+styledTextCtrlClearDocumentStyle _obj 
+  = withObjectRef "styledTextCtrlClearDocumentStyle" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_ClearDocumentStyle cobj__obj  
+foreign import ccall "wxStyledTextCtrl_ClearDocumentStyle" wxStyledTextCtrl_ClearDocumentStyle :: Ptr (TStyledTextCtrl a) -> IO ()
+
+-- | usage: (@styledTextCtrlClearRegisteredImages obj@).
+styledTextCtrlClearRegisteredImages :: StyledTextCtrl  a ->  IO ()
+styledTextCtrlClearRegisteredImages _obj 
+  = withObjectRef "styledTextCtrlClearRegisteredImages" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_ClearRegisteredImages cobj__obj  
+foreign import ccall "wxStyledTextCtrl_ClearRegisteredImages" wxStyledTextCtrl_ClearRegisteredImages :: Ptr (TStyledTextCtrl a) -> IO ()
+
+-- | usage: (@styledTextCtrlCmdKeyAssign obj key modifiers cmd@).
+styledTextCtrlCmdKeyAssign :: StyledTextCtrl  a -> Int -> Int -> Int ->  IO ()
+styledTextCtrlCmdKeyAssign _obj key modifiers cmd 
+  = withObjectRef "styledTextCtrlCmdKeyAssign" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_CmdKeyAssign cobj__obj  (toCInt key)  (toCInt modifiers)  (toCInt cmd)  
+foreign import ccall "wxStyledTextCtrl_CmdKeyAssign" wxStyledTextCtrl_CmdKeyAssign :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlCmdKeyClear obj key modifiers@).
+styledTextCtrlCmdKeyClear :: StyledTextCtrl  a -> Int -> Int ->  IO ()
+styledTextCtrlCmdKeyClear _obj key modifiers 
+  = withObjectRef "styledTextCtrlCmdKeyClear" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_CmdKeyClear cobj__obj  (toCInt key)  (toCInt modifiers)  
+foreign import ccall "wxStyledTextCtrl_CmdKeyClear" wxStyledTextCtrl_CmdKeyClear :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlCmdKeyClearAll obj@).
+styledTextCtrlCmdKeyClearAll :: StyledTextCtrl  a ->  IO ()
+styledTextCtrlCmdKeyClearAll _obj 
+  = withObjectRef "styledTextCtrlCmdKeyClearAll" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_CmdKeyClearAll cobj__obj  
+foreign import ccall "wxStyledTextCtrl_CmdKeyClearAll" wxStyledTextCtrl_CmdKeyClearAll :: Ptr (TStyledTextCtrl a) -> IO ()
+
+-- | usage: (@styledTextCtrlCmdKeyExecute obj cmd@).
+styledTextCtrlCmdKeyExecute :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlCmdKeyExecute _obj cmd 
+  = withObjectRef "styledTextCtrlCmdKeyExecute" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_CmdKeyExecute cobj__obj  (toCInt cmd)  
+foreign import ccall "wxStyledTextCtrl_CmdKeyExecute" wxStyledTextCtrl_CmdKeyExecute :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlColourise obj start end@).
+styledTextCtrlColourise :: StyledTextCtrl  a -> Int -> Int ->  IO ()
+styledTextCtrlColourise _obj start end 
+  = withObjectRef "styledTextCtrlColourise" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_Colourise cobj__obj  (toCInt start)  (toCInt end)  
+foreign import ccall "wxStyledTextCtrl_Colourise" wxStyledTextCtrl_Colourise :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlConvertEOLs obj eolMode@).
+styledTextCtrlConvertEOLs :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlConvertEOLs _obj eolMode 
+  = withObjectRef "styledTextCtrlConvertEOLs" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_ConvertEOLs cobj__obj  (toCInt eolMode)  
+foreign import ccall "wxStyledTextCtrl_ConvertEOLs" wxStyledTextCtrl_ConvertEOLs :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlCopy obj@).
+styledTextCtrlCopy :: StyledTextCtrl  a ->  IO ()
+styledTextCtrlCopy _obj 
+  = withObjectRef "styledTextCtrlCopy" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_Copy cobj__obj  
+foreign import ccall "wxStyledTextCtrl_Copy" wxStyledTextCtrl_Copy :: Ptr (TStyledTextCtrl a) -> IO ()
+
+-- | usage: (@styledTextCtrlCopyRange obj start end@).
+styledTextCtrlCopyRange :: StyledTextCtrl  a -> Int -> Int ->  IO ()
+styledTextCtrlCopyRange _obj start end 
+  = withObjectRef "styledTextCtrlCopyRange" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_CopyRange cobj__obj  (toCInt start)  (toCInt end)  
+foreign import ccall "wxStyledTextCtrl_CopyRange" wxStyledTextCtrl_CopyRange :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlCopyText obj length text@).
+styledTextCtrlCopyText :: StyledTextCtrl  a -> Int -> String ->  IO ()
+styledTextCtrlCopyText _obj length text 
+  = withObjectRef "styledTextCtrlCopyText" _obj $ \cobj__obj -> 
+    withStringPtr text $ \cobj_text -> 
+    wxStyledTextCtrl_CopyText cobj__obj  (toCInt length)  cobj_text  
+foreign import ccall "wxStyledTextCtrl_CopyText" wxStyledTextCtrl_CopyText :: Ptr (TStyledTextCtrl a) -> CInt -> Ptr (TWxString c) -> IO ()
+
+-- | usage: (@styledTextCtrlCreate prt id txt lfttopwdthgt style@).
+styledTextCtrlCreate :: Window  a -> Id -> String -> Rect -> Int ->  IO (StyledTextCtrl  ())
+styledTextCtrlCreate _prt _id _txt _lfttopwdthgt style 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    withStringPtr _txt $ \cobj__txt -> 
+    wxStyledTextCtrl_Create cobj__prt  (toCInt _id)  cobj__txt  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt style)  
+foreign import ccall "wxStyledTextCtrl_Create" wxStyledTextCtrl_Create :: Ptr (TWindow a) -> CInt -> Ptr (TWxString c) -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TStyledTextCtrl ()))
+
+-- | usage: (@styledTextCtrlCreateDocument obj@).
+styledTextCtrlCreateDocument :: StyledTextCtrl  a ->  IO (STCDoc  ())
+styledTextCtrlCreateDocument _obj 
+  = withObjectResult $
+    withObjectRef "styledTextCtrlCreateDocument" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_CreateDocument cobj__obj  
+foreign import ccall "wxStyledTextCtrl_CreateDocument" wxStyledTextCtrl_CreateDocument :: Ptr (TStyledTextCtrl a) -> IO (Ptr (TSTCDoc ()))
+
+-- | usage: (@styledTextCtrlCut obj@).
+styledTextCtrlCut :: StyledTextCtrl  a ->  IO ()
+styledTextCtrlCut _obj 
+  = withObjectRef "styledTextCtrlCut" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_Cut cobj__obj  
+foreign import ccall "wxStyledTextCtrl_Cut" wxStyledTextCtrl_Cut :: Ptr (TStyledTextCtrl a) -> IO ()
+
+-- | usage: (@styledTextCtrlDelLineLeft obj@).
+styledTextCtrlDelLineLeft :: StyledTextCtrl  a ->  IO ()
+styledTextCtrlDelLineLeft _obj 
+  = withObjectRef "styledTextCtrlDelLineLeft" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_DelLineLeft cobj__obj  
+foreign import ccall "wxStyledTextCtrl_DelLineLeft" wxStyledTextCtrl_DelLineLeft :: Ptr (TStyledTextCtrl a) -> IO ()
+
+-- | usage: (@styledTextCtrlDelLineRight obj@).
+styledTextCtrlDelLineRight :: StyledTextCtrl  a ->  IO ()
+styledTextCtrlDelLineRight _obj 
+  = withObjectRef "styledTextCtrlDelLineRight" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_DelLineRight cobj__obj  
+foreign import ccall "wxStyledTextCtrl_DelLineRight" wxStyledTextCtrl_DelLineRight :: Ptr (TStyledTextCtrl a) -> IO ()
+
+-- | usage: (@styledTextCtrlDocLineFromVisible obj lineDisplay@).
+styledTextCtrlDocLineFromVisible :: StyledTextCtrl  a -> Int ->  IO Int
+styledTextCtrlDocLineFromVisible _obj lineDisplay 
+  = withIntResult $
+    withObjectRef "styledTextCtrlDocLineFromVisible" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_DocLineFromVisible cobj__obj  (toCInt lineDisplay)  
+foreign import ccall "wxStyledTextCtrl_DocLineFromVisible" wxStyledTextCtrl_DocLineFromVisible :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt
+
+-- | usage: (@styledTextCtrlEmptyUndoBuffer obj@).
+styledTextCtrlEmptyUndoBuffer :: StyledTextCtrl  a ->  IO ()
+styledTextCtrlEmptyUndoBuffer _obj 
+  = withObjectRef "styledTextCtrlEmptyUndoBuffer" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_EmptyUndoBuffer cobj__obj  
+foreign import ccall "wxStyledTextCtrl_EmptyUndoBuffer" wxStyledTextCtrl_EmptyUndoBuffer :: Ptr (TStyledTextCtrl a) -> IO ()
+
+-- | usage: (@styledTextCtrlEndUndoAction obj@).
+styledTextCtrlEndUndoAction :: StyledTextCtrl  a ->  IO ()
+styledTextCtrlEndUndoAction _obj 
+  = withObjectRef "styledTextCtrlEndUndoAction" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_EndUndoAction cobj__obj  
+foreign import ccall "wxStyledTextCtrl_EndUndoAction" wxStyledTextCtrl_EndUndoAction :: Ptr (TStyledTextCtrl a) -> IO ()
+
+-- | usage: (@styledTextCtrlEnsureCaretVisible obj@).
+styledTextCtrlEnsureCaretVisible :: StyledTextCtrl  a ->  IO ()
+styledTextCtrlEnsureCaretVisible _obj 
+  = withObjectRef "styledTextCtrlEnsureCaretVisible" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_EnsureCaretVisible cobj__obj  
+foreign import ccall "wxStyledTextCtrl_EnsureCaretVisible" wxStyledTextCtrl_EnsureCaretVisible :: Ptr (TStyledTextCtrl a) -> IO ()
+
+-- | usage: (@styledTextCtrlEnsureVisible obj line@).
+styledTextCtrlEnsureVisible :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlEnsureVisible _obj line 
+  = withObjectRef "styledTextCtrlEnsureVisible" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_EnsureVisible cobj__obj  (toCInt line)  
+foreign import ccall "wxStyledTextCtrl_EnsureVisible" wxStyledTextCtrl_EnsureVisible :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlEnsureVisibleEnforcePolicy obj line@).
+styledTextCtrlEnsureVisibleEnforcePolicy :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlEnsureVisibleEnforcePolicy _obj line 
+  = withObjectRef "styledTextCtrlEnsureVisibleEnforcePolicy" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_EnsureVisibleEnforcePolicy cobj__obj  (toCInt line)  
+foreign import ccall "wxStyledTextCtrl_EnsureVisibleEnforcePolicy" wxStyledTextCtrl_EnsureVisibleEnforcePolicy :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlFindText obj minPos maxPos text flags@).
+styledTextCtrlFindText :: StyledTextCtrl  a -> Int -> Int -> String -> Int ->  IO Int
+styledTextCtrlFindText _obj minPos maxPos text flags 
+  = withIntResult $
+    withObjectRef "styledTextCtrlFindText" _obj $ \cobj__obj -> 
+    withStringPtr text $ \cobj_text -> 
+    wxStyledTextCtrl_FindText cobj__obj  (toCInt minPos)  (toCInt maxPos)  cobj_text  (toCInt flags)  
+foreign import ccall "wxStyledTextCtrl_FindText" wxStyledTextCtrl_FindText :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> Ptr (TWxString d) -> CInt -> IO CInt
+
+-- | usage: (@styledTextCtrlFormatRange obj doDraw startPos endPos draw target renderRect pageRect@).
+styledTextCtrlFormatRange :: StyledTextCtrl  a -> Bool -> Int -> Int -> DC  e -> DC  f -> Rect -> Rect ->  IO Int
+styledTextCtrlFormatRange _obj doDraw startPos endPos draw target renderRect pageRect 
+  = withIntResult $
+    withObjectRef "styledTextCtrlFormatRange" _obj $ \cobj__obj -> 
+    withObjectPtr draw $ \cobj_draw -> 
+    withObjectPtr target $ \cobj_target -> 
+    withWxRectPtr renderRect $ \cobj_renderRect -> 
+    withWxRectPtr pageRect $ \cobj_pageRect -> 
+    wxStyledTextCtrl_FormatRange cobj__obj  (toCBool doDraw)  (toCInt startPos)  (toCInt endPos)  cobj_draw  cobj_target  cobj_renderRect  cobj_pageRect  
+foreign import ccall "wxStyledTextCtrl_FormatRange" wxStyledTextCtrl_FormatRange :: Ptr (TStyledTextCtrl a) -> CBool -> CInt -> CInt -> Ptr (TDC e) -> Ptr (TDC f) -> Ptr (TWxRect g) -> Ptr (TWxRect h) -> IO CInt
+
+-- | usage: (@styledTextCtrlGetAnchor obj@).
+styledTextCtrlGetAnchor :: StyledTextCtrl  a ->  IO Int
+styledTextCtrlGetAnchor _obj 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetAnchor" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetAnchor cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetAnchor" wxStyledTextCtrl_GetAnchor :: Ptr (TStyledTextCtrl a) -> IO CInt
+
+-- | usage: (@styledTextCtrlGetBackSpaceUnIndents obj@).
+styledTextCtrlGetBackSpaceUnIndents :: StyledTextCtrl  a ->  IO Bool
+styledTextCtrlGetBackSpaceUnIndents _obj 
+  = withBoolResult $
+    withObjectRef "styledTextCtrlGetBackSpaceUnIndents" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetBackSpaceUnIndents cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetBackSpaceUnIndents" wxStyledTextCtrl_GetBackSpaceUnIndents :: Ptr (TStyledTextCtrl a) -> IO CBool
+
+-- | usage: (@styledTextCtrlGetBufferedDraw obj@).
+styledTextCtrlGetBufferedDraw :: StyledTextCtrl  a ->  IO Bool
+styledTextCtrlGetBufferedDraw _obj 
+  = withBoolResult $
+    withObjectRef "styledTextCtrlGetBufferedDraw" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetBufferedDraw cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetBufferedDraw" wxStyledTextCtrl_GetBufferedDraw :: Ptr (TStyledTextCtrl a) -> IO CBool
+
+-- | usage: (@styledTextCtrlGetCaretForeground obj@).
+styledTextCtrlGetCaretForeground :: StyledTextCtrl  a ->  IO (Color)
+styledTextCtrlGetCaretForeground _obj 
+  = withManagedColourResult $
+    withObjectRef "styledTextCtrlGetCaretForeground" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetCaretForeground cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetCaretForeground" wxStyledTextCtrl_GetCaretForeground :: Ptr (TStyledTextCtrl a) -> IO (Ptr (TColour ()))
+
+-- | usage: (@styledTextCtrlGetCaretLineBackground obj@).
+styledTextCtrlGetCaretLineBackground :: StyledTextCtrl  a ->  IO (Color)
+styledTextCtrlGetCaretLineBackground _obj 
+  = withManagedColourResult $
+    withObjectRef "styledTextCtrlGetCaretLineBackground" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetCaretLineBackground cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetCaretLineBackground" wxStyledTextCtrl_GetCaretLineBackground :: Ptr (TStyledTextCtrl a) -> IO (Ptr (TColour ()))
+
+-- | usage: (@styledTextCtrlGetCaretLineVisible obj@).
+styledTextCtrlGetCaretLineVisible :: StyledTextCtrl  a ->  IO Bool
+styledTextCtrlGetCaretLineVisible _obj 
+  = withBoolResult $
+    withObjectRef "styledTextCtrlGetCaretLineVisible" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetCaretLineVisible cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetCaretLineVisible" wxStyledTextCtrl_GetCaretLineVisible :: Ptr (TStyledTextCtrl a) -> IO CBool
+
+-- | usage: (@styledTextCtrlGetCaretPeriod obj@).
+styledTextCtrlGetCaretPeriod :: StyledTextCtrl  a ->  IO Int
+styledTextCtrlGetCaretPeriod _obj 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetCaretPeriod" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetCaretPeriod cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetCaretPeriod" wxStyledTextCtrl_GetCaretPeriod :: Ptr (TStyledTextCtrl a) -> IO CInt
+
+-- | usage: (@styledTextCtrlGetCaretWidth obj@).
+styledTextCtrlGetCaretWidth :: StyledTextCtrl  a ->  IO Int
+styledTextCtrlGetCaretWidth _obj 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetCaretWidth" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetCaretWidth cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetCaretWidth" wxStyledTextCtrl_GetCaretWidth :: Ptr (TStyledTextCtrl a) -> IO CInt
+
+-- | usage: (@styledTextCtrlGetCharAt obj pos@).
+styledTextCtrlGetCharAt :: StyledTextCtrl  a -> Int ->  IO Int
+styledTextCtrlGetCharAt _obj pos 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetCharAt" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetCharAt cobj__obj  (toCInt pos)  
+foreign import ccall "wxStyledTextCtrl_GetCharAt" wxStyledTextCtrl_GetCharAt :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt
+
+-- | usage: (@styledTextCtrlGetCodePage obj@).
+styledTextCtrlGetCodePage :: StyledTextCtrl  a ->  IO Int
+styledTextCtrlGetCodePage _obj 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetCodePage" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetCodePage cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetCodePage" wxStyledTextCtrl_GetCodePage :: Ptr (TStyledTextCtrl a) -> IO CInt
+
+-- | usage: (@styledTextCtrlGetColumn obj pos@).
+styledTextCtrlGetColumn :: StyledTextCtrl  a -> Int ->  IO Int
+styledTextCtrlGetColumn _obj pos 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetColumn" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetColumn cobj__obj  (toCInt pos)  
+foreign import ccall "wxStyledTextCtrl_GetColumn" wxStyledTextCtrl_GetColumn :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt
+
+-- | usage: (@styledTextCtrlGetControlCharSymbol obj@).
+styledTextCtrlGetControlCharSymbol :: StyledTextCtrl  a ->  IO Int
+styledTextCtrlGetControlCharSymbol _obj 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetControlCharSymbol" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetControlCharSymbol cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetControlCharSymbol" wxStyledTextCtrl_GetControlCharSymbol :: Ptr (TStyledTextCtrl a) -> IO CInt
+
+-- | usage: (@styledTextCtrlGetCurrentLine obj@).
+styledTextCtrlGetCurrentLine :: StyledTextCtrl  a ->  IO Int
+styledTextCtrlGetCurrentLine _obj 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetCurrentLine" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetCurrentLine cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetCurrentLine" wxStyledTextCtrl_GetCurrentLine :: Ptr (TStyledTextCtrl a) -> IO CInt
+
+-- | usage: (@styledTextCtrlGetCurrentPos obj@).
+styledTextCtrlGetCurrentPos :: StyledTextCtrl  a ->  IO Int
+styledTextCtrlGetCurrentPos _obj 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetCurrentPos" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetCurrentPos cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetCurrentPos" wxStyledTextCtrl_GetCurrentPos :: Ptr (TStyledTextCtrl a) -> IO CInt
+
+-- | usage: (@styledTextCtrlGetDocPointer obj@).
+styledTextCtrlGetDocPointer :: StyledTextCtrl  a ->  IO (STCDoc  ())
+styledTextCtrlGetDocPointer _obj 
+  = withObjectResult $
+    withObjectRef "styledTextCtrlGetDocPointer" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetDocPointer cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetDocPointer" wxStyledTextCtrl_GetDocPointer :: Ptr (TStyledTextCtrl a) -> IO (Ptr (TSTCDoc ()))
+
+-- | usage: (@styledTextCtrlGetEOLMode obj@).
+styledTextCtrlGetEOLMode :: StyledTextCtrl  a ->  IO Int
+styledTextCtrlGetEOLMode _obj 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetEOLMode" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetEOLMode cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetEOLMode" wxStyledTextCtrl_GetEOLMode :: Ptr (TStyledTextCtrl a) -> IO CInt
+
+-- | usage: (@styledTextCtrlGetEdgeColour obj@).
+styledTextCtrlGetEdgeColour :: StyledTextCtrl  a ->  IO (Color)
+styledTextCtrlGetEdgeColour _obj 
+  = withManagedColourResult $
+    withObjectRef "styledTextCtrlGetEdgeColour" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetEdgeColour cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetEdgeColour" wxStyledTextCtrl_GetEdgeColour :: Ptr (TStyledTextCtrl a) -> IO (Ptr (TColour ()))
+
+-- | usage: (@styledTextCtrlGetEdgeColumn obj@).
+styledTextCtrlGetEdgeColumn :: StyledTextCtrl  a ->  IO Int
+styledTextCtrlGetEdgeColumn _obj 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetEdgeColumn" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetEdgeColumn cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetEdgeColumn" wxStyledTextCtrl_GetEdgeColumn :: Ptr (TStyledTextCtrl a) -> IO CInt
+
+-- | usage: (@styledTextCtrlGetEdgeMode obj@).
+styledTextCtrlGetEdgeMode :: StyledTextCtrl  a ->  IO Int
+styledTextCtrlGetEdgeMode _obj 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetEdgeMode" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetEdgeMode cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetEdgeMode" wxStyledTextCtrl_GetEdgeMode :: Ptr (TStyledTextCtrl a) -> IO CInt
+
+-- | usage: (@styledTextCtrlGetEndAtLastLine obj@).
+styledTextCtrlGetEndAtLastLine :: StyledTextCtrl  a ->  IO Int
+styledTextCtrlGetEndAtLastLine _obj 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetEndAtLastLine" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetEndAtLastLine cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetEndAtLastLine" wxStyledTextCtrl_GetEndAtLastLine :: Ptr (TStyledTextCtrl a) -> IO CInt
+
+-- | usage: (@styledTextCtrlGetEndStyled obj@).
+styledTextCtrlGetEndStyled :: StyledTextCtrl  a ->  IO Int
+styledTextCtrlGetEndStyled _obj 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetEndStyled" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetEndStyled cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetEndStyled" wxStyledTextCtrl_GetEndStyled :: Ptr (TStyledTextCtrl a) -> IO CInt
+
+-- | usage: (@styledTextCtrlGetFirstVisibleLine obj@).
+styledTextCtrlGetFirstVisibleLine :: StyledTextCtrl  a ->  IO Int
+styledTextCtrlGetFirstVisibleLine _obj 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetFirstVisibleLine" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetFirstVisibleLine cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetFirstVisibleLine" wxStyledTextCtrl_GetFirstVisibleLine :: Ptr (TStyledTextCtrl a) -> IO CInt
+
+-- | usage: (@styledTextCtrlGetFoldExpanded obj line@).
+styledTextCtrlGetFoldExpanded :: StyledTextCtrl  a -> Int ->  IO Bool
+styledTextCtrlGetFoldExpanded _obj line 
+  = withBoolResult $
+    withObjectRef "styledTextCtrlGetFoldExpanded" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetFoldExpanded cobj__obj  (toCInt line)  
+foreign import ccall "wxStyledTextCtrl_GetFoldExpanded" wxStyledTextCtrl_GetFoldExpanded :: Ptr (TStyledTextCtrl a) -> CInt -> IO CBool
+
+-- | usage: (@styledTextCtrlGetFoldLevel obj line@).
+styledTextCtrlGetFoldLevel :: StyledTextCtrl  a -> Int ->  IO Int
+styledTextCtrlGetFoldLevel _obj line 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetFoldLevel" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetFoldLevel cobj__obj  (toCInt line)  
+foreign import ccall "wxStyledTextCtrl_GetFoldLevel" wxStyledTextCtrl_GetFoldLevel :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt
+
+-- | usage: (@styledTextCtrlGetFoldParent obj line@).
+styledTextCtrlGetFoldParent :: StyledTextCtrl  a -> Int ->  IO Int
+styledTextCtrlGetFoldParent _obj line 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetFoldParent" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetFoldParent cobj__obj  (toCInt line)  
+foreign import ccall "wxStyledTextCtrl_GetFoldParent" wxStyledTextCtrl_GetFoldParent :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt
+
+-- | usage: (@styledTextCtrlGetHighlightGuide obj@).
+styledTextCtrlGetHighlightGuide :: StyledTextCtrl  a ->  IO Int
+styledTextCtrlGetHighlightGuide _obj 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetHighlightGuide" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetHighlightGuide cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetHighlightGuide" wxStyledTextCtrl_GetHighlightGuide :: Ptr (TStyledTextCtrl a) -> IO CInt
+
+-- | usage: (@styledTextCtrlGetIndent obj@).
+styledTextCtrlGetIndent :: StyledTextCtrl  a ->  IO Int
+styledTextCtrlGetIndent _obj 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetIndent" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetIndent cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetIndent" wxStyledTextCtrl_GetIndent :: Ptr (TStyledTextCtrl a) -> IO CInt
+
+-- | usage: (@styledTextCtrlGetIndentationGuides obj@).
+styledTextCtrlGetIndentationGuides :: StyledTextCtrl  a ->  IO Bool
+styledTextCtrlGetIndentationGuides _obj 
+  = withBoolResult $
+    withObjectRef "styledTextCtrlGetIndentationGuides" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetIndentationGuides cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetIndentationGuides" wxStyledTextCtrl_GetIndentationGuides :: Ptr (TStyledTextCtrl a) -> IO CBool
+
+-- | usage: (@styledTextCtrlGetLastChild obj line level@).
+styledTextCtrlGetLastChild :: StyledTextCtrl  a -> Int -> Int ->  IO Int
+styledTextCtrlGetLastChild _obj line level 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetLastChild" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetLastChild cobj__obj  (toCInt line)  (toCInt level)  
+foreign import ccall "wxStyledTextCtrl_GetLastChild" wxStyledTextCtrl_GetLastChild :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO CInt
+
+-- | usage: (@styledTextCtrlGetLastKeydownProcessed obj@).
+styledTextCtrlGetLastKeydownProcessed :: StyledTextCtrl  a ->  IO Bool
+styledTextCtrlGetLastKeydownProcessed _obj 
+  = withBoolResult $
+    withObjectRef "styledTextCtrlGetLastKeydownProcessed" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetLastKeydownProcessed cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetLastKeydownProcessed" wxStyledTextCtrl_GetLastKeydownProcessed :: Ptr (TStyledTextCtrl a) -> IO CBool
+
+-- | usage: (@styledTextCtrlGetLayoutCache obj@).
+styledTextCtrlGetLayoutCache :: StyledTextCtrl  a ->  IO Int
+styledTextCtrlGetLayoutCache _obj 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetLayoutCache" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetLayoutCache cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetLayoutCache" wxStyledTextCtrl_GetLayoutCache :: Ptr (TStyledTextCtrl a) -> IO CInt
+
+-- | usage: (@styledTextCtrlGetLength obj@).
+styledTextCtrlGetLength :: StyledTextCtrl  a ->  IO Int
+styledTextCtrlGetLength _obj 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetLength" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetLength cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetLength" wxStyledTextCtrl_GetLength :: Ptr (TStyledTextCtrl a) -> IO CInt
+
+-- | usage: (@styledTextCtrlGetLexer obj@).
+styledTextCtrlGetLexer :: StyledTextCtrl  a ->  IO Int
+styledTextCtrlGetLexer _obj 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetLexer" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetLexer cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetLexer" wxStyledTextCtrl_GetLexer :: Ptr (TStyledTextCtrl a) -> IO CInt
+
+-- | usage: (@styledTextCtrlGetLine obj line@).
+styledTextCtrlGetLine :: StyledTextCtrl  a -> Int ->  IO (String)
+styledTextCtrlGetLine _obj line 
+  = withManagedStringResult $
+    withObjectRef "styledTextCtrlGetLine" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetLine cobj__obj  (toCInt line)  
+foreign import ccall "wxStyledTextCtrl_GetLine" wxStyledTextCtrl_GetLine :: Ptr (TStyledTextCtrl a) -> CInt -> IO (Ptr (TWxString ()))
+
+-- | usage: (@styledTextCtrlGetLineCount obj@).
+styledTextCtrlGetLineCount :: StyledTextCtrl  a ->  IO Int
+styledTextCtrlGetLineCount _obj 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetLineCount" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetLineCount cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetLineCount" wxStyledTextCtrl_GetLineCount :: Ptr (TStyledTextCtrl a) -> IO CInt
+
+-- | usage: (@styledTextCtrlGetLineEndPosition obj line@).
+styledTextCtrlGetLineEndPosition :: StyledTextCtrl  a -> Int ->  IO Int
+styledTextCtrlGetLineEndPosition _obj line 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetLineEndPosition" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetLineEndPosition cobj__obj  (toCInt line)  
+foreign import ccall "wxStyledTextCtrl_GetLineEndPosition" wxStyledTextCtrl_GetLineEndPosition :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt
+
+-- | usage: (@styledTextCtrlGetLineIndentPosition obj line@).
+styledTextCtrlGetLineIndentPosition :: StyledTextCtrl  a -> Int ->  IO Int
+styledTextCtrlGetLineIndentPosition _obj line 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetLineIndentPosition" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetLineIndentPosition cobj__obj  (toCInt line)  
+foreign import ccall "wxStyledTextCtrl_GetLineIndentPosition" wxStyledTextCtrl_GetLineIndentPosition :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt
+
+-- | usage: (@styledTextCtrlGetLineIndentation obj line@).
+styledTextCtrlGetLineIndentation :: StyledTextCtrl  a -> Int ->  IO Int
+styledTextCtrlGetLineIndentation _obj line 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetLineIndentation" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetLineIndentation cobj__obj  (toCInt line)  
+foreign import ccall "wxStyledTextCtrl_GetLineIndentation" wxStyledTextCtrl_GetLineIndentation :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt
+
+-- | usage: (@styledTextCtrlGetLineState obj line@).
+styledTextCtrlGetLineState :: StyledTextCtrl  a -> Int ->  IO Int
+styledTextCtrlGetLineState _obj line 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetLineState" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetLineState cobj__obj  (toCInt line)  
+foreign import ccall "wxStyledTextCtrl_GetLineState" wxStyledTextCtrl_GetLineState :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt
+
+-- | usage: (@styledTextCtrlGetLineVisible obj line@).
+styledTextCtrlGetLineVisible :: StyledTextCtrl  a -> Int ->  IO Bool
+styledTextCtrlGetLineVisible _obj line 
+  = withBoolResult $
+    withObjectRef "styledTextCtrlGetLineVisible" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetLineVisible cobj__obj  (toCInt line)  
+foreign import ccall "wxStyledTextCtrl_GetLineVisible" wxStyledTextCtrl_GetLineVisible :: Ptr (TStyledTextCtrl a) -> CInt -> IO CBool
+
+-- | usage: (@styledTextCtrlGetMarginLeft obj@).
+styledTextCtrlGetMarginLeft :: StyledTextCtrl  a ->  IO Int
+styledTextCtrlGetMarginLeft _obj 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetMarginLeft" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetMarginLeft cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetMarginLeft" wxStyledTextCtrl_GetMarginLeft :: Ptr (TStyledTextCtrl a) -> IO CInt
+
+-- | usage: (@styledTextCtrlGetMarginMask obj margin@).
+styledTextCtrlGetMarginMask :: StyledTextCtrl  a -> Int ->  IO Int
+styledTextCtrlGetMarginMask _obj margin 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetMarginMask" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetMarginMask cobj__obj  (toCInt margin)  
+foreign import ccall "wxStyledTextCtrl_GetMarginMask" wxStyledTextCtrl_GetMarginMask :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt
+
+-- | usage: (@styledTextCtrlGetMarginRight obj@).
+styledTextCtrlGetMarginRight :: StyledTextCtrl  a ->  IO Int
+styledTextCtrlGetMarginRight _obj 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetMarginRight" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetMarginRight cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetMarginRight" wxStyledTextCtrl_GetMarginRight :: Ptr (TStyledTextCtrl a) -> IO CInt
+
+-- | usage: (@styledTextCtrlGetMarginSensitive obj margin@).
+styledTextCtrlGetMarginSensitive :: StyledTextCtrl  a -> Int ->  IO Bool
+styledTextCtrlGetMarginSensitive _obj margin 
+  = withBoolResult $
+    withObjectRef "styledTextCtrlGetMarginSensitive" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetMarginSensitive cobj__obj  (toCInt margin)  
+foreign import ccall "wxStyledTextCtrl_GetMarginSensitive" wxStyledTextCtrl_GetMarginSensitive :: Ptr (TStyledTextCtrl a) -> CInt -> IO CBool
+
+-- | usage: (@styledTextCtrlGetMarginType obj margin@).
+styledTextCtrlGetMarginType :: StyledTextCtrl  a -> Int ->  IO Int
+styledTextCtrlGetMarginType _obj margin 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetMarginType" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetMarginType cobj__obj  (toCInt margin)  
+foreign import ccall "wxStyledTextCtrl_GetMarginType" wxStyledTextCtrl_GetMarginType :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt
+
+-- | usage: (@styledTextCtrlGetMarginWidth obj margin@).
+styledTextCtrlGetMarginWidth :: StyledTextCtrl  a -> Int ->  IO Int
+styledTextCtrlGetMarginWidth _obj margin 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetMarginWidth" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetMarginWidth cobj__obj  (toCInt margin)  
+foreign import ccall "wxStyledTextCtrl_GetMarginWidth" wxStyledTextCtrl_GetMarginWidth :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt
+
+-- | usage: (@styledTextCtrlGetMaxLineState obj@).
+styledTextCtrlGetMaxLineState :: StyledTextCtrl  a ->  IO Int
+styledTextCtrlGetMaxLineState _obj 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetMaxLineState" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetMaxLineState cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetMaxLineState" wxStyledTextCtrl_GetMaxLineState :: Ptr (TStyledTextCtrl a) -> IO CInt
+
+-- | usage: (@styledTextCtrlGetModEventMask obj@).
+styledTextCtrlGetModEventMask :: StyledTextCtrl  a ->  IO Int
+styledTextCtrlGetModEventMask _obj 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetModEventMask" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetModEventMask cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetModEventMask" wxStyledTextCtrl_GetModEventMask :: Ptr (TStyledTextCtrl a) -> IO CInt
+
+-- | usage: (@styledTextCtrlGetModify obj@).
+styledTextCtrlGetModify :: StyledTextCtrl  a ->  IO Bool
+styledTextCtrlGetModify _obj 
+  = withBoolResult $
+    withObjectRef "styledTextCtrlGetModify" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetModify cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetModify" wxStyledTextCtrl_GetModify :: Ptr (TStyledTextCtrl a) -> IO CBool
+
+-- | usage: (@styledTextCtrlGetMouseDownCaptures obj@).
+styledTextCtrlGetMouseDownCaptures :: StyledTextCtrl  a ->  IO Bool
+styledTextCtrlGetMouseDownCaptures _obj 
+  = withBoolResult $
+    withObjectRef "styledTextCtrlGetMouseDownCaptures" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetMouseDownCaptures cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetMouseDownCaptures" wxStyledTextCtrl_GetMouseDownCaptures :: Ptr (TStyledTextCtrl a) -> IO CBool
+
+-- | usage: (@styledTextCtrlGetMouseDwellTime obj@).
+styledTextCtrlGetMouseDwellTime :: StyledTextCtrl  a ->  IO Int
+styledTextCtrlGetMouseDwellTime _obj 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetMouseDwellTime" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetMouseDwellTime cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetMouseDwellTime" wxStyledTextCtrl_GetMouseDwellTime :: Ptr (TStyledTextCtrl a) -> IO CInt
+
+-- | usage: (@styledTextCtrlGetOvertype obj@).
+styledTextCtrlGetOvertype :: StyledTextCtrl  a ->  IO Bool
+styledTextCtrlGetOvertype _obj 
+  = withBoolResult $
+    withObjectRef "styledTextCtrlGetOvertype" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetOvertype cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetOvertype" wxStyledTextCtrl_GetOvertype :: Ptr (TStyledTextCtrl a) -> IO CBool
+
+-- | usage: (@styledTextCtrlGetPrintColourMode obj@).
+styledTextCtrlGetPrintColourMode :: StyledTextCtrl  a ->  IO Int
+styledTextCtrlGetPrintColourMode _obj 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetPrintColourMode" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetPrintColourMode cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetPrintColourMode" wxStyledTextCtrl_GetPrintColourMode :: Ptr (TStyledTextCtrl a) -> IO CInt
+
+-- | usage: (@styledTextCtrlGetPrintMagnification obj@).
+styledTextCtrlGetPrintMagnification :: StyledTextCtrl  a ->  IO Int
+styledTextCtrlGetPrintMagnification _obj 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetPrintMagnification" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetPrintMagnification cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetPrintMagnification" wxStyledTextCtrl_GetPrintMagnification :: Ptr (TStyledTextCtrl a) -> IO CInt
+
+-- | usage: (@styledTextCtrlGetPrintWrapMode obj@).
+styledTextCtrlGetPrintWrapMode :: StyledTextCtrl  a ->  IO Int
+styledTextCtrlGetPrintWrapMode _obj 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetPrintWrapMode" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetPrintWrapMode cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetPrintWrapMode" wxStyledTextCtrl_GetPrintWrapMode :: Ptr (TStyledTextCtrl a) -> IO CInt
+
+-- | usage: (@styledTextCtrlGetReadOnly obj@).
+styledTextCtrlGetReadOnly :: StyledTextCtrl  a ->  IO Bool
+styledTextCtrlGetReadOnly _obj 
+  = withBoolResult $
+    withObjectRef "styledTextCtrlGetReadOnly" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetReadOnly cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetReadOnly" wxStyledTextCtrl_GetReadOnly :: Ptr (TStyledTextCtrl a) -> IO CBool
+
+-- | usage: (@styledTextCtrlGetSTCCursor obj@).
+styledTextCtrlGetSTCCursor :: StyledTextCtrl  a ->  IO Int
+styledTextCtrlGetSTCCursor _obj 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetSTCCursor" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetSTCCursor cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetSTCCursor" wxStyledTextCtrl_GetSTCCursor :: Ptr (TStyledTextCtrl a) -> IO CInt
+
+-- | usage: (@styledTextCtrlGetSTCFocus obj@).
+styledTextCtrlGetSTCFocus :: StyledTextCtrl  a ->  IO Bool
+styledTextCtrlGetSTCFocus _obj 
+  = withBoolResult $
+    withObjectRef "styledTextCtrlGetSTCFocus" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetSTCFocus cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetSTCFocus" wxStyledTextCtrl_GetSTCFocus :: Ptr (TStyledTextCtrl a) -> IO CBool
+
+-- | usage: (@styledTextCtrlGetScrollWidth obj@).
+styledTextCtrlGetScrollWidth :: StyledTextCtrl  a ->  IO Int
+styledTextCtrlGetScrollWidth _obj 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetScrollWidth" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetScrollWidth cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetScrollWidth" wxStyledTextCtrl_GetScrollWidth :: Ptr (TStyledTextCtrl a) -> IO CInt
+
+-- | usage: (@styledTextCtrlGetSearchFlags obj@).
+styledTextCtrlGetSearchFlags :: StyledTextCtrl  a ->  IO Int
+styledTextCtrlGetSearchFlags _obj 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetSearchFlags" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetSearchFlags cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetSearchFlags" wxStyledTextCtrl_GetSearchFlags :: Ptr (TStyledTextCtrl a) -> IO CInt
+
+-- | usage: (@styledTextCtrlGetSelectedText obj@).
+styledTextCtrlGetSelectedText :: StyledTextCtrl  a ->  IO (String)
+styledTextCtrlGetSelectedText _obj 
+  = withManagedStringResult $
+    withObjectRef "styledTextCtrlGetSelectedText" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetSelectedText cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetSelectedText" wxStyledTextCtrl_GetSelectedText :: Ptr (TStyledTextCtrl a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@styledTextCtrlGetSelection obj startPos endPos@).
+styledTextCtrlGetSelection :: StyledTextCtrl  a -> Ptr CInt -> Ptr CInt ->  IO ()
+styledTextCtrlGetSelection _obj startPos endPos 
+  = withObjectRef "styledTextCtrlGetSelection" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetSelection cobj__obj  startPos  endPos  
+foreign import ccall "wxStyledTextCtrl_GetSelection" wxStyledTextCtrl_GetSelection :: Ptr (TStyledTextCtrl a) -> Ptr CInt -> Ptr CInt -> IO ()
+
+-- | usage: (@styledTextCtrlGetSelectionEnd obj@).
+styledTextCtrlGetSelectionEnd :: StyledTextCtrl  a ->  IO Int
+styledTextCtrlGetSelectionEnd _obj 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetSelectionEnd" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetSelectionEnd cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetSelectionEnd" wxStyledTextCtrl_GetSelectionEnd :: Ptr (TStyledTextCtrl a) -> IO CInt
+
+-- | usage: (@styledTextCtrlGetSelectionStart obj@).
+styledTextCtrlGetSelectionStart :: StyledTextCtrl  a ->  IO Int
+styledTextCtrlGetSelectionStart _obj 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetSelectionStart" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetSelectionStart cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetSelectionStart" wxStyledTextCtrl_GetSelectionStart :: Ptr (TStyledTextCtrl a) -> IO CInt
+
+-- | usage: (@styledTextCtrlGetStatus obj@).
+styledTextCtrlGetStatus :: StyledTextCtrl  a ->  IO Int
+styledTextCtrlGetStatus _obj 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetStatus" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetStatus cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetStatus" wxStyledTextCtrl_GetStatus :: Ptr (TStyledTextCtrl a) -> IO CInt
+
+-- | usage: (@styledTextCtrlGetStyleAt obj pos@).
+styledTextCtrlGetStyleAt :: StyledTextCtrl  a -> Int ->  IO Int
+styledTextCtrlGetStyleAt _obj pos 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetStyleAt" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetStyleAt cobj__obj  (toCInt pos)  
+foreign import ccall "wxStyledTextCtrl_GetStyleAt" wxStyledTextCtrl_GetStyleAt :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt
+
+-- | usage: (@styledTextCtrlGetStyleBits obj@).
+styledTextCtrlGetStyleBits :: StyledTextCtrl  a ->  IO Int
+styledTextCtrlGetStyleBits _obj 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetStyleBits" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetStyleBits cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetStyleBits" wxStyledTextCtrl_GetStyleBits :: Ptr (TStyledTextCtrl a) -> IO CInt
+
+-- | usage: (@styledTextCtrlGetTabIndents obj@).
+styledTextCtrlGetTabIndents :: StyledTextCtrl  a ->  IO Bool
+styledTextCtrlGetTabIndents _obj 
+  = withBoolResult $
+    withObjectRef "styledTextCtrlGetTabIndents" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetTabIndents cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetTabIndents" wxStyledTextCtrl_GetTabIndents :: Ptr (TStyledTextCtrl a) -> IO CBool
+
+-- | usage: (@styledTextCtrlGetTabWidth obj@).
+styledTextCtrlGetTabWidth :: StyledTextCtrl  a ->  IO Int
+styledTextCtrlGetTabWidth _obj 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetTabWidth" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetTabWidth cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetTabWidth" wxStyledTextCtrl_GetTabWidth :: Ptr (TStyledTextCtrl a) -> IO CInt
+
+-- | usage: (@styledTextCtrlGetTargetEnd obj@).
+styledTextCtrlGetTargetEnd :: StyledTextCtrl  a ->  IO Int
+styledTextCtrlGetTargetEnd _obj 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetTargetEnd" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetTargetEnd cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetTargetEnd" wxStyledTextCtrl_GetTargetEnd :: Ptr (TStyledTextCtrl a) -> IO CInt
+
+-- | usage: (@styledTextCtrlGetTargetStart obj@).
+styledTextCtrlGetTargetStart :: StyledTextCtrl  a ->  IO Int
+styledTextCtrlGetTargetStart _obj 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetTargetStart" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetTargetStart cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetTargetStart" wxStyledTextCtrl_GetTargetStart :: Ptr (TStyledTextCtrl a) -> IO CInt
+
+-- | usage: (@styledTextCtrlGetText obj@).
+styledTextCtrlGetText :: StyledTextCtrl  a ->  IO (String)
+styledTextCtrlGetText _obj 
+  = withManagedStringResult $
+    withObjectRef "styledTextCtrlGetText" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetText cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetText" wxStyledTextCtrl_GetText :: Ptr (TStyledTextCtrl a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@styledTextCtrlGetTextLength obj@).
+styledTextCtrlGetTextLength :: StyledTextCtrl  a ->  IO Int
+styledTextCtrlGetTextLength _obj 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetTextLength" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetTextLength cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetTextLength" wxStyledTextCtrl_GetTextLength :: Ptr (TStyledTextCtrl a) -> IO CInt
+
+-- | usage: (@styledTextCtrlGetTextRange obj startPos endPos@).
+styledTextCtrlGetTextRange :: StyledTextCtrl  a -> Int -> Int ->  IO (String)
+styledTextCtrlGetTextRange _obj startPos endPos 
+  = withManagedStringResult $
+    withObjectRef "styledTextCtrlGetTextRange" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetTextRange cobj__obj  (toCInt startPos)  (toCInt endPos)  
+foreign import ccall "wxStyledTextCtrl_GetTextRange" wxStyledTextCtrl_GetTextRange :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO (Ptr (TWxString ()))
+
+-- | usage: (@styledTextCtrlGetTwoPhaseDraw obj@).
+styledTextCtrlGetTwoPhaseDraw :: StyledTextCtrl  a ->  IO Bool
+styledTextCtrlGetTwoPhaseDraw _obj 
+  = withBoolResult $
+    withObjectRef "styledTextCtrlGetTwoPhaseDraw" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetTwoPhaseDraw cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetTwoPhaseDraw" wxStyledTextCtrl_GetTwoPhaseDraw :: Ptr (TStyledTextCtrl a) -> IO CBool
+
+-- | usage: (@styledTextCtrlGetUndoCollection obj@).
+styledTextCtrlGetUndoCollection :: StyledTextCtrl  a ->  IO Bool
+styledTextCtrlGetUndoCollection _obj 
+  = withBoolResult $
+    withObjectRef "styledTextCtrlGetUndoCollection" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetUndoCollection cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetUndoCollection" wxStyledTextCtrl_GetUndoCollection :: Ptr (TStyledTextCtrl a) -> IO CBool
+
+-- | usage: (@styledTextCtrlGetUseHorizontalScrollBar obj@).
+styledTextCtrlGetUseHorizontalScrollBar :: StyledTextCtrl  a ->  IO Bool
+styledTextCtrlGetUseHorizontalScrollBar _obj 
+  = withBoolResult $
+    withObjectRef "styledTextCtrlGetUseHorizontalScrollBar" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetUseHorizontalScrollBar cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetUseHorizontalScrollBar" wxStyledTextCtrl_GetUseHorizontalScrollBar :: Ptr (TStyledTextCtrl a) -> IO CBool
+
+-- | usage: (@styledTextCtrlGetUseTabs obj@).
+styledTextCtrlGetUseTabs :: StyledTextCtrl  a ->  IO Bool
+styledTextCtrlGetUseTabs _obj 
+  = withBoolResult $
+    withObjectRef "styledTextCtrlGetUseTabs" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetUseTabs cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetUseTabs" wxStyledTextCtrl_GetUseTabs :: Ptr (TStyledTextCtrl a) -> IO CBool
+
+-- | usage: (@styledTextCtrlGetUseVerticalScrollBar obj@).
+styledTextCtrlGetUseVerticalScrollBar :: StyledTextCtrl  a ->  IO Bool
+styledTextCtrlGetUseVerticalScrollBar _obj 
+  = withBoolResult $
+    withObjectRef "styledTextCtrlGetUseVerticalScrollBar" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetUseVerticalScrollBar cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetUseVerticalScrollBar" wxStyledTextCtrl_GetUseVerticalScrollBar :: Ptr (TStyledTextCtrl a) -> IO CBool
+
+-- | usage: (@styledTextCtrlGetViewEOL obj@).
+styledTextCtrlGetViewEOL :: StyledTextCtrl  a ->  IO Bool
+styledTextCtrlGetViewEOL _obj 
+  = withBoolResult $
+    withObjectRef "styledTextCtrlGetViewEOL" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetViewEOL cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetViewEOL" wxStyledTextCtrl_GetViewEOL :: Ptr (TStyledTextCtrl a) -> IO CBool
+
+-- | usage: (@styledTextCtrlGetViewWhiteSpace obj@).
+styledTextCtrlGetViewWhiteSpace :: StyledTextCtrl  a ->  IO Int
+styledTextCtrlGetViewWhiteSpace _obj 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetViewWhiteSpace" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetViewWhiteSpace cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetViewWhiteSpace" wxStyledTextCtrl_GetViewWhiteSpace :: Ptr (TStyledTextCtrl a) -> IO CInt
+
+-- | usage: (@styledTextCtrlGetWrapMode obj@).
+styledTextCtrlGetWrapMode :: StyledTextCtrl  a ->  IO Int
+styledTextCtrlGetWrapMode _obj 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetWrapMode" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetWrapMode cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetWrapMode" wxStyledTextCtrl_GetWrapMode :: Ptr (TStyledTextCtrl a) -> IO CInt
+
+-- | usage: (@styledTextCtrlGetXOffset obj@).
+styledTextCtrlGetXOffset :: StyledTextCtrl  a ->  IO Int
+styledTextCtrlGetXOffset _obj 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetXOffset" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetXOffset cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetXOffset" wxStyledTextCtrl_GetXOffset :: Ptr (TStyledTextCtrl a) -> IO CInt
+
+-- | usage: (@styledTextCtrlGetZoom obj@).
+styledTextCtrlGetZoom :: StyledTextCtrl  a ->  IO Int
+styledTextCtrlGetZoom _obj 
+  = withIntResult $
+    withObjectRef "styledTextCtrlGetZoom" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GetZoom cobj__obj  
+foreign import ccall "wxStyledTextCtrl_GetZoom" wxStyledTextCtrl_GetZoom :: Ptr (TStyledTextCtrl a) -> IO CInt
+
+-- | usage: (@styledTextCtrlGotoLine obj line@).
+styledTextCtrlGotoLine :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlGotoLine _obj line 
+  = withObjectRef "styledTextCtrlGotoLine" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GotoLine cobj__obj  (toCInt line)  
+foreign import ccall "wxStyledTextCtrl_GotoLine" wxStyledTextCtrl_GotoLine :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlGotoPos obj pos@).
+styledTextCtrlGotoPos :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlGotoPos _obj pos 
+  = withObjectRef "styledTextCtrlGotoPos" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_GotoPos cobj__obj  (toCInt pos)  
+foreign import ccall "wxStyledTextCtrl_GotoPos" wxStyledTextCtrl_GotoPos :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlHideLines obj lineStart lineEnd@).
+styledTextCtrlHideLines :: StyledTextCtrl  a -> Int -> Int ->  IO ()
+styledTextCtrlHideLines _obj lineStart lineEnd 
+  = withObjectRef "styledTextCtrlHideLines" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_HideLines cobj__obj  (toCInt lineStart)  (toCInt lineEnd)  
+foreign import ccall "wxStyledTextCtrl_HideLines" wxStyledTextCtrl_HideLines :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlHideSelection obj normal@).
+styledTextCtrlHideSelection :: StyledTextCtrl  a -> Bool ->  IO ()
+styledTextCtrlHideSelection _obj normal 
+  = withObjectRef "styledTextCtrlHideSelection" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_HideSelection cobj__obj  (toCBool normal)  
+foreign import ccall "wxStyledTextCtrl_HideSelection" wxStyledTextCtrl_HideSelection :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()
+
+-- | usage: (@styledTextCtrlHomeDisplay obj@).
+styledTextCtrlHomeDisplay :: StyledTextCtrl  a ->  IO ()
+styledTextCtrlHomeDisplay _obj 
+  = withObjectRef "styledTextCtrlHomeDisplay" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_HomeDisplay cobj__obj  
+foreign import ccall "wxStyledTextCtrl_HomeDisplay" wxStyledTextCtrl_HomeDisplay :: Ptr (TStyledTextCtrl a) -> IO ()
+
+-- | usage: (@styledTextCtrlHomeDisplayExtend obj@).
+styledTextCtrlHomeDisplayExtend :: StyledTextCtrl  a ->  IO ()
+styledTextCtrlHomeDisplayExtend _obj 
+  = withObjectRef "styledTextCtrlHomeDisplayExtend" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_HomeDisplayExtend cobj__obj  
+foreign import ccall "wxStyledTextCtrl_HomeDisplayExtend" wxStyledTextCtrl_HomeDisplayExtend :: Ptr (TStyledTextCtrl a) -> IO ()
+
+-- | usage: (@styledTextCtrlIndicatorGetForeground obj indic@).
+styledTextCtrlIndicatorGetForeground :: StyledTextCtrl  a -> Int ->  IO (Color)
+styledTextCtrlIndicatorGetForeground _obj indic 
+  = withManagedColourResult $
+    withObjectRef "styledTextCtrlIndicatorGetForeground" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_IndicatorGetForeground cobj__obj  (toCInt indic)  
+foreign import ccall "wxStyledTextCtrl_IndicatorGetForeground" wxStyledTextCtrl_IndicatorGetForeground :: Ptr (TStyledTextCtrl a) -> CInt -> IO (Ptr (TColour ()))
+
+-- | usage: (@styledTextCtrlIndicatorGetStyle obj indic@).
+styledTextCtrlIndicatorGetStyle :: StyledTextCtrl  a -> Int ->  IO Int
+styledTextCtrlIndicatorGetStyle _obj indic 
+  = withIntResult $
+    withObjectRef "styledTextCtrlIndicatorGetStyle" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_IndicatorGetStyle cobj__obj  (toCInt indic)  
+foreign import ccall "wxStyledTextCtrl_IndicatorGetStyle" wxStyledTextCtrl_IndicatorGetStyle :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt
+
+-- | usage: (@styledTextCtrlIndicatorSetForeground obj indic forerforegforeb@).
+styledTextCtrlIndicatorSetForeground :: StyledTextCtrl  a -> Int -> Color ->  IO ()
+styledTextCtrlIndicatorSetForeground _obj indic forerforegforeb 
+  = withObjectRef "styledTextCtrlIndicatorSetForeground" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_IndicatorSetForeground cobj__obj  (toCInt indic)  (colorRed forerforegforeb) (colorGreen forerforegforeb) (colorBlue forerforegforeb)  
+foreign import ccall "wxStyledTextCtrl_IndicatorSetForeground" wxStyledTextCtrl_IndicatorSetForeground :: Ptr (TStyledTextCtrl a) -> CInt -> Word8 -> Word8 -> Word8 -> IO ()
+
+-- | usage: (@styledTextCtrlIndicatorSetStyle obj indic style@).
+styledTextCtrlIndicatorSetStyle :: StyledTextCtrl  a -> Int -> Int ->  IO ()
+styledTextCtrlIndicatorSetStyle _obj indic style 
+  = withObjectRef "styledTextCtrlIndicatorSetStyle" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_IndicatorSetStyle cobj__obj  (toCInt indic)  (toCInt style)  
+foreign import ccall "wxStyledTextCtrl_IndicatorSetStyle" wxStyledTextCtrl_IndicatorSetStyle :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlInsertText obj pos text@).
+styledTextCtrlInsertText :: StyledTextCtrl  a -> Int -> String ->  IO ()
+styledTextCtrlInsertText _obj pos text 
+  = withObjectRef "styledTextCtrlInsertText" _obj $ \cobj__obj -> 
+    withStringPtr text $ \cobj_text -> 
+    wxStyledTextCtrl_InsertText cobj__obj  (toCInt pos)  cobj_text  
+foreign import ccall "wxStyledTextCtrl_InsertText" wxStyledTextCtrl_InsertText :: Ptr (TStyledTextCtrl a) -> CInt -> Ptr (TWxString c) -> IO ()
+
+-- | usage: (@styledTextCtrlLineCopy obj@).
+styledTextCtrlLineCopy :: StyledTextCtrl  a ->  IO ()
+styledTextCtrlLineCopy _obj 
+  = withObjectRef "styledTextCtrlLineCopy" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_LineCopy cobj__obj  
+foreign import ccall "wxStyledTextCtrl_LineCopy" wxStyledTextCtrl_LineCopy :: Ptr (TStyledTextCtrl a) -> IO ()
+
+-- | usage: (@styledTextCtrlLineDuplicate obj@).
+styledTextCtrlLineDuplicate :: StyledTextCtrl  a ->  IO ()
+styledTextCtrlLineDuplicate _obj 
+  = withObjectRef "styledTextCtrlLineDuplicate" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_LineDuplicate cobj__obj  
+foreign import ccall "wxStyledTextCtrl_LineDuplicate" wxStyledTextCtrl_LineDuplicate :: Ptr (TStyledTextCtrl a) -> IO ()
+
+-- | usage: (@styledTextCtrlLineEndDisplay obj@).
+styledTextCtrlLineEndDisplay :: StyledTextCtrl  a ->  IO ()
+styledTextCtrlLineEndDisplay _obj 
+  = withObjectRef "styledTextCtrlLineEndDisplay" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_LineEndDisplay cobj__obj  
+foreign import ccall "wxStyledTextCtrl_LineEndDisplay" wxStyledTextCtrl_LineEndDisplay :: Ptr (TStyledTextCtrl a) -> IO ()
+
+-- | usage: (@styledTextCtrlLineEndDisplayExtend obj@).
+styledTextCtrlLineEndDisplayExtend :: StyledTextCtrl  a ->  IO ()
+styledTextCtrlLineEndDisplayExtend _obj 
+  = withObjectRef "styledTextCtrlLineEndDisplayExtend" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_LineEndDisplayExtend cobj__obj  
+foreign import ccall "wxStyledTextCtrl_LineEndDisplayExtend" wxStyledTextCtrl_LineEndDisplayExtend :: Ptr (TStyledTextCtrl a) -> IO ()
+
+-- | usage: (@styledTextCtrlLineFromPosition obj pos@).
+styledTextCtrlLineFromPosition :: StyledTextCtrl  a -> Int ->  IO Int
+styledTextCtrlLineFromPosition _obj pos 
+  = withIntResult $
+    withObjectRef "styledTextCtrlLineFromPosition" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_LineFromPosition cobj__obj  (toCInt pos)  
+foreign import ccall "wxStyledTextCtrl_LineFromPosition" wxStyledTextCtrl_LineFromPosition :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt
+
+-- | usage: (@styledTextCtrlLineLength obj line@).
+styledTextCtrlLineLength :: StyledTextCtrl  a -> Int ->  IO Int
+styledTextCtrlLineLength _obj line 
+  = withIntResult $
+    withObjectRef "styledTextCtrlLineLength" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_LineLength cobj__obj  (toCInt line)  
+foreign import ccall "wxStyledTextCtrl_LineLength" wxStyledTextCtrl_LineLength :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt
+
+-- | usage: (@styledTextCtrlLineScroll obj columns lines@).
+styledTextCtrlLineScroll :: StyledTextCtrl  a -> Int -> Int ->  IO ()
+styledTextCtrlLineScroll _obj columns lines 
+  = withObjectRef "styledTextCtrlLineScroll" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_LineScroll cobj__obj  (toCInt columns)  (toCInt lines)  
+foreign import ccall "wxStyledTextCtrl_LineScroll" wxStyledTextCtrl_LineScroll :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlLinesJoin obj@).
+styledTextCtrlLinesJoin :: StyledTextCtrl  a ->  IO ()
+styledTextCtrlLinesJoin _obj 
+  = withObjectRef "styledTextCtrlLinesJoin" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_LinesJoin cobj__obj  
+foreign import ccall "wxStyledTextCtrl_LinesJoin" wxStyledTextCtrl_LinesJoin :: Ptr (TStyledTextCtrl a) -> IO ()
+
+-- | usage: (@styledTextCtrlLinesOnScreen obj@).
+styledTextCtrlLinesOnScreen :: StyledTextCtrl  a ->  IO Int
+styledTextCtrlLinesOnScreen _obj 
+  = withIntResult $
+    withObjectRef "styledTextCtrlLinesOnScreen" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_LinesOnScreen cobj__obj  
+foreign import ccall "wxStyledTextCtrl_LinesOnScreen" wxStyledTextCtrl_LinesOnScreen :: Ptr (TStyledTextCtrl a) -> IO CInt
+
+-- | usage: (@styledTextCtrlLinesSplit obj pixelWidth@).
+styledTextCtrlLinesSplit :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlLinesSplit _obj pixelWidth 
+  = withObjectRef "styledTextCtrlLinesSplit" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_LinesSplit cobj__obj  (toCInt pixelWidth)  
+foreign import ccall "wxStyledTextCtrl_LinesSplit" wxStyledTextCtrl_LinesSplit :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlLoadFile obj filename@).
+styledTextCtrlLoadFile :: StyledTextCtrl  a -> String ->  IO Bool
+styledTextCtrlLoadFile _obj filename 
+  = withBoolResult $
+    withObjectRef "styledTextCtrlLoadFile" _obj $ \cobj__obj -> 
+    withStringPtr filename $ \cobj_filename -> 
+    wxStyledTextCtrl_LoadFile cobj__obj  cobj_filename  
+foreign import ccall "wxStyledTextCtrl_LoadFile" wxStyledTextCtrl_LoadFile :: Ptr (TStyledTextCtrl a) -> Ptr (TWxString b) -> IO CBool
+
+-- | usage: (@styledTextCtrlMarkerAdd obj line markerNumber@).
+styledTextCtrlMarkerAdd :: StyledTextCtrl  a -> Int -> Int ->  IO Int
+styledTextCtrlMarkerAdd _obj line markerNumber 
+  = withIntResult $
+    withObjectRef "styledTextCtrlMarkerAdd" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_MarkerAdd cobj__obj  (toCInt line)  (toCInt markerNumber)  
+foreign import ccall "wxStyledTextCtrl_MarkerAdd" wxStyledTextCtrl_MarkerAdd :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO CInt
+
+-- | usage: (@styledTextCtrlMarkerDefine obj markerNumber markerSymbol foregroundrforegroundgforegroundb backgroundrbackgroundgbackgroundb@).
+styledTextCtrlMarkerDefine :: StyledTextCtrl  a -> Int -> Int -> Color -> Color ->  IO ()
+styledTextCtrlMarkerDefine _obj markerNumber markerSymbol foregroundrforegroundgforegroundb backgroundrbackgroundgbackgroundb 
+  = withObjectRef "styledTextCtrlMarkerDefine" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_MarkerDefine cobj__obj  (toCInt markerNumber)  (toCInt markerSymbol)  (colorRed foregroundrforegroundgforegroundb) (colorGreen foregroundrforegroundgforegroundb) (colorBlue foregroundrforegroundgforegroundb)  (colorRed backgroundrbackgroundgbackgroundb) (colorGreen backgroundrbackgroundgbackgroundb) (colorBlue backgroundrbackgroundgbackgroundb)  
+foreign import ccall "wxStyledTextCtrl_MarkerDefine" wxStyledTextCtrl_MarkerDefine :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> Word8 -> Word8 -> Word8 -> Word8 -> Word8 -> Word8 -> IO ()
+
+-- | usage: (@styledTextCtrlMarkerDefineBitmap obj markerNumber bmp@).
+styledTextCtrlMarkerDefineBitmap :: StyledTextCtrl  a -> Int -> Bitmap  c ->  IO ()
+styledTextCtrlMarkerDefineBitmap _obj markerNumber bmp 
+  = withObjectRef "styledTextCtrlMarkerDefineBitmap" _obj $ \cobj__obj -> 
+    withObjectPtr bmp $ \cobj_bmp -> 
+    wxStyledTextCtrl_MarkerDefineBitmap cobj__obj  (toCInt markerNumber)  cobj_bmp  
+foreign import ccall "wxStyledTextCtrl_MarkerDefineBitmap" wxStyledTextCtrl_MarkerDefineBitmap :: Ptr (TStyledTextCtrl a) -> CInt -> Ptr (TBitmap c) -> IO ()
+
+-- | usage: (@styledTextCtrlMarkerDelete obj line markerNumber@).
+styledTextCtrlMarkerDelete :: StyledTextCtrl  a -> Int -> Int ->  IO ()
+styledTextCtrlMarkerDelete _obj line markerNumber 
+  = withObjectRef "styledTextCtrlMarkerDelete" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_MarkerDelete cobj__obj  (toCInt line)  (toCInt markerNumber)  
+foreign import ccall "wxStyledTextCtrl_MarkerDelete" wxStyledTextCtrl_MarkerDelete :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlMarkerDeleteAll obj markerNumber@).
+styledTextCtrlMarkerDeleteAll :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlMarkerDeleteAll _obj markerNumber 
+  = withObjectRef "styledTextCtrlMarkerDeleteAll" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_MarkerDeleteAll cobj__obj  (toCInt markerNumber)  
+foreign import ccall "wxStyledTextCtrl_MarkerDeleteAll" wxStyledTextCtrl_MarkerDeleteAll :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlMarkerDeleteHandle obj handle@).
+styledTextCtrlMarkerDeleteHandle :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlMarkerDeleteHandle _obj handle 
+  = withObjectRef "styledTextCtrlMarkerDeleteHandle" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_MarkerDeleteHandle cobj__obj  (toCInt handle)  
+foreign import ccall "wxStyledTextCtrl_MarkerDeleteHandle" wxStyledTextCtrl_MarkerDeleteHandle :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlMarkerGet obj line@).
+styledTextCtrlMarkerGet :: StyledTextCtrl  a -> Int ->  IO Int
+styledTextCtrlMarkerGet _obj line 
+  = withIntResult $
+    withObjectRef "styledTextCtrlMarkerGet" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_MarkerGet cobj__obj  (toCInt line)  
+foreign import ccall "wxStyledTextCtrl_MarkerGet" wxStyledTextCtrl_MarkerGet :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt
+
+-- | usage: (@styledTextCtrlMarkerLineFromHandle obj handle@).
+styledTextCtrlMarkerLineFromHandle :: StyledTextCtrl  a -> Int ->  IO Int
+styledTextCtrlMarkerLineFromHandle _obj handle 
+  = withIntResult $
+    withObjectRef "styledTextCtrlMarkerLineFromHandle" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_MarkerLineFromHandle cobj__obj  (toCInt handle)  
+foreign import ccall "wxStyledTextCtrl_MarkerLineFromHandle" wxStyledTextCtrl_MarkerLineFromHandle :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt
+
+-- | usage: (@styledTextCtrlMarkerNext obj lineStart markerMask@).
+styledTextCtrlMarkerNext :: StyledTextCtrl  a -> Int -> Int ->  IO Int
+styledTextCtrlMarkerNext _obj lineStart markerMask 
+  = withIntResult $
+    withObjectRef "styledTextCtrlMarkerNext" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_MarkerNext cobj__obj  (toCInt lineStart)  (toCInt markerMask)  
+foreign import ccall "wxStyledTextCtrl_MarkerNext" wxStyledTextCtrl_MarkerNext :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO CInt
+
+-- | usage: (@styledTextCtrlMarkerPrevious obj lineStart markerMask@).
+styledTextCtrlMarkerPrevious :: StyledTextCtrl  a -> Int -> Int ->  IO Int
+styledTextCtrlMarkerPrevious _obj lineStart markerMask 
+  = withIntResult $
+    withObjectRef "styledTextCtrlMarkerPrevious" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_MarkerPrevious cobj__obj  (toCInt lineStart)  (toCInt markerMask)  
+foreign import ccall "wxStyledTextCtrl_MarkerPrevious" wxStyledTextCtrl_MarkerPrevious :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO CInt
+
+-- | usage: (@styledTextCtrlMarkerSetBackground obj markerNumber backrbackgbackb@).
+styledTextCtrlMarkerSetBackground :: StyledTextCtrl  a -> Int -> Color ->  IO ()
+styledTextCtrlMarkerSetBackground _obj markerNumber backrbackgbackb 
+  = withObjectRef "styledTextCtrlMarkerSetBackground" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_MarkerSetBackground cobj__obj  (toCInt markerNumber)  (colorRed backrbackgbackb) (colorGreen backrbackgbackb) (colorBlue backrbackgbackb)  
+foreign import ccall "wxStyledTextCtrl_MarkerSetBackground" wxStyledTextCtrl_MarkerSetBackground :: Ptr (TStyledTextCtrl a) -> CInt -> Word8 -> Word8 -> Word8 -> IO ()
+
+-- | usage: (@styledTextCtrlMarkerSetForeground obj markerNumber forerforegforeb@).
+styledTextCtrlMarkerSetForeground :: StyledTextCtrl  a -> Int -> Color ->  IO ()
+styledTextCtrlMarkerSetForeground _obj markerNumber forerforegforeb 
+  = withObjectRef "styledTextCtrlMarkerSetForeground" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_MarkerSetForeground cobj__obj  (toCInt markerNumber)  (colorRed forerforegforeb) (colorGreen forerforegforeb) (colorBlue forerforegforeb)  
+foreign import ccall "wxStyledTextCtrl_MarkerSetForeground" wxStyledTextCtrl_MarkerSetForeground :: Ptr (TStyledTextCtrl a) -> CInt -> Word8 -> Word8 -> Word8 -> IO ()
+
+-- | usage: (@styledTextCtrlMoveCaretInsideView obj@).
+styledTextCtrlMoveCaretInsideView :: StyledTextCtrl  a ->  IO ()
+styledTextCtrlMoveCaretInsideView _obj 
+  = withObjectRef "styledTextCtrlMoveCaretInsideView" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_MoveCaretInsideView cobj__obj  
+foreign import ccall "wxStyledTextCtrl_MoveCaretInsideView" wxStyledTextCtrl_MoveCaretInsideView :: Ptr (TStyledTextCtrl a) -> IO ()
+
+-- | usage: (@styledTextCtrlPaste obj@).
+styledTextCtrlPaste :: StyledTextCtrl  a ->  IO ()
+styledTextCtrlPaste _obj 
+  = withObjectRef "styledTextCtrlPaste" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_Paste cobj__obj  
+foreign import ccall "wxStyledTextCtrl_Paste" wxStyledTextCtrl_Paste :: Ptr (TStyledTextCtrl a) -> IO ()
+
+-- | usage: (@styledTextCtrlPointFromPosition obj@).
+styledTextCtrlPointFromPosition :: StyledTextCtrl  a ->  IO (Point)
+styledTextCtrlPointFromPosition _obj 
+  = withWxPointResult $
+    withObjectRef "styledTextCtrlPointFromPosition" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_PointFromPosition cobj__obj  
+foreign import ccall "wxStyledTextCtrl_PointFromPosition" wxStyledTextCtrl_PointFromPosition :: Ptr (TStyledTextCtrl a) -> IO (Ptr (TWxPoint ()))
+
+-- | usage: (@styledTextCtrlPositionAfter obj pos@).
+styledTextCtrlPositionAfter :: StyledTextCtrl  a -> Int ->  IO Int
+styledTextCtrlPositionAfter _obj pos 
+  = withIntResult $
+    withObjectRef "styledTextCtrlPositionAfter" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_PositionAfter cobj__obj  (toCInt pos)  
+foreign import ccall "wxStyledTextCtrl_PositionAfter" wxStyledTextCtrl_PositionAfter :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt
+
+-- | usage: (@styledTextCtrlPositionBefore obj pos@).
+styledTextCtrlPositionBefore :: StyledTextCtrl  a -> Int ->  IO Int
+styledTextCtrlPositionBefore _obj pos 
+  = withIntResult $
+    withObjectRef "styledTextCtrlPositionBefore" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_PositionBefore cobj__obj  (toCInt pos)  
+foreign import ccall "wxStyledTextCtrl_PositionBefore" wxStyledTextCtrl_PositionBefore :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt
+
+-- | usage: (@styledTextCtrlPositionFromLine obj line@).
+styledTextCtrlPositionFromLine :: StyledTextCtrl  a -> Int ->  IO Int
+styledTextCtrlPositionFromLine _obj line 
+  = withIntResult $
+    withObjectRef "styledTextCtrlPositionFromLine" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_PositionFromLine cobj__obj  (toCInt line)  
+foreign import ccall "wxStyledTextCtrl_PositionFromLine" wxStyledTextCtrl_PositionFromLine :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt
+
+-- | usage: (@styledTextCtrlPositionFromPoint obj ptxpty@).
+styledTextCtrlPositionFromPoint :: StyledTextCtrl  a -> Point ->  IO Int
+styledTextCtrlPositionFromPoint _obj ptxpty 
+  = withIntResult $
+    withObjectRef "styledTextCtrlPositionFromPoint" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_PositionFromPoint cobj__obj  (toCIntPointX ptxpty) (toCIntPointY ptxpty)  
+foreign import ccall "wxStyledTextCtrl_PositionFromPoint" wxStyledTextCtrl_PositionFromPoint :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO CInt
+
+-- | usage: (@styledTextCtrlPositionFromPointClose obj xy@).
+styledTextCtrlPositionFromPointClose :: StyledTextCtrl  a -> Point ->  IO Int
+styledTextCtrlPositionFromPointClose _obj xy 
+  = withIntResult $
+    withObjectRef "styledTextCtrlPositionFromPointClose" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_PositionFromPointClose cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxStyledTextCtrl_PositionFromPointClose" wxStyledTextCtrl_PositionFromPointClose :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO CInt
+
+-- | usage: (@styledTextCtrlRedo obj@).
+styledTextCtrlRedo :: StyledTextCtrl  a ->  IO ()
+styledTextCtrlRedo _obj 
+  = withObjectRef "styledTextCtrlRedo" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_Redo cobj__obj  
+foreign import ccall "wxStyledTextCtrl_Redo" wxStyledTextCtrl_Redo :: Ptr (TStyledTextCtrl a) -> IO ()
+
+-- | usage: (@styledTextCtrlRegisterImage obj wxtype bmp@).
+styledTextCtrlRegisterImage :: StyledTextCtrl  a -> Int -> Bitmap  c ->  IO ()
+styledTextCtrlRegisterImage _obj wxtype bmp 
+  = withObjectRef "styledTextCtrlRegisterImage" _obj $ \cobj__obj -> 
+    withObjectPtr bmp $ \cobj_bmp -> 
+    wxStyledTextCtrl_RegisterImage cobj__obj  (toCInt wxtype)  cobj_bmp  
+foreign import ccall "wxStyledTextCtrl_RegisterImage" wxStyledTextCtrl_RegisterImage :: Ptr (TStyledTextCtrl a) -> CInt -> Ptr (TBitmap c) -> IO ()
+
+-- | usage: (@styledTextCtrlReleaseDocument obj docPointer@).
+styledTextCtrlReleaseDocument :: StyledTextCtrl  a -> STCDoc  b ->  IO ()
+styledTextCtrlReleaseDocument _obj docPointer 
+  = withObjectRef "styledTextCtrlReleaseDocument" _obj $ \cobj__obj -> 
+    withObjectPtr docPointer $ \cobj_docPointer -> 
+    wxStyledTextCtrl_ReleaseDocument cobj__obj  cobj_docPointer  
+foreign import ccall "wxStyledTextCtrl_ReleaseDocument" wxStyledTextCtrl_ReleaseDocument :: Ptr (TStyledTextCtrl a) -> Ptr (TSTCDoc b) -> IO ()
+
+-- | usage: (@styledTextCtrlReplaceSelection obj text@).
+styledTextCtrlReplaceSelection :: StyledTextCtrl  a -> String ->  IO ()
+styledTextCtrlReplaceSelection _obj text 
+  = withObjectRef "styledTextCtrlReplaceSelection" _obj $ \cobj__obj -> 
+    withStringPtr text $ \cobj_text -> 
+    wxStyledTextCtrl_ReplaceSelection cobj__obj  cobj_text  
+foreign import ccall "wxStyledTextCtrl_ReplaceSelection" wxStyledTextCtrl_ReplaceSelection :: Ptr (TStyledTextCtrl a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@styledTextCtrlReplaceTarget obj text@).
+styledTextCtrlReplaceTarget :: StyledTextCtrl  a -> String ->  IO Int
+styledTextCtrlReplaceTarget _obj text 
+  = withIntResult $
+    withObjectRef "styledTextCtrlReplaceTarget" _obj $ \cobj__obj -> 
+    withStringPtr text $ \cobj_text -> 
+    wxStyledTextCtrl_ReplaceTarget cobj__obj  cobj_text  
+foreign import ccall "wxStyledTextCtrl_ReplaceTarget" wxStyledTextCtrl_ReplaceTarget :: Ptr (TStyledTextCtrl a) -> Ptr (TWxString b) -> IO CInt
+
+-- | usage: (@styledTextCtrlReplaceTargetRE obj text@).
+styledTextCtrlReplaceTargetRE :: StyledTextCtrl  a -> String ->  IO Int
+styledTextCtrlReplaceTargetRE _obj text 
+  = withIntResult $
+    withObjectRef "styledTextCtrlReplaceTargetRE" _obj $ \cobj__obj -> 
+    withStringPtr text $ \cobj_text -> 
+    wxStyledTextCtrl_ReplaceTargetRE cobj__obj  cobj_text  
+foreign import ccall "wxStyledTextCtrl_ReplaceTargetRE" wxStyledTextCtrl_ReplaceTargetRE :: Ptr (TStyledTextCtrl a) -> Ptr (TWxString b) -> IO CInt
+
+-- | usage: (@styledTextCtrlSaveFile obj filename@).
+styledTextCtrlSaveFile :: StyledTextCtrl  a -> String ->  IO Bool
+styledTextCtrlSaveFile _obj filename 
+  = withBoolResult $
+    withObjectRef "styledTextCtrlSaveFile" _obj $ \cobj__obj -> 
+    withStringPtr filename $ \cobj_filename -> 
+    wxStyledTextCtrl_SaveFile cobj__obj  cobj_filename  
+foreign import ccall "wxStyledTextCtrl_SaveFile" wxStyledTextCtrl_SaveFile :: Ptr (TStyledTextCtrl a) -> Ptr (TWxString b) -> IO CBool
+
+-- | usage: (@styledTextCtrlScrollToColumn obj column@).
+styledTextCtrlScrollToColumn :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlScrollToColumn _obj column 
+  = withObjectRef "styledTextCtrlScrollToColumn" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_ScrollToColumn cobj__obj  (toCInt column)  
+foreign import ccall "wxStyledTextCtrl_ScrollToColumn" wxStyledTextCtrl_ScrollToColumn :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlScrollToLine obj line@).
+styledTextCtrlScrollToLine :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlScrollToLine _obj line 
+  = withObjectRef "styledTextCtrlScrollToLine" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_ScrollToLine cobj__obj  (toCInt line)  
+foreign import ccall "wxStyledTextCtrl_ScrollToLine" wxStyledTextCtrl_ScrollToLine :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlSearchAnchor obj@).
+styledTextCtrlSearchAnchor :: StyledTextCtrl  a ->  IO ()
+styledTextCtrlSearchAnchor _obj 
+  = withObjectRef "styledTextCtrlSearchAnchor" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SearchAnchor cobj__obj  
+foreign import ccall "wxStyledTextCtrl_SearchAnchor" wxStyledTextCtrl_SearchAnchor :: Ptr (TStyledTextCtrl a) -> IO ()
+
+-- | usage: (@styledTextCtrlSearchInTarget obj text@).
+styledTextCtrlSearchInTarget :: StyledTextCtrl  a -> String ->  IO Int
+styledTextCtrlSearchInTarget _obj text 
+  = withIntResult $
+    withObjectRef "styledTextCtrlSearchInTarget" _obj $ \cobj__obj -> 
+    withStringPtr text $ \cobj_text -> 
+    wxStyledTextCtrl_SearchInTarget cobj__obj  cobj_text  
+foreign import ccall "wxStyledTextCtrl_SearchInTarget" wxStyledTextCtrl_SearchInTarget :: Ptr (TStyledTextCtrl a) -> Ptr (TWxString b) -> IO CInt
+
+-- | usage: (@styledTextCtrlSearchNext obj flags text@).
+styledTextCtrlSearchNext :: StyledTextCtrl  a -> Int -> String ->  IO Int
+styledTextCtrlSearchNext _obj flags text 
+  = withIntResult $
+    withObjectRef "styledTextCtrlSearchNext" _obj $ \cobj__obj -> 
+    withStringPtr text $ \cobj_text -> 
+    wxStyledTextCtrl_SearchNext cobj__obj  (toCInt flags)  cobj_text  
+foreign import ccall "wxStyledTextCtrl_SearchNext" wxStyledTextCtrl_SearchNext :: Ptr (TStyledTextCtrl a) -> CInt -> Ptr (TWxString c) -> IO CInt
+
+-- | usage: (@styledTextCtrlSearchPrev obj flags text@).
+styledTextCtrlSearchPrev :: StyledTextCtrl  a -> Int -> String ->  IO Int
+styledTextCtrlSearchPrev _obj flags text 
+  = withIntResult $
+    withObjectRef "styledTextCtrlSearchPrev" _obj $ \cobj__obj -> 
+    withStringPtr text $ \cobj_text -> 
+    wxStyledTextCtrl_SearchPrev cobj__obj  (toCInt flags)  cobj_text  
+foreign import ccall "wxStyledTextCtrl_SearchPrev" wxStyledTextCtrl_SearchPrev :: Ptr (TStyledTextCtrl a) -> CInt -> Ptr (TWxString c) -> IO CInt
+
+-- | usage: (@styledTextCtrlSelectAll obj@).
+styledTextCtrlSelectAll :: StyledTextCtrl  a ->  IO ()
+styledTextCtrlSelectAll _obj 
+  = withObjectRef "styledTextCtrlSelectAll" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SelectAll cobj__obj  
+foreign import ccall "wxStyledTextCtrl_SelectAll" wxStyledTextCtrl_SelectAll :: Ptr (TStyledTextCtrl a) -> IO ()
+
+-- | usage: (@styledTextCtrlSelectionIsRectangle obj@).
+styledTextCtrlSelectionIsRectangle :: StyledTextCtrl  a ->  IO Bool
+styledTextCtrlSelectionIsRectangle _obj 
+  = withBoolResult $
+    withObjectRef "styledTextCtrlSelectionIsRectangle" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SelectionIsRectangle cobj__obj  
+foreign import ccall "wxStyledTextCtrl_SelectionIsRectangle" wxStyledTextCtrl_SelectionIsRectangle :: Ptr (TStyledTextCtrl a) -> IO CBool
+
+-- | usage: (@styledTextCtrlSetAnchor obj posAnchor@).
+styledTextCtrlSetAnchor :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlSetAnchor _obj posAnchor 
+  = withObjectRef "styledTextCtrlSetAnchor" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetAnchor cobj__obj  (toCInt posAnchor)  
+foreign import ccall "wxStyledTextCtrl_SetAnchor" wxStyledTextCtrl_SetAnchor :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlSetBackSpaceUnIndents obj bsUnIndents@).
+styledTextCtrlSetBackSpaceUnIndents :: StyledTextCtrl  a -> Bool ->  IO ()
+styledTextCtrlSetBackSpaceUnIndents _obj bsUnIndents 
+  = withObjectRef "styledTextCtrlSetBackSpaceUnIndents" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetBackSpaceUnIndents cobj__obj  (toCBool bsUnIndents)  
+foreign import ccall "wxStyledTextCtrl_SetBackSpaceUnIndents" wxStyledTextCtrl_SetBackSpaceUnIndents :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()
+
+-- | usage: (@styledTextCtrlSetBufferedDraw obj buffered@).
+styledTextCtrlSetBufferedDraw :: StyledTextCtrl  a -> Bool ->  IO ()
+styledTextCtrlSetBufferedDraw _obj buffered 
+  = withObjectRef "styledTextCtrlSetBufferedDraw" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetBufferedDraw cobj__obj  (toCBool buffered)  
+foreign import ccall "wxStyledTextCtrl_SetBufferedDraw" wxStyledTextCtrl_SetBufferedDraw :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()
+
+-- | usage: (@styledTextCtrlSetCaretForeground obj forerforegforeb@).
+styledTextCtrlSetCaretForeground :: StyledTextCtrl  a -> Color ->  IO ()
+styledTextCtrlSetCaretForeground _obj forerforegforeb 
+  = withObjectRef "styledTextCtrlSetCaretForeground" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetCaretForeground cobj__obj  (colorRed forerforegforeb) (colorGreen forerforegforeb) (colorBlue forerforegforeb)  
+foreign import ccall "wxStyledTextCtrl_SetCaretForeground" wxStyledTextCtrl_SetCaretForeground :: Ptr (TStyledTextCtrl a) -> Word8 -> Word8 -> Word8 -> IO ()
+
+-- | usage: (@styledTextCtrlSetCaretLineBackground obj backrbackgbackb@).
+styledTextCtrlSetCaretLineBackground :: StyledTextCtrl  a -> Color ->  IO ()
+styledTextCtrlSetCaretLineBackground _obj backrbackgbackb 
+  = withObjectRef "styledTextCtrlSetCaretLineBackground" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetCaretLineBackground cobj__obj  (colorRed backrbackgbackb) (colorGreen backrbackgbackb) (colorBlue backrbackgbackb)  
+foreign import ccall "wxStyledTextCtrl_SetCaretLineBackground" wxStyledTextCtrl_SetCaretLineBackground :: Ptr (TStyledTextCtrl a) -> Word8 -> Word8 -> Word8 -> IO ()
+
+-- | usage: (@styledTextCtrlSetCaretLineVisible obj show@).
+styledTextCtrlSetCaretLineVisible :: StyledTextCtrl  a -> Bool ->  IO ()
+styledTextCtrlSetCaretLineVisible _obj show 
+  = withObjectRef "styledTextCtrlSetCaretLineVisible" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetCaretLineVisible cobj__obj  (toCBool show)  
+foreign import ccall "wxStyledTextCtrl_SetCaretLineVisible" wxStyledTextCtrl_SetCaretLineVisible :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()
+
+-- | usage: (@styledTextCtrlSetCaretPeriod obj periodMilliseconds@).
+styledTextCtrlSetCaretPeriod :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlSetCaretPeriod _obj periodMilliseconds 
+  = withObjectRef "styledTextCtrlSetCaretPeriod" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetCaretPeriod cobj__obj  (toCInt periodMilliseconds)  
+foreign import ccall "wxStyledTextCtrl_SetCaretPeriod" wxStyledTextCtrl_SetCaretPeriod :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlSetCaretWidth obj pixelWidth@).
+styledTextCtrlSetCaretWidth :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlSetCaretWidth _obj pixelWidth 
+  = withObjectRef "styledTextCtrlSetCaretWidth" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetCaretWidth cobj__obj  (toCInt pixelWidth)  
+foreign import ccall "wxStyledTextCtrl_SetCaretWidth" wxStyledTextCtrl_SetCaretWidth :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlSetCodePage obj codePage@).
+styledTextCtrlSetCodePage :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlSetCodePage _obj codePage 
+  = withObjectRef "styledTextCtrlSetCodePage" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetCodePage cobj__obj  (toCInt codePage)  
+foreign import ccall "wxStyledTextCtrl_SetCodePage" wxStyledTextCtrl_SetCodePage :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlSetControlCharSymbol obj symbol@).
+styledTextCtrlSetControlCharSymbol :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlSetControlCharSymbol _obj symbol 
+  = withObjectRef "styledTextCtrlSetControlCharSymbol" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetControlCharSymbol cobj__obj  (toCInt symbol)  
+foreign import ccall "wxStyledTextCtrl_SetControlCharSymbol" wxStyledTextCtrl_SetControlCharSymbol :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlSetCurrentPos obj pos@).
+styledTextCtrlSetCurrentPos :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlSetCurrentPos _obj pos 
+  = withObjectRef "styledTextCtrlSetCurrentPos" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetCurrentPos cobj__obj  (toCInt pos)  
+foreign import ccall "wxStyledTextCtrl_SetCurrentPos" wxStyledTextCtrl_SetCurrentPos :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlSetDocPointer obj docPointer@).
+styledTextCtrlSetDocPointer :: StyledTextCtrl  a -> STCDoc  b ->  IO ()
+styledTextCtrlSetDocPointer _obj docPointer 
+  = withObjectRef "styledTextCtrlSetDocPointer" _obj $ \cobj__obj -> 
+    withObjectPtr docPointer $ \cobj_docPointer -> 
+    wxStyledTextCtrl_SetDocPointer cobj__obj  cobj_docPointer  
+foreign import ccall "wxStyledTextCtrl_SetDocPointer" wxStyledTextCtrl_SetDocPointer :: Ptr (TStyledTextCtrl a) -> Ptr (TSTCDoc b) -> IO ()
+
+-- | usage: (@styledTextCtrlSetEOLMode obj eolMode@).
+styledTextCtrlSetEOLMode :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlSetEOLMode _obj eolMode 
+  = withObjectRef "styledTextCtrlSetEOLMode" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetEOLMode cobj__obj  (toCInt eolMode)  
+foreign import ccall "wxStyledTextCtrl_SetEOLMode" wxStyledTextCtrl_SetEOLMode :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlSetEdgeColour obj edgeColourredgeColourgedgeColourb@).
+styledTextCtrlSetEdgeColour :: StyledTextCtrl  a -> Color ->  IO ()
+styledTextCtrlSetEdgeColour _obj edgeColourredgeColourgedgeColourb 
+  = withObjectRef "styledTextCtrlSetEdgeColour" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetEdgeColour cobj__obj  (colorRed edgeColourredgeColourgedgeColourb) (colorGreen edgeColourredgeColourgedgeColourb) (colorBlue edgeColourredgeColourgedgeColourb)  
+foreign import ccall "wxStyledTextCtrl_SetEdgeColour" wxStyledTextCtrl_SetEdgeColour :: Ptr (TStyledTextCtrl a) -> Word8 -> Word8 -> Word8 -> IO ()
+
+-- | usage: (@styledTextCtrlSetEdgeColumn obj column@).
+styledTextCtrlSetEdgeColumn :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlSetEdgeColumn _obj column 
+  = withObjectRef "styledTextCtrlSetEdgeColumn" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetEdgeColumn cobj__obj  (toCInt column)  
+foreign import ccall "wxStyledTextCtrl_SetEdgeColumn" wxStyledTextCtrl_SetEdgeColumn :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlSetEdgeMode obj mode@).
+styledTextCtrlSetEdgeMode :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlSetEdgeMode _obj mode 
+  = withObjectRef "styledTextCtrlSetEdgeMode" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetEdgeMode cobj__obj  (toCInt mode)  
+foreign import ccall "wxStyledTextCtrl_SetEdgeMode" wxStyledTextCtrl_SetEdgeMode :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlSetEndAtLastLine obj endAtLastLine@).
+styledTextCtrlSetEndAtLastLine :: StyledTextCtrl  a -> Bool ->  IO ()
+styledTextCtrlSetEndAtLastLine _obj endAtLastLine 
+  = withObjectRef "styledTextCtrlSetEndAtLastLine" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetEndAtLastLine cobj__obj  (toCBool endAtLastLine)  
+foreign import ccall "wxStyledTextCtrl_SetEndAtLastLine" wxStyledTextCtrl_SetEndAtLastLine :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()
+
+-- | usage: (@styledTextCtrlSetFoldExpanded obj line expanded@).
+styledTextCtrlSetFoldExpanded :: StyledTextCtrl  a -> Int -> Bool ->  IO ()
+styledTextCtrlSetFoldExpanded _obj line expanded 
+  = withObjectRef "styledTextCtrlSetFoldExpanded" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetFoldExpanded cobj__obj  (toCInt line)  (toCBool expanded)  
+foreign import ccall "wxStyledTextCtrl_SetFoldExpanded" wxStyledTextCtrl_SetFoldExpanded :: Ptr (TStyledTextCtrl a) -> CInt -> CBool -> IO ()
+
+-- | usage: (@styledTextCtrlSetFoldFlags obj flags@).
+styledTextCtrlSetFoldFlags :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlSetFoldFlags _obj flags 
+  = withObjectRef "styledTextCtrlSetFoldFlags" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetFoldFlags cobj__obj  (toCInt flags)  
+foreign import ccall "wxStyledTextCtrl_SetFoldFlags" wxStyledTextCtrl_SetFoldFlags :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlSetFoldLevel obj line level@).
+styledTextCtrlSetFoldLevel :: StyledTextCtrl  a -> Int -> Int ->  IO ()
+styledTextCtrlSetFoldLevel _obj line level 
+  = withObjectRef "styledTextCtrlSetFoldLevel" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetFoldLevel cobj__obj  (toCInt line)  (toCInt level)  
+foreign import ccall "wxStyledTextCtrl_SetFoldLevel" wxStyledTextCtrl_SetFoldLevel :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlSetFoldMarginColour obj useSetting backrbackgbackb@).
+styledTextCtrlSetFoldMarginColour :: StyledTextCtrl  a -> Bool -> Color ->  IO ()
+styledTextCtrlSetFoldMarginColour _obj useSetting backrbackgbackb 
+  = withObjectRef "styledTextCtrlSetFoldMarginColour" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetFoldMarginColour cobj__obj  (toCBool useSetting)  (colorRed backrbackgbackb) (colorGreen backrbackgbackb) (colorBlue backrbackgbackb)  
+foreign import ccall "wxStyledTextCtrl_SetFoldMarginColour" wxStyledTextCtrl_SetFoldMarginColour :: Ptr (TStyledTextCtrl a) -> CBool -> Word8 -> Word8 -> Word8 -> IO ()
+
+-- | usage: (@styledTextCtrlSetFoldMarginHiColour obj useSetting forerforegforeb@).
+styledTextCtrlSetFoldMarginHiColour :: StyledTextCtrl  a -> Bool -> Color ->  IO ()
+styledTextCtrlSetFoldMarginHiColour _obj useSetting forerforegforeb 
+  = withObjectRef "styledTextCtrlSetFoldMarginHiColour" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetFoldMarginHiColour cobj__obj  (toCBool useSetting)  (colorRed forerforegforeb) (colorGreen forerforegforeb) (colorBlue forerforegforeb)  
+foreign import ccall "wxStyledTextCtrl_SetFoldMarginHiColour" wxStyledTextCtrl_SetFoldMarginHiColour :: Ptr (TStyledTextCtrl a) -> CBool -> Word8 -> Word8 -> Word8 -> IO ()
+
+-- | usage: (@styledTextCtrlSetHScrollBar obj bar@).
+styledTextCtrlSetHScrollBar :: StyledTextCtrl  a -> ScrollBar  b ->  IO ()
+styledTextCtrlSetHScrollBar _obj bar 
+  = withObjectRef "styledTextCtrlSetHScrollBar" _obj $ \cobj__obj -> 
+    withObjectPtr bar $ \cobj_bar -> 
+    wxStyledTextCtrl_SetHScrollBar cobj__obj  cobj_bar  
+foreign import ccall "wxStyledTextCtrl_SetHScrollBar" wxStyledTextCtrl_SetHScrollBar :: Ptr (TStyledTextCtrl a) -> Ptr (TScrollBar b) -> IO ()
+
+-- | usage: (@styledTextCtrlSetHighlightGuide obj column@).
+styledTextCtrlSetHighlightGuide :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlSetHighlightGuide _obj column 
+  = withObjectRef "styledTextCtrlSetHighlightGuide" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetHighlightGuide cobj__obj  (toCInt column)  
+foreign import ccall "wxStyledTextCtrl_SetHighlightGuide" wxStyledTextCtrl_SetHighlightGuide :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlSetHotspotActiveBackground obj useSetting backrbackgbackb@).
+styledTextCtrlSetHotspotActiveBackground :: StyledTextCtrl  a -> Bool -> Color ->  IO ()
+styledTextCtrlSetHotspotActiveBackground _obj useSetting backrbackgbackb 
+  = withObjectRef "styledTextCtrlSetHotspotActiveBackground" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetHotspotActiveBackground cobj__obj  (toCBool useSetting)  (colorRed backrbackgbackb) (colorGreen backrbackgbackb) (colorBlue backrbackgbackb)  
+foreign import ccall "wxStyledTextCtrl_SetHotspotActiveBackground" wxStyledTextCtrl_SetHotspotActiveBackground :: Ptr (TStyledTextCtrl a) -> CBool -> Word8 -> Word8 -> Word8 -> IO ()
+
+-- | usage: (@styledTextCtrlSetHotspotActiveForeground obj useSetting forerforegforeb@).
+styledTextCtrlSetHotspotActiveForeground :: StyledTextCtrl  a -> Bool -> Color ->  IO ()
+styledTextCtrlSetHotspotActiveForeground _obj useSetting forerforegforeb 
+  = withObjectRef "styledTextCtrlSetHotspotActiveForeground" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetHotspotActiveForeground cobj__obj  (toCBool useSetting)  (colorRed forerforegforeb) (colorGreen forerforegforeb) (colorBlue forerforegforeb)  
+foreign import ccall "wxStyledTextCtrl_SetHotspotActiveForeground" wxStyledTextCtrl_SetHotspotActiveForeground :: Ptr (TStyledTextCtrl a) -> CBool -> Word8 -> Word8 -> Word8 -> IO ()
+
+-- | usage: (@styledTextCtrlSetHotspotActiveUnderline obj underline@).
+styledTextCtrlSetHotspotActiveUnderline :: StyledTextCtrl  a -> Bool ->  IO ()
+styledTextCtrlSetHotspotActiveUnderline _obj underline 
+  = withObjectRef "styledTextCtrlSetHotspotActiveUnderline" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetHotspotActiveUnderline cobj__obj  (toCBool underline)  
+foreign import ccall "wxStyledTextCtrl_SetHotspotActiveUnderline" wxStyledTextCtrl_SetHotspotActiveUnderline :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()
+
+-- | usage: (@styledTextCtrlSetIndent obj indentSize@).
+styledTextCtrlSetIndent :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlSetIndent _obj indentSize 
+  = withObjectRef "styledTextCtrlSetIndent" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetIndent cobj__obj  (toCInt indentSize)  
+foreign import ccall "wxStyledTextCtrl_SetIndent" wxStyledTextCtrl_SetIndent :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlSetIndentationGuides obj show@).
+styledTextCtrlSetIndentationGuides :: StyledTextCtrl  a -> Bool ->  IO ()
+styledTextCtrlSetIndentationGuides _obj show 
+  = withObjectRef "styledTextCtrlSetIndentationGuides" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetIndentationGuides cobj__obj  (toCBool show)  
+foreign import ccall "wxStyledTextCtrl_SetIndentationGuides" wxStyledTextCtrl_SetIndentationGuides :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()
+
+-- | usage: (@styledTextCtrlSetKeyWords obj keywordSet keyWords@).
+styledTextCtrlSetKeyWords :: StyledTextCtrl  a -> Int -> String ->  IO ()
+styledTextCtrlSetKeyWords _obj keywordSet keyWords 
+  = withObjectRef "styledTextCtrlSetKeyWords" _obj $ \cobj__obj -> 
+    withStringPtr keyWords $ \cobj_keyWords -> 
+    wxStyledTextCtrl_SetKeyWords cobj__obj  (toCInt keywordSet)  cobj_keyWords  
+foreign import ccall "wxStyledTextCtrl_SetKeyWords" wxStyledTextCtrl_SetKeyWords :: Ptr (TStyledTextCtrl a) -> CInt -> Ptr (TWxString c) -> IO ()
+
+-- | usage: (@styledTextCtrlSetLastKeydownProcessed obj val@).
+styledTextCtrlSetLastKeydownProcessed :: StyledTextCtrl  a -> Bool ->  IO ()
+styledTextCtrlSetLastKeydownProcessed _obj val 
+  = withObjectRef "styledTextCtrlSetLastKeydownProcessed" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetLastKeydownProcessed cobj__obj  (toCBool val)  
+foreign import ccall "wxStyledTextCtrl_SetLastKeydownProcessed" wxStyledTextCtrl_SetLastKeydownProcessed :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()
+
+-- | usage: (@styledTextCtrlSetLayoutCache obj mode@).
+styledTextCtrlSetLayoutCache :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlSetLayoutCache _obj mode 
+  = withObjectRef "styledTextCtrlSetLayoutCache" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetLayoutCache cobj__obj  (toCInt mode)  
+foreign import ccall "wxStyledTextCtrl_SetLayoutCache" wxStyledTextCtrl_SetLayoutCache :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlSetLexer obj lexer@).
+styledTextCtrlSetLexer :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlSetLexer _obj lexer 
+  = withObjectRef "styledTextCtrlSetLexer" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetLexer cobj__obj  (toCInt lexer)  
+foreign import ccall "wxStyledTextCtrl_SetLexer" wxStyledTextCtrl_SetLexer :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlSetLexerLanguage obj language@).
+styledTextCtrlSetLexerLanguage :: StyledTextCtrl  a -> String ->  IO ()
+styledTextCtrlSetLexerLanguage _obj language 
+  = withObjectRef "styledTextCtrlSetLexerLanguage" _obj $ \cobj__obj -> 
+    withStringPtr language $ \cobj_language -> 
+    wxStyledTextCtrl_SetLexerLanguage cobj__obj  cobj_language  
+foreign import ccall "wxStyledTextCtrl_SetLexerLanguage" wxStyledTextCtrl_SetLexerLanguage :: Ptr (TStyledTextCtrl a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@styledTextCtrlSetLineIndentation obj line indentSize@).
+styledTextCtrlSetLineIndentation :: StyledTextCtrl  a -> Int -> Int ->  IO ()
+styledTextCtrlSetLineIndentation _obj line indentSize 
+  = withObjectRef "styledTextCtrlSetLineIndentation" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetLineIndentation cobj__obj  (toCInt line)  (toCInt indentSize)  
+foreign import ccall "wxStyledTextCtrl_SetLineIndentation" wxStyledTextCtrl_SetLineIndentation :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlSetLineState obj line state@).
+styledTextCtrlSetLineState :: StyledTextCtrl  a -> Int -> Int ->  IO ()
+styledTextCtrlSetLineState _obj line state 
+  = withObjectRef "styledTextCtrlSetLineState" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetLineState cobj__obj  (toCInt line)  (toCInt state)  
+foreign import ccall "wxStyledTextCtrl_SetLineState" wxStyledTextCtrl_SetLineState :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlSetMarginLeft obj pixelWidth@).
+styledTextCtrlSetMarginLeft :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlSetMarginLeft _obj pixelWidth 
+  = withObjectRef "styledTextCtrlSetMarginLeft" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetMarginLeft cobj__obj  (toCInt pixelWidth)  
+foreign import ccall "wxStyledTextCtrl_SetMarginLeft" wxStyledTextCtrl_SetMarginLeft :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlSetMarginMask obj margin mask@).
+styledTextCtrlSetMarginMask :: StyledTextCtrl  a -> Int -> Int ->  IO ()
+styledTextCtrlSetMarginMask _obj margin mask 
+  = withObjectRef "styledTextCtrlSetMarginMask" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetMarginMask cobj__obj  (toCInt margin)  (toCInt mask)  
+foreign import ccall "wxStyledTextCtrl_SetMarginMask" wxStyledTextCtrl_SetMarginMask :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlSetMarginRight obj pixelWidth@).
+styledTextCtrlSetMarginRight :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlSetMarginRight _obj pixelWidth 
+  = withObjectRef "styledTextCtrlSetMarginRight" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetMarginRight cobj__obj  (toCInt pixelWidth)  
+foreign import ccall "wxStyledTextCtrl_SetMarginRight" wxStyledTextCtrl_SetMarginRight :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlSetMarginSensitive obj margin sensitive@).
+styledTextCtrlSetMarginSensitive :: StyledTextCtrl  a -> Int -> Bool ->  IO ()
+styledTextCtrlSetMarginSensitive _obj margin sensitive 
+  = withObjectRef "styledTextCtrlSetMarginSensitive" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetMarginSensitive cobj__obj  (toCInt margin)  (toCBool sensitive)  
+foreign import ccall "wxStyledTextCtrl_SetMarginSensitive" wxStyledTextCtrl_SetMarginSensitive :: Ptr (TStyledTextCtrl a) -> CInt -> CBool -> IO ()
+
+-- | usage: (@styledTextCtrlSetMarginType obj margin marginType@).
+styledTextCtrlSetMarginType :: StyledTextCtrl  a -> Int -> Int ->  IO ()
+styledTextCtrlSetMarginType _obj margin marginType 
+  = withObjectRef "styledTextCtrlSetMarginType" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetMarginType cobj__obj  (toCInt margin)  (toCInt marginType)  
+foreign import ccall "wxStyledTextCtrl_SetMarginType" wxStyledTextCtrl_SetMarginType :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlSetMarginWidth obj margin pixelWidth@).
+styledTextCtrlSetMarginWidth :: StyledTextCtrl  a -> Int -> Int ->  IO ()
+styledTextCtrlSetMarginWidth _obj margin pixelWidth 
+  = withObjectRef "styledTextCtrlSetMarginWidth" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetMarginWidth cobj__obj  (toCInt margin)  (toCInt pixelWidth)  
+foreign import ccall "wxStyledTextCtrl_SetMarginWidth" wxStyledTextCtrl_SetMarginWidth :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlSetMargins obj left right@).
+styledTextCtrlSetMargins :: StyledTextCtrl  a -> Int -> Int ->  IO ()
+styledTextCtrlSetMargins _obj left right 
+  = withObjectRef "styledTextCtrlSetMargins" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetMargins cobj__obj  (toCInt left)  (toCInt right)  
+foreign import ccall "wxStyledTextCtrl_SetMargins" wxStyledTextCtrl_SetMargins :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlSetModEventMask obj mask@).
+styledTextCtrlSetModEventMask :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlSetModEventMask _obj mask 
+  = withObjectRef "styledTextCtrlSetModEventMask" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetModEventMask cobj__obj  (toCInt mask)  
+foreign import ccall "wxStyledTextCtrl_SetModEventMask" wxStyledTextCtrl_SetModEventMask :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlSetMouseDownCaptures obj captures@).
+styledTextCtrlSetMouseDownCaptures :: StyledTextCtrl  a -> Bool ->  IO ()
+styledTextCtrlSetMouseDownCaptures _obj captures 
+  = withObjectRef "styledTextCtrlSetMouseDownCaptures" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetMouseDownCaptures cobj__obj  (toCBool captures)  
+foreign import ccall "wxStyledTextCtrl_SetMouseDownCaptures" wxStyledTextCtrl_SetMouseDownCaptures :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()
+
+-- | usage: (@styledTextCtrlSetMouseDwellTime obj periodMilliseconds@).
+styledTextCtrlSetMouseDwellTime :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlSetMouseDwellTime _obj periodMilliseconds 
+  = withObjectRef "styledTextCtrlSetMouseDwellTime" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetMouseDwellTime cobj__obj  (toCInt periodMilliseconds)  
+foreign import ccall "wxStyledTextCtrl_SetMouseDwellTime" wxStyledTextCtrl_SetMouseDwellTime :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlSetOvertype obj overtype@).
+styledTextCtrlSetOvertype :: StyledTextCtrl  a -> Bool ->  IO ()
+styledTextCtrlSetOvertype _obj overtype 
+  = withObjectRef "styledTextCtrlSetOvertype" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetOvertype cobj__obj  (toCBool overtype)  
+foreign import ccall "wxStyledTextCtrl_SetOvertype" wxStyledTextCtrl_SetOvertype :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()
+
+-- | usage: (@styledTextCtrlSetPrintColourMode obj mode@).
+styledTextCtrlSetPrintColourMode :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlSetPrintColourMode _obj mode 
+  = withObjectRef "styledTextCtrlSetPrintColourMode" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetPrintColourMode cobj__obj  (toCInt mode)  
+foreign import ccall "wxStyledTextCtrl_SetPrintColourMode" wxStyledTextCtrl_SetPrintColourMode :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlSetPrintMagnification obj magnification@).
+styledTextCtrlSetPrintMagnification :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlSetPrintMagnification _obj magnification 
+  = withObjectRef "styledTextCtrlSetPrintMagnification" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetPrintMagnification cobj__obj  (toCInt magnification)  
+foreign import ccall "wxStyledTextCtrl_SetPrintMagnification" wxStyledTextCtrl_SetPrintMagnification :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlSetPrintWrapMode obj mode@).
+styledTextCtrlSetPrintWrapMode :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlSetPrintWrapMode _obj mode 
+  = withObjectRef "styledTextCtrlSetPrintWrapMode" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetPrintWrapMode cobj__obj  (toCInt mode)  
+foreign import ccall "wxStyledTextCtrl_SetPrintWrapMode" wxStyledTextCtrl_SetPrintWrapMode :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlSetProperty obj key value@).
+styledTextCtrlSetProperty :: StyledTextCtrl  a -> String -> String ->  IO ()
+styledTextCtrlSetProperty _obj key value 
+  = withObjectRef "styledTextCtrlSetProperty" _obj $ \cobj__obj -> 
+    withStringPtr key $ \cobj_key -> 
+    withStringPtr value $ \cobj_value -> 
+    wxStyledTextCtrl_SetProperty cobj__obj  cobj_key  cobj_value  
+foreign import ccall "wxStyledTextCtrl_SetProperty" wxStyledTextCtrl_SetProperty :: Ptr (TStyledTextCtrl a) -> Ptr (TWxString b) -> Ptr (TWxString c) -> IO ()
+
+-- | usage: (@styledTextCtrlSetReadOnly obj readOnly@).
+styledTextCtrlSetReadOnly :: StyledTextCtrl  a -> Bool ->  IO ()
+styledTextCtrlSetReadOnly _obj readOnly 
+  = withObjectRef "styledTextCtrlSetReadOnly" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetReadOnly cobj__obj  (toCBool readOnly)  
+foreign import ccall "wxStyledTextCtrl_SetReadOnly" wxStyledTextCtrl_SetReadOnly :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()
+
+-- | usage: (@styledTextCtrlSetSTCCursor obj cursorType@).
+styledTextCtrlSetSTCCursor :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlSetSTCCursor _obj cursorType 
+  = withObjectRef "styledTextCtrlSetSTCCursor" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetSTCCursor cobj__obj  (toCInt cursorType)  
+foreign import ccall "wxStyledTextCtrl_SetSTCCursor" wxStyledTextCtrl_SetSTCCursor :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlSetSTCFocus obj focus@).
+styledTextCtrlSetSTCFocus :: StyledTextCtrl  a -> Bool ->  IO ()
+styledTextCtrlSetSTCFocus _obj focus 
+  = withObjectRef "styledTextCtrlSetSTCFocus" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetSTCFocus cobj__obj  (toCBool focus)  
+foreign import ccall "wxStyledTextCtrl_SetSTCFocus" wxStyledTextCtrl_SetSTCFocus :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()
+
+-- | usage: (@styledTextCtrlSetSavePoint obj@).
+styledTextCtrlSetSavePoint :: StyledTextCtrl  a ->  IO ()
+styledTextCtrlSetSavePoint _obj 
+  = withObjectRef "styledTextCtrlSetSavePoint" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetSavePoint cobj__obj  
+foreign import ccall "wxStyledTextCtrl_SetSavePoint" wxStyledTextCtrl_SetSavePoint :: Ptr (TStyledTextCtrl a) -> IO ()
+
+-- | usage: (@styledTextCtrlSetScrollWidth obj pixelWidth@).
+styledTextCtrlSetScrollWidth :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlSetScrollWidth _obj pixelWidth 
+  = withObjectRef "styledTextCtrlSetScrollWidth" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetScrollWidth cobj__obj  (toCInt pixelWidth)  
+foreign import ccall "wxStyledTextCtrl_SetScrollWidth" wxStyledTextCtrl_SetScrollWidth :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlSetSearchFlags obj flags@).
+styledTextCtrlSetSearchFlags :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlSetSearchFlags _obj flags 
+  = withObjectRef "styledTextCtrlSetSearchFlags" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetSearchFlags cobj__obj  (toCInt flags)  
+foreign import ccall "wxStyledTextCtrl_SetSearchFlags" wxStyledTextCtrl_SetSearchFlags :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlSetSelBackground obj useSetting backrbackgbackb@).
+styledTextCtrlSetSelBackground :: StyledTextCtrl  a -> Bool -> Color ->  IO ()
+styledTextCtrlSetSelBackground _obj useSetting backrbackgbackb 
+  = withObjectRef "styledTextCtrlSetSelBackground" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetSelBackground cobj__obj  (toCBool useSetting)  (colorRed backrbackgbackb) (colorGreen backrbackgbackb) (colorBlue backrbackgbackb)  
+foreign import ccall "wxStyledTextCtrl_SetSelBackground" wxStyledTextCtrl_SetSelBackground :: Ptr (TStyledTextCtrl a) -> CBool -> Word8 -> Word8 -> Word8 -> IO ()
+
+-- | usage: (@styledTextCtrlSetSelForeground obj useSetting forerforegforeb@).
+styledTextCtrlSetSelForeground :: StyledTextCtrl  a -> Bool -> Color ->  IO ()
+styledTextCtrlSetSelForeground _obj useSetting forerforegforeb 
+  = withObjectRef "styledTextCtrlSetSelForeground" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetSelForeground cobj__obj  (toCBool useSetting)  (colorRed forerforegforeb) (colorGreen forerforegforeb) (colorBlue forerforegforeb)  
+foreign import ccall "wxStyledTextCtrl_SetSelForeground" wxStyledTextCtrl_SetSelForeground :: Ptr (TStyledTextCtrl a) -> CBool -> Word8 -> Word8 -> Word8 -> IO ()
+
+-- | usage: (@styledTextCtrlSetSelection obj start end@).
+styledTextCtrlSetSelection :: StyledTextCtrl  a -> Int -> Int ->  IO ()
+styledTextCtrlSetSelection _obj start end 
+  = withObjectRef "styledTextCtrlSetSelection" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetSelection cobj__obj  (toCInt start)  (toCInt end)  
+foreign import ccall "wxStyledTextCtrl_SetSelection" wxStyledTextCtrl_SetSelection :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlSetSelectionEnd obj pos@).
+styledTextCtrlSetSelectionEnd :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlSetSelectionEnd _obj pos 
+  = withObjectRef "styledTextCtrlSetSelectionEnd" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetSelectionEnd cobj__obj  (toCInt pos)  
+foreign import ccall "wxStyledTextCtrl_SetSelectionEnd" wxStyledTextCtrl_SetSelectionEnd :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlSetSelectionStart obj pos@).
+styledTextCtrlSetSelectionStart :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlSetSelectionStart _obj pos 
+  = withObjectRef "styledTextCtrlSetSelectionStart" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetSelectionStart cobj__obj  (toCInt pos)  
+foreign import ccall "wxStyledTextCtrl_SetSelectionStart" wxStyledTextCtrl_SetSelectionStart :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlSetStatus obj statusCode@).
+styledTextCtrlSetStatus :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlSetStatus _obj statusCode 
+  = withObjectRef "styledTextCtrlSetStatus" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetStatus cobj__obj  (toCInt statusCode)  
+foreign import ccall "wxStyledTextCtrl_SetStatus" wxStyledTextCtrl_SetStatus :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlSetStyleBits obj bits@).
+styledTextCtrlSetStyleBits :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlSetStyleBits _obj bits 
+  = withObjectRef "styledTextCtrlSetStyleBits" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetStyleBits cobj__obj  (toCInt bits)  
+foreign import ccall "wxStyledTextCtrl_SetStyleBits" wxStyledTextCtrl_SetStyleBits :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlSetStyleBytes obj length styleBytes@).
+styledTextCtrlSetStyleBytes :: StyledTextCtrl  a -> Int -> String ->  IO ()
+styledTextCtrlSetStyleBytes _obj length styleBytes 
+  = withObjectRef "styledTextCtrlSetStyleBytes" _obj $ \cobj__obj -> 
+    withCWString styleBytes $ \cstr_styleBytes -> 
+    wxStyledTextCtrl_SetStyleBytes cobj__obj  (toCInt length)  cstr_styleBytes  
+foreign import ccall "wxStyledTextCtrl_SetStyleBytes" wxStyledTextCtrl_SetStyleBytes :: Ptr (TStyledTextCtrl a) -> CInt -> CWString -> IO ()
+
+-- | usage: (@styledTextCtrlSetStyling obj length style@).
+styledTextCtrlSetStyling :: StyledTextCtrl  a -> Int -> Int ->  IO ()
+styledTextCtrlSetStyling _obj length style 
+  = withObjectRef "styledTextCtrlSetStyling" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetStyling cobj__obj  (toCInt length)  (toCInt style)  
+foreign import ccall "wxStyledTextCtrl_SetStyling" wxStyledTextCtrl_SetStyling :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlSetTabIndents obj tabIndents@).
+styledTextCtrlSetTabIndents :: StyledTextCtrl  a -> Bool ->  IO ()
+styledTextCtrlSetTabIndents _obj tabIndents 
+  = withObjectRef "styledTextCtrlSetTabIndents" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetTabIndents cobj__obj  (toCBool tabIndents)  
+foreign import ccall "wxStyledTextCtrl_SetTabIndents" wxStyledTextCtrl_SetTabIndents :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()
+
+-- | usage: (@styledTextCtrlSetTabWidth obj tabWidth@).
+styledTextCtrlSetTabWidth :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlSetTabWidth _obj tabWidth 
+  = withObjectRef "styledTextCtrlSetTabWidth" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetTabWidth cobj__obj  (toCInt tabWidth)  
+foreign import ccall "wxStyledTextCtrl_SetTabWidth" wxStyledTextCtrl_SetTabWidth :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlSetTargetEnd obj pos@).
+styledTextCtrlSetTargetEnd :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlSetTargetEnd _obj pos 
+  = withObjectRef "styledTextCtrlSetTargetEnd" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetTargetEnd cobj__obj  (toCInt pos)  
+foreign import ccall "wxStyledTextCtrl_SetTargetEnd" wxStyledTextCtrl_SetTargetEnd :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlSetTargetStart obj pos@).
+styledTextCtrlSetTargetStart :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlSetTargetStart _obj pos 
+  = withObjectRef "styledTextCtrlSetTargetStart" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetTargetStart cobj__obj  (toCInt pos)  
+foreign import ccall "wxStyledTextCtrl_SetTargetStart" wxStyledTextCtrl_SetTargetStart :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlSetText obj text@).
+styledTextCtrlSetText :: StyledTextCtrl  a -> String ->  IO ()
+styledTextCtrlSetText _obj text 
+  = withObjectRef "styledTextCtrlSetText" _obj $ \cobj__obj -> 
+    withStringPtr text $ \cobj_text -> 
+    wxStyledTextCtrl_SetText cobj__obj  cobj_text  
+foreign import ccall "wxStyledTextCtrl_SetText" wxStyledTextCtrl_SetText :: Ptr (TStyledTextCtrl a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@styledTextCtrlSetTwoPhaseDraw obj twoPhase@).
+styledTextCtrlSetTwoPhaseDraw :: StyledTextCtrl  a -> Bool ->  IO ()
+styledTextCtrlSetTwoPhaseDraw _obj twoPhase 
+  = withObjectRef "styledTextCtrlSetTwoPhaseDraw" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetTwoPhaseDraw cobj__obj  (toCBool twoPhase)  
+foreign import ccall "wxStyledTextCtrl_SetTwoPhaseDraw" wxStyledTextCtrl_SetTwoPhaseDraw :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()
+
+-- | usage: (@styledTextCtrlSetUndoCollection obj collectUndo@).
+styledTextCtrlSetUndoCollection :: StyledTextCtrl  a -> Bool ->  IO ()
+styledTextCtrlSetUndoCollection _obj collectUndo 
+  = withObjectRef "styledTextCtrlSetUndoCollection" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetUndoCollection cobj__obj  (toCBool collectUndo)  
+foreign import ccall "wxStyledTextCtrl_SetUndoCollection" wxStyledTextCtrl_SetUndoCollection :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()
+
+-- | usage: (@styledTextCtrlSetUseHorizontalScrollBar obj show@).
+styledTextCtrlSetUseHorizontalScrollBar :: StyledTextCtrl  a -> Bool ->  IO ()
+styledTextCtrlSetUseHorizontalScrollBar _obj show 
+  = withObjectRef "styledTextCtrlSetUseHorizontalScrollBar" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetUseHorizontalScrollBar cobj__obj  (toCBool show)  
+foreign import ccall "wxStyledTextCtrl_SetUseHorizontalScrollBar" wxStyledTextCtrl_SetUseHorizontalScrollBar :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()
+
+-- | usage: (@styledTextCtrlSetUseTabs obj useTabs@).
+styledTextCtrlSetUseTabs :: StyledTextCtrl  a -> Bool ->  IO ()
+styledTextCtrlSetUseTabs _obj useTabs 
+  = withObjectRef "styledTextCtrlSetUseTabs" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetUseTabs cobj__obj  (toCBool useTabs)  
+foreign import ccall "wxStyledTextCtrl_SetUseTabs" wxStyledTextCtrl_SetUseTabs :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()
+
+-- | usage: (@styledTextCtrlSetUseVerticalScrollBar obj show@).
+styledTextCtrlSetUseVerticalScrollBar :: StyledTextCtrl  a -> Bool ->  IO ()
+styledTextCtrlSetUseVerticalScrollBar _obj show 
+  = withObjectRef "styledTextCtrlSetUseVerticalScrollBar" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetUseVerticalScrollBar cobj__obj  (toCBool show)  
+foreign import ccall "wxStyledTextCtrl_SetUseVerticalScrollBar" wxStyledTextCtrl_SetUseVerticalScrollBar :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()
+
+-- | usage: (@styledTextCtrlSetVScrollBar obj bar@).
+styledTextCtrlSetVScrollBar :: StyledTextCtrl  a -> ScrollBar  b ->  IO ()
+styledTextCtrlSetVScrollBar _obj bar 
+  = withObjectRef "styledTextCtrlSetVScrollBar" _obj $ \cobj__obj -> 
+    withObjectPtr bar $ \cobj_bar -> 
+    wxStyledTextCtrl_SetVScrollBar cobj__obj  cobj_bar  
+foreign import ccall "wxStyledTextCtrl_SetVScrollBar" wxStyledTextCtrl_SetVScrollBar :: Ptr (TStyledTextCtrl a) -> Ptr (TScrollBar b) -> IO ()
+
+-- | usage: (@styledTextCtrlSetViewEOL obj visible@).
+styledTextCtrlSetViewEOL :: StyledTextCtrl  a -> Bool ->  IO ()
+styledTextCtrlSetViewEOL _obj visible 
+  = withObjectRef "styledTextCtrlSetViewEOL" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetViewEOL cobj__obj  (toCBool visible)  
+foreign import ccall "wxStyledTextCtrl_SetViewEOL" wxStyledTextCtrl_SetViewEOL :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()
+
+-- | usage: (@styledTextCtrlSetViewWhiteSpace obj viewWS@).
+styledTextCtrlSetViewWhiteSpace :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlSetViewWhiteSpace _obj viewWS 
+  = withObjectRef "styledTextCtrlSetViewWhiteSpace" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetViewWhiteSpace cobj__obj  (toCInt viewWS)  
+foreign import ccall "wxStyledTextCtrl_SetViewWhiteSpace" wxStyledTextCtrl_SetViewWhiteSpace :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlSetVisiblePolicy obj visiblePolicy visibleSlop@).
+styledTextCtrlSetVisiblePolicy :: StyledTextCtrl  a -> Int -> Int ->  IO ()
+styledTextCtrlSetVisiblePolicy _obj visiblePolicy visibleSlop 
+  = withObjectRef "styledTextCtrlSetVisiblePolicy" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetVisiblePolicy cobj__obj  (toCInt visiblePolicy)  (toCInt visibleSlop)  
+foreign import ccall "wxStyledTextCtrl_SetVisiblePolicy" wxStyledTextCtrl_SetVisiblePolicy :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlSetWhitespaceBackground obj useSetting backrbackgbackb@).
+styledTextCtrlSetWhitespaceBackground :: StyledTextCtrl  a -> Bool -> Color ->  IO ()
+styledTextCtrlSetWhitespaceBackground _obj useSetting backrbackgbackb 
+  = withObjectRef "styledTextCtrlSetWhitespaceBackground" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetWhitespaceBackground cobj__obj  (toCBool useSetting)  (colorRed backrbackgbackb) (colorGreen backrbackgbackb) (colorBlue backrbackgbackb)  
+foreign import ccall "wxStyledTextCtrl_SetWhitespaceBackground" wxStyledTextCtrl_SetWhitespaceBackground :: Ptr (TStyledTextCtrl a) -> CBool -> Word8 -> Word8 -> Word8 -> IO ()
+
+-- | usage: (@styledTextCtrlSetWhitespaceForeground obj useSetting forerforegforeb@).
+styledTextCtrlSetWhitespaceForeground :: StyledTextCtrl  a -> Bool -> Color ->  IO ()
+styledTextCtrlSetWhitespaceForeground _obj useSetting forerforegforeb 
+  = withObjectRef "styledTextCtrlSetWhitespaceForeground" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetWhitespaceForeground cobj__obj  (toCBool useSetting)  (colorRed forerforegforeb) (colorGreen forerforegforeb) (colorBlue forerforegforeb)  
+foreign import ccall "wxStyledTextCtrl_SetWhitespaceForeground" wxStyledTextCtrl_SetWhitespaceForeground :: Ptr (TStyledTextCtrl a) -> CBool -> Word8 -> Word8 -> Word8 -> IO ()
+
+-- | usage: (@styledTextCtrlSetWordChars obj characters@).
+styledTextCtrlSetWordChars :: StyledTextCtrl  a -> String ->  IO ()
+styledTextCtrlSetWordChars _obj characters 
+  = withObjectRef "styledTextCtrlSetWordChars" _obj $ \cobj__obj -> 
+    withStringPtr characters $ \cobj_characters -> 
+    wxStyledTextCtrl_SetWordChars cobj__obj  cobj_characters  
+foreign import ccall "wxStyledTextCtrl_SetWordChars" wxStyledTextCtrl_SetWordChars :: Ptr (TStyledTextCtrl a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@styledTextCtrlSetWrapMode obj mode@).
+styledTextCtrlSetWrapMode :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlSetWrapMode _obj mode 
+  = withObjectRef "styledTextCtrlSetWrapMode" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetWrapMode cobj__obj  (toCInt mode)  
+foreign import ccall "wxStyledTextCtrl_SetWrapMode" wxStyledTextCtrl_SetWrapMode :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlSetXCaretPolicy obj caretPolicy caretSlop@).
+styledTextCtrlSetXCaretPolicy :: StyledTextCtrl  a -> Int -> Int ->  IO ()
+styledTextCtrlSetXCaretPolicy _obj caretPolicy caretSlop 
+  = withObjectRef "styledTextCtrlSetXCaretPolicy" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetXCaretPolicy cobj__obj  (toCInt caretPolicy)  (toCInt caretSlop)  
+foreign import ccall "wxStyledTextCtrl_SetXCaretPolicy" wxStyledTextCtrl_SetXCaretPolicy :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlSetXOffset obj newOffset@).
+styledTextCtrlSetXOffset :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlSetXOffset _obj newOffset 
+  = withObjectRef "styledTextCtrlSetXOffset" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetXOffset cobj__obj  (toCInt newOffset)  
+foreign import ccall "wxStyledTextCtrl_SetXOffset" wxStyledTextCtrl_SetXOffset :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlSetYCaretPolicy obj caretPolicy caretSlop@).
+styledTextCtrlSetYCaretPolicy :: StyledTextCtrl  a -> Int -> Int ->  IO ()
+styledTextCtrlSetYCaretPolicy _obj caretPolicy caretSlop 
+  = withObjectRef "styledTextCtrlSetYCaretPolicy" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetYCaretPolicy cobj__obj  (toCInt caretPolicy)  (toCInt caretSlop)  
+foreign import ccall "wxStyledTextCtrl_SetYCaretPolicy" wxStyledTextCtrl_SetYCaretPolicy :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlSetZoom obj zoom@).
+styledTextCtrlSetZoom :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlSetZoom _obj zoom 
+  = withObjectRef "styledTextCtrlSetZoom" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_SetZoom cobj__obj  (toCInt zoom)  
+foreign import ccall "wxStyledTextCtrl_SetZoom" wxStyledTextCtrl_SetZoom :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlShowLines obj lineStart lineEnd@).
+styledTextCtrlShowLines :: StyledTextCtrl  a -> Int -> Int ->  IO ()
+styledTextCtrlShowLines _obj lineStart lineEnd 
+  = withObjectRef "styledTextCtrlShowLines" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_ShowLines cobj__obj  (toCInt lineStart)  (toCInt lineEnd)  
+foreign import ccall "wxStyledTextCtrl_ShowLines" wxStyledTextCtrl_ShowLines :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlStartRecord obj@).
+styledTextCtrlStartRecord :: StyledTextCtrl  a ->  IO ()
+styledTextCtrlStartRecord _obj 
+  = withObjectRef "styledTextCtrlStartRecord" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_StartRecord cobj__obj  
+foreign import ccall "wxStyledTextCtrl_StartRecord" wxStyledTextCtrl_StartRecord :: Ptr (TStyledTextCtrl a) -> IO ()
+
+-- | usage: (@styledTextCtrlStartStyling obj pos mask@).
+styledTextCtrlStartStyling :: StyledTextCtrl  a -> Int -> Int ->  IO ()
+styledTextCtrlStartStyling _obj pos mask 
+  = withObjectRef "styledTextCtrlStartStyling" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_StartStyling cobj__obj  (toCInt pos)  (toCInt mask)  
+foreign import ccall "wxStyledTextCtrl_StartStyling" wxStyledTextCtrl_StartStyling :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlStopRecord obj@).
+styledTextCtrlStopRecord :: StyledTextCtrl  a ->  IO ()
+styledTextCtrlStopRecord _obj 
+  = withObjectRef "styledTextCtrlStopRecord" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_StopRecord cobj__obj  
+foreign import ccall "wxStyledTextCtrl_StopRecord" wxStyledTextCtrl_StopRecord :: Ptr (TStyledTextCtrl a) -> IO ()
+
+-- | usage: (@styledTextCtrlStyleClearAll obj@).
+styledTextCtrlStyleClearAll :: StyledTextCtrl  a ->  IO ()
+styledTextCtrlStyleClearAll _obj 
+  = withObjectRef "styledTextCtrlStyleClearAll" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_StyleClearAll cobj__obj  
+foreign import ccall "wxStyledTextCtrl_StyleClearAll" wxStyledTextCtrl_StyleClearAll :: Ptr (TStyledTextCtrl a) -> IO ()
+
+-- | usage: (@styledTextCtrlStyleResetDefault obj@).
+styledTextCtrlStyleResetDefault :: StyledTextCtrl  a ->  IO ()
+styledTextCtrlStyleResetDefault _obj 
+  = withObjectRef "styledTextCtrlStyleResetDefault" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_StyleResetDefault cobj__obj  
+foreign import ccall "wxStyledTextCtrl_StyleResetDefault" wxStyledTextCtrl_StyleResetDefault :: Ptr (TStyledTextCtrl a) -> IO ()
+
+-- | usage: (@styledTextCtrlStyleSetBackground obj style backrbackgbackb@).
+styledTextCtrlStyleSetBackground :: StyledTextCtrl  a -> Int -> Color ->  IO ()
+styledTextCtrlStyleSetBackground _obj style backrbackgbackb 
+  = withObjectRef "styledTextCtrlStyleSetBackground" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_StyleSetBackground cobj__obj  (toCInt style)  (colorRed backrbackgbackb) (colorGreen backrbackgbackb) (colorBlue backrbackgbackb)  
+foreign import ccall "wxStyledTextCtrl_StyleSetBackground" wxStyledTextCtrl_StyleSetBackground :: Ptr (TStyledTextCtrl a) -> CInt -> Word8 -> Word8 -> Word8 -> IO ()
+
+-- | usage: (@styledTextCtrlStyleSetBold obj style bold@).
+styledTextCtrlStyleSetBold :: StyledTextCtrl  a -> Int -> Bool ->  IO ()
+styledTextCtrlStyleSetBold _obj style bold 
+  = withObjectRef "styledTextCtrlStyleSetBold" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_StyleSetBold cobj__obj  (toCInt style)  (toCBool bold)  
+foreign import ccall "wxStyledTextCtrl_StyleSetBold" wxStyledTextCtrl_StyleSetBold :: Ptr (TStyledTextCtrl a) -> CInt -> CBool -> IO ()
+
+-- | usage: (@styledTextCtrlStyleSetCase obj style caseForce@).
+styledTextCtrlStyleSetCase :: StyledTextCtrl  a -> Int -> Int ->  IO ()
+styledTextCtrlStyleSetCase _obj style caseForce 
+  = withObjectRef "styledTextCtrlStyleSetCase" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_StyleSetCase cobj__obj  (toCInt style)  (toCInt caseForce)  
+foreign import ccall "wxStyledTextCtrl_StyleSetCase" wxStyledTextCtrl_StyleSetCase :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlStyleSetChangeable obj style changeable@).
+styledTextCtrlStyleSetChangeable :: StyledTextCtrl  a -> Int -> Bool ->  IO ()
+styledTextCtrlStyleSetChangeable _obj style changeable 
+  = withObjectRef "styledTextCtrlStyleSetChangeable" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_StyleSetChangeable cobj__obj  (toCInt style)  (toCBool changeable)  
+foreign import ccall "wxStyledTextCtrl_StyleSetChangeable" wxStyledTextCtrl_StyleSetChangeable :: Ptr (TStyledTextCtrl a) -> CInt -> CBool -> IO ()
+
+-- | usage: (@styledTextCtrlStyleSetCharacterSet obj style characterSet@).
+styledTextCtrlStyleSetCharacterSet :: StyledTextCtrl  a -> Int -> Int ->  IO ()
+styledTextCtrlStyleSetCharacterSet _obj style characterSet 
+  = withObjectRef "styledTextCtrlStyleSetCharacterSet" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_StyleSetCharacterSet cobj__obj  (toCInt style)  (toCInt characterSet)  
+foreign import ccall "wxStyledTextCtrl_StyleSetCharacterSet" wxStyledTextCtrl_StyleSetCharacterSet :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlStyleSetEOLFilled obj style filled@).
+styledTextCtrlStyleSetEOLFilled :: StyledTextCtrl  a -> Int -> Bool ->  IO ()
+styledTextCtrlStyleSetEOLFilled _obj style filled 
+  = withObjectRef "styledTextCtrlStyleSetEOLFilled" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_StyleSetEOLFilled cobj__obj  (toCInt style)  (toCBool filled)  
+foreign import ccall "wxStyledTextCtrl_StyleSetEOLFilled" wxStyledTextCtrl_StyleSetEOLFilled :: Ptr (TStyledTextCtrl a) -> CInt -> CBool -> IO ()
+
+-- | usage: (@styledTextCtrlStyleSetFaceName obj style fontName@).
+styledTextCtrlStyleSetFaceName :: StyledTextCtrl  a -> Int -> String ->  IO ()
+styledTextCtrlStyleSetFaceName _obj style fontName 
+  = withObjectRef "styledTextCtrlStyleSetFaceName" _obj $ \cobj__obj -> 
+    withStringPtr fontName $ \cobj_fontName -> 
+    wxStyledTextCtrl_StyleSetFaceName cobj__obj  (toCInt style)  cobj_fontName  
+foreign import ccall "wxStyledTextCtrl_StyleSetFaceName" wxStyledTextCtrl_StyleSetFaceName :: Ptr (TStyledTextCtrl a) -> CInt -> Ptr (TWxString c) -> IO ()
+
+-- | usage: (@styledTextCtrlStyleSetFont obj styleNum font@).
+styledTextCtrlStyleSetFont :: StyledTextCtrl  a -> Int -> Font  c ->  IO ()
+styledTextCtrlStyleSetFont _obj styleNum font 
+  = withObjectRef "styledTextCtrlStyleSetFont" _obj $ \cobj__obj -> 
+    withObjectPtr font $ \cobj_font -> 
+    wxStyledTextCtrl_StyleSetFont cobj__obj  (toCInt styleNum)  cobj_font  
+foreign import ccall "wxStyledTextCtrl_StyleSetFont" wxStyledTextCtrl_StyleSetFont :: Ptr (TStyledTextCtrl a) -> CInt -> Ptr (TFont c) -> IO ()
+
+-- | usage: (@styledTextCtrlStyleSetFontAttr obj styleNum size faceName bold italic underline@).
+styledTextCtrlStyleSetFontAttr :: StyledTextCtrl  a -> Int -> Int -> String -> Bool -> Bool -> Bool ->  IO ()
+styledTextCtrlStyleSetFontAttr _obj styleNum size faceName bold italic underline 
+  = withObjectRef "styledTextCtrlStyleSetFontAttr" _obj $ \cobj__obj -> 
+    withStringPtr faceName $ \cobj_faceName -> 
+    wxStyledTextCtrl_StyleSetFontAttr cobj__obj  (toCInt styleNum)  (toCInt size)  cobj_faceName  (toCBool bold)  (toCBool italic)  (toCBool underline)  
+foreign import ccall "wxStyledTextCtrl_StyleSetFontAttr" wxStyledTextCtrl_StyleSetFontAttr :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> Ptr (TWxString d) -> CBool -> CBool -> CBool -> IO ()
+
+-- | usage: (@styledTextCtrlStyleSetForeground obj style forerforegforeb@).
+styledTextCtrlStyleSetForeground :: StyledTextCtrl  a -> Int -> Color ->  IO ()
+styledTextCtrlStyleSetForeground _obj style forerforegforeb 
+  = withObjectRef "styledTextCtrlStyleSetForeground" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_StyleSetForeground cobj__obj  (toCInt style)  (colorRed forerforegforeb) (colorGreen forerforegforeb) (colorBlue forerforegforeb)  
+foreign import ccall "wxStyledTextCtrl_StyleSetForeground" wxStyledTextCtrl_StyleSetForeground :: Ptr (TStyledTextCtrl a) -> CInt -> Word8 -> Word8 -> Word8 -> IO ()
+
+-- | usage: (@styledTextCtrlStyleSetHotSpot obj style hotspot@).
+styledTextCtrlStyleSetHotSpot :: StyledTextCtrl  a -> Int -> Bool ->  IO ()
+styledTextCtrlStyleSetHotSpot _obj style hotspot 
+  = withObjectRef "styledTextCtrlStyleSetHotSpot" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_StyleSetHotSpot cobj__obj  (toCInt style)  (toCBool hotspot)  
+foreign import ccall "wxStyledTextCtrl_StyleSetHotSpot" wxStyledTextCtrl_StyleSetHotSpot :: Ptr (TStyledTextCtrl a) -> CInt -> CBool -> IO ()
+
+-- | usage: (@styledTextCtrlStyleSetItalic obj style italic@).
+styledTextCtrlStyleSetItalic :: StyledTextCtrl  a -> Int -> Bool ->  IO ()
+styledTextCtrlStyleSetItalic _obj style italic 
+  = withObjectRef "styledTextCtrlStyleSetItalic" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_StyleSetItalic cobj__obj  (toCInt style)  (toCBool italic)  
+foreign import ccall "wxStyledTextCtrl_StyleSetItalic" wxStyledTextCtrl_StyleSetItalic :: Ptr (TStyledTextCtrl a) -> CInt -> CBool -> IO ()
+
+-- | usage: (@styledTextCtrlStyleSetSize obj style sizePoints@).
+styledTextCtrlStyleSetSize :: StyledTextCtrl  a -> Int -> Int ->  IO ()
+styledTextCtrlStyleSetSize _obj style sizePoints 
+  = withObjectRef "styledTextCtrlStyleSetSize" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_StyleSetSize cobj__obj  (toCInt style)  (toCInt sizePoints)  
+foreign import ccall "wxStyledTextCtrl_StyleSetSize" wxStyledTextCtrl_StyleSetSize :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlStyleSetSpec obj styleNum spec@).
+styledTextCtrlStyleSetSpec :: StyledTextCtrl  a -> Int -> String ->  IO ()
+styledTextCtrlStyleSetSpec _obj styleNum spec 
+  = withObjectRef "styledTextCtrlStyleSetSpec" _obj $ \cobj__obj -> 
+    withStringPtr spec $ \cobj_spec -> 
+    wxStyledTextCtrl_StyleSetSpec cobj__obj  (toCInt styleNum)  cobj_spec  
+foreign import ccall "wxStyledTextCtrl_StyleSetSpec" wxStyledTextCtrl_StyleSetSpec :: Ptr (TStyledTextCtrl a) -> CInt -> Ptr (TWxString c) -> IO ()
+
+-- | usage: (@styledTextCtrlStyleSetUnderline obj style underline@).
+styledTextCtrlStyleSetUnderline :: StyledTextCtrl  a -> Int -> Bool ->  IO ()
+styledTextCtrlStyleSetUnderline _obj style underline 
+  = withObjectRef "styledTextCtrlStyleSetUnderline" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_StyleSetUnderline cobj__obj  (toCInt style)  (toCBool underline)  
+foreign import ccall "wxStyledTextCtrl_StyleSetUnderline" wxStyledTextCtrl_StyleSetUnderline :: Ptr (TStyledTextCtrl a) -> CInt -> CBool -> IO ()
+
+-- | usage: (@styledTextCtrlStyleSetVisible obj style visible@).
+styledTextCtrlStyleSetVisible :: StyledTextCtrl  a -> Int -> Bool ->  IO ()
+styledTextCtrlStyleSetVisible _obj style visible 
+  = withObjectRef "styledTextCtrlStyleSetVisible" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_StyleSetVisible cobj__obj  (toCInt style)  (toCBool visible)  
+foreign import ccall "wxStyledTextCtrl_StyleSetVisible" wxStyledTextCtrl_StyleSetVisible :: Ptr (TStyledTextCtrl a) -> CInt -> CBool -> IO ()
+
+-- | usage: (@styledTextCtrlTargetFromSelection obj@).
+styledTextCtrlTargetFromSelection :: StyledTextCtrl  a ->  IO ()
+styledTextCtrlTargetFromSelection _obj 
+  = withObjectRef "styledTextCtrlTargetFromSelection" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_TargetFromSelection cobj__obj  
+foreign import ccall "wxStyledTextCtrl_TargetFromSelection" wxStyledTextCtrl_TargetFromSelection :: Ptr (TStyledTextCtrl a) -> IO ()
+
+-- | usage: (@styledTextCtrlTextHeight obj line@).
+styledTextCtrlTextHeight :: StyledTextCtrl  a -> Int ->  IO Int
+styledTextCtrlTextHeight _obj line 
+  = withIntResult $
+    withObjectRef "styledTextCtrlTextHeight" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_TextHeight cobj__obj  (toCInt line)  
+foreign import ccall "wxStyledTextCtrl_TextHeight" wxStyledTextCtrl_TextHeight :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt
+
+-- | usage: (@styledTextCtrlTextWidth obj style text@).
+styledTextCtrlTextWidth :: StyledTextCtrl  a -> Int -> String ->  IO Int
+styledTextCtrlTextWidth _obj style text 
+  = withIntResult $
+    withObjectRef "styledTextCtrlTextWidth" _obj $ \cobj__obj -> 
+    withStringPtr text $ \cobj_text -> 
+    wxStyledTextCtrl_TextWidth cobj__obj  (toCInt style)  cobj_text  
+foreign import ccall "wxStyledTextCtrl_TextWidth" wxStyledTextCtrl_TextWidth :: Ptr (TStyledTextCtrl a) -> CInt -> Ptr (TWxString c) -> IO CInt
+
+-- | usage: (@styledTextCtrlToggleFold obj line@).
+styledTextCtrlToggleFold :: StyledTextCtrl  a -> Int ->  IO ()
+styledTextCtrlToggleFold _obj line 
+  = withObjectRef "styledTextCtrlToggleFold" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_ToggleFold cobj__obj  (toCInt line)  
+foreign import ccall "wxStyledTextCtrl_ToggleFold" wxStyledTextCtrl_ToggleFold :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@styledTextCtrlUndo obj@).
+styledTextCtrlUndo :: StyledTextCtrl  a ->  IO ()
+styledTextCtrlUndo _obj 
+  = withObjectRef "styledTextCtrlUndo" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_Undo cobj__obj  
+foreign import ccall "wxStyledTextCtrl_Undo" wxStyledTextCtrl_Undo :: Ptr (TStyledTextCtrl a) -> IO ()
+
+-- | usage: (@styledTextCtrlUsePopUp obj allowPopUp@).
+styledTextCtrlUsePopUp :: StyledTextCtrl  a -> Bool ->  IO ()
+styledTextCtrlUsePopUp _obj allowPopUp 
+  = withObjectRef "styledTextCtrlUsePopUp" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_UsePopUp cobj__obj  (toCBool allowPopUp)  
+foreign import ccall "wxStyledTextCtrl_UsePopUp" wxStyledTextCtrl_UsePopUp :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()
+
+-- | usage: (@styledTextCtrlUserListShow obj listType itemList@).
+styledTextCtrlUserListShow :: StyledTextCtrl  a -> Int -> String ->  IO ()
+styledTextCtrlUserListShow _obj listType itemList 
+  = withObjectRef "styledTextCtrlUserListShow" _obj $ \cobj__obj -> 
+    withStringPtr itemList $ \cobj_itemList -> 
+    wxStyledTextCtrl_UserListShow cobj__obj  (toCInt listType)  cobj_itemList  
+foreign import ccall "wxStyledTextCtrl_UserListShow" wxStyledTextCtrl_UserListShow :: Ptr (TStyledTextCtrl a) -> CInt -> Ptr (TWxString c) -> IO ()
+
+-- | usage: (@styledTextCtrlVisibleFromDocLine obj line@).
+styledTextCtrlVisibleFromDocLine :: StyledTextCtrl  a -> Int ->  IO Int
+styledTextCtrlVisibleFromDocLine _obj line 
+  = withIntResult $
+    withObjectRef "styledTextCtrlVisibleFromDocLine" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_VisibleFromDocLine cobj__obj  (toCInt line)  
+foreign import ccall "wxStyledTextCtrl_VisibleFromDocLine" wxStyledTextCtrl_VisibleFromDocLine :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt
+
+-- | usage: (@styledTextCtrlWordEndPosition obj pos onlyWordCharacters@).
+styledTextCtrlWordEndPosition :: StyledTextCtrl  a -> Int -> Bool ->  IO Int
+styledTextCtrlWordEndPosition _obj pos onlyWordCharacters 
+  = withIntResult $
+    withObjectRef "styledTextCtrlWordEndPosition" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_WordEndPosition cobj__obj  (toCInt pos)  (toCBool onlyWordCharacters)  
+foreign import ccall "wxStyledTextCtrl_WordEndPosition" wxStyledTextCtrl_WordEndPosition :: Ptr (TStyledTextCtrl a) -> CInt -> CBool -> IO CInt
+
+-- | usage: (@styledTextCtrlWordPartLeft obj@).
+styledTextCtrlWordPartLeft :: StyledTextCtrl  a ->  IO ()
+styledTextCtrlWordPartLeft _obj 
+  = withObjectRef "styledTextCtrlWordPartLeft" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_WordPartLeft cobj__obj  
+foreign import ccall "wxStyledTextCtrl_WordPartLeft" wxStyledTextCtrl_WordPartLeft :: Ptr (TStyledTextCtrl a) -> IO ()
+
+-- | usage: (@styledTextCtrlWordPartLeftExtend obj@).
+styledTextCtrlWordPartLeftExtend :: StyledTextCtrl  a ->  IO ()
+styledTextCtrlWordPartLeftExtend _obj 
+  = withObjectRef "styledTextCtrlWordPartLeftExtend" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_WordPartLeftExtend cobj__obj  
+foreign import ccall "wxStyledTextCtrl_WordPartLeftExtend" wxStyledTextCtrl_WordPartLeftExtend :: Ptr (TStyledTextCtrl a) -> IO ()
+
+-- | usage: (@styledTextCtrlWordPartRight obj@).
+styledTextCtrlWordPartRight :: StyledTextCtrl  a ->  IO ()
+styledTextCtrlWordPartRight _obj 
+  = withObjectRef "styledTextCtrlWordPartRight" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_WordPartRight cobj__obj  
+foreign import ccall "wxStyledTextCtrl_WordPartRight" wxStyledTextCtrl_WordPartRight :: Ptr (TStyledTextCtrl a) -> IO ()
+
+-- | usage: (@styledTextCtrlWordPartRightExtend obj@).
+styledTextCtrlWordPartRightExtend :: StyledTextCtrl  a ->  IO ()
+styledTextCtrlWordPartRightExtend _obj 
+  = withObjectRef "styledTextCtrlWordPartRightExtend" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_WordPartRightExtend cobj__obj  
+foreign import ccall "wxStyledTextCtrl_WordPartRightExtend" wxStyledTextCtrl_WordPartRightExtend :: Ptr (TStyledTextCtrl a) -> IO ()
+
+-- | usage: (@styledTextCtrlWordStartPosition obj pos onlyWordCharacters@).
+styledTextCtrlWordStartPosition :: StyledTextCtrl  a -> Int -> Bool ->  IO Int
+styledTextCtrlWordStartPosition _obj pos onlyWordCharacters 
+  = withIntResult $
+    withObjectRef "styledTextCtrlWordStartPosition" _obj $ \cobj__obj -> 
+    wxStyledTextCtrl_WordStartPosition cobj__obj  (toCInt pos)  (toCBool onlyWordCharacters)  
+foreign import ccall "wxStyledTextCtrl_WordStartPosition" wxStyledTextCtrl_WordStartPosition :: Ptr (TStyledTextCtrl a) -> CInt -> CBool -> IO CInt
+
+-- | usage: (@styledTextEventClone obj@).
+styledTextEventClone :: StyledTextEvent  a ->  IO (StyledTextEvent  ())
+styledTextEventClone _obj 
+  = withObjectResult $
+    withObjectRef "styledTextEventClone" _obj $ \cobj__obj -> 
+    wxStyledTextEvent_Clone cobj__obj  
+foreign import ccall "wxStyledTextEvent_Clone" wxStyledTextEvent_Clone :: Ptr (TStyledTextEvent a) -> IO (Ptr (TStyledTextEvent ()))
+
+-- | usage: (@styledTextEventGetAlt obj@).
+styledTextEventGetAlt :: StyledTextEvent  a ->  IO Bool
+styledTextEventGetAlt _obj 
+  = withBoolResult $
+    withObjectRef "styledTextEventGetAlt" _obj $ \cobj__obj -> 
+    wxStyledTextEvent_GetAlt cobj__obj  
+foreign import ccall "wxStyledTextEvent_GetAlt" wxStyledTextEvent_GetAlt :: Ptr (TStyledTextEvent a) -> IO CBool
+
+-- | usage: (@styledTextEventGetControl obj@).
+styledTextEventGetControl :: StyledTextEvent  a ->  IO Bool
+styledTextEventGetControl _obj 
+  = withBoolResult $
+    withObjectRef "styledTextEventGetControl" _obj $ \cobj__obj -> 
+    wxStyledTextEvent_GetControl cobj__obj  
+foreign import ccall "wxStyledTextEvent_GetControl" wxStyledTextEvent_GetControl :: Ptr (TStyledTextEvent a) -> IO CBool
+
+-- | usage: (@styledTextEventGetDragAllowMove obj@).
+styledTextEventGetDragAllowMove :: StyledTextEvent  a ->  IO Bool
+styledTextEventGetDragAllowMove _obj 
+  = withBoolResult $
+    withObjectRef "styledTextEventGetDragAllowMove" _obj $ \cobj__obj -> 
+    wxStyledTextEvent_GetDragAllowMove cobj__obj  
+foreign import ccall "wxStyledTextEvent_GetDragAllowMove" wxStyledTextEvent_GetDragAllowMove :: Ptr (TStyledTextEvent a) -> IO CBool
+
+-- | usage: (@styledTextEventGetDragResult obj@).
+styledTextEventGetDragResult :: StyledTextEvent  a ->  IO Int
+styledTextEventGetDragResult _obj 
+  = withIntResult $
+    withObjectRef "styledTextEventGetDragResult" _obj $ \cobj__obj -> 
+    wxStyledTextEvent_GetDragResult cobj__obj  
+foreign import ccall "wxStyledTextEvent_GetDragResult" wxStyledTextEvent_GetDragResult :: Ptr (TStyledTextEvent a) -> IO CInt
+
+-- | usage: (@styledTextEventGetDragText obj@).
+styledTextEventGetDragText :: StyledTextEvent  a ->  IO (String)
+styledTextEventGetDragText _obj 
+  = withManagedStringResult $
+    withObjectRef "styledTextEventGetDragText" _obj $ \cobj__obj -> 
+    wxStyledTextEvent_GetDragText cobj__obj  
+foreign import ccall "wxStyledTextEvent_GetDragText" wxStyledTextEvent_GetDragText :: Ptr (TStyledTextEvent a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@styledTextEventGetFoldLevelNow obj@).
+styledTextEventGetFoldLevelNow :: StyledTextEvent  a ->  IO Int
+styledTextEventGetFoldLevelNow _obj 
+  = withIntResult $
+    withObjectRef "styledTextEventGetFoldLevelNow" _obj $ \cobj__obj -> 
+    wxStyledTextEvent_GetFoldLevelNow cobj__obj  
+foreign import ccall "wxStyledTextEvent_GetFoldLevelNow" wxStyledTextEvent_GetFoldLevelNow :: Ptr (TStyledTextEvent a) -> IO CInt
+
+-- | usage: (@styledTextEventGetFoldLevelPrev obj@).
+styledTextEventGetFoldLevelPrev :: StyledTextEvent  a ->  IO Int
+styledTextEventGetFoldLevelPrev _obj 
+  = withIntResult $
+    withObjectRef "styledTextEventGetFoldLevelPrev" _obj $ \cobj__obj -> 
+    wxStyledTextEvent_GetFoldLevelPrev cobj__obj  
+foreign import ccall "wxStyledTextEvent_GetFoldLevelPrev" wxStyledTextEvent_GetFoldLevelPrev :: Ptr (TStyledTextEvent a) -> IO CInt
+
+-- | usage: (@styledTextEventGetKey obj@).
+styledTextEventGetKey :: StyledTextEvent  a ->  IO Int
+styledTextEventGetKey _obj 
+  = withIntResult $
+    withObjectRef "styledTextEventGetKey" _obj $ \cobj__obj -> 
+    wxStyledTextEvent_GetKey cobj__obj  
+foreign import ccall "wxStyledTextEvent_GetKey" wxStyledTextEvent_GetKey :: Ptr (TStyledTextEvent a) -> IO CInt
+
+-- | usage: (@styledTextEventGetLParam obj@).
+styledTextEventGetLParam :: StyledTextEvent  a ->  IO Int
+styledTextEventGetLParam _obj 
+  = withIntResult $
+    withObjectRef "styledTextEventGetLParam" _obj $ \cobj__obj -> 
+    wxStyledTextEvent_GetLParam cobj__obj  
+foreign import ccall "wxStyledTextEvent_GetLParam" wxStyledTextEvent_GetLParam :: Ptr (TStyledTextEvent a) -> IO CInt
+
+-- | usage: (@styledTextEventGetLength obj@).
+styledTextEventGetLength :: StyledTextEvent  a ->  IO Int
+styledTextEventGetLength _obj 
+  = withIntResult $
+    withObjectRef "styledTextEventGetLength" _obj $ \cobj__obj -> 
+    wxStyledTextEvent_GetLength cobj__obj  
+foreign import ccall "wxStyledTextEvent_GetLength" wxStyledTextEvent_GetLength :: Ptr (TStyledTextEvent a) -> IO CInt
+
+-- | usage: (@styledTextEventGetLine obj@).
+styledTextEventGetLine :: StyledTextEvent  a ->  IO Int
+styledTextEventGetLine _obj 
+  = withIntResult $
+    withObjectRef "styledTextEventGetLine" _obj $ \cobj__obj -> 
+    wxStyledTextEvent_GetLine cobj__obj  
+foreign import ccall "wxStyledTextEvent_GetLine" wxStyledTextEvent_GetLine :: Ptr (TStyledTextEvent a) -> IO CInt
+
+-- | usage: (@styledTextEventGetLinesAdded obj@).
+styledTextEventGetLinesAdded :: StyledTextEvent  a ->  IO Int
+styledTextEventGetLinesAdded _obj 
+  = withIntResult $
+    withObjectRef "styledTextEventGetLinesAdded" _obj $ \cobj__obj -> 
+    wxStyledTextEvent_GetLinesAdded cobj__obj  
+foreign import ccall "wxStyledTextEvent_GetLinesAdded" wxStyledTextEvent_GetLinesAdded :: Ptr (TStyledTextEvent a) -> IO CInt
+
+-- | usage: (@styledTextEventGetListType obj@).
+styledTextEventGetListType :: StyledTextEvent  a ->  IO Int
+styledTextEventGetListType _obj 
+  = withIntResult $
+    withObjectRef "styledTextEventGetListType" _obj $ \cobj__obj -> 
+    wxStyledTextEvent_GetListType cobj__obj  
+foreign import ccall "wxStyledTextEvent_GetListType" wxStyledTextEvent_GetListType :: Ptr (TStyledTextEvent a) -> IO CInt
+
+-- | usage: (@styledTextEventGetMargin obj@).
+styledTextEventGetMargin :: StyledTextEvent  a ->  IO Int
+styledTextEventGetMargin _obj 
+  = withIntResult $
+    withObjectRef "styledTextEventGetMargin" _obj $ \cobj__obj -> 
+    wxStyledTextEvent_GetMargin cobj__obj  
+foreign import ccall "wxStyledTextEvent_GetMargin" wxStyledTextEvent_GetMargin :: Ptr (TStyledTextEvent a) -> IO CInt
+
+-- | usage: (@styledTextEventGetMessage obj@).
+styledTextEventGetMessage :: StyledTextEvent  a ->  IO Int
+styledTextEventGetMessage _obj 
+  = withIntResult $
+    withObjectRef "styledTextEventGetMessage" _obj $ \cobj__obj -> 
+    wxStyledTextEvent_GetMessage cobj__obj  
+foreign import ccall "wxStyledTextEvent_GetMessage" wxStyledTextEvent_GetMessage :: Ptr (TStyledTextEvent a) -> IO CInt
+
+-- | usage: (@styledTextEventGetModificationType obj@).
+styledTextEventGetModificationType :: StyledTextEvent  a ->  IO Int
+styledTextEventGetModificationType _obj 
+  = withIntResult $
+    withObjectRef "styledTextEventGetModificationType" _obj $ \cobj__obj -> 
+    wxStyledTextEvent_GetModificationType cobj__obj  
+foreign import ccall "wxStyledTextEvent_GetModificationType" wxStyledTextEvent_GetModificationType :: Ptr (TStyledTextEvent a) -> IO CInt
+
+-- | usage: (@styledTextEventGetModifiers obj@).
+styledTextEventGetModifiers :: StyledTextEvent  a ->  IO Int
+styledTextEventGetModifiers _obj 
+  = withIntResult $
+    withObjectRef "styledTextEventGetModifiers" _obj $ \cobj__obj -> 
+    wxStyledTextEvent_GetModifiers cobj__obj  
+foreign import ccall "wxStyledTextEvent_GetModifiers" wxStyledTextEvent_GetModifiers :: Ptr (TStyledTextEvent a) -> IO CInt
+
+-- | usage: (@styledTextEventGetPosition obj@).
+styledTextEventGetPosition :: StyledTextEvent  a ->  IO Int
+styledTextEventGetPosition _obj 
+  = withIntResult $
+    withObjectRef "styledTextEventGetPosition" _obj $ \cobj__obj -> 
+    wxStyledTextEvent_GetPosition cobj__obj  
+foreign import ccall "wxStyledTextEvent_GetPosition" wxStyledTextEvent_GetPosition :: Ptr (TStyledTextEvent a) -> IO CInt
+
+-- | usage: (@styledTextEventGetShift obj@).
+styledTextEventGetShift :: StyledTextEvent  a ->  IO Bool
+styledTextEventGetShift _obj 
+  = withBoolResult $
+    withObjectRef "styledTextEventGetShift" _obj $ \cobj__obj -> 
+    wxStyledTextEvent_GetShift cobj__obj  
+foreign import ccall "wxStyledTextEvent_GetShift" wxStyledTextEvent_GetShift :: Ptr (TStyledTextEvent a) -> IO CBool
+
+-- | usage: (@styledTextEventGetText obj@).
+styledTextEventGetText :: StyledTextEvent  a ->  IO (String)
+styledTextEventGetText _obj 
+  = withManagedStringResult $
+    withObjectRef "styledTextEventGetText" _obj $ \cobj__obj -> 
+    wxStyledTextEvent_GetText cobj__obj  
+foreign import ccall "wxStyledTextEvent_GetText" wxStyledTextEvent_GetText :: Ptr (TStyledTextEvent a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@styledTextEventGetWParam obj@).
+styledTextEventGetWParam :: StyledTextEvent  a ->  IO Int
+styledTextEventGetWParam _obj 
+  = withIntResult $
+    withObjectRef "styledTextEventGetWParam" _obj $ \cobj__obj -> 
+    wxStyledTextEvent_GetWParam cobj__obj  
+foreign import ccall "wxStyledTextEvent_GetWParam" wxStyledTextEvent_GetWParam :: Ptr (TStyledTextEvent a) -> IO CInt
+
+-- | usage: (@styledTextEventGetX obj@).
+styledTextEventGetX :: StyledTextEvent  a ->  IO Int
+styledTextEventGetX _obj 
+  = withIntResult $
+    withObjectRef "styledTextEventGetX" _obj $ \cobj__obj -> 
+    wxStyledTextEvent_GetX cobj__obj  
+foreign import ccall "wxStyledTextEvent_GetX" wxStyledTextEvent_GetX :: Ptr (TStyledTextEvent a) -> IO CInt
+
+-- | usage: (@styledTextEventGetY obj@).
+styledTextEventGetY :: StyledTextEvent  a ->  IO Int
+styledTextEventGetY _obj 
+  = withIntResult $
+    withObjectRef "styledTextEventGetY" _obj $ \cobj__obj -> 
+    wxStyledTextEvent_GetY cobj__obj  
+foreign import ccall "wxStyledTextEvent_GetY" wxStyledTextEvent_GetY :: Ptr (TStyledTextEvent a) -> IO CInt
+
+-- | usage: (@styledTextEventSetDragAllowMove obj val@).
+styledTextEventSetDragAllowMove :: StyledTextEvent  a -> Bool ->  IO ()
+styledTextEventSetDragAllowMove _obj val 
+  = withObjectRef "styledTextEventSetDragAllowMove" _obj $ \cobj__obj -> 
+    wxStyledTextEvent_SetDragAllowMove cobj__obj  (toCBool val)  
+foreign import ccall "wxStyledTextEvent_SetDragAllowMove" wxStyledTextEvent_SetDragAllowMove :: Ptr (TStyledTextEvent a) -> CBool -> IO ()
+
+-- | usage: (@styledTextEventSetDragResult obj val@).
+styledTextEventSetDragResult :: StyledTextEvent  a -> Int ->  IO ()
+styledTextEventSetDragResult _obj val 
+  = withObjectRef "styledTextEventSetDragResult" _obj $ \cobj__obj -> 
+    wxStyledTextEvent_SetDragResult cobj__obj  (toCInt val)  
+foreign import ccall "wxStyledTextEvent_SetDragResult" wxStyledTextEvent_SetDragResult :: Ptr (TStyledTextEvent a) -> CInt -> IO ()
+
+-- | usage: (@styledTextEventSetDragText obj val@).
+styledTextEventSetDragText :: StyledTextEvent  a -> String ->  IO ()
+styledTextEventSetDragText _obj val 
+  = withObjectRef "styledTextEventSetDragText" _obj $ \cobj__obj -> 
+    withStringPtr val $ \cobj_val -> 
+    wxStyledTextEvent_SetDragText cobj__obj  cobj_val  
+foreign import ccall "wxStyledTextEvent_SetDragText" wxStyledTextEvent_SetDragText :: Ptr (TStyledTextEvent a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@styledTextEventSetFoldLevelNow obj val@).
+styledTextEventSetFoldLevelNow :: StyledTextEvent  a -> Int ->  IO ()
+styledTextEventSetFoldLevelNow _obj val 
+  = withObjectRef "styledTextEventSetFoldLevelNow" _obj $ \cobj__obj -> 
+    wxStyledTextEvent_SetFoldLevelNow cobj__obj  (toCInt val)  
+foreign import ccall "wxStyledTextEvent_SetFoldLevelNow" wxStyledTextEvent_SetFoldLevelNow :: Ptr (TStyledTextEvent a) -> CInt -> IO ()
+
+-- | usage: (@styledTextEventSetFoldLevelPrev obj val@).
+styledTextEventSetFoldLevelPrev :: StyledTextEvent  a -> Int ->  IO ()
+styledTextEventSetFoldLevelPrev _obj val 
+  = withObjectRef "styledTextEventSetFoldLevelPrev" _obj $ \cobj__obj -> 
+    wxStyledTextEvent_SetFoldLevelPrev cobj__obj  (toCInt val)  
+foreign import ccall "wxStyledTextEvent_SetFoldLevelPrev" wxStyledTextEvent_SetFoldLevelPrev :: Ptr (TStyledTextEvent a) -> CInt -> IO ()
+
+-- | usage: (@styledTextEventSetKey obj k@).
+styledTextEventSetKey :: StyledTextEvent  a -> Int ->  IO ()
+styledTextEventSetKey _obj k 
+  = withObjectRef "styledTextEventSetKey" _obj $ \cobj__obj -> 
+    wxStyledTextEvent_SetKey cobj__obj  (toCInt k)  
+foreign import ccall "wxStyledTextEvent_SetKey" wxStyledTextEvent_SetKey :: Ptr (TStyledTextEvent a) -> CInt -> IO ()
+
+-- | usage: (@styledTextEventSetLParam obj val@).
+styledTextEventSetLParam :: StyledTextEvent  a -> Int ->  IO ()
+styledTextEventSetLParam _obj val 
+  = withObjectRef "styledTextEventSetLParam" _obj $ \cobj__obj -> 
+    wxStyledTextEvent_SetLParam cobj__obj  (toCInt val)  
+foreign import ccall "wxStyledTextEvent_SetLParam" wxStyledTextEvent_SetLParam :: Ptr (TStyledTextEvent a) -> CInt -> IO ()
+
+-- | usage: (@styledTextEventSetLength obj len@).
+styledTextEventSetLength :: StyledTextEvent  a -> Int ->  IO ()
+styledTextEventSetLength _obj len 
+  = withObjectRef "styledTextEventSetLength" _obj $ \cobj__obj -> 
+    wxStyledTextEvent_SetLength cobj__obj  (toCInt len)  
+foreign import ccall "wxStyledTextEvent_SetLength" wxStyledTextEvent_SetLength :: Ptr (TStyledTextEvent a) -> CInt -> IO ()
+
+-- | usage: (@styledTextEventSetLine obj val@).
+styledTextEventSetLine :: StyledTextEvent  a -> Int ->  IO ()
+styledTextEventSetLine _obj val 
+  = withObjectRef "styledTextEventSetLine" _obj $ \cobj__obj -> 
+    wxStyledTextEvent_SetLine cobj__obj  (toCInt val)  
+foreign import ccall "wxStyledTextEvent_SetLine" wxStyledTextEvent_SetLine :: Ptr (TStyledTextEvent a) -> CInt -> IO ()
+
+-- | usage: (@styledTextEventSetLinesAdded obj num@).
+styledTextEventSetLinesAdded :: StyledTextEvent  a -> Int ->  IO ()
+styledTextEventSetLinesAdded _obj num 
+  = withObjectRef "styledTextEventSetLinesAdded" _obj $ \cobj__obj -> 
+    wxStyledTextEvent_SetLinesAdded cobj__obj  (toCInt num)  
+foreign import ccall "wxStyledTextEvent_SetLinesAdded" wxStyledTextEvent_SetLinesAdded :: Ptr (TStyledTextEvent a) -> CInt -> IO ()
+
+-- | usage: (@styledTextEventSetListType obj val@).
+styledTextEventSetListType :: StyledTextEvent  a -> Int ->  IO ()
+styledTextEventSetListType _obj val 
+  = withObjectRef "styledTextEventSetListType" _obj $ \cobj__obj -> 
+    wxStyledTextEvent_SetListType cobj__obj  (toCInt val)  
+foreign import ccall "wxStyledTextEvent_SetListType" wxStyledTextEvent_SetListType :: Ptr (TStyledTextEvent a) -> CInt -> IO ()
+
+-- | usage: (@styledTextEventSetMargin obj val@).
+styledTextEventSetMargin :: StyledTextEvent  a -> Int ->  IO ()
+styledTextEventSetMargin _obj val 
+  = withObjectRef "styledTextEventSetMargin" _obj $ \cobj__obj -> 
+    wxStyledTextEvent_SetMargin cobj__obj  (toCInt val)  
+foreign import ccall "wxStyledTextEvent_SetMargin" wxStyledTextEvent_SetMargin :: Ptr (TStyledTextEvent a) -> CInt -> IO ()
+
+-- | usage: (@styledTextEventSetMessage obj val@).
+styledTextEventSetMessage :: StyledTextEvent  a -> Int ->  IO ()
+styledTextEventSetMessage _obj val 
+  = withObjectRef "styledTextEventSetMessage" _obj $ \cobj__obj -> 
+    wxStyledTextEvent_SetMessage cobj__obj  (toCInt val)  
+foreign import ccall "wxStyledTextEvent_SetMessage" wxStyledTextEvent_SetMessage :: Ptr (TStyledTextEvent a) -> CInt -> IO ()
+
+-- | usage: (@styledTextEventSetModificationType obj t@).
+styledTextEventSetModificationType :: StyledTextEvent  a -> Int ->  IO ()
+styledTextEventSetModificationType _obj t 
+  = withObjectRef "styledTextEventSetModificationType" _obj $ \cobj__obj -> 
+    wxStyledTextEvent_SetModificationType cobj__obj  (toCInt t)  
+foreign import ccall "wxStyledTextEvent_SetModificationType" wxStyledTextEvent_SetModificationType :: Ptr (TStyledTextEvent a) -> CInt -> IO ()
+
+-- | usage: (@styledTextEventSetModifiers obj m@).
+styledTextEventSetModifiers :: StyledTextEvent  a -> Int ->  IO ()
+styledTextEventSetModifiers _obj m 
+  = withObjectRef "styledTextEventSetModifiers" _obj $ \cobj__obj -> 
+    wxStyledTextEvent_SetModifiers cobj__obj  (toCInt m)  
+foreign import ccall "wxStyledTextEvent_SetModifiers" wxStyledTextEvent_SetModifiers :: Ptr (TStyledTextEvent a) -> CInt -> IO ()
+
+-- | usage: (@styledTextEventSetPosition obj pos@).
+styledTextEventSetPosition :: StyledTextEvent  a -> Int ->  IO ()
+styledTextEventSetPosition _obj pos 
+  = withObjectRef "styledTextEventSetPosition" _obj $ \cobj__obj -> 
+    wxStyledTextEvent_SetPosition cobj__obj  (toCInt pos)  
+foreign import ccall "wxStyledTextEvent_SetPosition" wxStyledTextEvent_SetPosition :: Ptr (TStyledTextEvent a) -> CInt -> IO ()
+
+-- | usage: (@styledTextEventSetText obj t@).
+styledTextEventSetText :: StyledTextEvent  a -> String ->  IO ()
+styledTextEventSetText _obj t 
+  = withObjectRef "styledTextEventSetText" _obj $ \cobj__obj -> 
+    withStringPtr t $ \cobj_t -> 
+    wxStyledTextEvent_SetText cobj__obj  cobj_t  
+foreign import ccall "wxStyledTextEvent_SetText" wxStyledTextEvent_SetText :: Ptr (TStyledTextEvent a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@styledTextEventSetWParam obj val@).
+styledTextEventSetWParam :: StyledTextEvent  a -> Int ->  IO ()
+styledTextEventSetWParam _obj val 
+  = withObjectRef "styledTextEventSetWParam" _obj $ \cobj__obj -> 
+    wxStyledTextEvent_SetWParam cobj__obj  (toCInt val)  
+foreign import ccall "wxStyledTextEvent_SetWParam" wxStyledTextEvent_SetWParam :: Ptr (TStyledTextEvent a) -> CInt -> IO ()
+
+-- | usage: (@styledTextEventSetX obj val@).
+styledTextEventSetX :: StyledTextEvent  a -> Int ->  IO ()
+styledTextEventSetX _obj val 
+  = withObjectRef "styledTextEventSetX" _obj $ \cobj__obj -> 
+    wxStyledTextEvent_SetX cobj__obj  (toCInt val)  
+foreign import ccall "wxStyledTextEvent_SetX" wxStyledTextEvent_SetX :: Ptr (TStyledTextEvent a) -> CInt -> IO ()
+
+-- | usage: (@styledTextEventSetY obj val@).
+styledTextEventSetY :: StyledTextEvent  a -> Int ->  IO ()
+styledTextEventSetY _obj val 
+  = withObjectRef "styledTextEventSetY" _obj $ \cobj__obj -> 
+    wxStyledTextEvent_SetY cobj__obj  (toCInt val)  
+foreign import ccall "wxStyledTextEvent_SetY" wxStyledTextEvent_SetY :: Ptr (TStyledTextEvent a) -> CInt -> IO ()
+
+-- | usage: (@svgFileDCCreate fileName@).
+svgFileDCCreate :: String ->  IO (SVGFileDC  ())
+svgFileDCCreate fileName 
+  = withObjectResult $
+    withStringPtr fileName $ \cobj_fileName -> 
+    wxSVGFileDC_Create cobj_fileName  
+foreign import ccall "wxSVGFileDC_Create" wxSVGFileDC_Create :: Ptr (TWxString a) -> IO (Ptr (TSVGFileDC ()))
+
+-- | usage: (@svgFileDCCreateWithSize fileName wh@).
+svgFileDCCreateWithSize :: String -> Size ->  IO (SVGFileDC  ())
+svgFileDCCreateWithSize fileName wh 
+  = withObjectResult $
+    withStringPtr fileName $ \cobj_fileName -> 
+    wxSVGFileDC_CreateWithSize cobj_fileName  (toCIntSizeW wh) (toCIntSizeH wh)  
+foreign import ccall "wxSVGFileDC_CreateWithSize" wxSVGFileDC_CreateWithSize :: Ptr (TWxString a) -> CInt -> CInt -> IO (Ptr (TSVGFileDC ()))
+
+-- | usage: (@svgFileDCCreateWithSizeAndResolution fileName wh adpi@).
+svgFileDCCreateWithSizeAndResolution :: String -> Size -> Float ->  IO (SVGFileDC  ())
+svgFileDCCreateWithSizeAndResolution fileName wh adpi 
+  = withObjectResult $
+    withStringPtr fileName $ \cobj_fileName -> 
+    wxSVGFileDC_CreateWithSizeAndResolution cobj_fileName  (toCIntSizeW wh) (toCIntSizeH wh)  adpi  
+foreign import ccall "wxSVGFileDC_CreateWithSizeAndResolution" wxSVGFileDC_CreateWithSizeAndResolution :: Ptr (TWxString a) -> CInt -> CInt -> Float -> IO (Ptr (TSVGFileDC ()))
+
+-- | usage: (@svgFileDCDelete obj@).
+svgFileDCDelete :: SVGFileDC  a ->  IO ()
+svgFileDCDelete
+  = objectDelete
+
+
+-- | usage: (@systemSettingsGetColour index@).
+systemSettingsGetColour :: Int ->  IO (Color)
+systemSettingsGetColour index 
+  = withRefColour $ \pref -> 
+    wxSystemSettings_GetColour (toCInt index)   pref
+foreign import ccall "wxSystemSettings_GetColour" wxSystemSettings_GetColour :: CInt -> Ptr (TColour ()) -> IO ()
+
+-- | usage: (@systemSettingsGetFont index@).
+systemSettingsGetFont :: Int ->  IO (Font  ())
+systemSettingsGetFont index 
+  = withRefFont $ \pref -> 
+    wxSystemSettings_GetFont (toCInt index)   pref
+foreign import ccall "wxSystemSettings_GetFont" wxSystemSettings_GetFont :: CInt -> Ptr (TFont ()) -> IO ()
+
+-- | usage: (@systemSettingsGetMetric index@).
+systemSettingsGetMetric :: Int ->  IO Int
+systemSettingsGetMetric index 
+  = withIntResult $
+    wxSystemSettings_GetMetric (toCInt index)  
+foreign import ccall "wxSystemSettings_GetMetric" wxSystemSettings_GetMetric :: CInt -> IO CInt
+
+-- | usage: (@systemSettingsGetScreenType@).
+systemSettingsGetScreenType ::  IO Int
+systemSettingsGetScreenType 
+  = withIntResult $
+    wxSystemSettings_GetScreenType 
+foreign import ccall "wxSystemSettings_GetScreenType" wxSystemSettings_GetScreenType :: IO CInt
+
+-- | usage: (@taskBarIconCreate@).
+taskBarIconCreate ::  IO (TaskBarIcon  ())
+taskBarIconCreate 
+  = withObjectResult $
+    wxTaskBarIcon_Create 
+foreign import ccall "wxTaskBarIcon_Create" wxTaskBarIcon_Create :: IO (Ptr (TTaskBarIcon ()))
+
+-- | usage: (@taskBarIconDelete obj@).
+taskBarIconDelete :: TaskBarIcon  a ->  IO ()
+taskBarIconDelete
+  = objectDelete
+
+
+-- | usage: (@taskBarIconIsIconInstalled obj@).
+taskBarIconIsIconInstalled :: TaskBarIcon  a ->  IO Bool
+taskBarIconIsIconInstalled _obj 
+  = withBoolResult $
+    withObjectRef "taskBarIconIsIconInstalled" _obj $ \cobj__obj -> 
+    wxTaskBarIcon_IsIconInstalled cobj__obj  
+foreign import ccall "wxTaskBarIcon_IsIconInstalled" wxTaskBarIcon_IsIconInstalled :: Ptr (TTaskBarIcon a) -> IO CBool
+
+-- | usage: (@taskBarIconIsOk obj@).
+taskBarIconIsOk :: TaskBarIcon  a ->  IO Bool
+taskBarIconIsOk _obj 
+  = withBoolResult $
+    withObjectRef "taskBarIconIsOk" _obj $ \cobj__obj -> 
+    wxTaskBarIcon_IsOk cobj__obj  
+foreign import ccall "wxTaskBarIcon_IsOk" wxTaskBarIcon_IsOk :: Ptr (TTaskBarIcon a) -> IO CBool
+
+-- | usage: (@taskBarIconPopupMenu obj menu@).
+taskBarIconPopupMenu :: TaskBarIcon  a -> Menu  b ->  IO Bool
+taskBarIconPopupMenu _obj menu 
+  = withBoolResult $
+    withObjectRef "taskBarIconPopupMenu" _obj $ \cobj__obj -> 
+    withObjectPtr menu $ \cobj_menu -> 
+    wxTaskBarIcon_PopupMenu cobj__obj  cobj_menu  
+foreign import ccall "wxTaskBarIcon_PopupMenu" wxTaskBarIcon_PopupMenu :: Ptr (TTaskBarIcon a) -> Ptr (TMenu b) -> IO CBool
+
+-- | usage: (@taskBarIconRemoveIcon obj@).
+taskBarIconRemoveIcon :: TaskBarIcon  a ->  IO Bool
+taskBarIconRemoveIcon _obj 
+  = withBoolResult $
+    withObjectRef "taskBarIconRemoveIcon" _obj $ \cobj__obj -> 
+    wxTaskBarIcon_RemoveIcon cobj__obj  
+foreign import ccall "wxTaskBarIcon_RemoveIcon" wxTaskBarIcon_RemoveIcon :: Ptr (TTaskBarIcon a) -> IO CBool
+
+-- | usage: (@taskBarIconSetIcon obj icon text@).
+taskBarIconSetIcon :: TaskBarIcon  a -> Icon  b -> String ->  IO Bool
+taskBarIconSetIcon _obj icon text 
+  = withBoolResult $
+    withObjectRef "taskBarIconSetIcon" _obj $ \cobj__obj -> 
+    withObjectPtr icon $ \cobj_icon -> 
+    withStringPtr text $ \cobj_text -> 
+    wxTaskBarIcon_SetIcon cobj__obj  cobj_icon  cobj_text  
+foreign import ccall "wxTaskBarIcon_SetIcon" wxTaskBarIcon_SetIcon :: Ptr (TTaskBarIcon a) -> Ptr (TIcon b) -> Ptr (TWxString c) -> IO CBool
+
+-- | usage: (@textAttrCreate colText colBack font@).
+textAttrCreate :: Color -> Color -> Font  c ->  IO (TextAttr  ())
+textAttrCreate colText colBack font 
+  = withObjectResult $
+    withColourPtr colText $ \cobj_colText -> 
+    withColourPtr colBack $ \cobj_colBack -> 
+    withObjectPtr font $ \cobj_font -> 
+    wxTextAttr_Create cobj_colText  cobj_colBack  cobj_font  
+foreign import ccall "wxTextAttr_Create" wxTextAttr_Create :: Ptr (TColour a) -> Ptr (TColour b) -> Ptr (TFont c) -> IO (Ptr (TTextAttr ()))
+
+-- | usage: (@textAttrCreateDefault@).
+textAttrCreateDefault ::  IO (TextAttr  ())
+textAttrCreateDefault 
+  = withObjectResult $
+    wxTextAttr_CreateDefault 
+foreign import ccall "wxTextAttr_CreateDefault" wxTextAttr_CreateDefault :: IO (Ptr (TTextAttr ()))
+
+-- | usage: (@textAttrDelete obj@).
+textAttrDelete :: TextAttr  a ->  IO ()
+textAttrDelete _obj 
+  = withObjectRef "textAttrDelete" _obj $ \cobj__obj -> 
+    wxTextAttr_Delete cobj__obj  
+foreign import ccall "wxTextAttr_Delete" wxTextAttr_Delete :: Ptr (TTextAttr a) -> IO ()
+
+-- | usage: (@textAttrGetBackgroundColour obj@).
+textAttrGetBackgroundColour :: TextAttr  a ->  IO (Color)
+textAttrGetBackgroundColour _obj 
+  = withRefColour $ \pref -> 
+    withObjectRef "textAttrGetBackgroundColour" _obj $ \cobj__obj -> 
+    wxTextAttr_GetBackgroundColour cobj__obj   pref
+foreign import ccall "wxTextAttr_GetBackgroundColour" wxTextAttr_GetBackgroundColour :: Ptr (TTextAttr a) -> Ptr (TColour ()) -> IO ()
+
+-- | usage: (@textAttrGetFont obj@).
+textAttrGetFont :: TextAttr  a ->  IO (Font  ())
+textAttrGetFont _obj 
+  = withRefFont $ \pref -> 
+    withObjectRef "textAttrGetFont" _obj $ \cobj__obj -> 
+    wxTextAttr_GetFont cobj__obj   pref
+foreign import ccall "wxTextAttr_GetFont" wxTextAttr_GetFont :: Ptr (TTextAttr a) -> Ptr (TFont ()) -> IO ()
+
+-- | usage: (@textAttrGetTextColour obj@).
+textAttrGetTextColour :: TextAttr  a ->  IO (Color)
+textAttrGetTextColour _obj 
+  = withRefColour $ \pref -> 
+    withObjectRef "textAttrGetTextColour" _obj $ \cobj__obj -> 
+    wxTextAttr_GetTextColour cobj__obj   pref
+foreign import ccall "wxTextAttr_GetTextColour" wxTextAttr_GetTextColour :: Ptr (TTextAttr a) -> Ptr (TColour ()) -> IO ()
+
+-- | usage: (@textAttrHasBackgroundColour obj@).
+textAttrHasBackgroundColour :: TextAttr  a ->  IO Bool
+textAttrHasBackgroundColour _obj 
+  = withBoolResult $
+    withObjectRef "textAttrHasBackgroundColour" _obj $ \cobj__obj -> 
+    wxTextAttr_HasBackgroundColour cobj__obj  
+foreign import ccall "wxTextAttr_HasBackgroundColour" wxTextAttr_HasBackgroundColour :: Ptr (TTextAttr a) -> IO CBool
+
+-- | usage: (@textAttrHasFont obj@).
+textAttrHasFont :: TextAttr  a ->  IO Bool
+textAttrHasFont _obj 
+  = withBoolResult $
+    withObjectRef "textAttrHasFont" _obj $ \cobj__obj -> 
+    wxTextAttr_HasFont cobj__obj  
+foreign import ccall "wxTextAttr_HasFont" wxTextAttr_HasFont :: Ptr (TTextAttr a) -> IO CBool
+
+-- | usage: (@textAttrHasTextColour obj@).
+textAttrHasTextColour :: TextAttr  a ->  IO Bool
+textAttrHasTextColour _obj 
+  = withBoolResult $
+    withObjectRef "textAttrHasTextColour" _obj $ \cobj__obj -> 
+    wxTextAttr_HasTextColour cobj__obj  
+foreign import ccall "wxTextAttr_HasTextColour" wxTextAttr_HasTextColour :: Ptr (TTextAttr a) -> IO CBool
+
+-- | usage: (@textAttrIsDefault obj@).
+textAttrIsDefault :: TextAttr  a ->  IO Bool
+textAttrIsDefault _obj 
+  = withBoolResult $
+    withObjectRef "textAttrIsDefault" _obj $ \cobj__obj -> 
+    wxTextAttr_IsDefault cobj__obj  
+foreign import ccall "wxTextAttr_IsDefault" wxTextAttr_IsDefault :: Ptr (TTextAttr a) -> IO CBool
+
+-- | usage: (@textAttrSetBackgroundColour obj colour@).
+textAttrSetBackgroundColour :: TextAttr  a -> Color ->  IO ()
+textAttrSetBackgroundColour _obj colour 
+  = withObjectRef "textAttrSetBackgroundColour" _obj $ \cobj__obj -> 
+    withColourPtr colour $ \cobj_colour -> 
+    wxTextAttr_SetBackgroundColour cobj__obj  cobj_colour  
+foreign import ccall "wxTextAttr_SetBackgroundColour" wxTextAttr_SetBackgroundColour :: Ptr (TTextAttr a) -> Ptr (TColour b) -> IO ()
+
+-- | usage: (@textAttrSetFont obj font@).
+textAttrSetFont :: TextAttr  a -> Font  b ->  IO ()
+textAttrSetFont _obj font 
+  = withObjectRef "textAttrSetFont" _obj $ \cobj__obj -> 
+    withObjectPtr font $ \cobj_font -> 
+    wxTextAttr_SetFont cobj__obj  cobj_font  
+foreign import ccall "wxTextAttr_SetFont" wxTextAttr_SetFont :: Ptr (TTextAttr a) -> Ptr (TFont b) -> IO ()
+
+-- | usage: (@textAttrSetTextColour obj colour@).
+textAttrSetTextColour :: TextAttr  a -> Color ->  IO ()
+textAttrSetTextColour _obj colour 
+  = withObjectRef "textAttrSetTextColour" _obj $ \cobj__obj -> 
+    withColourPtr colour $ \cobj_colour -> 
+    wxTextAttr_SetTextColour cobj__obj  cobj_colour  
+foreign import ccall "wxTextAttr_SetTextColour" wxTextAttr_SetTextColour :: Ptr (TTextAttr a) -> Ptr (TColour b) -> IO ()
+
+-- | usage: (@textCtrlAppendText obj text@).
+textCtrlAppendText :: TextCtrl  a -> String ->  IO ()
+textCtrlAppendText _obj text 
+  = withObjectRef "textCtrlAppendText" _obj $ \cobj__obj -> 
+    withStringPtr text $ \cobj_text -> 
+    wxTextCtrl_AppendText cobj__obj  cobj_text  
+foreign import ccall "wxTextCtrl_AppendText" wxTextCtrl_AppendText :: Ptr (TTextCtrl a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@textCtrlCanCopy obj@).
+textCtrlCanCopy :: TextCtrl  a ->  IO Bool
+textCtrlCanCopy _obj 
+  = withBoolResult $
+    withObjectRef "textCtrlCanCopy" _obj $ \cobj__obj -> 
+    wxTextCtrl_CanCopy cobj__obj  
+foreign import ccall "wxTextCtrl_CanCopy" wxTextCtrl_CanCopy :: Ptr (TTextCtrl a) -> IO CBool
+
+-- | usage: (@textCtrlCanCut obj@).
+textCtrlCanCut :: TextCtrl  a ->  IO Bool
+textCtrlCanCut _obj 
+  = withBoolResult $
+    withObjectRef "textCtrlCanCut" _obj $ \cobj__obj -> 
+    wxTextCtrl_CanCut cobj__obj  
+foreign import ccall "wxTextCtrl_CanCut" wxTextCtrl_CanCut :: Ptr (TTextCtrl a) -> IO CBool
+
+-- | usage: (@textCtrlCanPaste obj@).
+textCtrlCanPaste :: TextCtrl  a ->  IO Bool
+textCtrlCanPaste _obj 
+  = withBoolResult $
+    withObjectRef "textCtrlCanPaste" _obj $ \cobj__obj -> 
+    wxTextCtrl_CanPaste cobj__obj  
+foreign import ccall "wxTextCtrl_CanPaste" wxTextCtrl_CanPaste :: Ptr (TTextCtrl a) -> IO CBool
+
+-- | usage: (@textCtrlCanRedo obj@).
+textCtrlCanRedo :: TextCtrl  a ->  IO Bool
+textCtrlCanRedo _obj 
+  = withBoolResult $
+    withObjectRef "textCtrlCanRedo" _obj $ \cobj__obj -> 
+    wxTextCtrl_CanRedo cobj__obj  
+foreign import ccall "wxTextCtrl_CanRedo" wxTextCtrl_CanRedo :: Ptr (TTextCtrl a) -> IO CBool
+
+-- | usage: (@textCtrlCanUndo obj@).
+textCtrlCanUndo :: TextCtrl  a ->  IO Bool
+textCtrlCanUndo _obj 
+  = withBoolResult $
+    withObjectRef "textCtrlCanUndo" _obj $ \cobj__obj -> 
+    wxTextCtrl_CanUndo cobj__obj  
+foreign import ccall "wxTextCtrl_CanUndo" wxTextCtrl_CanUndo :: Ptr (TTextCtrl a) -> IO CBool
+
+-- | usage: (@textCtrlChangeValue obj text@).
+textCtrlChangeValue :: TextCtrl  a -> String ->  IO ()
+textCtrlChangeValue _obj text 
+  = withObjectRef "textCtrlChangeValue" _obj $ \cobj__obj -> 
+    withStringPtr text $ \cobj_text -> 
+    wxTextCtrl_ChangeValue cobj__obj  cobj_text  
+foreign import ccall "wxTextCtrl_ChangeValue" wxTextCtrl_ChangeValue :: Ptr (TTextCtrl a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@textCtrlClear obj@).
+textCtrlClear :: TextCtrl  a ->  IO ()
+textCtrlClear _obj 
+  = withObjectRef "textCtrlClear" _obj $ \cobj__obj -> 
+    wxTextCtrl_Clear cobj__obj  
+foreign import ccall "wxTextCtrl_Clear" wxTextCtrl_Clear :: Ptr (TTextCtrl a) -> IO ()
+
+-- | usage: (@textCtrlCopy obj@).
+textCtrlCopy :: TextCtrl  a ->  IO ()
+textCtrlCopy _obj 
+  = withObjectRef "textCtrlCopy" _obj $ \cobj__obj -> 
+    wxTextCtrl_Copy cobj__obj  
+foreign import ccall "wxTextCtrl_Copy" wxTextCtrl_Copy :: Ptr (TTextCtrl a) -> IO ()
+
+-- | usage: (@textCtrlCreate prt id txt lfttopwdthgt stl@).
+textCtrlCreate :: Window  a -> Id -> String -> Rect -> Style ->  IO (TextCtrl  ())
+textCtrlCreate _prt _id _txt _lfttopwdthgt _stl 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    withStringPtr _txt $ \cobj__txt -> 
+    wxTextCtrl_Create cobj__prt  (toCInt _id)  cobj__txt  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
+foreign import ccall "wxTextCtrl_Create" wxTextCtrl_Create :: Ptr (TWindow a) -> CInt -> Ptr (TWxString c) -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TTextCtrl ()))
+
+-- | usage: (@textCtrlCut obj@).
+textCtrlCut :: TextCtrl  a ->  IO ()
+textCtrlCut _obj 
+  = withObjectRef "textCtrlCut" _obj $ \cobj__obj -> 
+    wxTextCtrl_Cut cobj__obj  
+foreign import ccall "wxTextCtrl_Cut" wxTextCtrl_Cut :: Ptr (TTextCtrl a) -> IO ()
+
+-- | usage: (@textCtrlDiscardEdits obj@).
+textCtrlDiscardEdits :: TextCtrl  a ->  IO ()
+textCtrlDiscardEdits _obj 
+  = withObjectRef "textCtrlDiscardEdits" _obj $ \cobj__obj -> 
+    wxTextCtrl_DiscardEdits cobj__obj  
+foreign import ccall "wxTextCtrl_DiscardEdits" wxTextCtrl_DiscardEdits :: Ptr (TTextCtrl a) -> IO ()
+
+-- | usage: (@textCtrlEmulateKeyPress obj keyevent@).
+textCtrlEmulateKeyPress :: TextCtrl  a -> KeyEvent  b ->  IO Bool
+textCtrlEmulateKeyPress _obj keyevent 
+  = withBoolResult $
+    withObjectRef "textCtrlEmulateKeyPress" _obj $ \cobj__obj -> 
+    withObjectPtr keyevent $ \cobj_keyevent -> 
+    wxTextCtrl_EmulateKeyPress cobj__obj  cobj_keyevent  
+foreign import ccall "wxTextCtrl_EmulateKeyPress" wxTextCtrl_EmulateKeyPress :: Ptr (TTextCtrl a) -> Ptr (TKeyEvent b) -> IO CBool
+
+-- | usage: (@textCtrlGetDefaultStyle obj@).
+textCtrlGetDefaultStyle :: TextCtrl  a ->  IO (TextAttr  ())
+textCtrlGetDefaultStyle _obj 
+  = withObjectResult $
+    withObjectRef "textCtrlGetDefaultStyle" _obj $ \cobj__obj -> 
+    wxTextCtrl_GetDefaultStyle cobj__obj  
+foreign import ccall "wxTextCtrl_GetDefaultStyle" wxTextCtrl_GetDefaultStyle :: Ptr (TTextCtrl a) -> IO (Ptr (TTextAttr ()))
+
+-- | usage: (@textCtrlGetInsertionPoint obj@).
+textCtrlGetInsertionPoint :: TextCtrl  a ->  IO Int
+textCtrlGetInsertionPoint _obj 
+  = withIntResult $
+    withObjectRef "textCtrlGetInsertionPoint" _obj $ \cobj__obj -> 
+    wxTextCtrl_GetInsertionPoint cobj__obj  
+foreign import ccall "wxTextCtrl_GetInsertionPoint" wxTextCtrl_GetInsertionPoint :: Ptr (TTextCtrl a) -> IO CInt
+
+-- | usage: (@textCtrlGetLastPosition obj@).
+textCtrlGetLastPosition :: TextCtrl  a ->  IO Int
+textCtrlGetLastPosition _obj 
+  = withIntResult $
+    withObjectRef "textCtrlGetLastPosition" _obj $ \cobj__obj -> 
+    wxTextCtrl_GetLastPosition cobj__obj  
+foreign import ccall "wxTextCtrl_GetLastPosition" wxTextCtrl_GetLastPosition :: Ptr (TTextCtrl a) -> IO CInt
+
+-- | usage: (@textCtrlGetLineLength obj lineNo@).
+textCtrlGetLineLength :: TextCtrl  a -> Int ->  IO Int
+textCtrlGetLineLength _obj lineNo 
+  = withIntResult $
+    withObjectRef "textCtrlGetLineLength" _obj $ \cobj__obj -> 
+    wxTextCtrl_GetLineLength cobj__obj  (toCInt lineNo)  
+foreign import ccall "wxTextCtrl_GetLineLength" wxTextCtrl_GetLineLength :: Ptr (TTextCtrl a) -> CInt -> IO CInt
+
+-- | usage: (@textCtrlGetLineText obj lineNo@).
+textCtrlGetLineText :: TextCtrl  a -> Int ->  IO (String)
+textCtrlGetLineText _obj lineNo 
+  = withManagedStringResult $
+    withObjectRef "textCtrlGetLineText" _obj $ \cobj__obj -> 
+    wxTextCtrl_GetLineText cobj__obj  (toCInt lineNo)  
+foreign import ccall "wxTextCtrl_GetLineText" wxTextCtrl_GetLineText :: Ptr (TTextCtrl a) -> CInt -> IO (Ptr (TWxString ()))
+
+-- | usage: (@textCtrlGetNumberOfLines obj@).
+textCtrlGetNumberOfLines :: TextCtrl  a ->  IO Int
+textCtrlGetNumberOfLines _obj 
+  = withIntResult $
+    withObjectRef "textCtrlGetNumberOfLines" _obj $ \cobj__obj -> 
+    wxTextCtrl_GetNumberOfLines cobj__obj  
+foreign import ccall "wxTextCtrl_GetNumberOfLines" wxTextCtrl_GetNumberOfLines :: Ptr (TTextCtrl a) -> IO CInt
+
+-- | usage: (@textCtrlGetRange obj from to@).
+textCtrlGetRange :: TextCtrl  a -> Int -> Int ->  IO (String)
+textCtrlGetRange _obj from to 
+  = withManagedStringResult $
+    withObjectRef "textCtrlGetRange" _obj $ \cobj__obj -> 
+    wxTextCtrl_GetRange cobj__obj  (toCInt from)  (toCInt to)  
+foreign import ccall "wxTextCtrl_GetRange" wxTextCtrl_GetRange :: Ptr (TTextCtrl a) -> CInt -> CInt -> IO (Ptr (TWxString ()))
+
+-- | usage: (@textCtrlGetSelection obj from to@).
+textCtrlGetSelection :: TextCtrl  a -> Ptr  b -> Ptr  c ->  IO ()
+textCtrlGetSelection _obj from to 
+  = withObjectRef "textCtrlGetSelection" _obj $ \cobj__obj -> 
+    wxTextCtrl_GetSelection cobj__obj  from  to  
+foreign import ccall "wxTextCtrl_GetSelection" wxTextCtrl_GetSelection :: Ptr (TTextCtrl a) -> Ptr  b -> Ptr  c -> IO ()
+
+-- | usage: (@textCtrlGetStringSelection obj@).
+textCtrlGetStringSelection :: TextCtrl  a ->  IO (String)
+textCtrlGetStringSelection _obj 
+  = withManagedStringResult $
+    withObjectRef "textCtrlGetStringSelection" _obj $ \cobj__obj -> 
+    wxTextCtrl_GetStringSelection cobj__obj  
+foreign import ccall "wxTextCtrl_GetStringSelection" wxTextCtrl_GetStringSelection :: Ptr (TTextCtrl a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@textCtrlGetValue obj@).
+textCtrlGetValue :: TextCtrl  a ->  IO (String)
+textCtrlGetValue _obj 
+  = withManagedStringResult $
+    withObjectRef "textCtrlGetValue" _obj $ \cobj__obj -> 
+    wxTextCtrl_GetValue cobj__obj  
+foreign import ccall "wxTextCtrl_GetValue" wxTextCtrl_GetValue :: Ptr (TTextCtrl a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@textCtrlIsEditable obj@).
+textCtrlIsEditable :: TextCtrl  a ->  IO Bool
+textCtrlIsEditable _obj 
+  = withBoolResult $
+    withObjectRef "textCtrlIsEditable" _obj $ \cobj__obj -> 
+    wxTextCtrl_IsEditable cobj__obj  
+foreign import ccall "wxTextCtrl_IsEditable" wxTextCtrl_IsEditable :: Ptr (TTextCtrl a) -> IO CBool
+
+-- | usage: (@textCtrlIsModified obj@).
+textCtrlIsModified :: TextCtrl  a ->  IO Bool
+textCtrlIsModified _obj 
+  = withBoolResult $
+    withObjectRef "textCtrlIsModified" _obj $ \cobj__obj -> 
+    wxTextCtrl_IsModified cobj__obj  
+foreign import ccall "wxTextCtrl_IsModified" wxTextCtrl_IsModified :: Ptr (TTextCtrl a) -> IO CBool
+
+-- | usage: (@textCtrlIsMultiLine obj@).
+textCtrlIsMultiLine :: TextCtrl  a ->  IO Bool
+textCtrlIsMultiLine _obj 
+  = withBoolResult $
+    withObjectRef "textCtrlIsMultiLine" _obj $ \cobj__obj -> 
+    wxTextCtrl_IsMultiLine cobj__obj  
+foreign import ccall "wxTextCtrl_IsMultiLine" wxTextCtrl_IsMultiLine :: Ptr (TTextCtrl a) -> IO CBool
+
+-- | usage: (@textCtrlIsSingleLine obj@).
+textCtrlIsSingleLine :: TextCtrl  a ->  IO Bool
+textCtrlIsSingleLine _obj 
+  = withBoolResult $
+    withObjectRef "textCtrlIsSingleLine" _obj $ \cobj__obj -> 
+    wxTextCtrl_IsSingleLine cobj__obj  
+foreign import ccall "wxTextCtrl_IsSingleLine" wxTextCtrl_IsSingleLine :: Ptr (TTextCtrl a) -> IO CBool
+
+-- | usage: (@textCtrlLoadFile obj file@).
+textCtrlLoadFile :: TextCtrl  a -> String ->  IO Bool
+textCtrlLoadFile _obj file 
+  = withBoolResult $
+    withObjectRef "textCtrlLoadFile" _obj $ \cobj__obj -> 
+    withStringPtr file $ \cobj_file -> 
+    wxTextCtrl_LoadFile cobj__obj  cobj_file  
+foreign import ccall "wxTextCtrl_LoadFile" wxTextCtrl_LoadFile :: Ptr (TTextCtrl a) -> Ptr (TWxString b) -> IO CBool
+
+-- | usage: (@textCtrlPaste obj@).
+textCtrlPaste :: TextCtrl  a ->  IO ()
+textCtrlPaste _obj 
+  = withObjectRef "textCtrlPaste" _obj $ \cobj__obj -> 
+    wxTextCtrl_Paste cobj__obj  
+foreign import ccall "wxTextCtrl_Paste" wxTextCtrl_Paste :: Ptr (TTextCtrl a) -> IO ()
+
+-- | usage: (@textCtrlPositionToXY obj pos x y@).
+textCtrlPositionToXY :: TextCtrl  a -> Int -> Ptr CInt -> Ptr CInt ->  IO Int
+textCtrlPositionToXY _obj pos x y 
+  = withIntResult $
+    withObjectRef "textCtrlPositionToXY" _obj $ \cobj__obj -> 
+    wxTextCtrl_PositionToXY cobj__obj  (toCInt pos)  x  y  
+foreign import ccall "wxTextCtrl_PositionToXY" wxTextCtrl_PositionToXY :: Ptr (TTextCtrl a) -> CInt -> Ptr CInt -> Ptr CInt -> IO CInt
+
+-- | usage: (@textCtrlRedo obj@).
+textCtrlRedo :: TextCtrl  a ->  IO ()
+textCtrlRedo _obj 
+  = withObjectRef "textCtrlRedo" _obj $ \cobj__obj -> 
+    wxTextCtrl_Redo cobj__obj  
+foreign import ccall "wxTextCtrl_Redo" wxTextCtrl_Redo :: Ptr (TTextCtrl a) -> IO ()
+
+-- | usage: (@textCtrlRemove obj from to@).
+textCtrlRemove :: TextCtrl  a -> Int -> Int ->  IO ()
+textCtrlRemove _obj from to 
+  = withObjectRef "textCtrlRemove" _obj $ \cobj__obj -> 
+    wxTextCtrl_Remove cobj__obj  (toCInt from)  (toCInt to)  
+foreign import ccall "wxTextCtrl_Remove" wxTextCtrl_Remove :: Ptr (TTextCtrl a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@textCtrlReplace obj from to value@).
+textCtrlReplace :: TextCtrl  a -> Int -> Int -> String ->  IO ()
+textCtrlReplace _obj from to value 
+  = withObjectRef "textCtrlReplace" _obj $ \cobj__obj -> 
+    withStringPtr value $ \cobj_value -> 
+    wxTextCtrl_Replace cobj__obj  (toCInt from)  (toCInt to)  cobj_value  
+foreign import ccall "wxTextCtrl_Replace" wxTextCtrl_Replace :: Ptr (TTextCtrl a) -> CInt -> CInt -> Ptr (TWxString d) -> IO ()
+
+-- | usage: (@textCtrlSaveFile obj file@).
+textCtrlSaveFile :: TextCtrl  a -> String ->  IO Bool
+textCtrlSaveFile _obj file 
+  = withBoolResult $
+    withObjectRef "textCtrlSaveFile" _obj $ \cobj__obj -> 
+    withStringPtr file $ \cobj_file -> 
+    wxTextCtrl_SaveFile cobj__obj  cobj_file  
+foreign import ccall "wxTextCtrl_SaveFile" wxTextCtrl_SaveFile :: Ptr (TTextCtrl a) -> Ptr (TWxString b) -> IO CBool
+
+-- | usage: (@textCtrlSetDefaultStyle obj style@).
+textCtrlSetDefaultStyle :: TextCtrl  a -> TextAttr  b ->  IO Bool
+textCtrlSetDefaultStyle _obj style 
+  = withBoolResult $
+    withObjectRef "textCtrlSetDefaultStyle" _obj $ \cobj__obj -> 
+    withObjectPtr style $ \cobj_style -> 
+    wxTextCtrl_SetDefaultStyle cobj__obj  cobj_style  
+foreign import ccall "wxTextCtrl_SetDefaultStyle" wxTextCtrl_SetDefaultStyle :: Ptr (TTextCtrl a) -> Ptr (TTextAttr b) -> IO CBool
+
+-- | usage: (@textCtrlSetEditable obj editable@).
+textCtrlSetEditable :: TextCtrl  a -> Bool ->  IO ()
+textCtrlSetEditable _obj editable 
+  = withObjectRef "textCtrlSetEditable" _obj $ \cobj__obj -> 
+    wxTextCtrl_SetEditable cobj__obj  (toCBool editable)  
+foreign import ccall "wxTextCtrl_SetEditable" wxTextCtrl_SetEditable :: Ptr (TTextCtrl a) -> CBool -> IO ()
+
+-- | usage: (@textCtrlSetInsertionPoint obj pos@).
+textCtrlSetInsertionPoint :: TextCtrl  a -> Int ->  IO ()
+textCtrlSetInsertionPoint _obj pos 
+  = withObjectRef "textCtrlSetInsertionPoint" _obj $ \cobj__obj -> 
+    wxTextCtrl_SetInsertionPoint cobj__obj  (toCInt pos)  
+foreign import ccall "wxTextCtrl_SetInsertionPoint" wxTextCtrl_SetInsertionPoint :: Ptr (TTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@textCtrlSetInsertionPointEnd obj@).
+textCtrlSetInsertionPointEnd :: TextCtrl  a ->  IO ()
+textCtrlSetInsertionPointEnd _obj 
+  = withObjectRef "textCtrlSetInsertionPointEnd" _obj $ \cobj__obj -> 
+    wxTextCtrl_SetInsertionPointEnd cobj__obj  
+foreign import ccall "wxTextCtrl_SetInsertionPointEnd" wxTextCtrl_SetInsertionPointEnd :: Ptr (TTextCtrl a) -> IO ()
+
+-- | usage: (@textCtrlSetMaxLength obj len@).
+textCtrlSetMaxLength :: TextCtrl  a -> Int ->  IO ()
+textCtrlSetMaxLength _obj len 
+  = withObjectRef "textCtrlSetMaxLength" _obj $ \cobj__obj -> 
+    wxTextCtrl_SetMaxLength cobj__obj  (toCInt len)  
+foreign import ccall "wxTextCtrl_SetMaxLength" wxTextCtrl_SetMaxLength :: Ptr (TTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@textCtrlSetSelection obj from to@).
+textCtrlSetSelection :: TextCtrl  a -> Int -> Int ->  IO ()
+textCtrlSetSelection _obj from to 
+  = withObjectRef "textCtrlSetSelection" _obj $ \cobj__obj -> 
+    wxTextCtrl_SetSelection cobj__obj  (toCInt from)  (toCInt to)  
+foreign import ccall "wxTextCtrl_SetSelection" wxTextCtrl_SetSelection :: Ptr (TTextCtrl a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@textCtrlSetStyle obj start end style@).
+textCtrlSetStyle :: TextCtrl  a -> Int -> Int -> TextAttr  d ->  IO Bool
+textCtrlSetStyle _obj start end style 
+  = withBoolResult $
+    withObjectRef "textCtrlSetStyle" _obj $ \cobj__obj -> 
+    withObjectPtr style $ \cobj_style -> 
+    wxTextCtrl_SetStyle cobj__obj  (toCInt start)  (toCInt end)  cobj_style  
+foreign import ccall "wxTextCtrl_SetStyle" wxTextCtrl_SetStyle :: Ptr (TTextCtrl a) -> CInt -> CInt -> Ptr (TTextAttr d) -> IO CBool
+
+-- | usage: (@textCtrlSetValue obj value@).
+textCtrlSetValue :: TextCtrl  a -> String ->  IO ()
+textCtrlSetValue _obj value 
+  = withObjectRef "textCtrlSetValue" _obj $ \cobj__obj -> 
+    withStringPtr value $ \cobj_value -> 
+    wxTextCtrl_SetValue cobj__obj  cobj_value  
+foreign import ccall "wxTextCtrl_SetValue" wxTextCtrl_SetValue :: Ptr (TTextCtrl a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@textCtrlShowPosition obj pos@).
+textCtrlShowPosition :: TextCtrl  a -> Int ->  IO ()
+textCtrlShowPosition _obj pos 
+  = withObjectRef "textCtrlShowPosition" _obj $ \cobj__obj -> 
+    wxTextCtrl_ShowPosition cobj__obj  (toCInt pos)  
+foreign import ccall "wxTextCtrl_ShowPosition" wxTextCtrl_ShowPosition :: Ptr (TTextCtrl a) -> CInt -> IO ()
+
+-- | usage: (@textCtrlUndo obj@).
+textCtrlUndo :: TextCtrl  a ->  IO ()
+textCtrlUndo _obj 
+  = withObjectRef "textCtrlUndo" _obj $ \cobj__obj -> 
+    wxTextCtrl_Undo cobj__obj  
+foreign import ccall "wxTextCtrl_Undo" wxTextCtrl_Undo :: Ptr (TTextCtrl a) -> IO ()
+
+-- | usage: (@textCtrlWriteText obj text@).
+textCtrlWriteText :: TextCtrl  a -> String ->  IO ()
+textCtrlWriteText _obj text 
+  = withObjectRef "textCtrlWriteText" _obj $ \cobj__obj -> 
+    withStringPtr text $ \cobj_text -> 
+    wxTextCtrl_WriteText cobj__obj  cobj_text  
+foreign import ccall "wxTextCtrl_WriteText" wxTextCtrl_WriteText :: Ptr (TTextCtrl a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@textCtrlXYToPosition obj xy@).
+textCtrlXYToPosition :: TextCtrl  a -> Point ->  IO Int
+textCtrlXYToPosition _obj xy 
+  = withIntResult $
+    withObjectRef "textCtrlXYToPosition" _obj $ \cobj__obj -> 
+    wxTextCtrl_XYToPosition cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxTextCtrl_XYToPosition" wxTextCtrl_XYToPosition :: Ptr (TTextCtrl a) -> CInt -> CInt -> IO CInt
+
+-- | usage: (@textDataObjectCreate txt@).
+textDataObjectCreate :: String ->  IO (TextDataObject  ())
+textDataObjectCreate _txt 
+  = withObjectResult $
+    withStringPtr _txt $ \cobj__txt -> 
+    wx_TextDataObject_Create cobj__txt  
+foreign import ccall "TextDataObject_Create" wx_TextDataObject_Create :: Ptr (TWxString a) -> IO (Ptr (TTextDataObject ()))
+
+-- | usage: (@textDataObjectDelete obj@).
+textDataObjectDelete :: TextDataObject  a ->  IO ()
+textDataObjectDelete _obj 
+  = withObjectPtr _obj $ \cobj__obj -> 
+    wx_TextDataObject_Delete cobj__obj  
+foreign import ccall "TextDataObject_Delete" wx_TextDataObject_Delete :: Ptr (TTextDataObject a) -> IO ()
+
+-- | usage: (@textDataObjectGetText obj@).
+textDataObjectGetText :: TextDataObject  a ->  IO (String)
+textDataObjectGetText _obj 
+  = withManagedStringResult $
+    withObjectPtr _obj $ \cobj__obj -> 
+    wx_TextDataObject_GetText cobj__obj  
+foreign import ccall "TextDataObject_GetText" wx_TextDataObject_GetText :: Ptr (TTextDataObject a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@textDataObjectGetTextLength obj@).
+textDataObjectGetTextLength :: TextDataObject  a ->  IO Int
+textDataObjectGetTextLength _obj 
+  = withIntResult $
+    withObjectPtr _obj $ \cobj__obj -> 
+    wx_TextDataObject_GetTextLength cobj__obj  
+foreign import ccall "TextDataObject_GetTextLength" wx_TextDataObject_GetTextLength :: Ptr (TTextDataObject a) -> IO CInt
+
+-- | usage: (@textDataObjectSetText obj text@).
+textDataObjectSetText :: TextDataObject  a -> String ->  IO ()
+textDataObjectSetText _obj text 
+  = withObjectPtr _obj $ \cobj__obj -> 
+    withStringPtr text $ \cobj_text -> 
+    wx_TextDataObject_SetText cobj__obj  cobj_text  
+foreign import ccall "TextDataObject_SetText" wx_TextDataObject_SetText :: Ptr (TTextDataObject a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@textInputStreamCreate inputStream sep@).
+textInputStreamCreate :: InputStream  a -> String ->  IO (TextInputStream  ())
+textInputStreamCreate inputStream sep 
+  = withObjectResult $
+    withObjectPtr inputStream $ \cobj_inputStream -> 
+    withStringPtr sep $ \cobj_sep -> 
+    wxTextInputStream_Create cobj_inputStream  cobj_sep  
+foreign import ccall "wxTextInputStream_Create" wxTextInputStream_Create :: Ptr (TInputStream a) -> Ptr (TWxString b) -> IO (Ptr (TTextInputStream ()))
+
+-- | usage: (@textInputStreamDelete self@).
+textInputStreamDelete :: TextInputStream  a ->  IO ()
+textInputStreamDelete self 
+  = withObjectRef "textInputStreamDelete" self $ \cobj_self -> 
+    wxTextInputStream_Delete cobj_self  
+foreign import ccall "wxTextInputStream_Delete" wxTextInputStream_Delete :: Ptr (TTextInputStream a) -> IO ()
+
+-- | usage: (@textInputStreamReadLine self@).
+textInputStreamReadLine :: TextInputStream  a ->  IO (String)
+textInputStreamReadLine self 
+  = withManagedStringResult $
+    withObjectRef "textInputStreamReadLine" self $ \cobj_self -> 
+    wxTextInputStream_ReadLine cobj_self  
+foreign import ccall "wxTextInputStream_ReadLine" wxTextInputStream_ReadLine :: Ptr (TTextInputStream a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@textOutputStreamCreate outputStream mode@).
+textOutputStreamCreate :: OutputStream  a -> Int ->  IO (TextOutputStream  ())
+textOutputStreamCreate outputStream mode 
+  = withObjectResult $
+    withObjectPtr outputStream $ \cobj_outputStream -> 
+    wxTextOutputStream_Create cobj_outputStream  (toCInt mode)  
+foreign import ccall "wxTextOutputStream_Create" wxTextOutputStream_Create :: Ptr (TOutputStream a) -> CInt -> IO (Ptr (TTextOutputStream ()))
+
+-- | usage: (@textOutputStreamDelete self@).
+textOutputStreamDelete :: TextOutputStream  a ->  IO ()
+textOutputStreamDelete self 
+  = withObjectRef "textOutputStreamDelete" self $ \cobj_self -> 
+    wxTextOutputStream_Delete cobj_self  
+foreign import ccall "wxTextOutputStream_Delete" wxTextOutputStream_Delete :: Ptr (TTextOutputStream a) -> IO ()
+
+-- | usage: (@textOutputStreamWriteString self txt@).
+textOutputStreamWriteString :: TextOutputStream  a -> String ->  IO ()
+textOutputStreamWriteString self txt 
+  = withObjectRef "textOutputStreamWriteString" self $ \cobj_self -> 
+    withStringPtr txt $ \cobj_txt -> 
+    wxTextOutputStream_WriteString cobj_self  cobj_txt  
+foreign import ccall "wxTextOutputStream_WriteString" wxTextOutputStream_WriteString :: Ptr (TTextOutputStream a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@textValidatorClone obj@).
+textValidatorClone :: TextValidator  a ->  IO (Validator  ())
+textValidatorClone _obj 
+  = withObjectResult $
+    withObjectRef "textValidatorClone" _obj $ \cobj__obj -> 
+    wxTextValidator_Clone cobj__obj  
+foreign import ccall "wxTextValidator_Clone" wxTextValidator_Clone :: Ptr (TTextValidator a) -> IO (Ptr (TValidator ()))
+
+-- | usage: (@textValidatorCreate style val@).
+textValidatorCreate :: Int -> Ptr  b ->  IO (TextValidator  ())
+textValidatorCreate style val 
+  = withObjectResult $
+    wxTextValidator_Create (toCInt style)  val  
+foreign import ccall "wxTextValidator_Create" wxTextValidator_Create :: CInt -> Ptr  b -> IO (Ptr (TTextValidator ()))
+
+-- | usage: (@textValidatorGetExcludes obj@).
+textValidatorGetExcludes :: TextValidator  a ->  IO [String]
+textValidatorGetExcludes _obj 
+  = withArrayWStringResult $ \arr -> 
+    withObjectRef "textValidatorGetExcludes" _obj $ \cobj__obj -> 
+    wxTextValidator_GetExcludes cobj__obj   arr
+foreign import ccall "wxTextValidator_GetExcludes" wxTextValidator_GetExcludes :: Ptr (TTextValidator a) -> Ptr (Ptr CWchar) -> IO CInt
+
+-- | usage: (@textValidatorGetIncludes obj@).
+textValidatorGetIncludes :: TextValidator  a ->  IO [String]
+textValidatorGetIncludes _obj 
+  = withArrayWStringResult $ \arr -> 
+    withObjectRef "textValidatorGetIncludes" _obj $ \cobj__obj -> 
+    wxTextValidator_GetIncludes cobj__obj   arr
+foreign import ccall "wxTextValidator_GetIncludes" wxTextValidator_GetIncludes :: Ptr (TTextValidator a) -> Ptr (Ptr CWchar) -> IO CInt
+
+-- | usage: (@textValidatorGetStyle obj@).
+textValidatorGetStyle :: TextValidator  a ->  IO Int
+textValidatorGetStyle _obj 
+  = withIntResult $
+    withObjectRef "textValidatorGetStyle" _obj $ \cobj__obj -> 
+    wxTextValidator_GetStyle cobj__obj  
+foreign import ccall "wxTextValidator_GetStyle" wxTextValidator_GetStyle :: Ptr (TTextValidator a) -> IO CInt
+
+-- | usage: (@textValidatorOnChar obj event@).
+textValidatorOnChar :: TextValidator  a -> Event  b ->  IO ()
+textValidatorOnChar _obj event 
+  = withObjectRef "textValidatorOnChar" _obj $ \cobj__obj -> 
+    withObjectPtr event $ \cobj_event -> 
+    wxTextValidator_OnChar cobj__obj  cobj_event  
+foreign import ccall "wxTextValidator_OnChar" wxTextValidator_OnChar :: Ptr (TTextValidator a) -> Ptr (TEvent b) -> IO ()
+
+-- | usage: (@textValidatorSetExcludes obj list count@).
+textValidatorSetExcludes :: TextValidator  a -> String -> Int ->  IO ()
+textValidatorSetExcludes _obj list count 
+  = withObjectRef "textValidatorSetExcludes" _obj $ \cobj__obj -> 
+    withCWString list $ \cstr_list -> 
+    wxTextValidator_SetExcludes cobj__obj  cstr_list  (toCInt count)  
+foreign import ccall "wxTextValidator_SetExcludes" wxTextValidator_SetExcludes :: Ptr (TTextValidator a) -> CWString -> CInt -> IO ()
+
+-- | usage: (@textValidatorSetIncludes obj list count@).
+textValidatorSetIncludes :: TextValidator  a -> String -> Int ->  IO ()
+textValidatorSetIncludes _obj list count 
+  = withObjectRef "textValidatorSetIncludes" _obj $ \cobj__obj -> 
+    withCWString list $ \cstr_list -> 
+    wxTextValidator_SetIncludes cobj__obj  cstr_list  (toCInt count)  
+foreign import ccall "wxTextValidator_SetIncludes" wxTextValidator_SetIncludes :: Ptr (TTextValidator a) -> CWString -> CInt -> IO ()
+
+-- | usage: (@textValidatorSetStyle obj style@).
+textValidatorSetStyle :: TextValidator  a -> Int ->  IO ()
+textValidatorSetStyle _obj style 
+  = withObjectRef "textValidatorSetStyle" _obj $ \cobj__obj -> 
+    wxTextValidator_SetStyle cobj__obj  (toCInt style)  
+foreign import ccall "wxTextValidator_SetStyle" wxTextValidator_SetStyle :: Ptr (TTextValidator a) -> CInt -> IO ()
+
+-- | usage: (@textValidatorTransferFromWindow obj@).
+textValidatorTransferFromWindow :: TextValidator  a ->  IO Bool
+textValidatorTransferFromWindow _obj 
+  = withBoolResult $
+    withObjectRef "textValidatorTransferFromWindow" _obj $ \cobj__obj -> 
+    wxTextValidator_TransferFromWindow cobj__obj  
+foreign import ccall "wxTextValidator_TransferFromWindow" wxTextValidator_TransferFromWindow :: Ptr (TTextValidator a) -> IO CBool
+
+-- | usage: (@textValidatorTransferToWindow obj@).
+textValidatorTransferToWindow :: TextValidator  a ->  IO Bool
+textValidatorTransferToWindow _obj 
+  = withBoolResult $
+    withObjectRef "textValidatorTransferToWindow" _obj $ \cobj__obj -> 
+    wxTextValidator_TransferToWindow cobj__obj  
+foreign import ccall "wxTextValidator_TransferToWindow" wxTextValidator_TransferToWindow :: Ptr (TTextValidator a) -> IO CBool
+
+-- | usage: (@timerCreate prt id@).
+timerCreate :: Window  a -> Id ->  IO (Timer  ())
+timerCreate _prt _id 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    wxTimer_Create cobj__prt  (toCInt _id)  
+foreign import ccall "wxTimer_Create" wxTimer_Create :: Ptr (TWindow a) -> CInt -> IO (Ptr (TTimer ()))
+
+-- | usage: (@timerDelete obj@).
+timerDelete :: Timer  a ->  IO ()
+timerDelete
+  = objectDelete
+
+
+-- | usage: (@timerEventGetInterval obj@).
+timerEventGetInterval :: TimerEvent  a ->  IO Int
+timerEventGetInterval _obj 
+  = withIntResult $
+    withObjectRef "timerEventGetInterval" _obj $ \cobj__obj -> 
+    wxTimerEvent_GetInterval cobj__obj  
+foreign import ccall "wxTimerEvent_GetInterval" wxTimerEvent_GetInterval :: Ptr (TTimerEvent a) -> IO CInt
+
+-- | usage: (@timerExConnect obj closure@).
+timerExConnect :: TimerEx  a -> Closure  b ->  IO ()
+timerExConnect _obj closure 
+  = withObjectRef "timerExConnect" _obj $ \cobj__obj -> 
+    withObjectPtr closure $ \cobj_closure -> 
+    wxTimerEx_Connect cobj__obj  cobj_closure  
+foreign import ccall "wxTimerEx_Connect" wxTimerEx_Connect :: Ptr (TTimerEx a) -> Ptr (TClosure b) -> IO ()
+
+-- | usage: (@timerExCreate@).
+timerExCreate ::  IO (TimerEx  ())
+timerExCreate 
+  = withObjectResult $
+    wxTimerEx_Create 
+foreign import ccall "wxTimerEx_Create" wxTimerEx_Create :: IO (Ptr (TTimerEx ()))
+
+-- | usage: (@timerExGetClosure obj@).
+timerExGetClosure :: TimerEx  a ->  IO (Closure  ())
+timerExGetClosure _obj 
+  = withObjectResult $
+    withObjectRef "timerExGetClosure" _obj $ \cobj__obj -> 
+    wxTimerEx_GetClosure cobj__obj  
+foreign import ccall "wxTimerEx_GetClosure" wxTimerEx_GetClosure :: Ptr (TTimerEx a) -> IO (Ptr (TClosure ()))
+
+-- | usage: (@timerGetInterval obj@).
+timerGetInterval :: Timer  a ->  IO Int
+timerGetInterval _obj 
+  = withIntResult $
+    withObjectRef "timerGetInterval" _obj $ \cobj__obj -> 
+    wxTimer_GetInterval cobj__obj  
+foreign import ccall "wxTimer_GetInterval" wxTimer_GetInterval :: Ptr (TTimer a) -> IO CInt
+
+-- | usage: (@timerIsOneShot obj@).
+timerIsOneShot :: Timer  a ->  IO Bool
+timerIsOneShot _obj 
+  = withBoolResult $
+    withObjectRef "timerIsOneShot" _obj $ \cobj__obj -> 
+    wxTimer_IsOneShot cobj__obj  
+foreign import ccall "wxTimer_IsOneShot" wxTimer_IsOneShot :: Ptr (TTimer a) -> IO CBool
+
+-- | usage: (@timerIsRuning obj@).
+timerIsRuning :: Timer  a ->  IO Bool
+timerIsRuning _obj 
+  = withBoolResult $
+    withObjectRef "timerIsRuning" _obj $ \cobj__obj -> 
+    wxTimer_IsRuning cobj__obj  
+foreign import ccall "wxTimer_IsRuning" wxTimer_IsRuning :: Ptr (TTimer a) -> IO CBool
+
+-- | usage: (@timerStart obj wxint one@).
+timerStart :: Timer  a -> Int -> Bool ->  IO Bool
+timerStart _obj _int _one 
+  = withBoolResult $
+    withObjectRef "timerStart" _obj $ \cobj__obj -> 
+    wxTimer_Start cobj__obj  (toCInt _int)  (toCBool _one)  
+foreign import ccall "wxTimer_Start" wxTimer_Start :: Ptr (TTimer a) -> CInt -> CBool -> IO CBool
+
+-- | usage: (@timerStop obj@).
+timerStop :: Timer  a ->  IO ()
+timerStop _obj 
+  = withObjectRef "timerStop" _obj $ \cobj__obj -> 
+    wxTimer_Stop cobj__obj  
+foreign import ccall "wxTimer_Stop" wxTimer_Stop :: Ptr (TTimer a) -> IO ()
+
+-- | usage: (@tipWindowClose obj@).
+tipWindowClose :: TipWindow  a ->  IO ()
+tipWindowClose _obj 
+  = withObjectRef "tipWindowClose" _obj $ \cobj__obj -> 
+    wxTipWindow_Close cobj__obj  
+foreign import ccall "wxTipWindow_Close" wxTipWindow_Close :: Ptr (TTipWindow a) -> IO ()
+
+-- | usage: (@tipWindowCreate parent text maxLength@).
+tipWindowCreate :: Window  a -> String -> Int ->  IO (TipWindow  ())
+tipWindowCreate parent text maxLength 
+  = withObjectResult $
+    withObjectPtr parent $ \cobj_parent -> 
+    withStringPtr text $ \cobj_text -> 
+    wxTipWindow_Create cobj_parent  cobj_text  (toCInt maxLength)  
+foreign import ccall "wxTipWindow_Create" wxTipWindow_Create :: Ptr (TWindow a) -> Ptr (TWxString b) -> CInt -> IO (Ptr (TTipWindow ()))
+
+-- | usage: (@tipWindowSetBoundingRect obj xywh@).
+tipWindowSetBoundingRect :: TipWindow  a -> Rect ->  IO ()
+tipWindowSetBoundingRect _obj xywh 
+  = withObjectRef "tipWindowSetBoundingRect" _obj $ \cobj__obj -> 
+    wxTipWindow_SetBoundingRect cobj__obj  (toCIntRectX xywh) (toCIntRectY xywh)(toCIntRectW xywh) (toCIntRectH xywh)  
+foreign import ccall "wxTipWindow_SetBoundingRect" wxTipWindow_SetBoundingRect :: Ptr (TTipWindow a) -> CInt -> CInt -> CInt -> CInt -> IO ()
+
+-- | usage: (@tipWindowSetTipWindowPtr obj windowPtr@).
+tipWindowSetTipWindowPtr :: TipWindow  a -> Ptr  b ->  IO ()
+tipWindowSetTipWindowPtr _obj windowPtr 
+  = withObjectRef "tipWindowSetTipWindowPtr" _obj $ \cobj__obj -> 
+    wxTipWindow_SetTipWindowPtr cobj__obj  windowPtr  
+foreign import ccall "wxTipWindow_SetTipWindowPtr" wxTipWindow_SetTipWindowPtr :: Ptr (TTipWindow a) -> Ptr  b -> IO ()
+
+-- | usage: (@toggleButtonCreate parent id label xywh style@).
+toggleButtonCreate :: Window  a -> Id -> String -> Rect -> Int ->  IO (ToggleButton  ())
+toggleButtonCreate parent id label xywh style 
+  = withObjectResult $
+    withObjectPtr parent $ \cobj_parent -> 
+    withStringPtr label $ \cobj_label -> 
+    wxToggleButton_Create cobj_parent  (toCInt id)  cobj_label  (toCIntRectX xywh) (toCIntRectY xywh)(toCIntRectW xywh) (toCIntRectH xywh)  (toCInt style)  
+foreign import ccall "wxToggleButton_Create" wxToggleButton_Create :: Ptr (TWindow a) -> CInt -> Ptr (TWxString c) -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TToggleButton ()))
+
+-- | usage: (@toggleButtonEnable obj enable@).
+toggleButtonEnable :: ToggleButton  a -> Bool ->  IO Bool
+toggleButtonEnable _obj enable 
+  = withBoolResult $
+    withObjectRef "toggleButtonEnable" _obj $ \cobj__obj -> 
+    wxToggleButton_Enable cobj__obj  (toCBool enable)  
+foreign import ccall "wxToggleButton_Enable" wxToggleButton_Enable :: Ptr (TToggleButton a) -> CBool -> IO CBool
+
+-- | usage: (@toggleButtonGetValue obj@).
+toggleButtonGetValue :: ToggleButton  a ->  IO Bool
+toggleButtonGetValue _obj 
+  = withBoolResult $
+    withObjectRef "toggleButtonGetValue" _obj $ \cobj__obj -> 
+    wxToggleButton_GetValue cobj__obj  
+foreign import ccall "wxToggleButton_GetValue" wxToggleButton_GetValue :: Ptr (TToggleButton a) -> IO CBool
+
+-- | usage: (@toggleButtonSetLabel obj label@).
+toggleButtonSetLabel :: ToggleButton  a -> String ->  IO ()
+toggleButtonSetLabel _obj label 
+  = withObjectRef "toggleButtonSetLabel" _obj $ \cobj__obj -> 
+    withStringPtr label $ \cobj_label -> 
+    wxToggleButton_SetLabel cobj__obj  cobj_label  
+foreign import ccall "wxToggleButton_SetLabel" wxToggleButton_SetLabel :: Ptr (TToggleButton a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@toggleButtonSetValue obj state@).
+toggleButtonSetValue :: ToggleButton  a -> Bool ->  IO ()
+toggleButtonSetValue _obj state 
+  = withObjectRef "toggleButtonSetValue" _obj $ \cobj__obj -> 
+    wxToggleButton_SetValue cobj__obj  (toCBool state)  
+foreign import ccall "wxToggleButton_SetValue" wxToggleButton_SetValue :: Ptr (TToggleButton a) -> CBool -> IO ()
+
+-- | usage: (@toolBarAddControl obj ctrl@).
+toolBarAddControl :: ToolBar  a -> Control  b ->  IO Bool
+toolBarAddControl _obj ctrl 
+  = withBoolResult $
+    withObjectRef "toolBarAddControl" _obj $ \cobj__obj -> 
+    withObjectPtr ctrl $ \cobj_ctrl -> 
+    wxToolBar_AddControl cobj__obj  cobj_ctrl  
+foreign import ccall "wxToolBar_AddControl" wxToolBar_AddControl :: Ptr (TToolBar a) -> Ptr (TControl b) -> IO CBool
+
+-- | usage: (@toolBarAddSeparator obj@).
+toolBarAddSeparator :: ToolBar  a ->  IO ()
+toolBarAddSeparator _obj 
+  = withObjectRef "toolBarAddSeparator" _obj $ \cobj__obj -> 
+    wxToolBar_AddSeparator cobj__obj  
+foreign import ccall "wxToolBar_AddSeparator" wxToolBar_AddSeparator :: Ptr (TToolBar a) -> IO ()
+
+-- | usage: (@toolBarAddTool obj toolid label bitmap bmpDisabled kind shortHelp longHelp wxdata@).
+toolBarAddTool :: ToolBar  a -> Int -> String -> Bitmap  d -> Bitmap  e -> Int -> String -> String -> WxObject  i ->  IO ()
+toolBarAddTool _obj toolid label bitmap bmpDisabled kind shortHelp longHelp wxdata 
+  = withObjectRef "toolBarAddTool" _obj $ \cobj__obj -> 
+    withStringPtr label $ \cobj_label -> 
+    withObjectPtr bitmap $ \cobj_bitmap -> 
+    withObjectPtr bmpDisabled $ \cobj_bmpDisabled -> 
+    withStringPtr shortHelp $ \cobj_shortHelp -> 
+    withStringPtr longHelp $ \cobj_longHelp -> 
+    withObjectPtr wxdata $ \cobj_wxdata -> 
+    wxToolBar_AddTool cobj__obj  (toCInt toolid)  cobj_label  cobj_bitmap  cobj_bmpDisabled  (toCInt kind)  cobj_shortHelp  cobj_longHelp  cobj_wxdata  
+foreign import ccall "wxToolBar_AddTool" wxToolBar_AddTool :: Ptr (TToolBar a) -> CInt -> Ptr (TWxString c) -> Ptr (TBitmap d) -> Ptr (TBitmap e) -> CInt -> Ptr (TWxString g) -> Ptr (TWxString h) -> Ptr (TWxObject i) -> IO ()
+
+-- | usage: (@toolBarAddTool2 obj toolId label bmp bmpDisabled itemKind shortHelp longHelp@).
+toolBarAddTool2 :: ToolBar  a -> Int -> String -> Bitmap  d -> Bitmap  e -> Int -> String -> String ->  IO ()
+toolBarAddTool2 _obj toolId label bmp bmpDisabled itemKind shortHelp longHelp 
+  = withObjectRef "toolBarAddTool2" _obj $ \cobj__obj -> 
+    withStringPtr label $ \cobj_label -> 
+    withObjectPtr bmp $ \cobj_bmp -> 
+    withObjectPtr bmpDisabled $ \cobj_bmpDisabled -> 
+    withStringPtr shortHelp $ \cobj_shortHelp -> 
+    withStringPtr longHelp $ \cobj_longHelp -> 
+    wxToolBar_AddTool2 cobj__obj  (toCInt toolId)  cobj_label  cobj_bmp  cobj_bmpDisabled  (toCInt itemKind)  cobj_shortHelp  cobj_longHelp  
+foreign import ccall "wxToolBar_AddTool2" wxToolBar_AddTool2 :: Ptr (TToolBar a) -> CInt -> Ptr (TWxString c) -> Ptr (TBitmap d) -> Ptr (TBitmap e) -> CInt -> Ptr (TWxString g) -> Ptr (TWxString h) -> IO ()
+
+-- | usage: (@toolBarCreate prt id lfttopwdthgt stl@).
+toolBarCreate :: Window  a -> Id -> Rect -> Style ->  IO (ToolBar  ())
+toolBarCreate _prt _id _lfttopwdthgt _stl 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    wxToolBar_Create cobj__prt  (toCInt _id)  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
+foreign import ccall "wxToolBar_Create" wxToolBar_Create :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TToolBar ()))
+
+-- | usage: (@toolBarDelete obj@).
+toolBarDelete :: ToolBar  a ->  IO ()
+toolBarDelete
+  = objectDelete
+
+
+-- | usage: (@toolBarDeleteTool obj id@).
+toolBarDeleteTool :: ToolBar  a -> Id ->  IO Bool
+toolBarDeleteTool _obj id 
+  = withBoolResult $
+    withObjectRef "toolBarDeleteTool" _obj $ \cobj__obj -> 
+    wxToolBar_DeleteTool cobj__obj  (toCInt id)  
+foreign import ccall "wxToolBar_DeleteTool" wxToolBar_DeleteTool :: Ptr (TToolBar a) -> CInt -> IO CBool
+
+-- | usage: (@toolBarDeleteToolByPos obj pos@).
+toolBarDeleteToolByPos :: ToolBar  a -> Int ->  IO Bool
+toolBarDeleteToolByPos _obj pos 
+  = withBoolResult $
+    withObjectRef "toolBarDeleteToolByPos" _obj $ \cobj__obj -> 
+    wxToolBar_DeleteToolByPos cobj__obj  (toCInt pos)  
+foreign import ccall "wxToolBar_DeleteToolByPos" wxToolBar_DeleteToolByPos :: Ptr (TToolBar a) -> CInt -> IO CBool
+
+-- | usage: (@toolBarEnableTool obj id enable@).
+toolBarEnableTool :: ToolBar  a -> Id -> Bool ->  IO ()
+toolBarEnableTool _obj id enable 
+  = withObjectRef "toolBarEnableTool" _obj $ \cobj__obj -> 
+    wxToolBar_EnableTool cobj__obj  (toCInt id)  (toCBool enable)  
+foreign import ccall "wxToolBar_EnableTool" wxToolBar_EnableTool :: Ptr (TToolBar a) -> CInt -> CBool -> IO ()
+
+-- | usage: (@toolBarGetMargins obj@).
+toolBarGetMargins :: ToolBar  a ->  IO (Point)
+toolBarGetMargins _obj 
+  = withWxPointResult $
+    withObjectRef "toolBarGetMargins" _obj $ \cobj__obj -> 
+    wxToolBar_GetMargins cobj__obj  
+foreign import ccall "wxToolBar_GetMargins" wxToolBar_GetMargins :: Ptr (TToolBar a) -> IO (Ptr (TWxPoint ()))
+
+-- | usage: (@toolBarGetToolBitmapSize obj@).
+toolBarGetToolBitmapSize :: ToolBar  a ->  IO (Size)
+toolBarGetToolBitmapSize _obj 
+  = withWxSizeResult $
+    withObjectRef "toolBarGetToolBitmapSize" _obj $ \cobj__obj -> 
+    wxToolBar_GetToolBitmapSize cobj__obj  
+foreign import ccall "wxToolBar_GetToolBitmapSize" wxToolBar_GetToolBitmapSize :: Ptr (TToolBar a) -> IO (Ptr (TWxSize ()))
+
+-- | usage: (@toolBarGetToolClientData obj id@).
+toolBarGetToolClientData :: ToolBar  a -> Id ->  IO (WxObject  ())
+toolBarGetToolClientData _obj id 
+  = withObjectResult $
+    withObjectRef "toolBarGetToolClientData" _obj $ \cobj__obj -> 
+    wxToolBar_GetToolClientData cobj__obj  (toCInt id)  
+foreign import ccall "wxToolBar_GetToolClientData" wxToolBar_GetToolClientData :: Ptr (TToolBar a) -> CInt -> IO (Ptr (TWxObject ()))
+
+-- | usage: (@toolBarGetToolEnabled obj id@).
+toolBarGetToolEnabled :: ToolBar  a -> Id ->  IO Bool
+toolBarGetToolEnabled _obj id 
+  = withBoolResult $
+    withObjectRef "toolBarGetToolEnabled" _obj $ \cobj__obj -> 
+    wxToolBar_GetToolEnabled cobj__obj  (toCInt id)  
+foreign import ccall "wxToolBar_GetToolEnabled" wxToolBar_GetToolEnabled :: Ptr (TToolBar a) -> CInt -> IO CBool
+
+-- | usage: (@toolBarGetToolLongHelp obj id@).
+toolBarGetToolLongHelp :: ToolBar  a -> Id ->  IO (String)
+toolBarGetToolLongHelp _obj id 
+  = withManagedStringResult $
+    withObjectRef "toolBarGetToolLongHelp" _obj $ \cobj__obj -> 
+    wxToolBar_GetToolLongHelp cobj__obj  (toCInt id)  
+foreign import ccall "wxToolBar_GetToolLongHelp" wxToolBar_GetToolLongHelp :: Ptr (TToolBar a) -> CInt -> IO (Ptr (TWxString ()))
+
+-- | usage: (@toolBarGetToolPacking obj@).
+toolBarGetToolPacking :: ToolBar  a ->  IO Int
+toolBarGetToolPacking _obj 
+  = withIntResult $
+    withObjectRef "toolBarGetToolPacking" _obj $ \cobj__obj -> 
+    wxToolBar_GetToolPacking cobj__obj  
+foreign import ccall "wxToolBar_GetToolPacking" wxToolBar_GetToolPacking :: Ptr (TToolBar a) -> IO CInt
+
+-- | usage: (@toolBarGetToolShortHelp obj id@).
+toolBarGetToolShortHelp :: ToolBar  a -> Id ->  IO (String)
+toolBarGetToolShortHelp _obj id 
+  = withManagedStringResult $
+    withObjectRef "toolBarGetToolShortHelp" _obj $ \cobj__obj -> 
+    wxToolBar_GetToolShortHelp cobj__obj  (toCInt id)  
+foreign import ccall "wxToolBar_GetToolShortHelp" wxToolBar_GetToolShortHelp :: Ptr (TToolBar a) -> CInt -> IO (Ptr (TWxString ()))
+
+-- | usage: (@toolBarGetToolSize obj@).
+toolBarGetToolSize :: ToolBar  a ->  IO (Size)
+toolBarGetToolSize _obj 
+  = withWxSizeResult $
+    withObjectRef "toolBarGetToolSize" _obj $ \cobj__obj -> 
+    wxToolBar_GetToolSize cobj__obj  
+foreign import ccall "wxToolBar_GetToolSize" wxToolBar_GetToolSize :: Ptr (TToolBar a) -> IO (Ptr (TWxSize ()))
+
+-- | usage: (@toolBarGetToolState obj id@).
+toolBarGetToolState :: ToolBar  a -> Id ->  IO Bool
+toolBarGetToolState _obj id 
+  = withBoolResult $
+    withObjectRef "toolBarGetToolState" _obj $ \cobj__obj -> 
+    wxToolBar_GetToolState cobj__obj  (toCInt id)  
+foreign import ccall "wxToolBar_GetToolState" wxToolBar_GetToolState :: Ptr (TToolBar a) -> CInt -> IO CBool
+
+-- | usage: (@toolBarInsertControl obj pos ctrl@).
+toolBarInsertControl :: ToolBar  a -> Int -> Control  c ->  IO ()
+toolBarInsertControl _obj pos ctrl 
+  = withObjectRef "toolBarInsertControl" _obj $ \cobj__obj -> 
+    withObjectPtr ctrl $ \cobj_ctrl -> 
+    wxToolBar_InsertControl cobj__obj  (toCInt pos)  cobj_ctrl  
+foreign import ccall "wxToolBar_InsertControl" wxToolBar_InsertControl :: Ptr (TToolBar a) -> CInt -> Ptr (TControl c) -> IO ()
+
+-- | usage: (@toolBarInsertSeparator obj pos@).
+toolBarInsertSeparator :: ToolBar  a -> Int ->  IO ()
+toolBarInsertSeparator _obj pos 
+  = withObjectRef "toolBarInsertSeparator" _obj $ \cobj__obj -> 
+    wxToolBar_InsertSeparator cobj__obj  (toCInt pos)  
+foreign import ccall "wxToolBar_InsertSeparator" wxToolBar_InsertSeparator :: Ptr (TToolBar a) -> CInt -> IO ()
+
+-- | usage: (@toolBarRealize obj@).
+toolBarRealize :: ToolBar  a ->  IO Bool
+toolBarRealize _obj 
+  = withBoolResult $
+    withObjectRef "toolBarRealize" _obj $ \cobj__obj -> 
+    wxToolBar_Realize cobj__obj  
+foreign import ccall "wxToolBar_Realize" wxToolBar_Realize :: Ptr (TToolBar a) -> IO CBool
+
+-- | usage: (@toolBarRemoveTool obj id@).
+toolBarRemoveTool :: ToolBar  a -> Id ->  IO ()
+toolBarRemoveTool _obj id 
+  = withObjectRef "toolBarRemoveTool" _obj $ \cobj__obj -> 
+    wxToolBar_RemoveTool cobj__obj  (toCInt id)  
+foreign import ccall "wxToolBar_RemoveTool" wxToolBar_RemoveTool :: Ptr (TToolBar a) -> CInt -> IO ()
+
+-- | usage: (@toolBarSetMargins obj xy@).
+toolBarSetMargins :: ToolBar  a -> Point ->  IO ()
+toolBarSetMargins _obj xy 
+  = withObjectRef "toolBarSetMargins" _obj $ \cobj__obj -> 
+    wxToolBar_SetMargins cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxToolBar_SetMargins" wxToolBar_SetMargins :: Ptr (TToolBar a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@toolBarSetToolBitmapSize obj xy@).
+toolBarSetToolBitmapSize :: ToolBar  a -> Size ->  IO ()
+toolBarSetToolBitmapSize _obj xy 
+  = withObjectRef "toolBarSetToolBitmapSize" _obj $ \cobj__obj -> 
+    wxToolBar_SetToolBitmapSize cobj__obj  (toCIntSizeW xy) (toCIntSizeH xy)  
+foreign import ccall "wxToolBar_SetToolBitmapSize" wxToolBar_SetToolBitmapSize :: Ptr (TToolBar a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@toolBarSetToolClientData obj id wxdata@).
+toolBarSetToolClientData :: ToolBar  a -> Id -> WxObject  c ->  IO ()
+toolBarSetToolClientData _obj id wxdata 
+  = withObjectRef "toolBarSetToolClientData" _obj $ \cobj__obj -> 
+    withObjectPtr wxdata $ \cobj_wxdata -> 
+    wxToolBar_SetToolClientData cobj__obj  (toCInt id)  cobj_wxdata  
+foreign import ccall "wxToolBar_SetToolClientData" wxToolBar_SetToolClientData :: Ptr (TToolBar a) -> CInt -> Ptr (TWxObject c) -> IO ()
+
+-- | usage: (@toolBarSetToolLongHelp obj id str@).
+toolBarSetToolLongHelp :: ToolBar  a -> Id -> String ->  IO ()
+toolBarSetToolLongHelp _obj id str 
+  = withObjectRef "toolBarSetToolLongHelp" _obj $ \cobj__obj -> 
+    withStringPtr str $ \cobj_str -> 
+    wxToolBar_SetToolLongHelp cobj__obj  (toCInt id)  cobj_str  
+foreign import ccall "wxToolBar_SetToolLongHelp" wxToolBar_SetToolLongHelp :: Ptr (TToolBar a) -> CInt -> Ptr (TWxString c) -> IO ()
+
+-- | usage: (@toolBarSetToolPacking obj packing@).
+toolBarSetToolPacking :: ToolBar  a -> Int ->  IO ()
+toolBarSetToolPacking _obj packing 
+  = withObjectRef "toolBarSetToolPacking" _obj $ \cobj__obj -> 
+    wxToolBar_SetToolPacking cobj__obj  (toCInt packing)  
+foreign import ccall "wxToolBar_SetToolPacking" wxToolBar_SetToolPacking :: Ptr (TToolBar a) -> CInt -> IO ()
+
+-- | usage: (@toolBarSetToolSeparation obj separation@).
+toolBarSetToolSeparation :: ToolBar  a -> Int ->  IO ()
+toolBarSetToolSeparation _obj separation 
+  = withObjectRef "toolBarSetToolSeparation" _obj $ \cobj__obj -> 
+    wxToolBar_SetToolSeparation cobj__obj  (toCInt separation)  
+foreign import ccall "wxToolBar_SetToolSeparation" wxToolBar_SetToolSeparation :: Ptr (TToolBar a) -> CInt -> IO ()
+
+-- | usage: (@toolBarSetToolShortHelp obj id str@).
+toolBarSetToolShortHelp :: ToolBar  a -> Id -> String ->  IO ()
+toolBarSetToolShortHelp _obj id str 
+  = withObjectRef "toolBarSetToolShortHelp" _obj $ \cobj__obj -> 
+    withStringPtr str $ \cobj_str -> 
+    wxToolBar_SetToolShortHelp cobj__obj  (toCInt id)  cobj_str  
+foreign import ccall "wxToolBar_SetToolShortHelp" wxToolBar_SetToolShortHelp :: Ptr (TToolBar a) -> CInt -> Ptr (TWxString c) -> IO ()
+
+-- | usage: (@toolBarToggleTool obj id toggle@).
+toolBarToggleTool :: ToolBar  a -> Id -> Bool ->  IO ()
+toolBarToggleTool _obj id toggle 
+  = withObjectRef "toolBarToggleTool" _obj $ \cobj__obj -> 
+    wxToolBar_ToggleTool cobj__obj  (toCInt id)  (toCBool toggle)  
+foreign import ccall "wxToolBar_ToggleTool" wxToolBar_ToggleTool :: Ptr (TToolBar a) -> CInt -> CBool -> IO ()
+
+-- | usage: (@topLevelWindowEnableCloseButton obj enable@).
+topLevelWindowEnableCloseButton :: TopLevelWindow  a -> Bool ->  IO Bool
+topLevelWindowEnableCloseButton _obj enable 
+  = withBoolResult $
+    withObjectRef "topLevelWindowEnableCloseButton" _obj $ \cobj__obj -> 
+    wxTopLevelWindow_EnableCloseButton cobj__obj  (toCBool enable)  
+foreign import ccall "wxTopLevelWindow_EnableCloseButton" wxTopLevelWindow_EnableCloseButton :: Ptr (TTopLevelWindow a) -> CBool -> IO CBool
+
+-- | usage: (@topLevelWindowGetDefaultButton obj@).
+topLevelWindowGetDefaultButton :: TopLevelWindow  a ->  IO (Button  ())
+topLevelWindowGetDefaultButton _obj 
+  = withObjectResult $
+    withObjectRef "topLevelWindowGetDefaultButton" _obj $ \cobj__obj -> 
+    wxTopLevelWindow_GetDefaultButton cobj__obj  
+foreign import ccall "wxTopLevelWindow_GetDefaultButton" wxTopLevelWindow_GetDefaultButton :: Ptr (TTopLevelWindow a) -> IO (Ptr (TButton ()))
+
+-- | usage: (@topLevelWindowGetDefaultItem obj@).
+topLevelWindowGetDefaultItem :: TopLevelWindow  a ->  IO (Window  ())
+topLevelWindowGetDefaultItem _obj 
+  = withObjectResult $
+    withObjectRef "topLevelWindowGetDefaultItem" _obj $ \cobj__obj -> 
+    wxTopLevelWindow_GetDefaultItem cobj__obj  
+foreign import ccall "wxTopLevelWindow_GetDefaultItem" wxTopLevelWindow_GetDefaultItem :: Ptr (TTopLevelWindow a) -> IO (Ptr (TWindow ()))
+
+-- | usage: (@topLevelWindowGetIcon obj@).
+topLevelWindowGetIcon :: TopLevelWindow  a ->  IO (Icon  ())
+topLevelWindowGetIcon _obj 
+  = withManagedIconResult $
+    withObjectRef "topLevelWindowGetIcon" _obj $ \cobj__obj -> 
+    wxTopLevelWindow_GetIcon cobj__obj  
+foreign import ccall "wxTopLevelWindow_GetIcon" wxTopLevelWindow_GetIcon :: Ptr (TTopLevelWindow a) -> IO (Ptr (TIcon ()))
+
+-- | usage: (@topLevelWindowGetTitle obj@).
+topLevelWindowGetTitle :: TopLevelWindow  a ->  IO (String)
+topLevelWindowGetTitle _obj 
+  = withManagedStringResult $
+    withObjectRef "topLevelWindowGetTitle" _obj $ \cobj__obj -> 
+    wxTopLevelWindow_GetTitle cobj__obj  
+foreign import ccall "wxTopLevelWindow_GetTitle" wxTopLevelWindow_GetTitle :: Ptr (TTopLevelWindow a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@topLevelWindowIconize obj iconize@).
+topLevelWindowIconize :: TopLevelWindow  a -> Bool ->  IO Bool
+topLevelWindowIconize _obj iconize 
+  = withBoolResult $
+    withObjectRef "topLevelWindowIconize" _obj $ \cobj__obj -> 
+    wxTopLevelWindow_Iconize cobj__obj  (toCBool iconize)  
+foreign import ccall "wxTopLevelWindow_Iconize" wxTopLevelWindow_Iconize :: Ptr (TTopLevelWindow a) -> CBool -> IO CBool
+
+-- | usage: (@topLevelWindowIsActive obj@).
+topLevelWindowIsActive :: TopLevelWindow  a ->  IO Bool
+topLevelWindowIsActive _obj 
+  = withBoolResult $
+    withObjectRef "topLevelWindowIsActive" _obj $ \cobj__obj -> 
+    wxTopLevelWindow_IsActive cobj__obj  
+foreign import ccall "wxTopLevelWindow_IsActive" wxTopLevelWindow_IsActive :: Ptr (TTopLevelWindow a) -> IO CBool
+
+-- | usage: (@topLevelWindowIsIconized obj@).
+topLevelWindowIsIconized :: TopLevelWindow  a ->  IO Bool
+topLevelWindowIsIconized _obj 
+  = withBoolResult $
+    withObjectRef "topLevelWindowIsIconized" _obj $ \cobj__obj -> 
+    wxTopLevelWindow_IsIconized cobj__obj  
+foreign import ccall "wxTopLevelWindow_IsIconized" wxTopLevelWindow_IsIconized :: Ptr (TTopLevelWindow a) -> IO CBool
+
+-- | usage: (@topLevelWindowIsMaximized obj@).
+topLevelWindowIsMaximized :: TopLevelWindow  a ->  IO Bool
+topLevelWindowIsMaximized _obj 
+  = withBoolResult $
+    withObjectRef "topLevelWindowIsMaximized" _obj $ \cobj__obj -> 
+    wxTopLevelWindow_IsMaximized cobj__obj  
+foreign import ccall "wxTopLevelWindow_IsMaximized" wxTopLevelWindow_IsMaximized :: Ptr (TTopLevelWindow a) -> IO CBool
+
+-- | usage: (@topLevelWindowMaximize obj maximize@).
+topLevelWindowMaximize :: TopLevelWindow  a -> Bool ->  IO ()
+topLevelWindowMaximize _obj maximize 
+  = withObjectRef "topLevelWindowMaximize" _obj $ \cobj__obj -> 
+    wxTopLevelWindow_Maximize cobj__obj  (toCBool maximize)  
+foreign import ccall "wxTopLevelWindow_Maximize" wxTopLevelWindow_Maximize :: Ptr (TTopLevelWindow a) -> CBool -> IO ()
+
+-- | usage: (@topLevelWindowRequestUserAttention obj flags@).
+topLevelWindowRequestUserAttention :: TopLevelWindow  a -> Int ->  IO ()
+topLevelWindowRequestUserAttention _obj flags 
+  = withObjectRef "topLevelWindowRequestUserAttention" _obj $ \cobj__obj -> 
+    wxTopLevelWindow_RequestUserAttention cobj__obj  (toCInt flags)  
+foreign import ccall "wxTopLevelWindow_RequestUserAttention" wxTopLevelWindow_RequestUserAttention :: Ptr (TTopLevelWindow a) -> CInt -> IO ()
+
+-- | usage: (@topLevelWindowSetDefaultButton obj pBut@).
+topLevelWindowSetDefaultButton :: TopLevelWindow  a -> Button  b ->  IO ()
+topLevelWindowSetDefaultButton _obj pBut 
+  = withObjectRef "topLevelWindowSetDefaultButton" _obj $ \cobj__obj -> 
+    withObjectPtr pBut $ \cobj_pBut -> 
+    wxTopLevelWindow_SetDefaultButton cobj__obj  cobj_pBut  
+foreign import ccall "wxTopLevelWindow_SetDefaultButton" wxTopLevelWindow_SetDefaultButton :: Ptr (TTopLevelWindow a) -> Ptr (TButton b) -> IO ()
+
+-- | usage: (@topLevelWindowSetDefaultItem obj pBut@).
+topLevelWindowSetDefaultItem :: TopLevelWindow  a -> Window  b ->  IO ()
+topLevelWindowSetDefaultItem _obj pBut 
+  = withObjectRef "topLevelWindowSetDefaultItem" _obj $ \cobj__obj -> 
+    withObjectPtr pBut $ \cobj_pBut -> 
+    wxTopLevelWindow_SetDefaultItem cobj__obj  cobj_pBut  
+foreign import ccall "wxTopLevelWindow_SetDefaultItem" wxTopLevelWindow_SetDefaultItem :: Ptr (TTopLevelWindow a) -> Ptr (TWindow b) -> IO ()
+
+-- | usage: (@topLevelWindowSetIcon obj pIcon@).
+topLevelWindowSetIcon :: TopLevelWindow  a -> Icon  b ->  IO ()
+topLevelWindowSetIcon _obj pIcon 
+  = withObjectRef "topLevelWindowSetIcon" _obj $ \cobj__obj -> 
+    withObjectPtr pIcon $ \cobj_pIcon -> 
+    wxTopLevelWindow_SetIcon cobj__obj  cobj_pIcon  
+foreign import ccall "wxTopLevelWindow_SetIcon" wxTopLevelWindow_SetIcon :: Ptr (TTopLevelWindow a) -> Ptr (TIcon b) -> IO ()
+
+-- | usage: (@topLevelWindowSetIcons obj icons@).
+topLevelWindowSetIcons :: TopLevelWindow  a -> Ptr  b ->  IO ()
+topLevelWindowSetIcons _obj _icons 
+  = withObjectRef "topLevelWindowSetIcons" _obj $ \cobj__obj -> 
+    wxTopLevelWindow_SetIcons cobj__obj  _icons  
+foreign import ccall "wxTopLevelWindow_SetIcons" wxTopLevelWindow_SetIcons :: Ptr (TTopLevelWindow a) -> Ptr  b -> IO ()
+
+-- | usage: (@topLevelWindowSetMaxSize obj wh@).
+topLevelWindowSetMaxSize :: TopLevelWindow  a -> Size ->  IO ()
+topLevelWindowSetMaxSize _obj wh 
+  = withObjectRef "topLevelWindowSetMaxSize" _obj $ \cobj__obj -> 
+    wxTopLevelWindow_SetMaxSize cobj__obj  (toCIntSizeW wh) (toCIntSizeH wh)  
+foreign import ccall "wxTopLevelWindow_SetMaxSize" wxTopLevelWindow_SetMaxSize :: Ptr (TTopLevelWindow a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@topLevelWindowSetMinSize obj wh@).
+topLevelWindowSetMinSize :: TopLevelWindow  a -> Size ->  IO ()
+topLevelWindowSetMinSize _obj wh 
+  = withObjectRef "topLevelWindowSetMinSize" _obj $ \cobj__obj -> 
+    wxTopLevelWindow_SetMinSize cobj__obj  (toCIntSizeW wh) (toCIntSizeH wh)  
+foreign import ccall "wxTopLevelWindow_SetMinSize" wxTopLevelWindow_SetMinSize :: Ptr (TTopLevelWindow a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@topLevelWindowSetTitle obj pString@).
+topLevelWindowSetTitle :: TopLevelWindow  a -> String ->  IO ()
+topLevelWindowSetTitle _obj pString 
+  = withObjectRef "topLevelWindowSetTitle" _obj $ \cobj__obj -> 
+    withStringPtr pString $ \cobj_pString -> 
+    wxTopLevelWindow_SetTitle cobj__obj  cobj_pString  
+foreign import ccall "wxTopLevelWindow_SetTitle" wxTopLevelWindow_SetTitle :: Ptr (TTopLevelWindow a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@treeCtrlAddRoot obj text image selectedImage wxdata@).
+treeCtrlAddRoot :: TreeCtrl  a -> String -> Int -> Int -> TreeItemData  e ->  IO (TreeItem)
+treeCtrlAddRoot _obj text image selectedImage wxdata 
+  = withRefTreeItemId $ \pref -> 
+    withObjectRef "treeCtrlAddRoot" _obj $ \cobj__obj -> 
+    withStringPtr text $ \cobj_text -> 
+    withObjectPtr wxdata $ \cobj_wxdata -> 
+    wxTreeCtrl_AddRoot cobj__obj  cobj_text  (toCInt image)  (toCInt selectedImage)  cobj_wxdata   pref
+foreign import ccall "wxTreeCtrl_AddRoot" wxTreeCtrl_AddRoot :: Ptr (TTreeCtrl a) -> Ptr (TWxString b) -> CInt -> CInt -> Ptr (TTreeItemData e) -> Ptr (TTreeItemId ()) -> IO ()
+
+-- | usage: (@treeCtrlAppendItem obj parent text image selectedImage wxdata@).
+treeCtrlAppendItem :: TreeCtrl  a -> TreeItem -> String -> Int -> Int -> TreeItemData  f ->  IO (TreeItem)
+treeCtrlAppendItem _obj parent text image selectedImage wxdata 
+  = withRefTreeItemId $ \pref -> 
+    withObjectRef "treeCtrlAppendItem" _obj $ \cobj__obj -> 
+    withTreeItemIdPtr parent $ \cobj_parent -> 
+    withStringPtr text $ \cobj_text -> 
+    withObjectPtr wxdata $ \cobj_wxdata -> 
+    wxTreeCtrl_AppendItem cobj__obj  cobj_parent  cobj_text  (toCInt image)  (toCInt selectedImage)  cobj_wxdata   pref
+foreign import ccall "wxTreeCtrl_AppendItem" wxTreeCtrl_AppendItem :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> Ptr (TWxString c) -> CInt -> CInt -> Ptr (TTreeItemData f) -> Ptr (TTreeItemId ()) -> IO ()
+
+-- | usage: (@treeCtrlAssignImageList obj imageList@).
+treeCtrlAssignImageList :: TreeCtrl  a -> ImageList  b ->  IO ()
+treeCtrlAssignImageList _obj imageList 
+  = withObjectRef "treeCtrlAssignImageList" _obj $ \cobj__obj -> 
+    withObjectPtr imageList $ \cobj_imageList -> 
+    wxTreeCtrl_AssignImageList cobj__obj  cobj_imageList  
+foreign import ccall "wxTreeCtrl_AssignImageList" wxTreeCtrl_AssignImageList :: Ptr (TTreeCtrl a) -> Ptr (TImageList b) -> IO ()
+
+-- | usage: (@treeCtrlAssignStateImageList obj imageList@).
+treeCtrlAssignStateImageList :: TreeCtrl  a -> ImageList  b ->  IO ()
+treeCtrlAssignStateImageList _obj imageList 
+  = withObjectRef "treeCtrlAssignStateImageList" _obj $ \cobj__obj -> 
+    withObjectPtr imageList $ \cobj_imageList -> 
+    wxTreeCtrl_AssignStateImageList cobj__obj  cobj_imageList  
+foreign import ccall "wxTreeCtrl_AssignStateImageList" wxTreeCtrl_AssignStateImageList :: Ptr (TTreeCtrl a) -> Ptr (TImageList b) -> IO ()
+
+-- | usage: (@treeCtrlCollapse obj item@).
+treeCtrlCollapse :: TreeCtrl  a -> TreeItem ->  IO ()
+treeCtrlCollapse _obj item 
+  = withObjectRef "treeCtrlCollapse" _obj $ \cobj__obj -> 
+    withTreeItemIdPtr item $ \cobj_item -> 
+    wxTreeCtrl_Collapse cobj__obj  cobj_item  
+foreign import ccall "wxTreeCtrl_Collapse" wxTreeCtrl_Collapse :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> IO ()
+
+-- | usage: (@treeCtrlCollapseAndReset obj item@).
+treeCtrlCollapseAndReset :: TreeCtrl  a -> TreeItem ->  IO ()
+treeCtrlCollapseAndReset _obj item 
+  = withObjectRef "treeCtrlCollapseAndReset" _obj $ \cobj__obj -> 
+    withTreeItemIdPtr item $ \cobj_item -> 
+    wxTreeCtrl_CollapseAndReset cobj__obj  cobj_item  
+foreign import ccall "wxTreeCtrl_CollapseAndReset" wxTreeCtrl_CollapseAndReset :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> IO ()
+
+-- | usage: (@treeCtrlCreate obj cmp prt id lfttopwdthgt stl@).
+treeCtrlCreate :: Ptr  a -> Ptr  b -> Window  c -> Id -> Rect -> Style ->  IO (TreeCtrl  ())
+treeCtrlCreate _obj _cmp _prt _id _lfttopwdthgt _stl 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    wxTreeCtrl_Create _obj  _cmp  cobj__prt  (toCInt _id)  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
+foreign import ccall "wxTreeCtrl_Create" wxTreeCtrl_Create :: Ptr  a -> Ptr  b -> Ptr (TWindow c) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TTreeCtrl ()))
+
+-- | usage: (@treeCtrlCreate2 prt id lfttopwdthgt stl@).
+treeCtrlCreate2 :: Window  a -> Id -> Rect -> Style ->  IO (TreeCtrl  ())
+treeCtrlCreate2 _prt _id _lfttopwdthgt _stl 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    wxTreeCtrl_Create2 cobj__prt  (toCInt _id)  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
+foreign import ccall "wxTreeCtrl_Create2" wxTreeCtrl_Create2 :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TTreeCtrl ()))
+
+-- | usage: (@treeCtrlDelete obj item@).
+treeCtrlDelete :: TreeCtrl  a -> TreeItem ->  IO ()
+treeCtrlDelete _obj item 
+  = withObjectRef "treeCtrlDelete" _obj $ \cobj__obj -> 
+    withTreeItemIdPtr item $ \cobj_item -> 
+    wxTreeCtrl_Delete cobj__obj  cobj_item  
+foreign import ccall "wxTreeCtrl_Delete" wxTreeCtrl_Delete :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> IO ()
+
+-- | usage: (@treeCtrlDeleteAllItems obj@).
+treeCtrlDeleteAllItems :: TreeCtrl  a ->  IO ()
+treeCtrlDeleteAllItems _obj 
+  = withObjectRef "treeCtrlDeleteAllItems" _obj $ \cobj__obj -> 
+    wxTreeCtrl_DeleteAllItems cobj__obj  
+foreign import ccall "wxTreeCtrl_DeleteAllItems" wxTreeCtrl_DeleteAllItems :: Ptr (TTreeCtrl a) -> IO ()
+
+-- | usage: (@treeCtrlDeleteChildren obj item@).
+treeCtrlDeleteChildren :: TreeCtrl  a -> TreeItem ->  IO ()
+treeCtrlDeleteChildren _obj item 
+  = withObjectRef "treeCtrlDeleteChildren" _obj $ \cobj__obj -> 
+    withTreeItemIdPtr item $ \cobj_item -> 
+    wxTreeCtrl_DeleteChildren cobj__obj  cobj_item  
+foreign import ccall "wxTreeCtrl_DeleteChildren" wxTreeCtrl_DeleteChildren :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> IO ()
+
+-- | usage: (@treeCtrlEditLabel obj item@).
+treeCtrlEditLabel :: TreeCtrl  a -> TreeItem ->  IO ()
+treeCtrlEditLabel _obj item 
+  = withObjectRef "treeCtrlEditLabel" _obj $ \cobj__obj -> 
+    withTreeItemIdPtr item $ \cobj_item -> 
+    wxTreeCtrl_EditLabel cobj__obj  cobj_item  
+foreign import ccall "wxTreeCtrl_EditLabel" wxTreeCtrl_EditLabel :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> IO ()
+
+-- | usage: (@treeCtrlEndEditLabel obj item discardChanges@).
+treeCtrlEndEditLabel :: TreeCtrl  a -> TreeItem -> Bool ->  IO ()
+treeCtrlEndEditLabel _obj item discardChanges 
+  = withObjectRef "treeCtrlEndEditLabel" _obj $ \cobj__obj -> 
+    withTreeItemIdPtr item $ \cobj_item -> 
+    wxTreeCtrl_EndEditLabel cobj__obj  cobj_item  (toCBool discardChanges)  
+foreign import ccall "wxTreeCtrl_EndEditLabel" wxTreeCtrl_EndEditLabel :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> CBool -> IO ()
+
+-- | usage: (@treeCtrlEnsureVisible obj item@).
+treeCtrlEnsureVisible :: TreeCtrl  a -> TreeItem ->  IO ()
+treeCtrlEnsureVisible _obj item 
+  = withObjectRef "treeCtrlEnsureVisible" _obj $ \cobj__obj -> 
+    withTreeItemIdPtr item $ \cobj_item -> 
+    wxTreeCtrl_EnsureVisible cobj__obj  cobj_item  
+foreign import ccall "wxTreeCtrl_EnsureVisible" wxTreeCtrl_EnsureVisible :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> IO ()
+
+-- | usage: (@treeCtrlExpand obj item@).
+treeCtrlExpand :: TreeCtrl  a -> TreeItem ->  IO ()
+treeCtrlExpand _obj item 
+  = withObjectRef "treeCtrlExpand" _obj $ \cobj__obj -> 
+    withTreeItemIdPtr item $ \cobj_item -> 
+    wxTreeCtrl_Expand cobj__obj  cobj_item  
+foreign import ccall "wxTreeCtrl_Expand" wxTreeCtrl_Expand :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> IO ()
+
+-- | usage: (@treeCtrlGetBoundingRect obj item textOnly@).
+treeCtrlGetBoundingRect :: TreeCtrl  a -> TreeItem -> Bool ->  IO (Rect)
+treeCtrlGetBoundingRect _obj item textOnly 
+  = withWxRectResult $
+    withObjectRef "treeCtrlGetBoundingRect" _obj $ \cobj__obj -> 
+    withTreeItemIdPtr item $ \cobj_item -> 
+    wxTreeCtrl_GetBoundingRect cobj__obj  cobj_item  (toCBool textOnly)  
+foreign import ccall "wxTreeCtrl_GetBoundingRect" wxTreeCtrl_GetBoundingRect :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> CBool -> IO (Ptr (TWxRect ()))
+
+-- | usage: (@treeCtrlGetChildrenCount obj item recursively@).
+treeCtrlGetChildrenCount :: TreeCtrl  a -> TreeItem -> Bool ->  IO Int
+treeCtrlGetChildrenCount _obj item recursively 
+  = withIntResult $
+    withObjectRef "treeCtrlGetChildrenCount" _obj $ \cobj__obj -> 
+    withTreeItemIdPtr item $ \cobj_item -> 
+    wxTreeCtrl_GetChildrenCount cobj__obj  cobj_item  (toCBool recursively)  
+foreign import ccall "wxTreeCtrl_GetChildrenCount" wxTreeCtrl_GetChildrenCount :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> CBool -> IO CInt
+
+-- | usage: (@treeCtrlGetCount obj@).
+treeCtrlGetCount :: TreeCtrl  a ->  IO Int
+treeCtrlGetCount _obj 
+  = withIntResult $
+    withObjectRef "treeCtrlGetCount" _obj $ \cobj__obj -> 
+    wxTreeCtrl_GetCount cobj__obj  
+foreign import ccall "wxTreeCtrl_GetCount" wxTreeCtrl_GetCount :: Ptr (TTreeCtrl a) -> IO CInt
+
+-- | usage: (@treeCtrlGetEditControl obj@).
+treeCtrlGetEditControl :: TreeCtrl  a ->  IO (TextCtrl  ())
+treeCtrlGetEditControl _obj 
+  = withObjectResult $
+    withObjectRef "treeCtrlGetEditControl" _obj $ \cobj__obj -> 
+    wxTreeCtrl_GetEditControl cobj__obj  
+foreign import ccall "wxTreeCtrl_GetEditControl" wxTreeCtrl_GetEditControl :: Ptr (TTreeCtrl a) -> IO (Ptr (TTextCtrl ()))
+
+-- | usage: (@treeCtrlGetFirstChild obj item cookie@).
+treeCtrlGetFirstChild :: TreeCtrl  a -> TreeItem -> Ptr CInt ->  IO (TreeItem)
+treeCtrlGetFirstChild _obj item cookie 
+  = withRefTreeItemId $ \pref -> 
+    withObjectRef "treeCtrlGetFirstChild" _obj $ \cobj__obj -> 
+    withTreeItemIdPtr item $ \cobj_item -> 
+    wxTreeCtrl_GetFirstChild cobj__obj  cobj_item  cookie   pref
+foreign import ccall "wxTreeCtrl_GetFirstChild" wxTreeCtrl_GetFirstChild :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> Ptr CInt -> Ptr (TTreeItemId ()) -> IO ()
+
+-- | usage: (@treeCtrlGetFirstVisibleItem obj item@).
+treeCtrlGetFirstVisibleItem :: TreeCtrl  a -> TreeItem ->  IO (TreeItem)
+treeCtrlGetFirstVisibleItem _obj item 
+  = withRefTreeItemId $ \pref -> 
+    withObjectRef "treeCtrlGetFirstVisibleItem" _obj $ \cobj__obj -> 
+    withTreeItemIdPtr item $ \cobj_item -> 
+    wxTreeCtrl_GetFirstVisibleItem cobj__obj  cobj_item   pref
+foreign import ccall "wxTreeCtrl_GetFirstVisibleItem" wxTreeCtrl_GetFirstVisibleItem :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> Ptr (TTreeItemId ()) -> IO ()
+
+-- | usage: (@treeCtrlGetImageList obj@).
+treeCtrlGetImageList :: TreeCtrl  a ->  IO (ImageList  ())
+treeCtrlGetImageList _obj 
+  = withObjectResult $
+    withObjectRef "treeCtrlGetImageList" _obj $ \cobj__obj -> 
+    wxTreeCtrl_GetImageList cobj__obj  
+foreign import ccall "wxTreeCtrl_GetImageList" wxTreeCtrl_GetImageList :: Ptr (TTreeCtrl a) -> IO (Ptr (TImageList ()))
+
+-- | usage: (@treeCtrlGetIndent obj@).
+treeCtrlGetIndent :: TreeCtrl  a ->  IO Int
+treeCtrlGetIndent _obj 
+  = withIntResult $
+    withObjectRef "treeCtrlGetIndent" _obj $ \cobj__obj -> 
+    wxTreeCtrl_GetIndent cobj__obj  
+foreign import ccall "wxTreeCtrl_GetIndent" wxTreeCtrl_GetIndent :: Ptr (TTreeCtrl a) -> IO CInt
+
+-- | usage: (@treeCtrlGetItemClientClosure obj item@).
+treeCtrlGetItemClientClosure :: TreeCtrl  a -> TreeItem ->  IO (Closure  ())
+treeCtrlGetItemClientClosure _obj item 
+  = withObjectResult $
+    withObjectRef "treeCtrlGetItemClientClosure" _obj $ \cobj__obj -> 
+    withTreeItemIdPtr item $ \cobj_item -> 
+    wxTreeCtrl_GetItemClientClosure cobj__obj  cobj_item  
+foreign import ccall "wxTreeCtrl_GetItemClientClosure" wxTreeCtrl_GetItemClientClosure :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> IO (Ptr (TClosure ()))
+
+-- | usage: (@treeCtrlGetItemData obj item@).
+treeCtrlGetItemData :: TreeCtrl  a -> TreeItem ->  IO (Ptr  ())
+treeCtrlGetItemData _obj item 
+  = withObjectRef "treeCtrlGetItemData" _obj $ \cobj__obj -> 
+    withTreeItemIdPtr item $ \cobj_item -> 
+    wxTreeCtrl_GetItemData cobj__obj  cobj_item  
+foreign import ccall "wxTreeCtrl_GetItemData" wxTreeCtrl_GetItemData :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> IO (Ptr  ())
+
+-- | usage: (@treeCtrlGetItemImage obj item which@).
+treeCtrlGetItemImage :: TreeCtrl  a -> TreeItem -> Int ->  IO Int
+treeCtrlGetItemImage _obj item which 
+  = withIntResult $
+    withObjectRef "treeCtrlGetItemImage" _obj $ \cobj__obj -> 
+    withTreeItemIdPtr item $ \cobj_item -> 
+    wxTreeCtrl_GetItemImage cobj__obj  cobj_item  (toCInt which)  
+foreign import ccall "wxTreeCtrl_GetItemImage" wxTreeCtrl_GetItemImage :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> CInt -> IO CInt
+
+-- | usage: (@treeCtrlGetItemText obj item@).
+treeCtrlGetItemText :: TreeCtrl  a -> TreeItem ->  IO (String)
+treeCtrlGetItemText _obj item 
+  = withManagedStringResult $
+    withObjectRef "treeCtrlGetItemText" _obj $ \cobj__obj -> 
+    withTreeItemIdPtr item $ \cobj_item -> 
+    wxTreeCtrl_GetItemText cobj__obj  cobj_item  
+foreign import ccall "wxTreeCtrl_GetItemText" wxTreeCtrl_GetItemText :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@treeCtrlGetLastChild obj item@).
+treeCtrlGetLastChild :: TreeCtrl  a -> TreeItem ->  IO (TreeItem)
+treeCtrlGetLastChild _obj item 
+  = withRefTreeItemId $ \pref -> 
+    withObjectRef "treeCtrlGetLastChild" _obj $ \cobj__obj -> 
+    withTreeItemIdPtr item $ \cobj_item -> 
+    wxTreeCtrl_GetLastChild cobj__obj  cobj_item   pref
+foreign import ccall "wxTreeCtrl_GetLastChild" wxTreeCtrl_GetLastChild :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> Ptr (TTreeItemId ()) -> IO ()
+
+-- | usage: (@treeCtrlGetNextChild obj item cookie@).
+treeCtrlGetNextChild :: TreeCtrl  a -> TreeItem -> Ptr CInt ->  IO (TreeItem)
+treeCtrlGetNextChild _obj item cookie 
+  = withRefTreeItemId $ \pref -> 
+    withObjectRef "treeCtrlGetNextChild" _obj $ \cobj__obj -> 
+    withTreeItemIdPtr item $ \cobj_item -> 
+    wxTreeCtrl_GetNextChild cobj__obj  cobj_item  cookie   pref
+foreign import ccall "wxTreeCtrl_GetNextChild" wxTreeCtrl_GetNextChild :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> Ptr CInt -> Ptr (TTreeItemId ()) -> IO ()
+
+-- | usage: (@treeCtrlGetNextSibling obj item@).
+treeCtrlGetNextSibling :: TreeCtrl  a -> TreeItem ->  IO (TreeItem)
+treeCtrlGetNextSibling _obj item 
+  = withRefTreeItemId $ \pref -> 
+    withObjectRef "treeCtrlGetNextSibling" _obj $ \cobj__obj -> 
+    withTreeItemIdPtr item $ \cobj_item -> 
+    wxTreeCtrl_GetNextSibling cobj__obj  cobj_item   pref
+foreign import ccall "wxTreeCtrl_GetNextSibling" wxTreeCtrl_GetNextSibling :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> Ptr (TTreeItemId ()) -> IO ()
+
+-- | usage: (@treeCtrlGetNextVisible obj item@).
+treeCtrlGetNextVisible :: TreeCtrl  a -> TreeItem ->  IO (TreeItem)
+treeCtrlGetNextVisible _obj item 
+  = withRefTreeItemId $ \pref -> 
+    withObjectRef "treeCtrlGetNextVisible" _obj $ \cobj__obj -> 
+    withTreeItemIdPtr item $ \cobj_item -> 
+    wxTreeCtrl_GetNextVisible cobj__obj  cobj_item   pref
+foreign import ccall "wxTreeCtrl_GetNextVisible" wxTreeCtrl_GetNextVisible :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> Ptr (TTreeItemId ()) -> IO ()
+
+-- | usage: (@treeCtrlGetParent obj item@).
+treeCtrlGetParent :: TreeCtrl  a -> TreeItem ->  IO (TreeItem)
+treeCtrlGetParent _obj item 
+  = withRefTreeItemId $ \pref -> 
+    withObjectRef "treeCtrlGetParent" _obj $ \cobj__obj -> 
+    withTreeItemIdPtr item $ \cobj_item -> 
+    wxTreeCtrl_GetParent cobj__obj  cobj_item   pref
+foreign import ccall "wxTreeCtrl_GetParent" wxTreeCtrl_GetParent :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> Ptr (TTreeItemId ()) -> IO ()
+
+-- | usage: (@treeCtrlGetPrevSibling obj item@).
+treeCtrlGetPrevSibling :: TreeCtrl  a -> TreeItem ->  IO (TreeItem)
+treeCtrlGetPrevSibling _obj item 
+  = withRefTreeItemId $ \pref -> 
+    withObjectRef "treeCtrlGetPrevSibling" _obj $ \cobj__obj -> 
+    withTreeItemIdPtr item $ \cobj_item -> 
+    wxTreeCtrl_GetPrevSibling cobj__obj  cobj_item   pref
+foreign import ccall "wxTreeCtrl_GetPrevSibling" wxTreeCtrl_GetPrevSibling :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> Ptr (TTreeItemId ()) -> IO ()
+
+-- | usage: (@treeCtrlGetPrevVisible obj item@).
+treeCtrlGetPrevVisible :: TreeCtrl  a -> TreeItem ->  IO (TreeItem)
+treeCtrlGetPrevVisible _obj item 
+  = withRefTreeItemId $ \pref -> 
+    withObjectRef "treeCtrlGetPrevVisible" _obj $ \cobj__obj -> 
+    withTreeItemIdPtr item $ \cobj_item -> 
+    wxTreeCtrl_GetPrevVisible cobj__obj  cobj_item   pref
+foreign import ccall "wxTreeCtrl_GetPrevVisible" wxTreeCtrl_GetPrevVisible :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> Ptr (TTreeItemId ()) -> IO ()
+
+-- | usage: (@treeCtrlGetRootItem obj@).
+treeCtrlGetRootItem :: TreeCtrl  a ->  IO (TreeItem)
+treeCtrlGetRootItem _obj 
+  = withRefTreeItemId $ \pref -> 
+    withObjectRef "treeCtrlGetRootItem" _obj $ \cobj__obj -> 
+    wxTreeCtrl_GetRootItem cobj__obj   pref
+foreign import ccall "wxTreeCtrl_GetRootItem" wxTreeCtrl_GetRootItem :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId ()) -> IO ()
+
+-- | usage: (@treeCtrlGetSelection obj@).
+treeCtrlGetSelection :: TreeCtrl  a ->  IO (TreeItem)
+treeCtrlGetSelection _obj 
+  = withRefTreeItemId $ \pref -> 
+    withObjectRef "treeCtrlGetSelection" _obj $ \cobj__obj -> 
+    wxTreeCtrl_GetSelection cobj__obj   pref
+foreign import ccall "wxTreeCtrl_GetSelection" wxTreeCtrl_GetSelection :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId ()) -> IO ()
+
+-- | usage: (@treeCtrlGetSelections obj@).
+treeCtrlGetSelections :: TreeCtrl  a ->  IO [IntPtr]
+treeCtrlGetSelections _obj 
+  = withArrayIntPtrResult $ \arr -> 
+    withObjectRef "treeCtrlGetSelections" _obj $ \cobj__obj -> 
+    wxTreeCtrl_GetSelections cobj__obj   arr
+foreign import ccall "wxTreeCtrl_GetSelections" wxTreeCtrl_GetSelections :: Ptr (TTreeCtrl a) -> Ptr CIntPtr -> IO CInt
+
+-- | usage: (@treeCtrlGetSpacing obj@).
+treeCtrlGetSpacing :: TreeCtrl  a ->  IO Int
+treeCtrlGetSpacing _obj 
+  = withIntResult $
+    withObjectRef "treeCtrlGetSpacing" _obj $ \cobj__obj -> 
+    wxTreeCtrl_GetSpacing cobj__obj  
+foreign import ccall "wxTreeCtrl_GetSpacing" wxTreeCtrl_GetSpacing :: Ptr (TTreeCtrl a) -> IO CInt
+
+-- | usage: (@treeCtrlGetStateImageList obj@).
+treeCtrlGetStateImageList :: TreeCtrl  a ->  IO (ImageList  ())
+treeCtrlGetStateImageList _obj 
+  = withObjectResult $
+    withObjectRef "treeCtrlGetStateImageList" _obj $ \cobj__obj -> 
+    wxTreeCtrl_GetStateImageList cobj__obj  
+foreign import ccall "wxTreeCtrl_GetStateImageList" wxTreeCtrl_GetStateImageList :: Ptr (TTreeCtrl a) -> IO (Ptr (TImageList ()))
+
+-- | usage: (@treeCtrlHitTest obj xy flags@).
+treeCtrlHitTest :: TreeCtrl  a -> Point -> Ptr CInt ->  IO (TreeItem)
+treeCtrlHitTest _obj _xy flags 
+  = withRefTreeItemId $ \pref -> 
+    withObjectRef "treeCtrlHitTest" _obj $ \cobj__obj -> 
+    wxTreeCtrl_HitTest cobj__obj  (toCIntPointX _xy) (toCIntPointY _xy)  flags   pref
+foreign import ccall "wxTreeCtrl_HitTest" wxTreeCtrl_HitTest :: Ptr (TTreeCtrl a) -> CInt -> CInt -> Ptr CInt -> Ptr (TTreeItemId ()) -> IO ()
+
+-- | usage: (@treeCtrlInsertItem obj parent idPrevious text image selectedImage wxdata@).
+treeCtrlInsertItem :: TreeCtrl  a -> TreeItem -> TreeItem -> String -> Int -> Int -> Ptr  g ->  IO (TreeItem)
+treeCtrlInsertItem _obj parent idPrevious text image selectedImage wxdata 
+  = withRefTreeItemId $ \pref -> 
+    withObjectRef "treeCtrlInsertItem" _obj $ \cobj__obj -> 
+    withTreeItemIdPtr parent $ \cobj_parent -> 
+    withTreeItemIdPtr idPrevious $ \cobj_idPrevious -> 
+    withStringPtr text $ \cobj_text -> 
+    wxTreeCtrl_InsertItem cobj__obj  cobj_parent  cobj_idPrevious  cobj_text  (toCInt image)  (toCInt selectedImage)  wxdata   pref
+foreign import ccall "wxTreeCtrl_InsertItem" wxTreeCtrl_InsertItem :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> Ptr (TTreeItemId c) -> Ptr (TWxString d) -> CInt -> CInt -> Ptr  g -> Ptr (TTreeItemId ()) -> IO ()
+
+-- | usage: (@treeCtrlInsertItem2 obj parent idPrevious text image selectedImage closure@).
+treeCtrlInsertItem2 :: TreeCtrl  a -> Window  b -> TreeItem -> String -> Int -> Int -> Closure  g ->  IO (TreeItem)
+treeCtrlInsertItem2 _obj parent idPrevious text image selectedImage closure 
+  = withRefTreeItemId $ \pref -> 
+    withObjectRef "treeCtrlInsertItem2" _obj $ \cobj__obj -> 
+    withObjectPtr parent $ \cobj_parent -> 
+    withTreeItemIdPtr idPrevious $ \cobj_idPrevious -> 
+    withStringPtr text $ \cobj_text -> 
+    withObjectPtr closure $ \cobj_closure -> 
+    wxTreeCtrl_InsertItem2 cobj__obj  cobj_parent  cobj_idPrevious  cobj_text  (toCInt image)  (toCInt selectedImage)  cobj_closure   pref
+foreign import ccall "wxTreeCtrl_InsertItem2" wxTreeCtrl_InsertItem2 :: Ptr (TTreeCtrl a) -> Ptr (TWindow b) -> Ptr (TTreeItemId c) -> Ptr (TWxString d) -> CInt -> CInt -> Ptr (TClosure g) -> Ptr (TTreeItemId ()) -> IO ()
+
+-- | usage: (@treeCtrlInsertItemByIndex obj parent index text image selectedImage wxdata@).
+treeCtrlInsertItemByIndex :: TreeCtrl  a -> TreeItem -> Int -> String -> Int -> Int -> Ptr  g ->  IO (TreeItem)
+treeCtrlInsertItemByIndex _obj parent index text image selectedImage wxdata 
+  = withRefTreeItemId $ \pref -> 
+    withObjectRef "treeCtrlInsertItemByIndex" _obj $ \cobj__obj -> 
+    withTreeItemIdPtr parent $ \cobj_parent -> 
+    withStringPtr text $ \cobj_text -> 
+    wxTreeCtrl_InsertItemByIndex cobj__obj  cobj_parent  (toCInt index)  cobj_text  (toCInt image)  (toCInt selectedImage)  wxdata   pref
+foreign import ccall "wxTreeCtrl_InsertItemByIndex" wxTreeCtrl_InsertItemByIndex :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> CInt -> Ptr (TWxString d) -> CInt -> CInt -> Ptr  g -> Ptr (TTreeItemId ()) -> IO ()
+
+-- | usage: (@treeCtrlInsertItemByIndex2 obj parent index text image selectedImage closure@).
+treeCtrlInsertItemByIndex2 :: TreeCtrl  a -> Window  b -> Int -> String -> Int -> Int -> Closure  g ->  IO (TreeItem)
+treeCtrlInsertItemByIndex2 _obj parent index text image selectedImage closure 
+  = withRefTreeItemId $ \pref -> 
+    withObjectRef "treeCtrlInsertItemByIndex2" _obj $ \cobj__obj -> 
+    withObjectPtr parent $ \cobj_parent -> 
+    withStringPtr text $ \cobj_text -> 
+    withObjectPtr closure $ \cobj_closure -> 
+    wxTreeCtrl_InsertItemByIndex2 cobj__obj  cobj_parent  (toCInt index)  cobj_text  (toCInt image)  (toCInt selectedImage)  cobj_closure   pref
+foreign import ccall "wxTreeCtrl_InsertItemByIndex2" wxTreeCtrl_InsertItemByIndex2 :: Ptr (TTreeCtrl a) -> Ptr (TWindow b) -> CInt -> Ptr (TWxString d) -> CInt -> CInt -> Ptr (TClosure g) -> Ptr (TTreeItemId ()) -> IO ()
+
+-- | usage: (@treeCtrlIsBold obj item@).
+treeCtrlIsBold :: TreeCtrl  a -> TreeItem ->  IO Bool
+treeCtrlIsBold _obj item 
+  = withBoolResult $
+    withObjectRef "treeCtrlIsBold" _obj $ \cobj__obj -> 
+    withTreeItemIdPtr item $ \cobj_item -> 
+    wxTreeCtrl_IsBold cobj__obj  cobj_item  
+foreign import ccall "wxTreeCtrl_IsBold" wxTreeCtrl_IsBold :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> IO CBool
+
+-- | usage: (@treeCtrlIsExpanded obj item@).
+treeCtrlIsExpanded :: TreeCtrl  a -> TreeItem ->  IO Bool
+treeCtrlIsExpanded _obj item 
+  = withBoolResult $
+    withObjectRef "treeCtrlIsExpanded" _obj $ \cobj__obj -> 
+    withTreeItemIdPtr item $ \cobj_item -> 
+    wxTreeCtrl_IsExpanded cobj__obj  cobj_item  
+foreign import ccall "wxTreeCtrl_IsExpanded" wxTreeCtrl_IsExpanded :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> IO CBool
+
+-- | usage: (@treeCtrlIsSelected obj item@).
+treeCtrlIsSelected :: TreeCtrl  a -> TreeItem ->  IO Bool
+treeCtrlIsSelected _obj item 
+  = withBoolResult $
+    withObjectRef "treeCtrlIsSelected" _obj $ \cobj__obj -> 
+    withTreeItemIdPtr item $ \cobj_item -> 
+    wxTreeCtrl_IsSelected cobj__obj  cobj_item  
+foreign import ccall "wxTreeCtrl_IsSelected" wxTreeCtrl_IsSelected :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> IO CBool
+
+-- | usage: (@treeCtrlIsVisible obj item@).
+treeCtrlIsVisible :: TreeCtrl  a -> TreeItem ->  IO Bool
+treeCtrlIsVisible _obj item 
+  = withBoolResult $
+    withObjectRef "treeCtrlIsVisible" _obj $ \cobj__obj -> 
+    withTreeItemIdPtr item $ \cobj_item -> 
+    wxTreeCtrl_IsVisible cobj__obj  cobj_item  
+foreign import ccall "wxTreeCtrl_IsVisible" wxTreeCtrl_IsVisible :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> IO CBool
+
+-- | usage: (@treeCtrlItemHasChildren obj item@).
+treeCtrlItemHasChildren :: TreeCtrl  a -> TreeItem ->  IO Int
+treeCtrlItemHasChildren _obj item 
+  = withIntResult $
+    withObjectRef "treeCtrlItemHasChildren" _obj $ \cobj__obj -> 
+    withTreeItemIdPtr item $ \cobj_item -> 
+    wxTreeCtrl_ItemHasChildren cobj__obj  cobj_item  
+foreign import ccall "wxTreeCtrl_ItemHasChildren" wxTreeCtrl_ItemHasChildren :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> IO CInt
+
+-- | usage: (@treeCtrlOnCompareItems obj item1 item2@).
+treeCtrlOnCompareItems :: TreeCtrl  a -> TreeItem -> TreeItem ->  IO Int
+treeCtrlOnCompareItems _obj item1 item2 
+  = withIntResult $
+    withObjectRef "treeCtrlOnCompareItems" _obj $ \cobj__obj -> 
+    withTreeItemIdPtr item1 $ \cobj_item1 -> 
+    withTreeItemIdPtr item2 $ \cobj_item2 -> 
+    wxTreeCtrl_OnCompareItems cobj__obj  cobj_item1  cobj_item2  
+foreign import ccall "wxTreeCtrl_OnCompareItems" wxTreeCtrl_OnCompareItems :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> Ptr (TTreeItemId c) -> IO CInt
+
+-- | usage: (@treeCtrlPrependItem obj parent text image selectedImage wxdata@).
+treeCtrlPrependItem :: TreeCtrl  a -> TreeItem -> String -> Int -> Int -> Ptr  f ->  IO (TreeItem)
+treeCtrlPrependItem _obj parent text image selectedImage wxdata 
+  = withRefTreeItemId $ \pref -> 
+    withObjectRef "treeCtrlPrependItem" _obj $ \cobj__obj -> 
+    withTreeItemIdPtr parent $ \cobj_parent -> 
+    withStringPtr text $ \cobj_text -> 
+    wxTreeCtrl_PrependItem cobj__obj  cobj_parent  cobj_text  (toCInt image)  (toCInt selectedImage)  wxdata   pref
+foreign import ccall "wxTreeCtrl_PrependItem" wxTreeCtrl_PrependItem :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> Ptr (TWxString c) -> CInt -> CInt -> Ptr  f -> Ptr (TTreeItemId ()) -> IO ()
+
+-- | usage: (@treeCtrlScrollTo obj item@).
+treeCtrlScrollTo :: TreeCtrl  a -> TreeItem ->  IO ()
+treeCtrlScrollTo _obj item 
+  = withObjectRef "treeCtrlScrollTo" _obj $ \cobj__obj -> 
+    withTreeItemIdPtr item $ \cobj_item -> 
+    wxTreeCtrl_ScrollTo cobj__obj  cobj_item  
+foreign import ccall "wxTreeCtrl_ScrollTo" wxTreeCtrl_ScrollTo :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> IO ()
+
+-- | usage: (@treeCtrlSelectItem obj item@).
+treeCtrlSelectItem :: TreeCtrl  a -> TreeItem ->  IO ()
+treeCtrlSelectItem _obj item 
+  = withObjectRef "treeCtrlSelectItem" _obj $ \cobj__obj -> 
+    withTreeItemIdPtr item $ \cobj_item -> 
+    wxTreeCtrl_SelectItem cobj__obj  cobj_item  
+foreign import ccall "wxTreeCtrl_SelectItem" wxTreeCtrl_SelectItem :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> IO ()
+
+-- | usage: (@treeCtrlSetImageList obj imageList@).
+treeCtrlSetImageList :: TreeCtrl  a -> ImageList  b ->  IO ()
+treeCtrlSetImageList _obj imageList 
+  = withObjectRef "treeCtrlSetImageList" _obj $ \cobj__obj -> 
+    withObjectPtr imageList $ \cobj_imageList -> 
+    wxTreeCtrl_SetImageList cobj__obj  cobj_imageList  
+foreign import ccall "wxTreeCtrl_SetImageList" wxTreeCtrl_SetImageList :: Ptr (TTreeCtrl a) -> Ptr (TImageList b) -> IO ()
+
+-- | usage: (@treeCtrlSetIndent obj indent@).
+treeCtrlSetIndent :: TreeCtrl  a -> Int ->  IO ()
+treeCtrlSetIndent _obj indent 
+  = withObjectRef "treeCtrlSetIndent" _obj $ \cobj__obj -> 
+    wxTreeCtrl_SetIndent cobj__obj  (toCInt indent)  
+foreign import ccall "wxTreeCtrl_SetIndent" wxTreeCtrl_SetIndent :: Ptr (TTreeCtrl a) -> CInt -> IO ()
+
+-- | usage: (@treeCtrlSetItemBackgroundColour obj item col@).
+treeCtrlSetItemBackgroundColour :: TreeCtrl  a -> TreeItem -> Color ->  IO ()
+treeCtrlSetItemBackgroundColour _obj item col 
+  = withObjectRef "treeCtrlSetItemBackgroundColour" _obj $ \cobj__obj -> 
+    withTreeItemIdPtr item $ \cobj_item -> 
+    withColourPtr col $ \cobj_col -> 
+    wxTreeCtrl_SetItemBackgroundColour cobj__obj  cobj_item  cobj_col  
+foreign import ccall "wxTreeCtrl_SetItemBackgroundColour" wxTreeCtrl_SetItemBackgroundColour :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> Ptr (TColour c) -> IO ()
+
+-- | usage: (@treeCtrlSetItemBold obj item bold@).
+treeCtrlSetItemBold :: TreeCtrl  a -> TreeItem -> Bool ->  IO ()
+treeCtrlSetItemBold _obj item bold 
+  = withObjectRef "treeCtrlSetItemBold" _obj $ \cobj__obj -> 
+    withTreeItemIdPtr item $ \cobj_item -> 
+    wxTreeCtrl_SetItemBold cobj__obj  cobj_item  (toCBool bold)  
+foreign import ccall "wxTreeCtrl_SetItemBold" wxTreeCtrl_SetItemBold :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> CBool -> IO ()
+
+-- | usage: (@treeCtrlSetItemClientClosure obj item closure@).
+treeCtrlSetItemClientClosure :: TreeCtrl  a -> TreeItem -> Closure  c ->  IO ()
+treeCtrlSetItemClientClosure _obj item closure 
+  = withObjectRef "treeCtrlSetItemClientClosure" _obj $ \cobj__obj -> 
+    withTreeItemIdPtr item $ \cobj_item -> 
+    withObjectPtr closure $ \cobj_closure -> 
+    wxTreeCtrl_SetItemClientClosure cobj__obj  cobj_item  cobj_closure  
+foreign import ccall "wxTreeCtrl_SetItemClientClosure" wxTreeCtrl_SetItemClientClosure :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> Ptr (TClosure c) -> IO ()
+
+-- | usage: (@treeCtrlSetItemData obj item wxdata@).
+treeCtrlSetItemData :: TreeCtrl  a -> TreeItem -> Ptr  c ->  IO ()
+treeCtrlSetItemData _obj item wxdata 
+  = withObjectRef "treeCtrlSetItemData" _obj $ \cobj__obj -> 
+    withTreeItemIdPtr item $ \cobj_item -> 
+    wxTreeCtrl_SetItemData cobj__obj  cobj_item  wxdata  
+foreign import ccall "wxTreeCtrl_SetItemData" wxTreeCtrl_SetItemData :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> Ptr  c -> IO ()
+
+-- | usage: (@treeCtrlSetItemDropHighlight obj item highlight@).
+treeCtrlSetItemDropHighlight :: TreeCtrl  a -> TreeItem -> Bool ->  IO ()
+treeCtrlSetItemDropHighlight _obj item highlight 
+  = withObjectRef "treeCtrlSetItemDropHighlight" _obj $ \cobj__obj -> 
+    withTreeItemIdPtr item $ \cobj_item -> 
+    wxTreeCtrl_SetItemDropHighlight cobj__obj  cobj_item  (toCBool highlight)  
+foreign import ccall "wxTreeCtrl_SetItemDropHighlight" wxTreeCtrl_SetItemDropHighlight :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> CBool -> IO ()
+
+-- | usage: (@treeCtrlSetItemFont obj item font@).
+treeCtrlSetItemFont :: TreeCtrl  a -> TreeItem -> Font  c ->  IO ()
+treeCtrlSetItemFont _obj item font 
+  = withObjectRef "treeCtrlSetItemFont" _obj $ \cobj__obj -> 
+    withTreeItemIdPtr item $ \cobj_item -> 
+    withObjectPtr font $ \cobj_font -> 
+    wxTreeCtrl_SetItemFont cobj__obj  cobj_item  cobj_font  
+foreign import ccall "wxTreeCtrl_SetItemFont" wxTreeCtrl_SetItemFont :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> Ptr (TFont c) -> IO ()
+
+-- | usage: (@treeCtrlSetItemHasChildren obj item hasChildren@).
+treeCtrlSetItemHasChildren :: TreeCtrl  a -> TreeItem -> Bool ->  IO ()
+treeCtrlSetItemHasChildren _obj item hasChildren 
+  = withObjectRef "treeCtrlSetItemHasChildren" _obj $ \cobj__obj -> 
+    withTreeItemIdPtr item $ \cobj_item -> 
+    wxTreeCtrl_SetItemHasChildren cobj__obj  cobj_item  (toCBool hasChildren)  
+foreign import ccall "wxTreeCtrl_SetItemHasChildren" wxTreeCtrl_SetItemHasChildren :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> CBool -> IO ()
+
+-- | usage: (@treeCtrlSetItemImage obj item image which@).
+treeCtrlSetItemImage :: TreeCtrl  a -> TreeItem -> Int -> Int ->  IO ()
+treeCtrlSetItemImage _obj item image which 
+  = withObjectRef "treeCtrlSetItemImage" _obj $ \cobj__obj -> 
+    withTreeItemIdPtr item $ \cobj_item -> 
+    wxTreeCtrl_SetItemImage cobj__obj  cobj_item  (toCInt image)  (toCInt which)  
+foreign import ccall "wxTreeCtrl_SetItemImage" wxTreeCtrl_SetItemImage :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> CInt -> CInt -> IO ()
+
+-- | usage: (@treeCtrlSetItemText obj item text@).
+treeCtrlSetItemText :: TreeCtrl  a -> TreeItem -> String ->  IO ()
+treeCtrlSetItemText _obj item text 
+  = withObjectRef "treeCtrlSetItemText" _obj $ \cobj__obj -> 
+    withTreeItemIdPtr item $ \cobj_item -> 
+    withStringPtr text $ \cobj_text -> 
+    wxTreeCtrl_SetItemText cobj__obj  cobj_item  cobj_text  
+foreign import ccall "wxTreeCtrl_SetItemText" wxTreeCtrl_SetItemText :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> Ptr (TWxString c) -> IO ()
+
+-- | usage: (@treeCtrlSetItemTextColour obj item col@).
+treeCtrlSetItemTextColour :: TreeCtrl  a -> TreeItem -> Color ->  IO ()
+treeCtrlSetItemTextColour _obj item col 
+  = withObjectRef "treeCtrlSetItemTextColour" _obj $ \cobj__obj -> 
+    withTreeItemIdPtr item $ \cobj_item -> 
+    withColourPtr col $ \cobj_col -> 
+    wxTreeCtrl_SetItemTextColour cobj__obj  cobj_item  cobj_col  
+foreign import ccall "wxTreeCtrl_SetItemTextColour" wxTreeCtrl_SetItemTextColour :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> Ptr (TColour c) -> IO ()
+
+-- | usage: (@treeCtrlSetSpacing obj spacing@).
+treeCtrlSetSpacing :: TreeCtrl  a -> Int ->  IO ()
+treeCtrlSetSpacing _obj spacing 
+  = withObjectRef "treeCtrlSetSpacing" _obj $ \cobj__obj -> 
+    wxTreeCtrl_SetSpacing cobj__obj  (toCInt spacing)  
+foreign import ccall "wxTreeCtrl_SetSpacing" wxTreeCtrl_SetSpacing :: Ptr (TTreeCtrl a) -> CInt -> IO ()
+
+-- | usage: (@treeCtrlSetStateImageList obj imageList@).
+treeCtrlSetStateImageList :: TreeCtrl  a -> ImageList  b ->  IO ()
+treeCtrlSetStateImageList _obj imageList 
+  = withObjectRef "treeCtrlSetStateImageList" _obj $ \cobj__obj -> 
+    withObjectPtr imageList $ \cobj_imageList -> 
+    wxTreeCtrl_SetStateImageList cobj__obj  cobj_imageList  
+foreign import ccall "wxTreeCtrl_SetStateImageList" wxTreeCtrl_SetStateImageList :: Ptr (TTreeCtrl a) -> Ptr (TImageList b) -> IO ()
+
+-- | usage: (@treeCtrlSortChildren obj item@).
+treeCtrlSortChildren :: TreeCtrl  a -> TreeItem ->  IO ()
+treeCtrlSortChildren _obj item 
+  = withObjectRef "treeCtrlSortChildren" _obj $ \cobj__obj -> 
+    withTreeItemIdPtr item $ \cobj_item -> 
+    wxTreeCtrl_SortChildren cobj__obj  cobj_item  
+foreign import ccall "wxTreeCtrl_SortChildren" wxTreeCtrl_SortChildren :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> IO ()
+
+-- | usage: (@treeCtrlToggle obj item@).
+treeCtrlToggle :: TreeCtrl  a -> TreeItem ->  IO ()
+treeCtrlToggle _obj item 
+  = withObjectRef "treeCtrlToggle" _obj $ \cobj__obj -> 
+    withTreeItemIdPtr item $ \cobj_item -> 
+    wxTreeCtrl_Toggle cobj__obj  cobj_item  
+foreign import ccall "wxTreeCtrl_Toggle" wxTreeCtrl_Toggle :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> IO ()
+
+-- | usage: (@treeCtrlUnselect obj@).
+treeCtrlUnselect :: TreeCtrl  a ->  IO ()
+treeCtrlUnselect _obj 
+  = withObjectRef "treeCtrlUnselect" _obj $ \cobj__obj -> 
+    wxTreeCtrl_Unselect cobj__obj  
+foreign import ccall "wxTreeCtrl_Unselect" wxTreeCtrl_Unselect :: Ptr (TTreeCtrl a) -> IO ()
+
+-- | usage: (@treeCtrlUnselectAll obj@).
+treeCtrlUnselectAll :: TreeCtrl  a ->  IO ()
+treeCtrlUnselectAll _obj 
+  = withObjectRef "treeCtrlUnselectAll" _obj $ \cobj__obj -> 
+    wxTreeCtrl_UnselectAll cobj__obj  
+foreign import ccall "wxTreeCtrl_UnselectAll" wxTreeCtrl_UnselectAll :: Ptr (TTreeCtrl a) -> IO ()
+
+-- | usage: (@treeEventAllow obj@).
+treeEventAllow :: TreeEvent  a ->  IO ()
+treeEventAllow _obj 
+  = withObjectRef "treeEventAllow" _obj $ \cobj__obj -> 
+    wxTreeEvent_Allow cobj__obj  
+foreign import ccall "wxTreeEvent_Allow" wxTreeEvent_Allow :: Ptr (TTreeEvent a) -> IO ()
+
+-- | usage: (@treeEventGetCode obj@).
+treeEventGetCode :: TreeEvent  a ->  IO Int
+treeEventGetCode _obj 
+  = withIntResult $
+    withObjectRef "treeEventGetCode" _obj $ \cobj__obj -> 
+    wxTreeEvent_GetCode cobj__obj  
+foreign import ccall "wxTreeEvent_GetCode" wxTreeEvent_GetCode :: Ptr (TTreeEvent a) -> IO CInt
+
+-- | usage: (@treeEventGetItem obj@).
+treeEventGetItem :: TreeEvent  a ->  IO (TreeItem)
+treeEventGetItem _obj 
+  = withRefTreeItemId $ \pref -> 
+    withObjectRef "treeEventGetItem" _obj $ \cobj__obj -> 
+    wxTreeEvent_GetItem cobj__obj   pref
+foreign import ccall "wxTreeEvent_GetItem" wxTreeEvent_GetItem :: Ptr (TTreeEvent a) -> Ptr (TTreeItemId ()) -> IO ()
+
+-- | usage: (@treeEventGetKeyEvent obj@).
+treeEventGetKeyEvent :: TreeEvent  a ->  IO (KeyEvent  ())
+treeEventGetKeyEvent _obj 
+  = withObjectResult $
+    withObjectRef "treeEventGetKeyEvent" _obj $ \cobj__obj -> 
+    wxTreeEvent_GetKeyEvent cobj__obj  
+foreign import ccall "wxTreeEvent_GetKeyEvent" wxTreeEvent_GetKeyEvent :: Ptr (TTreeEvent a) -> IO (Ptr (TKeyEvent ()))
+
+-- | usage: (@treeEventGetLabel obj@).
+treeEventGetLabel :: TreeEvent  a ->  IO (String)
+treeEventGetLabel _obj 
+  = withManagedStringResult $
+    withObjectRef "treeEventGetLabel" _obj $ \cobj__obj -> 
+    wxTreeEvent_GetLabel cobj__obj  
+foreign import ccall "wxTreeEvent_GetLabel" wxTreeEvent_GetLabel :: Ptr (TTreeEvent a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@treeEventGetOldItem obj@).
+treeEventGetOldItem :: TreeEvent  a ->  IO (TreeItem)
+treeEventGetOldItem _obj 
+  = withRefTreeItemId $ \pref -> 
+    withObjectRef "treeEventGetOldItem" _obj $ \cobj__obj -> 
+    wxTreeEvent_GetOldItem cobj__obj   pref
+foreign import ccall "wxTreeEvent_GetOldItem" wxTreeEvent_GetOldItem :: Ptr (TTreeEvent a) -> Ptr (TTreeItemId ()) -> IO ()
+
+-- | usage: (@treeEventGetPoint obj@).
+treeEventGetPoint :: TreeEvent  a ->  IO (Point)
+treeEventGetPoint _obj 
+  = withWxPointResult $
+    withObjectRef "treeEventGetPoint" _obj $ \cobj__obj -> 
+    wxTreeEvent_GetPoint cobj__obj  
+foreign import ccall "wxTreeEvent_GetPoint" wxTreeEvent_GetPoint :: Ptr (TTreeEvent a) -> IO (Ptr (TWxPoint ()))
+
+-- | usage: (@treeEventIsEditCancelled obj@).
+treeEventIsEditCancelled :: TreeEvent  a ->  IO Bool
+treeEventIsEditCancelled _obj 
+  = withBoolResult $
+    withObjectRef "treeEventIsEditCancelled" _obj $ \cobj__obj -> 
+    wxTreeEvent_IsEditCancelled cobj__obj  
+foreign import ccall "wxTreeEvent_IsEditCancelled" wxTreeEvent_IsEditCancelled :: Ptr (TTreeEvent a) -> IO CBool
+
+-- | usage: (@updateUIEventCheck obj check@).
+updateUIEventCheck :: UpdateUIEvent  a -> Bool ->  IO ()
+updateUIEventCheck _obj check 
+  = withObjectRef "updateUIEventCheck" _obj $ \cobj__obj -> 
+    wxUpdateUIEvent_Check cobj__obj  (toCBool check)  
+foreign import ccall "wxUpdateUIEvent_Check" wxUpdateUIEvent_Check :: Ptr (TUpdateUIEvent a) -> CBool -> IO ()
+
+-- | usage: (@updateUIEventCopyObject obj obj@).
+updateUIEventCopyObject :: UpdateUIEvent  a -> WxObject  b ->  IO ()
+updateUIEventCopyObject _obj obj 
+  = withObjectRef "updateUIEventCopyObject" _obj $ \cobj__obj -> 
+    withObjectPtr obj $ \cobj_obj -> 
+    wxUpdateUIEvent_CopyObject cobj__obj  cobj_obj  
+foreign import ccall "wxUpdateUIEvent_CopyObject" wxUpdateUIEvent_CopyObject :: Ptr (TUpdateUIEvent a) -> Ptr (TWxObject b) -> IO ()
+
+-- | usage: (@updateUIEventEnable obj enable@).
+updateUIEventEnable :: UpdateUIEvent  a -> Bool ->  IO ()
+updateUIEventEnable _obj enable 
+  = withObjectRef "updateUIEventEnable" _obj $ \cobj__obj -> 
+    wxUpdateUIEvent_Enable cobj__obj  (toCBool enable)  
+foreign import ccall "wxUpdateUIEvent_Enable" wxUpdateUIEvent_Enable :: Ptr (TUpdateUIEvent a) -> CBool -> IO ()
+
+-- | usage: (@updateUIEventGetChecked obj@).
+updateUIEventGetChecked :: UpdateUIEvent  a ->  IO Bool
+updateUIEventGetChecked _obj 
+  = withBoolResult $
+    withObjectRef "updateUIEventGetChecked" _obj $ \cobj__obj -> 
+    wxUpdateUIEvent_GetChecked cobj__obj  
+foreign import ccall "wxUpdateUIEvent_GetChecked" wxUpdateUIEvent_GetChecked :: Ptr (TUpdateUIEvent a) -> IO CBool
+
+-- | usage: (@updateUIEventGetEnabled obj@).
+updateUIEventGetEnabled :: UpdateUIEvent  a ->  IO Bool
+updateUIEventGetEnabled _obj 
+  = withBoolResult $
+    withObjectRef "updateUIEventGetEnabled" _obj $ \cobj__obj -> 
+    wxUpdateUIEvent_GetEnabled cobj__obj  
+foreign import ccall "wxUpdateUIEvent_GetEnabled" wxUpdateUIEvent_GetEnabled :: Ptr (TUpdateUIEvent a) -> IO CBool
+
+-- | usage: (@updateUIEventGetSetChecked obj@).
+updateUIEventGetSetChecked :: UpdateUIEvent  a ->  IO Bool
+updateUIEventGetSetChecked _obj 
+  = withBoolResult $
+    withObjectRef "updateUIEventGetSetChecked" _obj $ \cobj__obj -> 
+    wxUpdateUIEvent_GetSetChecked cobj__obj  
+foreign import ccall "wxUpdateUIEvent_GetSetChecked" wxUpdateUIEvent_GetSetChecked :: Ptr (TUpdateUIEvent a) -> IO CBool
+
+-- | usage: (@updateUIEventGetSetEnabled obj@).
+updateUIEventGetSetEnabled :: UpdateUIEvent  a ->  IO Bool
+updateUIEventGetSetEnabled _obj 
+  = withBoolResult $
+    withObjectRef "updateUIEventGetSetEnabled" _obj $ \cobj__obj -> 
+    wxUpdateUIEvent_GetSetEnabled cobj__obj  
+foreign import ccall "wxUpdateUIEvent_GetSetEnabled" wxUpdateUIEvent_GetSetEnabled :: Ptr (TUpdateUIEvent a) -> IO CBool
+
+-- | usage: (@updateUIEventGetSetText obj@).
+updateUIEventGetSetText :: UpdateUIEvent  a ->  IO Bool
+updateUIEventGetSetText _obj 
+  = withBoolResult $
+    withObjectRef "updateUIEventGetSetText" _obj $ \cobj__obj -> 
+    wxUpdateUIEvent_GetSetText cobj__obj  
+foreign import ccall "wxUpdateUIEvent_GetSetText" wxUpdateUIEvent_GetSetText :: Ptr (TUpdateUIEvent a) -> IO CBool
+
+-- | usage: (@updateUIEventGetText obj@).
+updateUIEventGetText :: UpdateUIEvent  a ->  IO (String)
+updateUIEventGetText _obj 
+  = withManagedStringResult $
+    withObjectRef "updateUIEventGetText" _obj $ \cobj__obj -> 
+    wxUpdateUIEvent_GetText cobj__obj  
+foreign import ccall "wxUpdateUIEvent_GetText" wxUpdateUIEvent_GetText :: Ptr (TUpdateUIEvent a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@updateUIEventSetText obj text@).
+updateUIEventSetText :: UpdateUIEvent  a -> String ->  IO ()
+updateUIEventSetText _obj text 
+  = withObjectRef "updateUIEventSetText" _obj $ \cobj__obj -> 
+    withStringPtr text $ \cobj_text -> 
+    wxUpdateUIEvent_SetText cobj__obj  cobj_text  
+foreign import ccall "wxUpdateUIEvent_SetText" wxUpdateUIEvent_SetText :: Ptr (TUpdateUIEvent a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@validatorCreate@).
+validatorCreate ::  IO (Validator  ())
+validatorCreate 
+  = withObjectResult $
+    wxValidator_Create 
+foreign import ccall "wxValidator_Create" wxValidator_Create :: IO (Ptr (TValidator ()))
+
+-- | usage: (@validatorDelete obj@).
+validatorDelete :: Validator  a ->  IO ()
+validatorDelete
+  = objectDelete
+
+
+-- | usage: (@validatorGetWindow obj@).
+validatorGetWindow :: Validator  a ->  IO (Window  ())
+validatorGetWindow _obj 
+  = withObjectResult $
+    withObjectRef "validatorGetWindow" _obj $ \cobj__obj -> 
+    wxValidator_GetWindow cobj__obj  
+foreign import ccall "wxValidator_GetWindow" wxValidator_GetWindow :: Ptr (TValidator a) -> IO (Ptr (TWindow ()))
+
+-- | usage: (@validatorSetWindow obj win@).
+validatorSetWindow :: Validator  a -> Window  b ->  IO ()
+validatorSetWindow _obj win 
+  = withObjectRef "validatorSetWindow" _obj $ \cobj__obj -> 
+    withObjectPtr win $ \cobj_win -> 
+    wxValidator_SetWindow cobj__obj  cobj_win  
+foreign import ccall "wxValidator_SetWindow" wxValidator_SetWindow :: Ptr (TValidator a) -> Ptr (TWindow b) -> IO ()
+
+-- | usage: (@validatorSuppressBellOnError doIt@).
+validatorSuppressBellOnError :: Bool ->  IO ()
+validatorSuppressBellOnError doIt 
+  = wxValidator_SuppressBellOnError (toCBool doIt)  
+foreign import ccall "wxValidator_SuppressBellOnError" wxValidator_SuppressBellOnError :: CBool -> IO ()
+
+-- | usage: (@validatorTransferFromWindow obj@).
+validatorTransferFromWindow :: Validator  a ->  IO Bool
+validatorTransferFromWindow _obj 
+  = withBoolResult $
+    withObjectRef "validatorTransferFromWindow" _obj $ \cobj__obj -> 
+    wxValidator_TransferFromWindow cobj__obj  
+foreign import ccall "wxValidator_TransferFromWindow" wxValidator_TransferFromWindow :: Ptr (TValidator a) -> IO CBool
+
+-- | usage: (@validatorTransferToWindow obj@).
+validatorTransferToWindow :: Validator  a ->  IO Bool
+validatorTransferToWindow _obj 
+  = withBoolResult $
+    withObjectRef "validatorTransferToWindow" _obj $ \cobj__obj -> 
+    wxValidator_TransferToWindow cobj__obj  
+foreign import ccall "wxValidator_TransferToWindow" wxValidator_TransferToWindow :: Ptr (TValidator a) -> IO CBool
+
+-- | usage: (@validatorValidate obj parent@).
+validatorValidate :: Validator  a -> Window  b ->  IO Bool
+validatorValidate _obj parent 
+  = withBoolResult $
+    withObjectRef "validatorValidate" _obj $ \cobj__obj -> 
+    withObjectPtr parent $ \cobj_parent -> 
+    wxValidator_Validate cobj__obj  cobj_parent  
+foreign import ccall "wxValidator_Validate" wxValidator_Validate :: Ptr (TValidator a) -> Ptr (TWindow b) -> IO CBool
+
+{- |  Get the version number of wxWidgets as a number composed of the major version times 1000, minor version times 100, and the release number. For example, release 2.1.15 becomes 2115.  -}
+versionNumber ::  IO Int
+versionNumber 
+  = withIntResult $
+    wx_wxVersionNumber 
+foreign import ccall "wxVersionNumber" wx_wxVersionNumber :: IO CInt
+
+-- | usage: (@windowAddChild obj child@).
+windowAddChild :: Window  a -> Window  b ->  IO ()
+windowAddChild _obj child 
+  = withObjectRef "windowAddChild" _obj $ \cobj__obj -> 
+    withObjectPtr child $ \cobj_child -> 
+    wxWindow_AddChild cobj__obj  cobj_child  
+foreign import ccall "wxWindow_AddChild" wxWindow_AddChild :: Ptr (TWindow a) -> Ptr (TWindow b) -> IO ()
+
+-- | usage: (@windowAddConstraintReference obj otherWin@).
+windowAddConstraintReference :: Window  a -> Window  b ->  IO ()
+windowAddConstraintReference _obj otherWin 
+  = withObjectRef "windowAddConstraintReference" _obj $ \cobj__obj -> 
+    withObjectPtr otherWin $ \cobj_otherWin -> 
+    wxWindow_AddConstraintReference cobj__obj  cobj_otherWin  
+foreign import ccall "wxWindow_AddConstraintReference" wxWindow_AddConstraintReference :: Ptr (TWindow a) -> Ptr (TWindow b) -> IO ()
+
+-- | usage: (@windowCaptureMouse obj@).
+windowCaptureMouse :: Window  a ->  IO ()
+windowCaptureMouse _obj 
+  = withObjectRef "windowCaptureMouse" _obj $ \cobj__obj -> 
+    wxWindow_CaptureMouse cobj__obj  
+foreign import ccall "wxWindow_CaptureMouse" wxWindow_CaptureMouse :: Ptr (TWindow a) -> IO ()
+
+-- | usage: (@windowCenter obj direction@).
+windowCenter :: Window  a -> Int ->  IO ()
+windowCenter _obj direction 
+  = withObjectRef "windowCenter" _obj $ \cobj__obj -> 
+    wxWindow_Center cobj__obj  (toCInt direction)  
+foreign import ccall "wxWindow_Center" wxWindow_Center :: Ptr (TWindow a) -> CInt -> IO ()
+
+-- | usage: (@windowCenterOnParent obj dir@).
+windowCenterOnParent :: Window  a -> Int ->  IO ()
+windowCenterOnParent _obj dir 
+  = withObjectRef "windowCenterOnParent" _obj $ \cobj__obj -> 
+    wxWindow_CenterOnParent cobj__obj  (toCInt dir)  
+foreign import ccall "wxWindow_CenterOnParent" wxWindow_CenterOnParent :: Ptr (TWindow a) -> CInt -> IO ()
+
+-- | usage: (@windowClearBackground obj@).
+windowClearBackground :: Window  a ->  IO ()
+windowClearBackground _obj 
+  = withObjectRef "windowClearBackground" _obj $ \cobj__obj -> 
+    wxWindow_ClearBackground cobj__obj  
+foreign import ccall "wxWindow_ClearBackground" wxWindow_ClearBackground :: Ptr (TWindow a) -> IO ()
+
+-- | usage: (@windowClientToScreen obj xy@).
+windowClientToScreen :: Window  a -> Point ->  IO (Point)
+windowClientToScreen _obj xy 
+  = withWxPointResult $
+    withObjectRef "windowClientToScreen" _obj $ \cobj__obj -> 
+    wxWindow_ClientToScreen cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxWindow_ClientToScreen" wxWindow_ClientToScreen :: Ptr (TWindow a) -> CInt -> CInt -> IO (Ptr (TWxPoint ()))
+
+-- | usage: (@windowClose obj force@).
+windowClose :: Window  a -> Bool ->  IO Bool
+windowClose _obj _force 
+  = withBoolResult $
+    withObjectRef "windowClose" _obj $ \cobj__obj -> 
+    wxWindow_Close cobj__obj  (toCBool _force)  
+foreign import ccall "wxWindow_Close" wxWindow_Close :: Ptr (TWindow a) -> CBool -> IO CBool
+
+-- | usage: (@windowConvertDialogToPixels obj@).
+windowConvertDialogToPixels :: Window  a ->  IO (Point)
+windowConvertDialogToPixels _obj 
+  = withWxPointResult $
+    withObjectRef "windowConvertDialogToPixels" _obj $ \cobj__obj -> 
+    wxWindow_ConvertDialogToPixels cobj__obj  
+foreign import ccall "wxWindow_ConvertDialogToPixels" wxWindow_ConvertDialogToPixels :: Ptr (TWindow a) -> IO (Ptr (TWxPoint ()))
+
+-- | usage: (@windowConvertDialogToPixelsEx obj@).
+windowConvertDialogToPixelsEx :: Window  a ->  IO (Point)
+windowConvertDialogToPixelsEx _obj 
+  = withWxPointResult $
+    withObjectRef "windowConvertDialogToPixelsEx" _obj $ \cobj__obj -> 
+    wxWindow_ConvertDialogToPixelsEx cobj__obj  
+foreign import ccall "wxWindow_ConvertDialogToPixelsEx" wxWindow_ConvertDialogToPixelsEx :: Ptr (TWindow a) -> IO (Ptr (TWxPoint ()))
+
+-- | usage: (@windowConvertPixelsToDialog obj@).
+windowConvertPixelsToDialog :: Window  a ->  IO (Point)
+windowConvertPixelsToDialog _obj 
+  = withWxPointResult $
+    withObjectRef "windowConvertPixelsToDialog" _obj $ \cobj__obj -> 
+    wxWindow_ConvertPixelsToDialog cobj__obj  
+foreign import ccall "wxWindow_ConvertPixelsToDialog" wxWindow_ConvertPixelsToDialog :: Ptr (TWindow a) -> IO (Ptr (TWxPoint ()))
+
+-- | usage: (@windowConvertPixelsToDialogEx obj@).
+windowConvertPixelsToDialogEx :: Window  a ->  IO (Point)
+windowConvertPixelsToDialogEx _obj 
+  = withWxPointResult $
+    withObjectRef "windowConvertPixelsToDialogEx" _obj $ \cobj__obj -> 
+    wxWindow_ConvertPixelsToDialogEx cobj__obj  
+foreign import ccall "wxWindow_ConvertPixelsToDialogEx" wxWindow_ConvertPixelsToDialogEx :: Ptr (TWindow a) -> IO (Ptr (TWxPoint ()))
+
+-- | usage: (@windowCreate prt id xywh stl@).
+windowCreate :: Window  a -> Id -> Rect -> Style ->  IO (Window  ())
+windowCreate _prt _id _xywh _stl 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    wxWindow_Create cobj__prt  (toCInt _id)  (toCIntRectX _xywh) (toCIntRectY _xywh)(toCIntRectW _xywh) (toCIntRectH _xywh)  (toCInt _stl)  
+foreign import ccall "wxWindow_Create" wxWindow_Create :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TWindow ()))
+
+-- | usage: (@windowCreateEventGetWindow obj@).
+windowCreateEventGetWindow :: WindowCreateEvent  a ->  IO (Window  ())
+windowCreateEventGetWindow _obj 
+  = withObjectResult $
+    withObjectRef "windowCreateEventGetWindow" _obj $ \cobj__obj -> 
+    wxWindowCreateEvent_GetWindow cobj__obj  
+foreign import ccall "wxWindowCreateEvent_GetWindow" wxWindowCreateEvent_GetWindow :: Ptr (TWindowCreateEvent a) -> IO (Ptr (TWindow ()))
+
+-- | usage: (@windowDCCreate win@).
+windowDCCreate :: Window  a ->  IO (WindowDC  ())
+windowDCCreate win 
+  = withObjectResult $
+    withObjectPtr win $ \cobj_win -> 
+    wxWindowDC_Create cobj_win  
+foreign import ccall "wxWindowDC_Create" wxWindowDC_Create :: Ptr (TWindow a) -> IO (Ptr (TWindowDC ()))
+
+-- | usage: (@windowDCDelete obj@).
+windowDCDelete :: WindowDC  a ->  IO ()
+windowDCDelete
+  = objectDelete
+
+
+-- | usage: (@windowDeleteRelatedConstraints obj@).
+windowDeleteRelatedConstraints :: Window  a ->  IO ()
+windowDeleteRelatedConstraints _obj 
+  = withObjectRef "windowDeleteRelatedConstraints" _obj $ \cobj__obj -> 
+    wxWindow_DeleteRelatedConstraints cobj__obj  
+foreign import ccall "wxWindow_DeleteRelatedConstraints" wxWindow_DeleteRelatedConstraints :: Ptr (TWindow a) -> IO ()
+
+-- | usage: (@windowDestroy obj@).
+windowDestroy :: Window  a ->  IO Bool
+windowDestroy _obj 
+  = withBoolResult $
+    withObjectRef "windowDestroy" _obj $ \cobj__obj -> 
+    wxWindow_Destroy cobj__obj  
+foreign import ccall "wxWindow_Destroy" wxWindow_Destroy :: Ptr (TWindow a) -> IO CBool
+
+-- | usage: (@windowDestroyChildren obj@).
+windowDestroyChildren :: Window  a ->  IO Bool
+windowDestroyChildren _obj 
+  = withBoolResult $
+    withObjectRef "windowDestroyChildren" _obj $ \cobj__obj -> 
+    wxWindow_DestroyChildren cobj__obj  
+foreign import ccall "wxWindow_DestroyChildren" wxWindow_DestroyChildren :: Ptr (TWindow a) -> IO CBool
+
+-- | usage: (@windowDestroyEventGetWindow obj@).
+windowDestroyEventGetWindow :: WindowDestroyEvent  a ->  IO (Window  ())
+windowDestroyEventGetWindow _obj 
+  = withObjectResult $
+    withObjectRef "windowDestroyEventGetWindow" _obj $ \cobj__obj -> 
+    wxWindowDestroyEvent_GetWindow cobj__obj  
+foreign import ccall "wxWindowDestroyEvent_GetWindow" wxWindowDestroyEvent_GetWindow :: Ptr (TWindowDestroyEvent a) -> IO (Ptr (TWindow ()))
+
+-- | usage: (@windowDisable obj@).
+windowDisable :: Window  a ->  IO Bool
+windowDisable _obj 
+  = withBoolResult $
+    withObjectRef "windowDisable" _obj $ \cobj__obj -> 
+    wxWindow_Disable cobj__obj  
+foreign import ccall "wxWindow_Disable" wxWindow_Disable :: Ptr (TWindow a) -> IO CBool
+
+-- | usage: (@windowDoPhase obj phase@).
+windowDoPhase :: Window  a -> Int ->  IO Int
+windowDoPhase _obj phase 
+  = withIntResult $
+    withObjectRef "windowDoPhase" _obj $ \cobj__obj -> 
+    wxWindow_DoPhase cobj__obj  (toCInt phase)  
+foreign import ccall "wxWindow_DoPhase" wxWindow_DoPhase :: Ptr (TWindow a) -> CInt -> IO CInt
+
+-- | usage: (@windowEnable obj@).
+windowEnable :: Window  a ->  IO Bool
+windowEnable _obj 
+  = withBoolResult $
+    withObjectRef "windowEnable" _obj $ \cobj__obj -> 
+    wxWindow_Enable cobj__obj  
+foreign import ccall "wxWindow_Enable" wxWindow_Enable :: Ptr (TWindow a) -> IO CBool
+
+-- | usage: (@windowFindFocus obj@).
+windowFindFocus :: Window  a ->  IO (Window  ())
+windowFindFocus _obj 
+  = withObjectResult $
+    withObjectRef "windowFindFocus" _obj $ \cobj__obj -> 
+    wxWindow_FindFocus cobj__obj  
+foreign import ccall "wxWindow_FindFocus" wxWindow_FindFocus :: Ptr (TWindow a) -> IO (Ptr (TWindow ()))
+
+-- | usage: (@windowFindWindow obj name@).
+windowFindWindow :: Window  a -> String ->  IO (Window  ())
+windowFindWindow _obj name 
+  = withObjectResult $
+    withObjectRef "windowFindWindow" _obj $ \cobj__obj -> 
+    withStringPtr name $ \cobj_name -> 
+    wxWindow_FindWindow cobj__obj  cobj_name  
+foreign import ccall "wxWindow_FindWindow" wxWindow_FindWindow :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TWindow ()))
+
+-- | usage: (@windowFit obj@).
+windowFit :: Window  a ->  IO ()
+windowFit _obj 
+  = withObjectRef "windowFit" _obj $ \cobj__obj -> 
+    wxWindow_Fit cobj__obj  
+foreign import ccall "wxWindow_Fit" wxWindow_Fit :: Ptr (TWindow a) -> IO ()
+
+-- | usage: (@windowFitInside obj@).
+windowFitInside :: Window  a ->  IO ()
+windowFitInside _obj 
+  = withObjectRef "windowFitInside" _obj $ \cobj__obj -> 
+    wxWindow_FitInside cobj__obj  
+foreign import ccall "wxWindow_FitInside" wxWindow_FitInside :: Ptr (TWindow a) -> IO ()
+
+-- | usage: (@windowFreeze obj@).
+windowFreeze :: Window  a ->  IO ()
+windowFreeze _obj 
+  = withObjectRef "windowFreeze" _obj $ \cobj__obj -> 
+    wxWindow_Freeze cobj__obj  
+foreign import ccall "wxWindow_Freeze" wxWindow_Freeze :: Ptr (TWindow a) -> IO ()
+
+-- | usage: (@windowGetAutoLayout obj@).
+windowGetAutoLayout :: Window  a ->  IO Int
+windowGetAutoLayout _obj 
+  = withIntResult $
+    withObjectRef "windowGetAutoLayout" _obj $ \cobj__obj -> 
+    wxWindow_GetAutoLayout cobj__obj  
+foreign import ccall "wxWindow_GetAutoLayout" wxWindow_GetAutoLayout :: Ptr (TWindow a) -> IO CInt
+
+-- | usage: (@windowGetBackgroundColour obj@).
+windowGetBackgroundColour :: Window  a ->  IO (Color)
+windowGetBackgroundColour _obj 
+  = withRefColour $ \pref -> 
+    withObjectRef "windowGetBackgroundColour" _obj $ \cobj__obj -> 
+    wxWindow_GetBackgroundColour cobj__obj   pref
+foreign import ccall "wxWindow_GetBackgroundColour" wxWindow_GetBackgroundColour :: Ptr (TWindow a) -> Ptr (TColour ()) -> IO ()
+
+-- | usage: (@windowGetBestSize obj@).
+windowGetBestSize :: Window  a ->  IO (Size)
+windowGetBestSize _obj 
+  = withWxSizeResult $
+    withObjectRef "windowGetBestSize" _obj $ \cobj__obj -> 
+    wxWindow_GetBestSize cobj__obj  
+foreign import ccall "wxWindow_GetBestSize" wxWindow_GetBestSize :: Ptr (TWindow a) -> IO (Ptr (TWxSize ()))
+
+-- | usage: (@windowGetCaret obj@).
+windowGetCaret :: Window  a ->  IO (Caret  ())
+windowGetCaret _obj 
+  = withObjectResult $
+    withObjectRef "windowGetCaret" _obj $ \cobj__obj -> 
+    wxWindow_GetCaret cobj__obj  
+foreign import ccall "wxWindow_GetCaret" wxWindow_GetCaret :: Ptr (TWindow a) -> IO (Ptr (TCaret ()))
+
+-- | usage: (@windowGetCharHeight obj@).
+windowGetCharHeight :: Window  a ->  IO Int
+windowGetCharHeight _obj 
+  = withIntResult $
+    withObjectRef "windowGetCharHeight" _obj $ \cobj__obj -> 
+    wxWindow_GetCharHeight cobj__obj  
+foreign import ccall "wxWindow_GetCharHeight" wxWindow_GetCharHeight :: Ptr (TWindow a) -> IO CInt
+
+-- | usage: (@windowGetCharWidth obj@).
+windowGetCharWidth :: Window  a ->  IO Int
+windowGetCharWidth _obj 
+  = withIntResult $
+    withObjectRef "windowGetCharWidth" _obj $ \cobj__obj -> 
+    wxWindow_GetCharWidth cobj__obj  
+foreign import ccall "wxWindow_GetCharWidth" wxWindow_GetCharWidth :: Ptr (TWindow a) -> IO CInt
+
+-- | usage: (@windowGetChildren obj res cnt@).
+windowGetChildren :: Window  a -> Ptr  b -> Int ->  IO Int
+windowGetChildren _obj _res _cnt 
+  = withIntResult $
+    withObjectRef "windowGetChildren" _obj $ \cobj__obj -> 
+    wxWindow_GetChildren cobj__obj  _res  (toCInt _cnt)  
+foreign import ccall "wxWindow_GetChildren" wxWindow_GetChildren :: Ptr (TWindow a) -> Ptr  b -> CInt -> IO CInt
+
+-- | usage: (@windowGetClientData obj@).
+windowGetClientData :: Window  a ->  IO (ClientData  ())
+windowGetClientData _obj 
+  = withObjectResult $
+    withObjectRef "windowGetClientData" _obj $ \cobj__obj -> 
+    wxWindow_GetClientData cobj__obj  
+foreign import ccall "wxWindow_GetClientData" wxWindow_GetClientData :: Ptr (TWindow a) -> IO (Ptr (TClientData ()))
+
+-- | usage: (@windowGetClientSize obj@).
+windowGetClientSize :: Window  a ->  IO (Size)
+windowGetClientSize _obj 
+  = withWxSizeResult $
+    withObjectRef "windowGetClientSize" _obj $ \cobj__obj -> 
+    wxWindow_GetClientSize cobj__obj  
+foreign import ccall "wxWindow_GetClientSize" wxWindow_GetClientSize :: Ptr (TWindow a) -> IO (Ptr (TWxSize ()))
+
+-- | usage: (@windowGetClientSizeConstraint obj@).
+windowGetClientSizeConstraint :: Window  a ->  IO Size
+windowGetClientSizeConstraint _obj 
+  = withSizeResult $ \pw ph -> 
+    withObjectRef "windowGetClientSizeConstraint" _obj $ \cobj__obj -> 
+    wxWindow_GetClientSizeConstraint cobj__obj   pw ph
+foreign import ccall "wxWindow_GetClientSizeConstraint" wxWindow_GetClientSizeConstraint :: Ptr (TWindow a) -> Ptr CInt -> Ptr CInt -> IO ()
+
+-- | usage: (@windowGetConstraints obj@).
+windowGetConstraints :: Window  a ->  IO (LayoutConstraints  ())
+windowGetConstraints _obj 
+  = withObjectResult $
+    withObjectRef "windowGetConstraints" _obj $ \cobj__obj -> 
+    wxWindow_GetConstraints cobj__obj  
+foreign import ccall "wxWindow_GetConstraints" wxWindow_GetConstraints :: Ptr (TWindow a) -> IO (Ptr (TLayoutConstraints ()))
+
+-- | usage: (@windowGetConstraintsInvolvedIn obj@).
+windowGetConstraintsInvolvedIn :: Window  a ->  IO (Ptr  ())
+windowGetConstraintsInvolvedIn _obj 
+  = withObjectRef "windowGetConstraintsInvolvedIn" _obj $ \cobj__obj -> 
+    wxWindow_GetConstraintsInvolvedIn cobj__obj  
+foreign import ccall "wxWindow_GetConstraintsInvolvedIn" wxWindow_GetConstraintsInvolvedIn :: Ptr (TWindow a) -> IO (Ptr  ())
+
+-- | usage: (@windowGetCursor obj@).
+windowGetCursor :: Window  a ->  IO (Cursor  ())
+windowGetCursor _obj 
+  = withManagedCursorResult $
+    withObjectRef "windowGetCursor" _obj $ \cobj__obj -> 
+    wxWindow_GetCursor cobj__obj  
+foreign import ccall "wxWindow_GetCursor" wxWindow_GetCursor :: Ptr (TWindow a) -> IO (Ptr (TCursor ()))
+
+-- | usage: (@windowGetDropTarget obj@).
+windowGetDropTarget :: Window  a ->  IO (DropTarget  ())
+windowGetDropTarget _obj 
+  = withObjectResult $
+    withObjectRef "windowGetDropTarget" _obj $ \cobj__obj -> 
+    wxWindow_GetDropTarget cobj__obj  
+foreign import ccall "wxWindow_GetDropTarget" wxWindow_GetDropTarget :: Ptr (TWindow a) -> IO (Ptr (TDropTarget ()))
+
+-- | usage: (@windowGetEffectiveMinSize obj@).
+windowGetEffectiveMinSize :: Window  a ->  IO (Size)
+windowGetEffectiveMinSize _obj 
+  = withWxSizeResult $
+    withObjectRef "windowGetEffectiveMinSize" _obj $ \cobj__obj -> 
+    wxWindow_GetEffectiveMinSize cobj__obj  
+foreign import ccall "wxWindow_GetEffectiveMinSize" wxWindow_GetEffectiveMinSize :: Ptr (TWindow a) -> IO (Ptr (TWxSize ()))
+
+-- | usage: (@windowGetEventHandler obj@).
+windowGetEventHandler :: Window  a ->  IO (EvtHandler  ())
+windowGetEventHandler _obj 
+  = withObjectResult $
+    withObjectRef "windowGetEventHandler" _obj $ \cobj__obj -> 
+    wxWindow_GetEventHandler cobj__obj  
+foreign import ccall "wxWindow_GetEventHandler" wxWindow_GetEventHandler :: Ptr (TWindow a) -> IO (Ptr (TEvtHandler ()))
+
+-- | usage: (@windowGetFont obj@).
+windowGetFont :: Window  a ->  IO (Font  ())
+windowGetFont _obj 
+  = withRefFont $ \pref -> 
+    withObjectRef "windowGetFont" _obj $ \cobj__obj -> 
+    wxWindow_GetFont cobj__obj   pref
+foreign import ccall "wxWindow_GetFont" wxWindow_GetFont :: Ptr (TWindow a) -> Ptr (TFont ()) -> IO ()
+
+-- | usage: (@windowGetForegroundColour obj@).
+windowGetForegroundColour :: Window  a ->  IO (Color)
+windowGetForegroundColour _obj 
+  = withRefColour $ \pref -> 
+    withObjectRef "windowGetForegroundColour" _obj $ \cobj__obj -> 
+    wxWindow_GetForegroundColour cobj__obj   pref
+foreign import ccall "wxWindow_GetForegroundColour" wxWindow_GetForegroundColour :: Ptr (TWindow a) -> Ptr (TColour ()) -> IO ()
+
+-- | usage: (@windowGetHandle obj@).
+windowGetHandle :: Window  a ->  IO (Ptr  ())
+windowGetHandle _obj 
+  = withObjectRef "windowGetHandle" _obj $ \cobj__obj -> 
+    wxWindow_GetHandle cobj__obj  
+foreign import ccall "wxWindow_GetHandle" wxWindow_GetHandle :: Ptr (TWindow a) -> IO (Ptr  ())
+
+-- | usage: (@windowGetId obj@).
+windowGetId :: Window  a ->  IO Int
+windowGetId _obj 
+  = withIntResult $
+    withObjectRef "windowGetId" _obj $ \cobj__obj -> 
+    wxWindow_GetId cobj__obj  
+foreign import ccall "wxWindow_GetId" wxWindow_GetId :: Ptr (TWindow a) -> IO CInt
+
+-- | usage: (@windowGetLabel obj@).
+windowGetLabel :: Window  a ->  IO (String)
+windowGetLabel _obj 
+  = withManagedStringResult $
+    withObjectRef "windowGetLabel" _obj $ \cobj__obj -> 
+    wxWindow_GetLabel cobj__obj  
+foreign import ccall "wxWindow_GetLabel" wxWindow_GetLabel :: Ptr (TWindow a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@windowGetLabelEmpty obj@).
+windowGetLabelEmpty :: Window  a ->  IO Int
+windowGetLabelEmpty _obj 
+  = withIntResult $
+    withObjectRef "windowGetLabelEmpty" _obj $ \cobj__obj -> 
+    wxWindow_GetLabelEmpty cobj__obj  
+foreign import ccall "wxWindow_GetLabelEmpty" wxWindow_GetLabelEmpty :: Ptr (TWindow a) -> IO CInt
+
+-- | usage: (@windowGetMaxHeight obj@).
+windowGetMaxHeight :: Window  a ->  IO Int
+windowGetMaxHeight _obj 
+  = withIntResult $
+    withObjectRef "windowGetMaxHeight" _obj $ \cobj__obj -> 
+    wxWindow_GetMaxHeight cobj__obj  
+foreign import ccall "wxWindow_GetMaxHeight" wxWindow_GetMaxHeight :: Ptr (TWindow a) -> IO CInt
+
+-- | usage: (@windowGetMaxWidth obj@).
+windowGetMaxWidth :: Window  a ->  IO Int
+windowGetMaxWidth _obj 
+  = withIntResult $
+    withObjectRef "windowGetMaxWidth" _obj $ \cobj__obj -> 
+    wxWindow_GetMaxWidth cobj__obj  
+foreign import ccall "wxWindow_GetMaxWidth" wxWindow_GetMaxWidth :: Ptr (TWindow a) -> IO CInt
+
+-- | usage: (@windowGetMinHeight obj@).
+windowGetMinHeight :: Window  a ->  IO Int
+windowGetMinHeight _obj 
+  = withIntResult $
+    withObjectRef "windowGetMinHeight" _obj $ \cobj__obj -> 
+    wxWindow_GetMinHeight cobj__obj  
+foreign import ccall "wxWindow_GetMinHeight" wxWindow_GetMinHeight :: Ptr (TWindow a) -> IO CInt
+
+-- | usage: (@windowGetMinWidth obj@).
+windowGetMinWidth :: Window  a ->  IO Int
+windowGetMinWidth _obj 
+  = withIntResult $
+    withObjectRef "windowGetMinWidth" _obj $ \cobj__obj -> 
+    wxWindow_GetMinWidth cobj__obj  
+foreign import ccall "wxWindow_GetMinWidth" wxWindow_GetMinWidth :: Ptr (TWindow a) -> IO CInt
+
+-- | usage: (@windowGetName obj@).
+windowGetName :: Window  a ->  IO (String)
+windowGetName _obj 
+  = withManagedStringResult $
+    withObjectRef "windowGetName" _obj $ \cobj__obj -> 
+    wxWindow_GetName cobj__obj  
+foreign import ccall "wxWindow_GetName" wxWindow_GetName :: Ptr (TWindow a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@windowGetParent obj@).
+windowGetParent :: Window  a ->  IO (Window  ())
+windowGetParent _obj 
+  = withObjectResult $
+    withObjectRef "windowGetParent" _obj $ \cobj__obj -> 
+    wxWindow_GetParent cobj__obj  
+foreign import ccall "wxWindow_GetParent" wxWindow_GetParent :: Ptr (TWindow a) -> IO (Ptr (TWindow ()))
+
+-- | usage: (@windowGetPosition obj@).
+windowGetPosition :: Window  a ->  IO (Point)
+windowGetPosition _obj 
+  = withWxPointResult $
+    withObjectRef "windowGetPosition" _obj $ \cobj__obj -> 
+    wxWindow_GetPosition cobj__obj  
+foreign import ccall "wxWindow_GetPosition" wxWindow_GetPosition :: Ptr (TWindow a) -> IO (Ptr (TWxPoint ()))
+
+-- | usage: (@windowGetPositionConstraint obj@).
+windowGetPositionConstraint :: Window  a ->  IO Point
+windowGetPositionConstraint _obj 
+  = withPointResult $ \px py -> 
+    withObjectRef "windowGetPositionConstraint" _obj $ \cobj__obj -> 
+    wxWindow_GetPositionConstraint cobj__obj   px py
+foreign import ccall "wxWindow_GetPositionConstraint" wxWindow_GetPositionConstraint :: Ptr (TWindow a) -> Ptr CInt -> Ptr CInt -> IO ()
+
+-- | usage: (@windowGetRect obj@).
+windowGetRect :: Window  a ->  IO (Rect)
+windowGetRect _obj 
+  = withWxRectResult $
+    withObjectRef "windowGetRect" _obj $ \cobj__obj -> 
+    wxWindow_GetRect cobj__obj  
+foreign import ccall "wxWindow_GetRect" wxWindow_GetRect :: Ptr (TWindow a) -> IO (Ptr (TWxRect ()))
+
+-- | usage: (@windowGetScrollPos obj orient@).
+windowGetScrollPos :: Window  a -> Int ->  IO Int
+windowGetScrollPos _obj orient 
+  = withIntResult $
+    withObjectRef "windowGetScrollPos" _obj $ \cobj__obj -> 
+    wxWindow_GetScrollPos cobj__obj  (toCInt orient)  
+foreign import ccall "wxWindow_GetScrollPos" wxWindow_GetScrollPos :: Ptr (TWindow a) -> CInt -> IO CInt
+
+-- | usage: (@windowGetScrollRange obj orient@).
+windowGetScrollRange :: Window  a -> Int ->  IO Int
+windowGetScrollRange _obj orient 
+  = withIntResult $
+    withObjectRef "windowGetScrollRange" _obj $ \cobj__obj -> 
+    wxWindow_GetScrollRange cobj__obj  (toCInt orient)  
+foreign import ccall "wxWindow_GetScrollRange" wxWindow_GetScrollRange :: Ptr (TWindow a) -> CInt -> IO CInt
+
+-- | usage: (@windowGetScrollThumb obj orient@).
+windowGetScrollThumb :: Window  a -> Int ->  IO Int
+windowGetScrollThumb _obj orient 
+  = withIntResult $
+    withObjectRef "windowGetScrollThumb" _obj $ \cobj__obj -> 
+    wxWindow_GetScrollThumb cobj__obj  (toCInt orient)  
+foreign import ccall "wxWindow_GetScrollThumb" wxWindow_GetScrollThumb :: Ptr (TWindow a) -> CInt -> IO CInt
+
+-- | usage: (@windowGetSize obj@).
+windowGetSize :: Window  a ->  IO (Size)
+windowGetSize _obj 
+  = withWxSizeResult $
+    withObjectRef "windowGetSize" _obj $ \cobj__obj -> 
+    wxWindow_GetSize cobj__obj  
+foreign import ccall "wxWindow_GetSize" wxWindow_GetSize :: Ptr (TWindow a) -> IO (Ptr (TWxSize ()))
+
+-- | usage: (@windowGetSizeConstraint obj@).
+windowGetSizeConstraint :: Window  a ->  IO Size
+windowGetSizeConstraint _obj 
+  = withSizeResult $ \pw ph -> 
+    withObjectRef "windowGetSizeConstraint" _obj $ \cobj__obj -> 
+    wxWindow_GetSizeConstraint cobj__obj   pw ph
+foreign import ccall "wxWindow_GetSizeConstraint" wxWindow_GetSizeConstraint :: Ptr (TWindow a) -> Ptr CInt -> Ptr CInt -> IO ()
+
+-- | usage: (@windowGetSizer obj@).
+windowGetSizer :: Window  a ->  IO (Sizer  ())
+windowGetSizer _obj 
+  = withObjectResult $
+    withObjectRef "windowGetSizer" _obj $ \cobj__obj -> 
+    wxWindow_GetSizer cobj__obj  
+foreign import ccall "wxWindow_GetSizer" wxWindow_GetSizer :: Ptr (TWindow a) -> IO (Ptr (TSizer ()))
+
+-- | usage: (@windowGetTextExtent obj string x y descent externalLeading theFont@).
+windowGetTextExtent :: Window  a -> String -> Ptr CInt -> Ptr CInt -> Ptr CInt -> Ptr CInt -> Font  g ->  IO ()
+windowGetTextExtent _obj string x y descent externalLeading theFont 
+  = withObjectRef "windowGetTextExtent" _obj $ \cobj__obj -> 
+    withStringPtr string $ \cobj_string -> 
+    withObjectPtr theFont $ \cobj_theFont -> 
+    wxWindow_GetTextExtent cobj__obj  cobj_string  x  y  descent  externalLeading  cobj_theFont  
+foreign import ccall "wxWindow_GetTextExtent" wxWindow_GetTextExtent :: Ptr (TWindow a) -> Ptr (TWxString b) -> Ptr CInt -> Ptr CInt -> Ptr CInt -> Ptr CInt -> Ptr (TFont g) -> IO ()
+
+-- | usage: (@windowGetToolTip obj@).
+windowGetToolTip :: Window  a ->  IO (String)
+windowGetToolTip _obj 
+  = withManagedStringResult $
+    withObjectRef "windowGetToolTip" _obj $ \cobj__obj -> 
+    wxWindow_GetToolTip cobj__obj  
+foreign import ccall "wxWindow_GetToolTip" wxWindow_GetToolTip :: Ptr (TWindow a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@windowGetUpdateRegion obj@).
+windowGetUpdateRegion :: Window  a ->  IO (Region  ())
+windowGetUpdateRegion _obj 
+  = withObjectResult $
+    withObjectRef "windowGetUpdateRegion" _obj $ \cobj__obj -> 
+    wxWindow_GetUpdateRegion cobj__obj  
+foreign import ccall "wxWindow_GetUpdateRegion" wxWindow_GetUpdateRegion :: Ptr (TWindow a) -> IO (Ptr (TRegion ()))
+
+-- | usage: (@windowGetValidator obj@).
+windowGetValidator :: Window  a ->  IO (Validator  ())
+windowGetValidator _obj 
+  = withObjectResult $
+    withObjectRef "windowGetValidator" _obj $ \cobj__obj -> 
+    wxWindow_GetValidator cobj__obj  
+foreign import ccall "wxWindow_GetValidator" wxWindow_GetValidator :: Ptr (TWindow a) -> IO (Ptr (TValidator ()))
+
+-- | usage: (@windowGetVirtualSize obj@).
+windowGetVirtualSize :: Window  a ->  IO (Size)
+windowGetVirtualSize _obj 
+  = withWxSizeResult $
+    withObjectRef "windowGetVirtualSize" _obj $ \cobj__obj -> 
+    wxWindow_GetVirtualSize cobj__obj  
+foreign import ccall "wxWindow_GetVirtualSize" wxWindow_GetVirtualSize :: Ptr (TWindow a) -> IO (Ptr (TWxSize ()))
+
+-- | usage: (@windowGetWindowStyleFlag obj@).
+windowGetWindowStyleFlag :: Window  a ->  IO Int
+windowGetWindowStyleFlag _obj 
+  = withIntResult $
+    withObjectRef "windowGetWindowStyleFlag" _obj $ \cobj__obj -> 
+    wxWindow_GetWindowStyleFlag cobj__obj  
+foreign import ccall "wxWindow_GetWindowStyleFlag" wxWindow_GetWindowStyleFlag :: Ptr (TWindow a) -> IO CInt
+
+-- | usage: (@windowHasFlag obj flag@).
+windowHasFlag :: Window  a -> Int ->  IO Bool
+windowHasFlag _obj flag 
+  = withBoolResult $
+    withObjectRef "windowHasFlag" _obj $ \cobj__obj -> 
+    wxWindow_HasFlag cobj__obj  (toCInt flag)  
+foreign import ccall "wxWindow_HasFlag" wxWindow_HasFlag :: Ptr (TWindow a) -> CInt -> IO CBool
+
+-- | usage: (@windowHasFocus obj@).
+windowHasFocus :: Window  a ->  IO Bool
+windowHasFocus _obj 
+  = withBoolResult $
+    withObjectRef "windowHasFocus" _obj $ \cobj__obj -> 
+    wxWindow_HasFocus cobj__obj  
+foreign import ccall "wxWindow_HasFocus" wxWindow_HasFocus :: Ptr (TWindow a) -> IO CBool
+
+-- | usage: (@windowHide obj@).
+windowHide :: Window  a ->  IO Bool
+windowHide _obj 
+  = withBoolResult $
+    withObjectRef "windowHide" _obj $ \cobj__obj -> 
+    wxWindow_Hide cobj__obj  
+foreign import ccall "wxWindow_Hide" wxWindow_Hide :: Ptr (TWindow a) -> IO CBool
+
+-- | usage: (@windowInitDialog obj@).
+windowInitDialog :: Window  a ->  IO ()
+windowInitDialog _obj 
+  = withObjectRef "windowInitDialog" _obj $ \cobj__obj -> 
+    wxWindow_InitDialog cobj__obj  
+foreign import ccall "wxWindow_InitDialog" wxWindow_InitDialog :: Ptr (TWindow a) -> IO ()
+
+-- | usage: (@windowIsBeingDeleted obj@).
+windowIsBeingDeleted :: Window  a ->  IO Bool
+windowIsBeingDeleted _obj 
+  = withBoolResult $
+    withObjectRef "windowIsBeingDeleted" _obj $ \cobj__obj -> 
+    wxWindow_IsBeingDeleted cobj__obj  
+foreign import ccall "wxWindow_IsBeingDeleted" wxWindow_IsBeingDeleted :: Ptr (TWindow a) -> IO CBool
+
+-- | usage: (@windowIsEnabled obj@).
+windowIsEnabled :: Window  a ->  IO Bool
+windowIsEnabled _obj 
+  = withBoolResult $
+    withObjectRef "windowIsEnabled" _obj $ \cobj__obj -> 
+    wxWindow_IsEnabled cobj__obj  
+foreign import ccall "wxWindow_IsEnabled" wxWindow_IsEnabled :: Ptr (TWindow a) -> IO CBool
+
+-- | usage: (@windowIsExposed obj xywh@).
+windowIsExposed :: Window  a -> Rect ->  IO Bool
+windowIsExposed _obj xywh 
+  = withBoolResult $
+    withObjectRef "windowIsExposed" _obj $ \cobj__obj -> 
+    wxWindow_IsExposed cobj__obj  (toCIntRectX xywh) (toCIntRectY xywh)(toCIntRectW xywh) (toCIntRectH xywh)  
+foreign import ccall "wxWindow_IsExposed" wxWindow_IsExposed :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> IO CBool
+
+-- | usage: (@windowIsShown obj@).
+windowIsShown :: Window  a ->  IO Bool
+windowIsShown _obj 
+  = withBoolResult $
+    withObjectRef "windowIsShown" _obj $ \cobj__obj -> 
+    wxWindow_IsShown cobj__obj  
+foreign import ccall "wxWindow_IsShown" wxWindow_IsShown :: Ptr (TWindow a) -> IO CBool
+
+-- | usage: (@windowIsTopLevel obj@).
+windowIsTopLevel :: Window  a ->  IO Bool
+windowIsTopLevel _obj 
+  = withBoolResult $
+    withObjectRef "windowIsTopLevel" _obj $ \cobj__obj -> 
+    wxWindow_IsTopLevel cobj__obj  
+foreign import ccall "wxWindow_IsTopLevel" wxWindow_IsTopLevel :: Ptr (TWindow a) -> IO CBool
+
+-- | usage: (@windowLayout obj@).
+windowLayout :: Window  a ->  IO Int
+windowLayout _obj 
+  = withIntResult $
+    withObjectRef "windowLayout" _obj $ \cobj__obj -> 
+    wxWindow_Layout cobj__obj  
+foreign import ccall "wxWindow_Layout" wxWindow_Layout :: Ptr (TWindow a) -> IO CInt
+
+-- | usage: (@windowLayoutPhase1 obj noChanges@).
+windowLayoutPhase1 :: Window  a -> Ptr CInt ->  IO Int
+windowLayoutPhase1 _obj noChanges 
+  = withIntResult $
+    withObjectRef "windowLayoutPhase1" _obj $ \cobj__obj -> 
+    wxWindow_LayoutPhase1 cobj__obj  noChanges  
+foreign import ccall "wxWindow_LayoutPhase1" wxWindow_LayoutPhase1 :: Ptr (TWindow a) -> Ptr CInt -> IO CInt
+
+-- | usage: (@windowLayoutPhase2 obj noChanges@).
+windowLayoutPhase2 :: Window  a -> Ptr CInt ->  IO Int
+windowLayoutPhase2 _obj noChanges 
+  = withIntResult $
+    withObjectRef "windowLayoutPhase2" _obj $ \cobj__obj -> 
+    wxWindow_LayoutPhase2 cobj__obj  noChanges  
+foreign import ccall "wxWindow_LayoutPhase2" wxWindow_LayoutPhase2 :: Ptr (TWindow a) -> Ptr CInt -> IO CInt
+
+-- | usage: (@windowLower obj@).
+windowLower :: Window  a ->  IO ()
+windowLower _obj 
+  = withObjectRef "windowLower" _obj $ \cobj__obj -> 
+    wxWindow_Lower cobj__obj  
+foreign import ccall "wxWindow_Lower" wxWindow_Lower :: Ptr (TWindow a) -> IO ()
+
+-- | usage: (@windowMove obj xy@).
+windowMove :: Window  a -> Point ->  IO ()
+windowMove _obj xy 
+  = withObjectRef "windowMove" _obj $ \cobj__obj -> 
+    wxWindow_Move cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxWindow_Move" wxWindow_Move :: Ptr (TWindow a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@windowMoveConstraint obj xy@).
+windowMoveConstraint :: Window  a -> Point ->  IO ()
+windowMoveConstraint _obj xy 
+  = withObjectRef "windowMoveConstraint" _obj $ \cobj__obj -> 
+    wxWindow_MoveConstraint cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxWindow_MoveConstraint" wxWindow_MoveConstraint :: Ptr (TWindow a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@windowPopEventHandler obj deleteHandler@).
+windowPopEventHandler :: Window  a -> Bool ->  IO (Ptr  ())
+windowPopEventHandler _obj deleteHandler 
+  = withObjectRef "windowPopEventHandler" _obj $ \cobj__obj -> 
+    wxWindow_PopEventHandler cobj__obj  (toCBool deleteHandler)  
+foreign import ccall "wxWindow_PopEventHandler" wxWindow_PopEventHandler :: Ptr (TWindow a) -> CBool -> IO (Ptr  ())
+
+-- | usage: (@windowPopupMenu obj menu xy@).
+windowPopupMenu :: Window  a -> Menu  b -> Point ->  IO Int
+windowPopupMenu _obj menu xy 
+  = withIntResult $
+    withObjectRef "windowPopupMenu" _obj $ \cobj__obj -> 
+    withObjectPtr menu $ \cobj_menu -> 
+    wxWindow_PopupMenu cobj__obj  cobj_menu  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxWindow_PopupMenu" wxWindow_PopupMenu :: Ptr (TWindow a) -> Ptr (TMenu b) -> CInt -> CInt -> IO CInt
+
+-- | usage: (@windowPrepareDC obj dc@).
+windowPrepareDC :: Window  a -> DC  b ->  IO ()
+windowPrepareDC _obj dc 
+  = withObjectRef "windowPrepareDC" _obj $ \cobj__obj -> 
+    withObjectPtr dc $ \cobj_dc -> 
+    wxWindow_PrepareDC cobj__obj  cobj_dc  
+foreign import ccall "wxWindow_PrepareDC" wxWindow_PrepareDC :: Ptr (TWindow a) -> Ptr (TDC b) -> IO ()
+
+-- | usage: (@windowPushEventHandler obj handler@).
+windowPushEventHandler :: Window  a -> EvtHandler  b ->  IO ()
+windowPushEventHandler _obj handler 
+  = withObjectRef "windowPushEventHandler" _obj $ \cobj__obj -> 
+    withObjectPtr handler $ \cobj_handler -> 
+    wxWindow_PushEventHandler cobj__obj  cobj_handler  
+foreign import ccall "wxWindow_PushEventHandler" wxWindow_PushEventHandler :: Ptr (TWindow a) -> Ptr (TEvtHandler b) -> IO ()
+
+-- | usage: (@windowRaise obj@).
+windowRaise :: Window  a ->  IO ()
+windowRaise _obj 
+  = withObjectRef "windowRaise" _obj $ \cobj__obj -> 
+    wxWindow_Raise cobj__obj  
+foreign import ccall "wxWindow_Raise" wxWindow_Raise :: Ptr (TWindow a) -> IO ()
+
+-- | usage: (@windowRefresh obj eraseBackground@).
+windowRefresh :: Window  a -> Bool ->  IO ()
+windowRefresh _obj eraseBackground 
+  = withObjectRef "windowRefresh" _obj $ \cobj__obj -> 
+    wxWindow_Refresh cobj__obj  (toCBool eraseBackground)  
+foreign import ccall "wxWindow_Refresh" wxWindow_Refresh :: Ptr (TWindow a) -> CBool -> IO ()
+
+-- | usage: (@windowRefreshRect obj eraseBackground xywh@).
+windowRefreshRect :: Window  a -> Bool -> Rect ->  IO ()
+windowRefreshRect _obj eraseBackground xywh 
+  = withObjectRef "windowRefreshRect" _obj $ \cobj__obj -> 
+    wxWindow_RefreshRect cobj__obj  (toCBool eraseBackground)  (toCIntRectX xywh) (toCIntRectY xywh)(toCIntRectW xywh) (toCIntRectH xywh)  
+foreign import ccall "wxWindow_RefreshRect" wxWindow_RefreshRect :: Ptr (TWindow a) -> CBool -> CInt -> CInt -> CInt -> CInt -> IO ()
+
+-- | usage: (@windowReleaseMouse obj@).
+windowReleaseMouse :: Window  a ->  IO ()
+windowReleaseMouse _obj 
+  = withObjectRef "windowReleaseMouse" _obj $ \cobj__obj -> 
+    wxWindow_ReleaseMouse cobj__obj  
+foreign import ccall "wxWindow_ReleaseMouse" wxWindow_ReleaseMouse :: Ptr (TWindow a) -> IO ()
+
+-- | usage: (@windowRemoveChild obj child@).
+windowRemoveChild :: Window  a -> Window  b ->  IO ()
+windowRemoveChild _obj child 
+  = withObjectRef "windowRemoveChild" _obj $ \cobj__obj -> 
+    withObjectPtr child $ \cobj_child -> 
+    wxWindow_RemoveChild cobj__obj  cobj_child  
+foreign import ccall "wxWindow_RemoveChild" wxWindow_RemoveChild :: Ptr (TWindow a) -> Ptr (TWindow b) -> IO ()
+
+-- | usage: (@windowRemoveConstraintReference obj otherWin@).
+windowRemoveConstraintReference :: Window  a -> Window  b ->  IO ()
+windowRemoveConstraintReference _obj otherWin 
+  = withObjectRef "windowRemoveConstraintReference" _obj $ \cobj__obj -> 
+    withObjectPtr otherWin $ \cobj_otherWin -> 
+    wxWindow_RemoveConstraintReference cobj__obj  cobj_otherWin  
+foreign import ccall "wxWindow_RemoveConstraintReference" wxWindow_RemoveConstraintReference :: Ptr (TWindow a) -> Ptr (TWindow b) -> IO ()
+
+-- | usage: (@windowReparent obj par@).
+windowReparent :: Window  a -> Window  b ->  IO Int
+windowReparent _obj _par 
+  = withIntResult $
+    withObjectRef "windowReparent" _obj $ \cobj__obj -> 
+    withObjectPtr _par $ \cobj__par -> 
+    wxWindow_Reparent cobj__obj  cobj__par  
+foreign import ccall "wxWindow_Reparent" wxWindow_Reparent :: Ptr (TWindow a) -> Ptr (TWindow b) -> IO CInt
+
+-- | usage: (@windowResetConstraints obj@).
+windowResetConstraints :: Window  a ->  IO ()
+windowResetConstraints _obj 
+  = withObjectRef "windowResetConstraints" _obj $ \cobj__obj -> 
+    wxWindow_ResetConstraints cobj__obj  
+foreign import ccall "wxWindow_ResetConstraints" wxWindow_ResetConstraints :: Ptr (TWindow a) -> IO ()
+
+-- | usage: (@windowScreenToClient obj xy@).
+windowScreenToClient :: Window  a -> Point ->  IO (Point)
+windowScreenToClient _obj xy 
+  = withWxPointResult $
+    withObjectRef "windowScreenToClient" _obj $ \cobj__obj -> 
+    wxWindow_ScreenToClient cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxWindow_ScreenToClient" wxWindow_ScreenToClient :: Ptr (TWindow a) -> CInt -> CInt -> IO (Ptr (TWxPoint ()))
+
+-- | usage: (@windowScreenToClient2 obj xy@).
+windowScreenToClient2 :: Window  a -> Point ->  IO (Point)
+windowScreenToClient2 _obj xy 
+  = withWxPointResult $
+    withObjectRef "windowScreenToClient2" _obj $ \cobj__obj -> 
+    wxWindow_ScreenToClient2 cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxWindow_ScreenToClient2" wxWindow_ScreenToClient2 :: Ptr (TWindow a) -> CInt -> CInt -> IO (Ptr (TWxPoint ()))
+
+-- | usage: (@windowScrollWindow obj dxdy@).
+windowScrollWindow :: Window  a -> Vector ->  IO ()
+windowScrollWindow _obj dxdy 
+  = withObjectRef "windowScrollWindow" _obj $ \cobj__obj -> 
+    wxWindow_ScrollWindow cobj__obj  (toCIntVectorX dxdy) (toCIntVectorY dxdy)  
+foreign import ccall "wxWindow_ScrollWindow" wxWindow_ScrollWindow :: Ptr (TWindow a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@windowScrollWindowRect obj dxdy xywh@).
+windowScrollWindowRect :: Window  a -> Vector -> Rect ->  IO ()
+windowScrollWindowRect _obj dxdy xywh 
+  = withObjectRef "windowScrollWindowRect" _obj $ \cobj__obj -> 
+    wxWindow_ScrollWindowRect cobj__obj  (toCIntVectorX dxdy) (toCIntVectorY dxdy)  (toCIntRectX xywh) (toCIntRectY xywh)(toCIntRectW xywh) (toCIntRectH xywh)  
+foreign import ccall "wxWindow_ScrollWindowRect" wxWindow_ScrollWindowRect :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO ()
+
+-- | usage: (@windowSetAcceleratorTable obj accel@).
+windowSetAcceleratorTable :: Window  a -> AcceleratorTable  b ->  IO ()
+windowSetAcceleratorTable _obj accel 
+  = withObjectRef "windowSetAcceleratorTable" _obj $ \cobj__obj -> 
+    withObjectPtr accel $ \cobj_accel -> 
+    wxWindow_SetAcceleratorTable cobj__obj  cobj_accel  
+foreign import ccall "wxWindow_SetAcceleratorTable" wxWindow_SetAcceleratorTable :: Ptr (TWindow a) -> Ptr (TAcceleratorTable b) -> IO ()
+
+-- | usage: (@windowSetAutoLayout obj autoLayout@).
+windowSetAutoLayout :: Window  a -> Bool ->  IO ()
+windowSetAutoLayout _obj autoLayout 
+  = withObjectRef "windowSetAutoLayout" _obj $ \cobj__obj -> 
+    wxWindow_SetAutoLayout cobj__obj  (toCBool autoLayout)  
+foreign import ccall "wxWindow_SetAutoLayout" wxWindow_SetAutoLayout :: Ptr (TWindow a) -> CBool -> IO ()
+
+-- | usage: (@windowSetBackgroundColour obj colour@).
+windowSetBackgroundColour :: Window  a -> Color ->  IO Int
+windowSetBackgroundColour _obj colour 
+  = withIntResult $
+    withObjectRef "windowSetBackgroundColour" _obj $ \cobj__obj -> 
+    withColourPtr colour $ \cobj_colour -> 
+    wxWindow_SetBackgroundColour cobj__obj  cobj_colour  
+foreign import ccall "wxWindow_SetBackgroundColour" wxWindow_SetBackgroundColour :: Ptr (TWindow a) -> Ptr (TColour b) -> IO CInt
+
+-- | usage: (@windowSetCaret obj caret@).
+windowSetCaret :: Window  a -> Caret  b ->  IO ()
+windowSetCaret _obj caret 
+  = withObjectRef "windowSetCaret" _obj $ \cobj__obj -> 
+    withObjectPtr caret $ \cobj_caret -> 
+    wxWindow_SetCaret cobj__obj  cobj_caret  
+foreign import ccall "wxWindow_SetCaret" wxWindow_SetCaret :: Ptr (TWindow a) -> Ptr (TCaret b) -> IO ()
+
+-- | usage: (@windowSetClientData obj wxdata@).
+windowSetClientData :: Window  a -> ClientData  b ->  IO ()
+windowSetClientData _obj wxdata 
+  = withObjectRef "windowSetClientData" _obj $ \cobj__obj -> 
+    withObjectPtr wxdata $ \cobj_wxdata -> 
+    wxWindow_SetClientData cobj__obj  cobj_wxdata  
+foreign import ccall "wxWindow_SetClientData" wxWindow_SetClientData :: Ptr (TWindow a) -> Ptr (TClientData b) -> IO ()
+
+-- | usage: (@windowSetClientObject obj wxdata@).
+windowSetClientObject :: Window  a -> ClientData  b ->  IO ()
+windowSetClientObject _obj wxdata 
+  = withObjectRef "windowSetClientObject" _obj $ \cobj__obj -> 
+    withObjectPtr wxdata $ \cobj_wxdata -> 
+    wxWindow_SetClientObject cobj__obj  cobj_wxdata  
+foreign import ccall "wxWindow_SetClientObject" wxWindow_SetClientObject :: Ptr (TWindow a) -> Ptr (TClientData b) -> IO ()
+
+-- | usage: (@windowSetClientSize obj widthheight@).
+windowSetClientSize :: Window  a -> Size ->  IO ()
+windowSetClientSize _obj widthheight 
+  = withObjectRef "windowSetClientSize" _obj $ \cobj__obj -> 
+    wxWindow_SetClientSize cobj__obj  (toCIntSizeW widthheight) (toCIntSizeH widthheight)  
+foreign import ccall "wxWindow_SetClientSize" wxWindow_SetClientSize :: Ptr (TWindow a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@windowSetConstraintSizes obj recurse@).
+windowSetConstraintSizes :: Window  a -> Int ->  IO ()
+windowSetConstraintSizes _obj recurse 
+  = withObjectRef "windowSetConstraintSizes" _obj $ \cobj__obj -> 
+    wxWindow_SetConstraintSizes cobj__obj  (toCInt recurse)  
+foreign import ccall "wxWindow_SetConstraintSizes" wxWindow_SetConstraintSizes :: Ptr (TWindow a) -> CInt -> IO ()
+
+-- | usage: (@windowSetConstraints obj constraints@).
+windowSetConstraints :: Window  a -> LayoutConstraints  b ->  IO ()
+windowSetConstraints _obj constraints 
+  = withObjectRef "windowSetConstraints" _obj $ \cobj__obj -> 
+    withObjectPtr constraints $ \cobj_constraints -> 
+    wxWindow_SetConstraints cobj__obj  cobj_constraints  
+foreign import ccall "wxWindow_SetConstraints" wxWindow_SetConstraints :: Ptr (TWindow a) -> Ptr (TLayoutConstraints b) -> IO ()
+
+-- | usage: (@windowSetCursor obj cursor@).
+windowSetCursor :: Window  a -> Cursor  b ->  IO Int
+windowSetCursor _obj cursor 
+  = withIntResult $
+    withObjectRef "windowSetCursor" _obj $ \cobj__obj -> 
+    withObjectPtr cursor $ \cobj_cursor -> 
+    wxWindow_SetCursor cobj__obj  cobj_cursor  
+foreign import ccall "wxWindow_SetCursor" wxWindow_SetCursor :: Ptr (TWindow a) -> Ptr (TCursor b) -> IO CInt
+
+-- | usage: (@windowSetDropTarget obj dropTarget@).
+windowSetDropTarget :: Window  a -> DropTarget  b ->  IO ()
+windowSetDropTarget _obj dropTarget 
+  = withObjectRef "windowSetDropTarget" _obj $ \cobj__obj -> 
+    withObjectPtr dropTarget $ \cobj_dropTarget -> 
+    wxWindow_SetDropTarget cobj__obj  cobj_dropTarget  
+foreign import ccall "wxWindow_SetDropTarget" wxWindow_SetDropTarget :: Ptr (TWindow a) -> Ptr (TDropTarget b) -> IO ()
+
+-- | usage: (@windowSetExtraStyle obj exStyle@).
+windowSetExtraStyle :: Window  a -> Int ->  IO ()
+windowSetExtraStyle _obj exStyle 
+  = withObjectRef "windowSetExtraStyle" _obj $ \cobj__obj -> 
+    wxWindow_SetExtraStyle cobj__obj  (toCInt exStyle)  
+foreign import ccall "wxWindow_SetExtraStyle" wxWindow_SetExtraStyle :: Ptr (TWindow a) -> CInt -> IO ()
+
+-- | usage: (@windowSetFocus obj@).
+windowSetFocus :: Window  a ->  IO ()
+windowSetFocus _obj 
+  = withObjectRef "windowSetFocus" _obj $ \cobj__obj -> 
+    wxWindow_SetFocus cobj__obj  
+foreign import ccall "wxWindow_SetFocus" wxWindow_SetFocus :: Ptr (TWindow a) -> IO ()
+
+-- | usage: (@windowSetFont obj font@).
+windowSetFont :: Window  a -> Font  b ->  IO Int
+windowSetFont _obj font 
+  = withIntResult $
+    withObjectRef "windowSetFont" _obj $ \cobj__obj -> 
+    withObjectPtr font $ \cobj_font -> 
+    wxWindow_SetFont cobj__obj  cobj_font  
+foreign import ccall "wxWindow_SetFont" wxWindow_SetFont :: Ptr (TWindow a) -> Ptr (TFont b) -> IO CInt
+
+-- | usage: (@windowSetForegroundColour obj colour@).
+windowSetForegroundColour :: Window  a -> Color ->  IO Int
+windowSetForegroundColour _obj colour 
+  = withIntResult $
+    withObjectRef "windowSetForegroundColour" _obj $ \cobj__obj -> 
+    withColourPtr colour $ \cobj_colour -> 
+    wxWindow_SetForegroundColour cobj__obj  cobj_colour  
+foreign import ccall "wxWindow_SetForegroundColour" wxWindow_SetForegroundColour :: Ptr (TWindow a) -> Ptr (TColour b) -> IO CInt
+
+-- | usage: (@windowSetId obj id@).
+windowSetId :: Window  a -> Id ->  IO ()
+windowSetId _obj _id 
+  = withObjectRef "windowSetId" _obj $ \cobj__obj -> 
+    wxWindow_SetId cobj__obj  (toCInt _id)  
+foreign import ccall "wxWindow_SetId" wxWindow_SetId :: Ptr (TWindow a) -> CInt -> IO ()
+
+-- | usage: (@windowSetLabel obj title@).
+windowSetLabel :: Window  a -> String ->  IO ()
+windowSetLabel _obj _title 
+  = withObjectRef "windowSetLabel" _obj $ \cobj__obj -> 
+    withStringPtr _title $ \cobj__title -> 
+    wxWindow_SetLabel cobj__obj  cobj__title  
+foreign import ccall "wxWindow_SetLabel" wxWindow_SetLabel :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@windowSetName obj name@).
+windowSetName :: Window  a -> String ->  IO ()
+windowSetName _obj _name 
+  = withObjectRef "windowSetName" _obj $ \cobj__obj -> 
+    withStringPtr _name $ \cobj__name -> 
+    wxWindow_SetName cobj__obj  cobj__name  
+foreign import ccall "wxWindow_SetName" wxWindow_SetName :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@windowSetScrollPos obj orient pos refresh@).
+windowSetScrollPos :: Window  a -> Int -> Int -> Bool ->  IO ()
+windowSetScrollPos _obj orient pos refresh 
+  = withObjectRef "windowSetScrollPos" _obj $ \cobj__obj -> 
+    wxWindow_SetScrollPos cobj__obj  (toCInt orient)  (toCInt pos)  (toCBool refresh)  
+foreign import ccall "wxWindow_SetScrollPos" wxWindow_SetScrollPos :: Ptr (TWindow a) -> CInt -> CInt -> CBool -> IO ()
+
+-- | usage: (@windowSetScrollbar obj orient pos thumbVisible range refresh@).
+windowSetScrollbar :: Window  a -> Int -> Int -> Int -> Int -> Bool ->  IO ()
+windowSetScrollbar _obj orient pos thumbVisible range refresh 
+  = withObjectRef "windowSetScrollbar" _obj $ \cobj__obj -> 
+    wxWindow_SetScrollbar cobj__obj  (toCInt orient)  (toCInt pos)  (toCInt thumbVisible)  (toCInt range)  (toCBool refresh)  
+foreign import ccall "wxWindow_SetScrollbar" wxWindow_SetScrollbar :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CBool -> IO ()
+
+-- | usage: (@windowSetSize obj xywidthheight sizeFlags@).
+windowSetSize :: Window  a -> Rect -> Int ->  IO ()
+windowSetSize _obj xywidthheight sizeFlags 
+  = withObjectRef "windowSetSize" _obj $ \cobj__obj -> 
+    wxWindow_SetSize cobj__obj  (toCIntRectX xywidthheight) (toCIntRectY xywidthheight)(toCIntRectW xywidthheight) (toCIntRectH xywidthheight)  (toCInt sizeFlags)  
+foreign import ccall "wxWindow_SetSize" wxWindow_SetSize :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> IO ()
+
+-- | usage: (@windowSetSizeConstraint obj xywh@).
+windowSetSizeConstraint :: Window  a -> Rect ->  IO ()
+windowSetSizeConstraint _obj xywh 
+  = withObjectRef "windowSetSizeConstraint" _obj $ \cobj__obj -> 
+    wxWindow_SetSizeConstraint cobj__obj  (toCIntRectX xywh) (toCIntRectY xywh)(toCIntRectW xywh) (toCIntRectH xywh)  
+foreign import ccall "wxWindow_SetSizeConstraint" wxWindow_SetSizeConstraint :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> IO ()
+
+-- | usage: (@windowSetSizeHints obj minW minH maxW maxH incW incH@).
+windowSetSizeHints :: Window  a -> Int -> Int -> Int -> Int -> Int -> Int ->  IO ()
+windowSetSizeHints _obj minW minH maxW maxH incW incH 
+  = withObjectRef "windowSetSizeHints" _obj $ \cobj__obj -> 
+    wxWindow_SetSizeHints cobj__obj  (toCInt minW)  (toCInt minH)  (toCInt maxW)  (toCInt maxH)  (toCInt incW)  (toCInt incH)  
+foreign import ccall "wxWindow_SetSizeHints" wxWindow_SetSizeHints :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO ()
+
+-- | usage: (@windowSetSizer obj sizer@).
+windowSetSizer :: Window  a -> Sizer  b ->  IO ()
+windowSetSizer _obj sizer 
+  = withObjectRef "windowSetSizer" _obj $ \cobj__obj -> 
+    withObjectPtr sizer $ \cobj_sizer -> 
+    wxWindow_SetSizer cobj__obj  cobj_sizer  
+foreign import ccall "wxWindow_SetSizer" wxWindow_SetSizer :: Ptr (TWindow a) -> Ptr (TSizer b) -> IO ()
+
+-- | usage: (@windowSetToolTip obj tip@).
+windowSetToolTip :: Window  a -> String ->  IO ()
+windowSetToolTip _obj tip 
+  = withObjectRef "windowSetToolTip" _obj $ \cobj__obj -> 
+    withStringPtr tip $ \cobj_tip -> 
+    wxWindow_SetToolTip cobj__obj  cobj_tip  
+foreign import ccall "wxWindow_SetToolTip" wxWindow_SetToolTip :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@windowSetValidator obj validator@).
+windowSetValidator :: Window  a -> Validator  b ->  IO ()
+windowSetValidator _obj validator 
+  = withObjectRef "windowSetValidator" _obj $ \cobj__obj -> 
+    withObjectPtr validator $ \cobj_validator -> 
+    wxWindow_SetValidator cobj__obj  cobj_validator  
+foreign import ccall "wxWindow_SetValidator" wxWindow_SetValidator :: Ptr (TWindow a) -> Ptr (TValidator b) -> IO ()
+
+-- | usage: (@windowSetVirtualSize obj wh@).
+windowSetVirtualSize :: Window  a -> Size ->  IO ()
+windowSetVirtualSize _obj wh 
+  = withObjectRef "windowSetVirtualSize" _obj $ \cobj__obj -> 
+    wxWindow_SetVirtualSize cobj__obj  (toCIntSizeW wh) (toCIntSizeH wh)  
+foreign import ccall "wxWindow_SetVirtualSize" wxWindow_SetVirtualSize :: Ptr (TWindow a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@windowSetWindowStyleFlag obj style@).
+windowSetWindowStyleFlag :: Window  a -> Int ->  IO ()
+windowSetWindowStyleFlag _obj style 
+  = withObjectRef "windowSetWindowStyleFlag" _obj $ \cobj__obj -> 
+    wxWindow_SetWindowStyleFlag cobj__obj  (toCInt style)  
+foreign import ccall "wxWindow_SetWindowStyleFlag" wxWindow_SetWindowStyleFlag :: Ptr (TWindow a) -> CInt -> IO ()
+
+-- | usage: (@windowShow obj@).
+windowShow :: Window  a ->  IO Bool
+windowShow _obj 
+  = withBoolResult $
+    withObjectRef "windowShow" _obj $ \cobj__obj -> 
+    wxWindow_Show cobj__obj  
+foreign import ccall "wxWindow_Show" wxWindow_Show :: Ptr (TWindow a) -> IO CBool
+
+-- | usage: (@windowThaw obj@).
+windowThaw :: Window  a ->  IO ()
+windowThaw _obj 
+  = withObjectRef "windowThaw" _obj $ \cobj__obj -> 
+    wxWindow_Thaw cobj__obj  
+foreign import ccall "wxWindow_Thaw" wxWindow_Thaw :: Ptr (TWindow a) -> IO ()
+
+-- | usage: (@windowTransferDataFromWindow obj@).
+windowTransferDataFromWindow :: Window  a ->  IO Bool
+windowTransferDataFromWindow _obj 
+  = withBoolResult $
+    withObjectRef "windowTransferDataFromWindow" _obj $ \cobj__obj -> 
+    wxWindow_TransferDataFromWindow cobj__obj  
+foreign import ccall "wxWindow_TransferDataFromWindow" wxWindow_TransferDataFromWindow :: Ptr (TWindow a) -> IO CBool
+
+-- | usage: (@windowTransferDataToWindow obj@).
+windowTransferDataToWindow :: Window  a ->  IO Bool
+windowTransferDataToWindow _obj 
+  = withBoolResult $
+    withObjectRef "windowTransferDataToWindow" _obj $ \cobj__obj -> 
+    wxWindow_TransferDataToWindow cobj__obj  
+foreign import ccall "wxWindow_TransferDataToWindow" wxWindow_TransferDataToWindow :: Ptr (TWindow a) -> IO CBool
+
+-- | usage: (@windowUnsetConstraints obj c@).
+windowUnsetConstraints :: Window  a -> Ptr  b ->  IO ()
+windowUnsetConstraints _obj c 
+  = withObjectRef "windowUnsetConstraints" _obj $ \cobj__obj -> 
+    wxWindow_UnsetConstraints cobj__obj  c  
+foreign import ccall "wxWindow_UnsetConstraints" wxWindow_UnsetConstraints :: Ptr (TWindow a) -> Ptr  b -> IO ()
+
+-- | usage: (@windowUpdateWindowUI obj@).
+windowUpdateWindowUI :: Window  a ->  IO ()
+windowUpdateWindowUI _obj 
+  = withObjectRef "windowUpdateWindowUI" _obj $ \cobj__obj -> 
+    wxWindow_UpdateWindowUI cobj__obj  
+foreign import ccall "wxWindow_UpdateWindowUI" wxWindow_UpdateWindowUI :: Ptr (TWindow a) -> IO ()
+
+-- | usage: (@windowValidate obj@).
+windowValidate :: Window  a ->  IO Bool
+windowValidate _obj 
+  = withBoolResult $
+    withObjectRef "windowValidate" _obj $ \cobj__obj -> 
+    wxWindow_Validate cobj__obj  
+foreign import ccall "wxWindow_Validate" wxWindow_Validate :: Ptr (TWindow a) -> IO CBool
+
+-- | usage: (@windowWarpPointer obj xy@).
+windowWarpPointer :: Window  a -> Point ->  IO ()
+windowWarpPointer _obj xy 
+  = withObjectRef "windowWarpPointer" _obj $ \cobj__obj -> 
+    wxWindow_WarpPointer cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxWindow_WarpPointer" wxWindow_WarpPointer :: Ptr (TWindow a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@wizardChain f s@).
+wizardChain :: WizardPageSimple  a -> WizardPageSimple  b ->  IO ()
+wizardChain f s 
+  = withObjectPtr f $ \cobj_f -> 
+    withObjectPtr s $ \cobj_s -> 
+    wxWizard_Chain cobj_f  cobj_s  
+foreign import ccall "wxWizard_Chain" wxWizard_Chain :: Ptr (TWizardPageSimple a) -> Ptr (TWizardPageSimple b) -> IO ()
+
+-- | usage: (@wizardCreate prt id txt bmp lfttopwdthgt@).
+wizardCreate :: Window  a -> Id -> String -> Bitmap  d -> Rect ->  IO (Wizard  ())
+wizardCreate _prt _id _txt _bmp _lfttopwdthgt 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    withStringPtr _txt $ \cobj__txt -> 
+    withObjectPtr _bmp $ \cobj__bmp -> 
+    wxWizard_Create cobj__prt  (toCInt _id)  cobj__txt  cobj__bmp  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  
+foreign import ccall "wxWizard_Create" wxWizard_Create :: Ptr (TWindow a) -> CInt -> Ptr (TWxString c) -> Ptr (TBitmap d) -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TWizard ()))
+
+-- | usage: (@wizardEventGetDirection obj@).
+wizardEventGetDirection :: WizardEvent  a ->  IO Int
+wizardEventGetDirection _obj 
+  = withIntResult $
+    withObjectRef "wizardEventGetDirection" _obj $ \cobj__obj -> 
+    wxWizardEvent_GetDirection cobj__obj  
+foreign import ccall "wxWizardEvent_GetDirection" wxWizardEvent_GetDirection :: Ptr (TWizardEvent a) -> IO CInt
+
+-- | usage: (@wizardGetCurrentPage obj@).
+wizardGetCurrentPage :: Wizard  a ->  IO (WizardPage  ())
+wizardGetCurrentPage _obj 
+  = withObjectResult $
+    withObjectRef "wizardGetCurrentPage" _obj $ \cobj__obj -> 
+    wxWizard_GetCurrentPage cobj__obj  
+foreign import ccall "wxWizard_GetCurrentPage" wxWizard_GetCurrentPage :: Ptr (TWizard a) -> IO (Ptr (TWizardPage ()))
+
+-- | usage: (@wizardGetPageSize obj@).
+wizardGetPageSize :: Wizard  a ->  IO (Size)
+wizardGetPageSize _obj 
+  = withWxSizeResult $
+    withObjectRef "wizardGetPageSize" _obj $ \cobj__obj -> 
+    wxWizard_GetPageSize cobj__obj  
+foreign import ccall "wxWizard_GetPageSize" wxWizard_GetPageSize :: Ptr (TWizard a) -> IO (Ptr (TWxSize ()))
+
+-- | usage: (@wizardPageSimpleCreate prt@).
+wizardPageSimpleCreate :: Wizard  a ->  IO (WizardPageSimple  ())
+wizardPageSimpleCreate _prt 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    wxWizardPageSimple_Create cobj__prt  
+foreign import ccall "wxWizardPageSimple_Create" wxWizardPageSimple_Create :: Ptr (TWizard a) -> IO (Ptr (TWizardPageSimple ()))
+
+-- | usage: (@wizardPageSimpleGetBitmap obj@).
+wizardPageSimpleGetBitmap :: WizardPageSimple  a ->  IO (Bitmap  ())
+wizardPageSimpleGetBitmap _obj 
+  = withRefBitmap $ \pref -> 
+    withObjectRef "wizardPageSimpleGetBitmap" _obj $ \cobj__obj -> 
+    wxWizardPageSimple_GetBitmap cobj__obj   pref
+foreign import ccall "wxWizardPageSimple_GetBitmap" wxWizardPageSimple_GetBitmap :: Ptr (TWizardPageSimple a) -> Ptr (TBitmap ()) -> IO ()
+
+-- | usage: (@wizardPageSimpleGetNext obj@).
+wizardPageSimpleGetNext :: WizardPageSimple  a ->  IO (WizardPageSimple  ())
+wizardPageSimpleGetNext _obj 
+  = withObjectResult $
+    withObjectRef "wizardPageSimpleGetNext" _obj $ \cobj__obj -> 
+    wxWizardPageSimple_GetNext cobj__obj  
+foreign import ccall "wxWizardPageSimple_GetNext" wxWizardPageSimple_GetNext :: Ptr (TWizardPageSimple a) -> IO (Ptr (TWizardPageSimple ()))
+
+-- | usage: (@wizardPageSimpleGetPrev obj@).
+wizardPageSimpleGetPrev :: WizardPageSimple  a ->  IO (WizardPageSimple  ())
+wizardPageSimpleGetPrev _obj 
+  = withObjectResult $
+    withObjectRef "wizardPageSimpleGetPrev" _obj $ \cobj__obj -> 
+    wxWizardPageSimple_GetPrev cobj__obj  
+foreign import ccall "wxWizardPageSimple_GetPrev" wxWizardPageSimple_GetPrev :: Ptr (TWizardPageSimple a) -> IO (Ptr (TWizardPageSimple ()))
+
+-- | usage: (@wizardPageSimpleSetNext obj next@).
+wizardPageSimpleSetNext :: WizardPageSimple  a -> WizardPageSimple  b ->  IO ()
+wizardPageSimpleSetNext _obj next 
+  = withObjectRef "wizardPageSimpleSetNext" _obj $ \cobj__obj -> 
+    withObjectPtr next $ \cobj_next -> 
+    wxWizardPageSimple_SetNext cobj__obj  cobj_next  
+foreign import ccall "wxWizardPageSimple_SetNext" wxWizardPageSimple_SetNext :: Ptr (TWizardPageSimple a) -> Ptr (TWizardPageSimple b) -> IO ()
+
+-- | usage: (@wizardPageSimpleSetPrev obj prev@).
+wizardPageSimpleSetPrev :: WizardPageSimple  a -> WizardPageSimple  b ->  IO ()
+wizardPageSimpleSetPrev _obj prev 
+  = withObjectRef "wizardPageSimpleSetPrev" _obj $ \cobj__obj -> 
+    withObjectPtr prev $ \cobj_prev -> 
+    wxWizardPageSimple_SetPrev cobj__obj  cobj_prev  
+foreign import ccall "wxWizardPageSimple_SetPrev" wxWizardPageSimple_SetPrev :: Ptr (TWizardPageSimple a) -> Ptr (TWizardPageSimple b) -> IO ()
+
+-- | usage: (@wizardRunWizard obj firstPage@).
+wizardRunWizard :: Wizard  a -> WizardPage  b ->  IO Int
+wizardRunWizard _obj firstPage 
+  = withIntResult $
+    withObjectRef "wizardRunWizard" _obj $ \cobj__obj -> 
+    withObjectPtr firstPage $ \cobj_firstPage -> 
+    wxWizard_RunWizard cobj__obj  cobj_firstPage  
+foreign import ccall "wxWizard_RunWizard" wxWizard_RunWizard :: Ptr (TWizard a) -> Ptr (TWizardPage b) -> IO CInt
+
+-- | usage: (@wizardSetPageSize obj wh@).
+wizardSetPageSize :: Wizard  a -> Size ->  IO ()
+wizardSetPageSize _obj wh 
+  = withObjectRef "wizardSetPageSize" _obj $ \cobj__obj -> 
+    wxWizard_SetPageSize cobj__obj  (toCIntSizeW wh) (toCIntSizeH wh)  
+foreign import ccall "wxWizard_SetPageSize" wxWizard_SetPageSize :: Ptr (TWizard a) -> CInt -> CInt -> IO ()
+
+-- | usage: (@wxBK_HITTEST_NOWHERE@).
+{-# NOINLINE wxBK_HITTEST_NOWHERE #-}
+wxBK_HITTEST_NOWHERE ::  Int
+wxBK_HITTEST_NOWHERE 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expBK_HITTEST_NOWHERE 
+foreign import ccall "expBK_HITTEST_NOWHERE" wx_expBK_HITTEST_NOWHERE :: IO CInt
+
+-- | usage: (@wxBK_HITTEST_ONICON@).
+{-# NOINLINE wxBK_HITTEST_ONICON #-}
+wxBK_HITTEST_ONICON ::  Int
+wxBK_HITTEST_ONICON 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expBK_HITTEST_ONICON 
+foreign import ccall "expBK_HITTEST_ONICON" wx_expBK_HITTEST_ONICON :: IO CInt
+
+-- | usage: (@wxBK_HITTEST_ONITEM@).
+{-# NOINLINE wxBK_HITTEST_ONITEM #-}
+wxBK_HITTEST_ONITEM ::  Int
+wxBK_HITTEST_ONITEM 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expBK_HITTEST_ONITEM 
+foreign import ccall "expBK_HITTEST_ONITEM" wx_expBK_HITTEST_ONITEM :: IO CInt
+
+-- | usage: (@wxBK_HITTEST_ONLABEL@).
+{-# NOINLINE wxBK_HITTEST_ONLABEL #-}
+wxBK_HITTEST_ONLABEL ::  Int
+wxBK_HITTEST_ONLABEL 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expBK_HITTEST_ONLABEL 
+foreign import ccall "expBK_HITTEST_ONLABEL" wx_expBK_HITTEST_ONLABEL :: IO CInt
+
+-- | usage: (@wxBK_HITTEST_ONPAGE@).
+{-# NOINLINE wxBK_HITTEST_ONPAGE #-}
+wxBK_HITTEST_ONPAGE ::  Int
+wxBK_HITTEST_ONPAGE 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expBK_HITTEST_ONPAGE 
+foreign import ccall "expBK_HITTEST_ONPAGE" wx_expBK_HITTEST_ONPAGE :: IO CInt
+
+-- | usage: (@wxEVT_ACTIVATE@).
+{-# NOINLINE wxEVT_ACTIVATE #-}
+wxEVT_ACTIVATE ::  EventId
+wxEVT_ACTIVATE 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_ACTIVATE 
+foreign import ccall "expEVT_ACTIVATE" wx_expEVT_ACTIVATE :: IO CInt
+
+-- | usage: (@wxEVT_ACTIVATE_APP@).
+{-# NOINLINE wxEVT_ACTIVATE_APP #-}
+wxEVT_ACTIVATE_APP ::  EventId
+wxEVT_ACTIVATE_APP 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_ACTIVATE_APP 
+foreign import ccall "expEVT_ACTIVATE_APP" wx_expEVT_ACTIVATE_APP :: IO CInt
+
+-- | usage: (@wxEVT_AUINOTEBOOK_ALLOW_DND@).
+{-# NOINLINE wxEVT_AUINOTEBOOK_ALLOW_DND #-}
+wxEVT_AUINOTEBOOK_ALLOW_DND ::  EventId
+wxEVT_AUINOTEBOOK_ALLOW_DND 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_AUINOTEBOOK_ALLOW_DND 
+foreign import ccall "expEVT_AUINOTEBOOK_ALLOW_DND" wx_expEVT_AUINOTEBOOK_ALLOW_DND :: IO CInt
+
+-- | usage: (@wxEVT_AUINOTEBOOK_BEGIN_DRAG@).
+{-# NOINLINE wxEVT_AUINOTEBOOK_BEGIN_DRAG #-}
+wxEVT_AUINOTEBOOK_BEGIN_DRAG ::  EventId
+wxEVT_AUINOTEBOOK_BEGIN_DRAG 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_AUINOTEBOOK_BEGIN_DRAG 
+foreign import ccall "expEVT_AUINOTEBOOK_BEGIN_DRAG" wx_expEVT_AUINOTEBOOK_BEGIN_DRAG :: IO CInt
+
+-- | usage: (@wxEVT_AUINOTEBOOK_BG_DCLICK@).
+{-# NOINLINE wxEVT_AUINOTEBOOK_BG_DCLICK #-}
+wxEVT_AUINOTEBOOK_BG_DCLICK ::  EventId
+wxEVT_AUINOTEBOOK_BG_DCLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_AUINOTEBOOK_BG_DCLICK 
+foreign import ccall "expEVT_AUINOTEBOOK_BG_DCLICK" wx_expEVT_AUINOTEBOOK_BG_DCLICK :: IO CInt
+
+-- | usage: (@wxEVT_AUINOTEBOOK_BUTTON@).
+{-# NOINLINE wxEVT_AUINOTEBOOK_BUTTON #-}
+wxEVT_AUINOTEBOOK_BUTTON ::  EventId
+wxEVT_AUINOTEBOOK_BUTTON 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_AUINOTEBOOK_BUTTON 
+foreign import ccall "expEVT_AUINOTEBOOK_BUTTON" wx_expEVT_AUINOTEBOOK_BUTTON :: IO CInt
+
+-- | usage: (@wxEVT_AUINOTEBOOK_DRAG_DONE@).
+{-# NOINLINE wxEVT_AUINOTEBOOK_DRAG_DONE #-}
+wxEVT_AUINOTEBOOK_DRAG_DONE ::  EventId
+wxEVT_AUINOTEBOOK_DRAG_DONE 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_AUINOTEBOOK_DRAG_DONE 
+foreign import ccall "expEVT_AUINOTEBOOK_DRAG_DONE" wx_expEVT_AUINOTEBOOK_DRAG_DONE :: IO CInt
+
+-- | usage: (@wxEVT_AUINOTEBOOK_DRAG_MOTION@).
+{-# NOINLINE wxEVT_AUINOTEBOOK_DRAG_MOTION #-}
+wxEVT_AUINOTEBOOK_DRAG_MOTION ::  EventId
+wxEVT_AUINOTEBOOK_DRAG_MOTION 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_AUINOTEBOOK_DRAG_MOTION 
+foreign import ccall "expEVT_AUINOTEBOOK_DRAG_MOTION" wx_expEVT_AUINOTEBOOK_DRAG_MOTION :: IO CInt
+
+-- | usage: (@wxEVT_AUINOTEBOOK_END_DRAG@).
+{-# NOINLINE wxEVT_AUINOTEBOOK_END_DRAG #-}
+wxEVT_AUINOTEBOOK_END_DRAG ::  EventId
+wxEVT_AUINOTEBOOK_END_DRAG 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_AUINOTEBOOK_END_DRAG 
+foreign import ccall "expEVT_AUINOTEBOOK_END_DRAG" wx_expEVT_AUINOTEBOOK_END_DRAG :: IO CInt
+
+-- | usage: (@wxEVT_AUINOTEBOOK_PAGE_CHANGED@).
+{-# NOINLINE wxEVT_AUINOTEBOOK_PAGE_CHANGED #-}
+wxEVT_AUINOTEBOOK_PAGE_CHANGED ::  EventId
+wxEVT_AUINOTEBOOK_PAGE_CHANGED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_AUINOTEBOOK_PAGE_CHANGED 
+foreign import ccall "expEVT_AUINOTEBOOK_PAGE_CHANGED" wx_expEVT_AUINOTEBOOK_PAGE_CHANGED :: IO CInt
+
+-- | usage: (@wxEVT_AUINOTEBOOK_PAGE_CHANGING@).
+{-# NOINLINE wxEVT_AUINOTEBOOK_PAGE_CHANGING #-}
+wxEVT_AUINOTEBOOK_PAGE_CHANGING ::  EventId
+wxEVT_AUINOTEBOOK_PAGE_CHANGING 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_AUINOTEBOOK_PAGE_CHANGING 
+foreign import ccall "expEVT_AUINOTEBOOK_PAGE_CHANGING" wx_expEVT_AUINOTEBOOK_PAGE_CHANGING :: IO CInt
+
+-- | usage: (@wxEVT_AUINOTEBOOK_PAGE_CLOSE@).
+{-# NOINLINE wxEVT_AUINOTEBOOK_PAGE_CLOSE #-}
+wxEVT_AUINOTEBOOK_PAGE_CLOSE ::  EventId
+wxEVT_AUINOTEBOOK_PAGE_CLOSE 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_AUINOTEBOOK_PAGE_CLOSE 
+foreign import ccall "expEVT_AUINOTEBOOK_PAGE_CLOSE" wx_expEVT_AUINOTEBOOK_PAGE_CLOSE :: IO CInt
+
+-- | usage: (@wxEVT_AUINOTEBOOK_PAGE_CLOSED@).
+{-# NOINLINE wxEVT_AUINOTEBOOK_PAGE_CLOSED #-}
+wxEVT_AUINOTEBOOK_PAGE_CLOSED ::  EventId
+wxEVT_AUINOTEBOOK_PAGE_CLOSED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_AUINOTEBOOK_PAGE_CLOSED 
+foreign import ccall "expEVT_AUINOTEBOOK_PAGE_CLOSED" wx_expEVT_AUINOTEBOOK_PAGE_CLOSED :: IO CInt
+
+-- | usage: (@wxEVT_AUINOTEBOOK_TAB_MIDDLE_DOWN@).
+{-# NOINLINE wxEVT_AUINOTEBOOK_TAB_MIDDLE_DOWN #-}
+wxEVT_AUINOTEBOOK_TAB_MIDDLE_DOWN ::  EventId
+wxEVT_AUINOTEBOOK_TAB_MIDDLE_DOWN 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_AUINOTEBOOK_TAB_MIDDLE_DOWN 
+foreign import ccall "expEVT_AUINOTEBOOK_TAB_MIDDLE_DOWN" wx_expEVT_AUINOTEBOOK_TAB_MIDDLE_DOWN :: IO CInt
+
+-- | usage: (@wxEVT_AUINOTEBOOK_TAB_MIDDLE_UP@).
+{-# NOINLINE wxEVT_AUINOTEBOOK_TAB_MIDDLE_UP #-}
+wxEVT_AUINOTEBOOK_TAB_MIDDLE_UP ::  EventId
+wxEVT_AUINOTEBOOK_TAB_MIDDLE_UP 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_AUINOTEBOOK_TAB_MIDDLE_UP 
+foreign import ccall "expEVT_AUINOTEBOOK_TAB_MIDDLE_UP" wx_expEVT_AUINOTEBOOK_TAB_MIDDLE_UP :: IO CInt
+
+-- | usage: (@wxEVT_AUINOTEBOOK_TAB_RIGHT_DOWN@).
+{-# NOINLINE wxEVT_AUINOTEBOOK_TAB_RIGHT_DOWN #-}
+wxEVT_AUINOTEBOOK_TAB_RIGHT_DOWN ::  EventId
+wxEVT_AUINOTEBOOK_TAB_RIGHT_DOWN 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_AUINOTEBOOK_TAB_RIGHT_DOWN 
+foreign import ccall "expEVT_AUINOTEBOOK_TAB_RIGHT_DOWN" wx_expEVT_AUINOTEBOOK_TAB_RIGHT_DOWN :: IO CInt
+
+-- | usage: (@wxEVT_AUINOTEBOOK_TAB_RIGHT_UP@).
+{-# NOINLINE wxEVT_AUINOTEBOOK_TAB_RIGHT_UP #-}
+wxEVT_AUINOTEBOOK_TAB_RIGHT_UP ::  EventId
+wxEVT_AUINOTEBOOK_TAB_RIGHT_UP 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_AUINOTEBOOK_TAB_RIGHT_UP 
+foreign import ccall "expEVT_AUINOTEBOOK_TAB_RIGHT_UP" wx_expEVT_AUINOTEBOOK_TAB_RIGHT_UP :: IO CInt
+
+-- | usage: (@wxEVT_AUITOOLBAR_BEGIN_DRAG@).
+{-# NOINLINE wxEVT_AUITOOLBAR_BEGIN_DRAG #-}
+wxEVT_AUITOOLBAR_BEGIN_DRAG ::  EventId
+wxEVT_AUITOOLBAR_BEGIN_DRAG 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_AUITOOLBAR_BEGIN_DRAG 
+foreign import ccall "expEVT_AUITOOLBAR_BEGIN_DRAG" wx_expEVT_AUITOOLBAR_BEGIN_DRAG :: IO CInt
+
+-- | usage: (@wxEVT_AUITOOLBAR_MIDDLE_CLICK@).
+{-# NOINLINE wxEVT_AUITOOLBAR_MIDDLE_CLICK #-}
+wxEVT_AUITOOLBAR_MIDDLE_CLICK ::  EventId
+wxEVT_AUITOOLBAR_MIDDLE_CLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_AUITOOLBAR_MIDDLE_CLICK 
+foreign import ccall "expEVT_AUITOOLBAR_MIDDLE_CLICK" wx_expEVT_AUITOOLBAR_MIDDLE_CLICK :: IO CInt
+
+-- | usage: (@wxEVT_AUITOOLBAR_OVERFLOW_CLICK@).
+{-# NOINLINE wxEVT_AUITOOLBAR_OVERFLOW_CLICK #-}
+wxEVT_AUITOOLBAR_OVERFLOW_CLICK ::  EventId
+wxEVT_AUITOOLBAR_OVERFLOW_CLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_AUITOOLBAR_OVERFLOW_CLICK 
+foreign import ccall "expEVT_AUITOOLBAR_OVERFLOW_CLICK" wx_expEVT_AUITOOLBAR_OVERFLOW_CLICK :: IO CInt
+
+-- | usage: (@wxEVT_AUITOOLBAR_RIGHT_CLICK@).
+{-# NOINLINE wxEVT_AUITOOLBAR_RIGHT_CLICK #-}
+wxEVT_AUITOOLBAR_RIGHT_CLICK ::  EventId
+wxEVT_AUITOOLBAR_RIGHT_CLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_AUITOOLBAR_RIGHT_CLICK 
+foreign import ccall "expEVT_AUITOOLBAR_RIGHT_CLICK" wx_expEVT_AUITOOLBAR_RIGHT_CLICK :: IO CInt
+
+-- | usage: (@wxEVT_AUITOOLBAR_TOOL_DROPDOWN@).
+{-# NOINLINE wxEVT_AUITOOLBAR_TOOL_DROPDOWN #-}
+wxEVT_AUITOOLBAR_TOOL_DROPDOWN ::  EventId
+wxEVT_AUITOOLBAR_TOOL_DROPDOWN 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_AUITOOLBAR_TOOL_DROPDOWN 
+foreign import ccall "expEVT_AUITOOLBAR_TOOL_DROPDOWN" wx_expEVT_AUITOOLBAR_TOOL_DROPDOWN :: IO CInt
+
+-- | usage: (@wxEVT_AUI_FIND_MANAGER@).
+{-# NOINLINE wxEVT_AUI_FIND_MANAGER #-}
+wxEVT_AUI_FIND_MANAGER ::  EventId
+wxEVT_AUI_FIND_MANAGER 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_AUI_FIND_MANAGER 
+foreign import ccall "expEVT_AUI_FIND_MANAGER" wx_expEVT_AUI_FIND_MANAGER :: IO CInt
+
+-- | usage: (@wxEVT_AUI_PANE_BUTTON@).
+{-# NOINLINE wxEVT_AUI_PANE_BUTTON #-}
+wxEVT_AUI_PANE_BUTTON ::  EventId
+wxEVT_AUI_PANE_BUTTON 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_AUI_PANE_BUTTON 
+foreign import ccall "expEVT_AUI_PANE_BUTTON" wx_expEVT_AUI_PANE_BUTTON :: IO CInt
+
+-- | usage: (@wxEVT_AUI_PANE_CLOSE@).
+{-# NOINLINE wxEVT_AUI_PANE_CLOSE #-}
+wxEVT_AUI_PANE_CLOSE ::  EventId
+wxEVT_AUI_PANE_CLOSE 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_AUI_PANE_CLOSE 
+foreign import ccall "expEVT_AUI_PANE_CLOSE" wx_expEVT_AUI_PANE_CLOSE :: IO CInt
+
+-- | usage: (@wxEVT_AUI_PANE_MAXIMIZE@).
+{-# NOINLINE wxEVT_AUI_PANE_MAXIMIZE #-}
+wxEVT_AUI_PANE_MAXIMIZE ::  EventId
+wxEVT_AUI_PANE_MAXIMIZE 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_AUI_PANE_MAXIMIZE 
+foreign import ccall "expEVT_AUI_PANE_MAXIMIZE" wx_expEVT_AUI_PANE_MAXIMIZE :: IO CInt
+
+-- | usage: (@wxEVT_AUI_PANE_RESTORE@).
+{-# NOINLINE wxEVT_AUI_PANE_RESTORE #-}
+wxEVT_AUI_PANE_RESTORE ::  EventId
+wxEVT_AUI_PANE_RESTORE 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_AUI_PANE_RESTORE 
+foreign import ccall "expEVT_AUI_PANE_RESTORE" wx_expEVT_AUI_PANE_RESTORE :: IO CInt
+
+-- | usage: (@wxEVT_AUI_RENDER@).
+{-# NOINLINE wxEVT_AUI_RENDER #-}
+wxEVT_AUI_RENDER ::  EventId
+wxEVT_AUI_RENDER 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_AUI_RENDER 
+foreign import ccall "expEVT_AUI_RENDER" wx_expEVT_AUI_RENDER :: IO CInt
+
+-- | usage: (@wxEVT_AUX1_DCLICK@).
+{-# NOINLINE wxEVT_AUX1_DCLICK #-}
+wxEVT_AUX1_DCLICK ::  EventId
+wxEVT_AUX1_DCLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_AUX1_DCLICK 
+foreign import ccall "expEVT_AUX1_DCLICK" wx_expEVT_AUX1_DCLICK :: IO CInt
+
+-- | usage: (@wxEVT_AUX1_DOWN@).
+{-# NOINLINE wxEVT_AUX1_DOWN #-}
+wxEVT_AUX1_DOWN ::  EventId
+wxEVT_AUX1_DOWN 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_AUX1_DOWN 
+foreign import ccall "expEVT_AUX1_DOWN" wx_expEVT_AUX1_DOWN :: IO CInt
+
+-- | usage: (@wxEVT_AUX1_UP@).
+{-# NOINLINE wxEVT_AUX1_UP #-}
+wxEVT_AUX1_UP ::  EventId
+wxEVT_AUX1_UP 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_AUX1_UP 
+foreign import ccall "expEVT_AUX1_UP" wx_expEVT_AUX1_UP :: IO CInt
+
+-- | usage: (@wxEVT_AUX2_DCLICK@).
+{-# NOINLINE wxEVT_AUX2_DCLICK #-}
+wxEVT_AUX2_DCLICK ::  EventId
+wxEVT_AUX2_DCLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_AUX2_DCLICK 
+foreign import ccall "expEVT_AUX2_DCLICK" wx_expEVT_AUX2_DCLICK :: IO CInt
+
+-- | usage: (@wxEVT_AUX2_DOWN@).
+{-# NOINLINE wxEVT_AUX2_DOWN #-}
+wxEVT_AUX2_DOWN ::  EventId
+wxEVT_AUX2_DOWN 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_AUX2_DOWN 
+foreign import ccall "expEVT_AUX2_DOWN" wx_expEVT_AUX2_DOWN :: IO CInt
+
+-- | usage: (@wxEVT_AUX2_UP@).
+{-# NOINLINE wxEVT_AUX2_UP #-}
+wxEVT_AUX2_UP ::  EventId
+wxEVT_AUX2_UP 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_AUX2_UP 
+foreign import ccall "expEVT_AUX2_UP" wx_expEVT_AUX2_UP :: IO CInt
+
+-- | usage: (@wxEVT_CALCULATE_LAYOUT@).
+{-# NOINLINE wxEVT_CALCULATE_LAYOUT #-}
+wxEVT_CALCULATE_LAYOUT ::  EventId
+wxEVT_CALCULATE_LAYOUT 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_CALCULATE_LAYOUT 
+foreign import ccall "expEVT_CALCULATE_LAYOUT" wx_expEVT_CALCULATE_LAYOUT :: IO CInt
+
+-- | usage: (@wxEVT_CALENDAR_DAY_CHANGED@).
+{-# NOINLINE wxEVT_CALENDAR_DAY_CHANGED #-}
+wxEVT_CALENDAR_DAY_CHANGED ::  EventId
+wxEVT_CALENDAR_DAY_CHANGED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_CALENDAR_DAY_CHANGED 
+foreign import ccall "expEVT_CALENDAR_DAY_CHANGED" wx_expEVT_CALENDAR_DAY_CHANGED :: IO CInt
+
+-- | usage: (@wxEVT_CALENDAR_DOUBLECLICKED@).
+{-# NOINLINE wxEVT_CALENDAR_DOUBLECLICKED #-}
+wxEVT_CALENDAR_DOUBLECLICKED ::  EventId
+wxEVT_CALENDAR_DOUBLECLICKED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_CALENDAR_DOUBLECLICKED 
+foreign import ccall "expEVT_CALENDAR_DOUBLECLICKED" wx_expEVT_CALENDAR_DOUBLECLICKED :: IO CInt
+
+-- | usage: (@wxEVT_CALENDAR_MONTH_CHANGED@).
+{-# NOINLINE wxEVT_CALENDAR_MONTH_CHANGED #-}
+wxEVT_CALENDAR_MONTH_CHANGED ::  EventId
+wxEVT_CALENDAR_MONTH_CHANGED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_CALENDAR_MONTH_CHANGED 
+foreign import ccall "expEVT_CALENDAR_MONTH_CHANGED" wx_expEVT_CALENDAR_MONTH_CHANGED :: IO CInt
+
+-- | usage: (@wxEVT_CALENDAR_PAGE_CHANGED@).
+{-# NOINLINE wxEVT_CALENDAR_PAGE_CHANGED #-}
+wxEVT_CALENDAR_PAGE_CHANGED ::  EventId
+wxEVT_CALENDAR_PAGE_CHANGED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_CALENDAR_PAGE_CHANGED 
+foreign import ccall "expEVT_CALENDAR_PAGE_CHANGED" wx_expEVT_CALENDAR_PAGE_CHANGED :: IO CInt
+
+-- | usage: (@wxEVT_CALENDAR_SEL_CHANGED@).
+{-# NOINLINE wxEVT_CALENDAR_SEL_CHANGED #-}
+wxEVT_CALENDAR_SEL_CHANGED ::  EventId
+wxEVT_CALENDAR_SEL_CHANGED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_CALENDAR_SEL_CHANGED 
+foreign import ccall "expEVT_CALENDAR_SEL_CHANGED" wx_expEVT_CALENDAR_SEL_CHANGED :: IO CInt
+
+-- | usage: (@wxEVT_CALENDAR_WEEKDAY_CLICKED@).
+{-# NOINLINE wxEVT_CALENDAR_WEEKDAY_CLICKED #-}
+wxEVT_CALENDAR_WEEKDAY_CLICKED ::  EventId
+wxEVT_CALENDAR_WEEKDAY_CLICKED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_CALENDAR_WEEKDAY_CLICKED 
+foreign import ccall "expEVT_CALENDAR_WEEKDAY_CLICKED" wx_expEVT_CALENDAR_WEEKDAY_CLICKED :: IO CInt
+
+-- | usage: (@wxEVT_CALENDAR_WEEK_CLICKED@).
+{-# NOINLINE wxEVT_CALENDAR_WEEK_CLICKED #-}
+wxEVT_CALENDAR_WEEK_CLICKED ::  EventId
+wxEVT_CALENDAR_WEEK_CLICKED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_CALENDAR_WEEK_CLICKED 
+foreign import ccall "expEVT_CALENDAR_WEEK_CLICKED" wx_expEVT_CALENDAR_WEEK_CLICKED :: IO CInt
+
+-- | usage: (@wxEVT_CALENDAR_YEAR_CHANGED@).
+{-# NOINLINE wxEVT_CALENDAR_YEAR_CHANGED #-}
+wxEVT_CALENDAR_YEAR_CHANGED ::  EventId
+wxEVT_CALENDAR_YEAR_CHANGED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_CALENDAR_YEAR_CHANGED 
+foreign import ccall "expEVT_CALENDAR_YEAR_CHANGED" wx_expEVT_CALENDAR_YEAR_CHANGED :: IO CInt
+
+-- | usage: (@wxEVT_CHAR@).
+{-# NOINLINE wxEVT_CHAR #-}
+wxEVT_CHAR ::  EventId
+wxEVT_CHAR 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_CHAR 
+foreign import ccall "expEVT_CHAR" wx_expEVT_CHAR :: IO CInt
+
+-- | usage: (@wxEVT_CHAR_HOOK@).
+{-# NOINLINE wxEVT_CHAR_HOOK #-}
+wxEVT_CHAR_HOOK ::  EventId
+wxEVT_CHAR_HOOK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_CHAR_HOOK 
+foreign import ccall "expEVT_CHAR_HOOK" wx_expEVT_CHAR_HOOK :: IO CInt
+
+-- | usage: (@wxEVT_CHILD_FOCUS@).
+{-# NOINLINE wxEVT_CHILD_FOCUS #-}
+wxEVT_CHILD_FOCUS ::  EventId
+wxEVT_CHILD_FOCUS 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_CHILD_FOCUS 
+foreign import ccall "expEVT_CHILD_FOCUS" wx_expEVT_CHILD_FOCUS :: IO CInt
+
+-- | usage: (@wxEVT_CLIPBOARD_CHANGED@).
+{-# NOINLINE wxEVT_CLIPBOARD_CHANGED #-}
+wxEVT_CLIPBOARD_CHANGED ::  EventId
+wxEVT_CLIPBOARD_CHANGED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_CLIPBOARD_CHANGED 
+foreign import ccall "expEVT_CLIPBOARD_CHANGED" wx_expEVT_CLIPBOARD_CHANGED :: IO CInt
+
+-- | usage: (@wxEVT_CLOSE_WINDOW@).
+{-# NOINLINE wxEVT_CLOSE_WINDOW #-}
+wxEVT_CLOSE_WINDOW ::  EventId
+wxEVT_CLOSE_WINDOW 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_CLOSE_WINDOW 
+foreign import ccall "expEVT_CLOSE_WINDOW" wx_expEVT_CLOSE_WINDOW :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_BUTTON_CLICKED@).
+{-# NOINLINE wxEVT_COMMAND_BUTTON_CLICKED #-}
+wxEVT_COMMAND_BUTTON_CLICKED ::  EventId
+wxEVT_COMMAND_BUTTON_CLICKED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_BUTTON_CLICKED 
+foreign import ccall "expEVT_COMMAND_BUTTON_CLICKED" wx_expEVT_COMMAND_BUTTON_CLICKED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_CHECKBOX_CLICKED@).
+{-# NOINLINE wxEVT_COMMAND_CHECKBOX_CLICKED #-}
+wxEVT_COMMAND_CHECKBOX_CLICKED ::  EventId
+wxEVT_COMMAND_CHECKBOX_CLICKED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_CHECKBOX_CLICKED 
+foreign import ccall "expEVT_COMMAND_CHECKBOX_CLICKED" wx_expEVT_COMMAND_CHECKBOX_CLICKED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_CHECKLISTBOX_TOGGLED@).
+{-# NOINLINE wxEVT_COMMAND_CHECKLISTBOX_TOGGLED #-}
+wxEVT_COMMAND_CHECKLISTBOX_TOGGLED ::  EventId
+wxEVT_COMMAND_CHECKLISTBOX_TOGGLED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_CHECKLISTBOX_TOGGLED 
+foreign import ccall "expEVT_COMMAND_CHECKLISTBOX_TOGGLED" wx_expEVT_COMMAND_CHECKLISTBOX_TOGGLED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGED@).
+{-# NOINLINE wxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGED #-}
+wxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGED ::  EventId
+wxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_CHOICEBOOK_PAGE_CHANGED 
+foreign import ccall "expEVT_COMMAND_CHOICEBOOK_PAGE_CHANGED" wx_expEVT_COMMAND_CHOICEBOOK_PAGE_CHANGED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGING@).
+{-# NOINLINE wxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGING #-}
+wxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGING ::  EventId
+wxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGING 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_CHOICEBOOK_PAGE_CHANGING 
+foreign import ccall "expEVT_COMMAND_CHOICEBOOK_PAGE_CHANGING" wx_expEVT_COMMAND_CHOICEBOOK_PAGE_CHANGING :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_CHOICE_SELECTED@).
+{-# NOINLINE wxEVT_COMMAND_CHOICE_SELECTED #-}
+wxEVT_COMMAND_CHOICE_SELECTED ::  EventId
+wxEVT_COMMAND_CHOICE_SELECTED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_CHOICE_SELECTED 
+foreign import ccall "expEVT_COMMAND_CHOICE_SELECTED" wx_expEVT_COMMAND_CHOICE_SELECTED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_COLLPANE_CHANGED@).
+{-# NOINLINE wxEVT_COMMAND_COLLPANE_CHANGED #-}
+wxEVT_COMMAND_COLLPANE_CHANGED ::  EventId
+wxEVT_COMMAND_COLLPANE_CHANGED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_COLLPANE_CHANGED 
+foreign import ccall "expEVT_COMMAND_COLLPANE_CHANGED" wx_expEVT_COMMAND_COLLPANE_CHANGED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_COLOURPICKER_CHANGED@).
+{-# NOINLINE wxEVT_COMMAND_COLOURPICKER_CHANGED #-}
+wxEVT_COMMAND_COLOURPICKER_CHANGED ::  EventId
+wxEVT_COMMAND_COLOURPICKER_CHANGED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_COLOURPICKER_CHANGED 
+foreign import ccall "expEVT_COMMAND_COLOURPICKER_CHANGED" wx_expEVT_COMMAND_COLOURPICKER_CHANGED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_COMBOBOX_CLOSEUP@).
+{-# NOINLINE wxEVT_COMMAND_COMBOBOX_CLOSEUP #-}
+wxEVT_COMMAND_COMBOBOX_CLOSEUP ::  EventId
+wxEVT_COMMAND_COMBOBOX_CLOSEUP 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_COMBOBOX_CLOSEUP 
+foreign import ccall "expEVT_COMMAND_COMBOBOX_CLOSEUP" wx_expEVT_COMMAND_COMBOBOX_CLOSEUP :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_COMBOBOX_DROPDOWN@).
+{-# NOINLINE wxEVT_COMMAND_COMBOBOX_DROPDOWN #-}
+wxEVT_COMMAND_COMBOBOX_DROPDOWN ::  EventId
+wxEVT_COMMAND_COMBOBOX_DROPDOWN 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_COMBOBOX_DROPDOWN 
+foreign import ccall "expEVT_COMMAND_COMBOBOX_DROPDOWN" wx_expEVT_COMMAND_COMBOBOX_DROPDOWN :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_COMBOBOX_SELECTED@).
+{-# NOINLINE wxEVT_COMMAND_COMBOBOX_SELECTED #-}
+wxEVT_COMMAND_COMBOBOX_SELECTED ::  EventId
+wxEVT_COMMAND_COMBOBOX_SELECTED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_COMBOBOX_SELECTED 
+foreign import ccall "expEVT_COMMAND_COMBOBOX_SELECTED" wx_expEVT_COMMAND_COMBOBOX_SELECTED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_DATAVIEW_CACHE_HINT@).
+{-# NOINLINE wxEVT_COMMAND_DATAVIEW_CACHE_HINT #-}
+wxEVT_COMMAND_DATAVIEW_CACHE_HINT ::  EventId
+wxEVT_COMMAND_DATAVIEW_CACHE_HINT 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_DATAVIEW_CACHE_HINT 
+foreign import ccall "expEVT_COMMAND_DATAVIEW_CACHE_HINT" wx_expEVT_COMMAND_DATAVIEW_CACHE_HINT :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_DATAVIEW_COLUMN_HEADER_CLICK@).
+{-# NOINLINE wxEVT_COMMAND_DATAVIEW_COLUMN_HEADER_CLICK #-}
+wxEVT_COMMAND_DATAVIEW_COLUMN_HEADER_CLICK ::  EventId
+wxEVT_COMMAND_DATAVIEW_COLUMN_HEADER_CLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_DATAVIEW_COLUMN_HEADER_CLICK 
+foreign import ccall "expEVT_COMMAND_DATAVIEW_COLUMN_HEADER_CLICK" wx_expEVT_COMMAND_DATAVIEW_COLUMN_HEADER_CLICK :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_DATAVIEW_COLUMN_HEADER_RIGHT_CLICK@).
+{-# NOINLINE wxEVT_COMMAND_DATAVIEW_COLUMN_HEADER_RIGHT_CLICK #-}
+wxEVT_COMMAND_DATAVIEW_COLUMN_HEADER_RIGHT_CLICK ::  EventId
+wxEVT_COMMAND_DATAVIEW_COLUMN_HEADER_RIGHT_CLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_DATAVIEW_COLUMN_HEADER_RIGHT_CLICK 
+foreign import ccall "expEVT_COMMAND_DATAVIEW_COLUMN_HEADER_RIGHT_CLICK" wx_expEVT_COMMAND_DATAVIEW_COLUMN_HEADER_RIGHT_CLICK :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_DATAVIEW_COLUMN_REORDERED@).
+{-# NOINLINE wxEVT_COMMAND_DATAVIEW_COLUMN_REORDERED #-}
+wxEVT_COMMAND_DATAVIEW_COLUMN_REORDERED ::  EventId
+wxEVT_COMMAND_DATAVIEW_COLUMN_REORDERED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_DATAVIEW_COLUMN_REORDERED 
+foreign import ccall "expEVT_COMMAND_DATAVIEW_COLUMN_REORDERED" wx_expEVT_COMMAND_DATAVIEW_COLUMN_REORDERED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_DATAVIEW_COLUMN_SORTED@).
+{-# NOINLINE wxEVT_COMMAND_DATAVIEW_COLUMN_SORTED #-}
+wxEVT_COMMAND_DATAVIEW_COLUMN_SORTED ::  EventId
+wxEVT_COMMAND_DATAVIEW_COLUMN_SORTED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_DATAVIEW_COLUMN_SORTED 
+foreign import ccall "expEVT_COMMAND_DATAVIEW_COLUMN_SORTED" wx_expEVT_COMMAND_DATAVIEW_COLUMN_SORTED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_DATAVIEW_ITEM_ACTIVATED@).
+{-# NOINLINE wxEVT_COMMAND_DATAVIEW_ITEM_ACTIVATED #-}
+wxEVT_COMMAND_DATAVIEW_ITEM_ACTIVATED ::  EventId
+wxEVT_COMMAND_DATAVIEW_ITEM_ACTIVATED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_DATAVIEW_ITEM_ACTIVATED 
+foreign import ccall "expEVT_COMMAND_DATAVIEW_ITEM_ACTIVATED" wx_expEVT_COMMAND_DATAVIEW_ITEM_ACTIVATED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_DATAVIEW_ITEM_BEGIN_DRAG@).
+{-# NOINLINE wxEVT_COMMAND_DATAVIEW_ITEM_BEGIN_DRAG #-}
+wxEVT_COMMAND_DATAVIEW_ITEM_BEGIN_DRAG ::  EventId
+wxEVT_COMMAND_DATAVIEW_ITEM_BEGIN_DRAG 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_DATAVIEW_ITEM_BEGIN_DRAG 
+foreign import ccall "expEVT_COMMAND_DATAVIEW_ITEM_BEGIN_DRAG" wx_expEVT_COMMAND_DATAVIEW_ITEM_BEGIN_DRAG :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_DATAVIEW_ITEM_COLLAPSED@).
+{-# NOINLINE wxEVT_COMMAND_DATAVIEW_ITEM_COLLAPSED #-}
+wxEVT_COMMAND_DATAVIEW_ITEM_COLLAPSED ::  EventId
+wxEVT_COMMAND_DATAVIEW_ITEM_COLLAPSED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_DATAVIEW_ITEM_COLLAPSED 
+foreign import ccall "expEVT_COMMAND_DATAVIEW_ITEM_COLLAPSED" wx_expEVT_COMMAND_DATAVIEW_ITEM_COLLAPSED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_DATAVIEW_ITEM_COLLAPSING@).
+{-# NOINLINE wxEVT_COMMAND_DATAVIEW_ITEM_COLLAPSING #-}
+wxEVT_COMMAND_DATAVIEW_ITEM_COLLAPSING ::  EventId
+wxEVT_COMMAND_DATAVIEW_ITEM_COLLAPSING 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_DATAVIEW_ITEM_COLLAPSING 
+foreign import ccall "expEVT_COMMAND_DATAVIEW_ITEM_COLLAPSING" wx_expEVT_COMMAND_DATAVIEW_ITEM_COLLAPSING :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_DATAVIEW_ITEM_CONTEXT_MENU@).
+{-# NOINLINE wxEVT_COMMAND_DATAVIEW_ITEM_CONTEXT_MENU #-}
+wxEVT_COMMAND_DATAVIEW_ITEM_CONTEXT_MENU ::  EventId
+wxEVT_COMMAND_DATAVIEW_ITEM_CONTEXT_MENU 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_DATAVIEW_ITEM_CONTEXT_MENU 
+foreign import ccall "expEVT_COMMAND_DATAVIEW_ITEM_CONTEXT_MENU" wx_expEVT_COMMAND_DATAVIEW_ITEM_CONTEXT_MENU :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_DATAVIEW_ITEM_DROP@).
+{-# NOINLINE wxEVT_COMMAND_DATAVIEW_ITEM_DROP #-}
+wxEVT_COMMAND_DATAVIEW_ITEM_DROP ::  EventId
+wxEVT_COMMAND_DATAVIEW_ITEM_DROP 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_DATAVIEW_ITEM_DROP 
+foreign import ccall "expEVT_COMMAND_DATAVIEW_ITEM_DROP" wx_expEVT_COMMAND_DATAVIEW_ITEM_DROP :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_DATAVIEW_ITEM_DROP_POSSIBLE@).
+{-# NOINLINE wxEVT_COMMAND_DATAVIEW_ITEM_DROP_POSSIBLE #-}
+wxEVT_COMMAND_DATAVIEW_ITEM_DROP_POSSIBLE ::  EventId
+wxEVT_COMMAND_DATAVIEW_ITEM_DROP_POSSIBLE 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_DATAVIEW_ITEM_DROP_POSSIBLE 
+foreign import ccall "expEVT_COMMAND_DATAVIEW_ITEM_DROP_POSSIBLE" wx_expEVT_COMMAND_DATAVIEW_ITEM_DROP_POSSIBLE :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_DATAVIEW_ITEM_EDITING_DONE@).
+{-# NOINLINE wxEVT_COMMAND_DATAVIEW_ITEM_EDITING_DONE #-}
+wxEVT_COMMAND_DATAVIEW_ITEM_EDITING_DONE ::  EventId
+wxEVT_COMMAND_DATAVIEW_ITEM_EDITING_DONE 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_DATAVIEW_ITEM_EDITING_DONE 
+foreign import ccall "expEVT_COMMAND_DATAVIEW_ITEM_EDITING_DONE" wx_expEVT_COMMAND_DATAVIEW_ITEM_EDITING_DONE :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_DATAVIEW_ITEM_EDITING_STARTED@).
+{-# NOINLINE wxEVT_COMMAND_DATAVIEW_ITEM_EDITING_STARTED #-}
+wxEVT_COMMAND_DATAVIEW_ITEM_EDITING_STARTED ::  EventId
+wxEVT_COMMAND_DATAVIEW_ITEM_EDITING_STARTED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_DATAVIEW_ITEM_EDITING_STARTED 
+foreign import ccall "expEVT_COMMAND_DATAVIEW_ITEM_EDITING_STARTED" wx_expEVT_COMMAND_DATAVIEW_ITEM_EDITING_STARTED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_DATAVIEW_ITEM_EXPANDED@).
+{-# NOINLINE wxEVT_COMMAND_DATAVIEW_ITEM_EXPANDED #-}
+wxEVT_COMMAND_DATAVIEW_ITEM_EXPANDED ::  EventId
+wxEVT_COMMAND_DATAVIEW_ITEM_EXPANDED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_DATAVIEW_ITEM_EXPANDED 
+foreign import ccall "expEVT_COMMAND_DATAVIEW_ITEM_EXPANDED" wx_expEVT_COMMAND_DATAVIEW_ITEM_EXPANDED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_DATAVIEW_ITEM_EXPANDING@).
+{-# NOINLINE wxEVT_COMMAND_DATAVIEW_ITEM_EXPANDING #-}
+wxEVT_COMMAND_DATAVIEW_ITEM_EXPANDING ::  EventId
+wxEVT_COMMAND_DATAVIEW_ITEM_EXPANDING 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_DATAVIEW_ITEM_EXPANDING 
+foreign import ccall "expEVT_COMMAND_DATAVIEW_ITEM_EXPANDING" wx_expEVT_COMMAND_DATAVIEW_ITEM_EXPANDING :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_DATAVIEW_ITEM_START_EDITING@).
+{-# NOINLINE wxEVT_COMMAND_DATAVIEW_ITEM_START_EDITING #-}
+wxEVT_COMMAND_DATAVIEW_ITEM_START_EDITING ::  EventId
+wxEVT_COMMAND_DATAVIEW_ITEM_START_EDITING 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_DATAVIEW_ITEM_START_EDITING 
+foreign import ccall "expEVT_COMMAND_DATAVIEW_ITEM_START_EDITING" wx_expEVT_COMMAND_DATAVIEW_ITEM_START_EDITING :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_DATAVIEW_ITEM_VALUE_CHANGED@).
+{-# NOINLINE wxEVT_COMMAND_DATAVIEW_ITEM_VALUE_CHANGED #-}
+wxEVT_COMMAND_DATAVIEW_ITEM_VALUE_CHANGED ::  EventId
+wxEVT_COMMAND_DATAVIEW_ITEM_VALUE_CHANGED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_DATAVIEW_ITEM_VALUE_CHANGED 
+foreign import ccall "expEVT_COMMAND_DATAVIEW_ITEM_VALUE_CHANGED" wx_expEVT_COMMAND_DATAVIEW_ITEM_VALUE_CHANGED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_DATAVIEW_SELECTION_CHANGED@).
+{-# NOINLINE wxEVT_COMMAND_DATAVIEW_SELECTION_CHANGED #-}
+wxEVT_COMMAND_DATAVIEW_SELECTION_CHANGED ::  EventId
+wxEVT_COMMAND_DATAVIEW_SELECTION_CHANGED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_DATAVIEW_SELECTION_CHANGED 
+foreign import ccall "expEVT_COMMAND_DATAVIEW_SELECTION_CHANGED" wx_expEVT_COMMAND_DATAVIEW_SELECTION_CHANGED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_DIRPICKER_CHANGED@).
+{-# NOINLINE wxEVT_COMMAND_DIRPICKER_CHANGED #-}
+wxEVT_COMMAND_DIRPICKER_CHANGED ::  EventId
+wxEVT_COMMAND_DIRPICKER_CHANGED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_DIRPICKER_CHANGED 
+foreign import ccall "expEVT_COMMAND_DIRPICKER_CHANGED" wx_expEVT_COMMAND_DIRPICKER_CHANGED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_ENTER@).
+{-# NOINLINE wxEVT_COMMAND_ENTER #-}
+wxEVT_COMMAND_ENTER ::  EventId
+wxEVT_COMMAND_ENTER 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_ENTER 
+foreign import ccall "expEVT_COMMAND_ENTER" wx_expEVT_COMMAND_ENTER :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_FILEPICKER_CHANGED@).
+{-# NOINLINE wxEVT_COMMAND_FILEPICKER_CHANGED #-}
+wxEVT_COMMAND_FILEPICKER_CHANGED ::  EventId
+wxEVT_COMMAND_FILEPICKER_CHANGED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_FILEPICKER_CHANGED 
+foreign import ccall "expEVT_COMMAND_FILEPICKER_CHANGED" wx_expEVT_COMMAND_FILEPICKER_CHANGED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_FIND@).
+{-# NOINLINE wxEVT_COMMAND_FIND #-}
+wxEVT_COMMAND_FIND ::  EventId
+wxEVT_COMMAND_FIND 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_FIND 
+foreign import ccall "expEVT_COMMAND_FIND" wx_expEVT_COMMAND_FIND :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_FIND_CLOSE@).
+{-# NOINLINE wxEVT_COMMAND_FIND_CLOSE #-}
+wxEVT_COMMAND_FIND_CLOSE ::  EventId
+wxEVT_COMMAND_FIND_CLOSE 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_FIND_CLOSE 
+foreign import ccall "expEVT_COMMAND_FIND_CLOSE" wx_expEVT_COMMAND_FIND_CLOSE :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_FIND_NEXT@).
+{-# NOINLINE wxEVT_COMMAND_FIND_NEXT #-}
+wxEVT_COMMAND_FIND_NEXT ::  EventId
+wxEVT_COMMAND_FIND_NEXT 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_FIND_NEXT 
+foreign import ccall "expEVT_COMMAND_FIND_NEXT" wx_expEVT_COMMAND_FIND_NEXT :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_FIND_REPLACE@).
+{-# NOINLINE wxEVT_COMMAND_FIND_REPLACE #-}
+wxEVT_COMMAND_FIND_REPLACE ::  EventId
+wxEVT_COMMAND_FIND_REPLACE 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_FIND_REPLACE 
+foreign import ccall "expEVT_COMMAND_FIND_REPLACE" wx_expEVT_COMMAND_FIND_REPLACE :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_FIND_REPLACE_ALL@).
+{-# NOINLINE wxEVT_COMMAND_FIND_REPLACE_ALL #-}
+wxEVT_COMMAND_FIND_REPLACE_ALL ::  EventId
+wxEVT_COMMAND_FIND_REPLACE_ALL 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_FIND_REPLACE_ALL 
+foreign import ccall "expEVT_COMMAND_FIND_REPLACE_ALL" wx_expEVT_COMMAND_FIND_REPLACE_ALL :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_FONTPICKER_CHANGED@).
+{-# NOINLINE wxEVT_COMMAND_FONTPICKER_CHANGED #-}
+wxEVT_COMMAND_FONTPICKER_CHANGED ::  EventId
+wxEVT_COMMAND_FONTPICKER_CHANGED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_FONTPICKER_CHANGED 
+foreign import ccall "expEVT_COMMAND_FONTPICKER_CHANGED" wx_expEVT_COMMAND_FONTPICKER_CHANGED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_HEADER_BEGIN_REORDER@).
+{-# NOINLINE wxEVT_COMMAND_HEADER_BEGIN_REORDER #-}
+wxEVT_COMMAND_HEADER_BEGIN_REORDER ::  EventId
+wxEVT_COMMAND_HEADER_BEGIN_REORDER 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_HEADER_BEGIN_REORDER 
+foreign import ccall "expEVT_COMMAND_HEADER_BEGIN_REORDER" wx_expEVT_COMMAND_HEADER_BEGIN_REORDER :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_HEADER_BEGIN_RESIZE@).
+{-# NOINLINE wxEVT_COMMAND_HEADER_BEGIN_RESIZE #-}
+wxEVT_COMMAND_HEADER_BEGIN_RESIZE ::  EventId
+wxEVT_COMMAND_HEADER_BEGIN_RESIZE 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_HEADER_BEGIN_RESIZE 
+foreign import ccall "expEVT_COMMAND_HEADER_BEGIN_RESIZE" wx_expEVT_COMMAND_HEADER_BEGIN_RESIZE :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_HEADER_CLICK@).
+{-# NOINLINE wxEVT_COMMAND_HEADER_CLICK #-}
+wxEVT_COMMAND_HEADER_CLICK ::  EventId
+wxEVT_COMMAND_HEADER_CLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_HEADER_CLICK 
+foreign import ccall "expEVT_COMMAND_HEADER_CLICK" wx_expEVT_COMMAND_HEADER_CLICK :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_HEADER_DCLICK@).
+{-# NOINLINE wxEVT_COMMAND_HEADER_DCLICK #-}
+wxEVT_COMMAND_HEADER_DCLICK ::  EventId
+wxEVT_COMMAND_HEADER_DCLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_HEADER_DCLICK 
+foreign import ccall "expEVT_COMMAND_HEADER_DCLICK" wx_expEVT_COMMAND_HEADER_DCLICK :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_HEADER_DRAGGING_CANCELLED@).
+{-# NOINLINE wxEVT_COMMAND_HEADER_DRAGGING_CANCELLED #-}
+wxEVT_COMMAND_HEADER_DRAGGING_CANCELLED ::  EventId
+wxEVT_COMMAND_HEADER_DRAGGING_CANCELLED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_HEADER_DRAGGING_CANCELLED 
+foreign import ccall "expEVT_COMMAND_HEADER_DRAGGING_CANCELLED" wx_expEVT_COMMAND_HEADER_DRAGGING_CANCELLED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_HEADER_END_REORDER@).
+{-# NOINLINE wxEVT_COMMAND_HEADER_END_REORDER #-}
+wxEVT_COMMAND_HEADER_END_REORDER ::  EventId
+wxEVT_COMMAND_HEADER_END_REORDER 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_HEADER_END_REORDER 
+foreign import ccall "expEVT_COMMAND_HEADER_END_REORDER" wx_expEVT_COMMAND_HEADER_END_REORDER :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_HEADER_END_RESIZE@).
+{-# NOINLINE wxEVT_COMMAND_HEADER_END_RESIZE #-}
+wxEVT_COMMAND_HEADER_END_RESIZE ::  EventId
+wxEVT_COMMAND_HEADER_END_RESIZE 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_HEADER_END_RESIZE 
+foreign import ccall "expEVT_COMMAND_HEADER_END_RESIZE" wx_expEVT_COMMAND_HEADER_END_RESIZE :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_HEADER_MIDDLE_CLICK@).
+{-# NOINLINE wxEVT_COMMAND_HEADER_MIDDLE_CLICK #-}
+wxEVT_COMMAND_HEADER_MIDDLE_CLICK ::  EventId
+wxEVT_COMMAND_HEADER_MIDDLE_CLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_HEADER_MIDDLE_CLICK 
+foreign import ccall "expEVT_COMMAND_HEADER_MIDDLE_CLICK" wx_expEVT_COMMAND_HEADER_MIDDLE_CLICK :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_HEADER_MIDDLE_DCLICK@).
+{-# NOINLINE wxEVT_COMMAND_HEADER_MIDDLE_DCLICK #-}
+wxEVT_COMMAND_HEADER_MIDDLE_DCLICK ::  EventId
+wxEVT_COMMAND_HEADER_MIDDLE_DCLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_HEADER_MIDDLE_DCLICK 
+foreign import ccall "expEVT_COMMAND_HEADER_MIDDLE_DCLICK" wx_expEVT_COMMAND_HEADER_MIDDLE_DCLICK :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_HEADER_RESIZING@).
+{-# NOINLINE wxEVT_COMMAND_HEADER_RESIZING #-}
+wxEVT_COMMAND_HEADER_RESIZING ::  EventId
+wxEVT_COMMAND_HEADER_RESIZING 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_HEADER_RESIZING 
+foreign import ccall "expEVT_COMMAND_HEADER_RESIZING" wx_expEVT_COMMAND_HEADER_RESIZING :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_HEADER_RIGHT_CLICK@).
+{-# NOINLINE wxEVT_COMMAND_HEADER_RIGHT_CLICK #-}
+wxEVT_COMMAND_HEADER_RIGHT_CLICK ::  EventId
+wxEVT_COMMAND_HEADER_RIGHT_CLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_HEADER_RIGHT_CLICK 
+foreign import ccall "expEVT_COMMAND_HEADER_RIGHT_CLICK" wx_expEVT_COMMAND_HEADER_RIGHT_CLICK :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_HEADER_RIGHT_DCLICK@).
+{-# NOINLINE wxEVT_COMMAND_HEADER_RIGHT_DCLICK #-}
+wxEVT_COMMAND_HEADER_RIGHT_DCLICK ::  EventId
+wxEVT_COMMAND_HEADER_RIGHT_DCLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_HEADER_RIGHT_DCLICK 
+foreign import ccall "expEVT_COMMAND_HEADER_RIGHT_DCLICK" wx_expEVT_COMMAND_HEADER_RIGHT_DCLICK :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_HEADER_SEPARATOR_DCLICK@).
+{-# NOINLINE wxEVT_COMMAND_HEADER_SEPARATOR_DCLICK #-}
+wxEVT_COMMAND_HEADER_SEPARATOR_DCLICK ::  EventId
+wxEVT_COMMAND_HEADER_SEPARATOR_DCLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_HEADER_SEPARATOR_DCLICK 
+foreign import ccall "expEVT_COMMAND_HEADER_SEPARATOR_DCLICK" wx_expEVT_COMMAND_HEADER_SEPARATOR_DCLICK :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_HTML_CELL_CLICKED@).
+{-# NOINLINE wxEVT_COMMAND_HTML_CELL_CLICKED #-}
+wxEVT_COMMAND_HTML_CELL_CLICKED ::  EventId
+wxEVT_COMMAND_HTML_CELL_CLICKED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_HTML_CELL_CLICKED 
+foreign import ccall "expEVT_COMMAND_HTML_CELL_CLICKED" wx_expEVT_COMMAND_HTML_CELL_CLICKED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_HTML_CELL_HOVER@).
+{-# NOINLINE wxEVT_COMMAND_HTML_CELL_HOVER #-}
+wxEVT_COMMAND_HTML_CELL_HOVER ::  EventId
+wxEVT_COMMAND_HTML_CELL_HOVER 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_HTML_CELL_HOVER 
+foreign import ccall "expEVT_COMMAND_HTML_CELL_HOVER" wx_expEVT_COMMAND_HTML_CELL_HOVER :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_HTML_LINK_CLICKED@).
+{-# NOINLINE wxEVT_COMMAND_HTML_LINK_CLICKED #-}
+wxEVT_COMMAND_HTML_LINK_CLICKED ::  EventId
+wxEVT_COMMAND_HTML_LINK_CLICKED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_HTML_LINK_CLICKED 
+foreign import ccall "expEVT_COMMAND_HTML_LINK_CLICKED" wx_expEVT_COMMAND_HTML_LINK_CLICKED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_HYPERLINK@).
+{-# NOINLINE wxEVT_COMMAND_HYPERLINK #-}
+wxEVT_COMMAND_HYPERLINK ::  EventId
+wxEVT_COMMAND_HYPERLINK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_HYPERLINK 
+foreign import ccall "expEVT_COMMAND_HYPERLINK" wx_expEVT_COMMAND_HYPERLINK :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_KILL_FOCUS@).
+{-# NOINLINE wxEVT_COMMAND_KILL_FOCUS #-}
+wxEVT_COMMAND_KILL_FOCUS ::  EventId
+wxEVT_COMMAND_KILL_FOCUS 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_KILL_FOCUS 
+foreign import ccall "expEVT_COMMAND_KILL_FOCUS" wx_expEVT_COMMAND_KILL_FOCUS :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_LEFT_CLICK@).
+{-# NOINLINE wxEVT_COMMAND_LEFT_CLICK #-}
+wxEVT_COMMAND_LEFT_CLICK ::  EventId
+wxEVT_COMMAND_LEFT_CLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_LEFT_CLICK 
+foreign import ccall "expEVT_COMMAND_LEFT_CLICK" wx_expEVT_COMMAND_LEFT_CLICK :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_LEFT_DCLICK@).
+{-# NOINLINE wxEVT_COMMAND_LEFT_DCLICK #-}
+wxEVT_COMMAND_LEFT_DCLICK ::  EventId
+wxEVT_COMMAND_LEFT_DCLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_LEFT_DCLICK 
+foreign import ccall "expEVT_COMMAND_LEFT_DCLICK" wx_expEVT_COMMAND_LEFT_DCLICK :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_LISTBOOK_PAGE_CHANGED@).
+{-# NOINLINE wxEVT_COMMAND_LISTBOOK_PAGE_CHANGED #-}
+wxEVT_COMMAND_LISTBOOK_PAGE_CHANGED ::  EventId
+wxEVT_COMMAND_LISTBOOK_PAGE_CHANGED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_LISTBOOK_PAGE_CHANGED 
+foreign import ccall "expEVT_COMMAND_LISTBOOK_PAGE_CHANGED" wx_expEVT_COMMAND_LISTBOOK_PAGE_CHANGED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_LISTBOOK_PAGE_CHANGING@).
+{-# NOINLINE wxEVT_COMMAND_LISTBOOK_PAGE_CHANGING #-}
+wxEVT_COMMAND_LISTBOOK_PAGE_CHANGING ::  EventId
+wxEVT_COMMAND_LISTBOOK_PAGE_CHANGING 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_LISTBOOK_PAGE_CHANGING 
+foreign import ccall "expEVT_COMMAND_LISTBOOK_PAGE_CHANGING" wx_expEVT_COMMAND_LISTBOOK_PAGE_CHANGING :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_LISTBOX_DOUBLECLICKED@).
+{-# NOINLINE wxEVT_COMMAND_LISTBOX_DOUBLECLICKED #-}
+wxEVT_COMMAND_LISTBOX_DOUBLECLICKED ::  EventId
+wxEVT_COMMAND_LISTBOX_DOUBLECLICKED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_LISTBOX_DOUBLECLICKED 
+foreign import ccall "expEVT_COMMAND_LISTBOX_DOUBLECLICKED" wx_expEVT_COMMAND_LISTBOX_DOUBLECLICKED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_LISTBOX_SELECTED@).
+{-# NOINLINE wxEVT_COMMAND_LISTBOX_SELECTED #-}
+wxEVT_COMMAND_LISTBOX_SELECTED ::  EventId
+wxEVT_COMMAND_LISTBOX_SELECTED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_LISTBOX_SELECTED 
+foreign import ccall "expEVT_COMMAND_LISTBOX_SELECTED" wx_expEVT_COMMAND_LISTBOX_SELECTED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_LIST_BEGIN_DRAG@).
+{-# NOINLINE wxEVT_COMMAND_LIST_BEGIN_DRAG #-}
+wxEVT_COMMAND_LIST_BEGIN_DRAG ::  EventId
+wxEVT_COMMAND_LIST_BEGIN_DRAG 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_LIST_BEGIN_DRAG 
+foreign import ccall "expEVT_COMMAND_LIST_BEGIN_DRAG" wx_expEVT_COMMAND_LIST_BEGIN_DRAG :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_LIST_BEGIN_LABEL_EDIT@).
+{-# NOINLINE wxEVT_COMMAND_LIST_BEGIN_LABEL_EDIT #-}
+wxEVT_COMMAND_LIST_BEGIN_LABEL_EDIT ::  EventId
+wxEVT_COMMAND_LIST_BEGIN_LABEL_EDIT 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_LIST_BEGIN_LABEL_EDIT 
+foreign import ccall "expEVT_COMMAND_LIST_BEGIN_LABEL_EDIT" wx_expEVT_COMMAND_LIST_BEGIN_LABEL_EDIT :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_LIST_BEGIN_RDRAG@).
+{-# NOINLINE wxEVT_COMMAND_LIST_BEGIN_RDRAG #-}
+wxEVT_COMMAND_LIST_BEGIN_RDRAG ::  EventId
+wxEVT_COMMAND_LIST_BEGIN_RDRAG 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_LIST_BEGIN_RDRAG 
+foreign import ccall "expEVT_COMMAND_LIST_BEGIN_RDRAG" wx_expEVT_COMMAND_LIST_BEGIN_RDRAG :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_LIST_CACHE_HINT@).
+{-# NOINLINE wxEVT_COMMAND_LIST_CACHE_HINT #-}
+wxEVT_COMMAND_LIST_CACHE_HINT ::  EventId
+wxEVT_COMMAND_LIST_CACHE_HINT 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_LIST_CACHE_HINT 
+foreign import ccall "expEVT_COMMAND_LIST_CACHE_HINT" wx_expEVT_COMMAND_LIST_CACHE_HINT :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_LIST_COL_BEGIN_DRAG@).
+{-# NOINLINE wxEVT_COMMAND_LIST_COL_BEGIN_DRAG #-}
+wxEVT_COMMAND_LIST_COL_BEGIN_DRAG ::  EventId
+wxEVT_COMMAND_LIST_COL_BEGIN_DRAG 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_LIST_COL_BEGIN_DRAG 
+foreign import ccall "expEVT_COMMAND_LIST_COL_BEGIN_DRAG" wx_expEVT_COMMAND_LIST_COL_BEGIN_DRAG :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_LIST_COL_CLICK@).
+{-# NOINLINE wxEVT_COMMAND_LIST_COL_CLICK #-}
+wxEVT_COMMAND_LIST_COL_CLICK ::  EventId
+wxEVT_COMMAND_LIST_COL_CLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_LIST_COL_CLICK 
+foreign import ccall "expEVT_COMMAND_LIST_COL_CLICK" wx_expEVT_COMMAND_LIST_COL_CLICK :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_LIST_COL_DRAGGING@).
+{-# NOINLINE wxEVT_COMMAND_LIST_COL_DRAGGING #-}
+wxEVT_COMMAND_LIST_COL_DRAGGING ::  EventId
+wxEVT_COMMAND_LIST_COL_DRAGGING 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_LIST_COL_DRAGGING 
+foreign import ccall "expEVT_COMMAND_LIST_COL_DRAGGING" wx_expEVT_COMMAND_LIST_COL_DRAGGING :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_LIST_COL_END_DRAG@).
+{-# NOINLINE wxEVT_COMMAND_LIST_COL_END_DRAG #-}
+wxEVT_COMMAND_LIST_COL_END_DRAG ::  EventId
+wxEVT_COMMAND_LIST_COL_END_DRAG 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_LIST_COL_END_DRAG 
+foreign import ccall "expEVT_COMMAND_LIST_COL_END_DRAG" wx_expEVT_COMMAND_LIST_COL_END_DRAG :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_LIST_COL_RIGHT_CLICK@).
+{-# NOINLINE wxEVT_COMMAND_LIST_COL_RIGHT_CLICK #-}
+wxEVT_COMMAND_LIST_COL_RIGHT_CLICK ::  EventId
+wxEVT_COMMAND_LIST_COL_RIGHT_CLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_LIST_COL_RIGHT_CLICK 
+foreign import ccall "expEVT_COMMAND_LIST_COL_RIGHT_CLICK" wx_expEVT_COMMAND_LIST_COL_RIGHT_CLICK :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_LIST_DELETE_ALL_ITEMS@).
+{-# NOINLINE wxEVT_COMMAND_LIST_DELETE_ALL_ITEMS #-}
+wxEVT_COMMAND_LIST_DELETE_ALL_ITEMS ::  EventId
+wxEVT_COMMAND_LIST_DELETE_ALL_ITEMS 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_LIST_DELETE_ALL_ITEMS 
+foreign import ccall "expEVT_COMMAND_LIST_DELETE_ALL_ITEMS" wx_expEVT_COMMAND_LIST_DELETE_ALL_ITEMS :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_LIST_DELETE_ITEM@).
+{-# NOINLINE wxEVT_COMMAND_LIST_DELETE_ITEM #-}
+wxEVT_COMMAND_LIST_DELETE_ITEM ::  EventId
+wxEVT_COMMAND_LIST_DELETE_ITEM 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_LIST_DELETE_ITEM 
+foreign import ccall "expEVT_COMMAND_LIST_DELETE_ITEM" wx_expEVT_COMMAND_LIST_DELETE_ITEM :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_LIST_END_LABEL_EDIT@).
+{-# NOINLINE wxEVT_COMMAND_LIST_END_LABEL_EDIT #-}
+wxEVT_COMMAND_LIST_END_LABEL_EDIT ::  EventId
+wxEVT_COMMAND_LIST_END_LABEL_EDIT 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_LIST_END_LABEL_EDIT 
+foreign import ccall "expEVT_COMMAND_LIST_END_LABEL_EDIT" wx_expEVT_COMMAND_LIST_END_LABEL_EDIT :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_LIST_INSERT_ITEM@).
+{-# NOINLINE wxEVT_COMMAND_LIST_INSERT_ITEM #-}
+wxEVT_COMMAND_LIST_INSERT_ITEM ::  EventId
+wxEVT_COMMAND_LIST_INSERT_ITEM 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_LIST_INSERT_ITEM 
+foreign import ccall "expEVT_COMMAND_LIST_INSERT_ITEM" wx_expEVT_COMMAND_LIST_INSERT_ITEM :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_LIST_ITEM_ACTIVATED@).
+{-# NOINLINE wxEVT_COMMAND_LIST_ITEM_ACTIVATED #-}
+wxEVT_COMMAND_LIST_ITEM_ACTIVATED ::  EventId
+wxEVT_COMMAND_LIST_ITEM_ACTIVATED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_LIST_ITEM_ACTIVATED 
+foreign import ccall "expEVT_COMMAND_LIST_ITEM_ACTIVATED" wx_expEVT_COMMAND_LIST_ITEM_ACTIVATED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_LIST_ITEM_DESELECTED@).
+{-# NOINLINE wxEVT_COMMAND_LIST_ITEM_DESELECTED #-}
+wxEVT_COMMAND_LIST_ITEM_DESELECTED ::  EventId
+wxEVT_COMMAND_LIST_ITEM_DESELECTED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_LIST_ITEM_DESELECTED 
+foreign import ccall "expEVT_COMMAND_LIST_ITEM_DESELECTED" wx_expEVT_COMMAND_LIST_ITEM_DESELECTED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_LIST_ITEM_FOCUSED@).
+{-# NOINLINE wxEVT_COMMAND_LIST_ITEM_FOCUSED #-}
+wxEVT_COMMAND_LIST_ITEM_FOCUSED ::  EventId
+wxEVT_COMMAND_LIST_ITEM_FOCUSED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_LIST_ITEM_FOCUSED 
+foreign import ccall "expEVT_COMMAND_LIST_ITEM_FOCUSED" wx_expEVT_COMMAND_LIST_ITEM_FOCUSED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_LIST_ITEM_MIDDLE_CLICK@).
+{-# NOINLINE wxEVT_COMMAND_LIST_ITEM_MIDDLE_CLICK #-}
+wxEVT_COMMAND_LIST_ITEM_MIDDLE_CLICK ::  EventId
+wxEVT_COMMAND_LIST_ITEM_MIDDLE_CLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_LIST_ITEM_MIDDLE_CLICK 
+foreign import ccall "expEVT_COMMAND_LIST_ITEM_MIDDLE_CLICK" wx_expEVT_COMMAND_LIST_ITEM_MIDDLE_CLICK :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_LIST_ITEM_RIGHT_CLICK@).
+{-# NOINLINE wxEVT_COMMAND_LIST_ITEM_RIGHT_CLICK #-}
+wxEVT_COMMAND_LIST_ITEM_RIGHT_CLICK ::  EventId
+wxEVT_COMMAND_LIST_ITEM_RIGHT_CLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_LIST_ITEM_RIGHT_CLICK 
+foreign import ccall "expEVT_COMMAND_LIST_ITEM_RIGHT_CLICK" wx_expEVT_COMMAND_LIST_ITEM_RIGHT_CLICK :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_LIST_ITEM_SELECTED@).
+{-# NOINLINE wxEVT_COMMAND_LIST_ITEM_SELECTED #-}
+wxEVT_COMMAND_LIST_ITEM_SELECTED ::  EventId
+wxEVT_COMMAND_LIST_ITEM_SELECTED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_LIST_ITEM_SELECTED 
+foreign import ccall "expEVT_COMMAND_LIST_ITEM_SELECTED" wx_expEVT_COMMAND_LIST_ITEM_SELECTED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_LIST_KEY_DOWN@).
+{-# NOINLINE wxEVT_COMMAND_LIST_KEY_DOWN #-}
+wxEVT_COMMAND_LIST_KEY_DOWN ::  EventId
+wxEVT_COMMAND_LIST_KEY_DOWN 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_LIST_KEY_DOWN 
+foreign import ccall "expEVT_COMMAND_LIST_KEY_DOWN" wx_expEVT_COMMAND_LIST_KEY_DOWN :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_MENU_SELECTED@).
+{-# NOINLINE wxEVT_COMMAND_MENU_SELECTED #-}
+wxEVT_COMMAND_MENU_SELECTED ::  EventId
+wxEVT_COMMAND_MENU_SELECTED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_MENU_SELECTED 
+foreign import ccall "expEVT_COMMAND_MENU_SELECTED" wx_expEVT_COMMAND_MENU_SELECTED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED@).
+{-# NOINLINE wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED #-}
+wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED ::  EventId
+wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_NOTEBOOK_PAGE_CHANGED 
+foreign import ccall "expEVT_COMMAND_NOTEBOOK_PAGE_CHANGED" wx_expEVT_COMMAND_NOTEBOOK_PAGE_CHANGED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGING@).
+{-# NOINLINE wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGING #-}
+wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGING ::  EventId
+wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGING 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_NOTEBOOK_PAGE_CHANGING 
+foreign import ccall "expEVT_COMMAND_NOTEBOOK_PAGE_CHANGING" wx_expEVT_COMMAND_NOTEBOOK_PAGE_CHANGING :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_RADIOBOX_SELECTED@).
+{-# NOINLINE wxEVT_COMMAND_RADIOBOX_SELECTED #-}
+wxEVT_COMMAND_RADIOBOX_SELECTED ::  EventId
+wxEVT_COMMAND_RADIOBOX_SELECTED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_RADIOBOX_SELECTED 
+foreign import ccall "expEVT_COMMAND_RADIOBOX_SELECTED" wx_expEVT_COMMAND_RADIOBOX_SELECTED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_RADIOBUTTON_SELECTED@).
+{-# NOINLINE wxEVT_COMMAND_RADIOBUTTON_SELECTED #-}
+wxEVT_COMMAND_RADIOBUTTON_SELECTED ::  EventId
+wxEVT_COMMAND_RADIOBUTTON_SELECTED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_RADIOBUTTON_SELECTED 
+foreign import ccall "expEVT_COMMAND_RADIOBUTTON_SELECTED" wx_expEVT_COMMAND_RADIOBUTTON_SELECTED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_RIBBONBAR_PAGE_CHANGED@).
+{-# NOINLINE wxEVT_COMMAND_RIBBONBAR_PAGE_CHANGED #-}
+wxEVT_COMMAND_RIBBONBAR_PAGE_CHANGED ::  EventId
+wxEVT_COMMAND_RIBBONBAR_PAGE_CHANGED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_RIBBONBAR_PAGE_CHANGED 
+foreign import ccall "expEVT_COMMAND_RIBBONBAR_PAGE_CHANGED" wx_expEVT_COMMAND_RIBBONBAR_PAGE_CHANGED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_RIBBONBAR_PAGE_CHANGING@).
+{-# NOINLINE wxEVT_COMMAND_RIBBONBAR_PAGE_CHANGING #-}
+wxEVT_COMMAND_RIBBONBAR_PAGE_CHANGING ::  EventId
+wxEVT_COMMAND_RIBBONBAR_PAGE_CHANGING 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_RIBBONBAR_PAGE_CHANGING 
+foreign import ccall "expEVT_COMMAND_RIBBONBAR_PAGE_CHANGING" wx_expEVT_COMMAND_RIBBONBAR_PAGE_CHANGING :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_RIBBONBAR_TAB_MIDDLE_DOWN@).
+{-# NOINLINE wxEVT_COMMAND_RIBBONBAR_TAB_MIDDLE_DOWN #-}
+wxEVT_COMMAND_RIBBONBAR_TAB_MIDDLE_DOWN ::  EventId
+wxEVT_COMMAND_RIBBONBAR_TAB_MIDDLE_DOWN 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_RIBBONBAR_TAB_MIDDLE_DOWN 
+foreign import ccall "expEVT_COMMAND_RIBBONBAR_TAB_MIDDLE_DOWN" wx_expEVT_COMMAND_RIBBONBAR_TAB_MIDDLE_DOWN :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_RIBBONBAR_TAB_MIDDLE_UP@).
+{-# NOINLINE wxEVT_COMMAND_RIBBONBAR_TAB_MIDDLE_UP #-}
+wxEVT_COMMAND_RIBBONBAR_TAB_MIDDLE_UP ::  EventId
+wxEVT_COMMAND_RIBBONBAR_TAB_MIDDLE_UP 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_RIBBONBAR_TAB_MIDDLE_UP 
+foreign import ccall "expEVT_COMMAND_RIBBONBAR_TAB_MIDDLE_UP" wx_expEVT_COMMAND_RIBBONBAR_TAB_MIDDLE_UP :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_RIBBONBAR_TAB_RIGHT_DOWN@).
+{-# NOINLINE wxEVT_COMMAND_RIBBONBAR_TAB_RIGHT_DOWN #-}
+wxEVT_COMMAND_RIBBONBAR_TAB_RIGHT_DOWN ::  EventId
+wxEVT_COMMAND_RIBBONBAR_TAB_RIGHT_DOWN 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_RIBBONBAR_TAB_RIGHT_DOWN 
+foreign import ccall "expEVT_COMMAND_RIBBONBAR_TAB_RIGHT_DOWN" wx_expEVT_COMMAND_RIBBONBAR_TAB_RIGHT_DOWN :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_RIBBONBAR_TAB_RIGHT_UP@).
+{-# NOINLINE wxEVT_COMMAND_RIBBONBAR_TAB_RIGHT_UP #-}
+wxEVT_COMMAND_RIBBONBAR_TAB_RIGHT_UP ::  EventId
+wxEVT_COMMAND_RIBBONBAR_TAB_RIGHT_UP 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_RIBBONBAR_TAB_RIGHT_UP 
+foreign import ccall "expEVT_COMMAND_RIBBONBAR_TAB_RIGHT_UP" wx_expEVT_COMMAND_RIBBONBAR_TAB_RIGHT_UP :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_RIBBONBUTTON_CLICKED@).
+{-# NOINLINE wxEVT_COMMAND_RIBBONBUTTON_CLICKED #-}
+wxEVT_COMMAND_RIBBONBUTTON_CLICKED ::  EventId
+wxEVT_COMMAND_RIBBONBUTTON_CLICKED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_RIBBONBUTTON_CLICKED 
+foreign import ccall "expEVT_COMMAND_RIBBONBUTTON_CLICKED" wx_expEVT_COMMAND_RIBBONBUTTON_CLICKED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_RIBBONBUTTON_DROPDOWN_CLICKED@).
+{-# NOINLINE wxEVT_COMMAND_RIBBONBUTTON_DROPDOWN_CLICKED #-}
+wxEVT_COMMAND_RIBBONBUTTON_DROPDOWN_CLICKED ::  EventId
+wxEVT_COMMAND_RIBBONBUTTON_DROPDOWN_CLICKED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_RIBBONBUTTON_DROPDOWN_CLICKED 
+foreign import ccall "expEVT_COMMAND_RIBBONBUTTON_DROPDOWN_CLICKED" wx_expEVT_COMMAND_RIBBONBUTTON_DROPDOWN_CLICKED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_RIBBONGALLERY_HOVER_CHANGED@).
+{-# NOINLINE wxEVT_COMMAND_RIBBONGALLERY_HOVER_CHANGED #-}
+wxEVT_COMMAND_RIBBONGALLERY_HOVER_CHANGED ::  EventId
+wxEVT_COMMAND_RIBBONGALLERY_HOVER_CHANGED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_RIBBONGALLERY_HOVER_CHANGED 
+foreign import ccall "expEVT_COMMAND_RIBBONGALLERY_HOVER_CHANGED" wx_expEVT_COMMAND_RIBBONGALLERY_HOVER_CHANGED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_RIBBONGALLERY_SELECTED@).
+{-# NOINLINE wxEVT_COMMAND_RIBBONGALLERY_SELECTED #-}
+wxEVT_COMMAND_RIBBONGALLERY_SELECTED ::  EventId
+wxEVT_COMMAND_RIBBONGALLERY_SELECTED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_RIBBONGALLERY_SELECTED 
+foreign import ccall "expEVT_COMMAND_RIBBONGALLERY_SELECTED" wx_expEVT_COMMAND_RIBBONGALLERY_SELECTED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_RIBBONTOOL_CLICKED@).
+{-# NOINLINE wxEVT_COMMAND_RIBBONTOOL_CLICKED #-}
+wxEVT_COMMAND_RIBBONTOOL_CLICKED ::  EventId
+wxEVT_COMMAND_RIBBONTOOL_CLICKED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_RIBBONTOOL_CLICKED 
+foreign import ccall "expEVT_COMMAND_RIBBONTOOL_CLICKED" wx_expEVT_COMMAND_RIBBONTOOL_CLICKED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_RIBBONTOOL_DROPDOWN_CLICKED@).
+{-# NOINLINE wxEVT_COMMAND_RIBBONTOOL_DROPDOWN_CLICKED #-}
+wxEVT_COMMAND_RIBBONTOOL_DROPDOWN_CLICKED ::  EventId
+wxEVT_COMMAND_RIBBONTOOL_DROPDOWN_CLICKED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_RIBBONTOOL_DROPDOWN_CLICKED 
+foreign import ccall "expEVT_COMMAND_RIBBONTOOL_DROPDOWN_CLICKED" wx_expEVT_COMMAND_RIBBONTOOL_DROPDOWN_CLICKED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_RICHTEXT_BUFFER_RESET@).
+{-# NOINLINE wxEVT_COMMAND_RICHTEXT_BUFFER_RESET #-}
+wxEVT_COMMAND_RICHTEXT_BUFFER_RESET ::  EventId
+wxEVT_COMMAND_RICHTEXT_BUFFER_RESET 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_RICHTEXT_BUFFER_RESET 
+foreign import ccall "expEVT_COMMAND_RICHTEXT_BUFFER_RESET" wx_expEVT_COMMAND_RICHTEXT_BUFFER_RESET :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_RICHTEXT_CHARACTER@).
+{-# NOINLINE wxEVT_COMMAND_RICHTEXT_CHARACTER #-}
+wxEVT_COMMAND_RICHTEXT_CHARACTER ::  EventId
+wxEVT_COMMAND_RICHTEXT_CHARACTER 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_RICHTEXT_CHARACTER 
+foreign import ccall "expEVT_COMMAND_RICHTEXT_CHARACTER" wx_expEVT_COMMAND_RICHTEXT_CHARACTER :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_RICHTEXT_CONTENT_DELETED@).
+{-# NOINLINE wxEVT_COMMAND_RICHTEXT_CONTENT_DELETED #-}
+wxEVT_COMMAND_RICHTEXT_CONTENT_DELETED ::  EventId
+wxEVT_COMMAND_RICHTEXT_CONTENT_DELETED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_RICHTEXT_CONTENT_DELETED 
+foreign import ccall "expEVT_COMMAND_RICHTEXT_CONTENT_DELETED" wx_expEVT_COMMAND_RICHTEXT_CONTENT_DELETED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_RICHTEXT_CONTENT_INSERTED@).
+{-# NOINLINE wxEVT_COMMAND_RICHTEXT_CONTENT_INSERTED #-}
+wxEVT_COMMAND_RICHTEXT_CONTENT_INSERTED ::  EventId
+wxEVT_COMMAND_RICHTEXT_CONTENT_INSERTED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_RICHTEXT_CONTENT_INSERTED 
+foreign import ccall "expEVT_COMMAND_RICHTEXT_CONTENT_INSERTED" wx_expEVT_COMMAND_RICHTEXT_CONTENT_INSERTED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_RICHTEXT_DELETE@).
+{-# NOINLINE wxEVT_COMMAND_RICHTEXT_DELETE #-}
+wxEVT_COMMAND_RICHTEXT_DELETE ::  EventId
+wxEVT_COMMAND_RICHTEXT_DELETE 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_RICHTEXT_DELETE 
+foreign import ccall "expEVT_COMMAND_RICHTEXT_DELETE" wx_expEVT_COMMAND_RICHTEXT_DELETE :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_RICHTEXT_LEFT_CLICK@).
+{-# NOINLINE wxEVT_COMMAND_RICHTEXT_LEFT_CLICK #-}
+wxEVT_COMMAND_RICHTEXT_LEFT_CLICK ::  EventId
+wxEVT_COMMAND_RICHTEXT_LEFT_CLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_RICHTEXT_LEFT_CLICK 
+foreign import ccall "expEVT_COMMAND_RICHTEXT_LEFT_CLICK" wx_expEVT_COMMAND_RICHTEXT_LEFT_CLICK :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_RICHTEXT_LEFT_DCLICK@).
+{-# NOINLINE wxEVT_COMMAND_RICHTEXT_LEFT_DCLICK #-}
+wxEVT_COMMAND_RICHTEXT_LEFT_DCLICK ::  EventId
+wxEVT_COMMAND_RICHTEXT_LEFT_DCLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_RICHTEXT_LEFT_DCLICK 
+foreign import ccall "expEVT_COMMAND_RICHTEXT_LEFT_DCLICK" wx_expEVT_COMMAND_RICHTEXT_LEFT_DCLICK :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_RICHTEXT_MIDDLE_CLICK@).
+{-# NOINLINE wxEVT_COMMAND_RICHTEXT_MIDDLE_CLICK #-}
+wxEVT_COMMAND_RICHTEXT_MIDDLE_CLICK ::  EventId
+wxEVT_COMMAND_RICHTEXT_MIDDLE_CLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_RICHTEXT_MIDDLE_CLICK 
+foreign import ccall "expEVT_COMMAND_RICHTEXT_MIDDLE_CLICK" wx_expEVT_COMMAND_RICHTEXT_MIDDLE_CLICK :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_RICHTEXT_RETURN@).
+{-# NOINLINE wxEVT_COMMAND_RICHTEXT_RETURN #-}
+wxEVT_COMMAND_RICHTEXT_RETURN ::  EventId
+wxEVT_COMMAND_RICHTEXT_RETURN 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_RICHTEXT_RETURN 
+foreign import ccall "expEVT_COMMAND_RICHTEXT_RETURN" wx_expEVT_COMMAND_RICHTEXT_RETURN :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_RICHTEXT_RIGHT_CLICK@).
+{-# NOINLINE wxEVT_COMMAND_RICHTEXT_RIGHT_CLICK #-}
+wxEVT_COMMAND_RICHTEXT_RIGHT_CLICK ::  EventId
+wxEVT_COMMAND_RICHTEXT_RIGHT_CLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_RICHTEXT_RIGHT_CLICK 
+foreign import ccall "expEVT_COMMAND_RICHTEXT_RIGHT_CLICK" wx_expEVT_COMMAND_RICHTEXT_RIGHT_CLICK :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_RICHTEXT_SELECTION_CHANGED@).
+{-# NOINLINE wxEVT_COMMAND_RICHTEXT_SELECTION_CHANGED #-}
+wxEVT_COMMAND_RICHTEXT_SELECTION_CHANGED ::  EventId
+wxEVT_COMMAND_RICHTEXT_SELECTION_CHANGED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_RICHTEXT_SELECTION_CHANGED 
+foreign import ccall "expEVT_COMMAND_RICHTEXT_SELECTION_CHANGED" wx_expEVT_COMMAND_RICHTEXT_SELECTION_CHANGED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_RICHTEXT_STYLESHEET_CHANGED@).
+{-# NOINLINE wxEVT_COMMAND_RICHTEXT_STYLESHEET_CHANGED #-}
+wxEVT_COMMAND_RICHTEXT_STYLESHEET_CHANGED ::  EventId
+wxEVT_COMMAND_RICHTEXT_STYLESHEET_CHANGED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_RICHTEXT_STYLESHEET_CHANGED 
+foreign import ccall "expEVT_COMMAND_RICHTEXT_STYLESHEET_CHANGED" wx_expEVT_COMMAND_RICHTEXT_STYLESHEET_CHANGED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_RICHTEXT_STYLESHEET_CHANGING@).
+{-# NOINLINE wxEVT_COMMAND_RICHTEXT_STYLESHEET_CHANGING #-}
+wxEVT_COMMAND_RICHTEXT_STYLESHEET_CHANGING ::  EventId
+wxEVT_COMMAND_RICHTEXT_STYLESHEET_CHANGING 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_RICHTEXT_STYLESHEET_CHANGING 
+foreign import ccall "expEVT_COMMAND_RICHTEXT_STYLESHEET_CHANGING" wx_expEVT_COMMAND_RICHTEXT_STYLESHEET_CHANGING :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACED@).
+{-# NOINLINE wxEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACED #-}
+wxEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACED ::  EventId
+wxEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACED 
+foreign import ccall "expEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACED" wx_expEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACING@).
+{-# NOINLINE wxEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACING #-}
+wxEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACING ::  EventId
+wxEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACING 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACING 
+foreign import ccall "expEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACING" wx_expEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACING :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_RICHTEXT_STYLE_CHANGED@).
+{-# NOINLINE wxEVT_COMMAND_RICHTEXT_STYLE_CHANGED #-}
+wxEVT_COMMAND_RICHTEXT_STYLE_CHANGED ::  EventId
+wxEVT_COMMAND_RICHTEXT_STYLE_CHANGED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_RICHTEXT_STYLE_CHANGED 
+foreign import ccall "expEVT_COMMAND_RICHTEXT_STYLE_CHANGED" wx_expEVT_COMMAND_RICHTEXT_STYLE_CHANGED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_RIGHT_CLICK@).
+{-# NOINLINE wxEVT_COMMAND_RIGHT_CLICK #-}
+wxEVT_COMMAND_RIGHT_CLICK ::  EventId
+wxEVT_COMMAND_RIGHT_CLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_RIGHT_CLICK 
+foreign import ccall "expEVT_COMMAND_RIGHT_CLICK" wx_expEVT_COMMAND_RIGHT_CLICK :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_RIGHT_DCLICK@).
+{-# NOINLINE wxEVT_COMMAND_RIGHT_DCLICK #-}
+wxEVT_COMMAND_RIGHT_DCLICK ::  EventId
+wxEVT_COMMAND_RIGHT_DCLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_RIGHT_DCLICK 
+foreign import ccall "expEVT_COMMAND_RIGHT_DCLICK" wx_expEVT_COMMAND_RIGHT_DCLICK :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_SEARCHCTRL_CANCEL_BTN@).
+{-# NOINLINE wxEVT_COMMAND_SEARCHCTRL_CANCEL_BTN #-}
+wxEVT_COMMAND_SEARCHCTRL_CANCEL_BTN ::  EventId
+wxEVT_COMMAND_SEARCHCTRL_CANCEL_BTN 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_SEARCHCTRL_CANCEL_BTN 
+foreign import ccall "expEVT_COMMAND_SEARCHCTRL_CANCEL_BTN" wx_expEVT_COMMAND_SEARCHCTRL_CANCEL_BTN :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_SEARCHCTRL_SEARCH_BTN@).
+{-# NOINLINE wxEVT_COMMAND_SEARCHCTRL_SEARCH_BTN #-}
+wxEVT_COMMAND_SEARCHCTRL_SEARCH_BTN ::  EventId
+wxEVT_COMMAND_SEARCHCTRL_SEARCH_BTN 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_SEARCHCTRL_SEARCH_BTN 
+foreign import ccall "expEVT_COMMAND_SEARCHCTRL_SEARCH_BTN" wx_expEVT_COMMAND_SEARCHCTRL_SEARCH_BTN :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_SET_FOCUS@).
+{-# NOINLINE wxEVT_COMMAND_SET_FOCUS #-}
+wxEVT_COMMAND_SET_FOCUS ::  EventId
+wxEVT_COMMAND_SET_FOCUS 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_SET_FOCUS 
+foreign import ccall "expEVT_COMMAND_SET_FOCUS" wx_expEVT_COMMAND_SET_FOCUS :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_SLIDER_UPDATED@).
+{-# NOINLINE wxEVT_COMMAND_SLIDER_UPDATED #-}
+wxEVT_COMMAND_SLIDER_UPDATED ::  EventId
+wxEVT_COMMAND_SLIDER_UPDATED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_SLIDER_UPDATED 
+foreign import ccall "expEVT_COMMAND_SLIDER_UPDATED" wx_expEVT_COMMAND_SLIDER_UPDATED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_SPINCTRLDOUBLE_UPDATED@).
+{-# NOINLINE wxEVT_COMMAND_SPINCTRLDOUBLE_UPDATED #-}
+wxEVT_COMMAND_SPINCTRLDOUBLE_UPDATED ::  EventId
+wxEVT_COMMAND_SPINCTRLDOUBLE_UPDATED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_SPINCTRLDOUBLE_UPDATED 
+foreign import ccall "expEVT_COMMAND_SPINCTRLDOUBLE_UPDATED" wx_expEVT_COMMAND_SPINCTRLDOUBLE_UPDATED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_SPINCTRL_UPDATED@).
+{-# NOINLINE wxEVT_COMMAND_SPINCTRL_UPDATED #-}
+wxEVT_COMMAND_SPINCTRL_UPDATED ::  EventId
+wxEVT_COMMAND_SPINCTRL_UPDATED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_SPINCTRL_UPDATED 
+foreign import ccall "expEVT_COMMAND_SPINCTRL_UPDATED" wx_expEVT_COMMAND_SPINCTRL_UPDATED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_SPLITTER_DOUBLECLICKED@).
+{-# NOINLINE wxEVT_COMMAND_SPLITTER_DOUBLECLICKED #-}
+wxEVT_COMMAND_SPLITTER_DOUBLECLICKED ::  EventId
+wxEVT_COMMAND_SPLITTER_DOUBLECLICKED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_SPLITTER_DOUBLECLICKED 
+foreign import ccall "expEVT_COMMAND_SPLITTER_DOUBLECLICKED" wx_expEVT_COMMAND_SPLITTER_DOUBLECLICKED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGED@).
+{-# NOINLINE wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGED #-}
+wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGED ::  EventId
+wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_SPLITTER_SASH_POS_CHANGED 
+foreign import ccall "expEVT_COMMAND_SPLITTER_SASH_POS_CHANGED" wx_expEVT_COMMAND_SPLITTER_SASH_POS_CHANGED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGING@).
+{-# NOINLINE wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGING #-}
+wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGING ::  EventId
+wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGING 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_SPLITTER_SASH_POS_CHANGING 
+foreign import ccall "expEVT_COMMAND_SPLITTER_SASH_POS_CHANGING" wx_expEVT_COMMAND_SPLITTER_SASH_POS_CHANGING :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_SPLITTER_UNSPLIT@).
+{-# NOINLINE wxEVT_COMMAND_SPLITTER_UNSPLIT #-}
+wxEVT_COMMAND_SPLITTER_UNSPLIT ::  EventId
+wxEVT_COMMAND_SPLITTER_UNSPLIT 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_SPLITTER_UNSPLIT 
+foreign import ccall "expEVT_COMMAND_SPLITTER_UNSPLIT" wx_expEVT_COMMAND_SPLITTER_UNSPLIT :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_TEXT_COPY@).
+{-# NOINLINE wxEVT_COMMAND_TEXT_COPY #-}
+wxEVT_COMMAND_TEXT_COPY ::  EventId
+wxEVT_COMMAND_TEXT_COPY 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_TEXT_COPY 
+foreign import ccall "expEVT_COMMAND_TEXT_COPY" wx_expEVT_COMMAND_TEXT_COPY :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_TEXT_CUT@).
+{-# NOINLINE wxEVT_COMMAND_TEXT_CUT #-}
+wxEVT_COMMAND_TEXT_CUT ::  EventId
+wxEVT_COMMAND_TEXT_CUT 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_TEXT_CUT 
+foreign import ccall "expEVT_COMMAND_TEXT_CUT" wx_expEVT_COMMAND_TEXT_CUT :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_TEXT_ENTER@).
+{-# NOINLINE wxEVT_COMMAND_TEXT_ENTER #-}
+wxEVT_COMMAND_TEXT_ENTER ::  EventId
+wxEVT_COMMAND_TEXT_ENTER 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_TEXT_ENTER 
+foreign import ccall "expEVT_COMMAND_TEXT_ENTER" wx_expEVT_COMMAND_TEXT_ENTER :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_TEXT_MAXLEN@).
+{-# NOINLINE wxEVT_COMMAND_TEXT_MAXLEN #-}
+wxEVT_COMMAND_TEXT_MAXLEN ::  EventId
+wxEVT_COMMAND_TEXT_MAXLEN 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_TEXT_MAXLEN 
+foreign import ccall "expEVT_COMMAND_TEXT_MAXLEN" wx_expEVT_COMMAND_TEXT_MAXLEN :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_TEXT_PASTE@).
+{-# NOINLINE wxEVT_COMMAND_TEXT_PASTE #-}
+wxEVT_COMMAND_TEXT_PASTE ::  EventId
+wxEVT_COMMAND_TEXT_PASTE 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_TEXT_PASTE 
+foreign import ccall "expEVT_COMMAND_TEXT_PASTE" wx_expEVT_COMMAND_TEXT_PASTE :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_TEXT_UPDATED@).
+{-# NOINLINE wxEVT_COMMAND_TEXT_UPDATED #-}
+wxEVT_COMMAND_TEXT_UPDATED ::  EventId
+wxEVT_COMMAND_TEXT_UPDATED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_TEXT_UPDATED 
+foreign import ccall "expEVT_COMMAND_TEXT_UPDATED" wx_expEVT_COMMAND_TEXT_UPDATED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_TEXT_URL@).
+{-# NOINLINE wxEVT_COMMAND_TEXT_URL #-}
+wxEVT_COMMAND_TEXT_URL ::  EventId
+wxEVT_COMMAND_TEXT_URL 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_TEXT_URL 
+foreign import ccall "expEVT_COMMAND_TEXT_URL" wx_expEVT_COMMAND_TEXT_URL :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_THREAD@).
+{-# NOINLINE wxEVT_COMMAND_THREAD #-}
+wxEVT_COMMAND_THREAD ::  EventId
+wxEVT_COMMAND_THREAD 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_THREAD 
+foreign import ccall "expEVT_COMMAND_THREAD" wx_expEVT_COMMAND_THREAD :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_TOGGLEBUTTON_CLICKED@).
+{-# NOINLINE wxEVT_COMMAND_TOGGLEBUTTON_CLICKED #-}
+wxEVT_COMMAND_TOGGLEBUTTON_CLICKED ::  EventId
+wxEVT_COMMAND_TOGGLEBUTTON_CLICKED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_TOGGLEBUTTON_CLICKED 
+foreign import ccall "expEVT_COMMAND_TOGGLEBUTTON_CLICKED" wx_expEVT_COMMAND_TOGGLEBUTTON_CLICKED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_TOOLBOOK_PAGE_CHANGED@).
+{-# NOINLINE wxEVT_COMMAND_TOOLBOOK_PAGE_CHANGED #-}
+wxEVT_COMMAND_TOOLBOOK_PAGE_CHANGED ::  EventId
+wxEVT_COMMAND_TOOLBOOK_PAGE_CHANGED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_TOOLBOOK_PAGE_CHANGED 
+foreign import ccall "expEVT_COMMAND_TOOLBOOK_PAGE_CHANGED" wx_expEVT_COMMAND_TOOLBOOK_PAGE_CHANGED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_TOOLBOOK_PAGE_CHANGING@).
+{-# NOINLINE wxEVT_COMMAND_TOOLBOOK_PAGE_CHANGING #-}
+wxEVT_COMMAND_TOOLBOOK_PAGE_CHANGING ::  EventId
+wxEVT_COMMAND_TOOLBOOK_PAGE_CHANGING 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_TOOLBOOK_PAGE_CHANGING 
+foreign import ccall "expEVT_COMMAND_TOOLBOOK_PAGE_CHANGING" wx_expEVT_COMMAND_TOOLBOOK_PAGE_CHANGING :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_TOOL_CLICKED@).
+{-# NOINLINE wxEVT_COMMAND_TOOL_CLICKED #-}
+wxEVT_COMMAND_TOOL_CLICKED ::  EventId
+wxEVT_COMMAND_TOOL_CLICKED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_TOOL_CLICKED 
+foreign import ccall "expEVT_COMMAND_TOOL_CLICKED" wx_expEVT_COMMAND_TOOL_CLICKED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_TOOL_DROPDOWN_CLICKED@).
+{-# NOINLINE wxEVT_COMMAND_TOOL_DROPDOWN_CLICKED #-}
+wxEVT_COMMAND_TOOL_DROPDOWN_CLICKED ::  EventId
+wxEVT_COMMAND_TOOL_DROPDOWN_CLICKED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_TOOL_DROPDOWN_CLICKED 
+foreign import ccall "expEVT_COMMAND_TOOL_DROPDOWN_CLICKED" wx_expEVT_COMMAND_TOOL_DROPDOWN_CLICKED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_TOOL_ENTER@).
+{-# NOINLINE wxEVT_COMMAND_TOOL_ENTER #-}
+wxEVT_COMMAND_TOOL_ENTER ::  EventId
+wxEVT_COMMAND_TOOL_ENTER 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_TOOL_ENTER 
+foreign import ccall "expEVT_COMMAND_TOOL_ENTER" wx_expEVT_COMMAND_TOOL_ENTER :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_TOOL_RCLICKED@).
+{-# NOINLINE wxEVT_COMMAND_TOOL_RCLICKED #-}
+wxEVT_COMMAND_TOOL_RCLICKED ::  EventId
+wxEVT_COMMAND_TOOL_RCLICKED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_TOOL_RCLICKED 
+foreign import ccall "expEVT_COMMAND_TOOL_RCLICKED" wx_expEVT_COMMAND_TOOL_RCLICKED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_TREEBOOK_NODE_COLLAPSED@).
+{-# NOINLINE wxEVT_COMMAND_TREEBOOK_NODE_COLLAPSED #-}
+wxEVT_COMMAND_TREEBOOK_NODE_COLLAPSED ::  EventId
+wxEVT_COMMAND_TREEBOOK_NODE_COLLAPSED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_TREEBOOK_NODE_COLLAPSED 
+foreign import ccall "expEVT_COMMAND_TREEBOOK_NODE_COLLAPSED" wx_expEVT_COMMAND_TREEBOOK_NODE_COLLAPSED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_TREEBOOK_NODE_EXPANDED@).
+{-# NOINLINE wxEVT_COMMAND_TREEBOOK_NODE_EXPANDED #-}
+wxEVT_COMMAND_TREEBOOK_NODE_EXPANDED ::  EventId
+wxEVT_COMMAND_TREEBOOK_NODE_EXPANDED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_TREEBOOK_NODE_EXPANDED 
+foreign import ccall "expEVT_COMMAND_TREEBOOK_NODE_EXPANDED" wx_expEVT_COMMAND_TREEBOOK_NODE_EXPANDED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_TREEBOOK_PAGE_CHANGED@).
+{-# NOINLINE wxEVT_COMMAND_TREEBOOK_PAGE_CHANGED #-}
+wxEVT_COMMAND_TREEBOOK_PAGE_CHANGED ::  EventId
+wxEVT_COMMAND_TREEBOOK_PAGE_CHANGED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_TREEBOOK_PAGE_CHANGED 
+foreign import ccall "expEVT_COMMAND_TREEBOOK_PAGE_CHANGED" wx_expEVT_COMMAND_TREEBOOK_PAGE_CHANGED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_TREEBOOK_PAGE_CHANGING@).
+{-# NOINLINE wxEVT_COMMAND_TREEBOOK_PAGE_CHANGING #-}
+wxEVT_COMMAND_TREEBOOK_PAGE_CHANGING ::  EventId
+wxEVT_COMMAND_TREEBOOK_PAGE_CHANGING 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_TREEBOOK_PAGE_CHANGING 
+foreign import ccall "expEVT_COMMAND_TREEBOOK_PAGE_CHANGING" wx_expEVT_COMMAND_TREEBOOK_PAGE_CHANGING :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_TREE_BEGIN_DRAG@).
+{-# NOINLINE wxEVT_COMMAND_TREE_BEGIN_DRAG #-}
+wxEVT_COMMAND_TREE_BEGIN_DRAG ::  EventId
+wxEVT_COMMAND_TREE_BEGIN_DRAG 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_TREE_BEGIN_DRAG 
+foreign import ccall "expEVT_COMMAND_TREE_BEGIN_DRAG" wx_expEVT_COMMAND_TREE_BEGIN_DRAG :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_TREE_BEGIN_LABEL_EDIT@).
+{-# NOINLINE wxEVT_COMMAND_TREE_BEGIN_LABEL_EDIT #-}
+wxEVT_COMMAND_TREE_BEGIN_LABEL_EDIT ::  EventId
+wxEVT_COMMAND_TREE_BEGIN_LABEL_EDIT 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_TREE_BEGIN_LABEL_EDIT 
+foreign import ccall "expEVT_COMMAND_TREE_BEGIN_LABEL_EDIT" wx_expEVT_COMMAND_TREE_BEGIN_LABEL_EDIT :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_TREE_BEGIN_RDRAG@).
+{-# NOINLINE wxEVT_COMMAND_TREE_BEGIN_RDRAG #-}
+wxEVT_COMMAND_TREE_BEGIN_RDRAG ::  EventId
+wxEVT_COMMAND_TREE_BEGIN_RDRAG 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_TREE_BEGIN_RDRAG 
+foreign import ccall "expEVT_COMMAND_TREE_BEGIN_RDRAG" wx_expEVT_COMMAND_TREE_BEGIN_RDRAG :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_TREE_DELETE_ITEM@).
+{-# NOINLINE wxEVT_COMMAND_TREE_DELETE_ITEM #-}
+wxEVT_COMMAND_TREE_DELETE_ITEM ::  EventId
+wxEVT_COMMAND_TREE_DELETE_ITEM 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_TREE_DELETE_ITEM 
+foreign import ccall "expEVT_COMMAND_TREE_DELETE_ITEM" wx_expEVT_COMMAND_TREE_DELETE_ITEM :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_TREE_END_DRAG@).
+{-# NOINLINE wxEVT_COMMAND_TREE_END_DRAG #-}
+wxEVT_COMMAND_TREE_END_DRAG ::  EventId
+wxEVT_COMMAND_TREE_END_DRAG 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_TREE_END_DRAG 
+foreign import ccall "expEVT_COMMAND_TREE_END_DRAG" wx_expEVT_COMMAND_TREE_END_DRAG :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_TREE_END_LABEL_EDIT@).
+{-# NOINLINE wxEVT_COMMAND_TREE_END_LABEL_EDIT #-}
+wxEVT_COMMAND_TREE_END_LABEL_EDIT ::  EventId
+wxEVT_COMMAND_TREE_END_LABEL_EDIT 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_TREE_END_LABEL_EDIT 
+foreign import ccall "expEVT_COMMAND_TREE_END_LABEL_EDIT" wx_expEVT_COMMAND_TREE_END_LABEL_EDIT :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_TREE_GET_INFO@).
+{-# NOINLINE wxEVT_COMMAND_TREE_GET_INFO #-}
+wxEVT_COMMAND_TREE_GET_INFO ::  EventId
+wxEVT_COMMAND_TREE_GET_INFO 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_TREE_GET_INFO 
+foreign import ccall "expEVT_COMMAND_TREE_GET_INFO" wx_expEVT_COMMAND_TREE_GET_INFO :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_TREE_ITEM_ACTIVATED@).
+{-# NOINLINE wxEVT_COMMAND_TREE_ITEM_ACTIVATED #-}
+wxEVT_COMMAND_TREE_ITEM_ACTIVATED ::  EventId
+wxEVT_COMMAND_TREE_ITEM_ACTIVATED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_TREE_ITEM_ACTIVATED 
+foreign import ccall "expEVT_COMMAND_TREE_ITEM_ACTIVATED" wx_expEVT_COMMAND_TREE_ITEM_ACTIVATED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_TREE_ITEM_COLLAPSED@).
+{-# NOINLINE wxEVT_COMMAND_TREE_ITEM_COLLAPSED #-}
+wxEVT_COMMAND_TREE_ITEM_COLLAPSED ::  EventId
+wxEVT_COMMAND_TREE_ITEM_COLLAPSED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_TREE_ITEM_COLLAPSED 
+foreign import ccall "expEVT_COMMAND_TREE_ITEM_COLLAPSED" wx_expEVT_COMMAND_TREE_ITEM_COLLAPSED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_TREE_ITEM_COLLAPSING@).
+{-# NOINLINE wxEVT_COMMAND_TREE_ITEM_COLLAPSING #-}
+wxEVT_COMMAND_TREE_ITEM_COLLAPSING ::  EventId
+wxEVT_COMMAND_TREE_ITEM_COLLAPSING 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_TREE_ITEM_COLLAPSING 
+foreign import ccall "expEVT_COMMAND_TREE_ITEM_COLLAPSING" wx_expEVT_COMMAND_TREE_ITEM_COLLAPSING :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_TREE_ITEM_EXPANDED@).
+{-# NOINLINE wxEVT_COMMAND_TREE_ITEM_EXPANDED #-}
+wxEVT_COMMAND_TREE_ITEM_EXPANDED ::  EventId
+wxEVT_COMMAND_TREE_ITEM_EXPANDED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_TREE_ITEM_EXPANDED 
+foreign import ccall "expEVT_COMMAND_TREE_ITEM_EXPANDED" wx_expEVT_COMMAND_TREE_ITEM_EXPANDED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_TREE_ITEM_EXPANDING@).
+{-# NOINLINE wxEVT_COMMAND_TREE_ITEM_EXPANDING #-}
+wxEVT_COMMAND_TREE_ITEM_EXPANDING ::  EventId
+wxEVT_COMMAND_TREE_ITEM_EXPANDING 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_TREE_ITEM_EXPANDING 
+foreign import ccall "expEVT_COMMAND_TREE_ITEM_EXPANDING" wx_expEVT_COMMAND_TREE_ITEM_EXPANDING :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_TREE_ITEM_GETTOOLTIP@).
+{-# NOINLINE wxEVT_COMMAND_TREE_ITEM_GETTOOLTIP #-}
+wxEVT_COMMAND_TREE_ITEM_GETTOOLTIP ::  EventId
+wxEVT_COMMAND_TREE_ITEM_GETTOOLTIP 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_TREE_ITEM_GETTOOLTIP 
+foreign import ccall "expEVT_COMMAND_TREE_ITEM_GETTOOLTIP" wx_expEVT_COMMAND_TREE_ITEM_GETTOOLTIP :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_TREE_ITEM_MENU@).
+{-# NOINLINE wxEVT_COMMAND_TREE_ITEM_MENU #-}
+wxEVT_COMMAND_TREE_ITEM_MENU ::  EventId
+wxEVT_COMMAND_TREE_ITEM_MENU 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_TREE_ITEM_MENU 
+foreign import ccall "expEVT_COMMAND_TREE_ITEM_MENU" wx_expEVT_COMMAND_TREE_ITEM_MENU :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_TREE_ITEM_MIDDLE_CLICK@).
+{-# NOINLINE wxEVT_COMMAND_TREE_ITEM_MIDDLE_CLICK #-}
+wxEVT_COMMAND_TREE_ITEM_MIDDLE_CLICK ::  EventId
+wxEVT_COMMAND_TREE_ITEM_MIDDLE_CLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_TREE_ITEM_MIDDLE_CLICK 
+foreign import ccall "expEVT_COMMAND_TREE_ITEM_MIDDLE_CLICK" wx_expEVT_COMMAND_TREE_ITEM_MIDDLE_CLICK :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_TREE_ITEM_RIGHT_CLICK@).
+{-# NOINLINE wxEVT_COMMAND_TREE_ITEM_RIGHT_CLICK #-}
+wxEVT_COMMAND_TREE_ITEM_RIGHT_CLICK ::  EventId
+wxEVT_COMMAND_TREE_ITEM_RIGHT_CLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_TREE_ITEM_RIGHT_CLICK 
+foreign import ccall "expEVT_COMMAND_TREE_ITEM_RIGHT_CLICK" wx_expEVT_COMMAND_TREE_ITEM_RIGHT_CLICK :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_TREE_KEY_DOWN@).
+{-# NOINLINE wxEVT_COMMAND_TREE_KEY_DOWN #-}
+wxEVT_COMMAND_TREE_KEY_DOWN ::  EventId
+wxEVT_COMMAND_TREE_KEY_DOWN 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_TREE_KEY_DOWN 
+foreign import ccall "expEVT_COMMAND_TREE_KEY_DOWN" wx_expEVT_COMMAND_TREE_KEY_DOWN :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_TREE_SEL_CHANGED@).
+{-# NOINLINE wxEVT_COMMAND_TREE_SEL_CHANGED #-}
+wxEVT_COMMAND_TREE_SEL_CHANGED ::  EventId
+wxEVT_COMMAND_TREE_SEL_CHANGED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_TREE_SEL_CHANGED 
+foreign import ccall "expEVT_COMMAND_TREE_SEL_CHANGED" wx_expEVT_COMMAND_TREE_SEL_CHANGED :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_TREE_SEL_CHANGING@).
+{-# NOINLINE wxEVT_COMMAND_TREE_SEL_CHANGING #-}
+wxEVT_COMMAND_TREE_SEL_CHANGING ::  EventId
+wxEVT_COMMAND_TREE_SEL_CHANGING 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_TREE_SEL_CHANGING 
+foreign import ccall "expEVT_COMMAND_TREE_SEL_CHANGING" wx_expEVT_COMMAND_TREE_SEL_CHANGING :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_TREE_SET_INFO@).
+{-# NOINLINE wxEVT_COMMAND_TREE_SET_INFO #-}
+wxEVT_COMMAND_TREE_SET_INFO ::  EventId
+wxEVT_COMMAND_TREE_SET_INFO 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_TREE_SET_INFO 
+foreign import ccall "expEVT_COMMAND_TREE_SET_INFO" wx_expEVT_COMMAND_TREE_SET_INFO :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_TREE_STATE_IMAGE_CLICK@).
+{-# NOINLINE wxEVT_COMMAND_TREE_STATE_IMAGE_CLICK #-}
+wxEVT_COMMAND_TREE_STATE_IMAGE_CLICK ::  EventId
+wxEVT_COMMAND_TREE_STATE_IMAGE_CLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_TREE_STATE_IMAGE_CLICK 
+foreign import ccall "expEVT_COMMAND_TREE_STATE_IMAGE_CLICK" wx_expEVT_COMMAND_TREE_STATE_IMAGE_CLICK :: IO CInt
+
+-- | usage: (@wxEVT_COMMAND_VLBOX_SELECTED@).
+{-# NOINLINE wxEVT_COMMAND_VLBOX_SELECTED #-}
+wxEVT_COMMAND_VLBOX_SELECTED ::  EventId
+wxEVT_COMMAND_VLBOX_SELECTED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_COMMAND_VLBOX_SELECTED 
+foreign import ccall "expEVT_COMMAND_VLBOX_SELECTED" wx_expEVT_COMMAND_VLBOX_SELECTED :: IO CInt
+
+-- | usage: (@wxEVT_CONTEXT_MENU@).
+{-# NOINLINE wxEVT_CONTEXT_MENU #-}
+wxEVT_CONTEXT_MENU ::  EventId
+wxEVT_CONTEXT_MENU 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_CONTEXT_MENU 
+foreign import ccall "expEVT_CONTEXT_MENU" wx_expEVT_CONTEXT_MENU :: IO CInt
+
+-- | usage: (@wxEVT_CREATE@).
+{-# NOINLINE wxEVT_CREATE #-}
+wxEVT_CREATE ::  EventId
+wxEVT_CREATE 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_CREATE 
+foreign import ccall "expEVT_CREATE" wx_expEVT_CREATE :: IO CInt
+
+-- | usage: (@wxEVT_DATE_CHANGED@).
+{-# NOINLINE wxEVT_DATE_CHANGED #-}
+wxEVT_DATE_CHANGED ::  EventId
+wxEVT_DATE_CHANGED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_DATE_CHANGED 
+foreign import ccall "expEVT_DATE_CHANGED" wx_expEVT_DATE_CHANGED :: IO CInt
+
+-- | usage: (@wxEVT_DELETE@).
+{-# NOINLINE wxEVT_DELETE #-}
+wxEVT_DELETE ::  EventId
+wxEVT_DELETE 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_DELETE 
+foreign import ccall "expEVT_DELETE" wx_expEVT_DELETE :: IO CInt
+
+-- | usage: (@wxEVT_DESTROY@).
+{-# NOINLINE wxEVT_DESTROY #-}
+wxEVT_DESTROY ::  EventId
+wxEVT_DESTROY 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_DESTROY 
+foreign import ccall "expEVT_DESTROY" wx_expEVT_DESTROY :: IO CInt
+
+-- | usage: (@wxEVT_DETAILED_HELP@).
+{-# NOINLINE wxEVT_DETAILED_HELP #-}
+wxEVT_DETAILED_HELP ::  EventId
+wxEVT_DETAILED_HELP 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_DETAILED_HELP 
+foreign import ccall "expEVT_DETAILED_HELP" wx_expEVT_DETAILED_HELP :: IO CInt
+
+-- | usage: (@wxEVT_DISPLAY_CHANGED@).
+{-# NOINLINE wxEVT_DISPLAY_CHANGED #-}
+wxEVT_DISPLAY_CHANGED ::  EventId
+wxEVT_DISPLAY_CHANGED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_DISPLAY_CHANGED 
+foreign import ccall "expEVT_DISPLAY_CHANGED" wx_expEVT_DISPLAY_CHANGED :: IO CInt
+
+-- | usage: (@wxEVT_DROP_FILES@).
+{-# NOINLINE wxEVT_DROP_FILES #-}
+wxEVT_DROP_FILES ::  EventId
+wxEVT_DROP_FILES 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_DROP_FILES 
+foreign import ccall "expEVT_DROP_FILES" wx_expEVT_DROP_FILES :: IO CInt
+
+-- | usage: (@wxEVT_END_PROCESS@).
+{-# NOINLINE wxEVT_END_PROCESS #-}
+wxEVT_END_PROCESS ::  EventId
+wxEVT_END_PROCESS 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_END_PROCESS 
+foreign import ccall "expEVT_END_PROCESS" wx_expEVT_END_PROCESS :: IO CInt
+
+-- | usage: (@wxEVT_END_SESSION@).
+{-# NOINLINE wxEVT_END_SESSION #-}
+wxEVT_END_SESSION ::  EventId
+wxEVT_END_SESSION 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_END_SESSION 
+foreign import ccall "expEVT_END_SESSION" wx_expEVT_END_SESSION :: IO CInt
+
+-- | usage: (@wxEVT_ENTER_WINDOW@).
+{-# NOINLINE wxEVT_ENTER_WINDOW #-}
+wxEVT_ENTER_WINDOW ::  EventId
+wxEVT_ENTER_WINDOW 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_ENTER_WINDOW 
+foreign import ccall "expEVT_ENTER_WINDOW" wx_expEVT_ENTER_WINDOW :: IO CInt
+
+-- | usage: (@wxEVT_ERASE_BACKGROUND@).
+{-# NOINLINE wxEVT_ERASE_BACKGROUND #-}
+wxEVT_ERASE_BACKGROUND ::  EventId
+wxEVT_ERASE_BACKGROUND 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_ERASE_BACKGROUND 
+foreign import ccall "expEVT_ERASE_BACKGROUND" wx_expEVT_ERASE_BACKGROUND :: IO CInt
+
+-- | usage: (@wxEVT_FILECTRL_FILEACTIVATED@).
+{-# NOINLINE wxEVT_FILECTRL_FILEACTIVATED #-}
+wxEVT_FILECTRL_FILEACTIVATED ::  EventId
+wxEVT_FILECTRL_FILEACTIVATED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_FILECTRL_FILEACTIVATED 
+foreign import ccall "expEVT_FILECTRL_FILEACTIVATED" wx_expEVT_FILECTRL_FILEACTIVATED :: IO CInt
+
+-- | usage: (@wxEVT_FILECTRL_FILTERCHANGED@).
+{-# NOINLINE wxEVT_FILECTRL_FILTERCHANGED #-}
+wxEVT_FILECTRL_FILTERCHANGED ::  EventId
+wxEVT_FILECTRL_FILTERCHANGED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_FILECTRL_FILTERCHANGED 
+foreign import ccall "expEVT_FILECTRL_FILTERCHANGED" wx_expEVT_FILECTRL_FILTERCHANGED :: IO CInt
+
+-- | usage: (@wxEVT_FILECTRL_FOLDERCHANGED@).
+{-# NOINLINE wxEVT_FILECTRL_FOLDERCHANGED #-}
+wxEVT_FILECTRL_FOLDERCHANGED ::  EventId
+wxEVT_FILECTRL_FOLDERCHANGED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_FILECTRL_FOLDERCHANGED 
+foreign import ccall "expEVT_FILECTRL_FOLDERCHANGED" wx_expEVT_FILECTRL_FOLDERCHANGED :: IO CInt
+
+-- | usage: (@wxEVT_FILECTRL_SELECTIONCHANGED@).
+{-# NOINLINE wxEVT_FILECTRL_SELECTIONCHANGED #-}
+wxEVT_FILECTRL_SELECTIONCHANGED ::  EventId
+wxEVT_FILECTRL_SELECTIONCHANGED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_FILECTRL_SELECTIONCHANGED 
+foreign import ccall "expEVT_FILECTRL_SELECTIONCHANGED" wx_expEVT_FILECTRL_SELECTIONCHANGED :: IO CInt
+
+-- | usage: (@wxEVT_FSWATCHER@).
+{-# NOINLINE wxEVT_FSWATCHER #-}
+wxEVT_FSWATCHER ::  EventId
+wxEVT_FSWATCHER 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_FSWATCHER 
+foreign import ccall "expEVT_FSWATCHER" wx_expEVT_FSWATCHER :: IO CInt
+
+-- | usage: (@wxEVT_GRID_CELL_BEGIN_DRAG@).
+{-# NOINLINE wxEVT_GRID_CELL_BEGIN_DRAG #-}
+wxEVT_GRID_CELL_BEGIN_DRAG ::  EventId
+wxEVT_GRID_CELL_BEGIN_DRAG 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_GRID_CELL_BEGIN_DRAG 
+foreign import ccall "expEVT_GRID_CELL_BEGIN_DRAG" wx_expEVT_GRID_CELL_BEGIN_DRAG :: IO CInt
+
+-- | usage: (@wxEVT_GRID_CELL_CHANGED@).
+{-# NOINLINE wxEVT_GRID_CELL_CHANGED #-}
+wxEVT_GRID_CELL_CHANGED ::  EventId
+wxEVT_GRID_CELL_CHANGED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_GRID_CELL_CHANGED 
+foreign import ccall "expEVT_GRID_CELL_CHANGED" wx_expEVT_GRID_CELL_CHANGED :: IO CInt
+
+-- | usage: (@wxEVT_GRID_CELL_CHANGING@).
+{-# NOINLINE wxEVT_GRID_CELL_CHANGING #-}
+wxEVT_GRID_CELL_CHANGING ::  EventId
+wxEVT_GRID_CELL_CHANGING 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_GRID_CELL_CHANGING 
+foreign import ccall "expEVT_GRID_CELL_CHANGING" wx_expEVT_GRID_CELL_CHANGING :: IO CInt
+
+-- | usage: (@wxEVT_GRID_CELL_LEFT_CLICK@).
+{-# NOINLINE wxEVT_GRID_CELL_LEFT_CLICK #-}
+wxEVT_GRID_CELL_LEFT_CLICK ::  EventId
+wxEVT_GRID_CELL_LEFT_CLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_GRID_CELL_LEFT_CLICK 
+foreign import ccall "expEVT_GRID_CELL_LEFT_CLICK" wx_expEVT_GRID_CELL_LEFT_CLICK :: IO CInt
+
+-- | usage: (@wxEVT_GRID_CELL_LEFT_DCLICK@).
+{-# NOINLINE wxEVT_GRID_CELL_LEFT_DCLICK #-}
+wxEVT_GRID_CELL_LEFT_DCLICK ::  EventId
+wxEVT_GRID_CELL_LEFT_DCLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_GRID_CELL_LEFT_DCLICK 
+foreign import ccall "expEVT_GRID_CELL_LEFT_DCLICK" wx_expEVT_GRID_CELL_LEFT_DCLICK :: IO CInt
+
+-- | usage: (@wxEVT_GRID_CELL_RIGHT_CLICK@).
+{-# NOINLINE wxEVT_GRID_CELL_RIGHT_CLICK #-}
+wxEVT_GRID_CELL_RIGHT_CLICK ::  EventId
+wxEVT_GRID_CELL_RIGHT_CLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_GRID_CELL_RIGHT_CLICK 
+foreign import ccall "expEVT_GRID_CELL_RIGHT_CLICK" wx_expEVT_GRID_CELL_RIGHT_CLICK :: IO CInt
+
+-- | usage: (@wxEVT_GRID_CELL_RIGHT_DCLICK@).
+{-# NOINLINE wxEVT_GRID_CELL_RIGHT_DCLICK #-}
+wxEVT_GRID_CELL_RIGHT_DCLICK ::  EventId
+wxEVT_GRID_CELL_RIGHT_DCLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_GRID_CELL_RIGHT_DCLICK 
+foreign import ccall "expEVT_GRID_CELL_RIGHT_DCLICK" wx_expEVT_GRID_CELL_RIGHT_DCLICK :: IO CInt
+
+-- | usage: (@wxEVT_GRID_COL_MOVE@).
+{-# NOINLINE wxEVT_GRID_COL_MOVE #-}
+wxEVT_GRID_COL_MOVE ::  EventId
+wxEVT_GRID_COL_MOVE 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_GRID_COL_MOVE 
+foreign import ccall "expEVT_GRID_COL_MOVE" wx_expEVT_GRID_COL_MOVE :: IO CInt
+
+-- | usage: (@wxEVT_GRID_COL_SIZE@).
+{-# NOINLINE wxEVT_GRID_COL_SIZE #-}
+wxEVT_GRID_COL_SIZE ::  EventId
+wxEVT_GRID_COL_SIZE 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_GRID_COL_SIZE 
+foreign import ccall "expEVT_GRID_COL_SIZE" wx_expEVT_GRID_COL_SIZE :: IO CInt
+
+-- | usage: (@wxEVT_GRID_COL_SORT@).
+{-# NOINLINE wxEVT_GRID_COL_SORT #-}
+wxEVT_GRID_COL_SORT ::  EventId
+wxEVT_GRID_COL_SORT 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_GRID_COL_SORT 
+foreign import ccall "expEVT_GRID_COL_SORT" wx_expEVT_GRID_COL_SORT :: IO CInt
+
+-- | usage: (@wxEVT_GRID_EDITOR_CREATED@).
+{-# NOINLINE wxEVT_GRID_EDITOR_CREATED #-}
+wxEVT_GRID_EDITOR_CREATED ::  EventId
+wxEVT_GRID_EDITOR_CREATED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_GRID_EDITOR_CREATED 
+foreign import ccall "expEVT_GRID_EDITOR_CREATED" wx_expEVT_GRID_EDITOR_CREATED :: IO CInt
+
+-- | usage: (@wxEVT_GRID_EDITOR_HIDDEN@).
+{-# NOINLINE wxEVT_GRID_EDITOR_HIDDEN #-}
+wxEVT_GRID_EDITOR_HIDDEN ::  EventId
+wxEVT_GRID_EDITOR_HIDDEN 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_GRID_EDITOR_HIDDEN 
+foreign import ccall "expEVT_GRID_EDITOR_HIDDEN" wx_expEVT_GRID_EDITOR_HIDDEN :: IO CInt
+
+-- | usage: (@wxEVT_GRID_EDITOR_SHOWN@).
+{-# NOINLINE wxEVT_GRID_EDITOR_SHOWN #-}
+wxEVT_GRID_EDITOR_SHOWN ::  EventId
+wxEVT_GRID_EDITOR_SHOWN 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_GRID_EDITOR_SHOWN 
+foreign import ccall "expEVT_GRID_EDITOR_SHOWN" wx_expEVT_GRID_EDITOR_SHOWN :: IO CInt
+
+-- | usage: (@wxEVT_GRID_LABEL_LEFT_CLICK@).
+{-# NOINLINE wxEVT_GRID_LABEL_LEFT_CLICK #-}
+wxEVT_GRID_LABEL_LEFT_CLICK ::  EventId
+wxEVT_GRID_LABEL_LEFT_CLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_GRID_LABEL_LEFT_CLICK 
+foreign import ccall "expEVT_GRID_LABEL_LEFT_CLICK" wx_expEVT_GRID_LABEL_LEFT_CLICK :: IO CInt
+
+-- | usage: (@wxEVT_GRID_LABEL_LEFT_DCLICK@).
+{-# NOINLINE wxEVT_GRID_LABEL_LEFT_DCLICK #-}
+wxEVT_GRID_LABEL_LEFT_DCLICK ::  EventId
+wxEVT_GRID_LABEL_LEFT_DCLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_GRID_LABEL_LEFT_DCLICK 
+foreign import ccall "expEVT_GRID_LABEL_LEFT_DCLICK" wx_expEVT_GRID_LABEL_LEFT_DCLICK :: IO CInt
+
+-- | usage: (@wxEVT_GRID_LABEL_RIGHT_CLICK@).
+{-# NOINLINE wxEVT_GRID_LABEL_RIGHT_CLICK #-}
+wxEVT_GRID_LABEL_RIGHT_CLICK ::  EventId
+wxEVT_GRID_LABEL_RIGHT_CLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_GRID_LABEL_RIGHT_CLICK 
+foreign import ccall "expEVT_GRID_LABEL_RIGHT_CLICK" wx_expEVT_GRID_LABEL_RIGHT_CLICK :: IO CInt
+
+-- | usage: (@wxEVT_GRID_LABEL_RIGHT_DCLICK@).
+{-# NOINLINE wxEVT_GRID_LABEL_RIGHT_DCLICK #-}
+wxEVT_GRID_LABEL_RIGHT_DCLICK ::  EventId
+wxEVT_GRID_LABEL_RIGHT_DCLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_GRID_LABEL_RIGHT_DCLICK 
+foreign import ccall "expEVT_GRID_LABEL_RIGHT_DCLICK" wx_expEVT_GRID_LABEL_RIGHT_DCLICK :: IO CInt
+
+-- | usage: (@wxEVT_GRID_RANGE_SELECT@).
+{-# NOINLINE wxEVT_GRID_RANGE_SELECT #-}
+wxEVT_GRID_RANGE_SELECT ::  EventId
+wxEVT_GRID_RANGE_SELECT 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_GRID_RANGE_SELECT 
+foreign import ccall "expEVT_GRID_RANGE_SELECT" wx_expEVT_GRID_RANGE_SELECT :: IO CInt
+
+-- | usage: (@wxEVT_GRID_ROW_SIZE@).
+{-# NOINLINE wxEVT_GRID_ROW_SIZE #-}
+wxEVT_GRID_ROW_SIZE ::  EventId
+wxEVT_GRID_ROW_SIZE 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_GRID_ROW_SIZE 
+foreign import ccall "expEVT_GRID_ROW_SIZE" wx_expEVT_GRID_ROW_SIZE :: IO CInt
+
+-- | usage: (@wxEVT_GRID_SELECT_CELL@).
+{-# NOINLINE wxEVT_GRID_SELECT_CELL #-}
+wxEVT_GRID_SELECT_CELL ::  EventId
+wxEVT_GRID_SELECT_CELL 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_GRID_SELECT_CELL 
+foreign import ccall "expEVT_GRID_SELECT_CELL" wx_expEVT_GRID_SELECT_CELL :: IO CInt
+
+-- | usage: (@wxEVT_HELP@).
+{-# NOINLINE wxEVT_HELP #-}
+wxEVT_HELP ::  EventId
+wxEVT_HELP 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_HELP 
+foreign import ccall "expEVT_HELP" wx_expEVT_HELP :: IO CInt
+
+-- | usage: (@wxEVT_HIBERNATE@).
+{-# NOINLINE wxEVT_HIBERNATE #-}
+wxEVT_HIBERNATE ::  EventId
+wxEVT_HIBERNATE 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_HIBERNATE 
+foreign import ccall "expEVT_HIBERNATE" wx_expEVT_HIBERNATE :: IO CInt
+
+-- | usage: (@wxEVT_HOTKEY@).
+{-# NOINLINE wxEVT_HOTKEY #-}
+wxEVT_HOTKEY ::  EventId
+wxEVT_HOTKEY 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_HOTKEY 
+foreign import ccall "expEVT_HOTKEY" wx_expEVT_HOTKEY :: IO CInt
+
+-- | usage: (@wxEVT_HTML_CELL_CLICKED@).
+{-# NOINLINE wxEVT_HTML_CELL_CLICKED #-}
+wxEVT_HTML_CELL_CLICKED ::  EventId
+wxEVT_HTML_CELL_CLICKED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_HTML_CELL_CLICKED 
+foreign import ccall "expEVT_HTML_CELL_CLICKED" wx_expEVT_HTML_CELL_CLICKED :: IO CInt
+
+-- | usage: (@wxEVT_HTML_CELL_MOUSE_HOVER@).
+{-# NOINLINE wxEVT_HTML_CELL_MOUSE_HOVER #-}
+wxEVT_HTML_CELL_MOUSE_HOVER ::  EventId
+wxEVT_HTML_CELL_MOUSE_HOVER 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_HTML_CELL_MOUSE_HOVER 
+foreign import ccall "expEVT_HTML_CELL_MOUSE_HOVER" wx_expEVT_HTML_CELL_MOUSE_HOVER :: IO CInt
+
+-- | usage: (@wxEVT_HTML_LINK_CLICKED@).
+{-# NOINLINE wxEVT_HTML_LINK_CLICKED #-}
+wxEVT_HTML_LINK_CLICKED ::  EventId
+wxEVT_HTML_LINK_CLICKED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_HTML_LINK_CLICKED 
+foreign import ccall "expEVT_HTML_LINK_CLICKED" wx_expEVT_HTML_LINK_CLICKED :: IO CInt
+
+-- | usage: (@wxEVT_HTML_SET_TITLE@).
+{-# NOINLINE wxEVT_HTML_SET_TITLE #-}
+wxEVT_HTML_SET_TITLE ::  EventId
+wxEVT_HTML_SET_TITLE 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_HTML_SET_TITLE 
+foreign import ccall "expEVT_HTML_SET_TITLE" wx_expEVT_HTML_SET_TITLE :: IO CInt
+
+-- | usage: (@wxEVT_ICONIZE@).
+{-# NOINLINE wxEVT_ICONIZE #-}
+wxEVT_ICONIZE ::  EventId
+wxEVT_ICONIZE 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_ICONIZE 
+foreign import ccall "expEVT_ICONIZE" wx_expEVT_ICONIZE :: IO CInt
+
+-- | usage: (@wxEVT_IDLE@).
+{-# NOINLINE wxEVT_IDLE #-}
+wxEVT_IDLE ::  EventId
+wxEVT_IDLE 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_IDLE 
+foreign import ccall "expEVT_IDLE" wx_expEVT_IDLE :: IO CInt
+
+-- | usage: (@wxEVT_INIT_DIALOG@).
+{-# NOINLINE wxEVT_INIT_DIALOG #-}
+wxEVT_INIT_DIALOG ::  EventId
+wxEVT_INIT_DIALOG 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_INIT_DIALOG 
+foreign import ccall "expEVT_INIT_DIALOG" wx_expEVT_INIT_DIALOG :: IO CInt
+
+-- | usage: (@wxEVT_INPUT_SINK@).
+{-# NOINLINE wxEVT_INPUT_SINK #-}
+wxEVT_INPUT_SINK ::  EventId
+wxEVT_INPUT_SINK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_INPUT_SINK 
+foreign import ccall "expEVT_INPUT_SINK" wx_expEVT_INPUT_SINK :: IO CInt
+
+-- | usage: (@wxEVT_KEY_DOWN@).
+{-# NOINLINE wxEVT_KEY_DOWN #-}
+wxEVT_KEY_DOWN ::  EventId
+wxEVT_KEY_DOWN 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_KEY_DOWN 
+foreign import ccall "expEVT_KEY_DOWN" wx_expEVT_KEY_DOWN :: IO CInt
+
+-- | usage: (@wxEVT_KEY_UP@).
+{-# NOINLINE wxEVT_KEY_UP #-}
+wxEVT_KEY_UP ::  EventId
+wxEVT_KEY_UP 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_KEY_UP 
+foreign import ccall "expEVT_KEY_UP" wx_expEVT_KEY_UP :: IO CInt
+
+-- | usage: (@wxEVT_KILL_FOCUS@).
+{-# NOINLINE wxEVT_KILL_FOCUS #-}
+wxEVT_KILL_FOCUS ::  EventId
+wxEVT_KILL_FOCUS 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_KILL_FOCUS 
+foreign import ccall "expEVT_KILL_FOCUS" wx_expEVT_KILL_FOCUS :: IO CInt
+
+-- | usage: (@wxEVT_LEAVE_WINDOW@).
+{-# NOINLINE wxEVT_LEAVE_WINDOW #-}
+wxEVT_LEAVE_WINDOW ::  EventId
+wxEVT_LEAVE_WINDOW 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_LEAVE_WINDOW 
+foreign import ccall "expEVT_LEAVE_WINDOW" wx_expEVT_LEAVE_WINDOW :: IO CInt
+
+-- | usage: (@wxEVT_LEFT_DCLICK@).
+{-# NOINLINE wxEVT_LEFT_DCLICK #-}
+wxEVT_LEFT_DCLICK ::  EventId
+wxEVT_LEFT_DCLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_LEFT_DCLICK 
+foreign import ccall "expEVT_LEFT_DCLICK" wx_expEVT_LEFT_DCLICK :: IO CInt
+
+-- | usage: (@wxEVT_LEFT_DOWN@).
+{-# NOINLINE wxEVT_LEFT_DOWN #-}
+wxEVT_LEFT_DOWN ::  EventId
+wxEVT_LEFT_DOWN 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_LEFT_DOWN 
+foreign import ccall "expEVT_LEFT_DOWN" wx_expEVT_LEFT_DOWN :: IO CInt
+
+-- | usage: (@wxEVT_LEFT_UP@).
+{-# NOINLINE wxEVT_LEFT_UP #-}
+wxEVT_LEFT_UP ::  EventId
+wxEVT_LEFT_UP 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_LEFT_UP 
+foreign import ccall "expEVT_LEFT_UP" wx_expEVT_LEFT_UP :: IO CInt
+
+-- | usage: (@wxEVT_MAXIMIZE@).
+{-# NOINLINE wxEVT_MAXIMIZE #-}
+wxEVT_MAXIMIZE ::  EventId
+wxEVT_MAXIMIZE 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_MAXIMIZE 
+foreign import ccall "expEVT_MAXIMIZE" wx_expEVT_MAXIMIZE :: IO CInt
+
+-- | usage: (@wxEVT_MENU_CLOSE@).
+{-# NOINLINE wxEVT_MENU_CLOSE #-}
+wxEVT_MENU_CLOSE ::  EventId
+wxEVT_MENU_CLOSE 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_MENU_CLOSE 
+foreign import ccall "expEVT_MENU_CLOSE" wx_expEVT_MENU_CLOSE :: IO CInt
+
+-- | usage: (@wxEVT_MENU_HIGHLIGHT@).
+{-# NOINLINE wxEVT_MENU_HIGHLIGHT #-}
+wxEVT_MENU_HIGHLIGHT ::  EventId
+wxEVT_MENU_HIGHLIGHT 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_MENU_HIGHLIGHT 
+foreign import ccall "expEVT_MENU_HIGHLIGHT" wx_expEVT_MENU_HIGHLIGHT :: IO CInt
+
+-- | usage: (@wxEVT_MENU_OPEN@).
+{-# NOINLINE wxEVT_MENU_OPEN #-}
+wxEVT_MENU_OPEN ::  EventId
+wxEVT_MENU_OPEN 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_MENU_OPEN 
+foreign import ccall "expEVT_MENU_OPEN" wx_expEVT_MENU_OPEN :: IO CInt
+
+-- | usage: (@wxEVT_MIDDLE_DCLICK@).
+{-# NOINLINE wxEVT_MIDDLE_DCLICK #-}
+wxEVT_MIDDLE_DCLICK ::  EventId
+wxEVT_MIDDLE_DCLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_MIDDLE_DCLICK 
+foreign import ccall "expEVT_MIDDLE_DCLICK" wx_expEVT_MIDDLE_DCLICK :: IO CInt
+
+-- | usage: (@wxEVT_MIDDLE_DOWN@).
+{-# NOINLINE wxEVT_MIDDLE_DOWN #-}
+wxEVT_MIDDLE_DOWN ::  EventId
+wxEVT_MIDDLE_DOWN 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_MIDDLE_DOWN 
+foreign import ccall "expEVT_MIDDLE_DOWN" wx_expEVT_MIDDLE_DOWN :: IO CInt
+
+-- | usage: (@wxEVT_MIDDLE_UP@).
+{-# NOINLINE wxEVT_MIDDLE_UP #-}
+wxEVT_MIDDLE_UP ::  EventId
+wxEVT_MIDDLE_UP 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_MIDDLE_UP 
+foreign import ccall "expEVT_MIDDLE_UP" wx_expEVT_MIDDLE_UP :: IO CInt
+
+-- | usage: (@wxEVT_MOTION@).
+{-# NOINLINE wxEVT_MOTION #-}
+wxEVT_MOTION ::  EventId
+wxEVT_MOTION 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_MOTION 
+foreign import ccall "expEVT_MOTION" wx_expEVT_MOTION :: IO CInt
+
+-- | usage: (@wxEVT_MOUSEWHEEL@).
+{-# NOINLINE wxEVT_MOUSEWHEEL #-}
+wxEVT_MOUSEWHEEL ::  EventId
+wxEVT_MOUSEWHEEL 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_MOUSEWHEEL 
+foreign import ccall "expEVT_MOUSEWHEEL" wx_expEVT_MOUSEWHEEL :: IO CInt
+
+-- | usage: (@wxEVT_MOUSE_CAPTURE_CHANGED@).
+{-# NOINLINE wxEVT_MOUSE_CAPTURE_CHANGED #-}
+wxEVT_MOUSE_CAPTURE_CHANGED ::  EventId
+wxEVT_MOUSE_CAPTURE_CHANGED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_MOUSE_CAPTURE_CHANGED 
+foreign import ccall "expEVT_MOUSE_CAPTURE_CHANGED" wx_expEVT_MOUSE_CAPTURE_CHANGED :: IO CInt
+
+-- | usage: (@wxEVT_MOUSE_CAPTURE_LOST@).
+{-# NOINLINE wxEVT_MOUSE_CAPTURE_LOST #-}
+wxEVT_MOUSE_CAPTURE_LOST ::  EventId
+wxEVT_MOUSE_CAPTURE_LOST 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_MOUSE_CAPTURE_LOST 
+foreign import ccall "expEVT_MOUSE_CAPTURE_LOST" wx_expEVT_MOUSE_CAPTURE_LOST :: IO CInt
+
+-- | usage: (@wxEVT_MOVE@).
+{-# NOINLINE wxEVT_MOVE #-}
+wxEVT_MOVE ::  EventId
+wxEVT_MOVE 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_MOVE 
+foreign import ccall "expEVT_MOVE" wx_expEVT_MOVE :: IO CInt
+
+-- | usage: (@wxEVT_MOVE_END@).
+{-# NOINLINE wxEVT_MOVE_END #-}
+wxEVT_MOVE_END ::  EventId
+wxEVT_MOVE_END 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_MOVE_END 
+foreign import ccall "expEVT_MOVE_END" wx_expEVT_MOVE_END :: IO CInt
+
+-- | usage: (@wxEVT_MOVE_START@).
+{-# NOINLINE wxEVT_MOVE_START #-}
+wxEVT_MOVE_START ::  EventId
+wxEVT_MOVE_START 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_MOVE_START 
+foreign import ccall "expEVT_MOVE_START" wx_expEVT_MOVE_START :: IO CInt
+
+-- | usage: (@wxEVT_MOVING@).
+{-# NOINLINE wxEVT_MOVING #-}
+wxEVT_MOVING ::  EventId
+wxEVT_MOVING 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_MOVING 
+foreign import ccall "expEVT_MOVING" wx_expEVT_MOVING :: IO CInt
+
+-- | usage: (@wxEVT_NAVIGATION_KEY@).
+{-# NOINLINE wxEVT_NAVIGATION_KEY #-}
+wxEVT_NAVIGATION_KEY ::  EventId
+wxEVT_NAVIGATION_KEY 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_NAVIGATION_KEY 
+foreign import ccall "expEVT_NAVIGATION_KEY" wx_expEVT_NAVIGATION_KEY :: IO CInt
+
+-- | usage: (@wxEVT_NC_PAINT@).
+{-# NOINLINE wxEVT_NC_PAINT #-}
+wxEVT_NC_PAINT ::  EventId
+wxEVT_NC_PAINT 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_NC_PAINT 
+foreign import ccall "expEVT_NC_PAINT" wx_expEVT_NC_PAINT :: IO CInt
+
+-- | usage: (@wxEVT_PAINT@).
+{-# NOINLINE wxEVT_PAINT #-}
+wxEVT_PAINT ::  EventId
+wxEVT_PAINT 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_PAINT 
+foreign import ccall "expEVT_PAINT" wx_expEVT_PAINT :: IO CInt
+
+-- | usage: (@wxEVT_PALETTE_CHANGED@).
+{-# NOINLINE wxEVT_PALETTE_CHANGED #-}
+wxEVT_PALETTE_CHANGED ::  EventId
+wxEVT_PALETTE_CHANGED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_PALETTE_CHANGED 
+foreign import ccall "expEVT_PALETTE_CHANGED" wx_expEVT_PALETTE_CHANGED :: IO CInt
+
+-- | usage: (@wxEVT_PG_CHANGED@).
+{-# NOINLINE wxEVT_PG_CHANGED #-}
+wxEVT_PG_CHANGED ::  EventId
+wxEVT_PG_CHANGED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_PG_CHANGED 
+foreign import ccall "expEVT_PG_CHANGED" wx_expEVT_PG_CHANGED :: IO CInt
+
+-- | usage: (@wxEVT_PG_CHANGING@).
+{-# NOINLINE wxEVT_PG_CHANGING #-}
+wxEVT_PG_CHANGING ::  EventId
+wxEVT_PG_CHANGING 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_PG_CHANGING 
+foreign import ccall "expEVT_PG_CHANGING" wx_expEVT_PG_CHANGING :: IO CInt
+
+-- | usage: (@wxEVT_PG_DOUBLE_CLICK@).
+{-# NOINLINE wxEVT_PG_DOUBLE_CLICK #-}
+wxEVT_PG_DOUBLE_CLICK ::  EventId
+wxEVT_PG_DOUBLE_CLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_PG_DOUBLE_CLICK 
+foreign import ccall "expEVT_PG_DOUBLE_CLICK" wx_expEVT_PG_DOUBLE_CLICK :: IO CInt
+
+-- | usage: (@wxEVT_PG_HIGHLIGHTED@).
+{-# NOINLINE wxEVT_PG_HIGHLIGHTED #-}
+wxEVT_PG_HIGHLIGHTED ::  EventId
+wxEVT_PG_HIGHLIGHTED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_PG_HIGHLIGHTED 
+foreign import ccall "expEVT_PG_HIGHLIGHTED" wx_expEVT_PG_HIGHLIGHTED :: IO CInt
+
+-- | usage: (@wxEVT_PG_ITEM_COLLAPSED@).
+{-# NOINLINE wxEVT_PG_ITEM_COLLAPSED #-}
+wxEVT_PG_ITEM_COLLAPSED ::  EventId
+wxEVT_PG_ITEM_COLLAPSED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_PG_ITEM_COLLAPSED 
+foreign import ccall "expEVT_PG_ITEM_COLLAPSED" wx_expEVT_PG_ITEM_COLLAPSED :: IO CInt
+
+-- | usage: (@wxEVT_PG_ITEM_EXPANDED@).
+{-# NOINLINE wxEVT_PG_ITEM_EXPANDED #-}
+wxEVT_PG_ITEM_EXPANDED ::  EventId
+wxEVT_PG_ITEM_EXPANDED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_PG_ITEM_EXPANDED 
+foreign import ccall "expEVT_PG_ITEM_EXPANDED" wx_expEVT_PG_ITEM_EXPANDED :: IO CInt
+
+-- | usage: (@wxEVT_PG_PAGE_CHANGED@).
+{-# NOINLINE wxEVT_PG_PAGE_CHANGED #-}
+wxEVT_PG_PAGE_CHANGED ::  EventId
+wxEVT_PG_PAGE_CHANGED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_PG_PAGE_CHANGED 
+foreign import ccall "expEVT_PG_PAGE_CHANGED" wx_expEVT_PG_PAGE_CHANGED :: IO CInt
+
+-- | usage: (@wxEVT_PG_RIGHT_CLICK@).
+{-# NOINLINE wxEVT_PG_RIGHT_CLICK #-}
+wxEVT_PG_RIGHT_CLICK ::  EventId
+wxEVT_PG_RIGHT_CLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_PG_RIGHT_CLICK 
+foreign import ccall "expEVT_PG_RIGHT_CLICK" wx_expEVT_PG_RIGHT_CLICK :: IO CInt
+
+-- | usage: (@wxEVT_PG_SELECTED@).
+{-# NOINLINE wxEVT_PG_SELECTED #-}
+wxEVT_PG_SELECTED ::  EventId
+wxEVT_PG_SELECTED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_PG_SELECTED 
+foreign import ccall "expEVT_PG_SELECTED" wx_expEVT_PG_SELECTED :: IO CInt
+
+-- | usage: (@wxEVT_POWER_RESUME@).
+{-# NOINLINE wxEVT_POWER_RESUME #-}
+wxEVT_POWER_RESUME ::  EventId
+wxEVT_POWER_RESUME 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_POWER_RESUME 
+foreign import ccall "expEVT_POWER_RESUME" wx_expEVT_POWER_RESUME :: IO CInt
+
+-- | usage: (@wxEVT_POWER_SUSPENDED@).
+{-# NOINLINE wxEVT_POWER_SUSPENDED #-}
+wxEVT_POWER_SUSPENDED ::  EventId
+wxEVT_POWER_SUSPENDED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_POWER_SUSPENDED 
+foreign import ccall "expEVT_POWER_SUSPENDED" wx_expEVT_POWER_SUSPENDED :: IO CInt
+
+-- | usage: (@wxEVT_POWER_SUSPENDING@).
+{-# NOINLINE wxEVT_POWER_SUSPENDING #-}
+wxEVT_POWER_SUSPENDING ::  EventId
+wxEVT_POWER_SUSPENDING 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_POWER_SUSPENDING 
+foreign import ccall "expEVT_POWER_SUSPENDING" wx_expEVT_POWER_SUSPENDING :: IO CInt
+
+-- | usage: (@wxEVT_POWER_SUSPEND_CANCEL@).
+{-# NOINLINE wxEVT_POWER_SUSPEND_CANCEL #-}
+wxEVT_POWER_SUSPEND_CANCEL ::  EventId
+wxEVT_POWER_SUSPEND_CANCEL 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_POWER_SUSPEND_CANCEL 
+foreign import ccall "expEVT_POWER_SUSPEND_CANCEL" wx_expEVT_POWER_SUSPEND_CANCEL :: IO CInt
+
+-- | usage: (@wxEVT_PRINT_BEGIN@).
+{-# NOINLINE wxEVT_PRINT_BEGIN #-}
+wxEVT_PRINT_BEGIN ::  EventId
+wxEVT_PRINT_BEGIN 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_PRINT_BEGIN 
+foreign import ccall "expEVT_PRINT_BEGIN" wx_expEVT_PRINT_BEGIN :: IO CInt
+
+-- | usage: (@wxEVT_PRINT_BEGIN_DOC@).
+{-# NOINLINE wxEVT_PRINT_BEGIN_DOC #-}
+wxEVT_PRINT_BEGIN_DOC ::  EventId
+wxEVT_PRINT_BEGIN_DOC 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_PRINT_BEGIN_DOC 
+foreign import ccall "expEVT_PRINT_BEGIN_DOC" wx_expEVT_PRINT_BEGIN_DOC :: IO CInt
+
+-- | usage: (@wxEVT_PRINT_END@).
+{-# NOINLINE wxEVT_PRINT_END #-}
+wxEVT_PRINT_END ::  EventId
+wxEVT_PRINT_END 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_PRINT_END 
+foreign import ccall "expEVT_PRINT_END" wx_expEVT_PRINT_END :: IO CInt
+
+-- | usage: (@wxEVT_PRINT_END_DOC@).
+{-# NOINLINE wxEVT_PRINT_END_DOC #-}
+wxEVT_PRINT_END_DOC ::  EventId
+wxEVT_PRINT_END_DOC 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_PRINT_END_DOC 
+foreign import ccall "expEVT_PRINT_END_DOC" wx_expEVT_PRINT_END_DOC :: IO CInt
+
+-- | usage: (@wxEVT_PRINT_PAGE@).
+{-# NOINLINE wxEVT_PRINT_PAGE #-}
+wxEVT_PRINT_PAGE ::  EventId
+wxEVT_PRINT_PAGE 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_PRINT_PAGE 
+foreign import ccall "expEVT_PRINT_PAGE" wx_expEVT_PRINT_PAGE :: IO CInt
+
+-- | usage: (@wxEVT_PRINT_PREPARE@).
+{-# NOINLINE wxEVT_PRINT_PREPARE #-}
+wxEVT_PRINT_PREPARE ::  EventId
+wxEVT_PRINT_PREPARE 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_PRINT_PREPARE 
+foreign import ccall "expEVT_PRINT_PREPARE" wx_expEVT_PRINT_PREPARE :: IO CInt
+
+-- | usage: (@wxEVT_QUERY_END_SESSION@).
+{-# NOINLINE wxEVT_QUERY_END_SESSION #-}
+wxEVT_QUERY_END_SESSION ::  EventId
+wxEVT_QUERY_END_SESSION 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_QUERY_END_SESSION 
+foreign import ccall "expEVT_QUERY_END_SESSION" wx_expEVT_QUERY_END_SESSION :: IO CInt
+
+-- | usage: (@wxEVT_QUERY_LAYOUT_INFO@).
+{-# NOINLINE wxEVT_QUERY_LAYOUT_INFO #-}
+wxEVT_QUERY_LAYOUT_INFO ::  EventId
+wxEVT_QUERY_LAYOUT_INFO 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_QUERY_LAYOUT_INFO 
+foreign import ccall "expEVT_QUERY_LAYOUT_INFO" wx_expEVT_QUERY_LAYOUT_INFO :: IO CInt
+
+-- | usage: (@wxEVT_QUERY_NEW_PALETTE@).
+{-# NOINLINE wxEVT_QUERY_NEW_PALETTE #-}
+wxEVT_QUERY_NEW_PALETTE ::  EventId
+wxEVT_QUERY_NEW_PALETTE 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_QUERY_NEW_PALETTE 
+foreign import ccall "expEVT_QUERY_NEW_PALETTE" wx_expEVT_QUERY_NEW_PALETTE :: IO CInt
+
+-- | usage: (@wxEVT_RIGHT_DCLICK@).
+{-# NOINLINE wxEVT_RIGHT_DCLICK #-}
+wxEVT_RIGHT_DCLICK ::  EventId
+wxEVT_RIGHT_DCLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_RIGHT_DCLICK 
+foreign import ccall "expEVT_RIGHT_DCLICK" wx_expEVT_RIGHT_DCLICK :: IO CInt
+
+-- | usage: (@wxEVT_RIGHT_DOWN@).
+{-# NOINLINE wxEVT_RIGHT_DOWN #-}
+wxEVT_RIGHT_DOWN ::  EventId
+wxEVT_RIGHT_DOWN 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_RIGHT_DOWN 
+foreign import ccall "expEVT_RIGHT_DOWN" wx_expEVT_RIGHT_DOWN :: IO CInt
+
+-- | usage: (@wxEVT_RIGHT_UP@).
+{-# NOINLINE wxEVT_RIGHT_UP #-}
+wxEVT_RIGHT_UP ::  EventId
+wxEVT_RIGHT_UP 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_RIGHT_UP 
+foreign import ccall "expEVT_RIGHT_UP" wx_expEVT_RIGHT_UP :: IO CInt
+
+-- | usage: (@wxEVT_SASH_DRAGGED@).
+{-# NOINLINE wxEVT_SASH_DRAGGED #-}
+wxEVT_SASH_DRAGGED ::  EventId
+wxEVT_SASH_DRAGGED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_SASH_DRAGGED 
+foreign import ccall "expEVT_SASH_DRAGGED" wx_expEVT_SASH_DRAGGED :: IO CInt
+
+-- | usage: (@wxEVT_SCROLLWIN_BOTTOM@).
+{-# NOINLINE wxEVT_SCROLLWIN_BOTTOM #-}
+wxEVT_SCROLLWIN_BOTTOM ::  EventId
+wxEVT_SCROLLWIN_BOTTOM 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_SCROLLWIN_BOTTOM 
+foreign import ccall "expEVT_SCROLLWIN_BOTTOM" wx_expEVT_SCROLLWIN_BOTTOM :: IO CInt
+
+-- | usage: (@wxEVT_SCROLLWIN_LINEDOWN@).
+{-# NOINLINE wxEVT_SCROLLWIN_LINEDOWN #-}
+wxEVT_SCROLLWIN_LINEDOWN ::  EventId
+wxEVT_SCROLLWIN_LINEDOWN 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_SCROLLWIN_LINEDOWN 
+foreign import ccall "expEVT_SCROLLWIN_LINEDOWN" wx_expEVT_SCROLLWIN_LINEDOWN :: IO CInt
+
+-- | usage: (@wxEVT_SCROLLWIN_LINEUP@).
+{-# NOINLINE wxEVT_SCROLLWIN_LINEUP #-}
+wxEVT_SCROLLWIN_LINEUP ::  EventId
+wxEVT_SCROLLWIN_LINEUP 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_SCROLLWIN_LINEUP 
+foreign import ccall "expEVT_SCROLLWIN_LINEUP" wx_expEVT_SCROLLWIN_LINEUP :: IO CInt
+
+-- | usage: (@wxEVT_SCROLLWIN_PAGEDOWN@).
+{-# NOINLINE wxEVT_SCROLLWIN_PAGEDOWN #-}
+wxEVT_SCROLLWIN_PAGEDOWN ::  EventId
+wxEVT_SCROLLWIN_PAGEDOWN 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_SCROLLWIN_PAGEDOWN 
+foreign import ccall "expEVT_SCROLLWIN_PAGEDOWN" wx_expEVT_SCROLLWIN_PAGEDOWN :: IO CInt
+
+-- | usage: (@wxEVT_SCROLLWIN_PAGEUP@).
+{-# NOINLINE wxEVT_SCROLLWIN_PAGEUP #-}
+wxEVT_SCROLLWIN_PAGEUP ::  EventId
+wxEVT_SCROLLWIN_PAGEUP 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_SCROLLWIN_PAGEUP 
+foreign import ccall "expEVT_SCROLLWIN_PAGEUP" wx_expEVT_SCROLLWIN_PAGEUP :: IO CInt
+
+-- | usage: (@wxEVT_SCROLLWIN_THUMBRELEASE@).
+{-# NOINLINE wxEVT_SCROLLWIN_THUMBRELEASE #-}
+wxEVT_SCROLLWIN_THUMBRELEASE ::  EventId
+wxEVT_SCROLLWIN_THUMBRELEASE 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_SCROLLWIN_THUMBRELEASE 
+foreign import ccall "expEVT_SCROLLWIN_THUMBRELEASE" wx_expEVT_SCROLLWIN_THUMBRELEASE :: IO CInt
+
+-- | usage: (@wxEVT_SCROLLWIN_THUMBTRACK@).
+{-# NOINLINE wxEVT_SCROLLWIN_THUMBTRACK #-}
+wxEVT_SCROLLWIN_THUMBTRACK ::  EventId
+wxEVT_SCROLLWIN_THUMBTRACK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_SCROLLWIN_THUMBTRACK 
+foreign import ccall "expEVT_SCROLLWIN_THUMBTRACK" wx_expEVT_SCROLLWIN_THUMBTRACK :: IO CInt
+
+-- | usage: (@wxEVT_SCROLLWIN_TOP@).
+{-# NOINLINE wxEVT_SCROLLWIN_TOP #-}
+wxEVT_SCROLLWIN_TOP ::  EventId
+wxEVT_SCROLLWIN_TOP 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_SCROLLWIN_TOP 
+foreign import ccall "expEVT_SCROLLWIN_TOP" wx_expEVT_SCROLLWIN_TOP :: IO CInt
+
+-- | usage: (@wxEVT_SCROLL_BOTTOM@).
+{-# NOINLINE wxEVT_SCROLL_BOTTOM #-}
+wxEVT_SCROLL_BOTTOM ::  EventId
+wxEVT_SCROLL_BOTTOM 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_SCROLL_BOTTOM 
+foreign import ccall "expEVT_SCROLL_BOTTOM" wx_expEVT_SCROLL_BOTTOM :: IO CInt
+
+-- | usage: (@wxEVT_SCROLL_CHANGED@).
+{-# NOINLINE wxEVT_SCROLL_CHANGED #-}
+wxEVT_SCROLL_CHANGED ::  EventId
+wxEVT_SCROLL_CHANGED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_SCROLL_CHANGED 
+foreign import ccall "expEVT_SCROLL_CHANGED" wx_expEVT_SCROLL_CHANGED :: IO CInt
+
+-- | usage: (@wxEVT_SCROLL_LINEDOWN@).
+{-# NOINLINE wxEVT_SCROLL_LINEDOWN #-}
+wxEVT_SCROLL_LINEDOWN ::  EventId
+wxEVT_SCROLL_LINEDOWN 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_SCROLL_LINEDOWN 
+foreign import ccall "expEVT_SCROLL_LINEDOWN" wx_expEVT_SCROLL_LINEDOWN :: IO CInt
+
+-- | usage: (@wxEVT_SCROLL_LINEUP@).
+{-# NOINLINE wxEVT_SCROLL_LINEUP #-}
+wxEVT_SCROLL_LINEUP ::  EventId
+wxEVT_SCROLL_LINEUP 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_SCROLL_LINEUP 
+foreign import ccall "expEVT_SCROLL_LINEUP" wx_expEVT_SCROLL_LINEUP :: IO CInt
+
+-- | usage: (@wxEVT_SCROLL_PAGEDOWN@).
+{-# NOINLINE wxEVT_SCROLL_PAGEDOWN #-}
+wxEVT_SCROLL_PAGEDOWN ::  EventId
+wxEVT_SCROLL_PAGEDOWN 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_SCROLL_PAGEDOWN 
+foreign import ccall "expEVT_SCROLL_PAGEDOWN" wx_expEVT_SCROLL_PAGEDOWN :: IO CInt
+
+-- | usage: (@wxEVT_SCROLL_PAGEUP@).
+{-# NOINLINE wxEVT_SCROLL_PAGEUP #-}
+wxEVT_SCROLL_PAGEUP ::  EventId
+wxEVT_SCROLL_PAGEUP 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_SCROLL_PAGEUP 
+foreign import ccall "expEVT_SCROLL_PAGEUP" wx_expEVT_SCROLL_PAGEUP :: IO CInt
+
+-- | usage: (@wxEVT_SCROLL_THUMBRELEASE@).
+{-# NOINLINE wxEVT_SCROLL_THUMBRELEASE #-}
+wxEVT_SCROLL_THUMBRELEASE ::  EventId
+wxEVT_SCROLL_THUMBRELEASE 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_SCROLL_THUMBRELEASE 
+foreign import ccall "expEVT_SCROLL_THUMBRELEASE" wx_expEVT_SCROLL_THUMBRELEASE :: IO CInt
+
+-- | usage: (@wxEVT_SCROLL_THUMBTRACK@).
+{-# NOINLINE wxEVT_SCROLL_THUMBTRACK #-}
+wxEVT_SCROLL_THUMBTRACK ::  EventId
+wxEVT_SCROLL_THUMBTRACK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_SCROLL_THUMBTRACK 
+foreign import ccall "expEVT_SCROLL_THUMBTRACK" wx_expEVT_SCROLL_THUMBTRACK :: IO CInt
+
+-- | usage: (@wxEVT_SCROLL_TOP@).
+{-# NOINLINE wxEVT_SCROLL_TOP #-}
+wxEVT_SCROLL_TOP ::  EventId
+wxEVT_SCROLL_TOP 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_SCROLL_TOP 
+foreign import ccall "expEVT_SCROLL_TOP" wx_expEVT_SCROLL_TOP :: IO CInt
+
+-- | usage: (@wxEVT_SET_CURSOR@).
+{-# NOINLINE wxEVT_SET_CURSOR #-}
+wxEVT_SET_CURSOR ::  EventId
+wxEVT_SET_CURSOR 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_SET_CURSOR 
+foreign import ccall "expEVT_SET_CURSOR" wx_expEVT_SET_CURSOR :: IO CInt
+
+-- | usage: (@wxEVT_SET_FOCUS@).
+{-# NOINLINE wxEVT_SET_FOCUS #-}
+wxEVT_SET_FOCUS ::  EventId
+wxEVT_SET_FOCUS 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_SET_FOCUS 
+foreign import ccall "expEVT_SET_FOCUS" wx_expEVT_SET_FOCUS :: IO CInt
+
+-- | usage: (@wxEVT_SHOW@).
+{-# NOINLINE wxEVT_SHOW #-}
+wxEVT_SHOW ::  EventId
+wxEVT_SHOW 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_SHOW 
+foreign import ccall "expEVT_SHOW" wx_expEVT_SHOW :: IO CInt
+
+-- | usage: (@wxEVT_SIZE@).
+{-# NOINLINE wxEVT_SIZE #-}
+wxEVT_SIZE ::  EventId
+wxEVT_SIZE 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_SIZE 
+foreign import ccall "expEVT_SIZE" wx_expEVT_SIZE :: IO CInt
+
+-- | usage: (@wxEVT_SIZING@).
+{-# NOINLINE wxEVT_SIZING #-}
+wxEVT_SIZING ::  EventId
+wxEVT_SIZING 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_SIZING 
+foreign import ccall "expEVT_SIZING" wx_expEVT_SIZING :: IO CInt
+
+-- | usage: (@wxEVT_SOCKET@).
+{-# NOINLINE wxEVT_SOCKET #-}
+wxEVT_SOCKET ::  EventId
+wxEVT_SOCKET 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_SOCKET 
+foreign import ccall "expEVT_SOCKET" wx_expEVT_SOCKET :: IO CInt
+
+-- | usage: (@wxEVT_SORT@).
+{-# NOINLINE wxEVT_SORT #-}
+wxEVT_SORT ::  EventId
+wxEVT_SORT 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_SORT 
+foreign import ccall "expEVT_SORT" wx_expEVT_SORT :: IO CInt
+
+-- | usage: (@wxEVT_SPIN@).
+{-# NOINLINE wxEVT_SPIN #-}
+wxEVT_SPIN ::  EventId
+wxEVT_SPIN 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_SPIN 
+foreign import ccall "expEVT_SPIN" wx_expEVT_SPIN :: IO CInt
+
+-- | usage: (@wxEVT_SPIN_DOWN@).
+{-# NOINLINE wxEVT_SPIN_DOWN #-}
+wxEVT_SPIN_DOWN ::  EventId
+wxEVT_SPIN_DOWN 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_SPIN_DOWN 
+foreign import ccall "expEVT_SPIN_DOWN" wx_expEVT_SPIN_DOWN :: IO CInt
+
+-- | usage: (@wxEVT_SPIN_UP@).
+{-# NOINLINE wxEVT_SPIN_UP #-}
+wxEVT_SPIN_UP ::  EventId
+wxEVT_SPIN_UP 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_SPIN_UP 
+foreign import ccall "expEVT_SPIN_UP" wx_expEVT_SPIN_UP :: IO CInt
+
+-- | usage: (@wxEVT_STC_AUTOCOMP_SELECTION@).
+{-# NOINLINE wxEVT_STC_AUTOCOMP_SELECTION #-}
+wxEVT_STC_AUTOCOMP_SELECTION ::  EventId
+wxEVT_STC_AUTOCOMP_SELECTION 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_STC_AUTOCOMP_SELECTION 
+foreign import ccall "expEVT_STC_AUTOCOMP_SELECTION" wx_expEVT_STC_AUTOCOMP_SELECTION :: IO CInt
+
+-- | usage: (@wxEVT_STC_CALLTIP_CLICK@).
+{-# NOINLINE wxEVT_STC_CALLTIP_CLICK #-}
+wxEVT_STC_CALLTIP_CLICK ::  EventId
+wxEVT_STC_CALLTIP_CLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_STC_CALLTIP_CLICK 
+foreign import ccall "expEVT_STC_CALLTIP_CLICK" wx_expEVT_STC_CALLTIP_CLICK :: IO CInt
+
+-- | usage: (@wxEVT_STC_CHANGE@).
+{-# NOINLINE wxEVT_STC_CHANGE #-}
+wxEVT_STC_CHANGE ::  EventId
+wxEVT_STC_CHANGE 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_STC_CHANGE 
+foreign import ccall "expEVT_STC_CHANGE" wx_expEVT_STC_CHANGE :: IO CInt
+
+-- | usage: (@wxEVT_STC_CHARADDED@).
+{-# NOINLINE wxEVT_STC_CHARADDED #-}
+wxEVT_STC_CHARADDED ::  EventId
+wxEVT_STC_CHARADDED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_STC_CHARADDED 
+foreign import ccall "expEVT_STC_CHARADDED" wx_expEVT_STC_CHARADDED :: IO CInt
+
+-- | usage: (@wxEVT_STC_DOUBLECLICK@).
+{-# NOINLINE wxEVT_STC_DOUBLECLICK #-}
+wxEVT_STC_DOUBLECLICK ::  EventId
+wxEVT_STC_DOUBLECLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_STC_DOUBLECLICK 
+foreign import ccall "expEVT_STC_DOUBLECLICK" wx_expEVT_STC_DOUBLECLICK :: IO CInt
+
+-- | usage: (@wxEVT_STC_DO_DROP@).
+{-# NOINLINE wxEVT_STC_DO_DROP #-}
+wxEVT_STC_DO_DROP ::  EventId
+wxEVT_STC_DO_DROP 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_STC_DO_DROP 
+foreign import ccall "expEVT_STC_DO_DROP" wx_expEVT_STC_DO_DROP :: IO CInt
+
+-- | usage: (@wxEVT_STC_DRAG_OVER@).
+{-# NOINLINE wxEVT_STC_DRAG_OVER #-}
+wxEVT_STC_DRAG_OVER ::  EventId
+wxEVT_STC_DRAG_OVER 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_STC_DRAG_OVER 
+foreign import ccall "expEVT_STC_DRAG_OVER" wx_expEVT_STC_DRAG_OVER :: IO CInt
+
+-- | usage: (@wxEVT_STC_DWELLEND@).
+{-# NOINLINE wxEVT_STC_DWELLEND #-}
+wxEVT_STC_DWELLEND ::  EventId
+wxEVT_STC_DWELLEND 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_STC_DWELLEND 
+foreign import ccall "expEVT_STC_DWELLEND" wx_expEVT_STC_DWELLEND :: IO CInt
+
+-- | usage: (@wxEVT_STC_DWELLSTART@).
+{-# NOINLINE wxEVT_STC_DWELLSTART #-}
+wxEVT_STC_DWELLSTART ::  EventId
+wxEVT_STC_DWELLSTART 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_STC_DWELLSTART 
+foreign import ccall "expEVT_STC_DWELLSTART" wx_expEVT_STC_DWELLSTART :: IO CInt
+
+-- | usage: (@wxEVT_STC_HOTSPOT_CLICK@).
+{-# NOINLINE wxEVT_STC_HOTSPOT_CLICK #-}
+wxEVT_STC_HOTSPOT_CLICK ::  EventId
+wxEVT_STC_HOTSPOT_CLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_STC_HOTSPOT_CLICK 
+foreign import ccall "expEVT_STC_HOTSPOT_CLICK" wx_expEVT_STC_HOTSPOT_CLICK :: IO CInt
+
+-- | usage: (@wxEVT_STC_HOTSPOT_DCLICK@).
+{-# NOINLINE wxEVT_STC_HOTSPOT_DCLICK #-}
+wxEVT_STC_HOTSPOT_DCLICK ::  EventId
+wxEVT_STC_HOTSPOT_DCLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_STC_HOTSPOT_DCLICK 
+foreign import ccall "expEVT_STC_HOTSPOT_DCLICK" wx_expEVT_STC_HOTSPOT_DCLICK :: IO CInt
+
+-- | usage: (@wxEVT_STC_KEY@).
+{-# NOINLINE wxEVT_STC_KEY #-}
+wxEVT_STC_KEY ::  EventId
+wxEVT_STC_KEY 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_STC_KEY 
+foreign import ccall "expEVT_STC_KEY" wx_expEVT_STC_KEY :: IO CInt
+
+-- | usage: (@wxEVT_STC_MACRORECORD@).
+{-# NOINLINE wxEVT_STC_MACRORECORD #-}
+wxEVT_STC_MACRORECORD ::  EventId
+wxEVT_STC_MACRORECORD 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_STC_MACRORECORD 
+foreign import ccall "expEVT_STC_MACRORECORD" wx_expEVT_STC_MACRORECORD :: IO CInt
+
+-- | usage: (@wxEVT_STC_MARGINCLICK@).
+{-# NOINLINE wxEVT_STC_MARGINCLICK #-}
+wxEVT_STC_MARGINCLICK ::  EventId
+wxEVT_STC_MARGINCLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_STC_MARGINCLICK 
+foreign import ccall "expEVT_STC_MARGINCLICK" wx_expEVT_STC_MARGINCLICK :: IO CInt
+
+-- | usage: (@wxEVT_STC_MODIFIED@).
+{-# NOINLINE wxEVT_STC_MODIFIED #-}
+wxEVT_STC_MODIFIED ::  EventId
+wxEVT_STC_MODIFIED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_STC_MODIFIED 
+foreign import ccall "expEVT_STC_MODIFIED" wx_expEVT_STC_MODIFIED :: IO CInt
+
+-- | usage: (@wxEVT_STC_NEEDSHOWN@).
+{-# NOINLINE wxEVT_STC_NEEDSHOWN #-}
+wxEVT_STC_NEEDSHOWN ::  EventId
+wxEVT_STC_NEEDSHOWN 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_STC_NEEDSHOWN 
+foreign import ccall "expEVT_STC_NEEDSHOWN" wx_expEVT_STC_NEEDSHOWN :: IO CInt
+
+-- | usage: (@wxEVT_STC_PAINTED@).
+{-# NOINLINE wxEVT_STC_PAINTED #-}
+wxEVT_STC_PAINTED ::  EventId
+wxEVT_STC_PAINTED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_STC_PAINTED 
+foreign import ccall "expEVT_STC_PAINTED" wx_expEVT_STC_PAINTED :: IO CInt
+
+-- | usage: (@wxEVT_STC_ROMODIFYATTEMPT@).
+{-# NOINLINE wxEVT_STC_ROMODIFYATTEMPT #-}
+wxEVT_STC_ROMODIFYATTEMPT ::  EventId
+wxEVT_STC_ROMODIFYATTEMPT 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_STC_ROMODIFYATTEMPT 
+foreign import ccall "expEVT_STC_ROMODIFYATTEMPT" wx_expEVT_STC_ROMODIFYATTEMPT :: IO CInt
+
+-- | usage: (@wxEVT_STC_SAVEPOINTLEFT@).
+{-# NOINLINE wxEVT_STC_SAVEPOINTLEFT #-}
+wxEVT_STC_SAVEPOINTLEFT ::  EventId
+wxEVT_STC_SAVEPOINTLEFT 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_STC_SAVEPOINTLEFT 
+foreign import ccall "expEVT_STC_SAVEPOINTLEFT" wx_expEVT_STC_SAVEPOINTLEFT :: IO CInt
+
+-- | usage: (@wxEVT_STC_SAVEPOINTREACHED@).
+{-# NOINLINE wxEVT_STC_SAVEPOINTREACHED #-}
+wxEVT_STC_SAVEPOINTREACHED ::  EventId
+wxEVT_STC_SAVEPOINTREACHED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_STC_SAVEPOINTREACHED 
+foreign import ccall "expEVT_STC_SAVEPOINTREACHED" wx_expEVT_STC_SAVEPOINTREACHED :: IO CInt
+
+-- | usage: (@wxEVT_STC_START_DRAG@).
+{-# NOINLINE wxEVT_STC_START_DRAG #-}
+wxEVT_STC_START_DRAG ::  EventId
+wxEVT_STC_START_DRAG 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_STC_START_DRAG 
+foreign import ccall "expEVT_STC_START_DRAG" wx_expEVT_STC_START_DRAG :: IO CInt
+
+-- | usage: (@wxEVT_STC_STYLENEEDED@).
+{-# NOINLINE wxEVT_STC_STYLENEEDED #-}
+wxEVT_STC_STYLENEEDED ::  EventId
+wxEVT_STC_STYLENEEDED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_STC_STYLENEEDED 
+foreign import ccall "expEVT_STC_STYLENEEDED" wx_expEVT_STC_STYLENEEDED :: IO CInt
+
+-- | usage: (@wxEVT_STC_UPDATEUI@).
+{-# NOINLINE wxEVT_STC_UPDATEUI #-}
+wxEVT_STC_UPDATEUI ::  EventId
+wxEVT_STC_UPDATEUI 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_STC_UPDATEUI 
+foreign import ccall "expEVT_STC_UPDATEUI" wx_expEVT_STC_UPDATEUI :: IO CInt
+
+-- | usage: (@wxEVT_STC_URIDROPPED@).
+{-# NOINLINE wxEVT_STC_URIDROPPED #-}
+wxEVT_STC_URIDROPPED ::  EventId
+wxEVT_STC_URIDROPPED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_STC_URIDROPPED 
+foreign import ccall "expEVT_STC_URIDROPPED" wx_expEVT_STC_URIDROPPED :: IO CInt
+
+-- | usage: (@wxEVT_STC_USERLISTSELECTION@).
+{-# NOINLINE wxEVT_STC_USERLISTSELECTION #-}
+wxEVT_STC_USERLISTSELECTION ::  EventId
+wxEVT_STC_USERLISTSELECTION 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_STC_USERLISTSELECTION 
+foreign import ccall "expEVT_STC_USERLISTSELECTION" wx_expEVT_STC_USERLISTSELECTION :: IO CInt
+
+-- | usage: (@wxEVT_STC_ZOOM@).
+{-# NOINLINE wxEVT_STC_ZOOM #-}
+wxEVT_STC_ZOOM ::  EventId
+wxEVT_STC_ZOOM 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_STC_ZOOM 
+foreign import ccall "expEVT_STC_ZOOM" wx_expEVT_STC_ZOOM :: IO CInt
+
+-- | usage: (@wxEVT_SYS_COLOUR_CHANGED@).
+{-# NOINLINE wxEVT_SYS_COLOUR_CHANGED #-}
+wxEVT_SYS_COLOUR_CHANGED ::  EventId
+wxEVT_SYS_COLOUR_CHANGED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_SYS_COLOUR_CHANGED 
+foreign import ccall "expEVT_SYS_COLOUR_CHANGED" wx_expEVT_SYS_COLOUR_CHANGED :: IO CInt
+
+-- | usage: (@wxEVT_TASKBAR_BALLOON_CLICK@).
+{-# NOINLINE wxEVT_TASKBAR_BALLOON_CLICK #-}
+wxEVT_TASKBAR_BALLOON_CLICK ::  EventId
+wxEVT_TASKBAR_BALLOON_CLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_TASKBAR_BALLOON_CLICK 
+foreign import ccall "expEVT_TASKBAR_BALLOON_CLICK" wx_expEVT_TASKBAR_BALLOON_CLICK :: IO CInt
+
+-- | usage: (@wxEVT_TASKBAR_BALLOON_TIMEOUT@).
+{-# NOINLINE wxEVT_TASKBAR_BALLOON_TIMEOUT #-}
+wxEVT_TASKBAR_BALLOON_TIMEOUT ::  EventId
+wxEVT_TASKBAR_BALLOON_TIMEOUT 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_TASKBAR_BALLOON_TIMEOUT 
+foreign import ccall "expEVT_TASKBAR_BALLOON_TIMEOUT" wx_expEVT_TASKBAR_BALLOON_TIMEOUT :: IO CInt
+
+-- | usage: (@wxEVT_TASKBAR_LEFT_DCLICK@).
+{-# NOINLINE wxEVT_TASKBAR_LEFT_DCLICK #-}
+wxEVT_TASKBAR_LEFT_DCLICK ::  EventId
+wxEVT_TASKBAR_LEFT_DCLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_TASKBAR_LEFT_DCLICK 
+foreign import ccall "expEVT_TASKBAR_LEFT_DCLICK" wx_expEVT_TASKBAR_LEFT_DCLICK :: IO CInt
+
+-- | usage: (@wxEVT_TASKBAR_LEFT_DOWN@).
+{-# NOINLINE wxEVT_TASKBAR_LEFT_DOWN #-}
+wxEVT_TASKBAR_LEFT_DOWN ::  EventId
+wxEVT_TASKBAR_LEFT_DOWN 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_TASKBAR_LEFT_DOWN 
+foreign import ccall "expEVT_TASKBAR_LEFT_DOWN" wx_expEVT_TASKBAR_LEFT_DOWN :: IO CInt
+
+-- | usage: (@wxEVT_TASKBAR_LEFT_UP@).
+{-# NOINLINE wxEVT_TASKBAR_LEFT_UP #-}
+wxEVT_TASKBAR_LEFT_UP ::  EventId
+wxEVT_TASKBAR_LEFT_UP 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_TASKBAR_LEFT_UP 
+foreign import ccall "expEVT_TASKBAR_LEFT_UP" wx_expEVT_TASKBAR_LEFT_UP :: IO CInt
+
+-- | usage: (@wxEVT_TASKBAR_MOVE@).
+{-# NOINLINE wxEVT_TASKBAR_MOVE #-}
+wxEVT_TASKBAR_MOVE ::  EventId
+wxEVT_TASKBAR_MOVE 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_TASKBAR_MOVE 
+foreign import ccall "expEVT_TASKBAR_MOVE" wx_expEVT_TASKBAR_MOVE :: IO CInt
+
+-- | usage: (@wxEVT_TASKBAR_RIGHT_DCLICK@).
+{-# NOINLINE wxEVT_TASKBAR_RIGHT_DCLICK #-}
+wxEVT_TASKBAR_RIGHT_DCLICK ::  EventId
+wxEVT_TASKBAR_RIGHT_DCLICK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_TASKBAR_RIGHT_DCLICK 
+foreign import ccall "expEVT_TASKBAR_RIGHT_DCLICK" wx_expEVT_TASKBAR_RIGHT_DCLICK :: IO CInt
+
+-- | usage: (@wxEVT_TASKBAR_RIGHT_DOWN@).
+{-# NOINLINE wxEVT_TASKBAR_RIGHT_DOWN #-}
+wxEVT_TASKBAR_RIGHT_DOWN ::  EventId
+wxEVT_TASKBAR_RIGHT_DOWN 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_TASKBAR_RIGHT_DOWN 
+foreign import ccall "expEVT_TASKBAR_RIGHT_DOWN" wx_expEVT_TASKBAR_RIGHT_DOWN :: IO CInt
+
+-- | usage: (@wxEVT_TASKBAR_RIGHT_UP@).
+{-# NOINLINE wxEVT_TASKBAR_RIGHT_UP #-}
+wxEVT_TASKBAR_RIGHT_UP ::  EventId
+wxEVT_TASKBAR_RIGHT_UP 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_TASKBAR_RIGHT_UP 
+foreign import ccall "expEVT_TASKBAR_RIGHT_UP" wx_expEVT_TASKBAR_RIGHT_UP :: IO CInt
+
+-- | usage: (@wxEVT_TIMER@).
+{-# NOINLINE wxEVT_TIMER #-}
+wxEVT_TIMER ::  EventId
+wxEVT_TIMER 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_TIMER 
+foreign import ccall "expEVT_TIMER" wx_expEVT_TIMER :: IO CInt
+
+-- | usage: (@wxEVT_UPDATE_UI@).
+{-# NOINLINE wxEVT_UPDATE_UI #-}
+wxEVT_UPDATE_UI ::  EventId
+wxEVT_UPDATE_UI 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_UPDATE_UI 
+foreign import ccall "expEVT_UPDATE_UI" wx_expEVT_UPDATE_UI :: IO CInt
+
+-- | usage: (@wxEVT_WINDOW_MODAL_DIALOG_CLOSED@).
+{-# NOINLINE wxEVT_WINDOW_MODAL_DIALOG_CLOSED #-}
+wxEVT_WINDOW_MODAL_DIALOG_CLOSED ::  EventId
+wxEVT_WINDOW_MODAL_DIALOG_CLOSED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_WINDOW_MODAL_DIALOG_CLOSED 
+foreign import ccall "expEVT_WINDOW_MODAL_DIALOG_CLOSED" wx_expEVT_WINDOW_MODAL_DIALOG_CLOSED :: IO CInt
+
+-- | usage: (@wxEVT_WIZARD_CANCEL@).
+{-# NOINLINE wxEVT_WIZARD_CANCEL #-}
+wxEVT_WIZARD_CANCEL ::  EventId
+wxEVT_WIZARD_CANCEL 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_WIZARD_CANCEL 
+foreign import ccall "expEVT_WIZARD_CANCEL" wx_expEVT_WIZARD_CANCEL :: IO CInt
+
+-- | usage: (@wxEVT_WIZARD_FINISHED@).
+{-# NOINLINE wxEVT_WIZARD_FINISHED #-}
+wxEVT_WIZARD_FINISHED ::  EventId
+wxEVT_WIZARD_FINISHED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_WIZARD_FINISHED 
+foreign import ccall "expEVT_WIZARD_FINISHED" wx_expEVT_WIZARD_FINISHED :: IO CInt
+
+-- | usage: (@wxEVT_WIZARD_HELP@).
+{-# NOINLINE wxEVT_WIZARD_HELP #-}
+wxEVT_WIZARD_HELP ::  EventId
+wxEVT_WIZARD_HELP 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_WIZARD_HELP 
+foreign import ccall "expEVT_WIZARD_HELP" wx_expEVT_WIZARD_HELP :: IO CInt
+
+-- | usage: (@wxEVT_WIZARD_PAGE_CHANGED@).
+{-# NOINLINE wxEVT_WIZARD_PAGE_CHANGED #-}
+wxEVT_WIZARD_PAGE_CHANGED ::  EventId
+wxEVT_WIZARD_PAGE_CHANGED 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_WIZARD_PAGE_CHANGED 
+foreign import ccall "expEVT_WIZARD_PAGE_CHANGED" wx_expEVT_WIZARD_PAGE_CHANGED :: IO CInt
+
+-- | usage: (@wxEVT_WIZARD_PAGE_CHANGING@).
+{-# NOINLINE wxEVT_WIZARD_PAGE_CHANGING #-}
+wxEVT_WIZARD_PAGE_CHANGING ::  EventId
+wxEVT_WIZARD_PAGE_CHANGING 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_WIZARD_PAGE_CHANGING 
+foreign import ccall "expEVT_WIZARD_PAGE_CHANGING" wx_expEVT_WIZARD_PAGE_CHANGING :: IO CInt
+
+-- | usage: (@wxEVT_WIZARD_PAGE_SHOWN@).
+{-# NOINLINE wxEVT_WIZARD_PAGE_SHOWN #-}
+wxEVT_WIZARD_PAGE_SHOWN ::  EventId
+wxEVT_WIZARD_PAGE_SHOWN 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expEVT_WIZARD_PAGE_SHOWN 
+foreign import ccall "expEVT_WIZARD_PAGE_SHOWN" wx_expEVT_WIZARD_PAGE_SHOWN :: IO CInt
+
+-- | usage: (@wxK_ADD@).
+{-# NOINLINE wxK_ADD #-}
+wxK_ADD ::  Int
+wxK_ADD 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_ADD 
+foreign import ccall "expK_ADD" wx_expK_ADD :: IO CInt
+
+-- | usage: (@wxK_ALT@).
+{-# NOINLINE wxK_ALT #-}
+wxK_ALT ::  Int
+wxK_ALT 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_ALT 
+foreign import ccall "expK_ALT" wx_expK_ALT :: IO CInt
+
+-- | usage: (@wxK_BACK@).
+{-# NOINLINE wxK_BACK #-}
+wxK_BACK ::  Int
+wxK_BACK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_BACK 
+foreign import ccall "expK_BACK" wx_expK_BACK :: IO CInt
+
+-- | usage: (@wxK_CANCEL@).
+{-# NOINLINE wxK_CANCEL #-}
+wxK_CANCEL ::  Int
+wxK_CANCEL 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_CANCEL 
+foreign import ccall "expK_CANCEL" wx_expK_CANCEL :: IO CInt
+
+-- | usage: (@wxK_CAPITAL@).
+{-# NOINLINE wxK_CAPITAL #-}
+wxK_CAPITAL ::  Int
+wxK_CAPITAL 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_CAPITAL 
+foreign import ccall "expK_CAPITAL" wx_expK_CAPITAL :: IO CInt
+
+-- | usage: (@wxK_CLEAR@).
+{-# NOINLINE wxK_CLEAR #-}
+wxK_CLEAR ::  Int
+wxK_CLEAR 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_CLEAR 
+foreign import ccall "expK_CLEAR" wx_expK_CLEAR :: IO CInt
+
+-- | usage: (@wxK_CONTROL@).
+{-# NOINLINE wxK_CONTROL #-}
+wxK_CONTROL ::  Int
+wxK_CONTROL 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_CONTROL 
+foreign import ccall "expK_CONTROL" wx_expK_CONTROL :: IO CInt
+
+-- | usage: (@wxK_DECIMAL@).
+{-# NOINLINE wxK_DECIMAL #-}
+wxK_DECIMAL ::  Int
+wxK_DECIMAL 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_DECIMAL 
+foreign import ccall "expK_DECIMAL" wx_expK_DECIMAL :: IO CInt
+
+-- | usage: (@wxK_DELETE@).
+{-# NOINLINE wxK_DELETE #-}
+wxK_DELETE ::  Int
+wxK_DELETE 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_DELETE 
+foreign import ccall "expK_DELETE" wx_expK_DELETE :: IO CInt
+
+-- | usage: (@wxK_DIVIDE@).
+{-# NOINLINE wxK_DIVIDE #-}
+wxK_DIVIDE ::  Int
+wxK_DIVIDE 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_DIVIDE 
+foreign import ccall "expK_DIVIDE" wx_expK_DIVIDE :: IO CInt
+
+-- | usage: (@wxK_DOWN@).
+{-# NOINLINE wxK_DOWN #-}
+wxK_DOWN ::  Int
+wxK_DOWN 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_DOWN 
+foreign import ccall "expK_DOWN" wx_expK_DOWN :: IO CInt
+
+-- | usage: (@wxK_END@).
+{-# NOINLINE wxK_END #-}
+wxK_END ::  Int
+wxK_END 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_END 
+foreign import ccall "expK_END" wx_expK_END :: IO CInt
+
+-- | usage: (@wxK_ESCAPE@).
+{-# NOINLINE wxK_ESCAPE #-}
+wxK_ESCAPE ::  Int
+wxK_ESCAPE 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_ESCAPE 
+foreign import ccall "expK_ESCAPE" wx_expK_ESCAPE :: IO CInt
+
+-- | usage: (@wxK_EXECUTE@).
+{-# NOINLINE wxK_EXECUTE #-}
+wxK_EXECUTE ::  Int
+wxK_EXECUTE 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_EXECUTE 
+foreign import ccall "expK_EXECUTE" wx_expK_EXECUTE :: IO CInt
+
+-- | usage: (@wxK_F1@).
+{-# NOINLINE wxK_F1 #-}
+wxK_F1 ::  Int
+wxK_F1 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_F1 
+foreign import ccall "expK_F1" wx_expK_F1 :: IO CInt
+
+-- | usage: (@wxK_F10@).
+{-# NOINLINE wxK_F10 #-}
+wxK_F10 ::  Int
+wxK_F10 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_F10 
+foreign import ccall "expK_F10" wx_expK_F10 :: IO CInt
+
+-- | usage: (@wxK_F11@).
+{-# NOINLINE wxK_F11 #-}
+wxK_F11 ::  Int
+wxK_F11 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_F11 
+foreign import ccall "expK_F11" wx_expK_F11 :: IO CInt
+
+-- | usage: (@wxK_F12@).
+{-# NOINLINE wxK_F12 #-}
+wxK_F12 ::  Int
+wxK_F12 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_F12 
+foreign import ccall "expK_F12" wx_expK_F12 :: IO CInt
+
+-- | usage: (@wxK_F13@).
+{-# NOINLINE wxK_F13 #-}
+wxK_F13 ::  Int
+wxK_F13 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_F13 
+foreign import ccall "expK_F13" wx_expK_F13 :: IO CInt
+
+-- | usage: (@wxK_F14@).
+{-# NOINLINE wxK_F14 #-}
+wxK_F14 ::  Int
+wxK_F14 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_F14 
+foreign import ccall "expK_F14" wx_expK_F14 :: IO CInt
+
+-- | usage: (@wxK_F15@).
+{-# NOINLINE wxK_F15 #-}
+wxK_F15 ::  Int
+wxK_F15 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_F15 
+foreign import ccall "expK_F15" wx_expK_F15 :: IO CInt
+
+-- | usage: (@wxK_F16@).
+{-# NOINLINE wxK_F16 #-}
+wxK_F16 ::  Int
+wxK_F16 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_F16 
+foreign import ccall "expK_F16" wx_expK_F16 :: IO CInt
+
+-- | usage: (@wxK_F17@).
+{-# NOINLINE wxK_F17 #-}
+wxK_F17 ::  Int
+wxK_F17 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_F17 
+foreign import ccall "expK_F17" wx_expK_F17 :: IO CInt
+
+-- | usage: (@wxK_F18@).
+{-# NOINLINE wxK_F18 #-}
+wxK_F18 ::  Int
+wxK_F18 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_F18 
+foreign import ccall "expK_F18" wx_expK_F18 :: IO CInt
+
+-- | usage: (@wxK_F19@).
+{-# NOINLINE wxK_F19 #-}
+wxK_F19 ::  Int
+wxK_F19 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_F19 
+foreign import ccall "expK_F19" wx_expK_F19 :: IO CInt
+
+-- | usage: (@wxK_F2@).
+{-# NOINLINE wxK_F2 #-}
+wxK_F2 ::  Int
+wxK_F2 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_F2 
+foreign import ccall "expK_F2" wx_expK_F2 :: IO CInt
+
+-- | usage: (@wxK_F20@).
+{-# NOINLINE wxK_F20 #-}
+wxK_F20 ::  Int
+wxK_F20 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_F20 
+foreign import ccall "expK_F20" wx_expK_F20 :: IO CInt
+
+-- | usage: (@wxK_F21@).
+{-# NOINLINE wxK_F21 #-}
+wxK_F21 ::  Int
+wxK_F21 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_F21 
+foreign import ccall "expK_F21" wx_expK_F21 :: IO CInt
+
+-- | usage: (@wxK_F22@).
+{-# NOINLINE wxK_F22 #-}
+wxK_F22 ::  Int
+wxK_F22 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_F22 
+foreign import ccall "expK_F22" wx_expK_F22 :: IO CInt
+
+-- | usage: (@wxK_F23@).
+{-# NOINLINE wxK_F23 #-}
+wxK_F23 ::  Int
+wxK_F23 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_F23 
+foreign import ccall "expK_F23" wx_expK_F23 :: IO CInt
+
+-- | usage: (@wxK_F24@).
+{-# NOINLINE wxK_F24 #-}
+wxK_F24 ::  Int
+wxK_F24 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_F24 
+foreign import ccall "expK_F24" wx_expK_F24 :: IO CInt
+
+-- | usage: (@wxK_F3@).
+{-# NOINLINE wxK_F3 #-}
+wxK_F3 ::  Int
+wxK_F3 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_F3 
+foreign import ccall "expK_F3" wx_expK_F3 :: IO CInt
+
+-- | usage: (@wxK_F4@).
+{-# NOINLINE wxK_F4 #-}
+wxK_F4 ::  Int
+wxK_F4 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_F4 
+foreign import ccall "expK_F4" wx_expK_F4 :: IO CInt
+
+-- | usage: (@wxK_F5@).
+{-# NOINLINE wxK_F5 #-}
+wxK_F5 ::  Int
+wxK_F5 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_F5 
+foreign import ccall "expK_F5" wx_expK_F5 :: IO CInt
+
+-- | usage: (@wxK_F6@).
+{-# NOINLINE wxK_F6 #-}
+wxK_F6 ::  Int
+wxK_F6 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_F6 
+foreign import ccall "expK_F6" wx_expK_F6 :: IO CInt
+
+-- | usage: (@wxK_F7@).
+{-# NOINLINE wxK_F7 #-}
+wxK_F7 ::  Int
+wxK_F7 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_F7 
+foreign import ccall "expK_F7" wx_expK_F7 :: IO CInt
+
+-- | usage: (@wxK_F8@).
+{-# NOINLINE wxK_F8 #-}
+wxK_F8 ::  Int
+wxK_F8 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_F8 
+foreign import ccall "expK_F8" wx_expK_F8 :: IO CInt
+
+-- | usage: (@wxK_F9@).
+{-# NOINLINE wxK_F9 #-}
+wxK_F9 ::  Int
+wxK_F9 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_F9 
+foreign import ccall "expK_F9" wx_expK_F9 :: IO CInt
+
+-- | usage: (@wxK_HELP@).
+{-# NOINLINE wxK_HELP #-}
+wxK_HELP ::  Int
+wxK_HELP 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_HELP 
+foreign import ccall "expK_HELP" wx_expK_HELP :: IO CInt
+
+-- | usage: (@wxK_HOME@).
+{-# NOINLINE wxK_HOME #-}
+wxK_HOME ::  Int
+wxK_HOME 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_HOME 
+foreign import ccall "expK_HOME" wx_expK_HOME :: IO CInt
+
+-- | usage: (@wxK_INSERT@).
+{-# NOINLINE wxK_INSERT #-}
+wxK_INSERT ::  Int
+wxK_INSERT 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_INSERT 
+foreign import ccall "expK_INSERT" wx_expK_INSERT :: IO CInt
+
+-- | usage: (@wxK_LBUTTON@).
+{-# NOINLINE wxK_LBUTTON #-}
+wxK_LBUTTON ::  Int
+wxK_LBUTTON 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_LBUTTON 
+foreign import ccall "expK_LBUTTON" wx_expK_LBUTTON :: IO CInt
+
+-- | usage: (@wxK_LEFT@).
+{-# NOINLINE wxK_LEFT #-}
+wxK_LEFT ::  Int
+wxK_LEFT 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_LEFT 
+foreign import ccall "expK_LEFT" wx_expK_LEFT :: IO CInt
+
+-- | usage: (@wxK_MBUTTON@).
+{-# NOINLINE wxK_MBUTTON #-}
+wxK_MBUTTON ::  Int
+wxK_MBUTTON 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_MBUTTON 
+foreign import ccall "expK_MBUTTON" wx_expK_MBUTTON :: IO CInt
+
+-- | usage: (@wxK_MENU@).
+{-# NOINLINE wxK_MENU #-}
+wxK_MENU ::  Int
+wxK_MENU 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_MENU 
+foreign import ccall "expK_MENU" wx_expK_MENU :: IO CInt
+
+-- | usage: (@wxK_MULTIPLY@).
+{-# NOINLINE wxK_MULTIPLY #-}
+wxK_MULTIPLY ::  Int
+wxK_MULTIPLY 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_MULTIPLY 
+foreign import ccall "expK_MULTIPLY" wx_expK_MULTIPLY :: IO CInt
+
+-- | usage: (@wxK_NUMLOCK@).
+{-# NOINLINE wxK_NUMLOCK #-}
+wxK_NUMLOCK ::  Int
+wxK_NUMLOCK 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_NUMLOCK 
+foreign import ccall "expK_NUMLOCK" wx_expK_NUMLOCK :: IO CInt
+
+-- | usage: (@wxK_NUMPAD0@).
+{-# NOINLINE wxK_NUMPAD0 #-}
+wxK_NUMPAD0 ::  Int
+wxK_NUMPAD0 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_NUMPAD0 
+foreign import ccall "expK_NUMPAD0" wx_expK_NUMPAD0 :: IO CInt
+
+-- | usage: (@wxK_NUMPAD1@).
+{-# NOINLINE wxK_NUMPAD1 #-}
+wxK_NUMPAD1 ::  Int
+wxK_NUMPAD1 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_NUMPAD1 
+foreign import ccall "expK_NUMPAD1" wx_expK_NUMPAD1 :: IO CInt
+
+-- | usage: (@wxK_NUMPAD2@).
+{-# NOINLINE wxK_NUMPAD2 #-}
+wxK_NUMPAD2 ::  Int
+wxK_NUMPAD2 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_NUMPAD2 
+foreign import ccall "expK_NUMPAD2" wx_expK_NUMPAD2 :: IO CInt
+
+-- | usage: (@wxK_NUMPAD3@).
+{-# NOINLINE wxK_NUMPAD3 #-}
+wxK_NUMPAD3 ::  Int
+wxK_NUMPAD3 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_NUMPAD3 
+foreign import ccall "expK_NUMPAD3" wx_expK_NUMPAD3 :: IO CInt
+
+-- | usage: (@wxK_NUMPAD4@).
+{-# NOINLINE wxK_NUMPAD4 #-}
+wxK_NUMPAD4 ::  Int
+wxK_NUMPAD4 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_NUMPAD4 
+foreign import ccall "expK_NUMPAD4" wx_expK_NUMPAD4 :: IO CInt
+
+-- | usage: (@wxK_NUMPAD5@).
+{-# NOINLINE wxK_NUMPAD5 #-}
+wxK_NUMPAD5 ::  Int
+wxK_NUMPAD5 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_NUMPAD5 
+foreign import ccall "expK_NUMPAD5" wx_expK_NUMPAD5 :: IO CInt
+
+-- | usage: (@wxK_NUMPAD6@).
+{-# NOINLINE wxK_NUMPAD6 #-}
+wxK_NUMPAD6 ::  Int
+wxK_NUMPAD6 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_NUMPAD6 
+foreign import ccall "expK_NUMPAD6" wx_expK_NUMPAD6 :: IO CInt
+
+-- | usage: (@wxK_NUMPAD7@).
+{-# NOINLINE wxK_NUMPAD7 #-}
+wxK_NUMPAD7 ::  Int
+wxK_NUMPAD7 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_NUMPAD7 
+foreign import ccall "expK_NUMPAD7" wx_expK_NUMPAD7 :: IO CInt
+
+-- | usage: (@wxK_NUMPAD8@).
+{-# NOINLINE wxK_NUMPAD8 #-}
+wxK_NUMPAD8 ::  Int
+wxK_NUMPAD8 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_NUMPAD8 
+foreign import ccall "expK_NUMPAD8" wx_expK_NUMPAD8 :: IO CInt
+
+-- | usage: (@wxK_NUMPAD9@).
+{-# NOINLINE wxK_NUMPAD9 #-}
+wxK_NUMPAD9 ::  Int
+wxK_NUMPAD9 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_NUMPAD9 
+foreign import ccall "expK_NUMPAD9" wx_expK_NUMPAD9 :: IO CInt
+
+-- | usage: (@wxK_NUMPAD_ADD@).
+{-# NOINLINE wxK_NUMPAD_ADD #-}
+wxK_NUMPAD_ADD ::  Int
+wxK_NUMPAD_ADD 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_NUMPAD_ADD 
+foreign import ccall "expK_NUMPAD_ADD" wx_expK_NUMPAD_ADD :: IO CInt
+
+-- | usage: (@wxK_NUMPAD_BEGIN@).
+{-# NOINLINE wxK_NUMPAD_BEGIN #-}
+wxK_NUMPAD_BEGIN ::  Int
+wxK_NUMPAD_BEGIN 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_NUMPAD_BEGIN 
+foreign import ccall "expK_NUMPAD_BEGIN" wx_expK_NUMPAD_BEGIN :: IO CInt
+
+-- | usage: (@wxK_NUMPAD_DECIMAL@).
+{-# NOINLINE wxK_NUMPAD_DECIMAL #-}
+wxK_NUMPAD_DECIMAL ::  Int
+wxK_NUMPAD_DECIMAL 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_NUMPAD_DECIMAL 
+foreign import ccall "expK_NUMPAD_DECIMAL" wx_expK_NUMPAD_DECIMAL :: IO CInt
+
+-- | usage: (@wxK_NUMPAD_DELETE@).
+{-# NOINLINE wxK_NUMPAD_DELETE #-}
+wxK_NUMPAD_DELETE ::  Int
+wxK_NUMPAD_DELETE 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_NUMPAD_DELETE 
+foreign import ccall "expK_NUMPAD_DELETE" wx_expK_NUMPAD_DELETE :: IO CInt
+
+-- | usage: (@wxK_NUMPAD_DIVIDE@).
+{-# NOINLINE wxK_NUMPAD_DIVIDE #-}
+wxK_NUMPAD_DIVIDE ::  Int
+wxK_NUMPAD_DIVIDE 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_NUMPAD_DIVIDE 
+foreign import ccall "expK_NUMPAD_DIVIDE" wx_expK_NUMPAD_DIVIDE :: IO CInt
+
+-- | usage: (@wxK_NUMPAD_DOWN@).
+{-# NOINLINE wxK_NUMPAD_DOWN #-}
+wxK_NUMPAD_DOWN ::  Int
+wxK_NUMPAD_DOWN 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_NUMPAD_DOWN 
+foreign import ccall "expK_NUMPAD_DOWN" wx_expK_NUMPAD_DOWN :: IO CInt
+
+-- | usage: (@wxK_NUMPAD_END@).
+{-# NOINLINE wxK_NUMPAD_END #-}
+wxK_NUMPAD_END ::  Int
+wxK_NUMPAD_END 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_NUMPAD_END 
+foreign import ccall "expK_NUMPAD_END" wx_expK_NUMPAD_END :: IO CInt
+
+-- | usage: (@wxK_NUMPAD_ENTER@).
+{-# NOINLINE wxK_NUMPAD_ENTER #-}
+wxK_NUMPAD_ENTER ::  Int
+wxK_NUMPAD_ENTER 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_NUMPAD_ENTER 
+foreign import ccall "expK_NUMPAD_ENTER" wx_expK_NUMPAD_ENTER :: IO CInt
+
+-- | usage: (@wxK_NUMPAD_EQUAL@).
+{-# NOINLINE wxK_NUMPAD_EQUAL #-}
+wxK_NUMPAD_EQUAL ::  Int
+wxK_NUMPAD_EQUAL 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_NUMPAD_EQUAL 
+foreign import ccall "expK_NUMPAD_EQUAL" wx_expK_NUMPAD_EQUAL :: IO CInt
+
+-- | usage: (@wxK_NUMPAD_F1@).
+{-# NOINLINE wxK_NUMPAD_F1 #-}
+wxK_NUMPAD_F1 ::  Int
+wxK_NUMPAD_F1 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_NUMPAD_F1 
+foreign import ccall "expK_NUMPAD_F1" wx_expK_NUMPAD_F1 :: IO CInt
+
+-- | usage: (@wxK_NUMPAD_F2@).
+{-# NOINLINE wxK_NUMPAD_F2 #-}
+wxK_NUMPAD_F2 ::  Int
+wxK_NUMPAD_F2 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_NUMPAD_F2 
+foreign import ccall "expK_NUMPAD_F2" wx_expK_NUMPAD_F2 :: IO CInt
+
+-- | usage: (@wxK_NUMPAD_F3@).
+{-# NOINLINE wxK_NUMPAD_F3 #-}
+wxK_NUMPAD_F3 ::  Int
+wxK_NUMPAD_F3 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_NUMPAD_F3 
+foreign import ccall "expK_NUMPAD_F3" wx_expK_NUMPAD_F3 :: IO CInt
+
+-- | usage: (@wxK_NUMPAD_F4@).
+{-# NOINLINE wxK_NUMPAD_F4 #-}
+wxK_NUMPAD_F4 ::  Int
+wxK_NUMPAD_F4 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_NUMPAD_F4 
+foreign import ccall "expK_NUMPAD_F4" wx_expK_NUMPAD_F4 :: IO CInt
+
+-- | usage: (@wxK_NUMPAD_HOME@).
+{-# NOINLINE wxK_NUMPAD_HOME #-}
+wxK_NUMPAD_HOME ::  Int
+wxK_NUMPAD_HOME 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_NUMPAD_HOME 
+foreign import ccall "expK_NUMPAD_HOME" wx_expK_NUMPAD_HOME :: IO CInt
+
+-- | usage: (@wxK_NUMPAD_INSERT@).
+{-# NOINLINE wxK_NUMPAD_INSERT #-}
+wxK_NUMPAD_INSERT ::  Int
+wxK_NUMPAD_INSERT 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_NUMPAD_INSERT 
+foreign import ccall "expK_NUMPAD_INSERT" wx_expK_NUMPAD_INSERT :: IO CInt
+
+-- | usage: (@wxK_NUMPAD_LEFT@).
+{-# NOINLINE wxK_NUMPAD_LEFT #-}
+wxK_NUMPAD_LEFT ::  Int
+wxK_NUMPAD_LEFT 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_NUMPAD_LEFT 
+foreign import ccall "expK_NUMPAD_LEFT" wx_expK_NUMPAD_LEFT :: IO CInt
+
+-- | usage: (@wxK_NUMPAD_MULTIPLY@).
+{-# NOINLINE wxK_NUMPAD_MULTIPLY #-}
+wxK_NUMPAD_MULTIPLY ::  Int
+wxK_NUMPAD_MULTIPLY 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_NUMPAD_MULTIPLY 
+foreign import ccall "expK_NUMPAD_MULTIPLY" wx_expK_NUMPAD_MULTIPLY :: IO CInt
+
+-- | usage: (@wxK_NUMPAD_PAGEDOWN@).
+{-# NOINLINE wxK_NUMPAD_PAGEDOWN #-}
+wxK_NUMPAD_PAGEDOWN ::  Int
+wxK_NUMPAD_PAGEDOWN 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_NUMPAD_PAGEDOWN 
+foreign import ccall "expK_NUMPAD_PAGEDOWN" wx_expK_NUMPAD_PAGEDOWN :: IO CInt
+
+-- | usage: (@wxK_NUMPAD_PAGEUP@).
+{-# NOINLINE wxK_NUMPAD_PAGEUP #-}
+wxK_NUMPAD_PAGEUP ::  Int
+wxK_NUMPAD_PAGEUP 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_NUMPAD_PAGEUP 
+foreign import ccall "expK_NUMPAD_PAGEUP" wx_expK_NUMPAD_PAGEUP :: IO CInt
+
+-- | usage: (@wxK_NUMPAD_RIGHT@).
+{-# NOINLINE wxK_NUMPAD_RIGHT #-}
+wxK_NUMPAD_RIGHT ::  Int
+wxK_NUMPAD_RIGHT 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_NUMPAD_RIGHT 
+foreign import ccall "expK_NUMPAD_RIGHT" wx_expK_NUMPAD_RIGHT :: IO CInt
+
+-- | usage: (@wxK_NUMPAD_SEPARATOR@).
+{-# NOINLINE wxK_NUMPAD_SEPARATOR #-}
+wxK_NUMPAD_SEPARATOR ::  Int
+wxK_NUMPAD_SEPARATOR 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_NUMPAD_SEPARATOR 
+foreign import ccall "expK_NUMPAD_SEPARATOR" wx_expK_NUMPAD_SEPARATOR :: IO CInt
+
+-- | usage: (@wxK_NUMPAD_SPACE@).
+{-# NOINLINE wxK_NUMPAD_SPACE #-}
+wxK_NUMPAD_SPACE ::  Int
+wxK_NUMPAD_SPACE 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_NUMPAD_SPACE 
+foreign import ccall "expK_NUMPAD_SPACE" wx_expK_NUMPAD_SPACE :: IO CInt
+
+-- | usage: (@wxK_NUMPAD_SUBTRACT@).
+{-# NOINLINE wxK_NUMPAD_SUBTRACT #-}
+wxK_NUMPAD_SUBTRACT ::  Int
+wxK_NUMPAD_SUBTRACT 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_NUMPAD_SUBTRACT 
+foreign import ccall "expK_NUMPAD_SUBTRACT" wx_expK_NUMPAD_SUBTRACT :: IO CInt
+
+-- | usage: (@wxK_NUMPAD_TAB@).
+{-# NOINLINE wxK_NUMPAD_TAB #-}
+wxK_NUMPAD_TAB ::  Int
+wxK_NUMPAD_TAB 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_NUMPAD_TAB 
+foreign import ccall "expK_NUMPAD_TAB" wx_expK_NUMPAD_TAB :: IO CInt
+
+-- | usage: (@wxK_NUMPAD_UP@).
+{-# NOINLINE wxK_NUMPAD_UP #-}
+wxK_NUMPAD_UP ::  Int
+wxK_NUMPAD_UP 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_NUMPAD_UP 
+foreign import ccall "expK_NUMPAD_UP" wx_expK_NUMPAD_UP :: IO CInt
+
+-- | usage: (@wxK_PAGEDOWN@).
+{-# NOINLINE wxK_PAGEDOWN #-}
+wxK_PAGEDOWN ::  Int
+wxK_PAGEDOWN 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_PAGEDOWN 
+foreign import ccall "expK_PAGEDOWN" wx_expK_PAGEDOWN :: IO CInt
+
+-- | usage: (@wxK_PAGEUP@).
+{-# NOINLINE wxK_PAGEUP #-}
+wxK_PAGEUP ::  Int
+wxK_PAGEUP 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_PAGEUP 
+foreign import ccall "expK_PAGEUP" wx_expK_PAGEUP :: IO CInt
+
+-- | usage: (@wxK_PAUSE@).
+{-# NOINLINE wxK_PAUSE #-}
+wxK_PAUSE ::  Int
+wxK_PAUSE 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_PAUSE 
+foreign import ccall "expK_PAUSE" wx_expK_PAUSE :: IO CInt
+
+-- | usage: (@wxK_PRINT@).
+{-# NOINLINE wxK_PRINT #-}
+wxK_PRINT ::  Int
+wxK_PRINT 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_PRINT 
+foreign import ccall "expK_PRINT" wx_expK_PRINT :: IO CInt
+
+-- | usage: (@wxK_RBUTTON@).
+{-# NOINLINE wxK_RBUTTON #-}
+wxK_RBUTTON ::  Int
+wxK_RBUTTON 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_RBUTTON 
+foreign import ccall "expK_RBUTTON" wx_expK_RBUTTON :: IO CInt
+
+-- | usage: (@wxK_RETURN@).
+{-# NOINLINE wxK_RETURN #-}
+wxK_RETURN ::  Int
+wxK_RETURN 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_RETURN 
+foreign import ccall "expK_RETURN" wx_expK_RETURN :: IO CInt
+
+-- | usage: (@wxK_RIGHT@).
+{-# NOINLINE wxK_RIGHT #-}
+wxK_RIGHT ::  Int
+wxK_RIGHT 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_RIGHT 
+foreign import ccall "expK_RIGHT" wx_expK_RIGHT :: IO CInt
+
+-- | usage: (@wxK_SCROLL@).
+{-# NOINLINE wxK_SCROLL #-}
+wxK_SCROLL ::  Int
+wxK_SCROLL 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_SCROLL 
+foreign import ccall "expK_SCROLL" wx_expK_SCROLL :: IO CInt
+
+-- | usage: (@wxK_SELECT@).
+{-# NOINLINE wxK_SELECT #-}
+wxK_SELECT ::  Int
+wxK_SELECT 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_SELECT 
+foreign import ccall "expK_SELECT" wx_expK_SELECT :: IO CInt
+
+-- | usage: (@wxK_SEPARATOR@).
+{-# NOINLINE wxK_SEPARATOR #-}
+wxK_SEPARATOR ::  Int
+wxK_SEPARATOR 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_SEPARATOR 
+foreign import ccall "expK_SEPARATOR" wx_expK_SEPARATOR :: IO CInt
+
+-- | usage: (@wxK_SHIFT@).
+{-# NOINLINE wxK_SHIFT #-}
+wxK_SHIFT ::  Int
+wxK_SHIFT 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_SHIFT 
+foreign import ccall "expK_SHIFT" wx_expK_SHIFT :: IO CInt
+
+-- | usage: (@wxK_SNAPSHOT@).
+{-# NOINLINE wxK_SNAPSHOT #-}
+wxK_SNAPSHOT ::  Int
+wxK_SNAPSHOT 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_SNAPSHOT 
+foreign import ccall "expK_SNAPSHOT" wx_expK_SNAPSHOT :: IO CInt
+
+-- | usage: (@wxK_SPACE@).
+{-# NOINLINE wxK_SPACE #-}
+wxK_SPACE ::  Int
+wxK_SPACE 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_SPACE 
+foreign import ccall "expK_SPACE" wx_expK_SPACE :: IO CInt
+
+-- | usage: (@wxK_START@).
+{-# NOINLINE wxK_START #-}
+wxK_START ::  Int
+wxK_START 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_START 
+foreign import ccall "expK_START" wx_expK_START :: IO CInt
+
+-- | usage: (@wxK_SUBTRACT@).
+{-# NOINLINE wxK_SUBTRACT #-}
+wxK_SUBTRACT ::  Int
+wxK_SUBTRACT 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_SUBTRACT 
+foreign import ccall "expK_SUBTRACT" wx_expK_SUBTRACT :: IO CInt
+
+-- | usage: (@wxK_TAB@).
+{-# NOINLINE wxK_TAB #-}
+wxK_TAB ::  Int
+wxK_TAB 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_TAB 
+foreign import ccall "expK_TAB" wx_expK_TAB :: IO CInt
+
+-- | usage: (@wxK_UP@).
+{-# NOINLINE wxK_UP #-}
+wxK_UP ::  Int
+wxK_UP 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expK_UP 
+foreign import ccall "expK_UP" wx_expK_UP :: IO CInt
+
+-- | usage: (@wxNB_BOTTOM@).
+{-# NOINLINE wxNB_BOTTOM #-}
+wxNB_BOTTOM ::  Int
+wxNB_BOTTOM 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expNB_BOTTOM 
+foreign import ccall "expNB_BOTTOM" wx_expNB_BOTTOM :: IO CInt
+
+-- | usage: (@wxNB_LEFT@).
+{-# NOINLINE wxNB_LEFT #-}
+wxNB_LEFT ::  Int
+wxNB_LEFT 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expNB_LEFT 
+foreign import ccall "expNB_LEFT" wx_expNB_LEFT :: IO CInt
+
+-- | usage: (@wxNB_RIGHT@).
+{-# NOINLINE wxNB_RIGHT #-}
+wxNB_RIGHT ::  Int
+wxNB_RIGHT 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expNB_RIGHT 
+foreign import ccall "expNB_RIGHT" wx_expNB_RIGHT :: IO CInt
+
+-- | usage: (@wxNB_TOP@).
+{-# NOINLINE wxNB_TOP #-}
+wxNB_TOP ::  Int
+wxNB_TOP 
+  = unsafePerformIO $
+    withIntResult $
+    wx_expNB_TOP 
+foreign import ccall "expNB_TOP" wx_expNB_TOP :: IO CInt
+
+-- | usage: (@wxcAppBell@).
+wxcAppBell ::  IO ()
+wxcAppBell 
+  = wx_ELJApp_Bell 
+foreign import ccall "ELJApp_Bell" wx_ELJApp_Bell :: IO ()
+
+-- | usage: (@wxcAppCreateLogTarget@).
+wxcAppCreateLogTarget ::  IO (WXCLog  ())
+wxcAppCreateLogTarget 
+  = withObjectResult $
+    wx_ELJApp_CreateLogTarget 
+foreign import ccall "ELJApp_CreateLogTarget" wx_ELJApp_CreateLogTarget :: IO (Ptr (TWXCLog ()))
+
+-- | usage: (@wxcAppDispatch@).
+wxcAppDispatch ::  IO ()
+wxcAppDispatch 
+  = wx_ELJApp_Dispatch 
+foreign import ccall "ELJApp_Dispatch" wx_ELJApp_Dispatch :: IO ()
+
+-- | usage: (@wxcAppDisplaySize@).
+wxcAppDisplaySize ::  IO (Size)
+wxcAppDisplaySize 
+  = withWxSizeResult $
+    wx_ELJApp_DisplaySize 
+foreign import ccall "ELJApp_DisplaySize" wx_ELJApp_DisplaySize :: IO (Ptr (TWxSize ()))
+
+-- | usage: (@wxcAppEnableTooltips enable@).
+wxcAppEnableTooltips :: Bool ->  IO ()
+wxcAppEnableTooltips _enable 
+  = wx_ELJApp_EnableTooltips (toCBool _enable)  
+foreign import ccall "ELJApp_EnableTooltips" wx_ELJApp_EnableTooltips :: CBool -> IO ()
+
+-- | usage: (@wxcAppEnableTopLevelWindows enb@).
+wxcAppEnableTopLevelWindows :: Int ->  IO ()
+wxcAppEnableTopLevelWindows _enb 
+  = wx_ELJApp_EnableTopLevelWindows (toCInt _enb)  
+foreign import ccall "ELJApp_EnableTopLevelWindows" wx_ELJApp_EnableTopLevelWindows :: CInt -> IO ()
+
+-- | usage: (@wxcAppExecuteProcess cmd snc prc@).
+wxcAppExecuteProcess :: String -> Int -> Process  c ->  IO Int
+wxcAppExecuteProcess _cmd _snc _prc 
+  = withIntResult $
+    withStringPtr _cmd $ \cobj__cmd -> 
+    withObjectPtr _prc $ \cobj__prc -> 
+    wx_ELJApp_ExecuteProcess cobj__cmd  (toCInt _snc)  cobj__prc  
+foreign import ccall "ELJApp_ExecuteProcess" wx_ELJApp_ExecuteProcess :: Ptr (TWxString a) -> CInt -> Ptr (TProcess c) -> IO CInt
+
+-- | usage: (@wxcAppExit@).
+wxcAppExit ::  IO ()
+wxcAppExit 
+  = wx_ELJApp_Exit 
+foreign import ccall "ELJApp_Exit" wx_ELJApp_Exit :: IO ()
+
+-- | usage: (@wxcAppExitMainLoop@).
+wxcAppExitMainLoop ::  IO ()
+wxcAppExitMainLoop 
+  = wx_ELJApp_ExitMainLoop 
+foreign import ccall "ELJApp_ExitMainLoop" wx_ELJApp_ExitMainLoop :: IO ()
+
+-- | usage: (@wxcAppFindWindowById id prt@).
+wxcAppFindWindowById :: Id -> Window  b ->  IO (Ptr  ())
+wxcAppFindWindowById _id _prt 
+  = withObjectPtr _prt $ \cobj__prt -> 
+    wx_ELJApp_FindWindowById (toCInt _id)  cobj__prt  
+foreign import ccall "ELJApp_FindWindowById" wx_ELJApp_FindWindowById :: CInt -> Ptr (TWindow b) -> IO (Ptr  ())
+
+-- | usage: (@wxcAppFindWindowByLabel lbl prt@).
+wxcAppFindWindowByLabel :: String -> Window  b ->  IO (Window  ())
+wxcAppFindWindowByLabel _lbl _prt 
+  = withObjectResult $
+    withStringPtr _lbl $ \cobj__lbl -> 
+    withObjectPtr _prt $ \cobj__prt -> 
+    wx_ELJApp_FindWindowByLabel cobj__lbl  cobj__prt  
+foreign import ccall "ELJApp_FindWindowByLabel" wx_ELJApp_FindWindowByLabel :: Ptr (TWxString a) -> Ptr (TWindow b) -> IO (Ptr (TWindow ()))
+
+-- | usage: (@wxcAppFindWindowByName lbl prt@).
+wxcAppFindWindowByName :: String -> Window  b ->  IO (Window  ())
+wxcAppFindWindowByName _lbl _prt 
+  = withObjectResult $
+    withStringPtr _lbl $ \cobj__lbl -> 
+    withObjectPtr _prt $ \cobj__prt -> 
+    wx_ELJApp_FindWindowByName cobj__lbl  cobj__prt  
+foreign import ccall "ELJApp_FindWindowByName" wx_ELJApp_FindWindowByName :: Ptr (TWxString a) -> Ptr (TWindow b) -> IO (Ptr (TWindow ()))
+
+-- | usage: (@wxcAppGetApp@).
+wxcAppGetApp ::  IO (App  ())
+wxcAppGetApp 
+  = withObjectResult $
+    wx_ELJApp_GetApp 
+foreign import ccall "ELJApp_GetApp" wx_ELJApp_GetApp :: IO (Ptr (TApp ()))
+
+-- | usage: (@wxcAppGetAppName@).
+wxcAppGetAppName ::  IO (String)
+wxcAppGetAppName 
+  = withManagedStringResult $
+    wx_ELJApp_GetAppName 
+foreign import ccall "ELJApp_GetAppName" wx_ELJApp_GetAppName :: IO (Ptr (TWxString ()))
+
+-- | usage: (@wxcAppGetClassName@).
+wxcAppGetClassName ::  IO (String)
+wxcAppGetClassName 
+  = withManagedStringResult $
+    wx_ELJApp_GetClassName 
+foreign import ccall "ELJApp_GetClassName" wx_ELJApp_GetClassName :: IO (Ptr (TWxString ()))
+
+-- | usage: (@wxcAppGetExitOnFrameDelete@).
+wxcAppGetExitOnFrameDelete ::  IO Int
+wxcAppGetExitOnFrameDelete 
+  = withIntResult $
+    wx_ELJApp_GetExitOnFrameDelete 
+foreign import ccall "ELJApp_GetExitOnFrameDelete" wx_ELJApp_GetExitOnFrameDelete :: IO CInt
+
+-- | usage: (@wxcAppGetIdleInterval@).
+wxcAppGetIdleInterval ::  IO Int
+wxcAppGetIdleInterval 
+  = withIntResult $
+    wx_ELJApp_GetIdleInterval 
+foreign import ccall "ELJApp_GetIdleInterval" wx_ELJApp_GetIdleInterval :: IO CInt
+
+-- | usage: (@wxcAppGetOsDescription@).
+wxcAppGetOsDescription ::  IO (String)
+wxcAppGetOsDescription 
+  = withManagedStringResult $
+    wx_ELJApp_GetOsDescription 
+foreign import ccall "ELJApp_GetOsDescription" wx_ELJApp_GetOsDescription :: IO (Ptr (TWxString ()))
+
+-- | usage: (@wxcAppGetOsVersion maj min@).
+wxcAppGetOsVersion :: Ptr  a -> Ptr  b ->  IO Int
+wxcAppGetOsVersion _maj _min 
+  = withIntResult $
+    wx_ELJApp_GetOsVersion _maj  _min  
+foreign import ccall "ELJApp_GetOsVersion" wx_ELJApp_GetOsVersion :: Ptr  a -> Ptr  b -> IO CInt
+
+-- | usage: (@wxcAppGetTopWindow@).
+wxcAppGetTopWindow ::  IO (Window  ())
+wxcAppGetTopWindow 
+  = withObjectResult $
+    wx_ELJApp_GetTopWindow 
+foreign import ccall "ELJApp_GetTopWindow" wx_ELJApp_GetTopWindow :: IO (Ptr (TWindow ()))
+
+-- | usage: (@wxcAppGetUseBestVisual@).
+wxcAppGetUseBestVisual ::  IO Int
+wxcAppGetUseBestVisual 
+  = withIntResult $
+    wx_ELJApp_GetUseBestVisual 
+foreign import ccall "ELJApp_GetUseBestVisual" wx_ELJApp_GetUseBestVisual :: IO CInt
+
+-- | usage: (@wxcAppGetUserHome usr@).
+wxcAppGetUserHome :: Ptr  a ->  IO (String)
+wxcAppGetUserHome _usr 
+  = withManagedStringResult $
+    wx_ELJApp_GetUserHome _usr  
+foreign import ccall "ELJApp_GetUserHome" wx_ELJApp_GetUserHome :: Ptr  a -> IO (Ptr (TWxString ()))
+
+-- | usage: (@wxcAppGetUserId@).
+wxcAppGetUserId ::  IO (String)
+wxcAppGetUserId 
+  = withManagedStringResult $
+    wx_ELJApp_GetUserId 
+foreign import ccall "ELJApp_GetUserId" wx_ELJApp_GetUserId :: IO (Ptr (TWxString ()))
+
+-- | usage: (@wxcAppGetUserName@).
+wxcAppGetUserName ::  IO (String)
+wxcAppGetUserName 
+  = withManagedStringResult $
+    wx_ELJApp_GetUserName 
+foreign import ccall "ELJApp_GetUserName" wx_ELJApp_GetUserName :: IO (Ptr (TWxString ()))
+
+-- | usage: (@wxcAppGetVendorName@).
+wxcAppGetVendorName ::  IO (String)
+wxcAppGetVendorName 
+  = withManagedStringResult $
+    wx_ELJApp_GetVendorName 
+foreign import ccall "ELJApp_GetVendorName" wx_ELJApp_GetVendorName :: IO (Ptr (TWxString ()))
+
+-- | usage: (@wxcAppInitAllImageHandlers@).
+wxcAppInitAllImageHandlers ::  IO ()
+wxcAppInitAllImageHandlers 
+  = wx_ELJApp_InitAllImageHandlers 
+foreign import ccall "ELJApp_InitAllImageHandlers" wx_ELJApp_InitAllImageHandlers :: IO ()
+
+-- | usage: (@wxcAppInitializeC closure argc argv@).
+wxcAppInitializeC :: Closure  a -> Int -> Ptr (Ptr CWchar) ->  IO ()
+wxcAppInitializeC closure _argc _argv 
+  = withObjectPtr closure $ \cobj_closure -> 
+    wx_ELJApp_InitializeC cobj_closure  (toCInt _argc)  _argv  
+foreign import ccall "ELJApp_InitializeC" wx_ELJApp_InitializeC :: Ptr (TClosure a) -> CInt -> Ptr (Ptr CWchar) -> IO ()
+
+-- | usage: (@wxcAppInitialized@).
+wxcAppInitialized ::  IO Bool
+wxcAppInitialized 
+  = withBoolResult $
+    wx_ELJApp_Initialized 
+foreign import ccall "ELJApp_Initialized" wx_ELJApp_Initialized :: IO CBool
+
+-- | usage: (@wxcAppIsTerminating@).
+wxcAppIsTerminating ::  IO Bool
+wxcAppIsTerminating 
+  = withBoolResult $
+    wx_ELJApp_IsTerminating 
+foreign import ccall "ELJApp_IsTerminating" wx_ELJApp_IsTerminating :: IO CBool
+
+-- | usage: (@wxcAppMainLoop@).
+wxcAppMainLoop ::  IO Int
+wxcAppMainLoop 
+  = withIntResult $
+    wx_ELJApp_MainLoop 
+foreign import ccall "ELJApp_MainLoop" wx_ELJApp_MainLoop :: IO CInt
+
+-- | usage: (@wxcAppMilliSleep mscs@).
+wxcAppMilliSleep :: Int ->  IO ()
+wxcAppMilliSleep _mscs 
+  = wx_ELJApp_MilliSleep (toCInt _mscs)  
+foreign import ccall "ELJApp_MilliSleep" wx_ELJApp_MilliSleep :: CInt -> IO ()
+
+-- | usage: (@wxcAppMousePosition@).
+wxcAppMousePosition ::  IO (Point)
+wxcAppMousePosition 
+  = withWxPointResult $
+    wx_ELJApp_MousePosition 
+foreign import ccall "ELJApp_MousePosition" wx_ELJApp_MousePosition :: IO (Ptr (TWxPoint ()))
+
+-- | usage: (@wxcAppPending@).
+wxcAppPending ::  IO Int
+wxcAppPending 
+  = withIntResult $
+    wx_ELJApp_Pending 
+foreign import ccall "ELJApp_Pending" wx_ELJApp_Pending :: IO CInt
+
+-- | usage: (@wxcAppSafeYield win@).
+wxcAppSafeYield :: Window  a ->  IO Int
+wxcAppSafeYield _win 
+  = withIntResult $
+    withObjectPtr _win $ \cobj__win -> 
+    wx_ELJApp_SafeYield cobj__win  
+foreign import ccall "ELJApp_SafeYield" wx_ELJApp_SafeYield :: Ptr (TWindow a) -> IO CInt
+
+-- | usage: (@wxcAppSetAppName name@).
+wxcAppSetAppName :: String ->  IO ()
+wxcAppSetAppName name 
+  = withStringPtr name $ \cobj_name -> 
+    wx_ELJApp_SetAppName cobj_name  
+foreign import ccall "ELJApp_SetAppName" wx_ELJApp_SetAppName :: Ptr (TWxString a) -> IO ()
+
+-- | usage: (@wxcAppSetClassName name@).
+wxcAppSetClassName :: String ->  IO ()
+wxcAppSetClassName name 
+  = withStringPtr name $ \cobj_name -> 
+    wx_ELJApp_SetClassName cobj_name  
+foreign import ccall "ELJApp_SetClassName" wx_ELJApp_SetClassName :: Ptr (TWxString a) -> IO ()
+
+-- | usage: (@wxcAppSetExitOnFrameDelete flag@).
+wxcAppSetExitOnFrameDelete :: Int ->  IO ()
+wxcAppSetExitOnFrameDelete flag 
+  = wx_ELJApp_SetExitOnFrameDelete (toCInt flag)  
+foreign import ccall "ELJApp_SetExitOnFrameDelete" wx_ELJApp_SetExitOnFrameDelete :: CInt -> IO ()
+
+-- | usage: (@wxcAppSetIdleInterval interval@).
+wxcAppSetIdleInterval :: Int ->  IO ()
+wxcAppSetIdleInterval interval 
+  = wx_ELJApp_SetIdleInterval (toCInt interval)  
+foreign import ccall "ELJApp_SetIdleInterval" wx_ELJApp_SetIdleInterval :: CInt -> IO ()
+
+-- | usage: (@wxcAppSetPrintMode mode@).
+wxcAppSetPrintMode :: Int ->  IO ()
+wxcAppSetPrintMode mode 
+  = wx_ELJApp_SetPrintMode (toCInt mode)  
+foreign import ccall "ELJApp_SetPrintMode" wx_ELJApp_SetPrintMode :: CInt -> IO ()
+
+-- | usage: (@wxcAppSetTooltipDelay ms@).
+wxcAppSetTooltipDelay :: Int ->  IO ()
+wxcAppSetTooltipDelay _ms 
+  = wx_ELJApp_SetTooltipDelay (toCInt _ms)  
+foreign import ccall "ELJApp_SetTooltipDelay" wx_ELJApp_SetTooltipDelay :: CInt -> IO ()
+
+-- | usage: (@wxcAppSetTopWindow wnd@).
+wxcAppSetTopWindow :: Window  a ->  IO ()
+wxcAppSetTopWindow _wnd 
+  = withObjectPtr _wnd $ \cobj__wnd -> 
+    wx_ELJApp_SetTopWindow cobj__wnd  
+foreign import ccall "ELJApp_SetTopWindow" wx_ELJApp_SetTopWindow :: Ptr (TWindow a) -> IO ()
+
+-- | usage: (@wxcAppSetUseBestVisual flag@).
+wxcAppSetUseBestVisual :: Int ->  IO ()
+wxcAppSetUseBestVisual flag 
+  = wx_ELJApp_SetUseBestVisual (toCInt flag)  
+foreign import ccall "ELJApp_SetUseBestVisual" wx_ELJApp_SetUseBestVisual :: CInt -> IO ()
+
+-- | usage: (@wxcAppSetVendorName name@).
+wxcAppSetVendorName :: String ->  IO ()
+wxcAppSetVendorName name 
+  = withStringPtr name $ \cobj_name -> 
+    wx_ELJApp_SetVendorName cobj_name  
+foreign import ccall "ELJApp_SetVendorName" wx_ELJApp_SetVendorName :: Ptr (TWxString a) -> IO ()
+
+-- | usage: (@wxcAppSleep scs@).
+wxcAppSleep :: Int ->  IO ()
+wxcAppSleep _scs 
+  = wx_ELJApp_Sleep (toCInt _scs)  
+foreign import ccall "ELJApp_Sleep" wx_ELJApp_Sleep :: CInt -> IO ()
+
+-- | usage: (@wxcAppYield@).
+wxcAppYield ::  IO Int
+wxcAppYield 
+  = withIntResult $
+    wx_ELJApp_Yield 
+foreign import ccall "ELJApp_Yield" wx_ELJApp_Yield :: IO CInt
+
+-- | usage: (@wxcArtProvCreate obj clb@).
+wxcArtProvCreate :: Ptr  a -> Ptr  b ->  IO (WXCArtProv  ())
+wxcArtProvCreate _obj _clb 
+  = withObjectResult $
+    wx_ELJArtProv_Create _obj  _clb  
+foreign import ccall "ELJArtProv_Create" wx_ELJArtProv_Create :: Ptr  a -> Ptr  b -> IO (Ptr (TWXCArtProv ()))
+
+-- | usage: (@wxcArtProvRelease obj@).
+wxcArtProvRelease :: WXCArtProv  a ->  IO ()
+wxcArtProvRelease _obj 
+  = withObjectRef "wxcArtProvRelease" _obj $ \cobj__obj -> 
+    wx_ELJArtProv_Release cobj__obj  
+foreign import ccall "ELJArtProv_Release" wx_ELJArtProv_Release :: Ptr (TWXCArtProv a) -> IO ()
+
+-- | usage: (@wxcBeginBusyCursor@).
+wxcBeginBusyCursor ::  IO ()
+wxcBeginBusyCursor 
+  = wx_wxcBeginBusyCursor 
+foreign import ccall "wxcBeginBusyCursor" wx_wxcBeginBusyCursor :: IO ()
+
+-- | usage: (@wxcBell@).
+wxcBell ::  IO ()
+wxcBell 
+  = wx_wxcBell 
+foreign import ccall "wxcBell" wx_wxcBell :: IO ()
+
+-- | usage: (@wxcDragDataObjectCreate obj fmt func1 func2 func3@).
+wxcDragDataObjectCreate :: Ptr  a -> String -> Ptr  c -> Ptr  d -> Ptr  e ->  IO (WXCDragDataObject  ())
+wxcDragDataObjectCreate _obj _fmt _func1 _func2 _func3 
+  = withObjectResult $
+    withStringPtr _fmt $ \cobj__fmt -> 
+    wx_ELJDragDataObject_Create _obj  cobj__fmt  _func1  _func2  _func3  
+foreign import ccall "ELJDragDataObject_Create" wx_ELJDragDataObject_Create :: Ptr  a -> Ptr (TWxString b) -> Ptr  c -> Ptr  d -> Ptr  e -> IO (Ptr (TWXCDragDataObject ()))
+
+-- | usage: (@wxcDragDataObjectDelete obj@).
+wxcDragDataObjectDelete :: WXCDragDataObject  a ->  IO ()
+wxcDragDataObjectDelete _obj 
+  = withObjectRef "wxcDragDataObjectDelete" _obj $ \cobj__obj -> 
+    wx_ELJDragDataObject_Delete cobj__obj  
+foreign import ccall "ELJDragDataObject_Delete" wx_ELJDragDataObject_Delete :: Ptr (TWXCDragDataObject a) -> IO ()
+
+-- | usage: (@wxcDropTargetCreate obj@).
+wxcDropTargetCreate :: Ptr  a ->  IO (WXCDropTarget  ())
+wxcDropTargetCreate _obj 
+  = withObjectResult $
+    wx_ELJDropTarget_Create _obj  
+foreign import ccall "ELJDropTarget_Create" wx_ELJDropTarget_Create :: Ptr  a -> IO (Ptr (TWXCDropTarget ()))
+
+-- | usage: (@wxcDropTargetDelete obj@).
+wxcDropTargetDelete :: WXCDropTarget  a ->  IO ()
+wxcDropTargetDelete _obj 
+  = withObjectRef "wxcDropTargetDelete" _obj $ \cobj__obj -> 
+    wx_ELJDropTarget_Delete cobj__obj  
+foreign import ccall "ELJDropTarget_Delete" wx_ELJDropTarget_Delete :: Ptr (TWXCDropTarget a) -> IO ()
+
+-- | usage: (@wxcDropTargetSetOnData obj func@).
+wxcDropTargetSetOnData :: WXCDropTarget  a -> Ptr  b ->  IO ()
+wxcDropTargetSetOnData _obj _func 
+  = withObjectRef "wxcDropTargetSetOnData" _obj $ \cobj__obj -> 
+    wx_ELJDropTarget_SetOnData cobj__obj  _func  
+foreign import ccall "ELJDropTarget_SetOnData" wx_ELJDropTarget_SetOnData :: Ptr (TWXCDropTarget a) -> Ptr  b -> IO ()
+
+-- | usage: (@wxcDropTargetSetOnDragOver obj func@).
+wxcDropTargetSetOnDragOver :: WXCDropTarget  a -> Ptr  b ->  IO ()
+wxcDropTargetSetOnDragOver _obj _func 
+  = withObjectRef "wxcDropTargetSetOnDragOver" _obj $ \cobj__obj -> 
+    wx_ELJDropTarget_SetOnDragOver cobj__obj  _func  
+foreign import ccall "ELJDropTarget_SetOnDragOver" wx_ELJDropTarget_SetOnDragOver :: Ptr (TWXCDropTarget a) -> Ptr  b -> IO ()
+
+-- | usage: (@wxcDropTargetSetOnDrop obj func@).
+wxcDropTargetSetOnDrop :: WXCDropTarget  a -> Ptr  b ->  IO ()
+wxcDropTargetSetOnDrop _obj _func 
+  = withObjectRef "wxcDropTargetSetOnDrop" _obj $ \cobj__obj -> 
+    wx_ELJDropTarget_SetOnDrop cobj__obj  _func  
+foreign import ccall "ELJDropTarget_SetOnDrop" wx_ELJDropTarget_SetOnDrop :: Ptr (TWXCDropTarget a) -> Ptr  b -> IO ()
+
+-- | usage: (@wxcDropTargetSetOnEnter obj func@).
+wxcDropTargetSetOnEnter :: WXCDropTarget  a -> Ptr  b ->  IO ()
+wxcDropTargetSetOnEnter _obj _func 
+  = withObjectRef "wxcDropTargetSetOnEnter" _obj $ \cobj__obj -> 
+    wx_ELJDropTarget_SetOnEnter cobj__obj  _func  
+foreign import ccall "ELJDropTarget_SetOnEnter" wx_ELJDropTarget_SetOnEnter :: Ptr (TWXCDropTarget a) -> Ptr  b -> IO ()
+
+-- | usage: (@wxcDropTargetSetOnLeave obj func@).
+wxcDropTargetSetOnLeave :: WXCDropTarget  a -> Ptr  b ->  IO ()
+wxcDropTargetSetOnLeave _obj _func 
+  = withObjectRef "wxcDropTargetSetOnLeave" _obj $ \cobj__obj -> 
+    wx_ELJDropTarget_SetOnLeave cobj__obj  _func  
+foreign import ccall "ELJDropTarget_SetOnLeave" wx_ELJDropTarget_SetOnLeave :: Ptr (TWXCDropTarget a) -> Ptr  b -> IO ()
+
+-- | usage: (@wxcEndBusyCursor@).
+wxcEndBusyCursor ::  IO ()
+wxcEndBusyCursor 
+  = wx_wxcEndBusyCursor 
+foreign import ccall "wxcEndBusyCursor" wx_wxcEndBusyCursor :: IO ()
+
+-- | usage: (@wxcFileDropTargetCreate obj func@).
+wxcFileDropTargetCreate :: Ptr  a -> Ptr  b ->  IO (WXCFileDropTarget  ())
+wxcFileDropTargetCreate _obj _func 
+  = withObjectResult $
+    wx_ELJFileDropTarget_Create _obj  _func  
+foreign import ccall "ELJFileDropTarget_Create" wx_ELJFileDropTarget_Create :: Ptr  a -> Ptr  b -> IO (Ptr (TWXCFileDropTarget ()))
+
+-- | usage: (@wxcFileDropTargetDelete obj@).
+wxcFileDropTargetDelete :: WXCFileDropTarget  a ->  IO ()
+wxcFileDropTargetDelete _obj 
+  = withObjectRef "wxcFileDropTargetDelete" _obj $ \cobj__obj -> 
+    wx_ELJFileDropTarget_Delete cobj__obj  
+foreign import ccall "ELJFileDropTarget_Delete" wx_ELJFileDropTarget_Delete :: Ptr (TWXCFileDropTarget a) -> IO ()
+
+-- | usage: (@wxcFileDropTargetSetOnData obj func@).
+wxcFileDropTargetSetOnData :: WXCFileDropTarget  a -> Ptr  b ->  IO ()
+wxcFileDropTargetSetOnData _obj _func 
+  = withObjectRef "wxcFileDropTargetSetOnData" _obj $ \cobj__obj -> 
+    wx_ELJFileDropTarget_SetOnData cobj__obj  _func  
+foreign import ccall "ELJFileDropTarget_SetOnData" wx_ELJFileDropTarget_SetOnData :: Ptr (TWXCFileDropTarget a) -> Ptr  b -> IO ()
+
+-- | usage: (@wxcFileDropTargetSetOnDragOver obj func@).
+wxcFileDropTargetSetOnDragOver :: WXCFileDropTarget  a -> Ptr  b ->  IO ()
+wxcFileDropTargetSetOnDragOver _obj _func 
+  = withObjectRef "wxcFileDropTargetSetOnDragOver" _obj $ \cobj__obj -> 
+    wx_ELJFileDropTarget_SetOnDragOver cobj__obj  _func  
+foreign import ccall "ELJFileDropTarget_SetOnDragOver" wx_ELJFileDropTarget_SetOnDragOver :: Ptr (TWXCFileDropTarget a) -> Ptr  b -> IO ()
+
+-- | usage: (@wxcFileDropTargetSetOnDrop obj func@).
+wxcFileDropTargetSetOnDrop :: WXCFileDropTarget  a -> Ptr  b ->  IO ()
+wxcFileDropTargetSetOnDrop _obj _func 
+  = withObjectRef "wxcFileDropTargetSetOnDrop" _obj $ \cobj__obj -> 
+    wx_ELJFileDropTarget_SetOnDrop cobj__obj  _func  
+foreign import ccall "ELJFileDropTarget_SetOnDrop" wx_ELJFileDropTarget_SetOnDrop :: Ptr (TWXCFileDropTarget a) -> Ptr  b -> IO ()
+
+-- | usage: (@wxcFileDropTargetSetOnEnter obj func@).
+wxcFileDropTargetSetOnEnter :: WXCFileDropTarget  a -> Ptr  b ->  IO ()
+wxcFileDropTargetSetOnEnter _obj _func 
+  = withObjectRef "wxcFileDropTargetSetOnEnter" _obj $ \cobj__obj -> 
+    wx_ELJFileDropTarget_SetOnEnter cobj__obj  _func  
+foreign import ccall "ELJFileDropTarget_SetOnEnter" wx_ELJFileDropTarget_SetOnEnter :: Ptr (TWXCFileDropTarget a) -> Ptr  b -> IO ()
+
+-- | usage: (@wxcFileDropTargetSetOnLeave obj func@).
+wxcFileDropTargetSetOnLeave :: WXCFileDropTarget  a -> Ptr  b ->  IO ()
+wxcFileDropTargetSetOnLeave _obj _func 
+  = withObjectRef "wxcFileDropTargetSetOnLeave" _obj $ \cobj__obj -> 
+    wx_ELJFileDropTarget_SetOnLeave cobj__obj  _func  
+foreign import ccall "ELJFileDropTarget_SetOnLeave" wx_ELJFileDropTarget_SetOnLeave :: Ptr (TWXCFileDropTarget a) -> Ptr  b -> IO ()
+
+-- | usage: (@wxcFree p@).
+wxcFree :: Ptr  a ->  IO ()
+wxcFree p 
+  = wx_wxcFree p  
+foreign import ccall "wxcFree" wx_wxcFree :: Ptr  a -> IO ()
+
+-- | usage: (@wxcGetMousePosition@).
+wxcGetMousePosition ::  IO (Point)
+wxcGetMousePosition 
+  = withWxPointResult $
+    wx_wxcGetMousePosition 
+foreign import ccall "wxcGetMousePosition" wx_wxcGetMousePosition :: IO (Ptr (TWxPoint ()))
+
+-- | usage: (@wxcGetPixelRGB buffer width xy@).
+wxcGetPixelRGB :: Ptr Word8 -> Int -> Point ->  IO Int
+wxcGetPixelRGB buffer width xy 
+  = withIntResult $
+    wx_wxcGetPixelRGB buffer  (toCInt width)  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxcGetPixelRGB" wx_wxcGetPixelRGB :: Ptr Word8 -> CInt -> CInt -> CInt -> IO CInt
+
+-- | usage: (@wxcGetPixelRGBA buffer width xy@).
+wxcGetPixelRGBA :: Ptr Word8 -> Int -> Point ->  IO Word
+wxcGetPixelRGBA buffer width xy 
+  = wx_wxcGetPixelRGBA buffer  (toCInt width)  (toCIntPointX xy) (toCIntPointY xy)  
+foreign import ccall "wxcGetPixelRGBA" wx_wxcGetPixelRGBA :: Ptr Word8 -> CInt -> CInt -> CInt -> IO Word
+
+-- | usage: (@wxcGridTableCreate obj eifGetNumberRows eifGetNumberCols eifGetValue eifSetValue eifIsEmptyCell eifClear eifInsertRows eifAppendRows eifDeleteRows eifInsertCols eifAppendCols eifDeleteCols eifSetRowLabelValue eifSetColLabelValue eifGetRowLabelValue eifGetColLabelValue@).
+wxcGridTableCreate :: Ptr  a -> Ptr  b -> Ptr  c -> Ptr  d -> Ptr  e -> Ptr  f -> Ptr  g -> Ptr  h -> Ptr  i -> Ptr  j -> Ptr  k -> Ptr  l -> Ptr  m -> Ptr  n -> Ptr  o -> Ptr  p -> Ptr  q ->  IO (WXCGridTable  ())
+wxcGridTableCreate _obj _EifGetNumberRows _EifGetNumberCols _EifGetValue _EifSetValue _EifIsEmptyCell _EifClear _EifInsertRows _EifAppendRows _EifDeleteRows _EifInsertCols _EifAppendCols _EifDeleteCols _EifSetRowLabelValue _EifSetColLabelValue _EifGetRowLabelValue _EifGetColLabelValue 
+  = withObjectResult $
+    wx_ELJGridTable_Create _obj  _EifGetNumberRows  _EifGetNumberCols  _EifGetValue  _EifSetValue  _EifIsEmptyCell  _EifClear  _EifInsertRows  _EifAppendRows  _EifDeleteRows  _EifInsertCols  _EifAppendCols  _EifDeleteCols  _EifSetRowLabelValue  _EifSetColLabelValue  _EifGetRowLabelValue  _EifGetColLabelValue  
+foreign import ccall "ELJGridTable_Create" wx_ELJGridTable_Create :: Ptr  a -> Ptr  b -> Ptr  c -> Ptr  d -> Ptr  e -> Ptr  f -> Ptr  g -> Ptr  h -> Ptr  i -> Ptr  j -> Ptr  k -> Ptr  l -> Ptr  m -> Ptr  n -> Ptr  o -> Ptr  p -> Ptr  q -> IO (Ptr (TWXCGridTable ()))
+
+-- | usage: (@wxcGridTableDelete obj@).
+wxcGridTableDelete :: WXCGridTable  a ->  IO ()
+wxcGridTableDelete
+  = objectDelete
+
+
+-- | usage: (@wxcGridTableGetView obj@).
+wxcGridTableGetView :: WXCGridTable  a ->  IO (View  ())
+wxcGridTableGetView _obj 
+  = withObjectResult $
+    withObjectRef "wxcGridTableGetView" _obj $ \cobj__obj -> 
+    wx_ELJGridTable_GetView cobj__obj  
+foreign import ccall "ELJGridTable_GetView" wx_ELJGridTable_GetView :: Ptr (TWXCGridTable a) -> IO (Ptr (TView ()))
+
+-- | usage: (@wxcGridTableSendTableMessage obj id val1 val2@).
+wxcGridTableSendTableMessage :: WXCGridTable  a -> Id -> Int -> Int ->  IO (Ptr  ())
+wxcGridTableSendTableMessage _obj id val1 val2 
+  = withObjectRef "wxcGridTableSendTableMessage" _obj $ \cobj__obj -> 
+    wx_ELJGridTable_SendTableMessage cobj__obj  (toCInt id)  (toCInt val1)  (toCInt val2)  
+foreign import ccall "ELJGridTable_SendTableMessage" wx_ELJGridTable_SendTableMessage :: Ptr (TWXCGridTable a) -> CInt -> CInt -> CInt -> IO (Ptr  ())
+
+{- |  Return the /href/ attribute of the associated html anchor (if applicable)  -}
+wxcHtmlEventGetHref :: WXCHtmlEvent  a ->  IO (String)
+wxcHtmlEventGetHref self 
+  = withManagedStringResult $
+    withObjectRef "wxcHtmlEventGetHref" self $ \cobj_self -> 
+    wxcHtmlEvent_GetHref cobj_self  
+foreign import ccall "wxcHtmlEvent_GetHref" wxcHtmlEvent_GetHref :: Ptr (TWXCHtmlEvent a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@wxcHtmlEventGetHtmlCell self@).
+wxcHtmlEventGetHtmlCell :: WXCHtmlEvent  a ->  IO (HtmlCell  ())
+wxcHtmlEventGetHtmlCell self 
+  = withObjectResult $
+    withObjectRef "wxcHtmlEventGetHtmlCell" self $ \cobj_self -> 
+    wxcHtmlEvent_GetHtmlCell cobj_self  
+foreign import ccall "wxcHtmlEvent_GetHtmlCell" wxcHtmlEvent_GetHtmlCell :: Ptr (TWXCHtmlEvent a) -> IO (Ptr (THtmlCell ()))
+
+-- | usage: (@wxcHtmlEventGetHtmlCellId self@).
+wxcHtmlEventGetHtmlCellId :: WXCHtmlEvent  a ->  IO (String)
+wxcHtmlEventGetHtmlCellId self 
+  = withManagedStringResult $
+    withObjectRef "wxcHtmlEventGetHtmlCellId" self $ \cobj_self -> 
+    wxcHtmlEvent_GetHtmlCellId cobj_self  
+foreign import ccall "wxcHtmlEvent_GetHtmlCellId" wxcHtmlEvent_GetHtmlCellId :: Ptr (TWXCHtmlEvent a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@wxcHtmlEventGetLogicalPosition self@).
+wxcHtmlEventGetLogicalPosition :: WXCHtmlEvent  a ->  IO (Point)
+wxcHtmlEventGetLogicalPosition self 
+  = withWxPointResult $
+    withObjectRef "wxcHtmlEventGetLogicalPosition" self $ \cobj_self -> 
+    wxcHtmlEvent_GetLogicalPosition cobj_self  
+foreign import ccall "wxcHtmlEvent_GetLogicalPosition" wxcHtmlEvent_GetLogicalPosition :: Ptr (TWXCHtmlEvent a) -> IO (Ptr (TWxPoint ()))
+
+-- | usage: (@wxcHtmlEventGetMouseEvent self@).
+wxcHtmlEventGetMouseEvent :: WXCHtmlEvent  a ->  IO (MouseEvent  ())
+wxcHtmlEventGetMouseEvent self 
+  = withObjectResult $
+    withObjectRef "wxcHtmlEventGetMouseEvent" self $ \cobj_self -> 
+    wxcHtmlEvent_GetMouseEvent cobj_self  
+foreign import ccall "wxcHtmlEvent_GetMouseEvent" wxcHtmlEvent_GetMouseEvent :: Ptr (TWXCHtmlEvent a) -> IO (Ptr (TMouseEvent ()))
+
+-- | usage: (@wxcHtmlEventGetTarget self@).
+wxcHtmlEventGetTarget :: WXCHtmlEvent  a ->  IO (String)
+wxcHtmlEventGetTarget self 
+  = withManagedStringResult $
+    withObjectRef "wxcHtmlEventGetTarget" self $ \cobj_self -> 
+    wxcHtmlEvent_GetTarget cobj_self  
+foreign import ccall "wxcHtmlEvent_GetTarget" wxcHtmlEvent_GetTarget :: Ptr (TWXCHtmlEvent a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@wxcHtmlWindowCreate prt id lfttopwdthgt stl txt@).
+wxcHtmlWindowCreate :: Window  a -> Id -> Rect -> Style -> String ->  IO (WXCHtmlWindow  ())
+wxcHtmlWindowCreate _prt _id _lfttopwdthgt _stl _txt 
+  = withObjectResult $
+    withObjectPtr _prt $ \cobj__prt -> 
+    withStringPtr _txt $ \cobj__txt -> 
+    wxcHtmlWindow_Create cobj__prt  (toCInt _id)  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  cobj__txt  
+foreign import ccall "wxcHtmlWindow_Create" wxcHtmlWindow_Create :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> Ptr (TWxString e) -> IO (Ptr (TWXCHtmlWindow ()))
+
+-- | usage: (@wxcInitPixelsRGB buffer widthheight rgba@).
+wxcInitPixelsRGB :: Ptr Word8 -> Size -> Int ->  IO ()
+wxcInitPixelsRGB buffer widthheight rgba 
+  = wx_wxcInitPixelsRGB buffer  (toCIntSizeW widthheight) (toCIntSizeH widthheight)  (toCInt rgba)  
+foreign import ccall "wxcInitPixelsRGB" wx_wxcInitPixelsRGB :: Ptr Word8 -> CInt -> CInt -> CInt -> IO ()
+
+-- | usage: (@wxcInitPixelsRGBA buffer widthheight rgba@).
+wxcInitPixelsRGBA :: Ptr Word8 -> Size -> Word ->  IO ()
+wxcInitPixelsRGBA buffer widthheight rgba 
+  = wx_wxcInitPixelsRGBA buffer  (toCIntSizeW widthheight) (toCIntSizeH widthheight)  rgba  
+foreign import ccall "wxcInitPixelsRGBA" wx_wxcInitPixelsRGBA :: Ptr Word8 -> CInt -> CInt -> Word -> IO ()
+
+-- | usage: (@wxcIsBusy@).
+wxcIsBusy ::  IO ()
+wxcIsBusy 
+  = wx_wxcIsBusy 
+foreign import ccall "wxcIsBusy" wx_wxcIsBusy :: IO ()
+
+-- | usage: (@wxcLogAddTraceMask obj str@).
+wxcLogAddTraceMask :: WXCLog  a -> String ->  IO ()
+wxcLogAddTraceMask _obj str 
+  = withObjectRef "wxcLogAddTraceMask" _obj $ \cobj__obj -> 
+    withCWString str $ \cstr_str -> 
+    wx_ELJLog_AddTraceMask cobj__obj  cstr_str  
+foreign import ccall "ELJLog_AddTraceMask" wx_ELJLog_AddTraceMask :: Ptr (TWXCLog a) -> CWString -> IO ()
+
+-- | usage: (@wxcLogCreate obj fnc@).
+wxcLogCreate :: Ptr  a -> Ptr  b ->  IO (WXCLog  ())
+wxcLogCreate _obj _fnc 
+  = withObjectResult $
+    wx_ELJLog_Create _obj  _fnc  
+foreign import ccall "ELJLog_Create" wx_ELJLog_Create :: Ptr  a -> Ptr  b -> IO (Ptr (TWXCLog ()))
+
+-- | usage: (@wxcLogDelete obj@).
+wxcLogDelete :: WXCLog  a ->  IO ()
+wxcLogDelete _obj 
+  = withObjectRef "wxcLogDelete" _obj $ \cobj__obj -> 
+    wx_ELJLog_Delete cobj__obj  
+foreign import ccall "ELJLog_Delete" wx_ELJLog_Delete :: Ptr (TWXCLog a) -> IO ()
+
+-- | usage: (@wxcLogDontCreateOnDemand obj@).
+wxcLogDontCreateOnDemand :: WXCLog  a ->  IO ()
+wxcLogDontCreateOnDemand _obj 
+  = withObjectRef "wxcLogDontCreateOnDemand" _obj $ \cobj__obj -> 
+    wx_ELJLog_DontCreateOnDemand cobj__obj  
+foreign import ccall "ELJLog_DontCreateOnDemand" wx_ELJLog_DontCreateOnDemand :: Ptr (TWXCLog a) -> IO ()
+
+-- | usage: (@wxcLogEnableLogging obj doIt@).
+wxcLogEnableLogging :: WXCLog  a -> Bool ->  IO Int
+wxcLogEnableLogging _obj doIt 
+  = withIntResult $
+    withObjectRef "wxcLogEnableLogging" _obj $ \cobj__obj -> 
+    wx_ELJLog_EnableLogging cobj__obj  (toCBool doIt)  
+foreign import ccall "ELJLog_EnableLogging" wx_ELJLog_EnableLogging :: Ptr (TWXCLog a) -> CBool -> IO CInt
+
+-- | usage: (@wxcLogFlush obj@).
+wxcLogFlush :: WXCLog  a ->  IO ()
+wxcLogFlush _obj 
+  = withObjectRef "wxcLogFlush" _obj $ \cobj__obj -> 
+    wx_ELJLog_Flush cobj__obj  
+foreign import ccall "ELJLog_Flush" wx_ELJLog_Flush :: Ptr (TWXCLog a) -> IO ()
+
+-- | usage: (@wxcLogFlushActive obj@).
+wxcLogFlushActive :: WXCLog  a ->  IO ()
+wxcLogFlushActive _obj 
+  = withObjectRef "wxcLogFlushActive" _obj $ \cobj__obj -> 
+    wx_ELJLog_FlushActive cobj__obj  
+foreign import ccall "ELJLog_FlushActive" wx_ELJLog_FlushActive :: Ptr (TWXCLog a) -> IO ()
+
+-- | usage: (@wxcLogGetActiveTarget@).
+wxcLogGetActiveTarget ::  IO (Ptr  ())
+wxcLogGetActiveTarget 
+  = wx_ELJLog_GetActiveTarget 
+foreign import ccall "ELJLog_GetActiveTarget" wx_ELJLog_GetActiveTarget :: IO (Ptr  ())
+
+-- | usage: (@wxcLogGetTimestamp obj@).
+wxcLogGetTimestamp :: WXCLog  a ->  IO (Ptr  ())
+wxcLogGetTimestamp _obj 
+  = withObjectRef "wxcLogGetTimestamp" _obj $ \cobj__obj -> 
+    wx_ELJLog_GetTimestamp cobj__obj  
+foreign import ccall "ELJLog_GetTimestamp" wx_ELJLog_GetTimestamp :: Ptr (TWXCLog a) -> IO (Ptr  ())
+
+-- | usage: (@wxcLogGetVerbose obj@).
+wxcLogGetVerbose :: WXCLog  a ->  IO Int
+wxcLogGetVerbose _obj 
+  = withIntResult $
+    withObjectRef "wxcLogGetVerbose" _obj $ \cobj__obj -> 
+    wx_ELJLog_GetVerbose cobj__obj  
+foreign import ccall "ELJLog_GetVerbose" wx_ELJLog_GetVerbose :: Ptr (TWXCLog a) -> IO CInt
+
+-- | usage: (@wxcLogHasPendingMessages obj@).
+wxcLogHasPendingMessages :: WXCLog  a ->  IO Bool
+wxcLogHasPendingMessages _obj 
+  = withBoolResult $
+    withObjectRef "wxcLogHasPendingMessages" _obj $ \cobj__obj -> 
+    wx_ELJLog_HasPendingMessages cobj__obj  
+foreign import ccall "ELJLog_HasPendingMessages" wx_ELJLog_HasPendingMessages :: Ptr (TWXCLog a) -> IO CBool
+
+-- | usage: (@wxcLogIsAllowedTraceMask obj mask@).
+wxcLogIsAllowedTraceMask :: WXCLog  a -> Mask  b ->  IO Bool
+wxcLogIsAllowedTraceMask _obj mask 
+  = withBoolResult $
+    withObjectRef "wxcLogIsAllowedTraceMask" _obj $ \cobj__obj -> 
+    withObjectPtr mask $ \cobj_mask -> 
+    wx_ELJLog_IsAllowedTraceMask cobj__obj  cobj_mask  
+foreign import ccall "ELJLog_IsAllowedTraceMask" wx_ELJLog_IsAllowedTraceMask :: Ptr (TWXCLog a) -> Ptr (TMask b) -> IO CBool
+
+-- | usage: (@wxcLogIsEnabled obj@).
+wxcLogIsEnabled :: WXCLog  a ->  IO Bool
+wxcLogIsEnabled _obj 
+  = withBoolResult $
+    withObjectRef "wxcLogIsEnabled" _obj $ \cobj__obj -> 
+    wx_ELJLog_IsEnabled cobj__obj  
+foreign import ccall "ELJLog_IsEnabled" wx_ELJLog_IsEnabled :: Ptr (TWXCLog a) -> IO CBool
+
+-- | usage: (@wxcLogOnLog obj level szString t@).
+wxcLogOnLog :: WXCLog  a -> Int -> Ptr  c -> Int ->  IO ()
+wxcLogOnLog _obj level szString t 
+  = withObjectRef "wxcLogOnLog" _obj $ \cobj__obj -> 
+    wx_ELJLog_OnLog cobj__obj  (toCInt level)  szString  (toCInt t)  
+foreign import ccall "ELJLog_OnLog" wx_ELJLog_OnLog :: Ptr (TWXCLog a) -> CInt -> Ptr  c -> CInt -> IO ()
+
+-- | usage: (@wxcLogRemoveTraceMask obj str@).
+wxcLogRemoveTraceMask :: WXCLog  a -> String ->  IO ()
+wxcLogRemoveTraceMask _obj str 
+  = withObjectRef "wxcLogRemoveTraceMask" _obj $ \cobj__obj -> 
+    withCWString str $ \cstr_str -> 
+    wx_ELJLog_RemoveTraceMask cobj__obj  cstr_str  
+foreign import ccall "ELJLog_RemoveTraceMask" wx_ELJLog_RemoveTraceMask :: Ptr (TWXCLog a) -> CWString -> IO ()
+
+-- | usage: (@wxcLogResume obj@).
+wxcLogResume :: WXCLog  a ->  IO ()
+wxcLogResume _obj 
+  = withObjectRef "wxcLogResume" _obj $ \cobj__obj -> 
+    wx_ELJLog_Resume cobj__obj  
+foreign import ccall "ELJLog_Resume" wx_ELJLog_Resume :: Ptr (TWXCLog a) -> IO ()
+
+-- | usage: (@wxcLogSetActiveTarget pLogger@).
+wxcLogSetActiveTarget :: WXCLog  a ->  IO (Ptr  ())
+wxcLogSetActiveTarget pLogger 
+  = withObjectRef "wxcLogSetActiveTarget" pLogger $ \cobj_pLogger -> 
+    wx_ELJLog_SetActiveTarget cobj_pLogger  
+foreign import ccall "ELJLog_SetActiveTarget" wx_ELJLog_SetActiveTarget :: Ptr (TWXCLog a) -> IO (Ptr  ())
+
+-- | usage: (@wxcLogSetTimestamp obj ts@).
+wxcLogSetTimestamp :: WXCLog  a -> Ptr  b ->  IO ()
+wxcLogSetTimestamp _obj ts 
+  = withObjectRef "wxcLogSetTimestamp" _obj $ \cobj__obj -> 
+    wx_ELJLog_SetTimestamp cobj__obj  ts  
+foreign import ccall "ELJLog_SetTimestamp" wx_ELJLog_SetTimestamp :: Ptr (TWXCLog a) -> Ptr  b -> IO ()
+
+-- | usage: (@wxcLogSetVerbose obj bVerbose@).
+wxcLogSetVerbose :: WXCLog  a -> Int ->  IO ()
+wxcLogSetVerbose _obj bVerbose 
+  = withObjectRef "wxcLogSetVerbose" _obj $ \cobj__obj -> 
+    wx_ELJLog_SetVerbose cobj__obj  (toCInt bVerbose)  
+foreign import ccall "ELJLog_SetVerbose" wx_ELJLog_SetVerbose :: Ptr (TWXCLog a) -> CInt -> IO ()
+
+-- | usage: (@wxcLogSuspend obj@).
+wxcLogSuspend :: WXCLog  a ->  IO ()
+wxcLogSuspend _obj 
+  = withObjectRef "wxcLogSuspend" _obj $ \cobj__obj -> 
+    wx_ELJLog_Suspend cobj__obj  
+foreign import ccall "ELJLog_Suspend" wx_ELJLog_Suspend :: Ptr (TWXCLog a) -> IO ()
+
+-- | usage: (@wxcMalloc size@).
+wxcMalloc :: Int ->  IO (Ptr  ())
+wxcMalloc size 
+  = wx_wxcMalloc (toCInt size)  
+foreign import ccall "wxcMalloc" wx_wxcMalloc :: CInt -> IO (Ptr  ())
+
+-- | usage: (@wxcPreviewControlBarCreate preview buttons parent title xywh style@).
+wxcPreviewControlBarCreate :: Ptr  a -> Int -> Window  c -> Ptr  d -> Rect -> Int ->  IO (WXCPreviewControlBar  ())
+wxcPreviewControlBarCreate preview buttons parent title xywh style 
+  = withObjectResult $
+    withObjectPtr parent $ \cobj_parent -> 
+    wx_ELJPreviewControlBar_Create preview  (toCInt buttons)  cobj_parent  title  (toCIntRectX xywh) (toCIntRectY xywh)(toCIntRectW xywh) (toCIntRectH xywh)  (toCInt style)  
+foreign import ccall "ELJPreviewControlBar_Create" wx_ELJPreviewControlBar_Create :: Ptr  a -> CInt -> Ptr (TWindow c) -> Ptr  d -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TWXCPreviewControlBar ()))
+
+-- | usage: (@wxcPreviewFrameCreate obj wxinit createcanvas createtoolbar preview parent title xywh style@).
+wxcPreviewFrameCreate :: Ptr  a -> Ptr  b -> Ptr  c -> Ptr  d -> Ptr  e -> Window  f -> Ptr  g -> Rect -> Int ->  IO (WXCPreviewFrame  ())
+wxcPreviewFrameCreate _obj _init _createcanvas _createtoolbar preview parent title xywh style 
+  = withObjectResult $
+    withObjectPtr parent $ \cobj_parent -> 
+    wx_ELJPreviewFrame_Create _obj  _init  _createcanvas  _createtoolbar  preview  cobj_parent  title  (toCIntRectX xywh) (toCIntRectY xywh)(toCIntRectW xywh) (toCIntRectH xywh)  (toCInt style)  
+foreign import ccall "ELJPreviewFrame_Create" wx_ELJPreviewFrame_Create :: Ptr  a -> Ptr  b -> Ptr  c -> Ptr  d -> Ptr  e -> Ptr (TWindow f) -> Ptr  g -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TWXCPreviewFrame ()))
+
+-- | usage: (@wxcPreviewFrameGetControlBar obj@).
+wxcPreviewFrameGetControlBar :: WXCPreviewFrame  a ->  IO (Ptr  ())
+wxcPreviewFrameGetControlBar _obj 
+  = withObjectRef "wxcPreviewFrameGetControlBar" _obj $ \cobj__obj -> 
+    wx_ELJPreviewFrame_GetControlBar cobj__obj  
+foreign import ccall "ELJPreviewFrame_GetControlBar" wx_ELJPreviewFrame_GetControlBar :: Ptr (TWXCPreviewFrame a) -> IO (Ptr  ())
+
+-- | usage: (@wxcPreviewFrameGetPreviewCanvas obj@).
+wxcPreviewFrameGetPreviewCanvas :: WXCPreviewFrame  a ->  IO (PreviewCanvas  ())
+wxcPreviewFrameGetPreviewCanvas _obj 
+  = withObjectResult $
+    withObjectRef "wxcPreviewFrameGetPreviewCanvas" _obj $ \cobj__obj -> 
+    wx_ELJPreviewFrame_GetPreviewCanvas cobj__obj  
+foreign import ccall "ELJPreviewFrame_GetPreviewCanvas" wx_ELJPreviewFrame_GetPreviewCanvas :: Ptr (TWXCPreviewFrame a) -> IO (Ptr (TPreviewCanvas ()))
+
+-- | usage: (@wxcPreviewFrameGetPrintPreview obj@).
+wxcPreviewFrameGetPrintPreview :: WXCPreviewFrame  a ->  IO (PrintPreview  ())
+wxcPreviewFrameGetPrintPreview _obj 
+  = withObjectResult $
+    withObjectRef "wxcPreviewFrameGetPrintPreview" _obj $ \cobj__obj -> 
+    wx_ELJPreviewFrame_GetPrintPreview cobj__obj  
+foreign import ccall "ELJPreviewFrame_GetPrintPreview" wx_ELJPreviewFrame_GetPrintPreview :: Ptr (TWXCPreviewFrame a) -> IO (Ptr (TPrintPreview ()))
+
+-- | usage: (@wxcPreviewFrameInitialize obj@).
+wxcPreviewFrameInitialize :: WXCPreviewFrame  a ->  IO ()
+wxcPreviewFrameInitialize _obj 
+  = withObjectRef "wxcPreviewFrameInitialize" _obj $ \cobj__obj -> 
+    wx_ELJPreviewFrame_Initialize cobj__obj  
+foreign import ccall "ELJPreviewFrame_Initialize" wx_ELJPreviewFrame_Initialize :: Ptr (TWXCPreviewFrame a) -> IO ()
+
+-- | usage: (@wxcPreviewFrameSetControlBar obj obj@).
+wxcPreviewFrameSetControlBar :: WXCPreviewFrame  a -> Ptr  b ->  IO ()
+wxcPreviewFrameSetControlBar _obj obj 
+  = withObjectRef "wxcPreviewFrameSetControlBar" _obj $ \cobj__obj -> 
+    wx_ELJPreviewFrame_SetControlBar cobj__obj  obj  
+foreign import ccall "ELJPreviewFrame_SetControlBar" wx_ELJPreviewFrame_SetControlBar :: Ptr (TWXCPreviewFrame a) -> Ptr  b -> IO ()
+
+-- | usage: (@wxcPreviewFrameSetPreviewCanvas obj obj@).
+wxcPreviewFrameSetPreviewCanvas :: WXCPreviewFrame  a -> PreviewCanvas  b ->  IO ()
+wxcPreviewFrameSetPreviewCanvas _obj obj 
+  = withObjectRef "wxcPreviewFrameSetPreviewCanvas" _obj $ \cobj__obj -> 
+    withObjectPtr obj $ \cobj_obj -> 
+    wx_ELJPreviewFrame_SetPreviewCanvas cobj__obj  cobj_obj  
+foreign import ccall "ELJPreviewFrame_SetPreviewCanvas" wx_ELJPreviewFrame_SetPreviewCanvas :: Ptr (TWXCPreviewFrame a) -> Ptr (TPreviewCanvas b) -> IO ()
+
+-- | usage: (@wxcPreviewFrameSetPrintPreview obj obj@).
+wxcPreviewFrameSetPrintPreview :: WXCPreviewFrame  a -> PrintPreview  b ->  IO ()
+wxcPreviewFrameSetPrintPreview _obj obj 
+  = withObjectRef "wxcPreviewFrameSetPrintPreview" _obj $ \cobj__obj -> 
+    withObjectPtr obj $ \cobj_obj -> 
+    wx_ELJPreviewFrame_SetPrintPreview cobj__obj  cobj_obj  
+foreign import ccall "ELJPreviewFrame_SetPrintPreview" wx_ELJPreviewFrame_SetPrintPreview :: Ptr (TWXCPreviewFrame a) -> Ptr (TPrintPreview b) -> IO ()
+
+-- | usage: (@wxcPrintEventGetContinue self@).
+wxcPrintEventGetContinue :: WXCPrintEvent  a ->  IO Bool
+wxcPrintEventGetContinue self 
+  = withBoolResult $
+    withObjectRef "wxcPrintEventGetContinue" self $ \cobj_self -> 
+    wxcPrintEvent_GetContinue cobj_self  
+foreign import ccall "wxcPrintEvent_GetContinue" wxcPrintEvent_GetContinue :: Ptr (TWXCPrintEvent a) -> IO CBool
+
+-- | usage: (@wxcPrintEventGetEndPage self@).
+wxcPrintEventGetEndPage :: WXCPrintEvent  a ->  IO Int
+wxcPrintEventGetEndPage self 
+  = withIntResult $
+    withObjectRef "wxcPrintEventGetEndPage" self $ \cobj_self -> 
+    wxcPrintEvent_GetEndPage cobj_self  
+foreign import ccall "wxcPrintEvent_GetEndPage" wxcPrintEvent_GetEndPage :: Ptr (TWXCPrintEvent a) -> IO CInt
+
+-- | usage: (@wxcPrintEventGetPage self@).
+wxcPrintEventGetPage :: WXCPrintEvent  a ->  IO Int
+wxcPrintEventGetPage self 
+  = withIntResult $
+    withObjectRef "wxcPrintEventGetPage" self $ \cobj_self -> 
+    wxcPrintEvent_GetPage cobj_self  
+foreign import ccall "wxcPrintEvent_GetPage" wxcPrintEvent_GetPage :: Ptr (TWXCPrintEvent a) -> IO CInt
+
+{- |  Usage: @wxcPrintEventGetPrintout self@. Do not delete the associated printout!  -}
+wxcPrintEventGetPrintout :: WXCPrintEvent  a ->  IO (WXCPrintout  ())
+wxcPrintEventGetPrintout self 
+  = withObjectResult $
+    withObjectRef "wxcPrintEventGetPrintout" self $ \cobj_self -> 
+    wxcPrintEvent_GetPrintout cobj_self  
+foreign import ccall "wxcPrintEvent_GetPrintout" wxcPrintEvent_GetPrintout :: Ptr (TWXCPrintEvent a) -> IO (Ptr (TWXCPrintout ()))
+
+-- | usage: (@wxcPrintEventSetContinue self cont@).
+wxcPrintEventSetContinue :: WXCPrintEvent  a -> Bool ->  IO ()
+wxcPrintEventSetContinue self cont 
+  = withObjectRef "wxcPrintEventSetContinue" self $ \cobj_self -> 
+    wxcPrintEvent_SetContinue cobj_self  (toCBool cont)  
+foreign import ccall "wxcPrintEvent_SetContinue" wxcPrintEvent_SetContinue :: Ptr (TWXCPrintEvent a) -> CBool -> IO ()
+
+-- | usage: (@wxcPrintEventSetPageLimits self startPage endPage fromPage toPage@).
+wxcPrintEventSetPageLimits :: WXCPrintEvent  a -> Int -> Int -> Int -> Int ->  IO ()
+wxcPrintEventSetPageLimits self startPage endPage fromPage toPage 
+  = withObjectRef "wxcPrintEventSetPageLimits" self $ \cobj_self -> 
+    wxcPrintEvent_SetPageLimits cobj_self  (toCInt startPage)  (toCInt endPage)  (toCInt fromPage)  (toCInt toPage)  
+foreign import ccall "wxcPrintEvent_SetPageLimits" wxcPrintEvent_SetPageLimits :: Ptr (TWXCPrintEvent a) -> CInt -> CInt -> CInt -> CInt -> IO ()
+
+-- | usage: (@wxcPrintoutCreate title@).
+wxcPrintoutCreate :: String ->  IO (WXCPrintout  ())
+wxcPrintoutCreate title 
+  = withObjectResult $
+    withStringPtr title $ \cobj_title -> 
+    wxcPrintout_Create cobj_title  
+foreign import ccall "wxcPrintout_Create" wxcPrintout_Create :: Ptr (TWxString a) -> IO (Ptr (TWXCPrintout ()))
+
+-- | usage: (@wxcPrintoutDelete self@).
+wxcPrintoutDelete :: WXCPrintout  a ->  IO ()
+wxcPrintoutDelete
+  = objectDelete
+
+
+{- |  Usage: @wxcPrintoutGetEvtHandler self@. Do not delete the associated event handler!  -}
+wxcPrintoutGetEvtHandler :: WXCPrintout  a ->  IO (WXCPrintoutHandler  ())
+wxcPrintoutGetEvtHandler self 
+  = withObjectResult $
+    withObjectRef "wxcPrintoutGetEvtHandler" self $ \cobj_self -> 
+    wxcPrintout_GetEvtHandler cobj_self  
+foreign import ccall "wxcPrintout_GetEvtHandler" wxcPrintout_GetEvtHandler :: Ptr (TWXCPrintout a) -> IO (Ptr (TWXCPrintoutHandler ()))
+
+-- | usage: (@wxcPrintoutSetPageLimits self startPage endPage fromPage toPage@).
+wxcPrintoutSetPageLimits :: WXCPrintout  a -> Int -> Int -> Int -> Int ->  IO ()
+wxcPrintoutSetPageLimits self startPage endPage fromPage toPage 
+  = withObjectRef "wxcPrintoutSetPageLimits" self $ \cobj_self -> 
+    wxcPrintout_SetPageLimits cobj_self  (toCInt startPage)  (toCInt endPage)  (toCInt fromPage)  (toCInt toPage)  
+foreign import ccall "wxcPrintout_SetPageLimits" wxcPrintout_SetPageLimits :: Ptr (TWXCPrintout a) -> CInt -> CInt -> CInt -> CInt -> IO ()
+
+-- | usage: (@wxcSetPixelRGB buffer width xy rgb@).
+wxcSetPixelRGB :: Ptr Word8 -> Int -> Point -> Int ->  IO ()
+wxcSetPixelRGB buffer width xy rgb 
+  = wx_wxcSetPixelRGB buffer  (toCInt width)  (toCIntPointX xy) (toCIntPointY xy)  (toCInt rgb)  
+foreign import ccall "wxcSetPixelRGB" wx_wxcSetPixelRGB :: Ptr Word8 -> CInt -> CInt -> CInt -> CInt -> IO ()
+
+-- | usage: (@wxcSetPixelRGBA buffer width xy rgba@).
+wxcSetPixelRGBA :: Ptr Word8 -> Int -> Point -> Word ->  IO ()
+wxcSetPixelRGBA buffer width xy rgba 
+  = wx_wxcSetPixelRGBA buffer  (toCInt width)  (toCIntPointX xy) (toCIntPointY xy)  rgba  
+foreign import ccall "wxcSetPixelRGBA" wx_wxcSetPixelRGBA :: Ptr Word8 -> CInt -> CInt -> CInt -> Word -> IO ()
+
+-- | usage: (@wxcSetPixelRowRGB buffer width xy rgbStart rgbEnd count@).
+wxcSetPixelRowRGB :: Ptr Word8 -> Int -> Point -> Int -> Int -> Int ->  IO ()
+wxcSetPixelRowRGB buffer width xy rgbStart rgbEnd count 
+  = wx_wxcSetPixelRowRGB buffer  (toCInt width)  (toCIntPointX xy) (toCIntPointY xy)  (toCInt rgbStart)  (toCInt rgbEnd)  (toCInt count)  
+foreign import ccall "wxcSetPixelRowRGB" wx_wxcSetPixelRowRGB :: Ptr Word8 -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO ()
+
+-- | usage: (@wxcSetPixelRowRGBA buffer width xy rgbaStart rgbEnd count@).
+wxcSetPixelRowRGBA :: Ptr Word8 -> Int -> Point -> Int -> Int -> Word ->  IO ()
+wxcSetPixelRowRGBA buffer width xy rgbaStart rgbEnd count 
+  = wx_wxcSetPixelRowRGBA buffer  (toCInt width)  (toCIntPointX xy) (toCIntPointY xy)  (toCInt rgbaStart)  (toCInt rgbEnd)  count  
+foreign import ccall "wxcSetPixelRowRGBA" wx_wxcSetPixelRowRGBA :: Ptr Word8 -> CInt -> CInt -> CInt -> CInt -> CInt -> Word -> IO ()
+
+-- | usage: (@wxcSysErrorCode@).
+wxcSysErrorCode ::  IO Int
+wxcSysErrorCode 
+  = withIntResult $
+    wx_ELJSysErrorCode 
+foreign import ccall "ELJSysErrorCode" wx_ELJSysErrorCode :: IO CInt
+
+-- | usage: (@wxcSysErrorMsg nErrCode@).
+wxcSysErrorMsg :: Int ->  IO (Ptr  ())
+wxcSysErrorMsg nErrCode 
+  = wx_ELJSysErrorMsg (toCInt nErrCode)  
+foreign import ccall "ELJSysErrorMsg" wx_ELJSysErrorMsg :: CInt -> IO (Ptr  ())
+
+-- | usage: (@wxcSystemSettingsGetColour systemColour@).
+wxcSystemSettingsGetColour :: Int ->  IO (Color)
+wxcSystemSettingsGetColour systemColour 
+  = withManagedColourResult $
+    wx_wxcSystemSettingsGetColour (toCInt systemColour)  
+foreign import ccall "wxcSystemSettingsGetColour" wx_wxcSystemSettingsGetColour :: CInt -> IO (Ptr (TColour ()))
+
+-- | usage: (@wxcTextDropTargetCreate obj func@).
+wxcTextDropTargetCreate :: Ptr  a -> Ptr  b ->  IO (WXCTextDropTarget  ())
+wxcTextDropTargetCreate _obj _func 
+  = withObjectResult $
+    wx_ELJTextDropTarget_Create _obj  _func  
+foreign import ccall "ELJTextDropTarget_Create" wx_ELJTextDropTarget_Create :: Ptr  a -> Ptr  b -> IO (Ptr (TWXCTextDropTarget ()))
+
+-- | usage: (@wxcTextDropTargetDelete obj@).
+wxcTextDropTargetDelete :: WXCTextDropTarget  a ->  IO ()
+wxcTextDropTargetDelete _obj 
+  = withObjectRef "wxcTextDropTargetDelete" _obj $ \cobj__obj -> 
+    wx_ELJTextDropTarget_Delete cobj__obj  
+foreign import ccall "ELJTextDropTarget_Delete" wx_ELJTextDropTarget_Delete :: Ptr (TWXCTextDropTarget a) -> IO ()
+
+-- | usage: (@wxcTextDropTargetSetOnData obj func@).
+wxcTextDropTargetSetOnData :: WXCTextDropTarget  a -> Ptr  b ->  IO ()
+wxcTextDropTargetSetOnData _obj _func 
+  = withObjectRef "wxcTextDropTargetSetOnData" _obj $ \cobj__obj -> 
+    wx_ELJTextDropTarget_SetOnData cobj__obj  _func  
+foreign import ccall "ELJTextDropTarget_SetOnData" wx_ELJTextDropTarget_SetOnData :: Ptr (TWXCTextDropTarget a) -> Ptr  b -> IO ()
+
+-- | usage: (@wxcTextDropTargetSetOnDragOver obj func@).
+wxcTextDropTargetSetOnDragOver :: WXCTextDropTarget  a -> Ptr  b ->  IO ()
+wxcTextDropTargetSetOnDragOver _obj _func 
+  = withObjectRef "wxcTextDropTargetSetOnDragOver" _obj $ \cobj__obj -> 
+    wx_ELJTextDropTarget_SetOnDragOver cobj__obj  _func  
+foreign import ccall "ELJTextDropTarget_SetOnDragOver" wx_ELJTextDropTarget_SetOnDragOver :: Ptr (TWXCTextDropTarget a) -> Ptr  b -> IO ()
+
+-- | usage: (@wxcTextDropTargetSetOnDrop obj func@).
+wxcTextDropTargetSetOnDrop :: WXCTextDropTarget  a -> Ptr  b ->  IO ()
+wxcTextDropTargetSetOnDrop _obj _func 
+  = withObjectRef "wxcTextDropTargetSetOnDrop" _obj $ \cobj__obj -> 
+    wx_ELJTextDropTarget_SetOnDrop cobj__obj  _func  
+foreign import ccall "ELJTextDropTarget_SetOnDrop" wx_ELJTextDropTarget_SetOnDrop :: Ptr (TWXCTextDropTarget a) -> Ptr  b -> IO ()
+
+-- | usage: (@wxcTextDropTargetSetOnEnter obj func@).
+wxcTextDropTargetSetOnEnter :: WXCTextDropTarget  a -> Ptr  b ->  IO ()
+wxcTextDropTargetSetOnEnter _obj _func 
+  = withObjectRef "wxcTextDropTargetSetOnEnter" _obj $ \cobj__obj -> 
+    wx_ELJTextDropTarget_SetOnEnter cobj__obj  _func  
+foreign import ccall "ELJTextDropTarget_SetOnEnter" wx_ELJTextDropTarget_SetOnEnter :: Ptr (TWXCTextDropTarget a) -> Ptr  b -> IO ()
+
+-- | usage: (@wxcTextDropTargetSetOnLeave obj func@).
+wxcTextDropTargetSetOnLeave :: WXCTextDropTarget  a -> Ptr  b ->  IO ()
+wxcTextDropTargetSetOnLeave _obj _func 
+  = withObjectRef "wxcTextDropTargetSetOnLeave" _obj $ \cobj__obj -> 
+    wx_ELJTextDropTarget_SetOnLeave cobj__obj  _func  
+foreign import ccall "ELJTextDropTarget_SetOnLeave" wx_ELJTextDropTarget_SetOnLeave :: Ptr (TWXCTextDropTarget a) -> Ptr  b -> IO ()
+
+-- | usage: (@wxcTextValidatorCreate obj fnc txt stl@).
+wxcTextValidatorCreate :: Ptr  a -> Ptr  b -> String -> Style ->  IO (WXCTextValidator  ())
+wxcTextValidatorCreate _obj _fnc _txt _stl 
+  = withObjectResult $
+    withCWString _txt $ \cstr__txt -> 
+    wx_ELJTextValidator_Create _obj  _fnc  cstr__txt  (toCInt _stl)  
+foreign import ccall "ELJTextValidator_Create" wx_ELJTextValidator_Create :: Ptr  a -> Ptr  b -> CWString -> CInt -> IO (Ptr (TWXCTextValidator ()))
+
+-- | usage: (@wxcTreeItemDataCreate closure@).
+wxcTreeItemDataCreate :: Closure  a ->  IO (WXCTreeItemData  ())
+wxcTreeItemDataCreate closure 
+  = withObjectResult $
+    withObjectPtr closure $ \cobj_closure -> 
+    wxcTreeItemData_Create cobj_closure  
+foreign import ccall "wxcTreeItemData_Create" wxcTreeItemData_Create :: Ptr (TClosure a) -> IO (Ptr (TWXCTreeItemData ()))
+
+-- | usage: (@wxcTreeItemDataGetClientClosure self@).
+wxcTreeItemDataGetClientClosure :: WXCTreeItemData  a ->  IO (Closure  ())
+wxcTreeItemDataGetClientClosure self 
+  = withObjectResult $
+    withObjectRef "wxcTreeItemDataGetClientClosure" self $ \cobj_self -> 
+    wxcTreeItemData_GetClientClosure cobj_self  
+foreign import ccall "wxcTreeItemData_GetClientClosure" wxcTreeItemData_GetClientClosure :: Ptr (TWXCTreeItemData a) -> IO (Ptr (TClosure ()))
+
+-- | usage: (@wxcTreeItemDataSetClientClosure self closure@).
+wxcTreeItemDataSetClientClosure :: WXCTreeItemData  a -> Closure  b ->  IO ()
+wxcTreeItemDataSetClientClosure self closure 
+  = withObjectRef "wxcTreeItemDataSetClientClosure" self $ \cobj_self -> 
+    withObjectPtr closure $ \cobj_closure -> 
+    wxcTreeItemData_SetClientClosure cobj_self  cobj_closure  
+foreign import ccall "wxcTreeItemData_SetClientClosure" wxcTreeItemData_SetClientClosure :: Ptr (TWXCTreeItemData a) -> Ptr (TClosure b) -> IO ()
+
+-- | usage: (@wxcWakeUpIdle@).
+wxcWakeUpIdle ::  IO ()
+wxcWakeUpIdle 
+  = wx_wxcWakeUpIdle 
+foreign import ccall "wxcWakeUpIdle" wx_wxcWakeUpIdle :: IO ()
+
+-- | usage: (@wxobjectDelete obj@).
+wxobjectDelete :: WxObject  a ->  IO ()
+wxobjectDelete
+  = objectDelete
+
+
+-- | usage: (@xmlResourceAddHandler obj handler@).
+xmlResourceAddHandler :: XmlResource  a -> EvtHandler  b ->  IO ()
+xmlResourceAddHandler _obj handler 
+  = withObjectRef "xmlResourceAddHandler" _obj $ \cobj__obj -> 
+    withObjectPtr handler $ \cobj_handler -> 
+    wxXmlResource_AddHandler cobj__obj  cobj_handler  
+foreign import ccall "wxXmlResource_AddHandler" wxXmlResource_AddHandler :: Ptr (TXmlResource a) -> Ptr (TEvtHandler b) -> IO ()
+
+-- | usage: (@xmlResourceAddSubclassFactory obj factory@).
+xmlResourceAddSubclassFactory :: XmlResource  a -> Ptr  b ->  IO ()
+xmlResourceAddSubclassFactory _obj factory 
+  = withObjectRef "xmlResourceAddSubclassFactory" _obj $ \cobj__obj -> 
+    wxXmlResource_AddSubclassFactory cobj__obj  factory  
+foreign import ccall "wxXmlResource_AddSubclassFactory" wxXmlResource_AddSubclassFactory :: Ptr (TXmlResource a) -> Ptr  b -> IO ()
+
+-- | usage: (@xmlResourceAttachUnknownControl obj control parent@).
+xmlResourceAttachUnknownControl :: XmlResource  a -> Control  b -> Window  c ->  IO Int
+xmlResourceAttachUnknownControl _obj control parent 
+  = withIntResult $
+    withObjectRef "xmlResourceAttachUnknownControl" _obj $ \cobj__obj -> 
+    withObjectPtr control $ \cobj_control -> 
+    withObjectPtr parent $ \cobj_parent -> 
+    wxXmlResource_AttachUnknownControl cobj__obj  cobj_control  cobj_parent  
+foreign import ccall "wxXmlResource_AttachUnknownControl" wxXmlResource_AttachUnknownControl :: Ptr (TXmlResource a) -> Ptr (TControl b) -> Ptr (TWindow c) -> IO CInt
+
+-- | usage: (@xmlResourceClearHandlers obj@).
+xmlResourceClearHandlers :: XmlResource  a ->  IO ()
+xmlResourceClearHandlers _obj 
+  = withObjectRef "xmlResourceClearHandlers" _obj $ \cobj__obj -> 
+    wxXmlResource_ClearHandlers cobj__obj  
+foreign import ccall "wxXmlResource_ClearHandlers" wxXmlResource_ClearHandlers :: Ptr (TXmlResource a) -> IO ()
+
+-- | usage: (@xmlResourceCompareVersion obj major minor release revision@).
+xmlResourceCompareVersion :: XmlResource  a -> Int -> Int -> Int -> Int ->  IO Int
+xmlResourceCompareVersion _obj major minor release revision 
+  = withIntResult $
+    withObjectRef "xmlResourceCompareVersion" _obj $ \cobj__obj -> 
+    wxXmlResource_CompareVersion cobj__obj  (toCInt major)  (toCInt minor)  (toCInt release)  (toCInt revision)  
+foreign import ccall "wxXmlResource_CompareVersion" wxXmlResource_CompareVersion :: Ptr (TXmlResource a) -> CInt -> CInt -> CInt -> CInt -> IO CInt
+
+-- | usage: (@xmlResourceCreate flags@).
+xmlResourceCreate :: Int ->  IO (XmlResource  ())
+xmlResourceCreate flags 
+  = withObjectResult $
+    wxXmlResource_Create (toCInt flags)  
+foreign import ccall "wxXmlResource_Create" wxXmlResource_Create :: CInt -> IO (Ptr (TXmlResource ()))
+
+-- | usage: (@xmlResourceCreateFromFile filemask flags@).
+xmlResourceCreateFromFile :: String -> Int ->  IO (XmlResource  ())
+xmlResourceCreateFromFile filemask flags 
+  = withObjectResult $
+    withStringPtr filemask $ \cobj_filemask -> 
+    wxXmlResource_CreateFromFile cobj_filemask  (toCInt flags)  
+foreign import ccall "wxXmlResource_CreateFromFile" wxXmlResource_CreateFromFile :: Ptr (TWxString a) -> CInt -> IO (Ptr (TXmlResource ()))
+
+-- | usage: (@xmlResourceDelete obj@).
+xmlResourceDelete :: XmlResource  a ->  IO ()
+xmlResourceDelete
+  = objectDelete
+
+
+-- | usage: (@xmlResourceGet@).
+xmlResourceGet ::  IO (XmlResource  ())
+xmlResourceGet 
+  = withObjectResult $
+    wxXmlResource_Get 
+foreign import ccall "wxXmlResource_Get" wxXmlResource_Get :: IO (Ptr (TXmlResource ()))
+
+-- | usage: (@xmlResourceGetBitmapButton obj strid@).
+xmlResourceGetBitmapButton :: Window  a -> String ->  IO (BitmapButton  ())
+xmlResourceGetBitmapButton _obj strid 
+  = withObjectResult $
+    withObjectPtr _obj $ \cobj__obj -> 
+    withStringPtr strid $ \cobj_strid -> 
+    wxXmlResource_GetBitmapButton cobj__obj  cobj_strid  
+foreign import ccall "wxXmlResource_GetBitmapButton" wxXmlResource_GetBitmapButton :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TBitmapButton ()))
+
+-- | usage: (@xmlResourceGetBoxSizer obj strid@).
+xmlResourceGetBoxSizer :: Window  a -> String ->  IO (BoxSizer  ())
+xmlResourceGetBoxSizer _obj strid 
+  = withObjectResult $
+    withObjectPtr _obj $ \cobj__obj -> 
+    withStringPtr strid $ \cobj_strid -> 
+    wxXmlResource_GetBoxSizer cobj__obj  cobj_strid  
+foreign import ccall "wxXmlResource_GetBoxSizer" wxXmlResource_GetBoxSizer :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TBoxSizer ()))
+
+-- | usage: (@xmlResourceGetButton obj strid@).
+xmlResourceGetButton :: Window  a -> String ->  IO (Button  ())
+xmlResourceGetButton _obj strid 
+  = withObjectResult $
+    withObjectPtr _obj $ \cobj__obj -> 
+    withStringPtr strid $ \cobj_strid -> 
+    wxXmlResource_GetButton cobj__obj  cobj_strid  
+foreign import ccall "wxXmlResource_GetButton" wxXmlResource_GetButton :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TButton ()))
+
+-- | usage: (@xmlResourceGetCalendarCtrl obj strid@).
+xmlResourceGetCalendarCtrl :: Window  a -> String ->  IO (CalendarCtrl  ())
+xmlResourceGetCalendarCtrl _obj strid 
+  = withObjectResult $
+    withObjectPtr _obj $ \cobj__obj -> 
+    withStringPtr strid $ \cobj_strid -> 
+    wxXmlResource_GetCalendarCtrl cobj__obj  cobj_strid  
+foreign import ccall "wxXmlResource_GetCalendarCtrl" wxXmlResource_GetCalendarCtrl :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TCalendarCtrl ()))
+
+-- | usage: (@xmlResourceGetCheckBox obj strid@).
+xmlResourceGetCheckBox :: Window  a -> String ->  IO (CheckBox  ())
+xmlResourceGetCheckBox _obj strid 
+  = withObjectResult $
+    withObjectPtr _obj $ \cobj__obj -> 
+    withStringPtr strid $ \cobj_strid -> 
+    wxXmlResource_GetCheckBox cobj__obj  cobj_strid  
+foreign import ccall "wxXmlResource_GetCheckBox" wxXmlResource_GetCheckBox :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TCheckBox ()))
+
+-- | usage: (@xmlResourceGetCheckListBox obj strid@).
+xmlResourceGetCheckListBox :: Window  a -> String ->  IO (CheckListBox  ())
+xmlResourceGetCheckListBox _obj strid 
+  = withObjectResult $
+    withObjectPtr _obj $ \cobj__obj -> 
+    withStringPtr strid $ \cobj_strid -> 
+    wxXmlResource_GetCheckListBox cobj__obj  cobj_strid  
+foreign import ccall "wxXmlResource_GetCheckListBox" wxXmlResource_GetCheckListBox :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TCheckListBox ()))
+
+-- | usage: (@xmlResourceGetChoice obj strid@).
+xmlResourceGetChoice :: Window  a -> String ->  IO (Choice  ())
+xmlResourceGetChoice _obj strid 
+  = withObjectResult $
+    withObjectPtr _obj $ \cobj__obj -> 
+    withStringPtr strid $ \cobj_strid -> 
+    wxXmlResource_GetChoice cobj__obj  cobj_strid  
+foreign import ccall "wxXmlResource_GetChoice" wxXmlResource_GetChoice :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TChoice ()))
+
+-- | usage: (@xmlResourceGetComboBox obj strid@).
+xmlResourceGetComboBox :: Window  a -> String ->  IO (ComboBox  ())
+xmlResourceGetComboBox _obj strid 
+  = withObjectResult $
+    withObjectPtr _obj $ \cobj__obj -> 
+    withStringPtr strid $ \cobj_strid -> 
+    wxXmlResource_GetComboBox cobj__obj  cobj_strid  
+foreign import ccall "wxXmlResource_GetComboBox" wxXmlResource_GetComboBox :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TComboBox ()))
+
+-- | usage: (@xmlResourceGetDomain obj@).
+xmlResourceGetDomain :: XmlResource  a ->  IO (String)
+xmlResourceGetDomain _obj 
+  = withManagedStringResult $
+    withObjectRef "xmlResourceGetDomain" _obj $ \cobj__obj -> 
+    wxXmlResource_GetDomain cobj__obj  
+foreign import ccall "wxXmlResource_GetDomain" wxXmlResource_GetDomain :: Ptr (TXmlResource a) -> IO (Ptr (TWxString ()))
+
+-- | usage: (@xmlResourceGetFlags obj@).
+xmlResourceGetFlags :: XmlResource  a ->  IO Int
+xmlResourceGetFlags _obj 
+  = withIntResult $
+    withObjectRef "xmlResourceGetFlags" _obj $ \cobj__obj -> 
+    wxXmlResource_GetFlags cobj__obj  
+foreign import ccall "wxXmlResource_GetFlags" wxXmlResource_GetFlags :: Ptr (TXmlResource a) -> IO CInt
+
+-- | usage: (@xmlResourceGetFlexGridSizer obj strid@).
+xmlResourceGetFlexGridSizer :: Window  a -> String ->  IO (FlexGridSizer  ())
+xmlResourceGetFlexGridSizer _obj strid 
+  = withObjectResult $
+    withObjectPtr _obj $ \cobj__obj -> 
+    withStringPtr strid $ \cobj_strid -> 
+    wxXmlResource_GetFlexGridSizer cobj__obj  cobj_strid  
+foreign import ccall "wxXmlResource_GetFlexGridSizer" wxXmlResource_GetFlexGridSizer :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TFlexGridSizer ()))
+
+-- | usage: (@xmlResourceGetGauge obj strid@).
+xmlResourceGetGauge :: Window  a -> String ->  IO (Gauge  ())
+xmlResourceGetGauge _obj strid 
+  = withObjectResult $
+    withObjectPtr _obj $ \cobj__obj -> 
+    withStringPtr strid $ \cobj_strid -> 
+    wxXmlResource_GetGauge cobj__obj  cobj_strid  
+foreign import ccall "wxXmlResource_GetGauge" wxXmlResource_GetGauge :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TGauge ()))
+
+-- | usage: (@xmlResourceGetGrid obj strid@).
+xmlResourceGetGrid :: Window  a -> String ->  IO (Grid  ())
+xmlResourceGetGrid _obj strid 
+  = withObjectResult $
+    withObjectPtr _obj $ \cobj__obj -> 
+    withStringPtr strid $ \cobj_strid -> 
+    wxXmlResource_GetGrid cobj__obj  cobj_strid  
+foreign import ccall "wxXmlResource_GetGrid" wxXmlResource_GetGrid :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TGrid ()))
+
+-- | usage: (@xmlResourceGetGridSizer obj strid@).
+xmlResourceGetGridSizer :: Window  a -> String ->  IO (GridSizer  ())
+xmlResourceGetGridSizer _obj strid 
+  = withObjectResult $
+    withObjectPtr _obj $ \cobj__obj -> 
+    withStringPtr strid $ \cobj_strid -> 
+    wxXmlResource_GetGridSizer cobj__obj  cobj_strid  
+foreign import ccall "wxXmlResource_GetGridSizer" wxXmlResource_GetGridSizer :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TGridSizer ()))
+
+-- | usage: (@xmlResourceGetHtmlWindow obj strid@).
+xmlResourceGetHtmlWindow :: Window  a -> String ->  IO (HtmlWindow  ())
+xmlResourceGetHtmlWindow _obj strid 
+  = withObjectResult $
+    withObjectPtr _obj $ \cobj__obj -> 
+    withStringPtr strid $ \cobj_strid -> 
+    wxXmlResource_GetHtmlWindow cobj__obj  cobj_strid  
+foreign import ccall "wxXmlResource_GetHtmlWindow" wxXmlResource_GetHtmlWindow :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (THtmlWindow ()))
+
+-- | usage: (@xmlResourceGetListBox obj strid@).
+xmlResourceGetListBox :: Window  a -> String ->  IO (ListBox  ())
+xmlResourceGetListBox _obj strid 
+  = withObjectResult $
+    withObjectPtr _obj $ \cobj__obj -> 
+    withStringPtr strid $ \cobj_strid -> 
+    wxXmlResource_GetListBox cobj__obj  cobj_strid  
+foreign import ccall "wxXmlResource_GetListBox" wxXmlResource_GetListBox :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TListBox ()))
+
+-- | usage: (@xmlResourceGetListCtrl obj strid@).
+xmlResourceGetListCtrl :: Window  a -> String ->  IO (ListCtrl  ())
+xmlResourceGetListCtrl _obj strid 
+  = withObjectResult $
+    withObjectPtr _obj $ \cobj__obj -> 
+    withStringPtr strid $ \cobj_strid -> 
+    wxXmlResource_GetListCtrl cobj__obj  cobj_strid  
+foreign import ccall "wxXmlResource_GetListCtrl" wxXmlResource_GetListCtrl :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TListCtrl ()))
+
+-- | usage: (@xmlResourceGetMDIChildFrame obj strid@).
+xmlResourceGetMDIChildFrame :: Window  a -> String ->  IO (MDIChildFrame  ())
+xmlResourceGetMDIChildFrame _obj strid 
+  = withObjectResult $
+    withObjectPtr _obj $ \cobj__obj -> 
+    withStringPtr strid $ \cobj_strid -> 
+    wxXmlResource_GetMDIChildFrame cobj__obj  cobj_strid  
+foreign import ccall "wxXmlResource_GetMDIChildFrame" wxXmlResource_GetMDIChildFrame :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TMDIChildFrame ()))
+
+-- | usage: (@xmlResourceGetMDIParentFrame obj strid@).
+xmlResourceGetMDIParentFrame :: Window  a -> String ->  IO (MDIParentFrame  ())
+xmlResourceGetMDIParentFrame _obj strid 
+  = withObjectResult $
+    withObjectPtr _obj $ \cobj__obj -> 
+    withStringPtr strid $ \cobj_strid -> 
+    wxXmlResource_GetMDIParentFrame cobj__obj  cobj_strid  
+foreign import ccall "wxXmlResource_GetMDIParentFrame" wxXmlResource_GetMDIParentFrame :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TMDIParentFrame ()))
+
+-- | usage: (@xmlResourceGetMenu obj strid@).
+xmlResourceGetMenu :: Window  a -> String ->  IO (Menu  ())
+xmlResourceGetMenu _obj strid 
+  = withObjectResult $
+    withObjectPtr _obj $ \cobj__obj -> 
+    withStringPtr strid $ \cobj_strid -> 
+    wxXmlResource_GetMenu cobj__obj  cobj_strid  
+foreign import ccall "wxXmlResource_GetMenu" wxXmlResource_GetMenu :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TMenu ()))
+
+-- | usage: (@xmlResourceGetMenuBar obj strid@).
+xmlResourceGetMenuBar :: Window  a -> String ->  IO (MenuBar  ())
+xmlResourceGetMenuBar _obj strid 
+  = withObjectResult $
+    withObjectPtr _obj $ \cobj__obj -> 
+    withStringPtr strid $ \cobj_strid -> 
+    wxXmlResource_GetMenuBar cobj__obj  cobj_strid  
+foreign import ccall "wxXmlResource_GetMenuBar" wxXmlResource_GetMenuBar :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TMenuBar ()))
+
+-- | usage: (@xmlResourceGetMenuItem obj strid@).
+xmlResourceGetMenuItem :: Window  a -> String ->  IO (MenuItem  ())
+xmlResourceGetMenuItem _obj strid 
+  = withObjectResult $
+    withObjectPtr _obj $ \cobj__obj -> 
+    withStringPtr strid $ \cobj_strid -> 
+    wxXmlResource_GetMenuItem cobj__obj  cobj_strid  
+foreign import ccall "wxXmlResource_GetMenuItem" wxXmlResource_GetMenuItem :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TMenuItem ()))
+
+-- | usage: (@xmlResourceGetNotebook obj strid@).
+xmlResourceGetNotebook :: Window  a -> String ->  IO (Notebook  ())
+xmlResourceGetNotebook _obj strid 
+  = withObjectResult $
+    withObjectPtr _obj $ \cobj__obj -> 
+    withStringPtr strid $ \cobj_strid -> 
+    wxXmlResource_GetNotebook cobj__obj  cobj_strid  
+foreign import ccall "wxXmlResource_GetNotebook" wxXmlResource_GetNotebook :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TNotebook ()))
+
+-- | usage: (@xmlResourceGetPanel obj strid@).
+xmlResourceGetPanel :: Window  a -> String ->  IO (Panel  ())
+xmlResourceGetPanel _obj strid 
+  = withObjectResult $
+    withObjectPtr _obj $ \cobj__obj -> 
+    withStringPtr strid $ \cobj_strid -> 
+    wxXmlResource_GetPanel cobj__obj  cobj_strid  
+foreign import ccall "wxXmlResource_GetPanel" wxXmlResource_GetPanel :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TPanel ()))
+
+-- | usage: (@xmlResourceGetRadioBox obj strid@).
+xmlResourceGetRadioBox :: Window  a -> String ->  IO (RadioBox  ())
+xmlResourceGetRadioBox _obj strid 
+  = withObjectResult $
+    withObjectPtr _obj $ \cobj__obj -> 
+    withStringPtr strid $ \cobj_strid -> 
+    wxXmlResource_GetRadioBox cobj__obj  cobj_strid  
+foreign import ccall "wxXmlResource_GetRadioBox" wxXmlResource_GetRadioBox :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TRadioBox ()))
+
+-- | usage: (@xmlResourceGetRadioButton obj strid@).
+xmlResourceGetRadioButton :: Window  a -> String ->  IO (RadioButton  ())
+xmlResourceGetRadioButton _obj strid 
+  = withObjectResult $
+    withObjectPtr _obj $ \cobj__obj -> 
+    withStringPtr strid $ \cobj_strid -> 
+    wxXmlResource_GetRadioButton cobj__obj  cobj_strid  
+foreign import ccall "wxXmlResource_GetRadioButton" wxXmlResource_GetRadioButton :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TRadioButton ()))
+
+-- | usage: (@xmlResourceGetScrollBar obj strid@).
+xmlResourceGetScrollBar :: Window  a -> String ->  IO (ScrollBar  ())
+xmlResourceGetScrollBar _obj strid 
+  = withObjectResult $
+    withObjectPtr _obj $ \cobj__obj -> 
+    withStringPtr strid $ \cobj_strid -> 
+    wxXmlResource_GetScrollBar cobj__obj  cobj_strid  
+foreign import ccall "wxXmlResource_GetScrollBar" wxXmlResource_GetScrollBar :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TScrollBar ()))
+
+-- | usage: (@xmlResourceGetScrolledWindow obj strid@).
+xmlResourceGetScrolledWindow :: Window  a -> String ->  IO (ScrolledWindow  ())
+xmlResourceGetScrolledWindow _obj strid 
+  = withObjectResult $
+    withObjectPtr _obj $ \cobj__obj -> 
+    withStringPtr strid $ \cobj_strid -> 
+    wxXmlResource_GetScrolledWindow cobj__obj  cobj_strid  
+foreign import ccall "wxXmlResource_GetScrolledWindow" wxXmlResource_GetScrolledWindow :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TScrolledWindow ()))
+
+-- | usage: (@xmlResourceGetSizer obj strid@).
+xmlResourceGetSizer :: Window  a -> String ->  IO (Sizer  ())
+xmlResourceGetSizer _obj strid 
+  = withObjectResult $
+    withObjectPtr _obj $ \cobj__obj -> 
+    withStringPtr strid $ \cobj_strid -> 
+    wxXmlResource_GetSizer cobj__obj  cobj_strid  
+foreign import ccall "wxXmlResource_GetSizer" wxXmlResource_GetSizer :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TSizer ()))
+
+-- | usage: (@xmlResourceGetSlider obj strid@).
+xmlResourceGetSlider :: Window  a -> String ->  IO (Slider  ())
+xmlResourceGetSlider _obj strid 
+  = withObjectResult $
+    withObjectPtr _obj $ \cobj__obj -> 
+    withStringPtr strid $ \cobj_strid -> 
+    wxXmlResource_GetSlider cobj__obj  cobj_strid  
+foreign import ccall "wxXmlResource_GetSlider" wxXmlResource_GetSlider :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TSlider ()))
+
+-- | usage: (@xmlResourceGetSpinButton obj strid@).
+xmlResourceGetSpinButton :: Window  a -> String ->  IO (SpinButton  ())
+xmlResourceGetSpinButton _obj strid 
+  = withObjectResult $
+    withObjectPtr _obj $ \cobj__obj -> 
+    withStringPtr strid $ \cobj_strid -> 
+    wxXmlResource_GetSpinButton cobj__obj  cobj_strid  
+foreign import ccall "wxXmlResource_GetSpinButton" wxXmlResource_GetSpinButton :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TSpinButton ()))
+
+-- | usage: (@xmlResourceGetSpinCtrl obj strid@).
+xmlResourceGetSpinCtrl :: Window  a -> String ->  IO (SpinCtrl  ())
+xmlResourceGetSpinCtrl _obj strid 
+  = withObjectResult $
+    withObjectPtr _obj $ \cobj__obj -> 
+    withStringPtr strid $ \cobj_strid -> 
+    wxXmlResource_GetSpinCtrl cobj__obj  cobj_strid  
+foreign import ccall "wxXmlResource_GetSpinCtrl" wxXmlResource_GetSpinCtrl :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TSpinCtrl ()))
+
+-- | usage: (@xmlResourceGetSplitterWindow obj strid@).
+xmlResourceGetSplitterWindow :: Window  a -> String ->  IO (SplitterWindow  ())
+xmlResourceGetSplitterWindow _obj strid 
+  = withObjectResult $
+    withObjectPtr _obj $ \cobj__obj -> 
+    withStringPtr strid $ \cobj_strid -> 
+    wxXmlResource_GetSplitterWindow cobj__obj  cobj_strid  
+foreign import ccall "wxXmlResource_GetSplitterWindow" wxXmlResource_GetSplitterWindow :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TSplitterWindow ()))
+
+-- | usage: (@xmlResourceGetStaticBitmap obj strid@).
+xmlResourceGetStaticBitmap :: Window  a -> String ->  IO (StaticBitmap  ())
+xmlResourceGetStaticBitmap _obj strid 
+  = withObjectResult $
+    withObjectPtr _obj $ \cobj__obj -> 
+    withStringPtr strid $ \cobj_strid -> 
+    wxXmlResource_GetStaticBitmap cobj__obj  cobj_strid  
+foreign import ccall "wxXmlResource_GetStaticBitmap" wxXmlResource_GetStaticBitmap :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TStaticBitmap ()))
+
+-- | usage: (@xmlResourceGetStaticBox obj strid@).
+xmlResourceGetStaticBox :: Window  a -> String ->  IO (StaticBox  ())
+xmlResourceGetStaticBox _obj strid 
+  = withObjectResult $
+    withObjectPtr _obj $ \cobj__obj -> 
+    withStringPtr strid $ \cobj_strid -> 
+    wxXmlResource_GetStaticBox cobj__obj  cobj_strid  
+foreign import ccall "wxXmlResource_GetStaticBox" wxXmlResource_GetStaticBox :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TStaticBox ()))
+
+-- | usage: (@xmlResourceGetStaticBoxSizer obj strid@).
+xmlResourceGetStaticBoxSizer :: Window  a -> String ->  IO (StaticBoxSizer  ())
+xmlResourceGetStaticBoxSizer _obj strid 
+  = withObjectResult $
+    withObjectPtr _obj $ \cobj__obj -> 
+    withStringPtr strid $ \cobj_strid -> 
+    wxXmlResource_GetStaticBoxSizer cobj__obj  cobj_strid  
+foreign import ccall "wxXmlResource_GetStaticBoxSizer" wxXmlResource_GetStaticBoxSizer :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TStaticBoxSizer ()))
+
+-- | usage: (@xmlResourceGetStaticLine obj strid@).
+xmlResourceGetStaticLine :: Window  a -> String ->  IO (StaticLine  ())
+xmlResourceGetStaticLine _obj strid 
+  = withObjectResult $
+    withObjectPtr _obj $ \cobj__obj -> 
+    withStringPtr strid $ \cobj_strid -> 
+    wxXmlResource_GetStaticLine cobj__obj  cobj_strid  
+foreign import ccall "wxXmlResource_GetStaticLine" wxXmlResource_GetStaticLine :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TStaticLine ()))
+
+-- | usage: (@xmlResourceGetStaticText obj strid@).
+xmlResourceGetStaticText :: Window  a -> String ->  IO (StaticText  ())
+xmlResourceGetStaticText _obj strid 
+  = withObjectResult $
+    withObjectPtr _obj $ \cobj__obj -> 
+    withStringPtr strid $ \cobj_strid -> 
+    wxXmlResource_GetStaticText cobj__obj  cobj_strid  
+foreign import ccall "wxXmlResource_GetStaticText" wxXmlResource_GetStaticText :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TStaticText ()))
+
+-- | usage: (@xmlResourceGetStyledTextCtrl obj strid@).
+xmlResourceGetStyledTextCtrl :: Window  a -> String ->  IO (StyledTextCtrl  ())
+xmlResourceGetStyledTextCtrl _obj strid 
+  = withObjectResult $
+    withObjectPtr _obj $ \cobj__obj -> 
+    withStringPtr strid $ \cobj_strid -> 
+    wxXmlResource_GetStyledTextCtrl cobj__obj  cobj_strid  
+foreign import ccall "wxXmlResource_GetStyledTextCtrl" wxXmlResource_GetStyledTextCtrl :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TStyledTextCtrl ()))
+
+-- | usage: (@xmlResourceGetTextCtrl obj strid@).
+xmlResourceGetTextCtrl :: Window  a -> String ->  IO (TextCtrl  ())
+xmlResourceGetTextCtrl _obj strid 
+  = withObjectResult $
+    withObjectPtr _obj $ \cobj__obj -> 
+    withStringPtr strid $ \cobj_strid -> 
+    wxXmlResource_GetTextCtrl cobj__obj  cobj_strid  
+foreign import ccall "wxXmlResource_GetTextCtrl" wxXmlResource_GetTextCtrl :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TTextCtrl ()))
+
+-- | usage: (@xmlResourceGetTreeCtrl obj strid@).
+xmlResourceGetTreeCtrl :: Window  a -> String ->  IO (TreeCtrl  ())
+xmlResourceGetTreeCtrl _obj strid 
+  = withObjectResult $
+    withObjectPtr _obj $ \cobj__obj -> 
+    withStringPtr strid $ \cobj_strid -> 
+    wxXmlResource_GetTreeCtrl cobj__obj  cobj_strid  
+foreign import ccall "wxXmlResource_GetTreeCtrl" wxXmlResource_GetTreeCtrl :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TTreeCtrl ()))
+
+-- | usage: (@xmlResourceGetVersion obj@).
+xmlResourceGetVersion :: XmlResource  a ->  IO Int
+xmlResourceGetVersion _obj 
+  = withIntResult $
+    withObjectRef "xmlResourceGetVersion" _obj $ \cobj__obj -> 
+    wxXmlResource_GetVersion cobj__obj  
+foreign import ccall "wxXmlResource_GetVersion" wxXmlResource_GetVersion :: Ptr (TXmlResource a) -> IO CInt
+
+-- | usage: (@xmlResourceGetXRCID obj strid@).
+xmlResourceGetXRCID :: XmlResource  a -> String ->  IO Int
+xmlResourceGetXRCID _obj strid 
+  = withIntResult $
+    withObjectRef "xmlResourceGetXRCID" _obj $ \cobj__obj -> 
+    withStringPtr strid $ \cobj_strid -> 
+    wxXmlResource_GetXRCID cobj__obj  cobj_strid  
+foreign import ccall "wxXmlResource_GetXRCID" wxXmlResource_GetXRCID :: Ptr (TXmlResource a) -> Ptr (TWxString b) -> IO CInt
+
+-- | usage: (@xmlResourceInitAllHandlers obj@).
+xmlResourceInitAllHandlers :: XmlResource  a ->  IO ()
+xmlResourceInitAllHandlers _obj 
+  = withObjectRef "xmlResourceInitAllHandlers" _obj $ \cobj__obj -> 
+    wxXmlResource_InitAllHandlers cobj__obj  
+foreign import ccall "wxXmlResource_InitAllHandlers" wxXmlResource_InitAllHandlers :: Ptr (TXmlResource a) -> IO ()
+
+-- | usage: (@xmlResourceInsertHandler obj handler@).
+xmlResourceInsertHandler :: XmlResource  a -> EvtHandler  b ->  IO ()
+xmlResourceInsertHandler _obj handler 
+  = withObjectRef "xmlResourceInsertHandler" _obj $ \cobj__obj -> 
+    withObjectPtr handler $ \cobj_handler -> 
+    wxXmlResource_InsertHandler cobj__obj  cobj_handler  
+foreign import ccall "wxXmlResource_InsertHandler" wxXmlResource_InsertHandler :: Ptr (TXmlResource a) -> Ptr (TEvtHandler b) -> IO ()
+
+-- | usage: (@xmlResourceLoad obj filemask@).
+xmlResourceLoad :: XmlResource  a -> String ->  IO Bool
+xmlResourceLoad _obj filemask 
+  = withBoolResult $
+    withObjectRef "xmlResourceLoad" _obj $ \cobj__obj -> 
+    withStringPtr filemask $ \cobj_filemask -> 
+    wxXmlResource_Load cobj__obj  cobj_filemask  
+foreign import ccall "wxXmlResource_Load" wxXmlResource_Load :: Ptr (TXmlResource a) -> Ptr (TWxString b) -> IO CBool
+
+-- | usage: (@xmlResourceLoadBitmap obj name@).
+xmlResourceLoadBitmap :: XmlResource  a -> String ->  IO (Bitmap  ())
+xmlResourceLoadBitmap _obj name 
+  = withRefBitmap $ \pref -> 
+    withObjectRef "xmlResourceLoadBitmap" _obj $ \cobj__obj -> 
+    withStringPtr name $ \cobj_name -> 
+    wxXmlResource_LoadBitmap cobj__obj  cobj_name   pref
+foreign import ccall "wxXmlResource_LoadBitmap" wxXmlResource_LoadBitmap :: Ptr (TXmlResource a) -> Ptr (TWxString b) -> Ptr (TBitmap ()) -> IO ()
+
+-- | usage: (@xmlResourceLoadDialog obj parent name@).
+xmlResourceLoadDialog :: XmlResource  a -> Window  b -> String ->  IO (Dialog  ())
+xmlResourceLoadDialog _obj parent name 
+  = withObjectResult $
+    withObjectRef "xmlResourceLoadDialog" _obj $ \cobj__obj -> 
+    withObjectPtr parent $ \cobj_parent -> 
+    withStringPtr name $ \cobj_name -> 
+    wxXmlResource_LoadDialog cobj__obj  cobj_parent  cobj_name  
+foreign import ccall "wxXmlResource_LoadDialog" wxXmlResource_LoadDialog :: Ptr (TXmlResource a) -> Ptr (TWindow b) -> Ptr (TWxString c) -> IO (Ptr (TDialog ()))
+
+-- | usage: (@xmlResourceLoadFrame obj parent name@).
+xmlResourceLoadFrame :: XmlResource  a -> Window  b -> String ->  IO (Frame  ())
+xmlResourceLoadFrame _obj parent name 
+  = withObjectResult $
+    withObjectRef "xmlResourceLoadFrame" _obj $ \cobj__obj -> 
+    withObjectPtr parent $ \cobj_parent -> 
+    withStringPtr name $ \cobj_name -> 
+    wxXmlResource_LoadFrame cobj__obj  cobj_parent  cobj_name  
+foreign import ccall "wxXmlResource_LoadFrame" wxXmlResource_LoadFrame :: Ptr (TXmlResource a) -> Ptr (TWindow b) -> Ptr (TWxString c) -> IO (Ptr (TFrame ()))
+
+-- | usage: (@xmlResourceLoadIcon obj name@).
+xmlResourceLoadIcon :: XmlResource  a -> String ->  IO (Icon  ())
+xmlResourceLoadIcon _obj name 
+  = withRefIcon $ \pref -> 
+    withObjectRef "xmlResourceLoadIcon" _obj $ \cobj__obj -> 
+    withStringPtr name $ \cobj_name -> 
+    wxXmlResource_LoadIcon cobj__obj  cobj_name   pref
+foreign import ccall "wxXmlResource_LoadIcon" wxXmlResource_LoadIcon :: Ptr (TXmlResource a) -> Ptr (TWxString b) -> Ptr (TIcon ()) -> IO ()
+
+-- | usage: (@xmlResourceLoadMenu obj name@).
+xmlResourceLoadMenu :: XmlResource  a -> String ->  IO (Menu  ())
+xmlResourceLoadMenu _obj name 
+  = withObjectResult $
+    withObjectRef "xmlResourceLoadMenu" _obj $ \cobj__obj -> 
+    withStringPtr name $ \cobj_name -> 
+    wxXmlResource_LoadMenu cobj__obj  cobj_name  
+foreign import ccall "wxXmlResource_LoadMenu" wxXmlResource_LoadMenu :: Ptr (TXmlResource a) -> Ptr (TWxString b) -> IO (Ptr (TMenu ()))
+
+-- | usage: (@xmlResourceLoadMenuBar obj parent name@).
+xmlResourceLoadMenuBar :: XmlResource  a -> Window  b -> String ->  IO (MenuBar  ())
+xmlResourceLoadMenuBar _obj parent name 
+  = withObjectResult $
+    withObjectRef "xmlResourceLoadMenuBar" _obj $ \cobj__obj -> 
+    withObjectPtr parent $ \cobj_parent -> 
+    withStringPtr name $ \cobj_name -> 
+    wxXmlResource_LoadMenuBar cobj__obj  cobj_parent  cobj_name  
+foreign import ccall "wxXmlResource_LoadMenuBar" wxXmlResource_LoadMenuBar :: Ptr (TXmlResource a) -> Ptr (TWindow b) -> Ptr (TWxString c) -> IO (Ptr (TMenuBar ()))
+
+-- | usage: (@xmlResourceLoadPanel obj parent name@).
+xmlResourceLoadPanel :: XmlResource  a -> Window  b -> String ->  IO (Panel  ())
+xmlResourceLoadPanel _obj parent name 
+  = withObjectResult $
+    withObjectRef "xmlResourceLoadPanel" _obj $ \cobj__obj -> 
+    withObjectPtr parent $ \cobj_parent -> 
+    withStringPtr name $ \cobj_name -> 
+    wxXmlResource_LoadPanel cobj__obj  cobj_parent  cobj_name  
+foreign import ccall "wxXmlResource_LoadPanel" wxXmlResource_LoadPanel :: Ptr (TXmlResource a) -> Ptr (TWindow b) -> Ptr (TWxString c) -> IO (Ptr (TPanel ()))
+
+-- | usage: (@xmlResourceLoadToolBar obj parent name@).
+xmlResourceLoadToolBar :: XmlResource  a -> Window  b -> String ->  IO (ToolBar  ())
+xmlResourceLoadToolBar _obj parent name 
+  = withObjectResult $
+    withObjectRef "xmlResourceLoadToolBar" _obj $ \cobj__obj -> 
+    withObjectPtr parent $ \cobj_parent -> 
+    withStringPtr name $ \cobj_name -> 
+    wxXmlResource_LoadToolBar cobj__obj  cobj_parent  cobj_name  
+foreign import ccall "wxXmlResource_LoadToolBar" wxXmlResource_LoadToolBar :: Ptr (TXmlResource a) -> Ptr (TWindow b) -> Ptr (TWxString c) -> IO (Ptr (TToolBar ()))
+
+-- | usage: (@xmlResourceSet obj res@).
+xmlResourceSet :: XmlResource  a -> XmlResource  b ->  IO (XmlResource  ())
+xmlResourceSet _obj res 
+  = withObjectResult $
+    withObjectRef "xmlResourceSet" _obj $ \cobj__obj -> 
+    withObjectPtr res $ \cobj_res -> 
+    wxXmlResource_Set cobj__obj  cobj_res  
+foreign import ccall "wxXmlResource_Set" wxXmlResource_Set :: Ptr (TXmlResource a) -> Ptr (TXmlResource b) -> IO (Ptr (TXmlResource ()))
+
+-- | usage: (@xmlResourceSetDomain obj domain@).
+xmlResourceSetDomain :: XmlResource  a -> String ->  IO ()
+xmlResourceSetDomain _obj domain 
+  = withObjectRef "xmlResourceSetDomain" _obj $ \cobj__obj -> 
+    withStringPtr domain $ \cobj_domain -> 
+    wxXmlResource_SetDomain cobj__obj  cobj_domain  
+foreign import ccall "wxXmlResource_SetDomain" wxXmlResource_SetDomain :: Ptr (TXmlResource a) -> Ptr (TWxString b) -> IO ()
+
+-- | usage: (@xmlResourceSetFlags obj flags@).
+xmlResourceSetFlags :: XmlResource  a -> Int ->  IO ()
+xmlResourceSetFlags _obj flags 
+  = withObjectRef "xmlResourceSetFlags" _obj $ \cobj__obj -> 
+    wxXmlResource_SetFlags cobj__obj  (toCInt flags)  
+foreign import ccall "wxXmlResource_SetFlags" wxXmlResource_SetFlags :: Ptr (TXmlResource a) -> CInt -> IO ()
+
+-- | usage: (@xmlResourceUnload obj filemask@).
+xmlResourceUnload :: XmlResource  a -> String ->  IO Bool
+xmlResourceUnload _obj filemask 
+  = withBoolResult $
+    withObjectRef "xmlResourceUnload" _obj $ \cobj__obj -> 
+    withStringPtr filemask $ \cobj_filemask -> 
+    wxXmlResource_Unload cobj__obj  cobj_filemask  
+foreign import ccall "wxXmlResource_Unload" wxXmlResource_Unload :: Ptr (TXmlResource a) -> Ptr (TWxString b) -> IO CBool
+
-- 
2.44.1

