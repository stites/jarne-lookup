{-# OPTIONS_HADDOCK prune #-}
{-# LANGUAGE ForeignFunctionInterface #-}
--------------------------------------------------------------------------------
{-|
Module      :  WxcClassesMZ
Copyright   :  Copyright (c) Daan Leijen 2003, 2004
License     :  wxWindows

Maintainer  :  wxhaskell-devel@lists.sourceforge.net
Stability   :  provisional
Portability :  portable

Haskell class definitions for the wxWidgets C library (@wxc.dll@).

Do not edit this file manually!
This file was automatically generated by wxDirect.

From the files:

  * @wxc.h@

And contains 2339 methods for 131 classes.
-}
--------------------------------------------------------------------------------
module Graphics.UI.WXCore.WxcClassesMZ
    ( -- * Global
     -- ** Null
      nullAcceleratorTable
     ,nullBitmap
     ,nullBrush
     ,nullColour
     ,nullCursor
     ,nullFont
     ,nullIcon
     ,nullPalette
     ,nullPen
     -- ** Events
     ,wxEVT_ACTIVATE
     ,wxEVT_ACTIVATE_APP
     ,wxEVT_AUINOTEBOOK_ALLOW_DND
     ,wxEVT_AUINOTEBOOK_BEGIN_DRAG
     ,wxEVT_AUINOTEBOOK_BG_DCLICK
     ,wxEVT_AUINOTEBOOK_BUTTON
     ,wxEVT_AUINOTEBOOK_DRAG_DONE
     ,wxEVT_AUINOTEBOOK_DRAG_MOTION
     ,wxEVT_AUINOTEBOOK_END_DRAG
     ,wxEVT_AUINOTEBOOK_PAGE_CHANGED
     ,wxEVT_AUINOTEBOOK_PAGE_CHANGING
     ,wxEVT_AUINOTEBOOK_PAGE_CLOSE
     ,wxEVT_AUINOTEBOOK_PAGE_CLOSED
     ,wxEVT_AUINOTEBOOK_TAB_MIDDLE_DOWN
     ,wxEVT_AUINOTEBOOK_TAB_MIDDLE_UP
     ,wxEVT_AUINOTEBOOK_TAB_RIGHT_DOWN
     ,wxEVT_AUINOTEBOOK_TAB_RIGHT_UP
     ,wxEVT_AUITOOLBAR_BEGIN_DRAG
     ,wxEVT_AUITOOLBAR_MIDDLE_CLICK
     ,wxEVT_AUITOOLBAR_OVERFLOW_CLICK
     ,wxEVT_AUITOOLBAR_RIGHT_CLICK
     ,wxEVT_AUITOOLBAR_TOOL_DROPDOWN
     ,wxEVT_AUI_FIND_MANAGER
     ,wxEVT_AUI_PANE_BUTTON
     ,wxEVT_AUI_PANE_CLOSE
     ,wxEVT_AUI_PANE_MAXIMIZE
     ,wxEVT_AUI_PANE_RESTORE
     ,wxEVT_AUI_RENDER
     ,wxEVT_AUX1_DCLICK
     ,wxEVT_AUX1_DOWN
     ,wxEVT_AUX1_UP
     ,wxEVT_AUX2_DCLICK
     ,wxEVT_AUX2_DOWN
     ,wxEVT_AUX2_UP
     ,wxEVT_CALCULATE_LAYOUT
     ,wxEVT_CALENDAR_DAY_CHANGED
     ,wxEVT_CALENDAR_DOUBLECLICKED
     ,wxEVT_CALENDAR_MONTH_CHANGED
     ,wxEVT_CALENDAR_PAGE_CHANGED
     ,wxEVT_CALENDAR_SEL_CHANGED
     ,wxEVT_CALENDAR_WEEKDAY_CLICKED
     ,wxEVT_CALENDAR_WEEK_CLICKED
     ,wxEVT_CALENDAR_YEAR_CHANGED
     ,wxEVT_CHAR
     ,wxEVT_CHAR_HOOK
     ,wxEVT_CHILD_FOCUS
     ,wxEVT_CLIPBOARD_CHANGED
     ,wxEVT_CLOSE_WINDOW
     ,wxEVT_COMMAND_BUTTON_CLICKED
     ,wxEVT_COMMAND_CHECKBOX_CLICKED
     ,wxEVT_COMMAND_CHECKLISTBOX_TOGGLED
     ,wxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGED
     ,wxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGING
     ,wxEVT_COMMAND_CHOICE_SELECTED
     ,wxEVT_COMMAND_COLLPANE_CHANGED
     ,wxEVT_COMMAND_COLOURPICKER_CHANGED
     ,wxEVT_COMMAND_COMBOBOX_CLOSEUP
     ,wxEVT_COMMAND_COMBOBOX_DROPDOWN
     ,wxEVT_COMMAND_COMBOBOX_SELECTED
     ,wxEVT_COMMAND_DATAVIEW_CACHE_HINT
     ,wxEVT_COMMAND_DATAVIEW_COLUMN_HEADER_CLICK
     ,wxEVT_COMMAND_DATAVIEW_COLUMN_HEADER_RIGHT_CLICK
     ,wxEVT_COMMAND_DATAVIEW_COLUMN_REORDERED
     ,wxEVT_COMMAND_DATAVIEW_COLUMN_SORTED
     ,wxEVT_COMMAND_DATAVIEW_ITEM_ACTIVATED
     ,wxEVT_COMMAND_DATAVIEW_ITEM_BEGIN_DRAG
     ,wxEVT_COMMAND_DATAVIEW_ITEM_COLLAPSED
     ,wxEVT_COMMAND_DATAVIEW_ITEM_COLLAPSING
     ,wxEVT_COMMAND_DATAVIEW_ITEM_CONTEXT_MENU
     ,wxEVT_COMMAND_DATAVIEW_ITEM_DROP
     ,wxEVT_COMMAND_DATAVIEW_ITEM_DROP_POSSIBLE
     ,wxEVT_COMMAND_DATAVIEW_ITEM_EDITING_DONE
     ,wxEVT_COMMAND_DATAVIEW_ITEM_EDITING_STARTED
     ,wxEVT_COMMAND_DATAVIEW_ITEM_EXPANDED
     ,wxEVT_COMMAND_DATAVIEW_ITEM_EXPANDING
     ,wxEVT_COMMAND_DATAVIEW_ITEM_START_EDITING
     ,wxEVT_COMMAND_DATAVIEW_ITEM_VALUE_CHANGED
     ,wxEVT_COMMAND_DATAVIEW_SELECTION_CHANGED
     ,wxEVT_COMMAND_DIRPICKER_CHANGED
     ,wxEVT_COMMAND_ENTER
     ,wxEVT_COMMAND_FILEPICKER_CHANGED
     ,wxEVT_COMMAND_FIND
     ,wxEVT_COMMAND_FIND_CLOSE
     ,wxEVT_COMMAND_FIND_NEXT
     ,wxEVT_COMMAND_FIND_REPLACE
     ,wxEVT_COMMAND_FIND_REPLACE_ALL
     ,wxEVT_COMMAND_FONTPICKER_CHANGED
     ,wxEVT_COMMAND_HEADER_BEGIN_REORDER
     ,wxEVT_COMMAND_HEADER_BEGIN_RESIZE
     ,wxEVT_COMMAND_HEADER_CLICK
     ,wxEVT_COMMAND_HEADER_DCLICK
     ,wxEVT_COMMAND_HEADER_DRAGGING_CANCELLED
     ,wxEVT_COMMAND_HEADER_END_REORDER
     ,wxEVT_COMMAND_HEADER_END_RESIZE
     ,wxEVT_COMMAND_HEADER_MIDDLE_CLICK
     ,wxEVT_COMMAND_HEADER_MIDDLE_DCLICK
     ,wxEVT_COMMAND_HEADER_RESIZING
     ,wxEVT_COMMAND_HEADER_RIGHT_CLICK
     ,wxEVT_COMMAND_HEADER_RIGHT_DCLICK
     ,wxEVT_COMMAND_HEADER_SEPARATOR_DCLICK
     ,wxEVT_COMMAND_HTML_CELL_CLICKED
     ,wxEVT_COMMAND_HTML_CELL_HOVER
     ,wxEVT_COMMAND_HTML_LINK_CLICKED
     ,wxEVT_COMMAND_HYPERLINK
     ,wxEVT_COMMAND_KILL_FOCUS
     ,wxEVT_COMMAND_LEFT_CLICK
     ,wxEVT_COMMAND_LEFT_DCLICK
     ,wxEVT_COMMAND_LISTBOOK_PAGE_CHANGED
     ,wxEVT_COMMAND_LISTBOOK_PAGE_CHANGING
     ,wxEVT_COMMAND_LISTBOX_DOUBLECLICKED
     ,wxEVT_COMMAND_LISTBOX_SELECTED
     ,wxEVT_COMMAND_LIST_BEGIN_DRAG
     ,wxEVT_COMMAND_LIST_BEGIN_LABEL_EDIT
     ,wxEVT_COMMAND_LIST_BEGIN_RDRAG
     ,wxEVT_COMMAND_LIST_CACHE_HINT
     ,wxEVT_COMMAND_LIST_COL_BEGIN_DRAG
     ,wxEVT_COMMAND_LIST_COL_CLICK
     ,wxEVT_COMMAND_LIST_COL_DRAGGING
     ,wxEVT_COMMAND_LIST_COL_END_DRAG
     ,wxEVT_COMMAND_LIST_COL_RIGHT_CLICK
     ,wxEVT_COMMAND_LIST_DELETE_ALL_ITEMS
     ,wxEVT_COMMAND_LIST_DELETE_ITEM
     ,wxEVT_COMMAND_LIST_END_LABEL_EDIT
     ,wxEVT_COMMAND_LIST_INSERT_ITEM
     ,wxEVT_COMMAND_LIST_ITEM_ACTIVATED
     ,wxEVT_COMMAND_LIST_ITEM_DESELECTED
     ,wxEVT_COMMAND_LIST_ITEM_FOCUSED
     ,wxEVT_COMMAND_LIST_ITEM_MIDDLE_CLICK
     ,wxEVT_COMMAND_LIST_ITEM_RIGHT_CLICK
     ,wxEVT_COMMAND_LIST_ITEM_SELECTED
     ,wxEVT_COMMAND_LIST_KEY_DOWN
     ,wxEVT_COMMAND_MENU_SELECTED
     ,wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED
     ,wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGING
     ,wxEVT_COMMAND_RADIOBOX_SELECTED
     ,wxEVT_COMMAND_RADIOBUTTON_SELECTED
     ,wxEVT_COMMAND_RIBBONBAR_PAGE_CHANGED
     ,wxEVT_COMMAND_RIBBONBAR_PAGE_CHANGING
     ,wxEVT_COMMAND_RIBBONBAR_TAB_MIDDLE_DOWN
     ,wxEVT_COMMAND_RIBBONBAR_TAB_MIDDLE_UP
     ,wxEVT_COMMAND_RIBBONBAR_TAB_RIGHT_DOWN
     ,wxEVT_COMMAND_RIBBONBAR_TAB_RIGHT_UP
     ,wxEVT_COMMAND_RIBBONBUTTON_CLICKED
     ,wxEVT_COMMAND_RIBBONBUTTON_DROPDOWN_CLICKED
     ,wxEVT_COMMAND_RIBBONGALLERY_HOVER_CHANGED
     ,wxEVT_COMMAND_RIBBONGALLERY_SELECTED
     ,wxEVT_COMMAND_RIBBONTOOL_CLICKED
     ,wxEVT_COMMAND_RIBBONTOOL_DROPDOWN_CLICKED
     ,wxEVT_COMMAND_RICHTEXT_BUFFER_RESET
     ,wxEVT_COMMAND_RICHTEXT_CHARACTER
     ,wxEVT_COMMAND_RICHTEXT_CONTENT_DELETED
     ,wxEVT_COMMAND_RICHTEXT_CONTENT_INSERTED
     ,wxEVT_COMMAND_RICHTEXT_DELETE
     ,wxEVT_COMMAND_RICHTEXT_LEFT_CLICK
     ,wxEVT_COMMAND_RICHTEXT_LEFT_DCLICK
     ,wxEVT_COMMAND_RICHTEXT_MIDDLE_CLICK
     ,wxEVT_COMMAND_RICHTEXT_RETURN
     ,wxEVT_COMMAND_RICHTEXT_RIGHT_CLICK
     ,wxEVT_COMMAND_RICHTEXT_SELECTION_CHANGED
     ,wxEVT_COMMAND_RICHTEXT_STYLESHEET_CHANGED
     ,wxEVT_COMMAND_RICHTEXT_STYLESHEET_CHANGING
     ,wxEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACED
     ,wxEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACING
     ,wxEVT_COMMAND_RICHTEXT_STYLE_CHANGED
     ,wxEVT_COMMAND_RIGHT_CLICK
     ,wxEVT_COMMAND_RIGHT_DCLICK
     ,wxEVT_COMMAND_SEARCHCTRL_CANCEL_BTN
     ,wxEVT_COMMAND_SEARCHCTRL_SEARCH_BTN
     ,wxEVT_COMMAND_SET_FOCUS
     ,wxEVT_COMMAND_SLIDER_UPDATED
     ,wxEVT_COMMAND_SPINCTRLDOUBLE_UPDATED
     ,wxEVT_COMMAND_SPINCTRL_UPDATED
     ,wxEVT_COMMAND_SPLITTER_DOUBLECLICKED
     ,wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGED
     ,wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGING
     ,wxEVT_COMMAND_SPLITTER_UNSPLIT
     ,wxEVT_COMMAND_TEXT_COPY
     ,wxEVT_COMMAND_TEXT_CUT
     ,wxEVT_COMMAND_TEXT_ENTER
     ,wxEVT_COMMAND_TEXT_MAXLEN
     ,wxEVT_COMMAND_TEXT_PASTE
     ,wxEVT_COMMAND_TEXT_UPDATED
     ,wxEVT_COMMAND_TEXT_URL
     ,wxEVT_COMMAND_THREAD
     ,wxEVT_COMMAND_TOGGLEBUTTON_CLICKED
     ,wxEVT_COMMAND_TOOLBOOK_PAGE_CHANGED
     ,wxEVT_COMMAND_TOOLBOOK_PAGE_CHANGING
     ,wxEVT_COMMAND_TOOL_CLICKED
     ,wxEVT_COMMAND_TOOL_DROPDOWN_CLICKED
     ,wxEVT_COMMAND_TOOL_ENTER
     ,wxEVT_COMMAND_TOOL_RCLICKED
     ,wxEVT_COMMAND_TREEBOOK_NODE_COLLAPSED
     ,wxEVT_COMMAND_TREEBOOK_NODE_EXPANDED
     ,wxEVT_COMMAND_TREEBOOK_PAGE_CHANGED
     ,wxEVT_COMMAND_TREEBOOK_PAGE_CHANGING
     ,wxEVT_COMMAND_TREE_BEGIN_DRAG
     ,wxEVT_COMMAND_TREE_BEGIN_LABEL_EDIT
     ,wxEVT_COMMAND_TREE_BEGIN_RDRAG
     ,wxEVT_COMMAND_TREE_DELETE_ITEM
     ,wxEVT_COMMAND_TREE_END_DRAG
     ,wxEVT_COMMAND_TREE_END_LABEL_EDIT
     ,wxEVT_COMMAND_TREE_GET_INFO
     ,wxEVT_COMMAND_TREE_ITEM_ACTIVATED
     ,wxEVT_COMMAND_TREE_ITEM_COLLAPSED
     ,wxEVT_COMMAND_TREE_ITEM_COLLAPSING
     ,wxEVT_COMMAND_TREE_ITEM_EXPANDED
     ,wxEVT_COMMAND_TREE_ITEM_EXPANDING
     ,wxEVT_COMMAND_TREE_ITEM_GETTOOLTIP
     ,wxEVT_COMMAND_TREE_ITEM_MENU
     ,wxEVT_COMMAND_TREE_ITEM_MIDDLE_CLICK
     ,wxEVT_COMMAND_TREE_ITEM_RIGHT_CLICK
     ,wxEVT_COMMAND_TREE_KEY_DOWN
     ,wxEVT_COMMAND_TREE_SEL_CHANGED
     ,wxEVT_COMMAND_TREE_SEL_CHANGING
     ,wxEVT_COMMAND_TREE_SET_INFO
     ,wxEVT_COMMAND_TREE_STATE_IMAGE_CLICK
     ,wxEVT_COMMAND_VLBOX_SELECTED
     ,wxEVT_CONTEXT_MENU
     ,wxEVT_CREATE
     ,wxEVT_DATE_CHANGED
     ,wxEVT_DELETE
     ,wxEVT_DESTROY
     ,wxEVT_DETAILED_HELP
     ,wxEVT_DISPLAY_CHANGED
     ,wxEVT_DROP_FILES
     ,wxEVT_END_PROCESS
     ,wxEVT_END_SESSION
     ,wxEVT_ENTER_WINDOW
     ,wxEVT_ERASE_BACKGROUND
     ,wxEVT_FILECTRL_FILEACTIVATED
     ,wxEVT_FILECTRL_FILTERCHANGED
     ,wxEVT_FILECTRL_FOLDERCHANGED
     ,wxEVT_FILECTRL_SELECTIONCHANGED
     ,wxEVT_FSWATCHER
     ,wxEVT_GRID_CELL_BEGIN_DRAG
     ,wxEVT_GRID_CELL_CHANGED
     ,wxEVT_GRID_CELL_CHANGING
     ,wxEVT_GRID_CELL_LEFT_CLICK
     ,wxEVT_GRID_CELL_LEFT_DCLICK
     ,wxEVT_GRID_CELL_RIGHT_CLICK
     ,wxEVT_GRID_CELL_RIGHT_DCLICK
     ,wxEVT_GRID_COL_MOVE
     ,wxEVT_GRID_COL_SIZE
     ,wxEVT_GRID_COL_SORT
     ,wxEVT_GRID_EDITOR_CREATED
     ,wxEVT_GRID_EDITOR_HIDDEN
     ,wxEVT_GRID_EDITOR_SHOWN
     ,wxEVT_GRID_LABEL_LEFT_CLICK
     ,wxEVT_GRID_LABEL_LEFT_DCLICK
     ,wxEVT_GRID_LABEL_RIGHT_CLICK
     ,wxEVT_GRID_LABEL_RIGHT_DCLICK
     ,wxEVT_GRID_RANGE_SELECT
     ,wxEVT_GRID_ROW_SIZE
     ,wxEVT_GRID_SELECT_CELL
     ,wxEVT_HELP
     ,wxEVT_HIBERNATE
     ,wxEVT_HOTKEY
     ,wxEVT_HTML_CELL_CLICKED
     ,wxEVT_HTML_CELL_MOUSE_HOVER
     ,wxEVT_HTML_LINK_CLICKED
     ,wxEVT_HTML_SET_TITLE
     ,wxEVT_ICONIZE
     ,wxEVT_IDLE
     ,wxEVT_INIT_DIALOG
     ,wxEVT_INPUT_SINK
     ,wxEVT_KEY_DOWN
     ,wxEVT_KEY_UP
     ,wxEVT_KILL_FOCUS
     ,wxEVT_LEAVE_WINDOW
     ,wxEVT_LEFT_DCLICK
     ,wxEVT_LEFT_DOWN
     ,wxEVT_LEFT_UP
     ,wxEVT_MAXIMIZE
     ,wxEVT_MENU_CLOSE
     ,wxEVT_MENU_HIGHLIGHT
     ,wxEVT_MENU_OPEN
     ,wxEVT_MIDDLE_DCLICK
     ,wxEVT_MIDDLE_DOWN
     ,wxEVT_MIDDLE_UP
     ,wxEVT_MOTION
     ,wxEVT_MOUSEWHEEL
     ,wxEVT_MOUSE_CAPTURE_CHANGED
     ,wxEVT_MOUSE_CAPTURE_LOST
     ,wxEVT_MOVE
     ,wxEVT_MOVE_END
     ,wxEVT_MOVE_START
     ,wxEVT_MOVING
     ,wxEVT_NAVIGATION_KEY
     ,wxEVT_NC_PAINT
     ,wxEVT_PAINT
     ,wxEVT_PALETTE_CHANGED
     ,wxEVT_PG_CHANGED
     ,wxEVT_PG_CHANGING
     ,wxEVT_PG_DOUBLE_CLICK
     ,wxEVT_PG_HIGHLIGHTED
     ,wxEVT_PG_ITEM_COLLAPSED
     ,wxEVT_PG_ITEM_EXPANDED
     ,wxEVT_PG_PAGE_CHANGED
     ,wxEVT_PG_RIGHT_CLICK
     ,wxEVT_PG_SELECTED
     ,wxEVT_POWER_RESUME
     ,wxEVT_POWER_SUSPENDED
     ,wxEVT_POWER_SUSPENDING
     ,wxEVT_POWER_SUSPEND_CANCEL
     ,wxEVT_PRINT_BEGIN
     ,wxEVT_PRINT_BEGIN_DOC
     ,wxEVT_PRINT_END
     ,wxEVT_PRINT_END_DOC
     ,wxEVT_PRINT_PAGE
     ,wxEVT_PRINT_PREPARE
     ,wxEVT_QUERY_END_SESSION
     ,wxEVT_QUERY_LAYOUT_INFO
     ,wxEVT_QUERY_NEW_PALETTE
     ,wxEVT_RIGHT_DCLICK
     ,wxEVT_RIGHT_DOWN
     ,wxEVT_RIGHT_UP
     ,wxEVT_SASH_DRAGGED
     ,wxEVT_SCROLLWIN_BOTTOM
     ,wxEVT_SCROLLWIN_LINEDOWN
     ,wxEVT_SCROLLWIN_LINEUP
     ,wxEVT_SCROLLWIN_PAGEDOWN
     ,wxEVT_SCROLLWIN_PAGEUP
     ,wxEVT_SCROLLWIN_THUMBRELEASE
     ,wxEVT_SCROLLWIN_THUMBTRACK
     ,wxEVT_SCROLLWIN_TOP
     ,wxEVT_SCROLL_BOTTOM
     ,wxEVT_SCROLL_CHANGED
     ,wxEVT_SCROLL_LINEDOWN
     ,wxEVT_SCROLL_LINEUP
     ,wxEVT_SCROLL_PAGEDOWN
     ,wxEVT_SCROLL_PAGEUP
     ,wxEVT_SCROLL_THUMBRELEASE
     ,wxEVT_SCROLL_THUMBTRACK
     ,wxEVT_SCROLL_TOP
     ,wxEVT_SET_CURSOR
     ,wxEVT_SET_FOCUS
     ,wxEVT_SHOW
     ,wxEVT_SIZE
     ,wxEVT_SIZING
     ,wxEVT_SOCKET
     ,wxEVT_SORT
     ,wxEVT_SPIN
     ,wxEVT_SPIN_DOWN
     ,wxEVT_SPIN_UP
     ,wxEVT_STC_AUTOCOMP_SELECTION
     ,wxEVT_STC_CALLTIP_CLICK
     ,wxEVT_STC_CHANGE
     ,wxEVT_STC_CHARADDED
     ,wxEVT_STC_DOUBLECLICK
     ,wxEVT_STC_DO_DROP
     ,wxEVT_STC_DRAG_OVER
     ,wxEVT_STC_DWELLEND
     ,wxEVT_STC_DWELLSTART
     ,wxEVT_STC_HOTSPOT_CLICK
     ,wxEVT_STC_HOTSPOT_DCLICK
     ,wxEVT_STC_KEY
     ,wxEVT_STC_MACRORECORD
     ,wxEVT_STC_MARGINCLICK
     ,wxEVT_STC_MODIFIED
     ,wxEVT_STC_NEEDSHOWN
     ,wxEVT_STC_PAINTED
     ,wxEVT_STC_ROMODIFYATTEMPT
     ,wxEVT_STC_SAVEPOINTLEFT
     ,wxEVT_STC_SAVEPOINTREACHED
     ,wxEVT_STC_START_DRAG
     ,wxEVT_STC_STYLENEEDED
     ,wxEVT_STC_UPDATEUI
     ,wxEVT_STC_URIDROPPED
     ,wxEVT_STC_USERLISTSELECTION
     ,wxEVT_STC_ZOOM
     ,wxEVT_SYS_COLOUR_CHANGED
     ,wxEVT_TASKBAR_BALLOON_CLICK
     ,wxEVT_TASKBAR_BALLOON_TIMEOUT
     ,wxEVT_TASKBAR_LEFT_DCLICK
     ,wxEVT_TASKBAR_LEFT_DOWN
     ,wxEVT_TASKBAR_LEFT_UP
     ,wxEVT_TASKBAR_MOVE
     ,wxEVT_TASKBAR_RIGHT_DCLICK
     ,wxEVT_TASKBAR_RIGHT_DOWN
     ,wxEVT_TASKBAR_RIGHT_UP
     ,wxEVT_TIMER
     ,wxEVT_UPDATE_UI
     ,wxEVT_WINDOW_MODAL_DIALOG_CLOSED
     ,wxEVT_WIZARD_CANCEL
     ,wxEVT_WIZARD_FINISHED
     ,wxEVT_WIZARD_HELP
     ,wxEVT_WIZARD_PAGE_CHANGED
     ,wxEVT_WIZARD_PAGE_CHANGING
     ,wxEVT_WIZARD_PAGE_SHOWN
     -- ** Misc.
     ,popProvider
     ,pushProvider
     ,quantize
     ,quantizePalette
     ,removeProvider
     ,textDataObjectCreate
     ,textDataObjectDelete
     ,textDataObjectGetText
     ,textDataObjectGetTextLength
     ,textDataObjectSetText
     ,versionNumber
     ,wxBK_HITTEST_NOWHERE
     ,wxBK_HITTEST_ONICON
     ,wxBK_HITTEST_ONITEM
     ,wxBK_HITTEST_ONLABEL
     ,wxBK_HITTEST_ONPAGE
     ,wxK_ADD
     ,wxK_ALT
     ,wxK_BACK
     ,wxK_CANCEL
     ,wxK_CAPITAL
     ,wxK_CLEAR
     ,wxK_CONTROL
     ,wxK_DECIMAL
     ,wxK_DELETE
     ,wxK_DIVIDE
     ,wxK_DOWN
     ,wxK_END
     ,wxK_ESCAPE
     ,wxK_EXECUTE
     ,wxK_F1
     ,wxK_F10
     ,wxK_F11
     ,wxK_F12
     ,wxK_F13
     ,wxK_F14
     ,wxK_F15
     ,wxK_F16
     ,wxK_F17
     ,wxK_F18
     ,wxK_F19
     ,wxK_F2
     ,wxK_F20
     ,wxK_F21
     ,wxK_F22
     ,wxK_F23
     ,wxK_F24
     ,wxK_F3
     ,wxK_F4
     ,wxK_F5
     ,wxK_F6
     ,wxK_F7
     ,wxK_F8
     ,wxK_F9
     ,wxK_HELP
     ,wxK_HOME
     ,wxK_INSERT
     ,wxK_LBUTTON
     ,wxK_LEFT
     ,wxK_MBUTTON
     ,wxK_MENU
     ,wxK_MULTIPLY
     ,wxK_NUMLOCK
     ,wxK_NUMPAD0
     ,wxK_NUMPAD1
     ,wxK_NUMPAD2
     ,wxK_NUMPAD3
     ,wxK_NUMPAD4
     ,wxK_NUMPAD5
     ,wxK_NUMPAD6
     ,wxK_NUMPAD7
     ,wxK_NUMPAD8
     ,wxK_NUMPAD9
     ,wxK_NUMPAD_ADD
     ,wxK_NUMPAD_BEGIN
     ,wxK_NUMPAD_DECIMAL
     ,wxK_NUMPAD_DELETE
     ,wxK_NUMPAD_DIVIDE
     ,wxK_NUMPAD_DOWN
     ,wxK_NUMPAD_END
     ,wxK_NUMPAD_ENTER
     ,wxK_NUMPAD_EQUAL
     ,wxK_NUMPAD_F1
     ,wxK_NUMPAD_F2
     ,wxK_NUMPAD_F3
     ,wxK_NUMPAD_F4
     ,wxK_NUMPAD_HOME
     ,wxK_NUMPAD_INSERT
     ,wxK_NUMPAD_LEFT
     ,wxK_NUMPAD_MULTIPLY
     ,wxK_NUMPAD_PAGEDOWN
     ,wxK_NUMPAD_PAGEUP
     ,wxK_NUMPAD_RIGHT
     ,wxK_NUMPAD_SEPARATOR
     ,wxK_NUMPAD_SPACE
     ,wxK_NUMPAD_SUBTRACT
     ,wxK_NUMPAD_TAB
     ,wxK_NUMPAD_UP
     ,wxK_PAGEDOWN
     ,wxK_PAGEUP
     ,wxK_PAUSE
     ,wxK_PRINT
     ,wxK_RBUTTON
     ,wxK_RETURN
     ,wxK_RIGHT
     ,wxK_SCROLL
     ,wxK_SELECT
     ,wxK_SEPARATOR
     ,wxK_SHIFT
     ,wxK_SNAPSHOT
     ,wxK_SPACE
     ,wxK_START
     ,wxK_SUBTRACT
     ,wxK_TAB
     ,wxK_UP
     ,wxNB_BOTTOM
     ,wxNB_LEFT
     ,wxNB_RIGHT
     ,wxNB_TOP
     ,wxcBeginBusyCursor
     ,wxcBell
     ,wxcEndBusyCursor
     ,wxcFree
     ,wxcGetMousePosition
     ,wxcGetPixelRGB
     ,wxcGetPixelRGBA
     ,wxcInitPixelsRGB
     ,wxcInitPixelsRGBA
     ,wxcIsBusy
     ,wxcMalloc
     ,wxcSetPixelRGB
     ,wxcSetPixelRGBA
     ,wxcSetPixelRowRGB
     ,wxcSetPixelRowRGBA
     ,wxcSysErrorCode
     ,wxcSysErrorMsg
     ,wxcSystemSettingsGetColour
     ,wxcWakeUpIdle
      -- * Classes
     -- ** MDIChildFrame
     ,mdiChildFrameActivate
     ,mdiChildFrameCreate
     -- ** MDIParentFrame
     ,mdiParentFrameActivateNext
     ,mdiParentFrameActivatePrevious
     ,mdiParentFrameArrangeIcons
     ,mdiParentFrameCascade
     ,mdiParentFrameCreate
     ,mdiParentFrameGetActiveChild
     ,mdiParentFrameGetClientWindow
     ,mdiParentFrameGetWindowMenu
     ,mdiParentFrameOnCreateClient
     ,mdiParentFrameSetWindowMenu
     ,mdiParentFrameTile
     -- ** Mask
     ,maskCreate
     ,maskCreateColoured
     -- ** MediaCtrl
     ,mediaCtrlCreate
     ,mediaCtrlDelete
     ,mediaCtrlGetBestSize
     ,mediaCtrlGetPlaybackRate
     ,mediaCtrlGetState
     ,mediaCtrlGetVolume
     ,mediaCtrlLength
     ,mediaCtrlLoad
     ,mediaCtrlLoadURI
     ,mediaCtrlLoadURIWithProxy
     ,mediaCtrlPause
     ,mediaCtrlPlay
     ,mediaCtrlSeek
     ,mediaCtrlSetPlaybackRate
     ,mediaCtrlSetVolume
     ,mediaCtrlShowPlayerControls
     ,mediaCtrlStop
     ,mediaCtrlTell
     -- ** MemoryDC
     ,memoryDCCreate
     ,memoryDCCreateCompatible
     ,memoryDCCreateWithBitmap
     ,memoryDCDelete
     ,memoryDCSelectObject
     -- ** MemoryInputStream
     ,memoryInputStreamCreate
     ,memoryInputStreamDelete
     -- ** Menu
     ,menuAppend
     ,menuAppendItem
     ,menuAppendRadioItem
     ,menuAppendSeparator
     ,menuAppendSub
     ,menuBreak
     ,menuCheck
     ,menuCreate
     ,menuDeleteById
     ,menuDeleteByItem
     ,menuDeletePointer
     ,menuDestroyById
     ,menuDestroyByItem
     ,menuEnable
     ,menuFindItem
     ,menuFindItemByLabel
     ,menuGetClientData
     ,menuGetHelpString
     ,menuGetInvokingWindow
     ,menuGetLabelText
     ,menuGetMenuBar
     ,menuGetMenuItemCount
     ,menuGetMenuItems
     ,menuGetParent
     ,menuGetStyle
     ,menuGetTitle
     ,menuInsert
     ,menuInsertItem
     ,menuInsertSub
     ,menuIsAttached
     ,menuIsChecked
     ,menuIsEnabled
     ,menuPrepend
     ,menuPrependItem
     ,menuPrependSub
     ,menuRemoveById
     ,menuRemoveByItem
     ,menuSetClientData
     ,menuSetEventHandler
     ,menuSetHelpString
     ,menuSetInvokingWindow
     ,menuSetLabel
     ,menuSetParent
     ,menuSetTitle
     ,menuUpdateUI
     -- ** MenuBar
     ,menuBarAppend
     ,menuBarCheck
     ,menuBarCreate
     ,menuBarDeletePointer
     ,menuBarEnable
     ,menuBarEnableItem
     ,menuBarEnableTop
     ,menuBarFindItem
     ,menuBarFindMenu
     ,menuBarFindMenuItem
     ,menuBarGetFrame
     ,menuBarGetHelpString
     ,menuBarGetLabel
     ,menuBarGetMenu
     ,menuBarGetMenuCount
     ,menuBarGetMenuLabel
     ,menuBarInsert
     ,menuBarIsChecked
     ,menuBarIsEnabled
     ,menuBarRemove
     ,menuBarReplace
     ,menuBarSetHelpString
     ,menuBarSetItemLabel
     ,menuBarSetLabel
     ,menuBarSetMenuLabel
     -- ** MenuEvent
     ,menuEventCopyObject
     ,menuEventGetMenuId
     -- ** MenuItem
     ,menuItemCheck
     ,menuItemCreate
     ,menuItemCreateEx
     ,menuItemCreateSeparator
     ,menuItemDelete
     ,menuItemEnable
     ,menuItemGetHelp
     ,menuItemGetId
     ,menuItemGetItemLabel
     ,menuItemGetItemLabelText
     ,menuItemGetLabelText
     ,menuItemGetMenu
     ,menuItemGetSubMenu
     ,menuItemIsCheckable
     ,menuItemIsChecked
     ,menuItemIsEnabled
     ,menuItemIsSeparator
     ,menuItemIsSubMenu
     ,menuItemSetCheckable
     ,menuItemSetHelp
     ,menuItemSetId
     ,menuItemSetItemLabel
     ,menuItemSetSubMenu
     -- ** MessageDialog
     ,messageDialogCreate
     ,messageDialogDelete
     ,messageDialogShowModal
     -- ** Metafile
     ,metafileCreate
     ,metafileDelete
     ,metafileIsOk
     ,metafilePlay
     ,metafileSetClipboard
     -- ** MetafileDC
     ,metafileDCClose
     ,metafileDCCreate
     ,metafileDCDelete
     -- ** MimeTypesManager
     ,mimeTypesManagerAddFallbacks
     ,mimeTypesManagerCreate
     ,mimeTypesManagerEnumAllFileTypes
     ,mimeTypesManagerGetFileTypeFromExtension
     ,mimeTypesManagerGetFileTypeFromMimeType
     ,mimeTypesManagerIsOfType
     -- ** MiniFrame
     ,miniFrameCreate
     -- ** MirrorDC
     ,mirrorDCCreate
     ,mirrorDCDelete
     -- ** MouseEvent
     ,mouseEventAltDown
     ,mouseEventButton
     ,mouseEventButtonDClick
     ,mouseEventButtonDown
     ,mouseEventButtonIsDown
     ,mouseEventButtonUp
     ,mouseEventControlDown
     ,mouseEventCopyObject
     ,mouseEventDragging
     ,mouseEventEntering
     ,mouseEventGetButton
     ,mouseEventGetLogicalPosition
     ,mouseEventGetPosition
     ,mouseEventGetWheelDelta
     ,mouseEventGetWheelRotation
     ,mouseEventGetX
     ,mouseEventGetY
     ,mouseEventIsButton
     ,mouseEventLeaving
     ,mouseEventLeftDClick
     ,mouseEventLeftDown
     ,mouseEventLeftIsDown
     ,mouseEventLeftUp
     ,mouseEventMetaDown
     ,mouseEventMiddleDClick
     ,mouseEventMiddleDown
     ,mouseEventMiddleIsDown
     ,mouseEventMiddleUp
     ,mouseEventMoving
     ,mouseEventRightDClick
     ,mouseEventRightDown
     ,mouseEventRightIsDown
     ,mouseEventRightUp
     ,mouseEventShiftDown
     -- ** MoveEvent
     ,moveEventCopyObject
     ,moveEventGetPosition
     -- ** NavigationKeyEvent
     ,navigationKeyEventGetCurrentFocus
     ,navigationKeyEventGetDirection
     ,navigationKeyEventIsWindowChange
     ,navigationKeyEventSetCurrentFocus
     ,navigationKeyEventSetDirection
     ,navigationKeyEventSetWindowChange
     ,navigationKeyEventShouldPropagate
     -- ** Notebook
     ,notebookAddPage
     ,notebookAdvanceSelection
     ,notebookAssignImageList
     ,notebookCreate
     ,notebookDeleteAllPages
     ,notebookDeletePage
     ,notebookGetImageList
     ,notebookGetPage
     ,notebookGetPageCount
     ,notebookGetPageImage
     ,notebookGetPageText
     ,notebookGetRowCount
     ,notebookGetSelection
     ,notebookHitTest
     ,notebookInsertPage
     ,notebookRemovePage
     ,notebookSetImageList
     ,notebookSetPadding
     ,notebookSetPageImage
     ,notebookSetPageSize
     ,notebookSetPageText
     ,notebookSetSelection
     -- ** NotifyEvent
     ,notifyEventAllow
     ,notifyEventCopyObject
     ,notifyEventIsAllowed
     ,notifyEventVeto
     -- ** OutputStream
     ,outputStreamDelete
     ,outputStreamLastWrite
     ,outputStreamPutC
     ,outputStreamSeek
     ,outputStreamSync
     ,outputStreamTell
     ,outputStreamWrite
     -- ** PGProperty
     ,pGPropertyGetLabel
     ,pGPropertyGetName
     ,pGPropertyGetValueAsString
     ,pGPropertyGetValueType
     ,pGPropertySetHelpString
     -- ** PageSetupDialog
     ,pageSetupDialogCreate
     ,pageSetupDialogGetPageSetupData
     ,pageSetupDialogShowModal
     -- ** PageSetupDialogData
     ,pageSetupDialogDataAssign
     ,pageSetupDialogDataAssignData
     ,pageSetupDialogDataCalculateIdFromPaperSize
     ,pageSetupDialogDataCalculatePaperSizeFromId
     ,pageSetupDialogDataCreate
     ,pageSetupDialogDataCreateFromData
     ,pageSetupDialogDataDelete
     ,pageSetupDialogDataEnableHelp
     ,pageSetupDialogDataEnableMargins
     ,pageSetupDialogDataEnableOrientation
     ,pageSetupDialogDataEnablePaper
     ,pageSetupDialogDataEnablePrinter
     ,pageSetupDialogDataGetDefaultInfo
     ,pageSetupDialogDataGetDefaultMinMargins
     ,pageSetupDialogDataGetEnableHelp
     ,pageSetupDialogDataGetEnableMargins
     ,pageSetupDialogDataGetEnableOrientation
     ,pageSetupDialogDataGetEnablePaper
     ,pageSetupDialogDataGetEnablePrinter
     ,pageSetupDialogDataGetMarginBottomRight
     ,pageSetupDialogDataGetMarginTopLeft
     ,pageSetupDialogDataGetMinMarginBottomRight
     ,pageSetupDialogDataGetMinMarginTopLeft
     ,pageSetupDialogDataGetPaperId
     ,pageSetupDialogDataGetPaperSize
     ,pageSetupDialogDataGetPrintData
     ,pageSetupDialogDataSetDefaultInfo
     ,pageSetupDialogDataSetDefaultMinMargins
     ,pageSetupDialogDataSetMarginBottomRight
     ,pageSetupDialogDataSetMarginTopLeft
     ,pageSetupDialogDataSetMinMarginBottomRight
     ,pageSetupDialogDataSetMinMarginTopLeft
     ,pageSetupDialogDataSetPaperId
     ,pageSetupDialogDataSetPaperSize
     ,pageSetupDialogDataSetPaperSizeId
     ,pageSetupDialogDataSetPrintData
     -- ** PaintDC
     ,paintDCCreate
     ,paintDCDelete
     -- ** Palette
     ,paletteAssign
     ,paletteCreateDefault
     ,paletteCreateRGB
     ,paletteDelete
     ,paletteGetPixel
     ,paletteGetRGB
     ,paletteIsEqual
     ,paletteIsOk
     -- ** PaletteChangedEvent
     ,paletteChangedEventCopyObject
     ,paletteChangedEventGetChangedWindow
     ,paletteChangedEventSetChangedWindow
     -- ** Panel
     ,panelCreate
     ,panelInitDialog
     ,panelSetFocus
     -- ** Pen
     ,penAssign
     ,penCreateDefault
     ,penCreateFromBitmap
     ,penCreateFromColour
     ,penCreateFromStock
     ,penDelete
     ,penGetCap
     ,penGetColour
     ,penGetDashes
     ,penGetJoin
     ,penGetStipple
     ,penGetStyle
     ,penGetWidth
     ,penIsEqual
     ,penIsOk
     ,penIsStatic
     ,penSafeDelete
     ,penSetCap
     ,penSetColour
     ,penSetColourSingle
     ,penSetDashes
     ,penSetJoin
     ,penSetStipple
     ,penSetStyle
     ,penSetWidth
     -- ** PostScriptDC
     ,postScriptDCCreate
     ,postScriptDCDelete
     ,postScriptDCGetResolution
     ,postScriptDCSetResolution
     -- ** PostScriptPrintNativeData
     ,postScriptPrintNativeDataCreate
     ,postScriptPrintNativeDataDelete
     -- ** PreviewCanvas
     ,previewCanvasCreate
     -- ** PreviewFrame
     ,previewFrameCreate
     ,previewFrameDelete
     ,previewFrameInitialize
     -- ** PrintData
     ,printDataAssign
     ,printDataCreate
     ,printDataDelete
     ,printDataGetCollate
     ,printDataGetColour
     ,printDataGetDuplex
     ,printDataGetFilename
     ,printDataGetFontMetricPath
     ,printDataGetNoCopies
     ,printDataGetOrientation
     ,printDataGetPaperId
     ,printDataGetPaperSize
     ,printDataGetPreviewCommand
     ,printDataGetPrintMode
     ,printDataGetPrinterCommand
     ,printDataGetPrinterName
     ,printDataGetPrinterOptions
     ,printDataGetPrinterScaleX
     ,printDataGetPrinterScaleY
     ,printDataGetPrinterTranslateX
     ,printDataGetPrinterTranslateY
     ,printDataGetQuality
     ,printDataSetCollate
     ,printDataSetColour
     ,printDataSetDuplex
     ,printDataSetFilename
     ,printDataSetFontMetricPath
     ,printDataSetNoCopies
     ,printDataSetOrientation
     ,printDataSetPaperId
     ,printDataSetPaperSize
     ,printDataSetPreviewCommand
     ,printDataSetPrintMode
     ,printDataSetPrinterCommand
     ,printDataSetPrinterName
     ,printDataSetPrinterOptions
     ,printDataSetPrinterScaleX
     ,printDataSetPrinterScaleY
     ,printDataSetPrinterScaling
     ,printDataSetPrinterTranslateX
     ,printDataSetPrinterTranslateY
     ,printDataSetPrinterTranslation
     ,printDataSetQuality
     -- ** PrintDialog
     ,printDialogCreate
     ,printDialogGetPrintDC
     ,printDialogGetPrintData
     ,printDialogGetPrintDialogData
     -- ** PrintDialogData
     ,printDialogDataAssign
     ,printDialogDataAssignData
     ,printDialogDataCreateDefault
     ,printDialogDataCreateFromData
     ,printDialogDataDelete
     ,printDialogDataEnableHelp
     ,printDialogDataEnablePageNumbers
     ,printDialogDataEnablePrintToFile
     ,printDialogDataEnableSelection
     ,printDialogDataGetAllPages
     ,printDialogDataGetCollate
     ,printDialogDataGetEnableHelp
     ,printDialogDataGetEnablePageNumbers
     ,printDialogDataGetEnablePrintToFile
     ,printDialogDataGetEnableSelection
     ,printDialogDataGetFromPage
     ,printDialogDataGetMaxPage
     ,printDialogDataGetMinPage
     ,printDialogDataGetNoCopies
     ,printDialogDataGetPrintData
     ,printDialogDataGetPrintToFile
     ,printDialogDataGetSelection
     ,printDialogDataGetToPage
     ,printDialogDataSetAllPages
     ,printDialogDataSetCollate
     ,printDialogDataSetFromPage
     ,printDialogDataSetMaxPage
     ,printDialogDataSetMinPage
     ,printDialogDataSetNoCopies
     ,printDialogDataSetPrintData
     ,printDialogDataSetPrintToFile
     ,printDialogDataSetSelection
     ,printDialogDataSetToPage
     -- ** PrintPreview
     ,printPreviewCreateFromData
     ,printPreviewCreateFromDialogData
     ,printPreviewDelete
     ,printPreviewDetermineScaling
     ,printPreviewDrawBlankPage
     ,printPreviewGetCanvas
     ,printPreviewGetCurrentPage
     ,printPreviewGetFrame
     ,printPreviewGetMaxPage
     ,printPreviewGetMinPage
     ,printPreviewGetPrintDialogData
     ,printPreviewGetPrintout
     ,printPreviewGetPrintoutForPrinting
     ,printPreviewGetZoom
     ,printPreviewIsOk
     ,printPreviewPaintPage
     ,printPreviewPrint
     ,printPreviewRenderPage
     ,printPreviewSetCanvas
     ,printPreviewSetCurrentPage
     ,printPreviewSetFrame
     ,printPreviewSetOk
     ,printPreviewSetPrintout
     ,printPreviewSetZoom
     -- ** Printer
     ,printerCreate
     ,printerCreateAbortWindow
     ,printerDelete
     ,printerGetAbort
     ,printerGetLastError
     ,printerGetPrintDialogData
     ,printerPrint
     ,printerPrintDialog
     ,printerReportError
     ,printerSetup
     -- ** PrinterDC
     ,printerDCCreate
     ,printerDCDelete
     ,printerDCGetPaperRect
     -- ** Printout
     ,printoutGetDC
     ,printoutGetPPIPrinter
     ,printoutGetPPIScreen
     ,printoutGetPageSizeMM
     ,printoutGetPageSizePixels
     ,printoutGetTitle
     ,printoutIsPreview
     ,printoutSetDC
     ,printoutSetPPIPrinter
     ,printoutSetPPIScreen
     ,printoutSetPageSizeMM
     ,printoutSetPageSizePixels
     -- ** Process
     ,processCloseOutput
     ,processCreateDefault
     ,processCreateRedirect
     ,processDelete
     ,processDetach
     ,processGetErrorStream
     ,processGetInputStream
     ,processGetOutputStream
     ,processIsErrorAvailable
     ,processIsInputAvailable
     ,processIsInputOpened
     ,processIsRedirected
     ,processOpen
     ,processRedirect
     -- ** ProcessEvent
     ,processEventGetExitCode
     ,processEventGetPid
     -- ** ProgressDialog
     ,progressDialogCreate
     ,progressDialogResume
     ,progressDialogUpdate
     ,progressDialogUpdateWithMessage
     -- ** PropertyCategory
     ,propertyCategoryCreate
     -- ** PropertyGrid
     ,propertyGridAppend
     ,propertyGridCreate
     ,propertyGridDisableProperty
     -- ** PropertyGridEvent
     ,propertyGridEventGetProperty
     ,propertyGridEventHasProperty
     -- ** QueryLayoutInfoEvent
     ,queryLayoutInfoEventCreate
     ,queryLayoutInfoEventGetAlignment
     ,queryLayoutInfoEventGetFlags
     ,queryLayoutInfoEventGetOrientation
     ,queryLayoutInfoEventGetRequestedLength
     ,queryLayoutInfoEventGetSize
     ,queryLayoutInfoEventSetAlignment
     ,queryLayoutInfoEventSetFlags
     ,queryLayoutInfoEventSetOrientation
     ,queryLayoutInfoEventSetRequestedLength
     ,queryLayoutInfoEventSetSize
     -- ** QueryNewPaletteEvent
     ,queryNewPaletteEventCopyObject
     ,queryNewPaletteEventGetPaletteRealized
     ,queryNewPaletteEventSetPaletteRealized
     -- ** RadioBox
     ,radioBoxCreate
     ,radioBoxEnableItem
     ,radioBoxFindString
     ,radioBoxGetItemLabel
     ,radioBoxGetNumberOfRowsOrCols
     ,radioBoxGetSelection
     ,radioBoxGetStringSelection
     ,radioBoxNumber
     ,radioBoxSetItemBitmap
     ,radioBoxSetItemLabel
     ,radioBoxSetNumberOfRowsOrCols
     ,radioBoxSetSelection
     ,radioBoxSetStringSelection
     ,radioBoxShowItem
     -- ** RadioButton
     ,radioButtonCreate
     ,radioButtonGetValue
     ,radioButtonSetValue
     -- ** Region
     ,regionAssign
     ,regionClear
     ,regionContainsPoint
     ,regionContainsRect
     ,regionCreateDefault
     ,regionCreateFromRect
     ,regionDelete
     ,regionGetBox
     ,regionIntersectRect
     ,regionIntersectRegion
     ,regionIsEmpty
     ,regionSubtractRect
     ,regionSubtractRegion
     ,regionUnionRect
     ,regionUnionRegion
     ,regionXorRect
     ,regionXorRegion
     -- ** RegionIterator
     ,regionIteratorCreate
     ,regionIteratorCreateFromRegion
     ,regionIteratorDelete
     ,regionIteratorGetHeight
     ,regionIteratorGetWidth
     ,regionIteratorGetX
     ,regionIteratorGetY
     ,regionIteratorHaveRects
     ,regionIteratorNext
     ,regionIteratorReset
     ,regionIteratorResetToRegion
     -- ** SVGFileDC
     ,svgFileDCCreate
     ,svgFileDCCreateWithSize
     ,svgFileDCCreateWithSizeAndResolution
     ,svgFileDCDelete
     -- ** SashEvent
     ,sashEventCreate
     ,sashEventGetDragRect
     ,sashEventGetDragStatus
     ,sashEventGetEdge
     ,sashEventSetDragRect
     ,sashEventSetDragStatus
     ,sashEventSetEdge
     -- ** SashLayoutWindow
     ,sashLayoutWindowCreate
     ,sashLayoutWindowGetAlignment
     ,sashLayoutWindowGetOrientation
     ,sashLayoutWindowSetAlignment
     ,sashLayoutWindowSetDefaultSize
     ,sashLayoutWindowSetOrientation
     -- ** SashWindow
     ,sashWindowCreate
     ,sashWindowGetDefaultBorderSize
     ,sashWindowGetEdgeMargin
     ,sashWindowGetExtraBorderSize
     ,sashWindowGetMaximumSizeX
     ,sashWindowGetMaximumSizeY
     ,sashWindowGetMinimumSizeX
     ,sashWindowGetMinimumSizeY
     ,sashWindowGetSashVisible
     ,sashWindowHasBorder
     ,sashWindowSetDefaultBorderSize
     ,sashWindowSetExtraBorderSize
     ,sashWindowSetMaximumSizeX
     ,sashWindowSetMaximumSizeY
     ,sashWindowSetMinimumSizeX
     ,sashWindowSetMinimumSizeY
     ,sashWindowSetSashBorder
     ,sashWindowSetSashVisible
     -- ** ScreenDC
     ,screenDCCreate
     ,screenDCDelete
     ,screenDCEndDrawingOnTop
     ,screenDCStartDrawingOnTop
     ,screenDCStartDrawingOnTopOfWin
     -- ** ScrollBar
     ,scrollBarCreate
     ,scrollBarGetPageSize
     ,scrollBarGetRange
     ,scrollBarGetThumbPosition
     ,scrollBarGetThumbSize
     ,scrollBarSetScrollbar
     ,scrollBarSetThumbPosition
     -- ** ScrollEvent
     ,scrollEventGetOrientation
     ,scrollEventGetPosition
     -- ** ScrollWinEvent
     ,scrollWinEventGetOrientation
     ,scrollWinEventGetPosition
     ,scrollWinEventSetOrientation
     ,scrollWinEventSetPosition
     -- ** ScrolledWindow
     ,scrolledWindowAdjustScrollbars
     ,scrolledWindowCalcScrolledPosition
     ,scrolledWindowCalcUnscrolledPosition
     ,scrolledWindowCreate
     ,scrolledWindowEnableScrolling
     ,scrolledWindowGetScaleX
     ,scrolledWindowGetScaleY
     ,scrolledWindowGetScrollPageSize
     ,scrolledWindowGetScrollPixelsPerUnit
     ,scrolledWindowGetTargetWindow
     ,scrolledWindowGetViewStart
     ,scrolledWindowGetVirtualSize
     ,scrolledWindowOnDraw
     ,scrolledWindowPrepareDC
     ,scrolledWindowScroll
     ,scrolledWindowSetScale
     ,scrolledWindowSetScrollPageSize
     ,scrolledWindowSetScrollRate
     ,scrolledWindowSetScrollbars
     ,scrolledWindowSetTargetWindow
     ,scrolledWindowShowScrollbars
     ,scrolledWindowViewStart
     -- ** SetCursorEvent
     ,setCursorEventGetCursor
     ,setCursorEventGetX
     ,setCursorEventGetY
     ,setCursorEventHasCursor
     ,setCursorEventSetCursor
     -- ** ShowEvent
     ,showEventCopyObject
     ,showEventIsShown
     ,showEventSetShow
     -- ** SimpleHelpProvider
     ,simpleHelpProviderCreate
     -- ** SingleInstanceChecker
     ,singleInstanceCheckerCreate
     ,singleInstanceCheckerCreateDefault
     ,singleInstanceCheckerDelete
     ,singleInstanceCheckerIsAnotherRunning
     -- ** SizeEvent
     ,sizeEventCopyObject
     ,sizeEventGetSize
     -- ** Sizer
     ,sizerAdd
     ,sizerAddSizer
     ,sizerAddSpacer
     ,sizerAddStretchSpacer
     ,sizerAddWindow
     ,sizerCalcMin
     ,sizerClear
     ,sizerDetach
     ,sizerDetachSizer
     ,sizerDetachWindow
     ,sizerFit
     ,sizerFitInside
     ,sizerGetChildren
     ,sizerGetContainingWindow
     ,sizerGetItem
     ,sizerGetItemSizer
     ,sizerGetItemWindow
     ,sizerGetMinSize
     ,sizerGetPosition
     ,sizerGetSize
     ,sizerHide
     ,sizerHideSizer
     ,sizerHideWindow
     ,sizerInsert
     ,sizerInsertSizer
     ,sizerInsertSpacer
     ,sizerInsertStretchSpacer
     ,sizerInsertWindow
     ,sizerIsShown
     ,sizerIsShownSizer
     ,sizerIsShownWindow
     ,sizerLayout
     ,sizerPrepend
     ,sizerPrependSizer
     ,sizerPrependSpacer
     ,sizerPrependStretchSpacer
     ,sizerPrependWindow
     ,sizerRecalcSizes
     ,sizerReplace
     ,sizerReplaceSizer
     ,sizerReplaceWindow
     ,sizerSetDimension
     ,sizerSetItemMinSize
     ,sizerSetItemMinSizeSizer
     ,sizerSetItemMinSizeWindow
     ,sizerSetMinSize
     ,sizerSetSizeHints
     ,sizerShow
     ,sizerShowSizer
     ,sizerShowWindow
     -- ** SizerItem
     ,sizerItemAssignSizer
     ,sizerItemAssignSpacer
     ,sizerItemAssignWindow
     ,sizerItemCalcMin
     ,sizerItemCreate
     ,sizerItemCreateInSizer
     ,sizerItemCreateInWindow
     ,sizerItemDelete
     ,sizerItemDeleteWindows
     ,sizerItemDetachSizer
     ,sizerItemGetBorder
     ,sizerItemGetFlag
     ,sizerItemGetMinSize
     ,sizerItemGetPosition
     ,sizerItemGetProportion
     ,sizerItemGetRatio
     ,sizerItemGetRect
     ,sizerItemGetSize
     ,sizerItemGetSizer
     ,sizerItemGetSpacer
     ,sizerItemGetUserData
     ,sizerItemGetWindow
     ,sizerItemIsShown
     ,sizerItemIsSizer
     ,sizerItemIsSpacer
     ,sizerItemIsWindow
     ,sizerItemSetBorder
     ,sizerItemSetDimension
     ,sizerItemSetFlag
     ,sizerItemSetFloatRatio
     ,sizerItemSetInitSize
     ,sizerItemSetProportion
     ,sizerItemSetRatio
     ,sizerItemShow
     -- ** Slider
     ,sliderClearSel
     ,sliderClearTicks
     ,sliderCreate
     ,sliderGetLineSize
     ,sliderGetMax
     ,sliderGetMin
     ,sliderGetPageSize
     ,sliderGetSelEnd
     ,sliderGetSelStart
     ,sliderGetThumbLength
     ,sliderGetTickFreq
     ,sliderGetValue
     ,sliderSetLineSize
     ,sliderSetPageSize
     ,sliderSetRange
     ,sliderSetSelection
     ,sliderSetThumbLength
     ,sliderSetTick
     ,sliderSetValue
     -- ** Sound
     ,soundCreate
     ,soundDelete
     ,soundIsOk
     ,soundPlay
     ,soundStop
     -- ** SpinButton
     ,spinButtonCreate
     ,spinButtonGetMax
     ,spinButtonGetMin
     ,spinButtonGetValue
     ,spinButtonSetRange
     ,spinButtonSetValue
     -- ** SpinCtrl
     ,spinCtrlCreate
     ,spinCtrlGetMax
     ,spinCtrlGetMin
     ,spinCtrlGetValue
     ,spinCtrlSetRange
     ,spinCtrlSetValue
     -- ** SpinEvent
     ,spinEventGetPosition
     ,spinEventSetPosition
     -- ** SplashScreen
     ,splashScreenCreate
     ,splashScreenGetSplashStyle
     ,splashScreenGetTimeout
     -- ** SplitterWindow
     ,splitterWindowCreate
     ,splitterWindowGetBorderSize
     ,splitterWindowGetMinimumPaneSize
     ,splitterWindowGetSashGravity
     ,splitterWindowGetSashPosition
     ,splitterWindowGetSashSize
     ,splitterWindowGetSplitMode
     ,splitterWindowGetWindow1
     ,splitterWindowGetWindow2
     ,splitterWindowInitialize
     ,splitterWindowIsSplit
     ,splitterWindowReplaceWindow
     ,splitterWindowSetBorderSize
     ,splitterWindowSetMinimumPaneSize
     ,splitterWindowSetSashGravity
     ,splitterWindowSetSashPosition
     ,splitterWindowSetSplitMode
     ,splitterWindowSplitHorizontally
     ,splitterWindowSplitVertically
     ,splitterWindowUnsplit
     -- ** StaticBitmap
     ,staticBitmapCreate
     ,staticBitmapDelete
     ,staticBitmapGetBitmap
     ,staticBitmapGetIcon
     ,staticBitmapSetBitmap
     ,staticBitmapSetIcon
     -- ** StaticBox
     ,staticBoxCreate
     -- ** StaticBoxSizer
     ,staticBoxSizerCalcMin
     ,staticBoxSizerCreate
     ,staticBoxSizerGetStaticBox
     ,staticBoxSizerRecalcSizes
     -- ** StaticLine
     ,staticLineCreate
     ,staticLineGetDefaultSize
     ,staticLineIsVertical
     -- ** StaticText
     ,staticTextCreate
     -- ** StatusBar
     ,statusBarCreate
     ,statusBarGetBorderX
     ,statusBarGetBorderY
     ,statusBarGetFieldsCount
     ,statusBarGetStatusText
     ,statusBarSetFieldsCount
     ,statusBarSetMinHeight
     ,statusBarSetStatusText
     ,statusBarSetStatusWidths
     -- ** StopWatch
     ,stopWatchCreate
     ,stopWatchDelete
     ,stopWatchPause
     ,stopWatchResume
     ,stopWatchStart
     ,stopWatchTime
     -- ** StreamBase
     ,streamBaseDelete
     ,streamBaseGetLastError
     ,streamBaseGetSize
     ,streamBaseIsOk
     -- ** StringProperty
     ,stringPropertyCreate
     -- ** StyledTextCtrl
     ,styledTextCtrlAddRefDocument
     ,styledTextCtrlAddStyledText
     ,styledTextCtrlAddText
     ,styledTextCtrlAppendText
     ,styledTextCtrlAutoCompActive
     ,styledTextCtrlAutoCompCancel
     ,styledTextCtrlAutoCompComplete
     ,styledTextCtrlAutoCompGetAutoHide
     ,styledTextCtrlAutoCompGetCancelAtStart
     ,styledTextCtrlAutoCompGetChooseSingle
     ,styledTextCtrlAutoCompGetDropRestOfWord
     ,styledTextCtrlAutoCompGetIgnoreCase
     ,styledTextCtrlAutoCompGetSeparator
     ,styledTextCtrlAutoCompGetTypeSeparator
     ,styledTextCtrlAutoCompPosStart
     ,styledTextCtrlAutoCompSelect
     ,styledTextCtrlAutoCompSetAutoHide
     ,styledTextCtrlAutoCompSetCancelAtStart
     ,styledTextCtrlAutoCompSetChooseSingle
     ,styledTextCtrlAutoCompSetDropRestOfWord
     ,styledTextCtrlAutoCompSetFillUps
     ,styledTextCtrlAutoCompSetIgnoreCase
     ,styledTextCtrlAutoCompSetSeparator
     ,styledTextCtrlAutoCompSetTypeSeparator
     ,styledTextCtrlAutoCompShow
     ,styledTextCtrlAutoCompStops
     ,styledTextCtrlBeginUndoAction
     ,styledTextCtrlBraceBadLight
     ,styledTextCtrlBraceHighlight
     ,styledTextCtrlBraceMatch
     ,styledTextCtrlCallTipActive
     ,styledTextCtrlCallTipCancel
     ,styledTextCtrlCallTipPosAtStart
     ,styledTextCtrlCallTipSetBackground
     ,styledTextCtrlCallTipSetForeground
     ,styledTextCtrlCallTipSetForegroundHighlight
     ,styledTextCtrlCallTipSetHighlight
     ,styledTextCtrlCallTipShow
     ,styledTextCtrlCanPaste
     ,styledTextCtrlCanRedo
     ,styledTextCtrlCanUndo
     ,styledTextCtrlChooseCaretX
     ,styledTextCtrlClear
     ,styledTextCtrlClearAll
     ,styledTextCtrlClearDocumentStyle
     ,styledTextCtrlClearRegisteredImages
     ,styledTextCtrlCmdKeyAssign
     ,styledTextCtrlCmdKeyClear
     ,styledTextCtrlCmdKeyClearAll
     ,styledTextCtrlCmdKeyExecute
     ,styledTextCtrlColourise
     ,styledTextCtrlConvertEOLs
     ,styledTextCtrlCopy
     ,styledTextCtrlCopyRange
     ,styledTextCtrlCopyText
     ,styledTextCtrlCreate
     ,styledTextCtrlCreateDocument
     ,styledTextCtrlCut
     ,styledTextCtrlDelLineLeft
     ,styledTextCtrlDelLineRight
     ,styledTextCtrlDocLineFromVisible
     ,styledTextCtrlEmptyUndoBuffer
     ,styledTextCtrlEndUndoAction
     ,styledTextCtrlEnsureCaretVisible
     ,styledTextCtrlEnsureVisible
     ,styledTextCtrlEnsureVisibleEnforcePolicy
     ,styledTextCtrlFindText
     ,styledTextCtrlFormatRange
     ,styledTextCtrlGetAnchor
     ,styledTextCtrlGetBackSpaceUnIndents
     ,styledTextCtrlGetBufferedDraw
     ,styledTextCtrlGetCaretForeground
     ,styledTextCtrlGetCaretLineBackground
     ,styledTextCtrlGetCaretLineVisible
     ,styledTextCtrlGetCaretPeriod
     ,styledTextCtrlGetCaretWidth
     ,styledTextCtrlGetCharAt
     ,styledTextCtrlGetCodePage
     ,styledTextCtrlGetColumn
     ,styledTextCtrlGetControlCharSymbol
     ,styledTextCtrlGetCurrentLine
     ,styledTextCtrlGetCurrentPos
     ,styledTextCtrlGetDocPointer
     ,styledTextCtrlGetEOLMode
     ,styledTextCtrlGetEdgeColour
     ,styledTextCtrlGetEdgeColumn
     ,styledTextCtrlGetEdgeMode
     ,styledTextCtrlGetEndAtLastLine
     ,styledTextCtrlGetEndStyled
     ,styledTextCtrlGetFirstVisibleLine
     ,styledTextCtrlGetFoldExpanded
     ,styledTextCtrlGetFoldLevel
     ,styledTextCtrlGetFoldParent
     ,styledTextCtrlGetHighlightGuide
     ,styledTextCtrlGetIndent
     ,styledTextCtrlGetIndentationGuides
     ,styledTextCtrlGetLastChild
     ,styledTextCtrlGetLastKeydownProcessed
     ,styledTextCtrlGetLayoutCache
     ,styledTextCtrlGetLength
     ,styledTextCtrlGetLexer
     ,styledTextCtrlGetLine
     ,styledTextCtrlGetLineCount
     ,styledTextCtrlGetLineEndPosition
     ,styledTextCtrlGetLineIndentPosition
     ,styledTextCtrlGetLineIndentation
     ,styledTextCtrlGetLineState
     ,styledTextCtrlGetLineVisible
     ,styledTextCtrlGetMarginLeft
     ,styledTextCtrlGetMarginMask
     ,styledTextCtrlGetMarginRight
     ,styledTextCtrlGetMarginSensitive
     ,styledTextCtrlGetMarginType
     ,styledTextCtrlGetMarginWidth
     ,styledTextCtrlGetMaxLineState
     ,styledTextCtrlGetModEventMask
     ,styledTextCtrlGetModify
     ,styledTextCtrlGetMouseDownCaptures
     ,styledTextCtrlGetMouseDwellTime
     ,styledTextCtrlGetOvertype
     ,styledTextCtrlGetPrintColourMode
     ,styledTextCtrlGetPrintMagnification
     ,styledTextCtrlGetPrintWrapMode
     ,styledTextCtrlGetReadOnly
     ,styledTextCtrlGetSTCCursor
     ,styledTextCtrlGetSTCFocus
     ,styledTextCtrlGetScrollWidth
     ,styledTextCtrlGetSearchFlags
     ,styledTextCtrlGetSelectedText
     ,styledTextCtrlGetSelection
     ,styledTextCtrlGetSelectionEnd
     ,styledTextCtrlGetSelectionStart
     ,styledTextCtrlGetStatus
     ,styledTextCtrlGetStyleAt
     ,styledTextCtrlGetStyleBits
     ,styledTextCtrlGetTabIndents
     ,styledTextCtrlGetTabWidth
     ,styledTextCtrlGetTargetEnd
     ,styledTextCtrlGetTargetStart
     ,styledTextCtrlGetText
     ,styledTextCtrlGetTextLength
     ,styledTextCtrlGetTextRange
     ,styledTextCtrlGetTwoPhaseDraw
     ,styledTextCtrlGetUndoCollection
     ,styledTextCtrlGetUseHorizontalScrollBar
     ,styledTextCtrlGetUseTabs
     ,styledTextCtrlGetUseVerticalScrollBar
     ,styledTextCtrlGetViewEOL
     ,styledTextCtrlGetViewWhiteSpace
     ,styledTextCtrlGetWrapMode
     ,styledTextCtrlGetXOffset
     ,styledTextCtrlGetZoom
     ,styledTextCtrlGotoLine
     ,styledTextCtrlGotoPos
     ,styledTextCtrlHideLines
     ,styledTextCtrlHideSelection
     ,styledTextCtrlHomeDisplay
     ,styledTextCtrlHomeDisplayExtend
     ,styledTextCtrlIndicatorGetForeground
     ,styledTextCtrlIndicatorGetStyle
     ,styledTextCtrlIndicatorSetForeground
     ,styledTextCtrlIndicatorSetStyle
     ,styledTextCtrlInsertText
     ,styledTextCtrlLineCopy
     ,styledTextCtrlLineDuplicate
     ,styledTextCtrlLineEndDisplay
     ,styledTextCtrlLineEndDisplayExtend
     ,styledTextCtrlLineFromPosition
     ,styledTextCtrlLineLength
     ,styledTextCtrlLineScroll
     ,styledTextCtrlLinesJoin
     ,styledTextCtrlLinesOnScreen
     ,styledTextCtrlLinesSplit
     ,styledTextCtrlLoadFile
     ,styledTextCtrlMarkerAdd
     ,styledTextCtrlMarkerDefine
     ,styledTextCtrlMarkerDefineBitmap
     ,styledTextCtrlMarkerDelete
     ,styledTextCtrlMarkerDeleteAll
     ,styledTextCtrlMarkerDeleteHandle
     ,styledTextCtrlMarkerGet
     ,styledTextCtrlMarkerLineFromHandle
     ,styledTextCtrlMarkerNext
     ,styledTextCtrlMarkerPrevious
     ,styledTextCtrlMarkerSetBackground
     ,styledTextCtrlMarkerSetForeground
     ,styledTextCtrlMoveCaretInsideView
     ,styledTextCtrlPaste
     ,styledTextCtrlPointFromPosition
     ,styledTextCtrlPositionAfter
     ,styledTextCtrlPositionBefore
     ,styledTextCtrlPositionFromLine
     ,styledTextCtrlPositionFromPoint
     ,styledTextCtrlPositionFromPointClose
     ,styledTextCtrlRedo
     ,styledTextCtrlRegisterImage
     ,styledTextCtrlReleaseDocument
     ,styledTextCtrlReplaceSelection
     ,styledTextCtrlReplaceTarget
     ,styledTextCtrlReplaceTargetRE
     ,styledTextCtrlSaveFile
     ,styledTextCtrlScrollToColumn
     ,styledTextCtrlScrollToLine
     ,styledTextCtrlSearchAnchor
     ,styledTextCtrlSearchInTarget
     ,styledTextCtrlSearchNext
     ,styledTextCtrlSearchPrev
     ,styledTextCtrlSelectAll
     ,styledTextCtrlSelectionIsRectangle
     ,styledTextCtrlSetAnchor
     ,styledTextCtrlSetBackSpaceUnIndents
     ,styledTextCtrlSetBufferedDraw
     ,styledTextCtrlSetCaretForeground
     ,styledTextCtrlSetCaretLineBackground
     ,styledTextCtrlSetCaretLineVisible
     ,styledTextCtrlSetCaretPeriod
     ,styledTextCtrlSetCaretWidth
     ,styledTextCtrlSetCodePage
     ,styledTextCtrlSetControlCharSymbol
     ,styledTextCtrlSetCurrentPos
     ,styledTextCtrlSetDocPointer
     ,styledTextCtrlSetEOLMode
     ,styledTextCtrlSetEdgeColour
     ,styledTextCtrlSetEdgeColumn
     ,styledTextCtrlSetEdgeMode
     ,styledTextCtrlSetEndAtLastLine
     ,styledTextCtrlSetFoldExpanded
     ,styledTextCtrlSetFoldFlags
     ,styledTextCtrlSetFoldLevel
     ,styledTextCtrlSetFoldMarginColour
     ,styledTextCtrlSetFoldMarginHiColour
     ,styledTextCtrlSetHScrollBar
     ,styledTextCtrlSetHighlightGuide
     ,styledTextCtrlSetHotspotActiveBackground
     ,styledTextCtrlSetHotspotActiveForeground
     ,styledTextCtrlSetHotspotActiveUnderline
     ,styledTextCtrlSetIndent
     ,styledTextCtrlSetIndentationGuides
     ,styledTextCtrlSetKeyWords
     ,styledTextCtrlSetLastKeydownProcessed
     ,styledTextCtrlSetLayoutCache
     ,styledTextCtrlSetLexer
     ,styledTextCtrlSetLexerLanguage
     ,styledTextCtrlSetLineIndentation
     ,styledTextCtrlSetLineState
     ,styledTextCtrlSetMarginLeft
     ,styledTextCtrlSetMarginMask
     ,styledTextCtrlSetMarginRight
     ,styledTextCtrlSetMarginSensitive
     ,styledTextCtrlSetMarginType
     ,styledTextCtrlSetMarginWidth
     ,styledTextCtrlSetMargins
     ,styledTextCtrlSetModEventMask
     ,styledTextCtrlSetMouseDownCaptures
     ,styledTextCtrlSetMouseDwellTime
     ,styledTextCtrlSetOvertype
     ,styledTextCtrlSetPrintColourMode
     ,styledTextCtrlSetPrintMagnification
     ,styledTextCtrlSetPrintWrapMode
     ,styledTextCtrlSetProperty
     ,styledTextCtrlSetReadOnly
     ,styledTextCtrlSetSTCCursor
     ,styledTextCtrlSetSTCFocus
     ,styledTextCtrlSetSavePoint
     ,styledTextCtrlSetScrollWidth
     ,styledTextCtrlSetSearchFlags
     ,styledTextCtrlSetSelBackground
     ,styledTextCtrlSetSelForeground
     ,styledTextCtrlSetSelection
     ,styledTextCtrlSetSelectionEnd
     ,styledTextCtrlSetSelectionStart
     ,styledTextCtrlSetStatus
     ,styledTextCtrlSetStyleBits
     ,styledTextCtrlSetStyleBytes
     ,styledTextCtrlSetStyling
     ,styledTextCtrlSetTabIndents
     ,styledTextCtrlSetTabWidth
     ,styledTextCtrlSetTargetEnd
     ,styledTextCtrlSetTargetStart
     ,styledTextCtrlSetText
     ,styledTextCtrlSetTwoPhaseDraw
     ,styledTextCtrlSetUndoCollection
     ,styledTextCtrlSetUseHorizontalScrollBar
     ,styledTextCtrlSetUseTabs
     ,styledTextCtrlSetUseVerticalScrollBar
     ,styledTextCtrlSetVScrollBar
     ,styledTextCtrlSetViewEOL
     ,styledTextCtrlSetViewWhiteSpace
     ,styledTextCtrlSetVisiblePolicy
     ,styledTextCtrlSetWhitespaceBackground
     ,styledTextCtrlSetWhitespaceForeground
     ,styledTextCtrlSetWordChars
     ,styledTextCtrlSetWrapMode
     ,styledTextCtrlSetXCaretPolicy
     ,styledTextCtrlSetXOffset
     ,styledTextCtrlSetYCaretPolicy
     ,styledTextCtrlSetZoom
     ,styledTextCtrlShowLines
     ,styledTextCtrlStartRecord
     ,styledTextCtrlStartStyling
     ,styledTextCtrlStopRecord
     ,styledTextCtrlStyleClearAll
     ,styledTextCtrlStyleResetDefault
     ,styledTextCtrlStyleSetBackground
     ,styledTextCtrlStyleSetBold
     ,styledTextCtrlStyleSetCase
     ,styledTextCtrlStyleSetChangeable
     ,styledTextCtrlStyleSetCharacterSet
     ,styledTextCtrlStyleSetEOLFilled
     ,styledTextCtrlStyleSetFaceName
     ,styledTextCtrlStyleSetFont
     ,styledTextCtrlStyleSetFontAttr
     ,styledTextCtrlStyleSetForeground
     ,styledTextCtrlStyleSetHotSpot
     ,styledTextCtrlStyleSetItalic
     ,styledTextCtrlStyleSetSize
     ,styledTextCtrlStyleSetSpec
     ,styledTextCtrlStyleSetUnderline
     ,styledTextCtrlStyleSetVisible
     ,styledTextCtrlTargetFromSelection
     ,styledTextCtrlTextHeight
     ,styledTextCtrlTextWidth
     ,styledTextCtrlToggleFold
     ,styledTextCtrlUndo
     ,styledTextCtrlUsePopUp
     ,styledTextCtrlUserListShow
     ,styledTextCtrlVisibleFromDocLine
     ,styledTextCtrlWordEndPosition
     ,styledTextCtrlWordPartLeft
     ,styledTextCtrlWordPartLeftExtend
     ,styledTextCtrlWordPartRight
     ,styledTextCtrlWordPartRightExtend
     ,styledTextCtrlWordStartPosition
     -- ** StyledTextEvent
     ,styledTextEventClone
     ,styledTextEventGetAlt
     ,styledTextEventGetControl
     ,styledTextEventGetDragAllowMove
     ,styledTextEventGetDragResult
     ,styledTextEventGetDragText
     ,styledTextEventGetFoldLevelNow
     ,styledTextEventGetFoldLevelPrev
     ,styledTextEventGetKey
     ,styledTextEventGetLParam
     ,styledTextEventGetLength
     ,styledTextEventGetLine
     ,styledTextEventGetLinesAdded
     ,styledTextEventGetListType
     ,styledTextEventGetMargin
     ,styledTextEventGetMessage
     ,styledTextEventGetModificationType
     ,styledTextEventGetModifiers
     ,styledTextEventGetPosition
     ,styledTextEventGetShift
     ,styledTextEventGetText
     ,styledTextEventGetWParam
     ,styledTextEventGetX
     ,styledTextEventGetY
     ,styledTextEventSetDragAllowMove
     ,styledTextEventSetDragResult
     ,styledTextEventSetDragText
     ,styledTextEventSetFoldLevelNow
     ,styledTextEventSetFoldLevelPrev
     ,styledTextEventSetKey
     ,styledTextEventSetLParam
     ,styledTextEventSetLength
     ,styledTextEventSetLine
     ,styledTextEventSetLinesAdded
     ,styledTextEventSetListType
     ,styledTextEventSetMargin
     ,styledTextEventSetMessage
     ,styledTextEventSetModificationType
     ,styledTextEventSetModifiers
     ,styledTextEventSetPosition
     ,styledTextEventSetText
     ,styledTextEventSetWParam
     ,styledTextEventSetX
     ,styledTextEventSetY
     -- ** SystemSettings
     ,systemSettingsGetColour
     ,systemSettingsGetFont
     ,systemSettingsGetMetric
     ,systemSettingsGetScreenType
     -- ** TaskBarIcon
     ,taskBarIconCreate
     ,taskBarIconDelete
     ,taskBarIconIsIconInstalled
     ,taskBarIconIsOk
     ,taskBarIconPopupMenu
     ,taskBarIconRemoveIcon
     ,taskBarIconSetIcon
     -- ** TextAttr
     ,textAttrCreate
     ,textAttrCreateDefault
     ,textAttrDelete
     ,textAttrGetBackgroundColour
     ,textAttrGetFont
     ,textAttrGetTextColour
     ,textAttrHasBackgroundColour
     ,textAttrHasFont
     ,textAttrHasTextColour
     ,textAttrIsDefault
     ,textAttrSetBackgroundColour
     ,textAttrSetFont
     ,textAttrSetTextColour
     -- ** TextCtrl
     ,textCtrlAppendText
     ,textCtrlCanCopy
     ,textCtrlCanCut
     ,textCtrlCanPaste
     ,textCtrlCanRedo
     ,textCtrlCanUndo
     ,textCtrlChangeValue
     ,textCtrlClear
     ,textCtrlCopy
     ,textCtrlCreate
     ,textCtrlCut
     ,textCtrlDiscardEdits
     ,textCtrlEmulateKeyPress
     ,textCtrlGetDefaultStyle
     ,textCtrlGetInsertionPoint
     ,textCtrlGetLastPosition
     ,textCtrlGetLineLength
     ,textCtrlGetLineText
     ,textCtrlGetNumberOfLines
     ,textCtrlGetRange
     ,textCtrlGetSelection
     ,textCtrlGetStringSelection
     ,textCtrlGetValue
     ,textCtrlIsEditable
     ,textCtrlIsModified
     ,textCtrlIsMultiLine
     ,textCtrlIsSingleLine
     ,textCtrlLoadFile
     ,textCtrlPaste
     ,textCtrlPositionToXY
     ,textCtrlRedo
     ,textCtrlRemove
     ,textCtrlReplace
     ,textCtrlSaveFile
     ,textCtrlSetDefaultStyle
     ,textCtrlSetEditable
     ,textCtrlSetInsertionPoint
     ,textCtrlSetInsertionPointEnd
     ,textCtrlSetMaxLength
     ,textCtrlSetSelection
     ,textCtrlSetStyle
     ,textCtrlSetValue
     ,textCtrlShowPosition
     ,textCtrlUndo
     ,textCtrlWriteText
     ,textCtrlXYToPosition
     -- ** TextInputStream
     ,textInputStreamCreate
     ,textInputStreamDelete
     ,textInputStreamReadLine
     -- ** TextOutputStream
     ,textOutputStreamCreate
     ,textOutputStreamDelete
     ,textOutputStreamWriteString
     -- ** TextValidator
     ,textValidatorClone
     ,textValidatorCreate
     ,textValidatorGetExcludes
     ,textValidatorGetIncludes
     ,textValidatorGetStyle
     ,textValidatorOnChar
     ,textValidatorSetExcludes
     ,textValidatorSetIncludes
     ,textValidatorSetStyle
     ,textValidatorTransferFromWindow
     ,textValidatorTransferToWindow
     -- ** Timer
     ,timerCreate
     ,timerDelete
     ,timerGetInterval
     ,timerIsOneShot
     ,timerIsRuning
     ,timerStart
     ,timerStop
     -- ** TimerEvent
     ,timerEventGetInterval
     -- ** TimerEx
     ,timerExConnect
     ,timerExCreate
     ,timerExGetClosure
     -- ** TipWindow
     ,tipWindowClose
     ,tipWindowCreate
     ,tipWindowSetBoundingRect
     ,tipWindowSetTipWindowPtr
     -- ** ToggleButton
     ,toggleButtonCreate
     ,toggleButtonEnable
     ,toggleButtonGetValue
     ,toggleButtonSetLabel
     ,toggleButtonSetValue
     -- ** ToolBar
     ,toolBarAddControl
     ,toolBarAddSeparator
     ,toolBarAddTool
     ,toolBarAddTool2
     ,toolBarCreate
     ,toolBarDelete
     ,toolBarDeleteTool
     ,toolBarDeleteToolByPos
     ,toolBarEnableTool
     ,toolBarGetMargins
     ,toolBarGetToolBitmapSize
     ,toolBarGetToolClientData
     ,toolBarGetToolEnabled
     ,toolBarGetToolLongHelp
     ,toolBarGetToolPacking
     ,toolBarGetToolShortHelp
     ,toolBarGetToolSize
     ,toolBarGetToolState
     ,toolBarInsertControl
     ,toolBarInsertSeparator
     ,toolBarRealize
     ,toolBarRemoveTool
     ,toolBarSetMargins
     ,toolBarSetToolBitmapSize
     ,toolBarSetToolClientData
     ,toolBarSetToolLongHelp
     ,toolBarSetToolPacking
     ,toolBarSetToolSeparation
     ,toolBarSetToolShortHelp
     ,toolBarToggleTool
     -- ** TopLevelWindow
     ,topLevelWindowEnableCloseButton
     ,topLevelWindowGetDefaultButton
     ,topLevelWindowGetDefaultItem
     ,topLevelWindowGetIcon
     ,topLevelWindowGetTitle
     ,topLevelWindowIconize
     ,topLevelWindowIsActive
     ,topLevelWindowIsIconized
     ,topLevelWindowIsMaximized
     ,topLevelWindowMaximize
     ,topLevelWindowRequestUserAttention
     ,topLevelWindowSetDefaultButton
     ,topLevelWindowSetDefaultItem
     ,topLevelWindowSetIcon
     ,topLevelWindowSetIcons
     ,topLevelWindowSetMaxSize
     ,topLevelWindowSetMinSize
     ,topLevelWindowSetTitle
     -- ** TreeCtrl
     ,treeCtrlAddRoot
     ,treeCtrlAppendItem
     ,treeCtrlAssignImageList
     ,treeCtrlAssignStateImageList
     ,treeCtrlCollapse
     ,treeCtrlCollapseAndReset
     ,treeCtrlCreate
     ,treeCtrlCreate2
     ,treeCtrlDelete
     ,treeCtrlDeleteAllItems
     ,treeCtrlDeleteChildren
     ,treeCtrlEditLabel
     ,treeCtrlEndEditLabel
     ,treeCtrlEnsureVisible
     ,treeCtrlExpand
     ,treeCtrlGetBoundingRect
     ,treeCtrlGetChildrenCount
     ,treeCtrlGetCount
     ,treeCtrlGetEditControl
     ,treeCtrlGetFirstChild
     ,treeCtrlGetFirstVisibleItem
     ,treeCtrlGetImageList
     ,treeCtrlGetIndent
     ,treeCtrlGetItemClientClosure
     ,treeCtrlGetItemData
     ,treeCtrlGetItemImage
     ,treeCtrlGetItemText
     ,treeCtrlGetLastChild
     ,treeCtrlGetNextChild
     ,treeCtrlGetNextSibling
     ,treeCtrlGetNextVisible
     ,treeCtrlGetParent
     ,treeCtrlGetPrevSibling
     ,treeCtrlGetPrevVisible
     ,treeCtrlGetRootItem
     ,treeCtrlGetSelection
     ,treeCtrlGetSelections
     ,treeCtrlGetSpacing
     ,treeCtrlGetStateImageList
     ,treeCtrlHitTest
     ,treeCtrlInsertItem
     ,treeCtrlInsertItem2
     ,treeCtrlInsertItemByIndex
     ,treeCtrlInsertItemByIndex2
     ,treeCtrlIsBold
     ,treeCtrlIsExpanded
     ,treeCtrlIsSelected
     ,treeCtrlIsVisible
     ,treeCtrlItemHasChildren
     ,treeCtrlOnCompareItems
     ,treeCtrlPrependItem
     ,treeCtrlScrollTo
     ,treeCtrlSelectItem
     ,treeCtrlSetImageList
     ,treeCtrlSetIndent
     ,treeCtrlSetItemBackgroundColour
     ,treeCtrlSetItemBold
     ,treeCtrlSetItemClientClosure
     ,treeCtrlSetItemData
     ,treeCtrlSetItemDropHighlight
     ,treeCtrlSetItemFont
     ,treeCtrlSetItemHasChildren
     ,treeCtrlSetItemImage
     ,treeCtrlSetItemText
     ,treeCtrlSetItemTextColour
     ,treeCtrlSetSpacing
     ,treeCtrlSetStateImageList
     ,treeCtrlSortChildren
     ,treeCtrlToggle
     ,treeCtrlUnselect
     ,treeCtrlUnselectAll
     -- ** TreeEvent
     ,treeEventAllow
     ,treeEventGetCode
     ,treeEventGetItem
     ,treeEventGetKeyEvent
     ,treeEventGetLabel
     ,treeEventGetOldItem
     ,treeEventGetPoint
     ,treeEventIsEditCancelled
     -- ** UpdateUIEvent
     ,updateUIEventCheck
     ,updateUIEventCopyObject
     ,updateUIEventEnable
     ,updateUIEventGetChecked
     ,updateUIEventGetEnabled
     ,updateUIEventGetSetChecked
     ,updateUIEventGetSetEnabled
     ,updateUIEventGetSetText
     ,updateUIEventGetText
     ,updateUIEventSetText
     -- ** Validator
     ,validatorCreate
     ,validatorDelete
     ,validatorGetWindow
     ,validatorSetWindow
     ,validatorSuppressBellOnError
     ,validatorTransferFromWindow
     ,validatorTransferToWindow
     ,validatorValidate
     -- ** WXCApp
     ,wxcAppBell
     ,wxcAppCreateLogTarget
     ,wxcAppDispatch
     ,wxcAppDisplaySize
     ,wxcAppEnableTooltips
     ,wxcAppEnableTopLevelWindows
     ,wxcAppExecuteProcess
     ,wxcAppExit
     ,wxcAppExitMainLoop
     ,wxcAppFindWindowById
     ,wxcAppFindWindowByLabel
     ,wxcAppFindWindowByName
     ,wxcAppGetApp
     ,wxcAppGetAppName
     ,wxcAppGetClassName
     ,wxcAppGetExitOnFrameDelete
     ,wxcAppGetIdleInterval
     ,wxcAppGetOsDescription
     ,wxcAppGetOsVersion
     ,wxcAppGetTopWindow
     ,wxcAppGetUseBestVisual
     ,wxcAppGetUserHome
     ,wxcAppGetUserId
     ,wxcAppGetUserName
     ,wxcAppGetVendorName
     ,wxcAppInitAllImageHandlers
     ,wxcAppInitializeC
     ,wxcAppInitialized
     ,wxcAppIsTerminating
     ,wxcAppMainLoop
     ,wxcAppMilliSleep
     ,wxcAppMousePosition
     ,wxcAppPending
     ,wxcAppSafeYield
     ,wxcAppSetAppName
     ,wxcAppSetClassName
     ,wxcAppSetExitOnFrameDelete
     ,wxcAppSetIdleInterval
     ,wxcAppSetPrintMode
     ,wxcAppSetTooltipDelay
     ,wxcAppSetTopWindow
     ,wxcAppSetUseBestVisual
     ,wxcAppSetVendorName
     ,wxcAppSleep
     ,wxcAppYield
     -- ** WXCArtProv
     ,wxcArtProvCreate
     ,wxcArtProvRelease
     -- ** WXCDragDataObject
     ,wxcDragDataObjectCreate
     ,wxcDragDataObjectDelete
     -- ** WXCDropTarget
     ,wxcDropTargetCreate
     ,wxcDropTargetDelete
     ,wxcDropTargetSetOnData
     ,wxcDropTargetSetOnDragOver
     ,wxcDropTargetSetOnDrop
     ,wxcDropTargetSetOnEnter
     ,wxcDropTargetSetOnLeave
     -- ** WXCFileDropTarget
     ,wxcFileDropTargetCreate
     ,wxcFileDropTargetDelete
     ,wxcFileDropTargetSetOnData
     ,wxcFileDropTargetSetOnDragOver
     ,wxcFileDropTargetSetOnDrop
     ,wxcFileDropTargetSetOnEnter
     ,wxcFileDropTargetSetOnLeave
     -- ** WXCGridTable
     ,wxcGridTableCreate
     ,wxcGridTableDelete
     ,wxcGridTableGetView
     ,wxcGridTableSendTableMessage
     -- ** WXCHtmlEvent
     ,wxcHtmlEventGetHref
     ,wxcHtmlEventGetHtmlCell
     ,wxcHtmlEventGetHtmlCellId
     ,wxcHtmlEventGetLogicalPosition
     ,wxcHtmlEventGetMouseEvent
     ,wxcHtmlEventGetTarget
     -- ** WXCHtmlWindow
     ,wxcHtmlWindowCreate
     -- ** WXCLog
     ,wxcLogAddTraceMask
     ,wxcLogCreate
     ,wxcLogDelete
     ,wxcLogDontCreateOnDemand
     ,wxcLogEnableLogging
     ,wxcLogFlush
     ,wxcLogFlushActive
     ,wxcLogGetActiveTarget
     ,wxcLogGetTimestamp
     ,wxcLogGetVerbose
     ,wxcLogHasPendingMessages
     ,wxcLogIsAllowedTraceMask
     ,wxcLogIsEnabled
     ,wxcLogOnLog
     ,wxcLogRemoveTraceMask
     ,wxcLogResume
     ,wxcLogSetActiveTarget
     ,wxcLogSetTimestamp
     ,wxcLogSetVerbose
     ,wxcLogSuspend
     -- ** WXCPreviewControlBar
     ,wxcPreviewControlBarCreate
     -- ** WXCPreviewFrame
     ,wxcPreviewFrameCreate
     ,wxcPreviewFrameGetControlBar
     ,wxcPreviewFrameGetPreviewCanvas
     ,wxcPreviewFrameGetPrintPreview
     ,wxcPreviewFrameInitialize
     ,wxcPreviewFrameSetControlBar
     ,wxcPreviewFrameSetPreviewCanvas
     ,wxcPreviewFrameSetPrintPreview
     -- ** WXCPrintEvent
     ,wxcPrintEventGetContinue
     ,wxcPrintEventGetEndPage
     ,wxcPrintEventGetPage
     ,wxcPrintEventGetPrintout
     ,wxcPrintEventSetContinue
     ,wxcPrintEventSetPageLimits
     -- ** WXCPrintout
     ,wxcPrintoutCreate
     ,wxcPrintoutDelete
     ,wxcPrintoutGetEvtHandler
     ,wxcPrintoutSetPageLimits
     -- ** WXCTextDropTarget
     ,wxcTextDropTargetCreate
     ,wxcTextDropTargetDelete
     ,wxcTextDropTargetSetOnData
     ,wxcTextDropTargetSetOnDragOver
     ,wxcTextDropTargetSetOnDrop
     ,wxcTextDropTargetSetOnEnter
     ,wxcTextDropTargetSetOnLeave
     -- ** WXCTextValidator
     ,wxcTextValidatorCreate
     -- ** WXCTreeItemData
     ,wxcTreeItemDataCreate
     ,wxcTreeItemDataGetClientClosure
     ,wxcTreeItemDataSetClientClosure
     -- ** Window
     ,windowAddChild
     ,windowAddConstraintReference
     ,windowCaptureMouse
     ,windowCenter
     ,windowCenterOnParent
     ,windowClearBackground
     ,windowClientToScreen
     ,windowClose
     ,windowConvertDialogToPixels
     ,windowConvertDialogToPixelsEx
     ,windowConvertPixelsToDialog
     ,windowConvertPixelsToDialogEx
     ,windowCreate
     ,windowDeleteRelatedConstraints
     ,windowDestroy
     ,windowDestroyChildren
     ,windowDisable
     ,windowDoPhase
     ,windowEnable
     ,windowFindFocus
     ,windowFindWindow
     ,windowFit
     ,windowFitInside
     ,windowFreeze
     ,windowGetAutoLayout
     ,windowGetBackgroundColour
     ,windowGetBestSize
     ,windowGetCaret
     ,windowGetCharHeight
     ,windowGetCharWidth
     ,windowGetChildren
     ,windowGetClientData
     ,windowGetClientSize
     ,windowGetClientSizeConstraint
     ,windowGetConstraints
     ,windowGetConstraintsInvolvedIn
     ,windowGetCursor
     ,windowGetDropTarget
     ,windowGetEffectiveMinSize
     ,windowGetEventHandler
     ,windowGetFont
     ,windowGetForegroundColour
     ,windowGetHandle
     ,windowGetId
     ,windowGetLabel
     ,windowGetLabelEmpty
     ,windowGetMaxHeight
     ,windowGetMaxWidth
     ,windowGetMinHeight
     ,windowGetMinWidth
     ,windowGetName
     ,windowGetParent
     ,windowGetPosition
     ,windowGetPositionConstraint
     ,windowGetRect
     ,windowGetScrollPos
     ,windowGetScrollRange
     ,windowGetScrollThumb
     ,windowGetSize
     ,windowGetSizeConstraint
     ,windowGetSizer
     ,windowGetTextExtent
     ,windowGetToolTip
     ,windowGetUpdateRegion
     ,windowGetValidator
     ,windowGetVirtualSize
     ,windowGetWindowStyleFlag
     ,windowHasFlag
     ,windowHasFocus
     ,windowHide
     ,windowInitDialog
     ,windowIsBeingDeleted
     ,windowIsEnabled
     ,windowIsExposed
     ,windowIsShown
     ,windowIsTopLevel
     ,windowLayout
     ,windowLayoutPhase1
     ,windowLayoutPhase2
     ,windowLower
     ,windowMove
     ,windowMoveConstraint
     ,windowPopEventHandler
     ,windowPopupMenu
     ,windowPrepareDC
     ,windowPushEventHandler
     ,windowRaise
     ,windowRefresh
     ,windowRefreshRect
     ,windowReleaseMouse
     ,windowRemoveChild
     ,windowRemoveConstraintReference
     ,windowReparent
     ,windowResetConstraints
     ,windowScreenToClient
     ,windowScreenToClient2
     ,windowScrollWindow
     ,windowScrollWindowRect
     ,windowSetAcceleratorTable
     ,windowSetAutoLayout
     ,windowSetBackgroundColour
     ,windowSetCaret
     ,windowSetClientData
     ,windowSetClientObject
     ,windowSetClientSize
     ,windowSetConstraintSizes
     ,windowSetConstraints
     ,windowSetCursor
     ,windowSetDropTarget
     ,windowSetExtraStyle
     ,windowSetFocus
     ,windowSetFont
     ,windowSetForegroundColour
     ,windowSetId
     ,windowSetLabel
     ,windowSetName
     ,windowSetScrollPos
     ,windowSetScrollbar
     ,windowSetSize
     ,windowSetSizeConstraint
     ,windowSetSizeHints
     ,windowSetSizer
     ,windowSetToolTip
     ,windowSetValidator
     ,windowSetVirtualSize
     ,windowSetWindowStyleFlag
     ,windowShow
     ,windowThaw
     ,windowTransferDataFromWindow
     ,windowTransferDataToWindow
     ,windowUnsetConstraints
     ,windowUpdateWindowUI
     ,windowValidate
     ,windowWarpPointer
     -- ** WindowCreateEvent
     ,windowCreateEventGetWindow
     -- ** WindowDC
     ,windowDCCreate
     ,windowDCDelete
     -- ** WindowDestroyEvent
     ,windowDestroyEventGetWindow
     -- ** Wizard
     ,wizardChain
     ,wizardCreate
     ,wizardGetCurrentPage
     ,wizardGetPageSize
     ,wizardRunWizard
     ,wizardSetPageSize
     -- ** WizardEvent
     ,wizardEventGetDirection
     -- ** WizardPageSimple
     ,wizardPageSimpleCreate
     ,wizardPageSimpleGetBitmap
     ,wizardPageSimpleGetNext
     ,wizardPageSimpleGetPrev
     ,wizardPageSimpleSetNext
     ,wizardPageSimpleSetPrev
     -- ** WxManagedPtr
     ,managedPtrCreateFromBitmap
     ,managedPtrCreateFromBrush
     ,managedPtrCreateFromColour
     ,managedPtrCreateFromCursor
     ,managedPtrCreateFromDateTime
     ,managedPtrCreateFromFont
     ,managedPtrCreateFromGridCellCoordsArray
     ,managedPtrCreateFromIcon
     ,managedPtrCreateFromObject
     ,managedPtrCreateFromPen
     ,managedPtrDelete
     ,managedPtrFinalize
     ,managedPtrGetDeleteFunction
     ,managedPtrGetPtr
     ,managedPtrNoFinalize
     -- ** WxObject
     ,objectGetClassInfo
     ,objectGetClientClosure
     ,objectIsKindOf
     ,objectIsScrolledWindow
     ,objectSafeDelete
     ,objectSetClientClosure
     ,wxobjectDelete
     -- ** XmlResource
     ,xmlResourceAddHandler
     ,xmlResourceAddSubclassFactory
     ,xmlResourceAttachUnknownControl
     ,xmlResourceClearHandlers
     ,xmlResourceCompareVersion
     ,xmlResourceCreate
     ,xmlResourceCreateFromFile
     ,xmlResourceDelete
     ,xmlResourceGet
     ,xmlResourceGetBitmapButton
     ,xmlResourceGetBoxSizer
     ,xmlResourceGetButton
     ,xmlResourceGetCalendarCtrl
     ,xmlResourceGetCheckBox
     ,xmlResourceGetCheckListBox
     ,xmlResourceGetChoice
     ,xmlResourceGetComboBox
     ,xmlResourceGetDomain
     ,xmlResourceGetFlags
     ,xmlResourceGetFlexGridSizer
     ,xmlResourceGetGauge
     ,xmlResourceGetGrid
     ,xmlResourceGetGridSizer
     ,xmlResourceGetHtmlWindow
     ,xmlResourceGetListBox
     ,xmlResourceGetListCtrl
     ,xmlResourceGetMDIChildFrame
     ,xmlResourceGetMDIParentFrame
     ,xmlResourceGetMenu
     ,xmlResourceGetMenuBar
     ,xmlResourceGetMenuItem
     ,xmlResourceGetNotebook
     ,xmlResourceGetPanel
     ,xmlResourceGetRadioBox
     ,xmlResourceGetRadioButton
     ,xmlResourceGetScrollBar
     ,xmlResourceGetScrolledWindow
     ,xmlResourceGetSizer
     ,xmlResourceGetSlider
     ,xmlResourceGetSpinButton
     ,xmlResourceGetSpinCtrl
     ,xmlResourceGetSplitterWindow
     ,xmlResourceGetStaticBitmap
     ,xmlResourceGetStaticBox
     ,xmlResourceGetStaticBoxSizer
     ,xmlResourceGetStaticLine
     ,xmlResourceGetStaticText
     ,xmlResourceGetStyledTextCtrl
     ,xmlResourceGetTextCtrl
     ,xmlResourceGetTreeCtrl
     ,xmlResourceGetVersion
     ,xmlResourceGetXRCID
     ,xmlResourceInitAllHandlers
     ,xmlResourceInsertHandler
     ,xmlResourceLoad
     ,xmlResourceLoadBitmap
     ,xmlResourceLoadDialog
     ,xmlResourceLoadFrame
     ,xmlResourceLoadIcon
     ,xmlResourceLoadMenu
     ,xmlResourceLoadMenuBar
     ,xmlResourceLoadPanel
     ,xmlResourceLoadToolBar
     ,xmlResourceSet
     ,xmlResourceSetDomain
     ,xmlResourceSetFlags
     ,xmlResourceUnload
    ) where

import Prelude hiding (id, last, length, lines, max, min, show)
import System.IO.Unsafe( unsafePerformIO )
import Graphics.UI.WXCore.WxcTypes hiding (rect, rgb, rgba, sz)
import Graphics.UI.WXCore.WxcClassTypes

-- | usage: (@managedPtrCreateFromBitmap obj@).
managedPtrCreateFromBitmap :: Bitmap  a ->  IO (WxManagedPtr  ())
managedPtrCreateFromBitmap obj 
  = withObjectResult $
    withObjectPtr obj $ \cobj_obj -> 
    wxManagedPtr_CreateFromBitmap cobj_obj  
foreign import ccall "wxManagedPtr_CreateFromBitmap" wxManagedPtr_CreateFromBitmap :: Ptr (TBitmap a) -> IO (Ptr (TWxManagedPtr ()))

-- | usage: (@managedPtrCreateFromBrush obj@).
managedPtrCreateFromBrush :: Brush  a ->  IO (WxManagedPtr  ())
managedPtrCreateFromBrush obj 
  = withObjectResult $
    withObjectPtr obj $ \cobj_obj -> 
    wxManagedPtr_CreateFromBrush cobj_obj  
foreign import ccall "wxManagedPtr_CreateFromBrush" wxManagedPtr_CreateFromBrush :: Ptr (TBrush a) -> IO (Ptr (TWxManagedPtr ()))

-- | usage: (@managedPtrCreateFromColour obj@).
managedPtrCreateFromColour :: Color ->  IO (WxManagedPtr  ())
managedPtrCreateFromColour obj 
  = withObjectResult $
    withColourPtr obj $ \cobj_obj -> 
    wxManagedPtr_CreateFromColour cobj_obj  
foreign import ccall "wxManagedPtr_CreateFromColour" wxManagedPtr_CreateFromColour :: Ptr (TColour a) -> IO (Ptr (TWxManagedPtr ()))

-- | usage: (@managedPtrCreateFromCursor obj@).
managedPtrCreateFromCursor :: Cursor  a ->  IO (WxManagedPtr  ())
managedPtrCreateFromCursor obj 
  = withObjectResult $
    withObjectPtr obj $ \cobj_obj -> 
    wxManagedPtr_CreateFromCursor cobj_obj  
foreign import ccall "wxManagedPtr_CreateFromCursor" wxManagedPtr_CreateFromCursor :: Ptr (TCursor a) -> IO (Ptr (TWxManagedPtr ()))

-- | usage: (@managedPtrCreateFromDateTime obj@).
managedPtrCreateFromDateTime :: DateTime  a ->  IO (WxManagedPtr  ())
managedPtrCreateFromDateTime obj 
  = withObjectResult $
    withObjectPtr obj $ \cobj_obj -> 
    wxManagedPtr_CreateFromDateTime cobj_obj  
foreign import ccall "wxManagedPtr_CreateFromDateTime" wxManagedPtr_CreateFromDateTime :: Ptr (TDateTime a) -> IO (Ptr (TWxManagedPtr ()))

-- | usage: (@managedPtrCreateFromFont obj@).
managedPtrCreateFromFont :: Font  a ->  IO (WxManagedPtr  ())
managedPtrCreateFromFont obj 
  = withObjectResult $
    withObjectPtr obj $ \cobj_obj -> 
    wxManagedPtr_CreateFromFont cobj_obj  
foreign import ccall "wxManagedPtr_CreateFromFont" wxManagedPtr_CreateFromFont :: Ptr (TFont a) -> IO (Ptr (TWxManagedPtr ()))

-- | usage: (@managedPtrCreateFromGridCellCoordsArray obj@).
managedPtrCreateFromGridCellCoordsArray :: GridCellCoordsArray  a ->  IO (WxManagedPtr  ())
managedPtrCreateFromGridCellCoordsArray obj 
  = withObjectResult $
    withObjectPtr obj $ \cobj_obj -> 
    wxManagedPtr_CreateFromGridCellCoordsArray cobj_obj  
foreign import ccall "wxManagedPtr_CreateFromGridCellCoordsArray" wxManagedPtr_CreateFromGridCellCoordsArray :: Ptr (TGridCellCoordsArray a) -> IO (Ptr (TWxManagedPtr ()))

-- | usage: (@managedPtrCreateFromIcon obj@).
managedPtrCreateFromIcon :: Icon  a ->  IO (WxManagedPtr  ())
managedPtrCreateFromIcon obj 
  = withObjectResult $
    withObjectPtr obj $ \cobj_obj -> 
    wxManagedPtr_CreateFromIcon cobj_obj  
foreign import ccall "wxManagedPtr_CreateFromIcon" wxManagedPtr_CreateFromIcon :: Ptr (TIcon a) -> IO (Ptr (TWxManagedPtr ()))

-- | usage: (@managedPtrCreateFromObject obj@).
managedPtrCreateFromObject :: WxObject  a ->  IO (WxManagedPtr  ())
managedPtrCreateFromObject obj 
  = withObjectResult $
    withObjectPtr obj $ \cobj_obj -> 
    wxManagedPtr_CreateFromObject cobj_obj  
foreign import ccall "wxManagedPtr_CreateFromObject" wxManagedPtr_CreateFromObject :: Ptr (TWxObject a) -> IO (Ptr (TWxManagedPtr ()))

-- | usage: (@managedPtrCreateFromPen obj@).
managedPtrCreateFromPen :: Pen  a ->  IO (WxManagedPtr  ())
managedPtrCreateFromPen obj 
  = withObjectResult $
    withObjectPtr obj $ \cobj_obj -> 
    wxManagedPtr_CreateFromPen cobj_obj  
foreign import ccall "wxManagedPtr_CreateFromPen" wxManagedPtr_CreateFromPen :: Ptr (TPen a) -> IO (Ptr (TWxManagedPtr ()))

-- | usage: (@managedPtrDelete self@).
managedPtrDelete :: WxManagedPtr  a ->  IO ()
managedPtrDelete self 
  = withObjectRef "managedPtrDelete" self $ \cobj_self -> 
    wxManagedPtr_Delete cobj_self  
foreign import ccall "wxManagedPtr_Delete" wxManagedPtr_Delete :: Ptr (TWxManagedPtr a) -> IO ()

-- | usage: (@managedPtrFinalize self@).
managedPtrFinalize :: WxManagedPtr  a ->  IO ()
managedPtrFinalize self 
  = withObjectRef "managedPtrFinalize" self $ \cobj_self -> 
    wxManagedPtr_Finalize cobj_self  
foreign import ccall "wxManagedPtr_Finalize" wxManagedPtr_Finalize :: Ptr (TWxManagedPtr a) -> IO ()

-- | usage: (@managedPtrGetDeleteFunction@).
managedPtrGetDeleteFunction ::  IO (Ptr  ())
managedPtrGetDeleteFunction 
  = wxManagedPtr_GetDeleteFunction 
foreign import ccall "wxManagedPtr_GetDeleteFunction" wxManagedPtr_GetDeleteFunction :: IO (Ptr  ())

-- | usage: (@managedPtrGetPtr self@).
managedPtrGetPtr :: WxManagedPtr  a ->  IO (Ptr  ())
managedPtrGetPtr self 
  = withObjectRef "managedPtrGetPtr" self $ \cobj_self -> 
    wxManagedPtr_GetPtr cobj_self  
foreign import ccall "wxManagedPtr_GetPtr" wxManagedPtr_GetPtr :: Ptr (TWxManagedPtr a) -> IO (Ptr  ())

-- | usage: (@managedPtrNoFinalize self@).
managedPtrNoFinalize :: WxManagedPtr  a ->  IO ()
managedPtrNoFinalize self 
  = withObjectRef "managedPtrNoFinalize" self $ \cobj_self -> 
    wxManagedPtr_NoFinalize cobj_self  
foreign import ccall "wxManagedPtr_NoFinalize" wxManagedPtr_NoFinalize :: Ptr (TWxManagedPtr a) -> IO ()

-- | usage: (@maskCreate bitmap@).
maskCreate :: Bitmap  a ->  IO (Mask  ())
maskCreate bitmap 
  = withObjectResult $
    withObjectPtr bitmap $ \cobj_bitmap -> 
    wxMask_Create cobj_bitmap  
foreign import ccall "wxMask_Create" wxMask_Create :: Ptr (TBitmap a) -> IO (Ptr (TMask ()))

-- | usage: (@maskCreateColoured bitmap colour@).
maskCreateColoured :: Bitmap  a -> Color ->  IO (Ptr  ())
maskCreateColoured bitmap colour 
  = withObjectPtr bitmap $ \cobj_bitmap -> 
    withColourPtr colour $ \cobj_colour -> 
    wxMask_CreateColoured cobj_bitmap  cobj_colour  
foreign import ccall "wxMask_CreateColoured" wxMask_CreateColoured :: Ptr (TBitmap a) -> Ptr (TColour b) -> IO (Ptr  ())

-- | usage: (@mdiChildFrameActivate obj@).
mdiChildFrameActivate :: MDIChildFrame  a ->  IO ()
mdiChildFrameActivate _obj 
  = withObjectRef "mdiChildFrameActivate" _obj $ \cobj__obj -> 
    wxMDIChildFrame_Activate cobj__obj  
foreign import ccall "wxMDIChildFrame_Activate" wxMDIChildFrame_Activate :: Ptr (TMDIChildFrame a) -> IO ()

-- | usage: (@mdiChildFrameCreate prt id txt lfttopwdthgt stl@).
mdiChildFrameCreate :: Window  a -> Id -> String -> Rect -> Style ->  IO (MDIChildFrame  ())
mdiChildFrameCreate _prt _id _txt _lfttopwdthgt _stl 
  = withObjectResult $
    withObjectPtr _prt $ \cobj__prt -> 
    withStringPtr _txt $ \cobj__txt -> 
    wxMDIChildFrame_Create cobj__prt  (toCInt _id)  cobj__txt  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
foreign import ccall "wxMDIChildFrame_Create" wxMDIChildFrame_Create :: Ptr (TWindow a) -> CInt -> Ptr (TWxString c) -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TMDIChildFrame ()))

-- | usage: (@mdiParentFrameActivateNext obj@).
mdiParentFrameActivateNext :: MDIParentFrame  a ->  IO ()
mdiParentFrameActivateNext _obj 
  = withObjectRef "mdiParentFrameActivateNext" _obj $ \cobj__obj -> 
    wxMDIParentFrame_ActivateNext cobj__obj  
foreign import ccall "wxMDIParentFrame_ActivateNext" wxMDIParentFrame_ActivateNext :: Ptr (TMDIParentFrame a) -> IO ()

-- | usage: (@mdiParentFrameActivatePrevious obj@).
mdiParentFrameActivatePrevious :: MDIParentFrame  a ->  IO ()
mdiParentFrameActivatePrevious _obj 
  = withObjectRef "mdiParentFrameActivatePrevious" _obj $ \cobj__obj -> 
    wxMDIParentFrame_ActivatePrevious cobj__obj  
foreign import ccall "wxMDIParentFrame_ActivatePrevious" wxMDIParentFrame_ActivatePrevious :: Ptr (TMDIParentFrame a) -> IO ()

-- | usage: (@mdiParentFrameArrangeIcons obj@).
mdiParentFrameArrangeIcons :: MDIParentFrame  a ->  IO ()
mdiParentFrameArrangeIcons _obj 
  = withObjectRef "mdiParentFrameArrangeIcons" _obj $ \cobj__obj -> 
    wxMDIParentFrame_ArrangeIcons cobj__obj  
foreign import ccall "wxMDIParentFrame_ArrangeIcons" wxMDIParentFrame_ArrangeIcons :: Ptr (TMDIParentFrame a) -> IO ()

-- | usage: (@mdiParentFrameCascade obj@).
mdiParentFrameCascade :: MDIParentFrame  a ->  IO ()
mdiParentFrameCascade _obj 
  = withObjectRef "mdiParentFrameCascade" _obj $ \cobj__obj -> 
    wxMDIParentFrame_Cascade cobj__obj  
foreign import ccall "wxMDIParentFrame_Cascade" wxMDIParentFrame_Cascade :: Ptr (TMDIParentFrame a) -> IO ()

-- | usage: (@mdiParentFrameCreate prt id txt lfttopwdthgt stl@).
mdiParentFrameCreate :: Window  a -> Id -> String -> Rect -> Style ->  IO (MDIParentFrame  ())
mdiParentFrameCreate _prt _id _txt _lfttopwdthgt _stl 
  = withObjectResult $
    withObjectPtr _prt $ \cobj__prt -> 
    withStringPtr _txt $ \cobj__txt -> 
    wxMDIParentFrame_Create cobj__prt  (toCInt _id)  cobj__txt  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
foreign import ccall "wxMDIParentFrame_Create" wxMDIParentFrame_Create :: Ptr (TWindow a) -> CInt -> Ptr (TWxString c) -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TMDIParentFrame ()))

-- | usage: (@mdiParentFrameGetActiveChild obj@).
mdiParentFrameGetActiveChild :: MDIParentFrame  a ->  IO (MDIChildFrame  ())
mdiParentFrameGetActiveChild _obj 
  = withObjectResult $
    withObjectRef "mdiParentFrameGetActiveChild" _obj $ \cobj__obj -> 
    wxMDIParentFrame_GetActiveChild cobj__obj  
foreign import ccall "wxMDIParentFrame_GetActiveChild" wxMDIParentFrame_GetActiveChild :: Ptr (TMDIParentFrame a) -> IO (Ptr (TMDIChildFrame ()))

-- | usage: (@mdiParentFrameGetClientWindow obj@).
mdiParentFrameGetClientWindow :: MDIParentFrame  a ->  IO (MDIClientWindow  ())
mdiParentFrameGetClientWindow _obj 
  = withObjectResult $
    withObjectRef "mdiParentFrameGetClientWindow" _obj $ \cobj__obj -> 
    wxMDIParentFrame_GetClientWindow cobj__obj  
foreign import ccall "wxMDIParentFrame_GetClientWindow" wxMDIParentFrame_GetClientWindow :: Ptr (TMDIParentFrame a) -> IO (Ptr (TMDIClientWindow ()))

-- | usage: (@mdiParentFrameGetWindowMenu obj@).
mdiParentFrameGetWindowMenu :: MDIParentFrame  a ->  IO (Menu  ())
mdiParentFrameGetWindowMenu _obj 
  = withObjectResult $
    withObjectRef "mdiParentFrameGetWindowMenu" _obj $ \cobj__obj -> 
    wxMDIParentFrame_GetWindowMenu cobj__obj  
foreign import ccall "wxMDIParentFrame_GetWindowMenu" wxMDIParentFrame_GetWindowMenu :: Ptr (TMDIParentFrame a) -> IO (Ptr (TMenu ()))

-- | usage: (@mdiParentFrameOnCreateClient obj@).
mdiParentFrameOnCreateClient :: MDIParentFrame  a ->  IO (MDIClientWindow  ())
mdiParentFrameOnCreateClient _obj 
  = withObjectResult $
    withObjectRef "mdiParentFrameOnCreateClient" _obj $ \cobj__obj -> 
    wxMDIParentFrame_OnCreateClient cobj__obj  
foreign import ccall "wxMDIParentFrame_OnCreateClient" wxMDIParentFrame_OnCreateClient :: Ptr (TMDIParentFrame a) -> IO (Ptr (TMDIClientWindow ()))

-- | usage: (@mdiParentFrameSetWindowMenu obj menu@).
mdiParentFrameSetWindowMenu :: MDIParentFrame  a -> Menu  b ->  IO ()
mdiParentFrameSetWindowMenu _obj menu 
  = withObjectRef "mdiParentFrameSetWindowMenu" _obj $ \cobj__obj -> 
    withObjectPtr menu $ \cobj_menu -> 
    wxMDIParentFrame_SetWindowMenu cobj__obj  cobj_menu  
foreign import ccall "wxMDIParentFrame_SetWindowMenu" wxMDIParentFrame_SetWindowMenu :: Ptr (TMDIParentFrame a) -> Ptr (TMenu b) -> IO ()

-- | usage: (@mdiParentFrameTile obj@).
mdiParentFrameTile :: MDIParentFrame  a ->  IO ()
mdiParentFrameTile _obj 
  = withObjectRef "mdiParentFrameTile" _obj $ \cobj__obj -> 
    wxMDIParentFrame_Tile cobj__obj  
foreign import ccall "wxMDIParentFrame_Tile" wxMDIParentFrame_Tile :: Ptr (TMDIParentFrame a) -> IO ()

-- | usage: (@mediaCtrlCreate parent windowID fileName xywh style szBackend name@).
mediaCtrlCreate :: Window  a -> Int -> String -> Rect -> Int -> String -> String ->  IO (MediaCtrl  ())
mediaCtrlCreate parent windowID fileName xywh style szBackend name 
  = withObjectResult $
    withObjectPtr parent $ \cobj_parent -> 
    withStringPtr fileName $ \cobj_fileName -> 
    withStringPtr szBackend $ \cobj_szBackend -> 
    withStringPtr name $ \cobj_name -> 
    wxMediaCtrl_Create cobj_parent  (toCInt windowID)  cobj_fileName  (toCIntRectX xywh) (toCIntRectY xywh)(toCIntRectW xywh) (toCIntRectH xywh)  (toCInt style)  cobj_szBackend  cobj_name  
foreign import ccall "wxMediaCtrl_Create" wxMediaCtrl_Create :: Ptr (TWindow a) -> CInt -> Ptr (TWxString c) -> CInt -> CInt -> CInt -> CInt -> CInt -> Ptr (TWxString f) -> Ptr (TWxString g) -> IO (Ptr (TMediaCtrl ()))

-- | usage: (@mediaCtrlDelete self@).
mediaCtrlDelete :: MediaCtrl  a ->  IO ()
mediaCtrlDelete
  = objectDelete


-- | usage: (@mediaCtrlGetBestSize self@).
mediaCtrlGetBestSize :: MediaCtrl  a ->  IO (Size)
mediaCtrlGetBestSize self 
  = withWxSizeResult $
    withObjectRef "mediaCtrlGetBestSize" self $ \cobj_self -> 
    wxMediaCtrl_GetBestSize cobj_self  
foreign import ccall "wxMediaCtrl_GetBestSize" wxMediaCtrl_GetBestSize :: Ptr (TMediaCtrl a) -> IO (Ptr (TWxSize ()))

-- | usage: (@mediaCtrlGetPlaybackRate self@).
mediaCtrlGetPlaybackRate :: MediaCtrl  a ->  IO Double
mediaCtrlGetPlaybackRate self 
  = withObjectRef "mediaCtrlGetPlaybackRate" self $ \cobj_self -> 
    wxMediaCtrl_GetPlaybackRate cobj_self  
foreign import ccall "wxMediaCtrl_GetPlaybackRate" wxMediaCtrl_GetPlaybackRate :: Ptr (TMediaCtrl a) -> IO Double

-- | usage: (@mediaCtrlGetState self@).
mediaCtrlGetState :: MediaCtrl  a ->  IO Int
mediaCtrlGetState self 
  = withIntResult $
    withObjectRef "mediaCtrlGetState" self $ \cobj_self -> 
    wxMediaCtrl_GetState cobj_self  
foreign import ccall "wxMediaCtrl_GetState" wxMediaCtrl_GetState :: Ptr (TMediaCtrl a) -> IO CInt

-- | usage: (@mediaCtrlGetVolume self@).
mediaCtrlGetVolume :: MediaCtrl  a ->  IO Double
mediaCtrlGetVolume self 
  = withObjectRef "mediaCtrlGetVolume" self $ \cobj_self -> 
    wxMediaCtrl_GetVolume cobj_self  
foreign import ccall "wxMediaCtrl_GetVolume" wxMediaCtrl_GetVolume :: Ptr (TMediaCtrl a) -> IO Double

-- | usage: (@mediaCtrlLength self@).
mediaCtrlLength :: MediaCtrl  a ->  IO Int64
mediaCtrlLength self 
  = withObjectRef "mediaCtrlLength" self $ \cobj_self -> 
    wxMediaCtrl_Length cobj_self  
foreign import ccall "wxMediaCtrl_Length" wxMediaCtrl_Length :: Ptr (TMediaCtrl a) -> IO Int64

-- | usage: (@mediaCtrlLoad self fileName@).
mediaCtrlLoad :: MediaCtrl  a -> String ->  IO Bool
mediaCtrlLoad self fileName 
  = withBoolResult $
    withObjectRef "mediaCtrlLoad" self $ \cobj_self -> 
    withStringPtr fileName $ \cobj_fileName -> 
    wxMediaCtrl_Load cobj_self  cobj_fileName  
foreign import ccall "wxMediaCtrl_Load" wxMediaCtrl_Load :: Ptr (TMediaCtrl a) -> Ptr (TWxString b) -> IO CBool

-- | usage: (@mediaCtrlLoadURI self uri@).
mediaCtrlLoadURI :: MediaCtrl  a -> String ->  IO Bool
mediaCtrlLoadURI self uri 
  = withBoolResult $
    withObjectRef "mediaCtrlLoadURI" self $ \cobj_self -> 
    withStringPtr uri $ \cobj_uri -> 
    wxMediaCtrl_LoadURI cobj_self  cobj_uri  
foreign import ccall "wxMediaCtrl_LoadURI" wxMediaCtrl_LoadURI :: Ptr (TMediaCtrl a) -> Ptr (TWxString b) -> IO CBool

-- | usage: (@mediaCtrlLoadURIWithProxy self uri proxy@).
mediaCtrlLoadURIWithProxy :: MediaCtrl  a -> String -> String ->  IO Bool
mediaCtrlLoadURIWithProxy self uri proxy 
  = withBoolResult $
    withObjectRef "mediaCtrlLoadURIWithProxy" self $ \cobj_self -> 
    withStringPtr uri $ \cobj_uri -> 
    withStringPtr proxy $ \cobj_proxy -> 
    wxMediaCtrl_LoadURIWithProxy cobj_self  cobj_uri  cobj_proxy  
foreign import ccall "wxMediaCtrl_LoadURIWithProxy" wxMediaCtrl_LoadURIWithProxy :: Ptr (TMediaCtrl a) -> Ptr (TWxString b) -> Ptr (TWxString c) -> IO CBool

-- | usage: (@mediaCtrlPause self@).
mediaCtrlPause :: MediaCtrl  a ->  IO Bool
mediaCtrlPause self 
  = withBoolResult $
    withObjectRef "mediaCtrlPause" self $ \cobj_self -> 
    wxMediaCtrl_Pause cobj_self  
foreign import ccall "wxMediaCtrl_Pause" wxMediaCtrl_Pause :: Ptr (TMediaCtrl a) -> IO CBool

-- | usage: (@mediaCtrlPlay self@).
mediaCtrlPlay :: MediaCtrl  a ->  IO Bool
mediaCtrlPlay self 
  = withBoolResult $
    withObjectRef "mediaCtrlPlay" self $ \cobj_self -> 
    wxMediaCtrl_Play cobj_self  
foreign import ccall "wxMediaCtrl_Play" wxMediaCtrl_Play :: Ptr (TMediaCtrl a) -> IO CBool

-- | usage: (@mediaCtrlSeek self offsetWhere mode@).
mediaCtrlSeek :: MediaCtrl  a -> Int64 -> Int ->  IO Int64
mediaCtrlSeek self offsetWhere mode 
  = withObjectRef "mediaCtrlSeek" self $ \cobj_self -> 
    wxMediaCtrl_Seek cobj_self  offsetWhere  (toCInt mode)  
foreign import ccall "wxMediaCtrl_Seek" wxMediaCtrl_Seek :: Ptr (TMediaCtrl a) -> Int64 -> CInt -> IO Int64

-- | usage: (@mediaCtrlSetPlaybackRate self dRate@).
mediaCtrlSetPlaybackRate :: MediaCtrl  a -> Double ->  IO Bool
mediaCtrlSetPlaybackRate self dRate 
  = withBoolResult $
    withObjectRef "mediaCtrlSetPlaybackRate" self $ \cobj_self -> 
    wxMediaCtrl_SetPlaybackRate cobj_self  dRate  
foreign import ccall "wxMediaCtrl_SetPlaybackRate" wxMediaCtrl_SetPlaybackRate :: Ptr (TMediaCtrl a) -> Double -> IO CBool

-- | usage: (@mediaCtrlSetVolume self dVolume@).
mediaCtrlSetVolume :: MediaCtrl  a -> Double ->  IO Bool
mediaCtrlSetVolume self dVolume 
  = withBoolResult $
    withObjectRef "mediaCtrlSetVolume" self $ \cobj_self -> 
    wxMediaCtrl_SetVolume cobj_self  dVolume  
foreign import ccall "wxMediaCtrl_SetVolume" wxMediaCtrl_SetVolume :: Ptr (TMediaCtrl a) -> Double -> IO CBool

-- | usage: (@mediaCtrlShowPlayerControls self flags@).
mediaCtrlShowPlayerControls :: MediaCtrl  a -> Int ->  IO Bool
mediaCtrlShowPlayerControls self flags 
  = withBoolResult $
    withObjectRef "mediaCtrlShowPlayerControls" self $ \cobj_self -> 
    wxMediaCtrl_ShowPlayerControls cobj_self  (toCInt flags)  
foreign import ccall "wxMediaCtrl_ShowPlayerControls" wxMediaCtrl_ShowPlayerControls :: Ptr (TMediaCtrl a) -> CInt -> IO CBool

-- | usage: (@mediaCtrlStop self@).
mediaCtrlStop :: MediaCtrl  a ->  IO Bool
mediaCtrlStop self 
  = withBoolResult $
    withObjectRef "mediaCtrlStop" self $ \cobj_self -> 
    wxMediaCtrl_Stop cobj_self  
foreign import ccall "wxMediaCtrl_Stop" wxMediaCtrl_Stop :: Ptr (TMediaCtrl a) -> IO CBool

-- | usage: (@mediaCtrlTell self@).
mediaCtrlTell :: MediaCtrl  a ->  IO Int64
mediaCtrlTell self 
  = withObjectRef "mediaCtrlTell" self $ \cobj_self -> 
    wxMediaCtrl_Tell cobj_self  
foreign import ccall "wxMediaCtrl_Tell" wxMediaCtrl_Tell :: Ptr (TMediaCtrl a) -> IO Int64

-- | usage: (@memoryDCCreate@).
memoryDCCreate ::  IO (MemoryDC  ())
memoryDCCreate 
  = withObjectResult $
    wxMemoryDC_Create 
foreign import ccall "wxMemoryDC_Create" wxMemoryDC_Create :: IO (Ptr (TMemoryDC ()))

-- | usage: (@memoryDCCreateCompatible dc@).
memoryDCCreateCompatible :: DC  a ->  IO (MemoryDC  ())
memoryDCCreateCompatible dc 
  = withObjectResult $
    withObjectPtr dc $ \cobj_dc -> 
    wxMemoryDC_CreateCompatible cobj_dc  
foreign import ccall "wxMemoryDC_CreateCompatible" wxMemoryDC_CreateCompatible :: Ptr (TDC a) -> IO (Ptr (TMemoryDC ()))

-- | usage: (@memoryDCCreateWithBitmap bitmap@).
memoryDCCreateWithBitmap :: Bitmap  a ->  IO (MemoryDC  ())
memoryDCCreateWithBitmap bitmap 
  = withObjectResult $
    withObjectPtr bitmap $ \cobj_bitmap -> 
    wxMemoryDC_CreateWithBitmap cobj_bitmap  
foreign import ccall "wxMemoryDC_CreateWithBitmap" wxMemoryDC_CreateWithBitmap :: Ptr (TBitmap a) -> IO (Ptr (TMemoryDC ()))

-- | usage: (@memoryDCDelete obj@).
memoryDCDelete :: MemoryDC  a ->  IO ()
memoryDCDelete
  = objectDelete


-- | usage: (@memoryDCSelectObject obj bitmap@).
memoryDCSelectObject :: MemoryDC  a -> Bitmap  b ->  IO ()
memoryDCSelectObject _obj bitmap 
  = withObjectRef "memoryDCSelectObject" _obj $ \cobj__obj -> 
    withObjectPtr bitmap $ \cobj_bitmap -> 
    wxMemoryDC_SelectObject cobj__obj  cobj_bitmap  
foreign import ccall "wxMemoryDC_SelectObject" wxMemoryDC_SelectObject :: Ptr (TMemoryDC a) -> Ptr (TBitmap b) -> IO ()

-- | usage: (@memoryInputStreamCreate wxdata len@).
memoryInputStreamCreate :: Ptr  a -> Int ->  IO (MemoryInputStream  ())
memoryInputStreamCreate wxdata len 
  = withObjectResult $
    wxMemoryInputStream_Create wxdata  (toCInt len)  
foreign import ccall "wxMemoryInputStream_Create" wxMemoryInputStream_Create :: Ptr  a -> CInt -> IO (Ptr (TMemoryInputStream ()))

-- | usage: (@memoryInputStreamDelete self@).
memoryInputStreamDelete :: MemoryInputStream  a ->  IO ()
memoryInputStreamDelete self 
  = withObjectRef "memoryInputStreamDelete" self $ \cobj_self -> 
    wxMemoryInputStream_Delete cobj_self  
foreign import ccall "wxMemoryInputStream_Delete" wxMemoryInputStream_Delete :: Ptr (TMemoryInputStream a) -> IO ()

-- | usage: (@menuAppend obj id text help isCheckable@).
menuAppend :: Menu  a -> Id -> String -> String -> Bool ->  IO ()
menuAppend _obj id text help isCheckable 
  = withObjectRef "menuAppend" _obj $ \cobj__obj -> 
    withStringPtr text $ \cobj_text -> 
    withStringPtr help $ \cobj_help -> 
    wxMenu_Append cobj__obj  (toCInt id)  cobj_text  cobj_help  (toCBool isCheckable)  
foreign import ccall "wxMenu_Append" wxMenu_Append :: Ptr (TMenu a) -> CInt -> Ptr (TWxString c) -> Ptr (TWxString d) -> CBool -> IO ()

-- | usage: (@menuAppendItem obj itm@).
menuAppendItem :: Menu  a -> MenuItem  b ->  IO ()
menuAppendItem _obj _itm 
  = withObjectRef "menuAppendItem" _obj $ \cobj__obj -> 
    withObjectPtr _itm $ \cobj__itm -> 
    wxMenu_AppendItem cobj__obj  cobj__itm  
foreign import ccall "wxMenu_AppendItem" wxMenu_AppendItem :: Ptr (TMenu a) -> Ptr (TMenuItem b) -> IO ()

-- | usage: (@menuAppendRadioItem self id text help@).
menuAppendRadioItem :: Menu  a -> Id -> String -> String ->  IO ()
menuAppendRadioItem self id text help 
  = withObjectRef "menuAppendRadioItem" self $ \cobj_self -> 
    withStringPtr text $ \cobj_text -> 
    withStringPtr help $ \cobj_help -> 
    wxMenu_AppendRadioItem cobj_self  (toCInt id)  cobj_text  cobj_help  
foreign import ccall "wxMenu_AppendRadioItem" wxMenu_AppendRadioItem :: Ptr (TMenu a) -> CInt -> Ptr (TWxString c) -> Ptr (TWxString d) -> IO ()

-- | usage: (@menuAppendSeparator obj@).
menuAppendSeparator :: Menu  a ->  IO ()
menuAppendSeparator _obj 
  = withObjectRef "menuAppendSeparator" _obj $ \cobj__obj -> 
    wxMenu_AppendSeparator cobj__obj  
foreign import ccall "wxMenu_AppendSeparator" wxMenu_AppendSeparator :: Ptr (TMenu a) -> IO ()

-- | usage: (@menuAppendSub obj id text submenu help@).
menuAppendSub :: Menu  a -> Id -> String -> Menu  d -> String ->  IO ()
menuAppendSub _obj id text submenu help 
  = withObjectRef "menuAppendSub" _obj $ \cobj__obj -> 
    withStringPtr text $ \cobj_text -> 
    withObjectPtr submenu $ \cobj_submenu -> 
    withStringPtr help $ \cobj_help -> 
    wxMenu_AppendSub cobj__obj  (toCInt id)  cobj_text  cobj_submenu  cobj_help  
foreign import ccall "wxMenu_AppendSub" wxMenu_AppendSub :: Ptr (TMenu a) -> CInt -> Ptr (TWxString c) -> Ptr (TMenu d) -> Ptr (TWxString e) -> IO ()

-- | usage: (@menuBarAppend obj menu title@).
menuBarAppend :: MenuBar  a -> Menu  b -> String ->  IO Int
menuBarAppend _obj menu title 
  = withIntResult $
    withObjectRef "menuBarAppend" _obj $ \cobj__obj -> 
    withObjectPtr menu $ \cobj_menu -> 
    withStringPtr title $ \cobj_title -> 
    wxMenuBar_Append cobj__obj  cobj_menu  cobj_title  
foreign import ccall "wxMenuBar_Append" wxMenuBar_Append :: Ptr (TMenuBar a) -> Ptr (TMenu b) -> Ptr (TWxString c) -> IO CInt

-- | usage: (@menuBarCheck obj id check@).
menuBarCheck :: MenuBar  a -> Id -> Bool ->  IO ()
menuBarCheck _obj id check 
  = withObjectRef "menuBarCheck" _obj $ \cobj__obj -> 
    wxMenuBar_Check cobj__obj  (toCInt id)  (toCBool check)  
foreign import ccall "wxMenuBar_Check" wxMenuBar_Check :: Ptr (TMenuBar a) -> CInt -> CBool -> IO ()

-- | usage: (@menuBarCreate style@).
menuBarCreate :: Int ->  IO (MenuBar  ())
menuBarCreate _style 
  = withObjectResult $
    wxMenuBar_Create (toCInt _style)  
foreign import ccall "wxMenuBar_Create" wxMenuBar_Create :: CInt -> IO (Ptr (TMenuBar ()))

-- | usage: (@menuBarDeletePointer obj@).
menuBarDeletePointer :: MenuBar  a ->  IO ()
menuBarDeletePointer _obj 
  = withObjectRef "menuBarDeletePointer" _obj $ \cobj__obj -> 
    wxMenuBar_DeletePointer cobj__obj  
foreign import ccall "wxMenuBar_DeletePointer" wxMenuBar_DeletePointer :: Ptr (TMenuBar a) -> IO ()

-- | usage: (@menuBarEnable obj enable@).
menuBarEnable :: MenuBar  a -> Bool ->  IO Int
menuBarEnable _obj enable 
  = withIntResult $
    withObjectRef "menuBarEnable" _obj $ \cobj__obj -> 
    wxMenuBar_Enable cobj__obj  (toCBool enable)  
foreign import ccall "wxMenuBar_Enable" wxMenuBar_Enable :: Ptr (TMenuBar a) -> CBool -> IO CInt

-- | usage: (@menuBarEnableItem obj id enable@).
menuBarEnableItem :: MenuBar  a -> Id -> Bool ->  IO ()
menuBarEnableItem _obj id enable 
  = withObjectRef "menuBarEnableItem" _obj $ \cobj__obj -> 
    wxMenuBar_EnableItem cobj__obj  (toCInt id)  (toCBool enable)  
foreign import ccall "wxMenuBar_EnableItem" wxMenuBar_EnableItem :: Ptr (TMenuBar a) -> CInt -> CBool -> IO ()

-- | usage: (@menuBarEnableTop obj pos enable@).
menuBarEnableTop :: MenuBar  a -> Int -> Bool ->  IO ()
menuBarEnableTop _obj pos enable 
  = withObjectRef "menuBarEnableTop" _obj $ \cobj__obj -> 
    wxMenuBar_EnableTop cobj__obj  (toCInt pos)  (toCBool enable)  
foreign import ccall "wxMenuBar_EnableTop" wxMenuBar_EnableTop :: Ptr (TMenuBar a) -> CInt -> CBool -> IO ()

-- | usage: (@menuBarFindItem obj id@).
menuBarFindItem :: MenuBar  a -> Id ->  IO (MenuItem  ())
menuBarFindItem _obj id 
  = withObjectResult $
    withObjectRef "menuBarFindItem" _obj $ \cobj__obj -> 
    wxMenuBar_FindItem cobj__obj  (toCInt id)  
foreign import ccall "wxMenuBar_FindItem" wxMenuBar_FindItem :: Ptr (TMenuBar a) -> CInt -> IO (Ptr (TMenuItem ()))

-- | usage: (@menuBarFindMenu obj title@).
menuBarFindMenu :: MenuBar  a -> String ->  IO Int
menuBarFindMenu _obj title 
  = withIntResult $
    withObjectRef "menuBarFindMenu" _obj $ \cobj__obj -> 
    withStringPtr title $ \cobj_title -> 
    wxMenuBar_FindMenu cobj__obj  cobj_title  
foreign import ccall "wxMenuBar_FindMenu" wxMenuBar_FindMenu :: Ptr (TMenuBar a) -> Ptr (TWxString b) -> IO CInt

-- | usage: (@menuBarFindMenuItem obj menuString itemString@).
menuBarFindMenuItem :: MenuBar  a -> String -> String ->  IO Int
menuBarFindMenuItem _obj menuString itemString 
  = withIntResult $
    withObjectRef "menuBarFindMenuItem" _obj $ \cobj__obj -> 
    withStringPtr menuString $ \cobj_menuString -> 
    withStringPtr itemString $ \cobj_itemString -> 
    wxMenuBar_FindMenuItem cobj__obj  cobj_menuString  cobj_itemString  
foreign import ccall "wxMenuBar_FindMenuItem" wxMenuBar_FindMenuItem :: Ptr (TMenuBar a) -> Ptr (TWxString b) -> Ptr (TWxString c) -> IO CInt

-- | usage: (@menuBarGetFrame obj@).
menuBarGetFrame :: MenuBar  a ->  IO (Frame  ())
menuBarGetFrame _obj 
  = withObjectResult $
    withObjectRef "menuBarGetFrame" _obj $ \cobj__obj -> 
    wxMenuBar_GetFrame cobj__obj  
foreign import ccall "wxMenuBar_GetFrame" wxMenuBar_GetFrame :: Ptr (TMenuBar a) -> IO (Ptr (TFrame ()))

-- | usage: (@menuBarGetHelpString obj id@).
menuBarGetHelpString :: MenuBar  a -> Id ->  IO (String)
menuBarGetHelpString _obj id 
  = withManagedStringResult $
    withObjectRef "menuBarGetHelpString" _obj $ \cobj__obj -> 
    wxMenuBar_GetHelpString cobj__obj  (toCInt id)  
foreign import ccall "wxMenuBar_GetHelpString" wxMenuBar_GetHelpString :: Ptr (TMenuBar a) -> CInt -> IO (Ptr (TWxString ()))

-- | usage: (@menuBarGetLabel obj id@).
menuBarGetLabel :: MenuBar  a -> Id ->  IO (String)
menuBarGetLabel _obj id 
  = withManagedStringResult $
    withObjectRef "menuBarGetLabel" _obj $ \cobj__obj -> 
    wxMenuBar_GetLabel cobj__obj  (toCInt id)  
foreign import ccall "wxMenuBar_GetLabel" wxMenuBar_GetLabel :: Ptr (TMenuBar a) -> CInt -> IO (Ptr (TWxString ()))

-- | usage: (@menuBarGetMenu obj pos@).
menuBarGetMenu :: MenuBar  a -> Int ->  IO (Menu  ())
menuBarGetMenu _obj pos 
  = withObjectResult $
    withObjectRef "menuBarGetMenu" _obj $ \cobj__obj -> 
    wxMenuBar_GetMenu cobj__obj  (toCInt pos)  
foreign import ccall "wxMenuBar_GetMenu" wxMenuBar_GetMenu :: Ptr (TMenuBar a) -> CInt -> IO (Ptr (TMenu ()))

-- | usage: (@menuBarGetMenuCount obj@).
menuBarGetMenuCount :: MenuBar  a ->  IO Int
menuBarGetMenuCount _obj 
  = withIntResult $
    withObjectRef "menuBarGetMenuCount" _obj $ \cobj__obj -> 
    wxMenuBar_GetMenuCount cobj__obj  
foreign import ccall "wxMenuBar_GetMenuCount" wxMenuBar_GetMenuCount :: Ptr (TMenuBar a) -> IO CInt

-- | usage: (@menuBarGetMenuLabel obj pos@).
menuBarGetMenuLabel :: MenuBar  a -> Int ->  IO (String)
menuBarGetMenuLabel _obj pos 
  = withManagedStringResult $
    withObjectRef "menuBarGetMenuLabel" _obj $ \cobj__obj -> 
    wxMenuBar_GetMenuLabel cobj__obj  (toCInt pos)  
foreign import ccall "wxMenuBar_GetMenuLabel" wxMenuBar_GetMenuLabel :: Ptr (TMenuBar a) -> CInt -> IO (Ptr (TWxString ()))

-- | usage: (@menuBarInsert obj pos menu title@).
menuBarInsert :: MenuBar  a -> Int -> Menu  c -> String ->  IO Int
menuBarInsert _obj pos menu title 
  = withIntResult $
    withObjectRef "menuBarInsert" _obj $ \cobj__obj -> 
    withObjectPtr menu $ \cobj_menu -> 
    withStringPtr title $ \cobj_title -> 
    wxMenuBar_Insert cobj__obj  (toCInt pos)  cobj_menu  cobj_title  
foreign import ccall "wxMenuBar_Insert" wxMenuBar_Insert :: Ptr (TMenuBar a) -> CInt -> Ptr (TMenu c) -> Ptr (TWxString d) -> IO CInt

-- | usage: (@menuBarIsChecked obj id@).
menuBarIsChecked :: MenuBar  a -> Id ->  IO Bool
menuBarIsChecked _obj id 
  = withBoolResult $
    withObjectRef "menuBarIsChecked" _obj $ \cobj__obj -> 
    wxMenuBar_IsChecked cobj__obj  (toCInt id)  
foreign import ccall "wxMenuBar_IsChecked" wxMenuBar_IsChecked :: Ptr (TMenuBar a) -> CInt -> IO CBool

-- | usage: (@menuBarIsEnabled obj id@).
menuBarIsEnabled :: MenuBar  a -> Id ->  IO Bool
menuBarIsEnabled _obj id 
  = withBoolResult $
    withObjectRef "menuBarIsEnabled" _obj $ \cobj__obj -> 
    wxMenuBar_IsEnabled cobj__obj  (toCInt id)  
foreign import ccall "wxMenuBar_IsEnabled" wxMenuBar_IsEnabled :: Ptr (TMenuBar a) -> CInt -> IO CBool

-- | usage: (@menuBarRemove obj pos@).
menuBarRemove :: MenuBar  a -> Int ->  IO (Menu  ())
menuBarRemove _obj pos 
  = withObjectResult $
    withObjectRef "menuBarRemove" _obj $ \cobj__obj -> 
    wxMenuBar_Remove cobj__obj  (toCInt pos)  
foreign import ccall "wxMenuBar_Remove" wxMenuBar_Remove :: Ptr (TMenuBar a) -> CInt -> IO (Ptr (TMenu ()))

-- | usage: (@menuBarReplace obj pos menu title@).
menuBarReplace :: MenuBar  a -> Int -> Menu  c -> String ->  IO (Menu  ())
menuBarReplace _obj pos menu title 
  = withObjectResult $
    withObjectRef "menuBarReplace" _obj $ \cobj__obj -> 
    withObjectPtr menu $ \cobj_menu -> 
    withStringPtr title $ \cobj_title -> 
    wxMenuBar_Replace cobj__obj  (toCInt pos)  cobj_menu  cobj_title  
foreign import ccall "wxMenuBar_Replace" wxMenuBar_Replace :: Ptr (TMenuBar a) -> CInt -> Ptr (TMenu c) -> Ptr (TWxString d) -> IO (Ptr (TMenu ()))

-- | usage: (@menuBarSetHelpString obj id helpString@).
menuBarSetHelpString :: MenuBar  a -> Id -> String ->  IO ()
menuBarSetHelpString _obj id helpString 
  = withObjectRef "menuBarSetHelpString" _obj $ \cobj__obj -> 
    withStringPtr helpString $ \cobj_helpString -> 
    wxMenuBar_SetHelpString cobj__obj  (toCInt id)  cobj_helpString  
foreign import ccall "wxMenuBar_SetHelpString" wxMenuBar_SetHelpString :: Ptr (TMenuBar a) -> CInt -> Ptr (TWxString c) -> IO ()

-- | usage: (@menuBarSetItemLabel obj id label@).
menuBarSetItemLabel :: MenuBar  a -> Id -> String ->  IO ()
menuBarSetItemLabel _obj id label 
  = withObjectRef "menuBarSetItemLabel" _obj $ \cobj__obj -> 
    withStringPtr label $ \cobj_label -> 
    wxMenuBar_SetItemLabel cobj__obj  (toCInt id)  cobj_label  
foreign import ccall "wxMenuBar_SetItemLabel" wxMenuBar_SetItemLabel :: Ptr (TMenuBar a) -> CInt -> Ptr (TWxString c) -> IO ()

-- | usage: (@menuBarSetLabel obj s@).
menuBarSetLabel :: MenuBar  a -> String ->  IO ()
menuBarSetLabel _obj s 
  = withObjectRef "menuBarSetLabel" _obj $ \cobj__obj -> 
    withStringPtr s $ \cobj_s -> 
    wxMenuBar_SetLabel cobj__obj  cobj_s  
foreign import ccall "wxMenuBar_SetLabel" wxMenuBar_SetLabel :: Ptr (TMenuBar a) -> Ptr (TWxString b) -> IO ()

-- | usage: (@menuBarSetMenuLabel obj pos label@).
menuBarSetMenuLabel :: MenuBar  a -> Int -> String ->  IO ()
menuBarSetMenuLabel _obj pos label 
  = withObjectRef "menuBarSetMenuLabel" _obj $ \cobj__obj -> 
    withStringPtr label $ \cobj_label -> 
    wxMenuBar_SetMenuLabel cobj__obj  (toCInt pos)  cobj_label  
foreign import ccall "wxMenuBar_SetMenuLabel" wxMenuBar_SetMenuLabel :: Ptr (TMenuBar a) -> CInt -> Ptr (TWxString c) -> IO ()

-- | usage: (@menuBreak obj@).
menuBreak :: Menu  a ->  IO ()
menuBreak _obj 
  = withObjectRef "menuBreak" _obj $ \cobj__obj -> 
    wxMenu_Break cobj__obj  
foreign import ccall "wxMenu_Break" wxMenu_Break :: Ptr (TMenu a) -> IO ()

-- | usage: (@menuCheck obj id check@).
menuCheck :: Menu  a -> Id -> Bool ->  IO ()
menuCheck _obj id check 
  = withObjectRef "menuCheck" _obj $ \cobj__obj -> 
    wxMenu_Check cobj__obj  (toCInt id)  (toCBool check)  
foreign import ccall "wxMenu_Check" wxMenu_Check :: Ptr (TMenu a) -> CInt -> CBool -> IO ()

-- | usage: (@menuCreate title style@).
menuCreate :: String -> Int ->  IO (Menu  ())
menuCreate title style 
  = withObjectResult $
    withStringPtr title $ \cobj_title -> 
    wxMenu_Create cobj_title  (toCInt style)  
foreign import ccall "wxMenu_Create" wxMenu_Create :: Ptr (TWxString a) -> CInt -> IO (Ptr (TMenu ()))

-- | usage: (@menuDeleteById obj id@).
menuDeleteById :: Menu  a -> Id ->  IO ()
menuDeleteById _obj id 
  = withObjectRef "menuDeleteById" _obj $ \cobj__obj -> 
    wxMenu_DeleteById cobj__obj  (toCInt id)  
foreign import ccall "wxMenu_DeleteById" wxMenu_DeleteById :: Ptr (TMenu a) -> CInt -> IO ()

-- | usage: (@menuDeleteByItem obj itm@).
menuDeleteByItem :: Menu  a -> MenuItem  b ->  IO ()
menuDeleteByItem _obj _itm 
  = withObjectRef "menuDeleteByItem" _obj $ \cobj__obj -> 
    withObjectPtr _itm $ \cobj__itm -> 
    wxMenu_DeleteByItem cobj__obj  cobj__itm  
foreign import ccall "wxMenu_DeleteByItem" wxMenu_DeleteByItem :: Ptr (TMenu a) -> Ptr (TMenuItem b) -> IO ()

-- | usage: (@menuDeletePointer obj@).
menuDeletePointer :: Menu  a ->  IO ()
menuDeletePointer _obj 
  = withObjectRef "menuDeletePointer" _obj $ \cobj__obj -> 
    wxMenu_DeletePointer cobj__obj  
foreign import ccall "wxMenu_DeletePointer" wxMenu_DeletePointer :: Ptr (TMenu a) -> IO ()

-- | usage: (@menuDestroyById obj id@).
menuDestroyById :: Menu  a -> Id ->  IO ()
menuDestroyById _obj id 
  = withObjectRef "menuDestroyById" _obj $ \cobj__obj -> 
    wxMenu_DestroyById cobj__obj  (toCInt id)  
foreign import ccall "wxMenu_DestroyById" wxMenu_DestroyById :: Ptr (TMenu a) -> CInt -> IO ()

-- | usage: (@menuDestroyByItem obj itm@).
menuDestroyByItem :: Menu  a -> MenuItem  b ->  IO ()
menuDestroyByItem _obj _itm 
  = withObjectRef "menuDestroyByItem" _obj $ \cobj__obj -> 
    withObjectPtr _itm $ \cobj__itm -> 
    wxMenu_DestroyByItem cobj__obj  cobj__itm  
foreign import ccall "wxMenu_DestroyByItem" wxMenu_DestroyByItem :: Ptr (TMenu a) -> Ptr (TMenuItem b) -> IO ()

-- | usage: (@menuEnable obj id enable@).
menuEnable :: Menu  a -> Id -> Bool ->  IO ()
menuEnable _obj id enable 
  = withObjectRef "menuEnable" _obj $ \cobj__obj -> 
    wxMenu_Enable cobj__obj  (toCInt id)  (toCBool enable)  
foreign import ccall "wxMenu_Enable" wxMenu_Enable :: Ptr (TMenu a) -> CInt -> CBool -> IO ()

-- | usage: (@menuEventCopyObject obj obj@).
menuEventCopyObject :: MenuEvent  a -> Ptr  b ->  IO ()
menuEventCopyObject _obj obj 
  = withObjectRef "menuEventCopyObject" _obj $ \cobj__obj -> 
    wxMenuEvent_CopyObject cobj__obj  obj  
foreign import ccall "wxMenuEvent_CopyObject" wxMenuEvent_CopyObject :: Ptr (TMenuEvent a) -> Ptr  b -> IO ()

-- | usage: (@menuEventGetMenuId obj@).
menuEventGetMenuId :: MenuEvent  a ->  IO Int
menuEventGetMenuId _obj 
  = withIntResult $
    withObjectRef "menuEventGetMenuId" _obj $ \cobj__obj -> 
    wxMenuEvent_GetMenuId cobj__obj  
foreign import ccall "wxMenuEvent_GetMenuId" wxMenuEvent_GetMenuId :: Ptr (TMenuEvent a) -> IO CInt

-- | usage: (@menuFindItem obj id@).
menuFindItem :: Menu  a -> Id ->  IO (MenuItem  ())
menuFindItem _obj id 
  = withObjectResult $
    withObjectRef "menuFindItem" _obj $ \cobj__obj -> 
    wxMenu_FindItem cobj__obj  (toCInt id)  
foreign import ccall "wxMenu_FindItem" wxMenu_FindItem :: Ptr (TMenu a) -> CInt -> IO (Ptr (TMenuItem ()))

-- | usage: (@menuFindItemByLabel obj itemString@).
menuFindItemByLabel :: Menu  a -> String ->  IO Int
menuFindItemByLabel _obj itemString 
  = withIntResult $
    withObjectRef "menuFindItemByLabel" _obj $ \cobj__obj -> 
    withStringPtr itemString $ \cobj_itemString -> 
    wxMenu_FindItemByLabel cobj__obj  cobj_itemString  
foreign import ccall "wxMenu_FindItemByLabel" wxMenu_FindItemByLabel :: Ptr (TMenu a) -> Ptr (TWxString b) -> IO CInt

-- | usage: (@menuGetClientData obj@).
menuGetClientData :: Menu  a ->  IO (ClientData  ())
menuGetClientData _obj 
  = withObjectResult $
    withObjectRef "menuGetClientData" _obj $ \cobj__obj -> 
    wxMenu_GetClientData cobj__obj  
foreign import ccall "wxMenu_GetClientData" wxMenu_GetClientData :: Ptr (TMenu a) -> IO (Ptr (TClientData ()))

-- | usage: (@menuGetHelpString obj id@).
menuGetHelpString :: Menu  a -> Id ->  IO (String)
menuGetHelpString _obj id 
  = withManagedStringResult $
    withObjectRef "menuGetHelpString" _obj $ \cobj__obj -> 
    wxMenu_GetHelpString cobj__obj  (toCInt id)  
foreign import ccall "wxMenu_GetHelpString" wxMenu_GetHelpString :: Ptr (TMenu a) -> CInt -> IO (Ptr (TWxString ()))

-- | usage: (@menuGetInvokingWindow obj@).
menuGetInvokingWindow :: Menu  a ->  IO (Window  ())
menuGetInvokingWindow _obj 
  = withObjectResult $
    withObjectRef "menuGetInvokingWindow" _obj $ \cobj__obj -> 
    wxMenu_GetInvokingWindow cobj__obj  
foreign import ccall "wxMenu_GetInvokingWindow" wxMenu_GetInvokingWindow :: Ptr (TMenu a) -> IO (Ptr (TWindow ()))

-- | usage: (@menuGetLabelText obj id@).
menuGetLabelText :: Menu  a -> Id ->  IO (String)
menuGetLabelText _obj id 
  = withManagedStringResult $
    withObjectRef "menuGetLabelText" _obj $ \cobj__obj -> 
    wxMenu_GetLabelText cobj__obj  (toCInt id)  
foreign import ccall "wxMenu_GetLabelText" wxMenu_GetLabelText :: Ptr (TMenu a) -> CInt -> IO (Ptr (TWxString ()))

-- | usage: (@menuGetMenuBar obj@).
menuGetMenuBar :: Menu  a ->  IO (MenuBar  ())
menuGetMenuBar _obj 
  = withObjectResult $
    withObjectRef "menuGetMenuBar" _obj $ \cobj__obj -> 
    wxMenu_GetMenuBar cobj__obj  
foreign import ccall "wxMenu_GetMenuBar" wxMenu_GetMenuBar :: Ptr (TMenu a) -> IO (Ptr (TMenuBar ()))

-- | usage: (@menuGetMenuItemCount obj@).
menuGetMenuItemCount :: Menu  a ->  IO Int
menuGetMenuItemCount _obj 
  = withIntResult $
    withObjectRef "menuGetMenuItemCount" _obj $ \cobj__obj -> 
    wxMenu_GetMenuItemCount cobj__obj  
foreign import ccall "wxMenu_GetMenuItemCount" wxMenu_GetMenuItemCount :: Ptr (TMenu a) -> IO CInt

-- | usage: (@menuGetMenuItems obj lst@).
menuGetMenuItems :: Menu  a -> List  b ->  IO Int
menuGetMenuItems _obj _lst 
  = withIntResult $
    withObjectRef "menuGetMenuItems" _obj $ \cobj__obj -> 
    withObjectPtr _lst $ \cobj__lst -> 
    wxMenu_GetMenuItems cobj__obj  cobj__lst  
foreign import ccall "wxMenu_GetMenuItems" wxMenu_GetMenuItems :: Ptr (TMenu a) -> Ptr (TList b) -> IO CInt

-- | usage: (@menuGetParent obj@).
menuGetParent :: Menu  a ->  IO (Menu  ())
menuGetParent _obj 
  = withObjectResult $
    withObjectRef "menuGetParent" _obj $ \cobj__obj -> 
    wxMenu_GetParent cobj__obj  
foreign import ccall "wxMenu_GetParent" wxMenu_GetParent :: Ptr (TMenu a) -> IO (Ptr (TMenu ()))

-- | usage: (@menuGetStyle obj@).
menuGetStyle :: Menu  a ->  IO Int
menuGetStyle _obj 
  = withIntResult $
    withObjectRef "menuGetStyle" _obj $ \cobj__obj -> 
    wxMenu_GetStyle cobj__obj  
foreign import ccall "wxMenu_GetStyle" wxMenu_GetStyle :: Ptr (TMenu a) -> IO CInt

-- | usage: (@menuGetTitle obj@).
menuGetTitle :: Menu  a ->  IO (String)
menuGetTitle _obj 
  = withManagedStringResult $
    withObjectRef "menuGetTitle" _obj $ \cobj__obj -> 
    wxMenu_GetTitle cobj__obj  
foreign import ccall "wxMenu_GetTitle" wxMenu_GetTitle :: Ptr (TMenu a) -> IO (Ptr (TWxString ()))

-- | usage: (@menuInsert obj pos id text help isCheckable@).
menuInsert :: Menu  a -> Int -> Id -> String -> String -> Bool ->  IO ()
menuInsert _obj pos id text help isCheckable 
  = withObjectRef "menuInsert" _obj $ \cobj__obj -> 
    withStringPtr text $ \cobj_text -> 
    withStringPtr help $ \cobj_help -> 
    wxMenu_Insert cobj__obj  (toCInt pos)  (toCInt id)  cobj_text  cobj_help  (toCBool isCheckable)  
foreign import ccall "wxMenu_Insert" wxMenu_Insert :: Ptr (TMenu a) -> CInt -> CInt -> Ptr (TWxString d) -> Ptr (TWxString e) -> CBool -> IO ()

-- | usage: (@menuInsertItem obj pos itm@).
menuInsertItem :: Menu  a -> Int -> MenuItem  c ->  IO ()
menuInsertItem _obj pos _itm 
  = withObjectRef "menuInsertItem" _obj $ \cobj__obj -> 
    withObjectPtr _itm $ \cobj__itm -> 
    wxMenu_InsertItem cobj__obj  (toCInt pos)  cobj__itm  
foreign import ccall "wxMenu_InsertItem" wxMenu_InsertItem :: Ptr (TMenu a) -> CInt -> Ptr (TMenuItem c) -> IO ()

-- | usage: (@menuInsertSub obj pos id text submenu help@).
menuInsertSub :: Menu  a -> Int -> Id -> String -> Menu  e -> String ->  IO ()
menuInsertSub _obj pos id text submenu help 
  = withObjectRef "menuInsertSub" _obj $ \cobj__obj -> 
    withStringPtr text $ \cobj_text -> 
    withObjectPtr submenu $ \cobj_submenu -> 
    withStringPtr help $ \cobj_help -> 
    wxMenu_InsertSub cobj__obj  (toCInt pos)  (toCInt id)  cobj_text  cobj_submenu  cobj_help  
foreign import ccall "wxMenu_InsertSub" wxMenu_InsertSub :: Ptr (TMenu a) -> CInt -> CInt -> Ptr (TWxString d) -> Ptr (TMenu e) -> Ptr (TWxString f) -> IO ()

-- | usage: (@menuIsAttached obj@).
menuIsAttached :: Menu  a ->  IO Bool
menuIsAttached _obj 
  = withBoolResult $
    withObjectRef "menuIsAttached" _obj $ \cobj__obj -> 
    wxMenu_IsAttached cobj__obj  
foreign import ccall "wxMenu_IsAttached" wxMenu_IsAttached :: Ptr (TMenu a) -> IO CBool

-- | usage: (@menuIsChecked obj id@).
menuIsChecked :: Menu  a -> Id ->  IO Bool
menuIsChecked _obj id 
  = withBoolResult $
    withObjectRef "menuIsChecked" _obj $ \cobj__obj -> 
    wxMenu_IsChecked cobj__obj  (toCInt id)  
foreign import ccall "wxMenu_IsChecked" wxMenu_IsChecked :: Ptr (TMenu a) -> CInt -> IO CBool

-- | usage: (@menuIsEnabled obj id@).
menuIsEnabled :: Menu  a -> Id ->  IO Bool
menuIsEnabled _obj id 
  = withBoolResult $
    withObjectRef "menuIsEnabled" _obj $ \cobj__obj -> 
    wxMenu_IsEnabled cobj__obj  (toCInt id)  
foreign import ccall "wxMenu_IsEnabled" wxMenu_IsEnabled :: Ptr (TMenu a) -> CInt -> IO CBool

-- | usage: (@menuItemCheck obj check@).
menuItemCheck :: MenuItem  a -> Bool ->  IO ()
menuItemCheck _obj check 
  = withObjectRef "menuItemCheck" _obj $ \cobj__obj -> 
    wxMenuItem_Check cobj__obj  (toCBool check)  
foreign import ccall "wxMenuItem_Check" wxMenuItem_Check :: Ptr (TMenuItem a) -> CBool -> IO ()

-- | usage: (@menuItemCreate@).
menuItemCreate ::  IO (MenuItem  ())
menuItemCreate 
  = withObjectResult $
    wxMenuItem_Create 
foreign import ccall "wxMenuItem_Create" wxMenuItem_Create :: IO (Ptr (TMenuItem ()))

-- | usage: (@menuItemCreateEx id label help itemkind submenu@).
menuItemCreateEx :: Id -> String -> String -> Int -> Menu  e ->  IO (MenuItem  ())
menuItemCreateEx id label help itemkind submenu 
  = withObjectResult $
    withStringPtr label $ \cobj_label -> 
    withStringPtr help $ \cobj_help -> 
    withObjectPtr submenu $ \cobj_submenu -> 
    wxMenuItem_CreateEx (toCInt id)  cobj_label  cobj_help  (toCInt itemkind)  cobj_submenu  
foreign import ccall "wxMenuItem_CreateEx" wxMenuItem_CreateEx :: CInt -> Ptr (TWxString b) -> Ptr (TWxString c) -> CInt -> Ptr (TMenu e) -> IO (Ptr (TMenuItem ()))

-- | usage: (@menuItemCreateSeparator@).
menuItemCreateSeparator ::  IO (MenuItem  ())
menuItemCreateSeparator 
  = withObjectResult $
    wxMenuItem_CreateSeparator 
foreign import ccall "wxMenuItem_CreateSeparator" wxMenuItem_CreateSeparator :: IO (Ptr (TMenuItem ()))

-- | usage: (@menuItemDelete obj@).
menuItemDelete :: MenuItem  a ->  IO ()
menuItemDelete
  = objectDelete


-- | usage: (@menuItemEnable obj enable@).
menuItemEnable :: MenuItem  a -> Bool ->  IO ()
menuItemEnable _obj enable 
  = withObjectRef "menuItemEnable" _obj $ \cobj__obj -> 
    wxMenuItem_Enable cobj__obj  (toCBool enable)  
foreign import ccall "wxMenuItem_Enable" wxMenuItem_Enable :: Ptr (TMenuItem a) -> CBool -> IO ()

-- | usage: (@menuItemGetHelp obj@).
menuItemGetHelp :: MenuItem  a ->  IO (String)
menuItemGetHelp _obj 
  = withManagedStringResult $
    withObjectRef "menuItemGetHelp" _obj $ \cobj__obj -> 
    wxMenuItem_GetHelp cobj__obj  
foreign import ccall "wxMenuItem_GetHelp" wxMenuItem_GetHelp :: Ptr (TMenuItem a) -> IO (Ptr (TWxString ()))

-- | usage: (@menuItemGetId obj@).
menuItemGetId :: MenuItem  a ->  IO Int
menuItemGetId _obj 
  = withIntResult $
    withObjectRef "menuItemGetId" _obj $ \cobj__obj -> 
    wxMenuItem_GetId cobj__obj  
foreign import ccall "wxMenuItem_GetId" wxMenuItem_GetId :: Ptr (TMenuItem a) -> IO CInt

-- | usage: (@menuItemGetItemLabel obj@).
menuItemGetItemLabel :: MenuItem  a ->  IO (String)
menuItemGetItemLabel _obj 
  = withManagedStringResult $
    withObjectRef "menuItemGetItemLabel" _obj $ \cobj__obj -> 
    wxMenuItem_GetItemLabel cobj__obj  
foreign import ccall "wxMenuItem_GetItemLabel" wxMenuItem_GetItemLabel :: Ptr (TMenuItem a) -> IO (Ptr (TWxString ()))

-- | usage: (@menuItemGetItemLabelText obj@).
menuItemGetItemLabelText :: MenuItem  a ->  IO (String)
menuItemGetItemLabelText _obj 
  = withManagedStringResult $
    withObjectRef "menuItemGetItemLabelText" _obj $ \cobj__obj -> 
    wxMenuItem_GetItemLabelText cobj__obj  
foreign import ccall "wxMenuItem_GetItemLabelText" wxMenuItem_GetItemLabelText :: Ptr (TMenuItem a) -> IO (Ptr (TWxString ()))

-- | usage: (@menuItemGetLabelText text@).
menuItemGetLabelText :: String ->  IO (String)
menuItemGetLabelText text 
  = withManagedStringResult $
    withCWString text $ \cstr_text -> 
    wxMenuItem_GetLabelText cstr_text  
foreign import ccall "wxMenuItem_GetLabelText" wxMenuItem_GetLabelText :: CWString -> IO (Ptr (TWxString ()))

-- | usage: (@menuItemGetMenu obj@).
menuItemGetMenu :: MenuItem  a ->  IO (Menu  ())
menuItemGetMenu _obj 
  = withObjectResult $
    withObjectRef "menuItemGetMenu" _obj $ \cobj__obj -> 
    wxMenuItem_GetMenu cobj__obj  
foreign import ccall "wxMenuItem_GetMenu" wxMenuItem_GetMenu :: Ptr (TMenuItem a) -> IO (Ptr (TMenu ()))

-- | usage: (@menuItemGetSubMenu obj@).
menuItemGetSubMenu :: MenuItem  a ->  IO (Menu  ())
menuItemGetSubMenu _obj 
  = withObjectResult $
    withObjectRef "menuItemGetSubMenu" _obj $ \cobj__obj -> 
    wxMenuItem_GetSubMenu cobj__obj  
foreign import ccall "wxMenuItem_GetSubMenu" wxMenuItem_GetSubMenu :: Ptr (TMenuItem a) -> IO (Ptr (TMenu ()))

-- | usage: (@menuItemIsCheckable obj@).
menuItemIsCheckable :: MenuItem  a ->  IO Bool
menuItemIsCheckable _obj 
  = withBoolResult $
    withObjectRef "menuItemIsCheckable" _obj $ \cobj__obj -> 
    wxMenuItem_IsCheckable cobj__obj  
foreign import ccall "wxMenuItem_IsCheckable" wxMenuItem_IsCheckable :: Ptr (TMenuItem a) -> IO CBool

-- | usage: (@menuItemIsChecked obj@).
menuItemIsChecked :: MenuItem  a ->  IO Bool
menuItemIsChecked _obj 
  = withBoolResult $
    withObjectRef "menuItemIsChecked" _obj $ \cobj__obj -> 
    wxMenuItem_IsChecked cobj__obj  
foreign import ccall "wxMenuItem_IsChecked" wxMenuItem_IsChecked :: Ptr (TMenuItem a) -> IO CBool

-- | usage: (@menuItemIsEnabled obj@).
menuItemIsEnabled :: MenuItem  a ->  IO Bool
menuItemIsEnabled _obj 
  = withBoolResult $
    withObjectRef "menuItemIsEnabled" _obj $ \cobj__obj -> 
    wxMenuItem_IsEnabled cobj__obj  
foreign import ccall "wxMenuItem_IsEnabled" wxMenuItem_IsEnabled :: Ptr (TMenuItem a) -> IO CBool

-- | usage: (@menuItemIsSeparator obj@).
menuItemIsSeparator :: MenuItem  a ->  IO Bool
menuItemIsSeparator _obj 
  = withBoolResult $
    withObjectRef "menuItemIsSeparator" _obj $ \cobj__obj -> 
    wxMenuItem_IsSeparator cobj__obj  
foreign import ccall "wxMenuItem_IsSeparator" wxMenuItem_IsSeparator :: Ptr (TMenuItem a) -> IO CBool

-- | usage: (@menuItemIsSubMenu obj@).
menuItemIsSubMenu :: MenuItem  a ->  IO Bool
menuItemIsSubMenu _obj 
  = withBoolResult $
    withObjectRef "menuItemIsSubMenu" _obj $ \cobj__obj -> 
    wxMenuItem_IsSubMenu cobj__obj  
foreign import ccall "wxMenuItem_IsSubMenu" wxMenuItem_IsSubMenu :: Ptr (TMenuItem a) -> IO CBool

-- | usage: (@menuItemSetCheckable obj checkable@).
menuItemSetCheckable :: MenuItem  a -> Bool ->  IO ()
menuItemSetCheckable _obj checkable 
  = withObjectRef "menuItemSetCheckable" _obj $ \cobj__obj -> 
    wxMenuItem_SetCheckable cobj__obj  (toCBool checkable)  
foreign import ccall "wxMenuItem_SetCheckable" wxMenuItem_SetCheckable :: Ptr (TMenuItem a) -> CBool -> IO ()

-- | usage: (@menuItemSetHelp obj str@).
menuItemSetHelp :: MenuItem  a -> String ->  IO ()
menuItemSetHelp _obj str 
  = withObjectRef "menuItemSetHelp" _obj $ \cobj__obj -> 
    withStringPtr str $ \cobj_str -> 
    wxMenuItem_SetHelp cobj__obj  cobj_str  
foreign import ccall "wxMenuItem_SetHelp" wxMenuItem_SetHelp :: Ptr (TMenuItem a) -> Ptr (TWxString b) -> IO ()

-- | usage: (@menuItemSetId obj id@).
menuItemSetId :: MenuItem  a -> Id ->  IO ()
menuItemSetId _obj id 
  = withObjectRef "menuItemSetId" _obj $ \cobj__obj -> 
    wxMenuItem_SetId cobj__obj  (toCInt id)  
foreign import ccall "wxMenuItem_SetId" wxMenuItem_SetId :: Ptr (TMenuItem a) -> CInt -> IO ()

-- | usage: (@menuItemSetItemLabel obj str@).
menuItemSetItemLabel :: MenuItem  a -> String ->  IO ()
menuItemSetItemLabel _obj str 
  = withObjectRef "menuItemSetItemLabel" _obj $ \cobj__obj -> 
    withStringPtr str $ \cobj_str -> 
    wxMenuItem_SetItemLabel cobj__obj  cobj_str  
foreign import ccall "wxMenuItem_SetItemLabel" wxMenuItem_SetItemLabel :: Ptr (TMenuItem a) -> Ptr (TWxString b) -> IO ()

-- | usage: (@menuItemSetSubMenu obj menu@).
menuItemSetSubMenu :: MenuItem  a -> Menu  b ->  IO ()
menuItemSetSubMenu _obj menu 
  = withObjectRef "menuItemSetSubMenu" _obj $ \cobj__obj -> 
    withObjectPtr menu $ \cobj_menu -> 
    wxMenuItem_SetSubMenu cobj__obj  cobj_menu  
foreign import ccall "wxMenuItem_SetSubMenu" wxMenuItem_SetSubMenu :: Ptr (TMenuItem a) -> Ptr (TMenu b) -> IO ()

-- | usage: (@menuPrepend obj id text help isCheckable@).
menuPrepend :: Menu  a -> Id -> String -> String -> Bool ->  IO ()
menuPrepend _obj id text help isCheckable 
  = withObjectRef "menuPrepend" _obj $ \cobj__obj -> 
    withStringPtr text $ \cobj_text -> 
    withStringPtr help $ \cobj_help -> 
    wxMenu_Prepend cobj__obj  (toCInt id)  cobj_text  cobj_help  (toCBool isCheckable)  
foreign import ccall "wxMenu_Prepend" wxMenu_Prepend :: Ptr (TMenu a) -> CInt -> Ptr (TWxString c) -> Ptr (TWxString d) -> CBool -> IO ()

-- | usage: (@menuPrependItem obj itm@).
menuPrependItem :: Menu  a -> MenuItem  b ->  IO ()
menuPrependItem _obj _itm 
  = withObjectRef "menuPrependItem" _obj $ \cobj__obj -> 
    withObjectPtr _itm $ \cobj__itm -> 
    wxMenu_PrependItem cobj__obj  cobj__itm  
foreign import ccall "wxMenu_PrependItem" wxMenu_PrependItem :: Ptr (TMenu a) -> Ptr (TMenuItem b) -> IO ()

-- | usage: (@menuPrependSub obj id text submenu help@).
menuPrependSub :: Menu  a -> Id -> String -> Menu  d -> String ->  IO ()
menuPrependSub _obj id text submenu help 
  = withObjectRef "menuPrependSub" _obj $ \cobj__obj -> 
    withStringPtr text $ \cobj_text -> 
    withObjectPtr submenu $ \cobj_submenu -> 
    withStringPtr help $ \cobj_help -> 
    wxMenu_PrependSub cobj__obj  (toCInt id)  cobj_text  cobj_submenu  cobj_help  
foreign import ccall "wxMenu_PrependSub" wxMenu_PrependSub :: Ptr (TMenu a) -> CInt -> Ptr (TWxString c) -> Ptr (TMenu d) -> Ptr (TWxString e) -> IO ()

-- | usage: (@menuRemoveById obj id itm@).
menuRemoveById :: Menu  a -> Id -> MenuItem  c ->  IO ()
menuRemoveById _obj id _itm 
  = withObjectRef "menuRemoveById" _obj $ \cobj__obj -> 
    withObjectPtr _itm $ \cobj__itm -> 
    wxMenu_RemoveById cobj__obj  (toCInt id)  cobj__itm  
foreign import ccall "wxMenu_RemoveById" wxMenu_RemoveById :: Ptr (TMenu a) -> CInt -> Ptr (TMenuItem c) -> IO ()

-- | usage: (@menuRemoveByItem obj item@).
menuRemoveByItem :: Menu  a -> Ptr  b ->  IO ()
menuRemoveByItem _obj item 
  = withObjectRef "menuRemoveByItem" _obj $ \cobj__obj -> 
    wxMenu_RemoveByItem cobj__obj  item  
foreign import ccall "wxMenu_RemoveByItem" wxMenu_RemoveByItem :: Ptr (TMenu a) -> Ptr  b -> IO ()

-- | usage: (@menuSetClientData obj clientData@).
menuSetClientData :: Menu  a -> ClientData  b ->  IO ()
menuSetClientData _obj clientData 
  = withObjectRef "menuSetClientData" _obj $ \cobj__obj -> 
    withObjectPtr clientData $ \cobj_clientData -> 
    wxMenu_SetClientData cobj__obj  cobj_clientData  
foreign import ccall "wxMenu_SetClientData" wxMenu_SetClientData :: Ptr (TMenu a) -> Ptr (TClientData b) -> IO ()

-- | usage: (@menuSetEventHandler obj handler@).
menuSetEventHandler :: Menu  a -> EvtHandler  b ->  IO ()
menuSetEventHandler _obj handler 
  = withObjectRef "menuSetEventHandler" _obj $ \cobj__obj -> 
    withObjectPtr handler $ \cobj_handler -> 
    wxMenu_SetEventHandler cobj__obj  cobj_handler  
foreign import ccall "wxMenu_SetEventHandler" wxMenu_SetEventHandler :: Ptr (TMenu a) -> Ptr (TEvtHandler b) -> IO ()

-- | usage: (@menuSetHelpString obj id helpString@).
menuSetHelpString :: Menu  a -> Id -> String ->  IO ()
menuSetHelpString _obj id helpString 
  = withObjectRef "menuSetHelpString" _obj $ \cobj__obj -> 
    withStringPtr helpString $ \cobj_helpString -> 
    wxMenu_SetHelpString cobj__obj  (toCInt id)  cobj_helpString  
foreign import ccall "wxMenu_SetHelpString" wxMenu_SetHelpString :: Ptr (TMenu a) -> CInt -> Ptr (TWxString c) -> IO ()

-- | usage: (@menuSetInvokingWindow obj win@).
menuSetInvokingWindow :: Menu  a -> Window  b ->  IO ()
menuSetInvokingWindow _obj win 
  = withObjectRef "menuSetInvokingWindow" _obj $ \cobj__obj -> 
    withObjectPtr win $ \cobj_win -> 
    wxMenu_SetInvokingWindow cobj__obj  cobj_win  
foreign import ccall "wxMenu_SetInvokingWindow" wxMenu_SetInvokingWindow :: Ptr (TMenu a) -> Ptr (TWindow b) -> IO ()

-- | usage: (@menuSetLabel obj id label@).
menuSetLabel :: Menu  a -> Id -> String ->  IO ()
menuSetLabel _obj id label 
  = withObjectRef "menuSetLabel" _obj $ \cobj__obj -> 
    withStringPtr label $ \cobj_label -> 
    wxMenu_SetLabel cobj__obj  (toCInt id)  cobj_label  
foreign import ccall "wxMenu_SetLabel" wxMenu_SetLabel :: Ptr (TMenu a) -> CInt -> Ptr (TWxString c) -> IO ()

-- | usage: (@menuSetParent obj parent@).
menuSetParent :: Menu  a -> Window  b ->  IO ()
menuSetParent _obj parent 
  = withObjectRef "menuSetParent" _obj $ \cobj__obj -> 
    withObjectPtr parent $ \cobj_parent -> 
    wxMenu_SetParent cobj__obj  cobj_parent  
foreign import ccall "wxMenu_SetParent" wxMenu_SetParent :: Ptr (TMenu a) -> Ptr (TWindow b) -> IO ()

-- | usage: (@menuSetTitle obj title@).
menuSetTitle :: Menu  a -> String ->  IO ()
menuSetTitle _obj title 
  = withObjectRef "menuSetTitle" _obj $ \cobj__obj -> 
    withStringPtr title $ \cobj_title -> 
    wxMenu_SetTitle cobj__obj  cobj_title  
foreign import ccall "wxMenu_SetTitle" wxMenu_SetTitle :: Ptr (TMenu a) -> Ptr (TWxString b) -> IO ()

-- | usage: (@menuUpdateUI obj source@).
menuUpdateUI :: Menu  a -> Ptr  b ->  IO ()
menuUpdateUI _obj source 
  = withObjectRef "menuUpdateUI" _obj $ \cobj__obj -> 
    wxMenu_UpdateUI cobj__obj  source  
foreign import ccall "wxMenu_UpdateUI" wxMenu_UpdateUI :: Ptr (TMenu a) -> Ptr  b -> IO ()

-- | usage: (@messageDialogCreate prt msg cap stl@).
messageDialogCreate :: Window  a -> String -> String -> Style ->  IO (MessageDialog  ())
messageDialogCreate _prt _msg _cap _stl 
  = withObjectResult $
    withObjectPtr _prt $ \cobj__prt -> 
    withStringPtr _msg $ \cobj__msg -> 
    withStringPtr _cap $ \cobj__cap -> 
    wxMessageDialog_Create cobj__prt  cobj__msg  cobj__cap  (toCInt _stl)  
foreign import ccall "wxMessageDialog_Create" wxMessageDialog_Create :: Ptr (TWindow a) -> Ptr (TWxString b) -> Ptr (TWxString c) -> CInt -> IO (Ptr (TMessageDialog ()))

-- | usage: (@messageDialogDelete obj@).
messageDialogDelete :: MessageDialog  a ->  IO ()
messageDialogDelete
  = objectDelete


-- | usage: (@messageDialogShowModal obj@).
messageDialogShowModal :: MessageDialog  a ->  IO Int
messageDialogShowModal _obj 
  = withIntResult $
    withObjectRef "messageDialogShowModal" _obj $ \cobj__obj -> 
    wxMessageDialog_ShowModal cobj__obj  
foreign import ccall "wxMessageDialog_ShowModal" wxMessageDialog_ShowModal :: Ptr (TMessageDialog a) -> IO CInt

-- | usage: (@metafileCreate file@).
metafileCreate :: String ->  IO (Metafile  ())
metafileCreate _file 
  = withObjectResult $
    withStringPtr _file $ \cobj__file -> 
    wxMetafile_Create cobj__file  
foreign import ccall "wxMetafile_Create" wxMetafile_Create :: Ptr (TWxString a) -> IO (Ptr (TMetafile ()))

-- | usage: (@metafileDCClose obj@).
metafileDCClose :: MetafileDC  a ->  IO (Ptr  ())
metafileDCClose _obj 
  = withObjectRef "metafileDCClose" _obj $ \cobj__obj -> 
    wxMetafileDC_Close cobj__obj  
foreign import ccall "wxMetafileDC_Close" wxMetafileDC_Close :: Ptr (TMetafileDC a) -> IO (Ptr  ())

-- | usage: (@metafileDCCreate file@).
metafileDCCreate :: String ->  IO (MetafileDC  ())
metafileDCCreate _file 
  = withObjectResult $
    withStringPtr _file $ \cobj__file -> 
    wxMetafileDC_Create cobj__file  
foreign import ccall "wxMetafileDC_Create" wxMetafileDC_Create :: Ptr (TWxString a) -> IO (Ptr (TMetafileDC ()))

-- | usage: (@metafileDCDelete obj@).
metafileDCDelete :: MetafileDC  a ->  IO ()
metafileDCDelete
  = objectDelete


-- | usage: (@metafileDelete obj@).
metafileDelete :: Metafile  a ->  IO ()
metafileDelete
  = objectDelete


-- | usage: (@metafileIsOk obj@).
metafileIsOk :: Metafile  a ->  IO Bool
metafileIsOk _obj 
  = withBoolResult $
    withObjectRef "metafileIsOk" _obj $ \cobj__obj -> 
    wxMetafile_IsOk cobj__obj  
foreign import ccall "wxMetafile_IsOk" wxMetafile_IsOk :: Ptr (TMetafile a) -> IO CBool

-- | usage: (@metafilePlay obj dc@).
metafilePlay :: Metafile  a -> DC  b ->  IO Bool
metafilePlay _obj _dc 
  = withBoolResult $
    withObjectRef "metafilePlay" _obj $ \cobj__obj -> 
    withObjectPtr _dc $ \cobj__dc -> 
    wxMetafile_Play cobj__obj  cobj__dc  
foreign import ccall "wxMetafile_Play" wxMetafile_Play :: Ptr (TMetafile a) -> Ptr (TDC b) -> IO CBool

-- | usage: (@metafileSetClipboard obj widthheight@).
metafileSetClipboard :: Metafile  a -> Size ->  IO Bool
metafileSetClipboard _obj widthheight 
  = withBoolResult $
    withObjectRef "metafileSetClipboard" _obj $ \cobj__obj -> 
    wxMetafile_SetClipboard cobj__obj  (toCIntSizeW widthheight) (toCIntSizeH widthheight)  
foreign import ccall "wxMetafile_SetClipboard" wxMetafile_SetClipboard :: Ptr (TMetafile a) -> CInt -> CInt -> IO CBool

-- | usage: (@mimeTypesManagerAddFallbacks obj types@).
mimeTypesManagerAddFallbacks :: MimeTypesManager  a -> Ptr  b ->  IO ()
mimeTypesManagerAddFallbacks _obj _types 
  = withObjectRef "mimeTypesManagerAddFallbacks" _obj $ \cobj__obj -> 
    wxMimeTypesManager_AddFallbacks cobj__obj  _types  
foreign import ccall "wxMimeTypesManager_AddFallbacks" wxMimeTypesManager_AddFallbacks :: Ptr (TMimeTypesManager a) -> Ptr  b -> IO ()

-- | usage: (@mimeTypesManagerCreate@).
mimeTypesManagerCreate ::  IO (MimeTypesManager  ())
mimeTypesManagerCreate 
  = withObjectResult $
    wxMimeTypesManager_Create 
foreign import ccall "wxMimeTypesManager_Create" wxMimeTypesManager_Create :: IO (Ptr (TMimeTypesManager ()))

-- | usage: (@mimeTypesManagerEnumAllFileTypes obj lst@).
mimeTypesManagerEnumAllFileTypes :: MimeTypesManager  a -> List  b ->  IO Int
mimeTypesManagerEnumAllFileTypes _obj _lst 
  = withIntResult $
    withObjectRef "mimeTypesManagerEnumAllFileTypes" _obj $ \cobj__obj -> 
    withObjectPtr _lst $ \cobj__lst -> 
    wxMimeTypesManager_EnumAllFileTypes cobj__obj  cobj__lst  
foreign import ccall "wxMimeTypesManager_EnumAllFileTypes" wxMimeTypesManager_EnumAllFileTypes :: Ptr (TMimeTypesManager a) -> Ptr (TList b) -> IO CInt

-- | usage: (@mimeTypesManagerGetFileTypeFromExtension obj ext@).
mimeTypesManagerGetFileTypeFromExtension :: MimeTypesManager  a -> String ->  IO (FileType  ())
mimeTypesManagerGetFileTypeFromExtension _obj _ext 
  = withObjectResult $
    withObjectRef "mimeTypesManagerGetFileTypeFromExtension" _obj $ \cobj__obj -> 
    withStringPtr _ext $ \cobj__ext -> 
    wxMimeTypesManager_GetFileTypeFromExtension cobj__obj  cobj__ext  
foreign import ccall "wxMimeTypesManager_GetFileTypeFromExtension" wxMimeTypesManager_GetFileTypeFromExtension :: Ptr (TMimeTypesManager a) -> Ptr (TWxString b) -> IO (Ptr (TFileType ()))

-- | usage: (@mimeTypesManagerGetFileTypeFromMimeType obj name@).
mimeTypesManagerGetFileTypeFromMimeType :: MimeTypesManager  a -> String ->  IO (FileType  ())
mimeTypesManagerGetFileTypeFromMimeType _obj _name 
  = withObjectResult $
    withObjectRef "mimeTypesManagerGetFileTypeFromMimeType" _obj $ \cobj__obj -> 
    withStringPtr _name $ \cobj__name -> 
    wxMimeTypesManager_GetFileTypeFromMimeType cobj__obj  cobj__name  
foreign import ccall "wxMimeTypesManager_GetFileTypeFromMimeType" wxMimeTypesManager_GetFileTypeFromMimeType :: Ptr (TMimeTypesManager a) -> Ptr (TWxString b) -> IO (Ptr (TFileType ()))

-- | usage: (@mimeTypesManagerIsOfType obj wxtype wildcard@).
mimeTypesManagerIsOfType :: MimeTypesManager  a -> String -> String ->  IO Bool
mimeTypesManagerIsOfType _obj _type _wildcard 
  = withBoolResult $
    withObjectRef "mimeTypesManagerIsOfType" _obj $ \cobj__obj -> 
    withStringPtr _type $ \cobj__type -> 
    withStringPtr _wildcard $ \cobj__wildcard -> 
    wxMimeTypesManager_IsOfType cobj__obj  cobj__type  cobj__wildcard  
foreign import ccall "wxMimeTypesManager_IsOfType" wxMimeTypesManager_IsOfType :: Ptr (TMimeTypesManager a) -> Ptr (TWxString b) -> Ptr (TWxString c) -> IO CBool

-- | usage: (@miniFrameCreate prt id txt lfttopwdthgt stl@).
miniFrameCreate :: Window  a -> Id -> String -> Rect -> Style ->  IO (MiniFrame  ())
miniFrameCreate _prt _id _txt _lfttopwdthgt _stl 
  = withObjectResult $
    withObjectPtr _prt $ \cobj__prt -> 
    withStringPtr _txt $ \cobj__txt -> 
    wxMiniFrame_Create cobj__prt  (toCInt _id)  cobj__txt  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
foreign import ccall "wxMiniFrame_Create" wxMiniFrame_Create :: Ptr (TWindow a) -> CInt -> Ptr (TWxString c) -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TMiniFrame ()))

-- | usage: (@mirrorDCCreate dc@).
mirrorDCCreate :: DC  a ->  IO (MirrorDC  ())
mirrorDCCreate dc 
  = withObjectResult $
    withObjectPtr dc $ \cobj_dc -> 
    wxMirrorDC_Create cobj_dc  
foreign import ccall "wxMirrorDC_Create" wxMirrorDC_Create :: Ptr (TDC a) -> IO (Ptr (TMirrorDC ()))

-- | usage: (@mirrorDCDelete obj@).
mirrorDCDelete :: MemoryDC  a ->  IO ()
mirrorDCDelete _obj 
  = withObjectPtr _obj $ \cobj__obj -> 
    wxMirrorDC_Delete cobj__obj  
foreign import ccall "wxMirrorDC_Delete" wxMirrorDC_Delete :: Ptr (TMemoryDC a) -> IO ()

-- | usage: (@mouseEventAltDown obj@).
mouseEventAltDown :: MouseEvent  a ->  IO Bool
mouseEventAltDown _obj 
  = withBoolResult $
    withObjectRef "mouseEventAltDown" _obj $ \cobj__obj -> 
    wxMouseEvent_AltDown cobj__obj  
foreign import ccall "wxMouseEvent_AltDown" wxMouseEvent_AltDown :: Ptr (TMouseEvent a) -> IO CBool

-- | usage: (@mouseEventButton obj but@).
mouseEventButton :: MouseEvent  a -> Int ->  IO Bool
mouseEventButton _obj but 
  = withBoolResult $
    withObjectRef "mouseEventButton" _obj $ \cobj__obj -> 
    wxMouseEvent_Button cobj__obj  (toCInt but)  
foreign import ccall "wxMouseEvent_Button" wxMouseEvent_Button :: Ptr (TMouseEvent a) -> CInt -> IO CBool

-- | usage: (@mouseEventButtonDClick obj but@).
mouseEventButtonDClick :: MouseEvent  a -> Int ->  IO Bool
mouseEventButtonDClick _obj but 
  = withBoolResult $
    withObjectRef "mouseEventButtonDClick" _obj $ \cobj__obj -> 
    wxMouseEvent_ButtonDClick cobj__obj  (toCInt but)  
foreign import ccall "wxMouseEvent_ButtonDClick" wxMouseEvent_ButtonDClick :: Ptr (TMouseEvent a) -> CInt -> IO CBool

-- | usage: (@mouseEventButtonDown obj but@).
mouseEventButtonDown :: MouseEvent  a -> Int ->  IO Bool
mouseEventButtonDown _obj but 
  = withBoolResult $
    withObjectRef "mouseEventButtonDown" _obj $ \cobj__obj -> 
    wxMouseEvent_ButtonDown cobj__obj  (toCInt but)  
foreign import ccall "wxMouseEvent_ButtonDown" wxMouseEvent_ButtonDown :: Ptr (TMouseEvent a) -> CInt -> IO CBool

-- | usage: (@mouseEventButtonIsDown obj but@).
mouseEventButtonIsDown :: MouseEvent  a -> Int ->  IO Bool
mouseEventButtonIsDown _obj but 
  = withBoolResult $
    withObjectRef "mouseEventButtonIsDown" _obj $ \cobj__obj -> 
    wxMouseEvent_ButtonIsDown cobj__obj  (toCInt but)  
foreign import ccall "wxMouseEvent_ButtonIsDown" wxMouseEvent_ButtonIsDown :: Ptr (TMouseEvent a) -> CInt -> IO CBool

-- | usage: (@mouseEventButtonUp obj but@).
mouseEventButtonUp :: MouseEvent  a -> Int ->  IO Bool
mouseEventButtonUp _obj but 
  = withBoolResult $
    withObjectRef "mouseEventButtonUp" _obj $ \cobj__obj -> 
    wxMouseEvent_ButtonUp cobj__obj  (toCInt but)  
foreign import ccall "wxMouseEvent_ButtonUp" wxMouseEvent_ButtonUp :: Ptr (TMouseEvent a) -> CInt -> IO CBool

-- | usage: (@mouseEventControlDown obj@).
mouseEventControlDown :: MouseEvent  a ->  IO Bool
mouseEventControlDown _obj 
  = withBoolResult $
    withObjectRef "mouseEventControlDown" _obj $ \cobj__obj -> 
    wxMouseEvent_ControlDown cobj__obj  
foreign import ccall "wxMouseEvent_ControlDown" wxMouseEvent_ControlDown :: Ptr (TMouseEvent a) -> IO CBool

-- | usage: (@mouseEventCopyObject obj objectdest@).
mouseEventCopyObject :: MouseEvent  a -> Ptr  b ->  IO ()
mouseEventCopyObject _obj objectdest 
  = withObjectRef "mouseEventCopyObject" _obj $ \cobj__obj -> 
    wxMouseEvent_CopyObject cobj__obj  objectdest  
foreign import ccall "wxMouseEvent_CopyObject" wxMouseEvent_CopyObject :: Ptr (TMouseEvent a) -> Ptr  b -> IO ()

-- | usage: (@mouseEventDragging obj@).
mouseEventDragging :: MouseEvent  a ->  IO Bool
mouseEventDragging _obj 
  = withBoolResult $
    withObjectRef "mouseEventDragging" _obj $ \cobj__obj -> 
    wxMouseEvent_Dragging cobj__obj  
foreign import ccall "wxMouseEvent_Dragging" wxMouseEvent_Dragging :: Ptr (TMouseEvent a) -> IO CBool

-- | usage: (@mouseEventEntering obj@).
mouseEventEntering :: MouseEvent  a ->  IO Bool
mouseEventEntering _obj 
  = withBoolResult $
    withObjectRef "mouseEventEntering" _obj $ \cobj__obj -> 
    wxMouseEvent_Entering cobj__obj  
foreign import ccall "wxMouseEvent_Entering" wxMouseEvent_Entering :: Ptr (TMouseEvent a) -> IO CBool

-- | usage: (@mouseEventGetButton obj@).
mouseEventGetButton :: MouseEvent  a ->  IO Int
mouseEventGetButton _obj 
  = withIntResult $
    withObjectRef "mouseEventGetButton" _obj $ \cobj__obj -> 
    wxMouseEvent_GetButton cobj__obj  
foreign import ccall "wxMouseEvent_GetButton" wxMouseEvent_GetButton :: Ptr (TMouseEvent a) -> IO CInt

-- | usage: (@mouseEventGetLogicalPosition obj dc@).
mouseEventGetLogicalPosition :: MouseEvent  a -> DC  b ->  IO (Point)
mouseEventGetLogicalPosition _obj dc 
  = withWxPointResult $
    withObjectRef "mouseEventGetLogicalPosition" _obj $ \cobj__obj -> 
    withObjectPtr dc $ \cobj_dc -> 
    wxMouseEvent_GetLogicalPosition cobj__obj  cobj_dc  
foreign import ccall "wxMouseEvent_GetLogicalPosition" wxMouseEvent_GetLogicalPosition :: Ptr (TMouseEvent a) -> Ptr (TDC b) -> IO (Ptr (TWxPoint ()))

-- | usage: (@mouseEventGetPosition obj@).
mouseEventGetPosition :: MouseEvent  a ->  IO (Point)
mouseEventGetPosition _obj 
  = withWxPointResult $
    withObjectRef "mouseEventGetPosition" _obj $ \cobj__obj -> 
    wxMouseEvent_GetPosition cobj__obj  
foreign import ccall "wxMouseEvent_GetPosition" wxMouseEvent_GetPosition :: Ptr (TMouseEvent a) -> IO (Ptr (TWxPoint ()))

-- | usage: (@mouseEventGetWheelDelta obj@).
mouseEventGetWheelDelta :: MouseEvent  a ->  IO Int
mouseEventGetWheelDelta _obj 
  = withIntResult $
    withObjectRef "mouseEventGetWheelDelta" _obj $ \cobj__obj -> 
    wxMouseEvent_GetWheelDelta cobj__obj  
foreign import ccall "wxMouseEvent_GetWheelDelta" wxMouseEvent_GetWheelDelta :: Ptr (TMouseEvent a) -> IO CInt

-- | usage: (@mouseEventGetWheelRotation obj@).
mouseEventGetWheelRotation :: MouseEvent  a ->  IO Int
mouseEventGetWheelRotation _obj 
  = withIntResult $
    withObjectRef "mouseEventGetWheelRotation" _obj $ \cobj__obj -> 
    wxMouseEvent_GetWheelRotation cobj__obj  
foreign import ccall "wxMouseEvent_GetWheelRotation" wxMouseEvent_GetWheelRotation :: Ptr (TMouseEvent a) -> IO CInt

-- | usage: (@mouseEventGetX obj@).
mouseEventGetX :: MouseEvent  a ->  IO Int
mouseEventGetX _obj 
  = withIntResult $
    withObjectRef "mouseEventGetX" _obj $ \cobj__obj -> 
    wxMouseEvent_GetX cobj__obj  
foreign import ccall "wxMouseEvent_GetX" wxMouseEvent_GetX :: Ptr (TMouseEvent a) -> IO CInt

-- | usage: (@mouseEventGetY obj@).
mouseEventGetY :: MouseEvent  a ->  IO Int
mouseEventGetY _obj 
  = withIntResult $
    withObjectRef "mouseEventGetY" _obj $ \cobj__obj -> 
    wxMouseEvent_GetY cobj__obj  
foreign import ccall "wxMouseEvent_GetY" wxMouseEvent_GetY :: Ptr (TMouseEvent a) -> IO CInt

-- | usage: (@mouseEventIsButton obj@).
mouseEventIsButton :: MouseEvent  a ->  IO Bool
mouseEventIsButton _obj 
  = withBoolResult $
    withObjectRef "mouseEventIsButton" _obj $ \cobj__obj -> 
    wxMouseEvent_IsButton cobj__obj  
foreign import ccall "wxMouseEvent_IsButton" wxMouseEvent_IsButton :: Ptr (TMouseEvent a) -> IO CBool

-- | usage: (@mouseEventLeaving obj@).
mouseEventLeaving :: MouseEvent  a ->  IO Bool
mouseEventLeaving _obj 
  = withBoolResult $
    withObjectRef "mouseEventLeaving" _obj $ \cobj__obj -> 
    wxMouseEvent_Leaving cobj__obj  
foreign import ccall "wxMouseEvent_Leaving" wxMouseEvent_Leaving :: Ptr (TMouseEvent a) -> IO CBool

-- | usage: (@mouseEventLeftDClick obj@).
mouseEventLeftDClick :: MouseEvent  a ->  IO Bool
mouseEventLeftDClick _obj 
  = withBoolResult $
    withObjectRef "mouseEventLeftDClick" _obj $ \cobj__obj -> 
    wxMouseEvent_LeftDClick cobj__obj  
foreign import ccall "wxMouseEvent_LeftDClick" wxMouseEvent_LeftDClick :: Ptr (TMouseEvent a) -> IO CBool

-- | usage: (@mouseEventLeftDown obj@).
mouseEventLeftDown :: MouseEvent  a ->  IO Bool
mouseEventLeftDown _obj 
  = withBoolResult $
    withObjectRef "mouseEventLeftDown" _obj $ \cobj__obj -> 
    wxMouseEvent_LeftDown cobj__obj  
foreign import ccall "wxMouseEvent_LeftDown" wxMouseEvent_LeftDown :: Ptr (TMouseEvent a) -> IO CBool

-- | usage: (@mouseEventLeftIsDown obj@).
mouseEventLeftIsDown :: MouseEvent  a ->  IO Bool
mouseEventLeftIsDown _obj 
  = withBoolResult $
    withObjectRef "mouseEventLeftIsDown" _obj $ \cobj__obj -> 
    wxMouseEvent_LeftIsDown cobj__obj  
foreign import ccall "wxMouseEvent_LeftIsDown" wxMouseEvent_LeftIsDown :: Ptr (TMouseEvent a) -> IO CBool

-- | usage: (@mouseEventLeftUp obj@).
mouseEventLeftUp :: MouseEvent  a ->  IO Bool
mouseEventLeftUp _obj 
  = withBoolResult $
    withObjectRef "mouseEventLeftUp" _obj $ \cobj__obj -> 
    wxMouseEvent_LeftUp cobj__obj  
foreign import ccall "wxMouseEvent_LeftUp" wxMouseEvent_LeftUp :: Ptr (TMouseEvent a) -> IO CBool

-- | usage: (@mouseEventMetaDown obj@).
mouseEventMetaDown :: MouseEvent  a ->  IO Bool
mouseEventMetaDown _obj 
  = withBoolResult $
    withObjectRef "mouseEventMetaDown" _obj $ \cobj__obj -> 
    wxMouseEvent_MetaDown cobj__obj  
foreign import ccall "wxMouseEvent_MetaDown" wxMouseEvent_MetaDown :: Ptr (TMouseEvent a) -> IO CBool

-- | usage: (@mouseEventMiddleDClick obj@).
mouseEventMiddleDClick :: MouseEvent  a ->  IO Bool
mouseEventMiddleDClick _obj 
  = withBoolResult $
    withObjectRef "mouseEventMiddleDClick" _obj $ \cobj__obj -> 
    wxMouseEvent_MiddleDClick cobj__obj  
foreign import ccall "wxMouseEvent_MiddleDClick" wxMouseEvent_MiddleDClick :: Ptr (TMouseEvent a) -> IO CBool

-- | usage: (@mouseEventMiddleDown obj@).
mouseEventMiddleDown :: MouseEvent  a ->  IO Bool
mouseEventMiddleDown _obj 
  = withBoolResult $
    withObjectRef "mouseEventMiddleDown" _obj $ \cobj__obj -> 
    wxMouseEvent_MiddleDown cobj__obj  
foreign import ccall "wxMouseEvent_MiddleDown" wxMouseEvent_MiddleDown :: Ptr (TMouseEvent a) -> IO CBool

-- | usage: (@mouseEventMiddleIsDown obj@).
mouseEventMiddleIsDown :: MouseEvent  a ->  IO Bool
mouseEventMiddleIsDown _obj 
  = withBoolResult $
    withObjectRef "mouseEventMiddleIsDown" _obj $ \cobj__obj -> 
    wxMouseEvent_MiddleIsDown cobj__obj  
foreign import ccall "wxMouseEvent_MiddleIsDown" wxMouseEvent_MiddleIsDown :: Ptr (TMouseEvent a) -> IO CBool

-- | usage: (@mouseEventMiddleUp obj@).
mouseEventMiddleUp :: MouseEvent  a ->  IO Bool
mouseEventMiddleUp _obj 
  = withBoolResult $
    withObjectRef "mouseEventMiddleUp" _obj $ \cobj__obj -> 
    wxMouseEvent_MiddleUp cobj__obj  
foreign import ccall "wxMouseEvent_MiddleUp" wxMouseEvent_MiddleUp :: Ptr (TMouseEvent a) -> IO CBool

-- | usage: (@mouseEventMoving obj@).
mouseEventMoving :: MouseEvent  a ->  IO Bool
mouseEventMoving _obj 
  = withBoolResult $
    withObjectRef "mouseEventMoving" _obj $ \cobj__obj -> 
    wxMouseEvent_Moving cobj__obj  
foreign import ccall "wxMouseEvent_Moving" wxMouseEvent_Moving :: Ptr (TMouseEvent a) -> IO CBool

-- | usage: (@mouseEventRightDClick obj@).
mouseEventRightDClick :: MouseEvent  a ->  IO Bool
mouseEventRightDClick _obj 
  = withBoolResult $
    withObjectRef "mouseEventRightDClick" _obj $ \cobj__obj -> 
    wxMouseEvent_RightDClick cobj__obj  
foreign import ccall "wxMouseEvent_RightDClick" wxMouseEvent_RightDClick :: Ptr (TMouseEvent a) -> IO CBool

-- | usage: (@mouseEventRightDown obj@).
mouseEventRightDown :: MouseEvent  a ->  IO Bool
mouseEventRightDown _obj 
  = withBoolResult $
    withObjectRef "mouseEventRightDown" _obj $ \cobj__obj -> 
    wxMouseEvent_RightDown cobj__obj  
foreign import ccall "wxMouseEvent_RightDown" wxMouseEvent_RightDown :: Ptr (TMouseEvent a) -> IO CBool

-- | usage: (@mouseEventRightIsDown obj@).
mouseEventRightIsDown :: MouseEvent  a ->  IO Bool
mouseEventRightIsDown _obj 
  = withBoolResult $
    withObjectRef "mouseEventRightIsDown" _obj $ \cobj__obj -> 
    wxMouseEvent_RightIsDown cobj__obj  
foreign import ccall "wxMouseEvent_RightIsDown" wxMouseEvent_RightIsDown :: Ptr (TMouseEvent a) -> IO CBool

-- | usage: (@mouseEventRightUp obj@).
mouseEventRightUp :: MouseEvent  a ->  IO Bool
mouseEventRightUp _obj 
  = withBoolResult $
    withObjectRef "mouseEventRightUp" _obj $ \cobj__obj -> 
    wxMouseEvent_RightUp cobj__obj  
foreign import ccall "wxMouseEvent_RightUp" wxMouseEvent_RightUp :: Ptr (TMouseEvent a) -> IO CBool

-- | usage: (@mouseEventShiftDown obj@).
mouseEventShiftDown :: MouseEvent  a ->  IO Bool
mouseEventShiftDown _obj 
  = withBoolResult $
    withObjectRef "mouseEventShiftDown" _obj $ \cobj__obj -> 
    wxMouseEvent_ShiftDown cobj__obj  
foreign import ccall "wxMouseEvent_ShiftDown" wxMouseEvent_ShiftDown :: Ptr (TMouseEvent a) -> IO CBool

-- | usage: (@moveEventCopyObject obj obj@).
moveEventCopyObject :: MoveEvent  a -> Ptr  b ->  IO ()
moveEventCopyObject _obj obj 
  = withObjectRef "moveEventCopyObject" _obj $ \cobj__obj -> 
    wxMoveEvent_CopyObject cobj__obj  obj  
foreign import ccall "wxMoveEvent_CopyObject" wxMoveEvent_CopyObject :: Ptr (TMoveEvent a) -> Ptr  b -> IO ()

-- | usage: (@moveEventGetPosition obj@).
moveEventGetPosition :: MoveEvent  a ->  IO (Point)
moveEventGetPosition _obj 
  = withWxPointResult $
    withObjectRef "moveEventGetPosition" _obj $ \cobj__obj -> 
    wxMoveEvent_GetPosition cobj__obj  
foreign import ccall "wxMoveEvent_GetPosition" wxMoveEvent_GetPosition :: Ptr (TMoveEvent a) -> IO (Ptr (TWxPoint ()))

-- | usage: (@navigationKeyEventGetCurrentFocus obj@).
navigationKeyEventGetCurrentFocus :: NavigationKeyEvent  a ->  IO (Ptr  ())
navigationKeyEventGetCurrentFocus _obj 
  = withObjectRef "navigationKeyEventGetCurrentFocus" _obj $ \cobj__obj -> 
    wxNavigationKeyEvent_GetCurrentFocus cobj__obj  
foreign import ccall "wxNavigationKeyEvent_GetCurrentFocus" wxNavigationKeyEvent_GetCurrentFocus :: Ptr (TNavigationKeyEvent a) -> IO (Ptr  ())

-- | usage: (@navigationKeyEventGetDirection obj@).
navigationKeyEventGetDirection :: NavigationKeyEvent  a ->  IO Bool
navigationKeyEventGetDirection _obj 
  = withBoolResult $
    withObjectRef "navigationKeyEventGetDirection" _obj $ \cobj__obj -> 
    wxNavigationKeyEvent_GetDirection cobj__obj  
foreign import ccall "wxNavigationKeyEvent_GetDirection" wxNavigationKeyEvent_GetDirection :: Ptr (TNavigationKeyEvent a) -> IO CBool

-- | usage: (@navigationKeyEventIsWindowChange obj@).
navigationKeyEventIsWindowChange :: NavigationKeyEvent  a ->  IO Bool
navigationKeyEventIsWindowChange _obj 
  = withBoolResult $
    withObjectRef "navigationKeyEventIsWindowChange" _obj $ \cobj__obj -> 
    wxNavigationKeyEvent_IsWindowChange cobj__obj  
foreign import ccall "wxNavigationKeyEvent_IsWindowChange" wxNavigationKeyEvent_IsWindowChange :: Ptr (TNavigationKeyEvent a) -> IO CBool

-- | usage: (@navigationKeyEventSetCurrentFocus obj win@).
navigationKeyEventSetCurrentFocus :: NavigationKeyEvent  a -> Window  b ->  IO ()
navigationKeyEventSetCurrentFocus _obj win 
  = withObjectRef "navigationKeyEventSetCurrentFocus" _obj $ \cobj__obj -> 
    withObjectPtr win $ \cobj_win -> 
    wxNavigationKeyEvent_SetCurrentFocus cobj__obj  cobj_win  
foreign import ccall "wxNavigationKeyEvent_SetCurrentFocus" wxNavigationKeyEvent_SetCurrentFocus :: Ptr (TNavigationKeyEvent a) -> Ptr (TWindow b) -> IO ()

-- | usage: (@navigationKeyEventSetDirection obj bForward@).
navigationKeyEventSetDirection :: NavigationKeyEvent  a -> Bool ->  IO ()
navigationKeyEventSetDirection _obj bForward 
  = withObjectRef "navigationKeyEventSetDirection" _obj $ \cobj__obj -> 
    wxNavigationKeyEvent_SetDirection cobj__obj  (toCBool bForward)  
foreign import ccall "wxNavigationKeyEvent_SetDirection" wxNavigationKeyEvent_SetDirection :: Ptr (TNavigationKeyEvent a) -> CBool -> IO ()

-- | usage: (@navigationKeyEventSetWindowChange obj bIs@).
navigationKeyEventSetWindowChange :: NavigationKeyEvent  a -> Bool ->  IO ()
navigationKeyEventSetWindowChange _obj bIs 
  = withObjectRef "navigationKeyEventSetWindowChange" _obj $ \cobj__obj -> 
    wxNavigationKeyEvent_SetWindowChange cobj__obj  (toCBool bIs)  
foreign import ccall "wxNavigationKeyEvent_SetWindowChange" wxNavigationKeyEvent_SetWindowChange :: Ptr (TNavigationKeyEvent a) -> CBool -> IO ()

-- | usage: (@navigationKeyEventShouldPropagate obj@).
navigationKeyEventShouldPropagate :: NavigationKeyEvent  a ->  IO Int
navigationKeyEventShouldPropagate _obj 
  = withIntResult $
    withObjectRef "navigationKeyEventShouldPropagate" _obj $ \cobj__obj -> 
    wxNavigationKeyEvent_ShouldPropagate cobj__obj  
foreign import ccall "wxNavigationKeyEvent_ShouldPropagate" wxNavigationKeyEvent_ShouldPropagate :: Ptr (TNavigationKeyEvent a) -> IO CInt

-- | usage: (@notebookAddPage obj pPage strText bSelect imageId@).
notebookAddPage :: Notebook  a -> Window  b -> String -> Bool -> Int ->  IO Bool
notebookAddPage _obj pPage strText bSelect imageId 
  = withBoolResult $
    withObjectRef "notebookAddPage" _obj $ \cobj__obj -> 
    withObjectPtr pPage $ \cobj_pPage -> 
    withStringPtr strText $ \cobj_strText -> 
    wxNotebook_AddPage cobj__obj  cobj_pPage  cobj_strText  (toCBool bSelect)  (toCInt imageId)  
foreign import ccall "wxNotebook_AddPage" wxNotebook_AddPage :: Ptr (TNotebook a) -> Ptr (TWindow b) -> Ptr (TWxString c) -> CBool -> CInt -> IO CBool

-- | usage: (@notebookAdvanceSelection obj bForward@).
notebookAdvanceSelection :: Notebook  a -> Bool ->  IO ()
notebookAdvanceSelection _obj bForward 
  = withObjectRef "notebookAdvanceSelection" _obj $ \cobj__obj -> 
    wxNotebook_AdvanceSelection cobj__obj  (toCBool bForward)  
foreign import ccall "wxNotebook_AdvanceSelection" wxNotebook_AdvanceSelection :: Ptr (TNotebook a) -> CBool -> IO ()

-- | usage: (@notebookAssignImageList obj imageList@).
notebookAssignImageList :: Notebook  a -> ImageList  b ->  IO ()
notebookAssignImageList _obj imageList 
  = withObjectRef "notebookAssignImageList" _obj $ \cobj__obj -> 
    withObjectPtr imageList $ \cobj_imageList -> 
    wxNotebook_AssignImageList cobj__obj  cobj_imageList  
foreign import ccall "wxNotebook_AssignImageList" wxNotebook_AssignImageList :: Ptr (TNotebook a) -> Ptr (TImageList b) -> IO ()

-- | usage: (@notebookCreate prt id lfttopwdthgt stl@).
notebookCreate :: Window  a -> Id -> Rect -> Style ->  IO (Notebook  ())
notebookCreate _prt _id _lfttopwdthgt _stl 
  = withObjectResult $
    withObjectPtr _prt $ \cobj__prt -> 
    wxNotebook_Create cobj__prt  (toCInt _id)  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
foreign import ccall "wxNotebook_Create" wxNotebook_Create :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TNotebook ()))

-- | usage: (@notebookDeleteAllPages obj@).
notebookDeleteAllPages :: Notebook  a ->  IO Bool
notebookDeleteAllPages _obj 
  = withBoolResult $
    withObjectRef "notebookDeleteAllPages" _obj $ \cobj__obj -> 
    wxNotebook_DeleteAllPages cobj__obj  
foreign import ccall "wxNotebook_DeleteAllPages" wxNotebook_DeleteAllPages :: Ptr (TNotebook a) -> IO CBool

-- | usage: (@notebookDeletePage obj nPage@).
notebookDeletePage :: Notebook  a -> Int ->  IO Bool
notebookDeletePage _obj nPage 
  = withBoolResult $
    withObjectRef "notebookDeletePage" _obj $ \cobj__obj -> 
    wxNotebook_DeletePage cobj__obj  (toCInt nPage)  
foreign import ccall "wxNotebook_DeletePage" wxNotebook_DeletePage :: Ptr (TNotebook a) -> CInt -> IO CBool

-- | usage: (@notebookGetImageList obj@).
notebookGetImageList :: Notebook  a ->  IO (ImageList  ())
notebookGetImageList _obj 
  = withObjectResult $
    withObjectRef "notebookGetImageList" _obj $ \cobj__obj -> 
    wxNotebook_GetImageList cobj__obj  
foreign import ccall "wxNotebook_GetImageList" wxNotebook_GetImageList :: Ptr (TNotebook a) -> IO (Ptr (TImageList ()))

-- | usage: (@notebookGetPage obj nPage@).
notebookGetPage :: Notebook  a -> Int ->  IO (Window  ())
notebookGetPage _obj nPage 
  = withObjectResult $
    withObjectRef "notebookGetPage" _obj $ \cobj__obj -> 
    wxNotebook_GetPage cobj__obj  (toCInt nPage)  
foreign import ccall "wxNotebook_GetPage" wxNotebook_GetPage :: Ptr (TNotebook a) -> CInt -> IO (Ptr (TWindow ()))

-- | usage: (@notebookGetPageCount obj@).
notebookGetPageCount :: Notebook  a ->  IO Int
notebookGetPageCount _obj 
  = withIntResult $
    withObjectRef "notebookGetPageCount" _obj $ \cobj__obj -> 
    wxNotebook_GetPageCount cobj__obj  
foreign import ccall "wxNotebook_GetPageCount" wxNotebook_GetPageCount :: Ptr (TNotebook a) -> IO CInt

-- | usage: (@notebookGetPageImage obj nPage@).
notebookGetPageImage :: Notebook  a -> Int ->  IO Int
notebookGetPageImage _obj nPage 
  = withIntResult $
    withObjectRef "notebookGetPageImage" _obj $ \cobj__obj -> 
    wxNotebook_GetPageImage cobj__obj  (toCInt nPage)  
foreign import ccall "wxNotebook_GetPageImage" wxNotebook_GetPageImage :: Ptr (TNotebook a) -> CInt -> IO CInt

-- | usage: (@notebookGetPageText obj nPage@).
notebookGetPageText :: Notebook  a -> Int ->  IO (String)
notebookGetPageText _obj nPage 
  = withManagedStringResult $
    withObjectRef "notebookGetPageText" _obj $ \cobj__obj -> 
    wxNotebook_GetPageText cobj__obj  (toCInt nPage)  
foreign import ccall "wxNotebook_GetPageText" wxNotebook_GetPageText :: Ptr (TNotebook a) -> CInt -> IO (Ptr (TWxString ()))

-- | usage: (@notebookGetRowCount obj@).
notebookGetRowCount :: Notebook  a ->  IO Int
notebookGetRowCount _obj 
  = withIntResult $
    withObjectRef "notebookGetRowCount" _obj $ \cobj__obj -> 
    wxNotebook_GetRowCount cobj__obj  
foreign import ccall "wxNotebook_GetRowCount" wxNotebook_GetRowCount :: Ptr (TNotebook a) -> IO CInt

-- | usage: (@notebookGetSelection obj@).
notebookGetSelection :: Notebook  a ->  IO Int
notebookGetSelection _obj 
  = withIntResult $
    withObjectRef "notebookGetSelection" _obj $ \cobj__obj -> 
    wxNotebook_GetSelection cobj__obj  
foreign import ccall "wxNotebook_GetSelection" wxNotebook_GetSelection :: Ptr (TNotebook a) -> IO CInt

-- | usage: (@notebookHitTest obj xy flags@).
notebookHitTest :: Notebook  a -> Point -> Ptr CInt ->  IO Int
notebookHitTest _obj xy flags 
  = withIntResult $
    withObjectRef "notebookHitTest" _obj $ \cobj__obj -> 
    wxNotebook_HitTest cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  flags  
foreign import ccall "wxNotebook_HitTest" wxNotebook_HitTest :: Ptr (TNotebook a) -> CInt -> CInt -> Ptr CInt -> IO CInt

-- | usage: (@notebookInsertPage obj nPage pPage strText bSelect imageId@).
notebookInsertPage :: Notebook  a -> Int -> Window  c -> String -> Bool -> Int ->  IO Bool
notebookInsertPage _obj nPage pPage strText bSelect imageId 
  = withBoolResult $
    withObjectRef "notebookInsertPage" _obj $ \cobj__obj -> 
    withObjectPtr pPage $ \cobj_pPage -> 
    withStringPtr strText $ \cobj_strText -> 
    wxNotebook_InsertPage cobj__obj  (toCInt nPage)  cobj_pPage  cobj_strText  (toCBool bSelect)  (toCInt imageId)  
foreign import ccall "wxNotebook_InsertPage" wxNotebook_InsertPage :: Ptr (TNotebook a) -> CInt -> Ptr (TWindow c) -> Ptr (TWxString d) -> CBool -> CInt -> IO CBool

-- | usage: (@notebookRemovePage obj nPage@).
notebookRemovePage :: Notebook  a -> Int ->  IO Bool
notebookRemovePage _obj nPage 
  = withBoolResult $
    withObjectRef "notebookRemovePage" _obj $ \cobj__obj -> 
    wxNotebook_RemovePage cobj__obj  (toCInt nPage)  
foreign import ccall "wxNotebook_RemovePage" wxNotebook_RemovePage :: Ptr (TNotebook a) -> CInt -> IO CBool

-- | usage: (@notebookSetImageList obj imageList@).
notebookSetImageList :: Notebook  a -> ImageList  b ->  IO ()
notebookSetImageList _obj imageList 
  = withObjectRef "notebookSetImageList" _obj $ \cobj__obj -> 
    withObjectPtr imageList $ \cobj_imageList -> 
    wxNotebook_SetImageList cobj__obj  cobj_imageList  
foreign import ccall "wxNotebook_SetImageList" wxNotebook_SetImageList :: Ptr (TNotebook a) -> Ptr (TImageList b) -> IO ()

-- | usage: (@notebookSetPadding obj wh@).
notebookSetPadding :: Notebook  a -> Size ->  IO ()
notebookSetPadding _obj _wh 
  = withObjectRef "notebookSetPadding" _obj $ \cobj__obj -> 
    wxNotebook_SetPadding cobj__obj  (toCIntSizeW _wh) (toCIntSizeH _wh)  
foreign import ccall "wxNotebook_SetPadding" wxNotebook_SetPadding :: Ptr (TNotebook a) -> CInt -> CInt -> IO ()

-- | usage: (@notebookSetPageImage obj nPage nImage@).
notebookSetPageImage :: Notebook  a -> Int -> Int ->  IO Bool
notebookSetPageImage _obj nPage nImage 
  = withBoolResult $
    withObjectRef "notebookSetPageImage" _obj $ \cobj__obj -> 
    wxNotebook_SetPageImage cobj__obj  (toCInt nPage)  (toCInt nImage)  
foreign import ccall "wxNotebook_SetPageImage" wxNotebook_SetPageImage :: Ptr (TNotebook a) -> CInt -> CInt -> IO CBool

-- | usage: (@notebookSetPageSize obj wh@).
notebookSetPageSize :: Notebook  a -> Size ->  IO ()
notebookSetPageSize _obj _wh 
  = withObjectRef "notebookSetPageSize" _obj $ \cobj__obj -> 
    wxNotebook_SetPageSize cobj__obj  (toCIntSizeW _wh) (toCIntSizeH _wh)  
foreign import ccall "wxNotebook_SetPageSize" wxNotebook_SetPageSize :: Ptr (TNotebook a) -> CInt -> CInt -> IO ()

-- | usage: (@notebookSetPageText obj nPage strText@).
notebookSetPageText :: Notebook  a -> Int -> String ->  IO Bool
notebookSetPageText _obj nPage strText 
  = withBoolResult $
    withObjectRef "notebookSetPageText" _obj $ \cobj__obj -> 
    withStringPtr strText $ \cobj_strText -> 
    wxNotebook_SetPageText cobj__obj  (toCInt nPage)  cobj_strText  
foreign import ccall "wxNotebook_SetPageText" wxNotebook_SetPageText :: Ptr (TNotebook a) -> CInt -> Ptr (TWxString c) -> IO CBool

-- | usage: (@notebookSetSelection obj nPage@).
notebookSetSelection :: Notebook  a -> Int ->  IO Int
notebookSetSelection _obj nPage 
  = withIntResult $
    withObjectRef "notebookSetSelection" _obj $ \cobj__obj -> 
    wxNotebook_SetSelection cobj__obj  (toCInt nPage)  
foreign import ccall "wxNotebook_SetSelection" wxNotebook_SetSelection :: Ptr (TNotebook a) -> CInt -> IO CInt

-- | usage: (@notifyEventAllow obj@).
notifyEventAllow :: NotifyEvent  a ->  IO ()
notifyEventAllow _obj 
  = withObjectRef "notifyEventAllow" _obj $ \cobj__obj -> 
    wxNotifyEvent_Allow cobj__obj  
foreign import ccall "wxNotifyEvent_Allow" wxNotifyEvent_Allow :: Ptr (TNotifyEvent a) -> IO ()

-- | usage: (@notifyEventCopyObject obj objectdest@).
notifyEventCopyObject :: NotifyEvent  a -> Ptr  b ->  IO ()
notifyEventCopyObject _obj objectdest 
  = withObjectRef "notifyEventCopyObject" _obj $ \cobj__obj -> 
    wxNotifyEvent_CopyObject cobj__obj  objectdest  
foreign import ccall "wxNotifyEvent_CopyObject" wxNotifyEvent_CopyObject :: Ptr (TNotifyEvent a) -> Ptr  b -> IO ()

-- | usage: (@notifyEventIsAllowed obj@).
notifyEventIsAllowed :: NotifyEvent  a ->  IO Bool
notifyEventIsAllowed _obj 
  = withBoolResult $
    withObjectRef "notifyEventIsAllowed" _obj $ \cobj__obj -> 
    wxNotifyEvent_IsAllowed cobj__obj  
foreign import ccall "wxNotifyEvent_IsAllowed" wxNotifyEvent_IsAllowed :: Ptr (TNotifyEvent a) -> IO CBool

-- | usage: (@notifyEventVeto obj@).
notifyEventVeto :: NotifyEvent  a ->  IO ()
notifyEventVeto _obj 
  = withObjectRef "notifyEventVeto" _obj $ \cobj__obj -> 
    wxNotifyEvent_Veto cobj__obj  
foreign import ccall "wxNotifyEvent_Veto" wxNotifyEvent_Veto :: Ptr (TNotifyEvent a) -> IO ()

-- | usage: (@nullAcceleratorTable@).
nullAcceleratorTable :: AcceleratorTable  ()
nullAcceleratorTable 
  = unsafePerformIO $
    withObjectResult $
    wx_Null_AcceleratorTable 
foreign import ccall "Null_AcceleratorTable" wx_Null_AcceleratorTable :: IO (Ptr (TAcceleratorTable ()))

-- | usage: (@nullBitmap@).
nullBitmap :: Bitmap  ()
nullBitmap 
  = unsafePerformIO $
    withManagedBitmapResult $
    wx_Null_Bitmap 
foreign import ccall "Null_Bitmap" wx_Null_Bitmap :: IO (Ptr (TBitmap ()))

-- | usage: (@nullBrush@).
nullBrush :: Brush  ()
nullBrush 
  = unsafePerformIO $
    withManagedBrushResult $
    wx_Null_Brush 
foreign import ccall "Null_Brush" wx_Null_Brush :: IO (Ptr (TBrush ()))

-- | usage: (@nullColour@).
nullColour :: Color
nullColour 
  = unsafePerformIO $
    withManagedColourResult $
    wx_Null_Colour 
foreign import ccall "Null_Colour" wx_Null_Colour :: IO (Ptr (TColour ()))

-- | usage: (@nullCursor@).
nullCursor :: Cursor  ()
nullCursor 
  = unsafePerformIO $
    withManagedCursorResult $
    wx_Null_Cursor 
foreign import ccall "Null_Cursor" wx_Null_Cursor :: IO (Ptr (TCursor ()))

-- | usage: (@nullFont@).
nullFont :: Font  ()
nullFont 
  = unsafePerformIO $
    withManagedFontResult $
    wx_Null_Font 
foreign import ccall "Null_Font" wx_Null_Font :: IO (Ptr (TFont ()))

-- | usage: (@nullIcon@).
nullIcon :: Icon  ()
nullIcon 
  = unsafePerformIO $
    withManagedIconResult $
    wx_Null_Icon 
foreign import ccall "Null_Icon" wx_Null_Icon :: IO (Ptr (TIcon ()))

-- | usage: (@nullPalette@).
nullPalette :: Palette  ()
nullPalette 
  = unsafePerformIO $
    withObjectResult $
    wx_Null_Palette 
foreign import ccall "Null_Palette" wx_Null_Palette :: IO (Ptr (TPalette ()))

-- | usage: (@nullPen@).
nullPen :: Pen  ()
nullPen 
  = unsafePerformIO $
    withManagedPenResult $
    wx_Null_Pen 
foreign import ccall "Null_Pen" wx_Null_Pen :: IO (Ptr (TPen ()))

-- | usage: (@objectGetClassInfo obj@).
objectGetClassInfo :: WxObject  a ->  IO (ClassInfo  ())
objectGetClassInfo _obj 
  = withObjectResult $
    withObjectRef "objectGetClassInfo" _obj $ \cobj__obj -> 
    wxObject_GetClassInfo cobj__obj  
foreign import ccall "wxObject_GetClassInfo" wxObject_GetClassInfo :: Ptr (TWxObject a) -> IO (Ptr (TClassInfo ()))

{- |  Get the reference data of an object as a closure: only works if properly initialized. Use 'closureGetData' to get to the actual data.  -}
objectGetClientClosure :: WxObject  a ->  IO (Closure  ())
objectGetClientClosure _obj 
  = withObjectResult $
    withObjectRef "objectGetClientClosure" _obj $ \cobj__obj -> 
    wxObject_GetClientClosure cobj__obj  
foreign import ccall "wxObject_GetClientClosure" wxObject_GetClientClosure :: Ptr (TWxObject a) -> IO (Ptr (TClosure ()))

-- | usage: (@objectIsKindOf obj classInfo@).
objectIsKindOf :: WxObject  a -> ClassInfo  b ->  IO Bool
objectIsKindOf _obj classInfo 
  = withBoolResult $
    withObjectRef "objectIsKindOf" _obj $ \cobj__obj -> 
    withObjectPtr classInfo $ \cobj_classInfo -> 
    wxObject_IsKindOf cobj__obj  cobj_classInfo  
foreign import ccall "wxObject_IsKindOf" wxObject_IsKindOf :: Ptr (TWxObject a) -> Ptr (TClassInfo b) -> IO CBool

-- | usage: (@objectIsScrolledWindow obj@).
objectIsScrolledWindow :: WxObject  a ->  IO Bool
objectIsScrolledWindow _obj 
  = withBoolResult $
    withObjectRef "objectIsScrolledWindow" _obj $ \cobj__obj -> 
    wxObject_IsScrolledWindow cobj__obj  
foreign import ccall "wxObject_IsScrolledWindow" wxObject_IsScrolledWindow :: Ptr (TWxObject a) -> IO CBool

-- | usage: (@objectSafeDelete self@).
objectSafeDelete :: WxObject  a ->  IO ()
objectSafeDelete self 
  = withObjectPtr self $ \cobj_self -> 
    wxObject_SafeDelete cobj_self  
foreign import ccall "wxObject_SafeDelete" wxObject_SafeDelete :: Ptr (TWxObject a) -> IO ()

{- |  Set the reference data of an object as a closure. The closure data contains the data while the function is called on deletion. Returns 'True' on success. Only works if the reference data is unused by wxWidgets!  -}
objectSetClientClosure :: WxObject  a -> Closure  b ->  IO ()
objectSetClientClosure _obj closure 
  = withObjectRef "objectSetClientClosure" _obj $ \cobj__obj -> 
    withObjectPtr closure $ \cobj_closure -> 
    wxObject_SetClientClosure cobj__obj  cobj_closure  
foreign import ccall "wxObject_SetClientClosure" wxObject_SetClientClosure :: Ptr (TWxObject a) -> Ptr (TClosure b) -> IO ()

-- | usage: (@outputStreamDelete obj@).
outputStreamDelete :: OutputStream  a ->  IO ()
outputStreamDelete _obj 
  = withObjectRef "outputStreamDelete" _obj $ \cobj__obj -> 
    wxOutputStream_Delete cobj__obj  
foreign import ccall "wxOutputStream_Delete" wxOutputStream_Delete :: Ptr (TOutputStream a) -> IO ()

-- | usage: (@outputStreamLastWrite obj@).
outputStreamLastWrite :: OutputStream  a ->  IO Int
outputStreamLastWrite _obj 
  = withIntResult $
    withObjectRef "outputStreamLastWrite" _obj $ \cobj__obj -> 
    wxOutputStream_LastWrite cobj__obj  
foreign import ccall "wxOutputStream_LastWrite" wxOutputStream_LastWrite :: Ptr (TOutputStream a) -> IO CInt

-- | usage: (@outputStreamPutC obj c@).
outputStreamPutC :: OutputStream  a -> Char ->  IO ()
outputStreamPutC _obj c 
  = withObjectRef "outputStreamPutC" _obj $ \cobj__obj -> 
    wxOutputStream_PutC cobj__obj  (toCWchar c)  
foreign import ccall "wxOutputStream_PutC" wxOutputStream_PutC :: Ptr (TOutputStream a) -> CWchar -> IO ()

-- | usage: (@outputStreamSeek obj pos mode@).
outputStreamSeek :: OutputStream  a -> Int -> Int ->  IO Int
outputStreamSeek _obj pos mode 
  = withIntResult $
    withObjectRef "outputStreamSeek" _obj $ \cobj__obj -> 
    wxOutputStream_Seek cobj__obj  (toCInt pos)  (toCInt mode)  
foreign import ccall "wxOutputStream_Seek" wxOutputStream_Seek :: Ptr (TOutputStream a) -> CInt -> CInt -> IO CInt

-- | usage: (@outputStreamSync obj@).
outputStreamSync :: OutputStream  a ->  IO ()
outputStreamSync _obj 
  = withObjectRef "outputStreamSync" _obj $ \cobj__obj -> 
    wxOutputStream_Sync cobj__obj  
foreign import ccall "wxOutputStream_Sync" wxOutputStream_Sync :: Ptr (TOutputStream a) -> IO ()

-- | usage: (@outputStreamTell obj@).
outputStreamTell :: OutputStream  a ->  IO Int
outputStreamTell _obj 
  = withIntResult $
    withObjectRef "outputStreamTell" _obj $ \cobj__obj -> 
    wxOutputStream_Tell cobj__obj  
foreign import ccall "wxOutputStream_Tell" wxOutputStream_Tell :: Ptr (TOutputStream a) -> IO CInt

-- | usage: (@outputStreamWrite obj buffer size@).
outputStreamWrite :: OutputStream  a -> Ptr  b -> Int ->  IO ()
outputStreamWrite _obj buffer size 
  = withObjectRef "outputStreamWrite" _obj $ \cobj__obj -> 
    wxOutputStream_Write cobj__obj  buffer  (toCInt size)  
foreign import ccall "wxOutputStream_Write" wxOutputStream_Write :: Ptr (TOutputStream a) -> Ptr  b -> CInt -> IO ()

-- | usage: (@pGPropertyGetLabel obj@).
pGPropertyGetLabel :: PGProperty  a ->  IO (String)
pGPropertyGetLabel _obj 
  = withManagedStringResult $
    withObjectRef "pGPropertyGetLabel" _obj $ \cobj__obj -> 
    wxPGProperty_GetLabel cobj__obj  
foreign import ccall "wxPGProperty_GetLabel" wxPGProperty_GetLabel :: Ptr (TPGProperty a) -> IO (Ptr (TWxString ()))

-- | usage: (@pGPropertyGetName obj@).
pGPropertyGetName :: PGProperty  a ->  IO (String)
pGPropertyGetName _obj 
  = withManagedStringResult $
    withObjectRef "pGPropertyGetName" _obj $ \cobj__obj -> 
    wxPGProperty_GetName cobj__obj  
foreign import ccall "wxPGProperty_GetName" wxPGProperty_GetName :: Ptr (TPGProperty a) -> IO (Ptr (TWxString ()))

-- | usage: (@pGPropertyGetValueAsString obj@).
pGPropertyGetValueAsString :: PGProperty  a ->  IO (String)
pGPropertyGetValueAsString _obj 
  = withManagedStringResult $
    withObjectRef "pGPropertyGetValueAsString" _obj $ \cobj__obj -> 
    wxPGProperty_GetValueAsString cobj__obj  
foreign import ccall "wxPGProperty_GetValueAsString" wxPGProperty_GetValueAsString :: Ptr (TPGProperty a) -> IO (Ptr (TWxString ()))

-- | usage: (@pGPropertyGetValueType obj@).
pGPropertyGetValueType :: PGProperty  a ->  IO (String)
pGPropertyGetValueType _obj 
  = withManagedStringResult $
    withObjectRef "pGPropertyGetValueType" _obj $ \cobj__obj -> 
    wxPGProperty_GetValueType cobj__obj  
foreign import ccall "wxPGProperty_GetValueType" wxPGProperty_GetValueType :: Ptr (TPGProperty a) -> IO (Ptr (TWxString ()))

-- | usage: (@pGPropertySetHelpString obj helpString@).
pGPropertySetHelpString :: PGProperty  a -> String ->  IO ()
pGPropertySetHelpString _obj helpString 
  = withObjectRef "pGPropertySetHelpString" _obj $ \cobj__obj -> 
    withStringPtr helpString $ \cobj_helpString -> 
    wxPGProperty_SetHelpString cobj__obj  cobj_helpString  
foreign import ccall "wxPGProperty_SetHelpString" wxPGProperty_SetHelpString :: Ptr (TPGProperty a) -> Ptr (TWxString b) -> IO ()

-- | usage: (@pageSetupDialogCreate parent wxdata@).
pageSetupDialogCreate :: Window  a -> PageSetupDialogData  b ->  IO (PageSetupDialog  ())
pageSetupDialogCreate parent wxdata 
  = withObjectResult $
    withObjectPtr parent $ \cobj_parent -> 
    withObjectPtr wxdata $ \cobj_wxdata -> 
    wxPageSetupDialog_Create cobj_parent  cobj_wxdata  
foreign import ccall "wxPageSetupDialog_Create" wxPageSetupDialog_Create :: Ptr (TWindow a) -> Ptr (TPageSetupDialogData b) -> IO (Ptr (TPageSetupDialog ()))

-- | usage: (@pageSetupDialogDataAssign obj@).
pageSetupDialogDataAssign :: PageSetupDialogData  a ->  IO (PageSetupDialogData  ())
pageSetupDialogDataAssign _obj 
  = withRefPageSetupDialogData $ \pref -> 
    withObjectRef "pageSetupDialogDataAssign" _obj $ \cobj__obj -> 
    wxPageSetupDialogData_Assign cobj__obj   pref
foreign import ccall "wxPageSetupDialogData_Assign" wxPageSetupDialogData_Assign :: Ptr (TPageSetupDialogData a) -> Ptr (TPageSetupDialogData ()) -> IO ()

-- | usage: (@pageSetupDialogDataAssignData obj printData@).
pageSetupDialogDataAssignData :: PageSetupDialogData  a -> PrintData  b ->  IO ()
pageSetupDialogDataAssignData _obj printData 
  = withObjectRef "pageSetupDialogDataAssignData" _obj $ \cobj__obj -> 
    withObjectPtr printData $ \cobj_printData -> 
    wxPageSetupDialogData_AssignData cobj__obj  cobj_printData  
foreign import ccall "wxPageSetupDialogData_AssignData" wxPageSetupDialogData_AssignData :: Ptr (TPageSetupDialogData a) -> Ptr (TPrintData b) -> IO ()

-- | usage: (@pageSetupDialogDataCalculateIdFromPaperSize obj@).
pageSetupDialogDataCalculateIdFromPaperSize :: PageSetupDialogData  a ->  IO ()
pageSetupDialogDataCalculateIdFromPaperSize _obj 
  = withObjectRef "pageSetupDialogDataCalculateIdFromPaperSize" _obj $ \cobj__obj -> 
    wxPageSetupDialogData_CalculateIdFromPaperSize cobj__obj  
foreign import ccall "wxPageSetupDialogData_CalculateIdFromPaperSize" wxPageSetupDialogData_CalculateIdFromPaperSize :: Ptr (TPageSetupDialogData a) -> IO ()

-- | usage: (@pageSetupDialogDataCalculatePaperSizeFromId obj@).
pageSetupDialogDataCalculatePaperSizeFromId :: PageSetupDialogData  a ->  IO ()
pageSetupDialogDataCalculatePaperSizeFromId _obj 
  = withObjectRef "pageSetupDialogDataCalculatePaperSizeFromId" _obj $ \cobj__obj -> 
    wxPageSetupDialogData_CalculatePaperSizeFromId cobj__obj  
foreign import ccall "wxPageSetupDialogData_CalculatePaperSizeFromId" wxPageSetupDialogData_CalculatePaperSizeFromId :: Ptr (TPageSetupDialogData a) -> IO ()

-- | usage: (@pageSetupDialogDataCreate@).
pageSetupDialogDataCreate ::  IO (PageSetupDialogData  ())
pageSetupDialogDataCreate 
  = withManagedObjectResult $
    wxPageSetupDialogData_Create 
foreign import ccall "wxPageSetupDialogData_Create" wxPageSetupDialogData_Create :: IO (Ptr (TPageSetupDialogData ()))

-- | usage: (@pageSetupDialogDataCreateFromData printData@).
pageSetupDialogDataCreateFromData :: PrintData  a ->  IO (PageSetupDialogData  ())
pageSetupDialogDataCreateFromData printData 
  = withManagedObjectResult $
    withObjectPtr printData $ \cobj_printData -> 
    wxPageSetupDialogData_CreateFromData cobj_printData  
foreign import ccall "wxPageSetupDialogData_CreateFromData" wxPageSetupDialogData_CreateFromData :: Ptr (TPrintData a) -> IO (Ptr (TPageSetupDialogData ()))

-- | usage: (@pageSetupDialogDataDelete obj@).
pageSetupDialogDataDelete :: PageSetupDialogData  a ->  IO ()
pageSetupDialogDataDelete
  = objectDelete


-- | usage: (@pageSetupDialogDataEnableHelp obj flag@).
pageSetupDialogDataEnableHelp :: PageSetupDialogData  a -> Bool ->  IO ()
pageSetupDialogDataEnableHelp _obj flag 
  = withObjectRef "pageSetupDialogDataEnableHelp" _obj $ \cobj__obj -> 
    wxPageSetupDialogData_EnableHelp cobj__obj  (toCBool flag)  
foreign import ccall "wxPageSetupDialogData_EnableHelp" wxPageSetupDialogData_EnableHelp :: Ptr (TPageSetupDialogData a) -> CBool -> IO ()

-- | usage: (@pageSetupDialogDataEnableMargins obj flag@).
pageSetupDialogDataEnableMargins :: PageSetupDialogData  a -> Bool ->  IO ()
pageSetupDialogDataEnableMargins _obj flag 
  = withObjectRef "pageSetupDialogDataEnableMargins" _obj $ \cobj__obj -> 
    wxPageSetupDialogData_EnableMargins cobj__obj  (toCBool flag)  
foreign import ccall "wxPageSetupDialogData_EnableMargins" wxPageSetupDialogData_EnableMargins :: Ptr (TPageSetupDialogData a) -> CBool -> IO ()

-- | usage: (@pageSetupDialogDataEnableOrientation obj flag@).
pageSetupDialogDataEnableOrientation :: PageSetupDialogData  a -> Bool ->  IO ()
pageSetupDialogDataEnableOrientation _obj flag 
  = withObjectRef "pageSetupDialogDataEnableOrientation" _obj $ \cobj__obj -> 
    wxPageSetupDialogData_EnableOrientation cobj__obj  (toCBool flag)  
foreign import ccall "wxPageSetupDialogData_EnableOrientation" wxPageSetupDialogData_EnableOrientation :: Ptr (TPageSetupDialogData a) -> CBool -> IO ()

-- | usage: (@pageSetupDialogDataEnablePaper obj flag@).
pageSetupDialogDataEnablePaper :: PageSetupDialogData  a -> Bool ->  IO ()
pageSetupDialogDataEnablePaper _obj flag 
  = withObjectRef "pageSetupDialogDataEnablePaper" _obj $ \cobj__obj -> 
    wxPageSetupDialogData_EnablePaper cobj__obj  (toCBool flag)  
foreign import ccall "wxPageSetupDialogData_EnablePaper" wxPageSetupDialogData_EnablePaper :: Ptr (TPageSetupDialogData a) -> CBool -> IO ()

-- | usage: (@pageSetupDialogDataEnablePrinter obj flag@).
pageSetupDialogDataEnablePrinter :: PageSetupDialogData  a -> Bool ->  IO ()
pageSetupDialogDataEnablePrinter _obj flag 
  = withObjectRef "pageSetupDialogDataEnablePrinter" _obj $ \cobj__obj -> 
    wxPageSetupDialogData_EnablePrinter cobj__obj  (toCBool flag)  
foreign import ccall "wxPageSetupDialogData_EnablePrinter" wxPageSetupDialogData_EnablePrinter :: Ptr (TPageSetupDialogData a) -> CBool -> IO ()

-- | usage: (@pageSetupDialogDataGetDefaultInfo obj@).
pageSetupDialogDataGetDefaultInfo :: PageSetupDialogData  a ->  IO Bool
pageSetupDialogDataGetDefaultInfo _obj 
  = withBoolResult $
    withObjectRef "pageSetupDialogDataGetDefaultInfo" _obj $ \cobj__obj -> 
    wxPageSetupDialogData_GetDefaultInfo cobj__obj  
foreign import ccall "wxPageSetupDialogData_GetDefaultInfo" wxPageSetupDialogData_GetDefaultInfo :: Ptr (TPageSetupDialogData a) -> IO CBool

-- | usage: (@pageSetupDialogDataGetDefaultMinMargins obj@).
pageSetupDialogDataGetDefaultMinMargins :: PageSetupDialogData  a ->  IO Bool
pageSetupDialogDataGetDefaultMinMargins _obj 
  = withBoolResult $
    withObjectRef "pageSetupDialogDataGetDefaultMinMargins" _obj $ \cobj__obj -> 
    wxPageSetupDialogData_GetDefaultMinMargins cobj__obj  
foreign import ccall "wxPageSetupDialogData_GetDefaultMinMargins" wxPageSetupDialogData_GetDefaultMinMargins :: Ptr (TPageSetupDialogData a) -> IO CBool

-- | usage: (@pageSetupDialogDataGetEnableHelp obj@).
pageSetupDialogDataGetEnableHelp :: PageSetupDialogData  a ->  IO Bool
pageSetupDialogDataGetEnableHelp _obj 
  = withBoolResult $
    withObjectRef "pageSetupDialogDataGetEnableHelp" _obj $ \cobj__obj -> 
    wxPageSetupDialogData_GetEnableHelp cobj__obj  
foreign import ccall "wxPageSetupDialogData_GetEnableHelp" wxPageSetupDialogData_GetEnableHelp :: Ptr (TPageSetupDialogData a) -> IO CBool

-- | usage: (@pageSetupDialogDataGetEnableMargins obj@).
pageSetupDialogDataGetEnableMargins :: PageSetupDialogData  a ->  IO Bool
pageSetupDialogDataGetEnableMargins _obj 
  = withBoolResult $
    withObjectRef "pageSetupDialogDataGetEnableMargins" _obj $ \cobj__obj -> 
    wxPageSetupDialogData_GetEnableMargins cobj__obj  
foreign import ccall "wxPageSetupDialogData_GetEnableMargins" wxPageSetupDialogData_GetEnableMargins :: Ptr (TPageSetupDialogData a) -> IO CBool

-- | usage: (@pageSetupDialogDataGetEnableOrientation obj@).
pageSetupDialogDataGetEnableOrientation :: PageSetupDialogData  a ->  IO Bool
pageSetupDialogDataGetEnableOrientation _obj 
  = withBoolResult $
    withObjectRef "pageSetupDialogDataGetEnableOrientation" _obj $ \cobj__obj -> 
    wxPageSetupDialogData_GetEnableOrientation cobj__obj  
foreign import ccall "wxPageSetupDialogData_GetEnableOrientation" wxPageSetupDialogData_GetEnableOrientation :: Ptr (TPageSetupDialogData a) -> IO CBool

-- | usage: (@pageSetupDialogDataGetEnablePaper obj@).
pageSetupDialogDataGetEnablePaper :: PageSetupDialogData  a ->  IO Bool
pageSetupDialogDataGetEnablePaper _obj 
  = withBoolResult $
    withObjectRef "pageSetupDialogDataGetEnablePaper" _obj $ \cobj__obj -> 
    wxPageSetupDialogData_GetEnablePaper cobj__obj  
foreign import ccall "wxPageSetupDialogData_GetEnablePaper" wxPageSetupDialogData_GetEnablePaper :: Ptr (TPageSetupDialogData a) -> IO CBool

-- | usage: (@pageSetupDialogDataGetEnablePrinter obj@).
pageSetupDialogDataGetEnablePrinter :: PageSetupDialogData  a ->  IO Bool
pageSetupDialogDataGetEnablePrinter _obj 
  = withBoolResult $
    withObjectRef "pageSetupDialogDataGetEnablePrinter" _obj $ \cobj__obj -> 
    wxPageSetupDialogData_GetEnablePrinter cobj__obj  
foreign import ccall "wxPageSetupDialogData_GetEnablePrinter" wxPageSetupDialogData_GetEnablePrinter :: Ptr (TPageSetupDialogData a) -> IO CBool

-- | usage: (@pageSetupDialogDataGetMarginBottomRight obj@).
pageSetupDialogDataGetMarginBottomRight :: PageSetupDialogData  a ->  IO (Point)
pageSetupDialogDataGetMarginBottomRight _obj 
  = withWxPointResult $
    withObjectRef "pageSetupDialogDataGetMarginBottomRight" _obj $ \cobj__obj -> 
    wxPageSetupDialogData_GetMarginBottomRight cobj__obj  
foreign import ccall "wxPageSetupDialogData_GetMarginBottomRight" wxPageSetupDialogData_GetMarginBottomRight :: Ptr (TPageSetupDialogData a) -> IO (Ptr (TWxPoint ()))

-- | usage: (@pageSetupDialogDataGetMarginTopLeft obj@).
pageSetupDialogDataGetMarginTopLeft :: PageSetupDialogData  a ->  IO (Point)
pageSetupDialogDataGetMarginTopLeft _obj 
  = withWxPointResult $
    withObjectRef "pageSetupDialogDataGetMarginTopLeft" _obj $ \cobj__obj -> 
    wxPageSetupDialogData_GetMarginTopLeft cobj__obj  
foreign import ccall "wxPageSetupDialogData_GetMarginTopLeft" wxPageSetupDialogData_GetMarginTopLeft :: Ptr (TPageSetupDialogData a) -> IO (Ptr (TWxPoint ()))

-- | usage: (@pageSetupDialogDataGetMinMarginBottomRight obj@).
pageSetupDialogDataGetMinMarginBottomRight :: PageSetupDialogData  a ->  IO (Point)
pageSetupDialogDataGetMinMarginBottomRight _obj 
  = withWxPointResult $
    withObjectRef "pageSetupDialogDataGetMinMarginBottomRight" _obj $ \cobj__obj -> 
    wxPageSetupDialogData_GetMinMarginBottomRight cobj__obj  
foreign import ccall "wxPageSetupDialogData_GetMinMarginBottomRight" wxPageSetupDialogData_GetMinMarginBottomRight :: Ptr (TPageSetupDialogData a) -> IO (Ptr (TWxPoint ()))

-- | usage: (@pageSetupDialogDataGetMinMarginTopLeft obj@).
pageSetupDialogDataGetMinMarginTopLeft :: PageSetupDialogData  a ->  IO (Point)
pageSetupDialogDataGetMinMarginTopLeft _obj 
  = withWxPointResult $
    withObjectRef "pageSetupDialogDataGetMinMarginTopLeft" _obj $ \cobj__obj -> 
    wxPageSetupDialogData_GetMinMarginTopLeft cobj__obj  
foreign import ccall "wxPageSetupDialogData_GetMinMarginTopLeft" wxPageSetupDialogData_GetMinMarginTopLeft :: Ptr (TPageSetupDialogData a) -> IO (Ptr (TWxPoint ()))

-- | usage: (@pageSetupDialogDataGetPaperId obj@).
pageSetupDialogDataGetPaperId :: PageSetupDialogData  a ->  IO Int
pageSetupDialogDataGetPaperId _obj 
  = withIntResult $
    withObjectRef "pageSetupDialogDataGetPaperId" _obj $ \cobj__obj -> 
    wxPageSetupDialogData_GetPaperId cobj__obj  
foreign import ccall "wxPageSetupDialogData_GetPaperId" wxPageSetupDialogData_GetPaperId :: Ptr (TPageSetupDialogData a) -> IO CInt

-- | usage: (@pageSetupDialogDataGetPaperSize obj@).
pageSetupDialogDataGetPaperSize :: PageSetupDialogData  a ->  IO (Size)
pageSetupDialogDataGetPaperSize _obj 
  = withWxSizeResult $
    withObjectRef "pageSetupDialogDataGetPaperSize" _obj $ \cobj__obj -> 
    wxPageSetupDialogData_GetPaperSize cobj__obj  
foreign import ccall "wxPageSetupDialogData_GetPaperSize" wxPageSetupDialogData_GetPaperSize :: Ptr (TPageSetupDialogData a) -> IO (Ptr (TWxSize ()))

-- | usage: (@pageSetupDialogDataGetPrintData obj@).
pageSetupDialogDataGetPrintData :: PageSetupDialogData  a ->  IO (PrintData  ())
pageSetupDialogDataGetPrintData _obj 
  = withRefPrintData $ \pref -> 
    withObjectRef "pageSetupDialogDataGetPrintData" _obj $ \cobj__obj -> 
    wxPageSetupDialogData_GetPrintData cobj__obj   pref
foreign import ccall "wxPageSetupDialogData_GetPrintData" wxPageSetupDialogData_GetPrintData :: Ptr (TPageSetupDialogData a) -> Ptr (TPrintData ()) -> IO ()

-- | usage: (@pageSetupDialogDataSetDefaultInfo obj flag@).
pageSetupDialogDataSetDefaultInfo :: PageSetupDialogData  a -> Bool ->  IO ()
pageSetupDialogDataSetDefaultInfo _obj flag 
  = withObjectRef "pageSetupDialogDataSetDefaultInfo" _obj $ \cobj__obj -> 
    wxPageSetupDialogData_SetDefaultInfo cobj__obj  (toCBool flag)  
foreign import ccall "wxPageSetupDialogData_SetDefaultInfo" wxPageSetupDialogData_SetDefaultInfo :: Ptr (TPageSetupDialogData a) -> CBool -> IO ()

-- | usage: (@pageSetupDialogDataSetDefaultMinMargins obj flag@).
pageSetupDialogDataSetDefaultMinMargins :: PageSetupDialogData  a -> Int ->  IO ()
pageSetupDialogDataSetDefaultMinMargins _obj flag 
  = withObjectRef "pageSetupDialogDataSetDefaultMinMargins" _obj $ \cobj__obj -> 
    wxPageSetupDialogData_SetDefaultMinMargins cobj__obj  (toCInt flag)  
foreign import ccall "wxPageSetupDialogData_SetDefaultMinMargins" wxPageSetupDialogData_SetDefaultMinMargins :: Ptr (TPageSetupDialogData a) -> CInt -> IO ()

-- | usage: (@pageSetupDialogDataSetMarginBottomRight obj xy@).
pageSetupDialogDataSetMarginBottomRight :: PageSetupDialogData  a -> Point ->  IO ()
pageSetupDialogDataSetMarginBottomRight _obj xy 
  = withObjectRef "pageSetupDialogDataSetMarginBottomRight" _obj $ \cobj__obj -> 
    wxPageSetupDialogData_SetMarginBottomRight cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
foreign import ccall "wxPageSetupDialogData_SetMarginBottomRight" wxPageSetupDialogData_SetMarginBottomRight :: Ptr (TPageSetupDialogData a) -> CInt -> CInt -> IO ()

-- | usage: (@pageSetupDialogDataSetMarginTopLeft obj xy@).
pageSetupDialogDataSetMarginTopLeft :: PageSetupDialogData  a -> Point ->  IO ()
pageSetupDialogDataSetMarginTopLeft _obj xy 
  = withObjectRef "pageSetupDialogDataSetMarginTopLeft" _obj $ \cobj__obj -> 
    wxPageSetupDialogData_SetMarginTopLeft cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
foreign import ccall "wxPageSetupDialogData_SetMarginTopLeft" wxPageSetupDialogData_SetMarginTopLeft :: Ptr (TPageSetupDialogData a) -> CInt -> CInt -> IO ()

-- | usage: (@pageSetupDialogDataSetMinMarginBottomRight obj xy@).
pageSetupDialogDataSetMinMarginBottomRight :: PageSetupDialogData  a -> Point ->  IO ()
pageSetupDialogDataSetMinMarginBottomRight _obj xy 
  = withObjectRef "pageSetupDialogDataSetMinMarginBottomRight" _obj $ \cobj__obj -> 
    wxPageSetupDialogData_SetMinMarginBottomRight cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
foreign import ccall "wxPageSetupDialogData_SetMinMarginBottomRight" wxPageSetupDialogData_SetMinMarginBottomRight :: Ptr (TPageSetupDialogData a) -> CInt -> CInt -> IO ()

-- | usage: (@pageSetupDialogDataSetMinMarginTopLeft obj xy@).
pageSetupDialogDataSetMinMarginTopLeft :: PageSetupDialogData  a -> Point ->  IO ()
pageSetupDialogDataSetMinMarginTopLeft _obj xy 
  = withObjectRef "pageSetupDialogDataSetMinMarginTopLeft" _obj $ \cobj__obj -> 
    wxPageSetupDialogData_SetMinMarginTopLeft cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
foreign import ccall "wxPageSetupDialogData_SetMinMarginTopLeft" wxPageSetupDialogData_SetMinMarginTopLeft :: Ptr (TPageSetupDialogData a) -> CInt -> CInt -> IO ()

-- | usage: (@pageSetupDialogDataSetPaperId obj id@).
pageSetupDialogDataSetPaperId :: PageSetupDialogData  a -> Ptr  b ->  IO ()
pageSetupDialogDataSetPaperId _obj id 
  = withObjectRef "pageSetupDialogDataSetPaperId" _obj $ \cobj__obj -> 
    wxPageSetupDialogData_SetPaperId cobj__obj  id  
foreign import ccall "wxPageSetupDialogData_SetPaperId" wxPageSetupDialogData_SetPaperId :: Ptr (TPageSetupDialogData a) -> Ptr  b -> IO ()

-- | usage: (@pageSetupDialogDataSetPaperSize obj wh@).
pageSetupDialogDataSetPaperSize :: PageSetupDialogData  a -> Size ->  IO ()
pageSetupDialogDataSetPaperSize _obj wh 
  = withObjectRef "pageSetupDialogDataSetPaperSize" _obj $ \cobj__obj -> 
    wxPageSetupDialogData_SetPaperSize cobj__obj  (toCIntSizeW wh) (toCIntSizeH wh)  
foreign import ccall "wxPageSetupDialogData_SetPaperSize" wxPageSetupDialogData_SetPaperSize :: Ptr (TPageSetupDialogData a) -> CInt -> CInt -> IO ()

-- | usage: (@pageSetupDialogDataSetPaperSizeId obj id@).
pageSetupDialogDataSetPaperSizeId :: PageSetupDialogData  a -> Id ->  IO ()
pageSetupDialogDataSetPaperSizeId _obj id 
  = withObjectRef "pageSetupDialogDataSetPaperSizeId" _obj $ \cobj__obj -> 
    wxPageSetupDialogData_SetPaperSizeId cobj__obj  (toCInt id)  
foreign import ccall "wxPageSetupDialogData_SetPaperSizeId" wxPageSetupDialogData_SetPaperSizeId :: Ptr (TPageSetupDialogData a) -> CInt -> IO ()

-- | usage: (@pageSetupDialogDataSetPrintData obj printData@).
pageSetupDialogDataSetPrintData :: PageSetupDialogData  a -> PrintData  b ->  IO ()
pageSetupDialogDataSetPrintData _obj printData 
  = withObjectRef "pageSetupDialogDataSetPrintData" _obj $ \cobj__obj -> 
    withObjectPtr printData $ \cobj_printData -> 
    wxPageSetupDialogData_SetPrintData cobj__obj  cobj_printData  
foreign import ccall "wxPageSetupDialogData_SetPrintData" wxPageSetupDialogData_SetPrintData :: Ptr (TPageSetupDialogData a) -> Ptr (TPrintData b) -> IO ()

-- | usage: (@pageSetupDialogGetPageSetupData obj@).
pageSetupDialogGetPageSetupData :: PageSetupDialog  a ->  IO (PageSetupDialogData  ())
pageSetupDialogGetPageSetupData _obj 
  = withRefPageSetupDialogData $ \pref -> 
    withObjectRef "pageSetupDialogGetPageSetupData" _obj $ \cobj__obj -> 
    wxPageSetupDialog_GetPageSetupData cobj__obj   pref
foreign import ccall "wxPageSetupDialog_GetPageSetupData" wxPageSetupDialog_GetPageSetupData :: Ptr (TPageSetupDialog a) -> Ptr (TPageSetupDialogData ()) -> IO ()

-- | usage: (@pageSetupDialogShowModal obj@).
pageSetupDialogShowModal :: PageSetupDialog  a ->  IO Int
pageSetupDialogShowModal _obj 
  = withIntResult $
    withObjectRef "pageSetupDialogShowModal" _obj $ \cobj__obj -> 
    wxPageSetupDialog_ShowModal cobj__obj  
foreign import ccall "wxPageSetupDialog_ShowModal" wxPageSetupDialog_ShowModal :: Ptr (TPageSetupDialog a) -> IO CInt

-- | usage: (@paintDCCreate win@).
paintDCCreate :: Window  a ->  IO (PaintDC  ())
paintDCCreate win 
  = withObjectResult $
    withObjectPtr win $ \cobj_win -> 
    wxPaintDC_Create cobj_win  
foreign import ccall "wxPaintDC_Create" wxPaintDC_Create :: Ptr (TWindow a) -> IO (Ptr (TPaintDC ()))

-- | usage: (@paintDCDelete obj@).
paintDCDelete :: PaintDC  a ->  IO ()
paintDCDelete
  = objectDelete


-- | usage: (@paletteAssign obj palette@).
paletteAssign :: Palette  a -> Palette  b ->  IO ()
paletteAssign _obj palette 
  = withObjectRef "paletteAssign" _obj $ \cobj__obj -> 
    withObjectPtr palette $ \cobj_palette -> 
    wxPalette_Assign cobj__obj  cobj_palette  
foreign import ccall "wxPalette_Assign" wxPalette_Assign :: Ptr (TPalette a) -> Ptr (TPalette b) -> IO ()

-- | usage: (@paletteChangedEventCopyObject obj obj@).
paletteChangedEventCopyObject :: PaletteChangedEvent  a -> Ptr  b ->  IO ()
paletteChangedEventCopyObject _obj obj 
  = withObjectRef "paletteChangedEventCopyObject" _obj $ \cobj__obj -> 
    wxPaletteChangedEvent_CopyObject cobj__obj  obj  
foreign import ccall "wxPaletteChangedEvent_CopyObject" wxPaletteChangedEvent_CopyObject :: Ptr (TPaletteChangedEvent a) -> Ptr  b -> IO ()

-- | usage: (@paletteChangedEventGetChangedWindow obj@).
paletteChangedEventGetChangedWindow :: PaletteChangedEvent  a ->  IO (Ptr  ())
paletteChangedEventGetChangedWindow _obj 
  = withObjectRef "paletteChangedEventGetChangedWindow" _obj $ \cobj__obj -> 
    wxPaletteChangedEvent_GetChangedWindow cobj__obj  
foreign import ccall "wxPaletteChangedEvent_GetChangedWindow" wxPaletteChangedEvent_GetChangedWindow :: Ptr (TPaletteChangedEvent a) -> IO (Ptr  ())

-- | usage: (@paletteChangedEventSetChangedWindow obj win@).
paletteChangedEventSetChangedWindow :: PaletteChangedEvent  a -> Window  b ->  IO ()
paletteChangedEventSetChangedWindow _obj win 
  = withObjectRef "paletteChangedEventSetChangedWindow" _obj $ \cobj__obj -> 
    withObjectPtr win $ \cobj_win -> 
    wxPaletteChangedEvent_SetChangedWindow cobj__obj  cobj_win  
foreign import ccall "wxPaletteChangedEvent_SetChangedWindow" wxPaletteChangedEvent_SetChangedWindow :: Ptr (TPaletteChangedEvent a) -> Ptr (TWindow b) -> IO ()

-- | usage: (@paletteCreateDefault@).
paletteCreateDefault ::  IO (Palette  ())
paletteCreateDefault 
  = withObjectResult $
    wxPalette_CreateDefault 
foreign import ccall "wxPalette_CreateDefault" wxPalette_CreateDefault :: IO (Ptr (TPalette ()))

-- | usage: (@paletteCreateRGB n red green blue@).
paletteCreateRGB :: Int -> Ptr  b -> Ptr  c -> Ptr  d ->  IO (Palette  ())
paletteCreateRGB n red green blue 
  = withObjectResult $
    wxPalette_CreateRGB (toCInt n)  red  green  blue  
foreign import ccall "wxPalette_CreateRGB" wxPalette_CreateRGB :: CInt -> Ptr  b -> Ptr  c -> Ptr  d -> IO (Ptr (TPalette ()))

-- | usage: (@paletteDelete obj@).
paletteDelete :: Palette  a ->  IO ()
paletteDelete
  = objectDelete


-- | usage: (@paletteGetPixel obj redgreenblue@).
paletteGetPixel :: Palette  a -> Color ->  IO Int
paletteGetPixel _obj redgreenblue 
  = withIntResult $
    withObjectRef "paletteGetPixel" _obj $ \cobj__obj -> 
    wxPalette_GetPixel cobj__obj  (colorRed redgreenblue) (colorGreen redgreenblue) (colorBlue redgreenblue)  
foreign import ccall "wxPalette_GetPixel" wxPalette_GetPixel :: Ptr (TPalette a) -> Word8 -> Word8 -> Word8 -> IO CInt

-- | usage: (@paletteGetRGB obj pixel red green blue@).
paletteGetRGB :: Palette  a -> Int -> Ptr  c -> Ptr  d -> Ptr  e ->  IO Bool
paletteGetRGB _obj pixel red green blue 
  = withBoolResult $
    withObjectRef "paletteGetRGB" _obj $ \cobj__obj -> 
    wxPalette_GetRGB cobj__obj  (toCInt pixel)  red  green  blue  
foreign import ccall "wxPalette_GetRGB" wxPalette_GetRGB :: Ptr (TPalette a) -> CInt -> Ptr  c -> Ptr  d -> Ptr  e -> IO CBool

-- | usage: (@paletteIsEqual obj palette@).
paletteIsEqual :: Palette  a -> Palette  b ->  IO Bool
paletteIsEqual _obj palette 
  = withBoolResult $
    withObjectRef "paletteIsEqual" _obj $ \cobj__obj -> 
    withObjectPtr palette $ \cobj_palette -> 
    wxPalette_IsEqual cobj__obj  cobj_palette  
foreign import ccall "wxPalette_IsEqual" wxPalette_IsEqual :: Ptr (TPalette a) -> Ptr (TPalette b) -> IO CBool

-- | usage: (@paletteIsOk obj@).
paletteIsOk :: Palette  a ->  IO Bool
paletteIsOk _obj 
  = withBoolResult $
    withObjectRef "paletteIsOk" _obj $ \cobj__obj -> 
    wxPalette_IsOk cobj__obj  
foreign import ccall "wxPalette_IsOk" wxPalette_IsOk :: Ptr (TPalette a) -> IO CBool

-- | usage: (@panelCreate prt id lfttopwdthgt stl@).
panelCreate :: Window  a -> Id -> Rect -> Style ->  IO (Panel  ())
panelCreate _prt _id _lfttopwdthgt _stl 
  = withObjectResult $
    withObjectPtr _prt $ \cobj__prt -> 
    wxPanel_Create cobj__prt  (toCInt _id)  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
foreign import ccall "wxPanel_Create" wxPanel_Create :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TPanel ()))

-- | usage: (@panelInitDialog obj@).
panelInitDialog :: Panel  a ->  IO ()
panelInitDialog _obj 
  = withObjectRef "panelInitDialog" _obj $ \cobj__obj -> 
    wxPanel_InitDialog cobj__obj  
foreign import ccall "wxPanel_InitDialog" wxPanel_InitDialog :: Ptr (TPanel a) -> IO ()

-- | usage: (@panelSetFocus obj@).
panelSetFocus :: Panel  a ->  IO ()
panelSetFocus _obj 
  = withObjectRef "panelSetFocus" _obj $ \cobj__obj -> 
    wxPanel_SetFocus cobj__obj  
foreign import ccall "wxPanel_SetFocus" wxPanel_SetFocus :: Ptr (TPanel a) -> IO ()

-- | usage: (@penAssign obj pen@).
penAssign :: Pen  a -> Pen  b ->  IO ()
penAssign _obj pen 
  = withObjectRef "penAssign" _obj $ \cobj__obj -> 
    withObjectPtr pen $ \cobj_pen -> 
    wxPen_Assign cobj__obj  cobj_pen  
foreign import ccall "wxPen_Assign" wxPen_Assign :: Ptr (TPen a) -> Ptr (TPen b) -> IO ()

-- | usage: (@penCreateDefault@).
penCreateDefault ::  IO (Pen  ())
penCreateDefault 
  = withManagedPenResult $
    wxPen_CreateDefault 
foreign import ccall "wxPen_CreateDefault" wxPen_CreateDefault :: IO (Ptr (TPen ()))

-- | usage: (@penCreateFromBitmap stipple width@).
penCreateFromBitmap :: Bitmap  a -> Int ->  IO (Pen  ())
penCreateFromBitmap stipple width 
  = withManagedPenResult $
    withObjectPtr stipple $ \cobj_stipple -> 
    wxPen_CreateFromBitmap cobj_stipple  (toCInt width)  
foreign import ccall "wxPen_CreateFromBitmap" wxPen_CreateFromBitmap :: Ptr (TBitmap a) -> CInt -> IO (Ptr (TPen ()))

-- | usage: (@penCreateFromColour col width style@).
penCreateFromColour :: Color -> Int -> Int ->  IO (Pen  ())
penCreateFromColour col width style 
  = withManagedPenResult $
    withColourPtr col $ \cobj_col -> 
    wxPen_CreateFromColour cobj_col  (toCInt width)  (toCInt style)  
foreign import ccall "wxPen_CreateFromColour" wxPen_CreateFromColour :: Ptr (TColour a) -> CInt -> CInt -> IO (Ptr (TPen ()))

-- | usage: (@penCreateFromStock id@).
penCreateFromStock :: Id ->  IO (Pen  ())
penCreateFromStock id 
  = withManagedPenResult $
    wxPen_CreateFromStock (toCInt id)  
foreign import ccall "wxPen_CreateFromStock" wxPen_CreateFromStock :: CInt -> IO (Ptr (TPen ()))

-- | usage: (@penDelete obj@).
penDelete :: Pen  a ->  IO ()
penDelete
  = objectDelete


-- | usage: (@penGetCap obj@).
penGetCap :: Pen  a ->  IO Int
penGetCap _obj 
  = withIntResult $
    withObjectRef "penGetCap" _obj $ \cobj__obj -> 
    wxPen_GetCap cobj__obj  
foreign import ccall "wxPen_GetCap" wxPen_GetCap :: Ptr (TPen a) -> IO CInt

-- | usage: (@penGetColour obj@).
penGetColour :: Pen  a ->  IO (Color)
penGetColour _obj 
  = withRefColour $ \pref -> 
    withObjectRef "penGetColour" _obj $ \cobj__obj -> 
    wxPen_GetColour cobj__obj   pref
foreign import ccall "wxPen_GetColour" wxPen_GetColour :: Ptr (TPen a) -> Ptr (TColour ()) -> IO ()

-- | usage: (@penGetDashes obj ptr@).
penGetDashes :: Pen  a -> Ptr  b ->  IO Int
penGetDashes _obj ptr 
  = withIntResult $
    withObjectRef "penGetDashes" _obj $ \cobj__obj -> 
    wxPen_GetDashes cobj__obj  ptr  
foreign import ccall "wxPen_GetDashes" wxPen_GetDashes :: Ptr (TPen a) -> Ptr  b -> IO CInt

-- | usage: (@penGetJoin obj@).
penGetJoin :: Pen  a ->  IO Int
penGetJoin _obj 
  = withIntResult $
    withObjectRef "penGetJoin" _obj $ \cobj__obj -> 
    wxPen_GetJoin cobj__obj  
foreign import ccall "wxPen_GetJoin" wxPen_GetJoin :: Ptr (TPen a) -> IO CInt

-- | usage: (@penGetStipple obj@).
penGetStipple :: Pen  a ->  IO (Bitmap  ())
penGetStipple _obj 
  = withRefBitmap $ \pref -> 
    withObjectRef "penGetStipple" _obj $ \cobj__obj -> 
    wxPen_GetStipple cobj__obj   pref
foreign import ccall "wxPen_GetStipple" wxPen_GetStipple :: Ptr (TPen a) -> Ptr (TBitmap ()) -> IO ()

-- | usage: (@penGetStyle obj@).
penGetStyle :: Pen  a ->  IO Int
penGetStyle _obj 
  = withIntResult $
    withObjectRef "penGetStyle" _obj $ \cobj__obj -> 
    wxPen_GetStyle cobj__obj  
foreign import ccall "wxPen_GetStyle" wxPen_GetStyle :: Ptr (TPen a) -> IO CInt

-- | usage: (@penGetWidth obj@).
penGetWidth :: Pen  a ->  IO Int
penGetWidth _obj 
  = withIntResult $
    withObjectRef "penGetWidth" _obj $ \cobj__obj -> 
    wxPen_GetWidth cobj__obj  
foreign import ccall "wxPen_GetWidth" wxPen_GetWidth :: Ptr (TPen a) -> IO CInt

-- | usage: (@penIsEqual obj pen@).
penIsEqual :: Pen  a -> Pen  b ->  IO Bool
penIsEqual _obj pen 
  = withBoolResult $
    withObjectRef "penIsEqual" _obj $ \cobj__obj -> 
    withObjectPtr pen $ \cobj_pen -> 
    wxPen_IsEqual cobj__obj  cobj_pen  
foreign import ccall "wxPen_IsEqual" wxPen_IsEqual :: Ptr (TPen a) -> Ptr (TPen b) -> IO CBool

-- | usage: (@penIsOk obj@).
penIsOk :: Pen  a ->  IO Bool
penIsOk _obj 
  = withBoolResult $
    withObjectRef "penIsOk" _obj $ \cobj__obj -> 
    wxPen_IsOk cobj__obj  
foreign import ccall "wxPen_IsOk" wxPen_IsOk :: Ptr (TPen a) -> IO CBool

-- | usage: (@penIsStatic self@).
penIsStatic :: Pen  a ->  IO Bool
penIsStatic self 
  = withBoolResult $
    withObjectPtr self $ \cobj_self -> 
    wxPen_IsStatic cobj_self  
foreign import ccall "wxPen_IsStatic" wxPen_IsStatic :: Ptr (TPen a) -> IO CBool

-- | usage: (@penSafeDelete self@).
penSafeDelete :: Pen  a ->  IO ()
penSafeDelete self 
  = withObjectPtr self $ \cobj_self -> 
    wxPen_SafeDelete cobj_self  
foreign import ccall "wxPen_SafeDelete" wxPen_SafeDelete :: Ptr (TPen a) -> IO ()

-- | usage: (@penSetCap obj cap@).
penSetCap :: Pen  a -> Int ->  IO ()
penSetCap _obj cap 
  = withObjectRef "penSetCap" _obj $ \cobj__obj -> 
    wxPen_SetCap cobj__obj  (toCInt cap)  
foreign import ccall "wxPen_SetCap" wxPen_SetCap :: Ptr (TPen a) -> CInt -> IO ()

-- | usage: (@penSetColour obj col@).
penSetColour :: Pen  a -> Color ->  IO ()
penSetColour _obj col 
  = withObjectRef "penSetColour" _obj $ \cobj__obj -> 
    withColourPtr col $ \cobj_col -> 
    wxPen_SetColour cobj__obj  cobj_col  
foreign import ccall "wxPen_SetColour" wxPen_SetColour :: Ptr (TPen a) -> Ptr (TColour b) -> IO ()

-- | usage: (@penSetColourSingle obj r g b@).
penSetColourSingle :: Pen  a -> Char -> Char -> Char ->  IO ()
penSetColourSingle _obj r g b 
  = withObjectRef "penSetColourSingle" _obj $ \cobj__obj -> 
    wxPen_SetColourSingle cobj__obj  (toCWchar r)  (toCWchar g)  (toCWchar b)  
foreign import ccall "wxPen_SetColourSingle" wxPen_SetColourSingle :: Ptr (TPen a) -> CWchar -> CWchar -> CWchar -> IO ()

-- | usage: (@penSetDashes obj nbdashes dash@).
penSetDashes :: Pen  a -> Int -> Ptr  c ->  IO ()
penSetDashes _obj nbdashes dash 
  = withObjectRef "penSetDashes" _obj $ \cobj__obj -> 
    wxPen_SetDashes cobj__obj  (toCInt nbdashes)  dash  
foreign import ccall "wxPen_SetDashes" wxPen_SetDashes :: Ptr (TPen a) -> CInt -> Ptr  c -> IO ()

-- | usage: (@penSetJoin obj join@).
penSetJoin :: Pen  a -> Int ->  IO ()
penSetJoin _obj join 
  = withObjectRef "penSetJoin" _obj $ \cobj__obj -> 
    wxPen_SetJoin cobj__obj  (toCInt join)  
foreign import ccall "wxPen_SetJoin" wxPen_SetJoin :: Ptr (TPen a) -> CInt -> IO ()

-- | usage: (@penSetStipple obj stipple@).
penSetStipple :: Pen  a -> Bitmap  b ->  IO ()
penSetStipple _obj stipple 
  = withObjectRef "penSetStipple" _obj $ \cobj__obj -> 
    withObjectPtr stipple $ \cobj_stipple -> 
    wxPen_SetStipple cobj__obj  cobj_stipple  
foreign import ccall "wxPen_SetStipple" wxPen_SetStipple :: Ptr (TPen a) -> Ptr (TBitmap b) -> IO ()

-- | usage: (@penSetStyle obj style@).
penSetStyle :: Pen  a -> Int ->  IO ()
penSetStyle _obj style 
  = withObjectRef "penSetStyle" _obj $ \cobj__obj -> 
    wxPen_SetStyle cobj__obj  (toCInt style)  
foreign import ccall "wxPen_SetStyle" wxPen_SetStyle :: Ptr (TPen a) -> CInt -> IO ()

-- | usage: (@penSetWidth obj width@).
penSetWidth :: Pen  a -> Int ->  IO ()
penSetWidth _obj width 
  = withObjectRef "penSetWidth" _obj $ \cobj__obj -> 
    wxPen_SetWidth cobj__obj  (toCInt width)  
foreign import ccall "wxPen_SetWidth" wxPen_SetWidth :: Ptr (TPen a) -> CInt -> IO ()

-- | usage: (@popProvider@).
popProvider ::  IO Bool
popProvider 
  = withBoolResult $
    wx_PopProvider 
foreign import ccall "PopProvider" wx_PopProvider :: IO CBool

-- | usage: (@postScriptDCCreate wxdata@).
postScriptDCCreate :: PrintData  a ->  IO (PostScriptDC  ())
postScriptDCCreate wxdata 
  = withObjectResult $
    withObjectPtr wxdata $ \cobj_wxdata -> 
    wxPostScriptDC_Create cobj_wxdata  
foreign import ccall "wxPostScriptDC_Create" wxPostScriptDC_Create :: Ptr (TPrintData a) -> IO (Ptr (TPostScriptDC ()))

-- | usage: (@postScriptDCDelete self@).
postScriptDCDelete :: PostScriptDC  a ->  IO ()
postScriptDCDelete
  = objectDelete


-- | usage: (@postScriptDCGetResolution self@).
postScriptDCGetResolution :: PostScriptDC  a ->  IO Int
postScriptDCGetResolution self 
  = withIntResult $
    withObjectRef "postScriptDCGetResolution" self $ \cobj_self -> 
    wxPostScriptDC_GetResolution cobj_self  
foreign import ccall "wxPostScriptDC_GetResolution" wxPostScriptDC_GetResolution :: Ptr (TPostScriptDC a) -> IO CInt

-- | usage: (@postScriptDCSetResolution self ppi@).
postScriptDCSetResolution :: PostScriptDC  a -> Int ->  IO ()
postScriptDCSetResolution self ppi 
  = withObjectRef "postScriptDCSetResolution" self $ \cobj_self -> 
    wxPostScriptDC_SetResolution cobj_self  (toCInt ppi)  
foreign import ccall "wxPostScriptDC_SetResolution" wxPostScriptDC_SetResolution :: Ptr (TPostScriptDC a) -> CInt -> IO ()

-- | usage: (@postScriptPrintNativeDataCreate@).
postScriptPrintNativeDataCreate ::  IO (PostScriptPrintNativeData  ())
postScriptPrintNativeDataCreate 
  = withObjectResult $
    wxPostScriptPrintNativeData_Create 
foreign import ccall "wxPostScriptPrintNativeData_Create" wxPostScriptPrintNativeData_Create :: IO (Ptr (TPostScriptPrintNativeData ()))

-- | usage: (@postScriptPrintNativeDataDelete obj@).
postScriptPrintNativeDataDelete :: PostScriptPrintNativeData  a ->  IO ()
postScriptPrintNativeDataDelete
  = objectDelete


-- | usage: (@previewCanvasCreate preview parent xywh style@).
previewCanvasCreate :: PrintPreview  a -> Window  b -> Rect -> Int ->  IO (PreviewCanvas  ())
previewCanvasCreate preview parent xywh style 
  = withObjectResult $
    withObjectPtr preview $ \cobj_preview -> 
    withObjectPtr parent $ \cobj_parent -> 
    wxPreviewCanvas_Create cobj_preview  cobj_parent  (toCIntRectX xywh) (toCIntRectY xywh)(toCIntRectW xywh) (toCIntRectH xywh)  (toCInt style)  
foreign import ccall "wxPreviewCanvas_Create" wxPreviewCanvas_Create :: Ptr (TPrintPreview a) -> Ptr (TWindow b) -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TPreviewCanvas ()))

{- |  Usage: @previewFrameCreate printPreview parent title rect name @.  -}
previewFrameCreate :: PrintPreview  a -> Frame  b -> String -> Rect -> Style -> String ->  IO (PreviewFrame  ())
previewFrameCreate preview parent title xywidthheight _stl name 
  = withObjectResult $
    withObjectPtr preview $ \cobj_preview -> 
    withObjectPtr parent $ \cobj_parent -> 
    withStringPtr title $ \cobj_title -> 
    withStringPtr name $ \cobj_name -> 
    wxPreviewFrame_Create cobj_preview  cobj_parent  cobj_title  (toCIntRectX xywidthheight) (toCIntRectY xywidthheight)(toCIntRectW xywidthheight) (toCIntRectH xywidthheight)  (toCInt _stl)  cobj_name  
foreign import ccall "wxPreviewFrame_Create" wxPreviewFrame_Create :: Ptr (TPrintPreview a) -> Ptr (TFrame b) -> Ptr (TWxString c) -> CInt -> CInt -> CInt -> CInt -> CInt -> Ptr (TWxString f) -> IO (Ptr (TPreviewFrame ()))

-- | usage: (@previewFrameDelete self@).
previewFrameDelete :: PreviewFrame  a ->  IO ()
previewFrameDelete
  = objectDelete


{- |  Usage: @previewFrameInitialize self@, call this before showing the frame.  -}
previewFrameInitialize :: PreviewFrame  a ->  IO ()
previewFrameInitialize self 
  = withObjectRef "previewFrameInitialize" self $ \cobj_self -> 
    wxPreviewFrame_Initialize cobj_self  
foreign import ccall "wxPreviewFrame_Initialize" wxPreviewFrame_Initialize :: Ptr (TPreviewFrame a) -> IO ()

-- | usage: (@printDataAssign obj wxdata@).
printDataAssign :: PrintData  a -> PrintData  b ->  IO ()
printDataAssign _obj wxdata 
  = withObjectRef "printDataAssign" _obj $ \cobj__obj -> 
    withObjectPtr wxdata $ \cobj_wxdata -> 
    wxPrintData_Assign cobj__obj  cobj_wxdata  
foreign import ccall "wxPrintData_Assign" wxPrintData_Assign :: Ptr (TPrintData a) -> Ptr (TPrintData b) -> IO ()

-- | usage: (@printDataCreate@).
printDataCreate ::  IO (PrintData  ())
printDataCreate 
  = withManagedObjectResult $
    wxPrintData_Create 
foreign import ccall "wxPrintData_Create" wxPrintData_Create :: IO (Ptr (TPrintData ()))

-- | usage: (@printDataDelete obj@).
printDataDelete :: PrintData  a ->  IO ()
printDataDelete
  = objectDelete


-- | usage: (@printDataGetCollate obj@).
printDataGetCollate :: PrintData  a ->  IO Bool
printDataGetCollate _obj 
  = withBoolResult $
    withObjectRef "printDataGetCollate" _obj $ \cobj__obj -> 
    wxPrintData_GetCollate cobj__obj  
foreign import ccall "wxPrintData_GetCollate" wxPrintData_GetCollate :: Ptr (TPrintData a) -> IO CBool

-- | usage: (@printDataGetColour obj@).
printDataGetColour :: PrintData  a ->  IO Bool
printDataGetColour _obj 
  = withBoolResult $
    withObjectRef "printDataGetColour" _obj $ \cobj__obj -> 
    wxPrintData_GetColour cobj__obj  
foreign import ccall "wxPrintData_GetColour" wxPrintData_GetColour :: Ptr (TPrintData a) -> IO CBool

-- | usage: (@printDataGetDuplex obj@).
printDataGetDuplex :: PrintData  a ->  IO Int
printDataGetDuplex _obj 
  = withIntResult $
    withObjectRef "printDataGetDuplex" _obj $ \cobj__obj -> 
    wxPrintData_GetDuplex cobj__obj  
foreign import ccall "wxPrintData_GetDuplex" wxPrintData_GetDuplex :: Ptr (TPrintData a) -> IO CInt

-- | usage: (@printDataGetFilename obj@).
printDataGetFilename :: PrintData  a ->  IO (String)
printDataGetFilename _obj 
  = withManagedStringResult $
    withObjectRef "printDataGetFilename" _obj $ \cobj__obj -> 
    wxPrintData_GetFilename cobj__obj  
foreign import ccall "wxPrintData_GetFilename" wxPrintData_GetFilename :: Ptr (TPrintData a) -> IO (Ptr (TWxString ()))

-- | usage: (@printDataGetFontMetricPath obj@).
printDataGetFontMetricPath :: PrintData  a ->  IO (String)
printDataGetFontMetricPath _obj 
  = withManagedStringResult $
    withObjectRef "printDataGetFontMetricPath" _obj $ \cobj__obj -> 
    wxPrintData_GetFontMetricPath cobj__obj  
foreign import ccall "wxPrintData_GetFontMetricPath" wxPrintData_GetFontMetricPath :: Ptr (TPrintData a) -> IO (Ptr (TWxString ()))

-- | usage: (@printDataGetNoCopies obj@).
printDataGetNoCopies :: PrintData  a ->  IO Int
printDataGetNoCopies _obj 
  = withIntResult $
    withObjectRef "printDataGetNoCopies" _obj $ \cobj__obj -> 
    wxPrintData_GetNoCopies cobj__obj  
foreign import ccall "wxPrintData_GetNoCopies" wxPrintData_GetNoCopies :: Ptr (TPrintData a) -> IO CInt

-- | usage: (@printDataGetOrientation obj@).
printDataGetOrientation :: PrintData  a ->  IO Int
printDataGetOrientation _obj 
  = withIntResult $
    withObjectRef "printDataGetOrientation" _obj $ \cobj__obj -> 
    wxPrintData_GetOrientation cobj__obj  
foreign import ccall "wxPrintData_GetOrientation" wxPrintData_GetOrientation :: Ptr (TPrintData a) -> IO CInt

-- | usage: (@printDataGetPaperId obj@).
printDataGetPaperId :: PrintData  a ->  IO Int
printDataGetPaperId _obj 
  = withIntResult $
    withObjectRef "printDataGetPaperId" _obj $ \cobj__obj -> 
    wxPrintData_GetPaperId cobj__obj  
foreign import ccall "wxPrintData_GetPaperId" wxPrintData_GetPaperId :: Ptr (TPrintData a) -> IO CInt

-- | usage: (@printDataGetPaperSize obj@).
printDataGetPaperSize :: PrintData  a ->  IO (Size)
printDataGetPaperSize _obj 
  = withWxSizeResult $
    withObjectRef "printDataGetPaperSize" _obj $ \cobj__obj -> 
    wxPrintData_GetPaperSize cobj__obj  
foreign import ccall "wxPrintData_GetPaperSize" wxPrintData_GetPaperSize :: Ptr (TPrintData a) -> IO (Ptr (TWxSize ()))

-- | usage: (@printDataGetPreviewCommand obj@).
printDataGetPreviewCommand :: PrintData  a ->  IO (String)
printDataGetPreviewCommand _obj 
  = withManagedStringResult $
    withObjectRef "printDataGetPreviewCommand" _obj $ \cobj__obj -> 
    wxPrintData_GetPreviewCommand cobj__obj  
foreign import ccall "wxPrintData_GetPreviewCommand" wxPrintData_GetPreviewCommand :: Ptr (TPrintData a) -> IO (Ptr (TWxString ()))

-- | usage: (@printDataGetPrintMode obj@).
printDataGetPrintMode :: PrintData  a ->  IO Int
printDataGetPrintMode _obj 
  = withIntResult $
    withObjectRef "printDataGetPrintMode" _obj $ \cobj__obj -> 
    wxPrintData_GetPrintMode cobj__obj  
foreign import ccall "wxPrintData_GetPrintMode" wxPrintData_GetPrintMode :: Ptr (TPrintData a) -> IO CInt

-- | usage: (@printDataGetPrinterCommand obj@).
printDataGetPrinterCommand :: PrintData  a ->  IO (String)
printDataGetPrinterCommand _obj 
  = withManagedStringResult $
    withObjectRef "printDataGetPrinterCommand" _obj $ \cobj__obj -> 
    wxPrintData_GetPrinterCommand cobj__obj  
foreign import ccall "wxPrintData_GetPrinterCommand" wxPrintData_GetPrinterCommand :: Ptr (TPrintData a) -> IO (Ptr (TWxString ()))

-- | usage: (@printDataGetPrinterName obj@).
printDataGetPrinterName :: PrintData  a ->  IO (String)
printDataGetPrinterName _obj 
  = withManagedStringResult $
    withObjectRef "printDataGetPrinterName" _obj $ \cobj__obj -> 
    wxPrintData_GetPrinterName cobj__obj  
foreign import ccall "wxPrintData_GetPrinterName" wxPrintData_GetPrinterName :: Ptr (TPrintData a) -> IO (Ptr (TWxString ()))

-- | usage: (@printDataGetPrinterOptions obj@).
printDataGetPrinterOptions :: PrintData  a ->  IO (String)
printDataGetPrinterOptions _obj 
  = withManagedStringResult $
    withObjectRef "printDataGetPrinterOptions" _obj $ \cobj__obj -> 
    wxPrintData_GetPrinterOptions cobj__obj  
foreign import ccall "wxPrintData_GetPrinterOptions" wxPrintData_GetPrinterOptions :: Ptr (TPrintData a) -> IO (Ptr (TWxString ()))

-- | usage: (@printDataGetPrinterScaleX obj@).
printDataGetPrinterScaleX :: PrintData  a ->  IO Double
printDataGetPrinterScaleX _obj 
  = withObjectRef "printDataGetPrinterScaleX" _obj $ \cobj__obj -> 
    wxPrintData_GetPrinterScaleX cobj__obj  
foreign import ccall "wxPrintData_GetPrinterScaleX" wxPrintData_GetPrinterScaleX :: Ptr (TPrintData a) -> IO Double

-- | usage: (@printDataGetPrinterScaleY obj@).
printDataGetPrinterScaleY :: PrintData  a ->  IO Double
printDataGetPrinterScaleY _obj 
  = withObjectRef "printDataGetPrinterScaleY" _obj $ \cobj__obj -> 
    wxPrintData_GetPrinterScaleY cobj__obj  
foreign import ccall "wxPrintData_GetPrinterScaleY" wxPrintData_GetPrinterScaleY :: Ptr (TPrintData a) -> IO Double

-- | usage: (@printDataGetPrinterTranslateX obj@).
printDataGetPrinterTranslateX :: PrintData  a ->  IO Int
printDataGetPrinterTranslateX _obj 
  = withIntResult $
    withObjectRef "printDataGetPrinterTranslateX" _obj $ \cobj__obj -> 
    wxPrintData_GetPrinterTranslateX cobj__obj  
foreign import ccall "wxPrintData_GetPrinterTranslateX" wxPrintData_GetPrinterTranslateX :: Ptr (TPrintData a) -> IO CInt

-- | usage: (@printDataGetPrinterTranslateY obj@).
printDataGetPrinterTranslateY :: PrintData  a ->  IO Int
printDataGetPrinterTranslateY _obj 
  = withIntResult $
    withObjectRef "printDataGetPrinterTranslateY" _obj $ \cobj__obj -> 
    wxPrintData_GetPrinterTranslateY cobj__obj  
foreign import ccall "wxPrintData_GetPrinterTranslateY" wxPrintData_GetPrinterTranslateY :: Ptr (TPrintData a) -> IO CInt

-- | usage: (@printDataGetQuality obj@).
printDataGetQuality :: PrintData  a ->  IO Int
printDataGetQuality _obj 
  = withIntResult $
    withObjectRef "printDataGetQuality" _obj $ \cobj__obj -> 
    wxPrintData_GetQuality cobj__obj  
foreign import ccall "wxPrintData_GetQuality" wxPrintData_GetQuality :: Ptr (TPrintData a) -> IO CInt

-- | usage: (@printDataSetCollate obj flag@).
printDataSetCollate :: PrintData  a -> Bool ->  IO ()
printDataSetCollate _obj flag 
  = withObjectRef "printDataSetCollate" _obj $ \cobj__obj -> 
    wxPrintData_SetCollate cobj__obj  (toCBool flag)  
foreign import ccall "wxPrintData_SetCollate" wxPrintData_SetCollate :: Ptr (TPrintData a) -> CBool -> IO ()

-- | usage: (@printDataSetColour obj colour@).
printDataSetColour :: PrintData  a -> Bool ->  IO ()
printDataSetColour _obj colour 
  = withObjectRef "printDataSetColour" _obj $ \cobj__obj -> 
    wxPrintData_SetColour cobj__obj  (toCBool colour)  
foreign import ccall "wxPrintData_SetColour" wxPrintData_SetColour :: Ptr (TPrintData a) -> CBool -> IO ()

-- | usage: (@printDataSetDuplex obj duplex@).
printDataSetDuplex :: PrintData  a -> Int ->  IO ()
printDataSetDuplex _obj duplex 
  = withObjectRef "printDataSetDuplex" _obj $ \cobj__obj -> 
    wxPrintData_SetDuplex cobj__obj  (toCInt duplex)  
foreign import ccall "wxPrintData_SetDuplex" wxPrintData_SetDuplex :: Ptr (TPrintData a) -> CInt -> IO ()

-- | usage: (@printDataSetFilename obj filename@).
printDataSetFilename :: PrintData  a -> String ->  IO ()
printDataSetFilename _obj filename 
  = withObjectRef "printDataSetFilename" _obj $ \cobj__obj -> 
    withStringPtr filename $ \cobj_filename -> 
    wxPrintData_SetFilename cobj__obj  cobj_filename  
foreign import ccall "wxPrintData_SetFilename" wxPrintData_SetFilename :: Ptr (TPrintData a) -> Ptr (TWxString b) -> IO ()

-- | usage: (@printDataSetFontMetricPath obj path@).
printDataSetFontMetricPath :: PrintData  a -> String ->  IO ()
printDataSetFontMetricPath _obj path 
  = withObjectRef "printDataSetFontMetricPath" _obj $ \cobj__obj -> 
    withStringPtr path $ \cobj_path -> 
    wxPrintData_SetFontMetricPath cobj__obj  cobj_path  
foreign import ccall "wxPrintData_SetFontMetricPath" wxPrintData_SetFontMetricPath :: Ptr (TPrintData a) -> Ptr (TWxString b) -> IO ()

-- | usage: (@printDataSetNoCopies obj v@).
printDataSetNoCopies :: PrintData  a -> Int ->  IO ()
printDataSetNoCopies _obj v 
  = withObjectRef "printDataSetNoCopies" _obj $ \cobj__obj -> 
    wxPrintData_SetNoCopies cobj__obj  (toCInt v)  
foreign import ccall "wxPrintData_SetNoCopies" wxPrintData_SetNoCopies :: Ptr (TPrintData a) -> CInt -> IO ()

-- | usage: (@printDataSetOrientation obj orient@).
printDataSetOrientation :: PrintData  a -> Int ->  IO ()
printDataSetOrientation _obj orient 
  = withObjectRef "printDataSetOrientation" _obj $ \cobj__obj -> 
    wxPrintData_SetOrientation cobj__obj  (toCInt orient)  
foreign import ccall "wxPrintData_SetOrientation" wxPrintData_SetOrientation :: Ptr (TPrintData a) -> CInt -> IO ()

-- | usage: (@printDataSetPaperId obj sizeId@).
printDataSetPaperId :: PrintData  a -> Int ->  IO ()
printDataSetPaperId _obj sizeId 
  = withObjectRef "printDataSetPaperId" _obj $ \cobj__obj -> 
    wxPrintData_SetPaperId cobj__obj  (toCInt sizeId)  
foreign import ccall "wxPrintData_SetPaperId" wxPrintData_SetPaperId :: Ptr (TPrintData a) -> CInt -> IO ()

-- | usage: (@printDataSetPaperSize obj wh@).
printDataSetPaperSize :: PrintData  a -> Size ->  IO ()
printDataSetPaperSize _obj wh 
  = withObjectRef "printDataSetPaperSize" _obj $ \cobj__obj -> 
    wxPrintData_SetPaperSize cobj__obj  (toCIntSizeW wh) (toCIntSizeH wh)  
foreign import ccall "wxPrintData_SetPaperSize" wxPrintData_SetPaperSize :: Ptr (TPrintData a) -> CInt -> CInt -> IO ()

-- | usage: (@printDataSetPreviewCommand obj command@).
printDataSetPreviewCommand :: PrintData  a -> Command  b ->  IO ()
printDataSetPreviewCommand _obj command 
  = withObjectRef "printDataSetPreviewCommand" _obj $ \cobj__obj -> 
    withObjectPtr command $ \cobj_command -> 
    wxPrintData_SetPreviewCommand cobj__obj  cobj_command  
foreign import ccall "wxPrintData_SetPreviewCommand" wxPrintData_SetPreviewCommand :: Ptr (TPrintData a) -> Ptr (TCommand b) -> IO ()

-- | usage: (@printDataSetPrintMode obj printMode@).
printDataSetPrintMode :: PrintData  a -> Int ->  IO ()
printDataSetPrintMode _obj printMode 
  = withObjectRef "printDataSetPrintMode" _obj $ \cobj__obj -> 
    wxPrintData_SetPrintMode cobj__obj  (toCInt printMode)  
foreign import ccall "wxPrintData_SetPrintMode" wxPrintData_SetPrintMode :: Ptr (TPrintData a) -> CInt -> IO ()

-- | usage: (@printDataSetPrinterCommand obj command@).
printDataSetPrinterCommand :: PrintData  a -> Command  b ->  IO ()
printDataSetPrinterCommand _obj command 
  = withObjectRef "printDataSetPrinterCommand" _obj $ \cobj__obj -> 
    withObjectPtr command $ \cobj_command -> 
    wxPrintData_SetPrinterCommand cobj__obj  cobj_command  
foreign import ccall "wxPrintData_SetPrinterCommand" wxPrintData_SetPrinterCommand :: Ptr (TPrintData a) -> Ptr (TCommand b) -> IO ()

-- | usage: (@printDataSetPrinterName obj name@).
printDataSetPrinterName :: PrintData  a -> String ->  IO ()
printDataSetPrinterName _obj name 
  = withObjectRef "printDataSetPrinterName" _obj $ \cobj__obj -> 
    withStringPtr name $ \cobj_name -> 
    wxPrintData_SetPrinterName cobj__obj  cobj_name  
foreign import ccall "wxPrintData_SetPrinterName" wxPrintData_SetPrinterName :: Ptr (TPrintData a) -> Ptr (TWxString b) -> IO ()

-- | usage: (@printDataSetPrinterOptions obj options@).
printDataSetPrinterOptions :: PrintData  a -> String ->  IO ()
printDataSetPrinterOptions _obj options 
  = withObjectRef "printDataSetPrinterOptions" _obj $ \cobj__obj -> 
    withStringPtr options $ \cobj_options -> 
    wxPrintData_SetPrinterOptions cobj__obj  cobj_options  
foreign import ccall "wxPrintData_SetPrinterOptions" wxPrintData_SetPrinterOptions :: Ptr (TPrintData a) -> Ptr (TWxString b) -> IO ()

-- | usage: (@printDataSetPrinterScaleX obj x@).
printDataSetPrinterScaleX :: PrintData  a -> Double ->  IO ()
printDataSetPrinterScaleX _obj x 
  = withObjectRef "printDataSetPrinterScaleX" _obj $ \cobj__obj -> 
    wxPrintData_SetPrinterScaleX cobj__obj  x  
foreign import ccall "wxPrintData_SetPrinterScaleX" wxPrintData_SetPrinterScaleX :: Ptr (TPrintData a) -> Double -> IO ()

-- | usage: (@printDataSetPrinterScaleY obj y@).
printDataSetPrinterScaleY :: PrintData  a -> Double ->  IO ()
printDataSetPrinterScaleY _obj y 
  = withObjectRef "printDataSetPrinterScaleY" _obj $ \cobj__obj -> 
    wxPrintData_SetPrinterScaleY cobj__obj  y  
foreign import ccall "wxPrintData_SetPrinterScaleY" wxPrintData_SetPrinterScaleY :: Ptr (TPrintData a) -> Double -> IO ()

-- | usage: (@printDataSetPrinterScaling obj x y@).
printDataSetPrinterScaling :: PrintData  a -> Double -> Double ->  IO ()
printDataSetPrinterScaling _obj x y 
  = withObjectRef "printDataSetPrinterScaling" _obj $ \cobj__obj -> 
    wxPrintData_SetPrinterScaling cobj__obj  x  y  
foreign import ccall "wxPrintData_SetPrinterScaling" wxPrintData_SetPrinterScaling :: Ptr (TPrintData a) -> Double -> Double -> IO ()

-- | usage: (@printDataSetPrinterTranslateX obj x@).
printDataSetPrinterTranslateX :: PrintData  a -> Int ->  IO ()
printDataSetPrinterTranslateX _obj x 
  = withObjectRef "printDataSetPrinterTranslateX" _obj $ \cobj__obj -> 
    wxPrintData_SetPrinterTranslateX cobj__obj  (toCInt x)  
foreign import ccall "wxPrintData_SetPrinterTranslateX" wxPrintData_SetPrinterTranslateX :: Ptr (TPrintData a) -> CInt -> IO ()

-- | usage: (@printDataSetPrinterTranslateY obj y@).
printDataSetPrinterTranslateY :: PrintData  a -> Int ->  IO ()
printDataSetPrinterTranslateY _obj y 
  = withObjectRef "printDataSetPrinterTranslateY" _obj $ \cobj__obj -> 
    wxPrintData_SetPrinterTranslateY cobj__obj  (toCInt y)  
foreign import ccall "wxPrintData_SetPrinterTranslateY" wxPrintData_SetPrinterTranslateY :: Ptr (TPrintData a) -> CInt -> IO ()

-- | usage: (@printDataSetPrinterTranslation obj xy@).
printDataSetPrinterTranslation :: PrintData  a -> Point ->  IO ()
printDataSetPrinterTranslation _obj xy 
  = withObjectRef "printDataSetPrinterTranslation" _obj $ \cobj__obj -> 
    wxPrintData_SetPrinterTranslation cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
foreign import ccall "wxPrintData_SetPrinterTranslation" wxPrintData_SetPrinterTranslation :: Ptr (TPrintData a) -> CInt -> CInt -> IO ()

-- | usage: (@printDataSetQuality obj quality@).
printDataSetQuality :: PrintData  a -> Int ->  IO ()
printDataSetQuality _obj quality 
  = withObjectRef "printDataSetQuality" _obj $ \cobj__obj -> 
    wxPrintData_SetQuality cobj__obj  (toCInt quality)  
foreign import ccall "wxPrintData_SetQuality" wxPrintData_SetQuality :: Ptr (TPrintData a) -> CInt -> IO ()

-- | usage: (@printDialogCreate parent wxdata@).
printDialogCreate :: Window  a -> PrintDialogData  b ->  IO (PrintDialog  ())
printDialogCreate parent wxdata 
  = withObjectResult $
    withObjectPtr parent $ \cobj_parent -> 
    withObjectPtr wxdata $ \cobj_wxdata -> 
    wxPrintDialog_Create cobj_parent  cobj_wxdata  
foreign import ccall "wxPrintDialog_Create" wxPrintDialog_Create :: Ptr (TWindow a) -> Ptr (TPrintDialogData b) -> IO (Ptr (TPrintDialog ()))

-- | usage: (@printDialogDataAssign obj wxdata@).
printDialogDataAssign :: PrintDialogData  a -> PrintDialogData  b ->  IO ()
printDialogDataAssign _obj wxdata 
  = withObjectRef "printDialogDataAssign" _obj $ \cobj__obj -> 
    withObjectPtr wxdata $ \cobj_wxdata -> 
    wxPrintDialogData_Assign cobj__obj  cobj_wxdata  
foreign import ccall "wxPrintDialogData_Assign" wxPrintDialogData_Assign :: Ptr (TPrintDialogData a) -> Ptr (TPrintDialogData b) -> IO ()

-- | usage: (@printDialogDataAssignData obj wxdata@).
printDialogDataAssignData :: PrintDialogData  a -> PrintData  b ->  IO ()
printDialogDataAssignData _obj wxdata 
  = withObjectRef "printDialogDataAssignData" _obj $ \cobj__obj -> 
    withObjectPtr wxdata $ \cobj_wxdata -> 
    wxPrintDialogData_AssignData cobj__obj  cobj_wxdata  
foreign import ccall "wxPrintDialogData_AssignData" wxPrintDialogData_AssignData :: Ptr (TPrintDialogData a) -> Ptr (TPrintData b) -> IO ()

-- | usage: (@printDialogDataCreateDefault@).
printDialogDataCreateDefault ::  IO (PrintDialogData  ())
printDialogDataCreateDefault 
  = withManagedObjectResult $
    wxPrintDialogData_CreateDefault 
foreign import ccall "wxPrintDialogData_CreateDefault" wxPrintDialogData_CreateDefault :: IO (Ptr (TPrintDialogData ()))

-- | usage: (@printDialogDataCreateFromData printData@).
printDialogDataCreateFromData :: PrintData  a ->  IO (PrintDialogData  ())
printDialogDataCreateFromData printData 
  = withManagedObjectResult $
    withObjectPtr printData $ \cobj_printData -> 
    wxPrintDialogData_CreateFromData cobj_printData  
foreign import ccall "wxPrintDialogData_CreateFromData" wxPrintDialogData_CreateFromData :: Ptr (TPrintData a) -> IO (Ptr (TPrintDialogData ()))

-- | usage: (@printDialogDataDelete obj@).
printDialogDataDelete :: PrintDialogData  a ->  IO ()
printDialogDataDelete
  = objectDelete


-- | usage: (@printDialogDataEnableHelp obj flag@).
printDialogDataEnableHelp :: PrintDialogData  a -> Bool ->  IO ()
printDialogDataEnableHelp _obj flag 
  = withObjectRef "printDialogDataEnableHelp" _obj $ \cobj__obj -> 
    wxPrintDialogData_EnableHelp cobj__obj  (toCBool flag)  
foreign import ccall "wxPrintDialogData_EnableHelp" wxPrintDialogData_EnableHelp :: Ptr (TPrintDialogData a) -> CBool -> IO ()

-- | usage: (@printDialogDataEnablePageNumbers obj flag@).
printDialogDataEnablePageNumbers :: PrintDialogData  a -> Bool ->  IO ()
printDialogDataEnablePageNumbers _obj flag 
  = withObjectRef "printDialogDataEnablePageNumbers" _obj $ \cobj__obj -> 
    wxPrintDialogData_EnablePageNumbers cobj__obj  (toCBool flag)  
foreign import ccall "wxPrintDialogData_EnablePageNumbers" wxPrintDialogData_EnablePageNumbers :: Ptr (TPrintDialogData a) -> CBool -> IO ()

-- | usage: (@printDialogDataEnablePrintToFile obj flag@).
printDialogDataEnablePrintToFile :: PrintDialogData  a -> Bool ->  IO ()
printDialogDataEnablePrintToFile _obj flag 
  = withObjectRef "printDialogDataEnablePrintToFile" _obj $ \cobj__obj -> 
    wxPrintDialogData_EnablePrintToFile cobj__obj  (toCBool flag)  
foreign import ccall "wxPrintDialogData_EnablePrintToFile" wxPrintDialogData_EnablePrintToFile :: Ptr (TPrintDialogData a) -> CBool -> IO ()

-- | usage: (@printDialogDataEnableSelection obj flag@).
printDialogDataEnableSelection :: PrintDialogData  a -> Bool ->  IO ()
printDialogDataEnableSelection _obj flag 
  = withObjectRef "printDialogDataEnableSelection" _obj $ \cobj__obj -> 
    wxPrintDialogData_EnableSelection cobj__obj  (toCBool flag)  
foreign import ccall "wxPrintDialogData_EnableSelection" wxPrintDialogData_EnableSelection :: Ptr (TPrintDialogData a) -> CBool -> IO ()

-- | usage: (@printDialogDataGetAllPages obj@).
printDialogDataGetAllPages :: PrintDialogData  a ->  IO Int
printDialogDataGetAllPages _obj 
  = withIntResult $
    withObjectRef "printDialogDataGetAllPages" _obj $ \cobj__obj -> 
    wxPrintDialogData_GetAllPages cobj__obj  
foreign import ccall "wxPrintDialogData_GetAllPages" wxPrintDialogData_GetAllPages :: Ptr (TPrintDialogData a) -> IO CInt

-- | usage: (@printDialogDataGetCollate obj@).
printDialogDataGetCollate :: PrintDialogData  a ->  IO Bool
printDialogDataGetCollate _obj 
  = withBoolResult $
    withObjectRef "printDialogDataGetCollate" _obj $ \cobj__obj -> 
    wxPrintDialogData_GetCollate cobj__obj  
foreign import ccall "wxPrintDialogData_GetCollate" wxPrintDialogData_GetCollate :: Ptr (TPrintDialogData a) -> IO CBool

-- | usage: (@printDialogDataGetEnableHelp obj@).
printDialogDataGetEnableHelp :: PrintDialogData  a ->  IO Bool
printDialogDataGetEnableHelp _obj 
  = withBoolResult $
    withObjectRef "printDialogDataGetEnableHelp" _obj $ \cobj__obj -> 
    wxPrintDialogData_GetEnableHelp cobj__obj  
foreign import ccall "wxPrintDialogData_GetEnableHelp" wxPrintDialogData_GetEnableHelp :: Ptr (TPrintDialogData a) -> IO CBool

-- | usage: (@printDialogDataGetEnablePageNumbers obj@).
printDialogDataGetEnablePageNumbers :: PrintDialogData  a ->  IO Bool
printDialogDataGetEnablePageNumbers _obj 
  = withBoolResult $
    withObjectRef "printDialogDataGetEnablePageNumbers" _obj $ \cobj__obj -> 
    wxPrintDialogData_GetEnablePageNumbers cobj__obj  
foreign import ccall "wxPrintDialogData_GetEnablePageNumbers" wxPrintDialogData_GetEnablePageNumbers :: Ptr (TPrintDialogData a) -> IO CBool

-- | usage: (@printDialogDataGetEnablePrintToFile obj@).
printDialogDataGetEnablePrintToFile :: PrintDialogData  a ->  IO Bool
printDialogDataGetEnablePrintToFile _obj 
  = withBoolResult $
    withObjectRef "printDialogDataGetEnablePrintToFile" _obj $ \cobj__obj -> 
    wxPrintDialogData_GetEnablePrintToFile cobj__obj  
foreign import ccall "wxPrintDialogData_GetEnablePrintToFile" wxPrintDialogData_GetEnablePrintToFile :: Ptr (TPrintDialogData a) -> IO CBool

-- | usage: (@printDialogDataGetEnableSelection obj@).
printDialogDataGetEnableSelection :: PrintDialogData  a ->  IO Bool
printDialogDataGetEnableSelection _obj 
  = withBoolResult $
    withObjectRef "printDialogDataGetEnableSelection" _obj $ \cobj__obj -> 
    wxPrintDialogData_GetEnableSelection cobj__obj  
foreign import ccall "wxPrintDialogData_GetEnableSelection" wxPrintDialogData_GetEnableSelection :: Ptr (TPrintDialogData a) -> IO CBool

-- | usage: (@printDialogDataGetFromPage obj@).
printDialogDataGetFromPage :: PrintDialogData  a ->  IO Int
printDialogDataGetFromPage _obj 
  = withIntResult $
    withObjectRef "printDialogDataGetFromPage" _obj $ \cobj__obj -> 
    wxPrintDialogData_GetFromPage cobj__obj  
foreign import ccall "wxPrintDialogData_GetFromPage" wxPrintDialogData_GetFromPage :: Ptr (TPrintDialogData a) -> IO CInt

-- | usage: (@printDialogDataGetMaxPage obj@).
printDialogDataGetMaxPage :: PrintDialogData  a ->  IO Int
printDialogDataGetMaxPage _obj 
  = withIntResult $
    withObjectRef "printDialogDataGetMaxPage" _obj $ \cobj__obj -> 
    wxPrintDialogData_GetMaxPage cobj__obj  
foreign import ccall "wxPrintDialogData_GetMaxPage" wxPrintDialogData_GetMaxPage :: Ptr (TPrintDialogData a) -> IO CInt

-- | usage: (@printDialogDataGetMinPage obj@).
printDialogDataGetMinPage :: PrintDialogData  a ->  IO Int
printDialogDataGetMinPage _obj 
  = withIntResult $
    withObjectRef "printDialogDataGetMinPage" _obj $ \cobj__obj -> 
    wxPrintDialogData_GetMinPage cobj__obj  
foreign import ccall "wxPrintDialogData_GetMinPage" wxPrintDialogData_GetMinPage :: Ptr (TPrintDialogData a) -> IO CInt

-- | usage: (@printDialogDataGetNoCopies obj@).
printDialogDataGetNoCopies :: PrintDialogData  a ->  IO Int
printDialogDataGetNoCopies _obj 
  = withIntResult $
    withObjectRef "printDialogDataGetNoCopies" _obj $ \cobj__obj -> 
    wxPrintDialogData_GetNoCopies cobj__obj  
foreign import ccall "wxPrintDialogData_GetNoCopies" wxPrintDialogData_GetNoCopies :: Ptr (TPrintDialogData a) -> IO CInt

-- | usage: (@printDialogDataGetPrintData obj@).
printDialogDataGetPrintData :: PrintDialogData  a ->  IO (PrintData  ())
printDialogDataGetPrintData _obj 
  = withRefPrintData $ \pref -> 
    withObjectRef "printDialogDataGetPrintData" _obj $ \cobj__obj -> 
    wxPrintDialogData_GetPrintData cobj__obj   pref
foreign import ccall "wxPrintDialogData_GetPrintData" wxPrintDialogData_GetPrintData :: Ptr (TPrintDialogData a) -> Ptr (TPrintData ()) -> IO ()

-- | usage: (@printDialogDataGetPrintToFile obj@).
printDialogDataGetPrintToFile :: PrintDialogData  a ->  IO Bool
printDialogDataGetPrintToFile _obj 
  = withBoolResult $
    withObjectRef "printDialogDataGetPrintToFile" _obj $ \cobj__obj -> 
    wxPrintDialogData_GetPrintToFile cobj__obj  
foreign import ccall "wxPrintDialogData_GetPrintToFile" wxPrintDialogData_GetPrintToFile :: Ptr (TPrintDialogData a) -> IO CBool

-- | usage: (@printDialogDataGetSelection obj@).
printDialogDataGetSelection :: PrintDialogData  a ->  IO Bool
printDialogDataGetSelection _obj 
  = withBoolResult $
    withObjectRef "printDialogDataGetSelection" _obj $ \cobj__obj -> 
    wxPrintDialogData_GetSelection cobj__obj  
foreign import ccall "wxPrintDialogData_GetSelection" wxPrintDialogData_GetSelection :: Ptr (TPrintDialogData a) -> IO CBool

-- | usage: (@printDialogDataGetToPage obj@).
printDialogDataGetToPage :: PrintDialogData  a ->  IO Int
printDialogDataGetToPage _obj 
  = withIntResult $
    withObjectRef "printDialogDataGetToPage" _obj $ \cobj__obj -> 
    wxPrintDialogData_GetToPage cobj__obj  
foreign import ccall "wxPrintDialogData_GetToPage" wxPrintDialogData_GetToPage :: Ptr (TPrintDialogData a) -> IO CInt

-- | usage: (@printDialogDataSetAllPages obj flag@).
printDialogDataSetAllPages :: PrintDialogData  a -> Bool ->  IO ()
printDialogDataSetAllPages _obj flag 
  = withObjectRef "printDialogDataSetAllPages" _obj $ \cobj__obj -> 
    wxPrintDialogData_SetAllPages cobj__obj  (toCBool flag)  
foreign import ccall "wxPrintDialogData_SetAllPages" wxPrintDialogData_SetAllPages :: Ptr (TPrintDialogData a) -> CBool -> IO ()

-- | usage: (@printDialogDataSetCollate obj flag@).
printDialogDataSetCollate :: PrintDialogData  a -> Bool ->  IO ()
printDialogDataSetCollate _obj flag 
  = withObjectRef "printDialogDataSetCollate" _obj $ \cobj__obj -> 
    wxPrintDialogData_SetCollate cobj__obj  (toCBool flag)  
foreign import ccall "wxPrintDialogData_SetCollate" wxPrintDialogData_SetCollate :: Ptr (TPrintDialogData a) -> CBool -> IO ()

-- | usage: (@printDialogDataSetFromPage obj v@).
printDialogDataSetFromPage :: PrintDialogData  a -> Int ->  IO ()
printDialogDataSetFromPage _obj v 
  = withObjectRef "printDialogDataSetFromPage" _obj $ \cobj__obj -> 
    wxPrintDialogData_SetFromPage cobj__obj  (toCInt v)  
foreign import ccall "wxPrintDialogData_SetFromPage" wxPrintDialogData_SetFromPage :: Ptr (TPrintDialogData a) -> CInt -> IO ()

-- | usage: (@printDialogDataSetMaxPage obj v@).
printDialogDataSetMaxPage :: PrintDialogData  a -> Int ->  IO ()
printDialogDataSetMaxPage _obj v 
  = withObjectRef "printDialogDataSetMaxPage" _obj $ \cobj__obj -> 
    wxPrintDialogData_SetMaxPage cobj__obj  (toCInt v)  
foreign import ccall "wxPrintDialogData_SetMaxPage" wxPrintDialogData_SetMaxPage :: Ptr (TPrintDialogData a) -> CInt -> IO ()

-- | usage: (@printDialogDataSetMinPage obj v@).
printDialogDataSetMinPage :: PrintDialogData  a -> Int ->  IO ()
printDialogDataSetMinPage _obj v 
  = withObjectRef "printDialogDataSetMinPage" _obj $ \cobj__obj -> 
    wxPrintDialogData_SetMinPage cobj__obj  (toCInt v)  
foreign import ccall "wxPrintDialogData_SetMinPage" wxPrintDialogData_SetMinPage :: Ptr (TPrintDialogData a) -> CInt -> IO ()

-- | usage: (@printDialogDataSetNoCopies obj v@).
printDialogDataSetNoCopies :: PrintDialogData  a -> Int ->  IO ()
printDialogDataSetNoCopies _obj v 
  = withObjectRef "printDialogDataSetNoCopies" _obj $ \cobj__obj -> 
    wxPrintDialogData_SetNoCopies cobj__obj  (toCInt v)  
foreign import ccall "wxPrintDialogData_SetNoCopies" wxPrintDialogData_SetNoCopies :: Ptr (TPrintDialogData a) -> CInt -> IO ()

-- | usage: (@printDialogDataSetPrintData obj printData@).
printDialogDataSetPrintData :: PrintDialogData  a -> PrintData  b ->  IO ()
printDialogDataSetPrintData _obj printData 
  = withObjectRef "printDialogDataSetPrintData" _obj $ \cobj__obj -> 
    withObjectPtr printData $ \cobj_printData -> 
    wxPrintDialogData_SetPrintData cobj__obj  cobj_printData  
foreign import ccall "wxPrintDialogData_SetPrintData" wxPrintDialogData_SetPrintData :: Ptr (TPrintDialogData a) -> Ptr (TPrintData b) -> IO ()

-- | usage: (@printDialogDataSetPrintToFile obj flag@).
printDialogDataSetPrintToFile :: PrintDialogData  a -> Bool ->  IO ()
printDialogDataSetPrintToFile _obj flag 
  = withObjectRef "printDialogDataSetPrintToFile" _obj $ \cobj__obj -> 
    wxPrintDialogData_SetPrintToFile cobj__obj  (toCBool flag)  
foreign import ccall "wxPrintDialogData_SetPrintToFile" wxPrintDialogData_SetPrintToFile :: Ptr (TPrintDialogData a) -> CBool -> IO ()

-- | usage: (@printDialogDataSetSelection obj flag@).
printDialogDataSetSelection :: PrintDialogData  a -> Bool ->  IO ()
printDialogDataSetSelection _obj flag 
  = withObjectRef "printDialogDataSetSelection" _obj $ \cobj__obj -> 
    wxPrintDialogData_SetSelection cobj__obj  (toCBool flag)  
foreign import ccall "wxPrintDialogData_SetSelection" wxPrintDialogData_SetSelection :: Ptr (TPrintDialogData a) -> CBool -> IO ()

-- | usage: (@printDialogDataSetToPage obj v@).
printDialogDataSetToPage :: PrintDialogData  a -> Int ->  IO ()
printDialogDataSetToPage _obj v 
  = withObjectRef "printDialogDataSetToPage" _obj $ \cobj__obj -> 
    wxPrintDialogData_SetToPage cobj__obj  (toCInt v)  
foreign import ccall "wxPrintDialogData_SetToPage" wxPrintDialogData_SetToPage :: Ptr (TPrintDialogData a) -> CInt -> IO ()

-- | usage: (@printDialogGetPrintDC obj@).
printDialogGetPrintDC :: PrintDialog  a ->  IO (DC  ())
printDialogGetPrintDC _obj 
  = withObjectResult $
    withObjectRef "printDialogGetPrintDC" _obj $ \cobj__obj -> 
    wxPrintDialog_GetPrintDC cobj__obj  
foreign import ccall "wxPrintDialog_GetPrintDC" wxPrintDialog_GetPrintDC :: Ptr (TPrintDialog a) -> IO (Ptr (TDC ()))

-- | usage: (@printDialogGetPrintData obj@).
printDialogGetPrintData :: PrintDialog  a ->  IO (PrintData  ())
printDialogGetPrintData _obj 
  = withRefPrintData $ \pref -> 
    withObjectRef "printDialogGetPrintData" _obj $ \cobj__obj -> 
    wxPrintDialog_GetPrintData cobj__obj   pref
foreign import ccall "wxPrintDialog_GetPrintData" wxPrintDialog_GetPrintData :: Ptr (TPrintDialog a) -> Ptr (TPrintData ()) -> IO ()

-- | usage: (@printDialogGetPrintDialogData obj@).
printDialogGetPrintDialogData :: PrintDialog  a ->  IO (PrintDialogData  ())
printDialogGetPrintDialogData _obj 
  = withManagedObjectResult $
    withObjectRef "printDialogGetPrintDialogData" _obj $ \cobj__obj -> 
    wxPrintDialog_GetPrintDialogData cobj__obj  
foreign import ccall "wxPrintDialog_GetPrintDialogData" wxPrintDialog_GetPrintDialogData :: Ptr (TPrintDialog a) -> IO (Ptr (TPrintDialogData ()))

-- | usage: (@printPreviewCreateFromData printout printoutForPrinting wxdata@).
printPreviewCreateFromData :: Printout  a -> Printout  b -> PrintData  c ->  IO (PrintPreview  ())
printPreviewCreateFromData printout printoutForPrinting wxdata 
  = withObjectResult $
    withObjectPtr printout $ \cobj_printout -> 
    withObjectPtr printoutForPrinting $ \cobj_printoutForPrinting -> 
    withObjectPtr wxdata $ \cobj_wxdata -> 
    wxPrintPreview_CreateFromData cobj_printout  cobj_printoutForPrinting  cobj_wxdata  
foreign import ccall "wxPrintPreview_CreateFromData" wxPrintPreview_CreateFromData :: Ptr (TPrintout a) -> Ptr (TPrintout b) -> Ptr (TPrintData c) -> IO (Ptr (TPrintPreview ()))

-- | usage: (@printPreviewCreateFromDialogData printout printoutForPrinting wxdata@).
printPreviewCreateFromDialogData :: Printout  a -> Printout  b -> PrintDialogData  c ->  IO (PrintPreview  ())
printPreviewCreateFromDialogData printout printoutForPrinting wxdata 
  = withObjectResult $
    withObjectPtr printout $ \cobj_printout -> 
    withObjectPtr printoutForPrinting $ \cobj_printoutForPrinting -> 
    withObjectPtr wxdata $ \cobj_wxdata -> 
    wxPrintPreview_CreateFromDialogData cobj_printout  cobj_printoutForPrinting  cobj_wxdata  
foreign import ccall "wxPrintPreview_CreateFromDialogData" wxPrintPreview_CreateFromDialogData :: Ptr (TPrintout a) -> Ptr (TPrintout b) -> Ptr (TPrintDialogData c) -> IO (Ptr (TPrintPreview ()))

-- | usage: (@printPreviewDelete obj@).
printPreviewDelete :: PrintPreview  a ->  IO ()
printPreviewDelete
  = objectDelete


-- | usage: (@printPreviewDetermineScaling obj@).
printPreviewDetermineScaling :: PrintPreview  a ->  IO ()
printPreviewDetermineScaling _obj 
  = withObjectRef "printPreviewDetermineScaling" _obj $ \cobj__obj -> 
    wxPrintPreview_DetermineScaling cobj__obj  
foreign import ccall "wxPrintPreview_DetermineScaling" wxPrintPreview_DetermineScaling :: Ptr (TPrintPreview a) -> IO ()

-- | usage: (@printPreviewDrawBlankPage obj canvas dc@).
printPreviewDrawBlankPage :: PrintPreview  a -> PreviewCanvas  b -> DC  c ->  IO Bool
printPreviewDrawBlankPage _obj canvas dc 
  = withBoolResult $
    withObjectRef "printPreviewDrawBlankPage" _obj $ \cobj__obj -> 
    withObjectPtr canvas $ \cobj_canvas -> 
    withObjectPtr dc $ \cobj_dc -> 
    wxPrintPreview_DrawBlankPage cobj__obj  cobj_canvas  cobj_dc  
foreign import ccall "wxPrintPreview_DrawBlankPage" wxPrintPreview_DrawBlankPage :: Ptr (TPrintPreview a) -> Ptr (TPreviewCanvas b) -> Ptr (TDC c) -> IO CBool

-- | usage: (@printPreviewGetCanvas obj@).
printPreviewGetCanvas :: PrintPreview  a ->  IO (PreviewCanvas  ())
printPreviewGetCanvas _obj 
  = withObjectResult $
    withObjectRef "printPreviewGetCanvas" _obj $ \cobj__obj -> 
    wxPrintPreview_GetCanvas cobj__obj  
foreign import ccall "wxPrintPreview_GetCanvas" wxPrintPreview_GetCanvas :: Ptr (TPrintPreview a) -> IO (Ptr (TPreviewCanvas ()))

-- | usage: (@printPreviewGetCurrentPage obj@).
printPreviewGetCurrentPage :: PrintPreview  a ->  IO Int
printPreviewGetCurrentPage _obj 
  = withIntResult $
    withObjectRef "printPreviewGetCurrentPage" _obj $ \cobj__obj -> 
    wxPrintPreview_GetCurrentPage cobj__obj  
foreign import ccall "wxPrintPreview_GetCurrentPage" wxPrintPreview_GetCurrentPage :: Ptr (TPrintPreview a) -> IO CInt

-- | usage: (@printPreviewGetFrame obj@).
printPreviewGetFrame :: PrintPreview  a ->  IO (Frame  ())
printPreviewGetFrame _obj 
  = withObjectResult $
    withObjectRef "printPreviewGetFrame" _obj $ \cobj__obj -> 
    wxPrintPreview_GetFrame cobj__obj  
foreign import ccall "wxPrintPreview_GetFrame" wxPrintPreview_GetFrame :: Ptr (TPrintPreview a) -> IO (Ptr (TFrame ()))

-- | usage: (@printPreviewGetMaxPage obj@).
printPreviewGetMaxPage :: PrintPreview  a ->  IO Int
printPreviewGetMaxPage _obj 
  = withIntResult $
    withObjectRef "printPreviewGetMaxPage" _obj $ \cobj__obj -> 
    wxPrintPreview_GetMaxPage cobj__obj  
foreign import ccall "wxPrintPreview_GetMaxPage" wxPrintPreview_GetMaxPage :: Ptr (TPrintPreview a) -> IO CInt

-- | usage: (@printPreviewGetMinPage obj@).
printPreviewGetMinPage :: PrintPreview  a ->  IO Int
printPreviewGetMinPage _obj 
  = withIntResult $
    withObjectRef "printPreviewGetMinPage" _obj $ \cobj__obj -> 
    wxPrintPreview_GetMinPage cobj__obj  
foreign import ccall "wxPrintPreview_GetMinPage" wxPrintPreview_GetMinPage :: Ptr (TPrintPreview a) -> IO CInt

-- | usage: (@printPreviewGetPrintDialogData obj@).
printPreviewGetPrintDialogData :: PrintPreview  a ->  IO (PrintDialogData  ())
printPreviewGetPrintDialogData _obj 
  = withRefPrintDialogData $ \pref -> 
    withObjectRef "printPreviewGetPrintDialogData" _obj $ \cobj__obj -> 
    wxPrintPreview_GetPrintDialogData cobj__obj   pref
foreign import ccall "wxPrintPreview_GetPrintDialogData" wxPrintPreview_GetPrintDialogData :: Ptr (TPrintPreview a) -> Ptr (TPrintDialogData ()) -> IO ()

-- | usage: (@printPreviewGetPrintout obj@).
printPreviewGetPrintout :: PrintPreview  a ->  IO (Printout  ())
printPreviewGetPrintout _obj 
  = withObjectResult $
    withObjectRef "printPreviewGetPrintout" _obj $ \cobj__obj -> 
    wxPrintPreview_GetPrintout cobj__obj  
foreign import ccall "wxPrintPreview_GetPrintout" wxPrintPreview_GetPrintout :: Ptr (TPrintPreview a) -> IO (Ptr (TPrintout ()))

-- | usage: (@printPreviewGetPrintoutForPrinting obj@).
printPreviewGetPrintoutForPrinting :: PrintPreview  a ->  IO (Printout  ())
printPreviewGetPrintoutForPrinting _obj 
  = withObjectResult $
    withObjectRef "printPreviewGetPrintoutForPrinting" _obj $ \cobj__obj -> 
    wxPrintPreview_GetPrintoutForPrinting cobj__obj  
foreign import ccall "wxPrintPreview_GetPrintoutForPrinting" wxPrintPreview_GetPrintoutForPrinting :: Ptr (TPrintPreview a) -> IO (Ptr (TPrintout ()))

-- | usage: (@printPreviewGetZoom obj@).
printPreviewGetZoom :: PrintPreview  a ->  IO Int
printPreviewGetZoom _obj 
  = withIntResult $
    withObjectRef "printPreviewGetZoom" _obj $ \cobj__obj -> 
    wxPrintPreview_GetZoom cobj__obj  
foreign import ccall "wxPrintPreview_GetZoom" wxPrintPreview_GetZoom :: Ptr (TPrintPreview a) -> IO CInt

-- | usage: (@printPreviewIsOk obj@).
printPreviewIsOk :: PrintPreview  a ->  IO Bool
printPreviewIsOk _obj 
  = withBoolResult $
    withObjectRef "printPreviewIsOk" _obj $ \cobj__obj -> 
    wxPrintPreview_IsOk cobj__obj  
foreign import ccall "wxPrintPreview_IsOk" wxPrintPreview_IsOk :: Ptr (TPrintPreview a) -> IO CBool

-- | usage: (@printPreviewPaintPage obj canvas dc@).
printPreviewPaintPage :: PrintPreview  a -> PrintPreview  b -> DC  c ->  IO Bool
printPreviewPaintPage _obj canvas dc 
  = withBoolResult $
    withObjectRef "printPreviewPaintPage" _obj $ \cobj__obj -> 
    withObjectPtr canvas $ \cobj_canvas -> 
    withObjectPtr dc $ \cobj_dc -> 
    wxPrintPreview_PaintPage cobj__obj  cobj_canvas  cobj_dc  
foreign import ccall "wxPrintPreview_PaintPage" wxPrintPreview_PaintPage :: Ptr (TPrintPreview a) -> Ptr (TPrintPreview b) -> Ptr (TDC c) -> IO CBool

-- | usage: (@printPreviewPrint obj interactive@).
printPreviewPrint :: PrintPreview  a -> Bool ->  IO Bool
printPreviewPrint _obj interactive 
  = withBoolResult $
    withObjectRef "printPreviewPrint" _obj $ \cobj__obj -> 
    wxPrintPreview_Print cobj__obj  (toCBool interactive)  
foreign import ccall "wxPrintPreview_Print" wxPrintPreview_Print :: Ptr (TPrintPreview a) -> CBool -> IO CBool

-- | usage: (@printPreviewRenderPage obj pageNum@).
printPreviewRenderPage :: PrintPreview  a -> Int ->  IO Bool
printPreviewRenderPage _obj pageNum 
  = withBoolResult $
    withObjectRef "printPreviewRenderPage" _obj $ \cobj__obj -> 
    wxPrintPreview_RenderPage cobj__obj  (toCInt pageNum)  
foreign import ccall "wxPrintPreview_RenderPage" wxPrintPreview_RenderPage :: Ptr (TPrintPreview a) -> CInt -> IO CBool

-- | usage: (@printPreviewSetCanvas obj canvas@).
printPreviewSetCanvas :: PrintPreview  a -> PreviewCanvas  b ->  IO ()
printPreviewSetCanvas _obj canvas 
  = withObjectRef "printPreviewSetCanvas" _obj $ \cobj__obj -> 
    withObjectPtr canvas $ \cobj_canvas -> 
    wxPrintPreview_SetCanvas cobj__obj  cobj_canvas  
foreign import ccall "wxPrintPreview_SetCanvas" wxPrintPreview_SetCanvas :: Ptr (TPrintPreview a) -> Ptr (TPreviewCanvas b) -> IO ()

-- | usage: (@printPreviewSetCurrentPage obj pageNum@).
printPreviewSetCurrentPage :: PrintPreview  a -> Int ->  IO Bool
printPreviewSetCurrentPage _obj pageNum 
  = withBoolResult $
    withObjectRef "printPreviewSetCurrentPage" _obj $ \cobj__obj -> 
    wxPrintPreview_SetCurrentPage cobj__obj  (toCInt pageNum)  
foreign import ccall "wxPrintPreview_SetCurrentPage" wxPrintPreview_SetCurrentPage :: Ptr (TPrintPreview a) -> CInt -> IO CBool

-- | usage: (@printPreviewSetFrame obj frame@).
printPreviewSetFrame :: PrintPreview  a -> Frame  b ->  IO ()
printPreviewSetFrame _obj frame 
  = withObjectRef "printPreviewSetFrame" _obj $ \cobj__obj -> 
    withObjectPtr frame $ \cobj_frame -> 
    wxPrintPreview_SetFrame cobj__obj  cobj_frame  
foreign import ccall "wxPrintPreview_SetFrame" wxPrintPreview_SetFrame :: Ptr (TPrintPreview a) -> Ptr (TFrame b) -> IO ()

-- | usage: (@printPreviewSetOk obj ok@).
printPreviewSetOk :: PrintPreview  a -> Bool ->  IO ()
printPreviewSetOk _obj ok 
  = withObjectRef "printPreviewSetOk" _obj $ \cobj__obj -> 
    wxPrintPreview_SetOk cobj__obj  (toCBool ok)  
foreign import ccall "wxPrintPreview_SetOk" wxPrintPreview_SetOk :: Ptr (TPrintPreview a) -> CBool -> IO ()

-- | usage: (@printPreviewSetPrintout obj printout@).
printPreviewSetPrintout :: PrintPreview  a -> Printout  b ->  IO ()
printPreviewSetPrintout _obj printout 
  = withObjectRef "printPreviewSetPrintout" _obj $ \cobj__obj -> 
    withObjectPtr printout $ \cobj_printout -> 
    wxPrintPreview_SetPrintout cobj__obj  cobj_printout  
foreign import ccall "wxPrintPreview_SetPrintout" wxPrintPreview_SetPrintout :: Ptr (TPrintPreview a) -> Ptr (TPrintout b) -> IO ()

-- | usage: (@printPreviewSetZoom obj percent@).
printPreviewSetZoom :: PrintPreview  a -> Int ->  IO ()
printPreviewSetZoom _obj percent 
  = withObjectRef "printPreviewSetZoom" _obj $ \cobj__obj -> 
    wxPrintPreview_SetZoom cobj__obj  (toCInt percent)  
foreign import ccall "wxPrintPreview_SetZoom" wxPrintPreview_SetZoom :: Ptr (TPrintPreview a) -> CInt -> IO ()

-- | usage: (@printerCreate wxdata@).
printerCreate :: PrintDialogData  a ->  IO (Printer  ())
printerCreate wxdata 
  = withObjectResult $
    withObjectPtr wxdata $ \cobj_wxdata -> 
    wxPrinter_Create cobj_wxdata  
foreign import ccall "wxPrinter_Create" wxPrinter_Create :: Ptr (TPrintDialogData a) -> IO (Ptr (TPrinter ()))

-- | usage: (@printerCreateAbortWindow obj parent printout@).
printerCreateAbortWindow :: Printer  a -> Window  b -> Printout  c ->  IO (Window  ())
printerCreateAbortWindow _obj parent printout 
  = withObjectResult $
    withObjectRef "printerCreateAbortWindow" _obj $ \cobj__obj -> 
    withObjectPtr parent $ \cobj_parent -> 
    withObjectPtr printout $ \cobj_printout -> 
    wxPrinter_CreateAbortWindow cobj__obj  cobj_parent  cobj_printout  
foreign import ccall "wxPrinter_CreateAbortWindow" wxPrinter_CreateAbortWindow :: Ptr (TPrinter a) -> Ptr (TWindow b) -> Ptr (TPrintout c) -> IO (Ptr (TWindow ()))

-- | usage: (@printerDCCreate wxdata@).
printerDCCreate :: PrintData  a ->  IO (PrinterDC  ())
printerDCCreate wxdata 
  = withObjectResult $
    withObjectPtr wxdata $ \cobj_wxdata -> 
    wxPrinterDC_Create cobj_wxdata  
foreign import ccall "wxPrinterDC_Create" wxPrinterDC_Create :: Ptr (TPrintData a) -> IO (Ptr (TPrinterDC ()))

-- | usage: (@printerDCDelete self@).
printerDCDelete :: PrinterDC  a ->  IO ()
printerDCDelete
  = objectDelete


-- | usage: (@printerDCGetPaperRect self@).
printerDCGetPaperRect :: PrinterDC  a ->  IO (Rect)
printerDCGetPaperRect self 
  = withWxRectResult $
    withObjectRef "printerDCGetPaperRect" self $ \cobj_self -> 
    wxPrinterDC_GetPaperRect cobj_self  
foreign import ccall "wxPrinterDC_GetPaperRect" wxPrinterDC_GetPaperRect :: Ptr (TPrinterDC a) -> IO (Ptr (TWxRect ()))

-- | usage: (@printerDelete obj@).
printerDelete :: Printer  a ->  IO ()
printerDelete
  = objectDelete


-- | usage: (@printerGetAbort obj@).
printerGetAbort :: Printer  a ->  IO Bool
printerGetAbort _obj 
  = withBoolResult $
    withObjectRef "printerGetAbort" _obj $ \cobj__obj -> 
    wxPrinter_GetAbort cobj__obj  
foreign import ccall "wxPrinter_GetAbort" wxPrinter_GetAbort :: Ptr (TPrinter a) -> IO CBool

-- | usage: (@printerGetLastError obj@).
printerGetLastError :: Printer  a ->  IO Int
printerGetLastError _obj 
  = withIntResult $
    withObjectRef "printerGetLastError" _obj $ \cobj__obj -> 
    wxPrinter_GetLastError cobj__obj  
foreign import ccall "wxPrinter_GetLastError" wxPrinter_GetLastError :: Ptr (TPrinter a) -> IO CInt

-- | usage: (@printerGetPrintDialogData obj@).
printerGetPrintDialogData :: Printer  a ->  IO (PrintDialogData  ())
printerGetPrintDialogData _obj 
  = withRefPrintDialogData $ \pref -> 
    withObjectRef "printerGetPrintDialogData" _obj $ \cobj__obj -> 
    wxPrinter_GetPrintDialogData cobj__obj   pref
foreign import ccall "wxPrinter_GetPrintDialogData" wxPrinter_GetPrintDialogData :: Ptr (TPrinter a) -> Ptr (TPrintDialogData ()) -> IO ()

-- | usage: (@printerPrint obj parent printout prompt@).
printerPrint :: Printer  a -> Window  b -> Printout  c -> Bool ->  IO Bool
printerPrint _obj parent printout prompt 
  = withBoolResult $
    withObjectRef "printerPrint" _obj $ \cobj__obj -> 
    withObjectPtr parent $ \cobj_parent -> 
    withObjectPtr printout $ \cobj_printout -> 
    wxPrinter_Print cobj__obj  cobj_parent  cobj_printout  (toCBool prompt)  
foreign import ccall "wxPrinter_Print" wxPrinter_Print :: Ptr (TPrinter a) -> Ptr (TWindow b) -> Ptr (TPrintout c) -> CBool -> IO CBool

-- | usage: (@printerPrintDialog obj parent@).
printerPrintDialog :: Printer  a -> Window  b ->  IO (DC  ())
printerPrintDialog _obj parent 
  = withObjectResult $
    withObjectRef "printerPrintDialog" _obj $ \cobj__obj -> 
    withObjectPtr parent $ \cobj_parent -> 
    wxPrinter_PrintDialog cobj__obj  cobj_parent  
foreign import ccall "wxPrinter_PrintDialog" wxPrinter_PrintDialog :: Ptr (TPrinter a) -> Ptr (TWindow b) -> IO (Ptr (TDC ()))

-- | usage: (@printerReportError obj parent printout message@).
printerReportError :: Printer  a -> Window  b -> Printout  c -> String ->  IO ()
printerReportError _obj parent printout message 
  = withObjectRef "printerReportError" _obj $ \cobj__obj -> 
    withObjectPtr parent $ \cobj_parent -> 
    withObjectPtr printout $ \cobj_printout -> 
    withStringPtr message $ \cobj_message -> 
    wxPrinter_ReportError cobj__obj  cobj_parent  cobj_printout  cobj_message  
foreign import ccall "wxPrinter_ReportError" wxPrinter_ReportError :: Ptr (TPrinter a) -> Ptr (TWindow b) -> Ptr (TPrintout c) -> Ptr (TWxString d) -> IO ()

-- | usage: (@printerSetup obj parent@).
printerSetup :: Printer  a -> Window  b ->  IO Bool
printerSetup _obj parent 
  = withBoolResult $
    withObjectRef "printerSetup" _obj $ \cobj__obj -> 
    withObjectPtr parent $ \cobj_parent -> 
    wxPrinter_Setup cobj__obj  cobj_parent  
foreign import ccall "wxPrinter_Setup" wxPrinter_Setup :: Ptr (TPrinter a) -> Ptr (TWindow b) -> IO CBool

-- | usage: (@printoutGetDC obj@).
printoutGetDC :: Printout  a ->  IO (DC  ())
printoutGetDC _obj 
  = withObjectResult $
    withObjectRef "printoutGetDC" _obj $ \cobj__obj -> 
    wxPrintout_GetDC cobj__obj  
foreign import ccall "wxPrintout_GetDC" wxPrintout_GetDC :: Ptr (TPrintout a) -> IO (Ptr (TDC ()))

-- | usage: (@printoutGetPPIPrinter obj@).
printoutGetPPIPrinter :: Printout  a ->  IO Point
printoutGetPPIPrinter _obj 
  = withPointResult $ \px py -> 
    withObjectRef "printoutGetPPIPrinter" _obj $ \cobj__obj -> 
    wxPrintout_GetPPIPrinter cobj__obj   px py
foreign import ccall "wxPrintout_GetPPIPrinter" wxPrintout_GetPPIPrinter :: Ptr (TPrintout a) -> Ptr CInt -> Ptr CInt -> IO ()

-- | usage: (@printoutGetPPIScreen obj@).
printoutGetPPIScreen :: Printout  a ->  IO Point
printoutGetPPIScreen _obj 
  = withPointResult $ \px py -> 
    withObjectRef "printoutGetPPIScreen" _obj $ \cobj__obj -> 
    wxPrintout_GetPPIScreen cobj__obj   px py
foreign import ccall "wxPrintout_GetPPIScreen" wxPrintout_GetPPIScreen :: Ptr (TPrintout a) -> Ptr CInt -> Ptr CInt -> IO ()

-- | usage: (@printoutGetPageSizeMM obj@).
printoutGetPageSizeMM :: Printout  a ->  IO Size
printoutGetPageSizeMM _obj 
  = withSizeResult $ \pw ph -> 
    withObjectRef "printoutGetPageSizeMM" _obj $ \cobj__obj -> 
    wxPrintout_GetPageSizeMM cobj__obj   pw ph
foreign import ccall "wxPrintout_GetPageSizeMM" wxPrintout_GetPageSizeMM :: Ptr (TPrintout a) -> Ptr CInt -> Ptr CInt -> IO ()

-- | usage: (@printoutGetPageSizePixels obj@).
printoutGetPageSizePixels :: Printout  a ->  IO Size
printoutGetPageSizePixels _obj 
  = withSizeResult $ \pw ph -> 
    withObjectRef "printoutGetPageSizePixels" _obj $ \cobj__obj -> 
    wxPrintout_GetPageSizePixels cobj__obj   pw ph
foreign import ccall "wxPrintout_GetPageSizePixels" wxPrintout_GetPageSizePixels :: Ptr (TPrintout a) -> Ptr CInt -> Ptr CInt -> IO ()

-- | usage: (@printoutGetTitle obj@).
printoutGetTitle :: Printout  a ->  IO (String)
printoutGetTitle _obj 
  = withManagedStringResult $
    withObjectRef "printoutGetTitle" _obj $ \cobj__obj -> 
    wxPrintout_GetTitle cobj__obj  
foreign import ccall "wxPrintout_GetTitle" wxPrintout_GetTitle :: Ptr (TPrintout a) -> IO (Ptr (TWxString ()))

-- | usage: (@printoutIsPreview obj@).
printoutIsPreview :: Printout  a ->  IO Bool
printoutIsPreview _obj 
  = withBoolResult $
    withObjectRef "printoutIsPreview" _obj $ \cobj__obj -> 
    wxPrintout_IsPreview cobj__obj  
foreign import ccall "wxPrintout_IsPreview" wxPrintout_IsPreview :: Ptr (TPrintout a) -> IO CBool

-- | usage: (@printoutSetDC obj dc@).
printoutSetDC :: Printout  a -> DC  b ->  IO ()
printoutSetDC _obj dc 
  = withObjectRef "printoutSetDC" _obj $ \cobj__obj -> 
    withObjectPtr dc $ \cobj_dc -> 
    wxPrintout_SetDC cobj__obj  cobj_dc  
foreign import ccall "wxPrintout_SetDC" wxPrintout_SetDC :: Ptr (TPrintout a) -> Ptr (TDC b) -> IO ()

-- | usage: (@printoutSetPPIPrinter obj xy@).
printoutSetPPIPrinter :: Printout  a -> Point ->  IO ()
printoutSetPPIPrinter _obj xy 
  = withObjectRef "printoutSetPPIPrinter" _obj $ \cobj__obj -> 
    wxPrintout_SetPPIPrinter cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
foreign import ccall "wxPrintout_SetPPIPrinter" wxPrintout_SetPPIPrinter :: Ptr (TPrintout a) -> CInt -> CInt -> IO ()

-- | usage: (@printoutSetPPIScreen obj xy@).
printoutSetPPIScreen :: Printout  a -> Point ->  IO ()
printoutSetPPIScreen _obj xy 
  = withObjectRef "printoutSetPPIScreen" _obj $ \cobj__obj -> 
    wxPrintout_SetPPIScreen cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
foreign import ccall "wxPrintout_SetPPIScreen" wxPrintout_SetPPIScreen :: Ptr (TPrintout a) -> CInt -> CInt -> IO ()

-- | usage: (@printoutSetPageSizeMM obj wh@).
printoutSetPageSizeMM :: Printout  a -> Size ->  IO ()
printoutSetPageSizeMM _obj wh 
  = withObjectRef "printoutSetPageSizeMM" _obj $ \cobj__obj -> 
    wxPrintout_SetPageSizeMM cobj__obj  (toCIntSizeW wh) (toCIntSizeH wh)  
foreign import ccall "wxPrintout_SetPageSizeMM" wxPrintout_SetPageSizeMM :: Ptr (TPrintout a) -> CInt -> CInt -> IO ()

-- | usage: (@printoutSetPageSizePixels obj wh@).
printoutSetPageSizePixels :: Printout  a -> Size ->  IO ()
printoutSetPageSizePixels _obj wh 
  = withObjectRef "printoutSetPageSizePixels" _obj $ \cobj__obj -> 
    wxPrintout_SetPageSizePixels cobj__obj  (toCIntSizeW wh) (toCIntSizeH wh)  
foreign import ccall "wxPrintout_SetPageSizePixels" wxPrintout_SetPageSizePixels :: Ptr (TPrintout a) -> CInt -> CInt -> IO ()

-- | usage: (@processCloseOutput obj@).
processCloseOutput :: Process  a ->  IO ()
processCloseOutput _obj 
  = withObjectRef "processCloseOutput" _obj $ \cobj__obj -> 
    wxProcess_CloseOutput cobj__obj  
foreign import ccall "wxProcess_CloseOutput" wxProcess_CloseOutput :: Ptr (TProcess a) -> IO ()

-- | usage: (@processCreateDefault prt id@).
processCreateDefault :: Window  a -> Id ->  IO (Process  ())
processCreateDefault _prt _id 
  = withObjectResult $
    withObjectPtr _prt $ \cobj__prt -> 
    wxProcess_CreateDefault cobj__prt  (toCInt _id)  
foreign import ccall "wxProcess_CreateDefault" wxProcess_CreateDefault :: Ptr (TWindow a) -> CInt -> IO (Ptr (TProcess ()))

-- | usage: (@processCreateRedirect prt rdr@).
processCreateRedirect :: Window  a -> Bool ->  IO (Process  ())
processCreateRedirect _prt _rdr 
  = withObjectResult $
    withObjectPtr _prt $ \cobj__prt -> 
    wxProcess_CreateRedirect cobj__prt  (toCBool _rdr)  
foreign import ccall "wxProcess_CreateRedirect" wxProcess_CreateRedirect :: Ptr (TWindow a) -> CBool -> IO (Ptr (TProcess ()))

-- | usage: (@processDelete obj@).
processDelete :: Process  a ->  IO ()
processDelete
  = objectDelete


-- | usage: (@processDetach obj@).
processDetach :: Process  a ->  IO ()
processDetach _obj 
  = withObjectRef "processDetach" _obj $ \cobj__obj -> 
    wxProcess_Detach cobj__obj  
foreign import ccall "wxProcess_Detach" wxProcess_Detach :: Ptr (TProcess a) -> IO ()

-- | usage: (@processEventGetExitCode obj@).
processEventGetExitCode :: ProcessEvent  a ->  IO Int
processEventGetExitCode _obj 
  = withIntResult $
    withObjectRef "processEventGetExitCode" _obj $ \cobj__obj -> 
    wxProcessEvent_GetExitCode cobj__obj  
foreign import ccall "wxProcessEvent_GetExitCode" wxProcessEvent_GetExitCode :: Ptr (TProcessEvent a) -> IO CInt

-- | usage: (@processEventGetPid obj@).
processEventGetPid :: ProcessEvent  a ->  IO Int
processEventGetPid _obj 
  = withIntResult $
    withObjectRef "processEventGetPid" _obj $ \cobj__obj -> 
    wxProcessEvent_GetPid cobj__obj  
foreign import ccall "wxProcessEvent_GetPid" wxProcessEvent_GetPid :: Ptr (TProcessEvent a) -> IO CInt

-- | usage: (@processGetErrorStream obj@).
processGetErrorStream :: Process  a ->  IO (InputStream  ())
processGetErrorStream _obj 
  = withObjectResult $
    withObjectRef "processGetErrorStream" _obj $ \cobj__obj -> 
    wxProcess_GetErrorStream cobj__obj  
foreign import ccall "wxProcess_GetErrorStream" wxProcess_GetErrorStream :: Ptr (TProcess a) -> IO (Ptr (TInputStream ()))

-- | usage: (@processGetInputStream obj@).
processGetInputStream :: Process  a ->  IO (InputStream  ())
processGetInputStream _obj 
  = withObjectResult $
    withObjectRef "processGetInputStream" _obj $ \cobj__obj -> 
    wxProcess_GetInputStream cobj__obj  
foreign import ccall "wxProcess_GetInputStream" wxProcess_GetInputStream :: Ptr (TProcess a) -> IO (Ptr (TInputStream ()))

-- | usage: (@processGetOutputStream obj@).
processGetOutputStream :: Process  a ->  IO (OutputStream  ())
processGetOutputStream _obj 
  = withObjectResult $
    withObjectRef "processGetOutputStream" _obj $ \cobj__obj -> 
    wxProcess_GetOutputStream cobj__obj  
foreign import ccall "wxProcess_GetOutputStream" wxProcess_GetOutputStream :: Ptr (TProcess a) -> IO (Ptr (TOutputStream ()))

-- | usage: (@processIsErrorAvailable obj@).
processIsErrorAvailable :: Process  a ->  IO Bool
processIsErrorAvailable _obj 
  = withBoolResult $
    withObjectRef "processIsErrorAvailable" _obj $ \cobj__obj -> 
    wxProcess_IsErrorAvailable cobj__obj  
foreign import ccall "wxProcess_IsErrorAvailable" wxProcess_IsErrorAvailable :: Ptr (TProcess a) -> IO CBool

-- | usage: (@processIsInputAvailable obj@).
processIsInputAvailable :: Process  a ->  IO Bool
processIsInputAvailable _obj 
  = withBoolResult $
    withObjectRef "processIsInputAvailable" _obj $ \cobj__obj -> 
    wxProcess_IsInputAvailable cobj__obj  
foreign import ccall "wxProcess_IsInputAvailable" wxProcess_IsInputAvailable :: Ptr (TProcess a) -> IO CBool

-- | usage: (@processIsInputOpened obj@).
processIsInputOpened :: Process  a ->  IO Bool
processIsInputOpened _obj 
  = withBoolResult $
    withObjectRef "processIsInputOpened" _obj $ \cobj__obj -> 
    wxProcess_IsInputOpened cobj__obj  
foreign import ccall "wxProcess_IsInputOpened" wxProcess_IsInputOpened :: Ptr (TProcess a) -> IO CBool

-- | usage: (@processIsRedirected obj@).
processIsRedirected :: Process  a ->  IO Bool
processIsRedirected _obj 
  = withBoolResult $
    withObjectRef "processIsRedirected" _obj $ \cobj__obj -> 
    wxProcess_IsRedirected cobj__obj  
foreign import ccall "wxProcess_IsRedirected" wxProcess_IsRedirected :: Ptr (TProcess a) -> IO CBool

-- | usage: (@processOpen cmd flags@).
processOpen :: String -> Int ->  IO (Process  ())
processOpen cmd flags 
  = withObjectResult $
    withStringPtr cmd $ \cobj_cmd -> 
    wxProcess_Open cobj_cmd  (toCInt flags)  
foreign import ccall "wxProcess_Open" wxProcess_Open :: Ptr (TWxString a) -> CInt -> IO (Ptr (TProcess ()))

-- | usage: (@processRedirect obj@).
processRedirect :: Process  a ->  IO ()
processRedirect _obj 
  = withObjectRef "processRedirect" _obj $ \cobj__obj -> 
    wxProcess_Redirect cobj__obj  
foreign import ccall "wxProcess_Redirect" wxProcess_Redirect :: Ptr (TProcess a) -> IO ()

-- | usage: (@progressDialogCreate title message max parent style@).
progressDialogCreate :: String -> String -> Int -> Window  d -> Int ->  IO (ProgressDialog  ())
progressDialogCreate title message max parent style 
  = withObjectResult $
    withStringPtr title $ \cobj_title -> 
    withStringPtr message $ \cobj_message -> 
    withObjectPtr parent $ \cobj_parent -> 
    wxProgressDialog_Create cobj_title  cobj_message  (toCInt max)  cobj_parent  (toCInt style)  
foreign import ccall "wxProgressDialog_Create" wxProgressDialog_Create :: Ptr (TWxString a) -> Ptr (TWxString b) -> CInt -> Ptr (TWindow d) -> CInt -> IO (Ptr (TProgressDialog ()))

-- | usage: (@progressDialogResume obj@).
progressDialogResume :: ProgressDialog  a ->  IO ()
progressDialogResume obj 
  = withObjectRef "progressDialogResume" obj $ \cobj_obj -> 
    wxProgressDialog_Resume cobj_obj  
foreign import ccall "wxProgressDialog_Resume" wxProgressDialog_Resume :: Ptr (TProgressDialog a) -> IO ()

-- | usage: (@progressDialogUpdate obj value@).
progressDialogUpdate :: ProgressDialog  a -> Int ->  IO Bool
progressDialogUpdate obj value 
  = withBoolResult $
    withObjectRef "progressDialogUpdate" obj $ \cobj_obj -> 
    wxProgressDialog_Update cobj_obj  (toCInt value)  
foreign import ccall "wxProgressDialog_Update" wxProgressDialog_Update :: Ptr (TProgressDialog a) -> CInt -> IO CBool

-- | usage: (@progressDialogUpdateWithMessage obj value message@).
progressDialogUpdateWithMessage :: ProgressDialog  a -> Int -> String ->  IO Bool
progressDialogUpdateWithMessage obj value message 
  = withBoolResult $
    withObjectRef "progressDialogUpdateWithMessage" obj $ \cobj_obj -> 
    withStringPtr message $ \cobj_message -> 
    wxProgressDialog_UpdateWithMessage cobj_obj  (toCInt value)  cobj_message  
foreign import ccall "wxProgressDialog_UpdateWithMessage" wxProgressDialog_UpdateWithMessage :: Ptr (TProgressDialog a) -> CInt -> Ptr (TWxString c) -> IO CBool

-- | usage: (@propertyCategoryCreate label@).
propertyCategoryCreate :: String ->  IO (PropertyCategory  ())
propertyCategoryCreate label 
  = withObjectResult $
    withStringPtr label $ \cobj_label -> 
    wxPropertyCategory_Create cobj_label  
foreign import ccall "wxPropertyCategory_Create" wxPropertyCategory_Create :: Ptr (TWxString a) -> IO (Ptr (TPropertyCategory ()))

-- | usage: (@propertyGridAppend obj prop@).
propertyGridAppend :: PropertyGrid  a -> PGProperty  b ->  IO (PGProperty  ())
propertyGridAppend _obj prop 
  = withObjectResult $
    withObjectRef "propertyGridAppend" _obj $ \cobj__obj -> 
    withObjectPtr prop $ \cobj_prop -> 
    wxPropertyGrid_Append cobj__obj  cobj_prop  
foreign import ccall "wxPropertyGrid_Append" wxPropertyGrid_Append :: Ptr (TPropertyGrid a) -> Ptr (TPGProperty b) -> IO (Ptr (TPGProperty ()))

-- | usage: (@propertyGridCreate prt id lfttopwdthgt stl@).
propertyGridCreate :: Window  a -> Id -> Rect -> Style ->  IO (PropertyGrid  ())
propertyGridCreate _prt _id _lfttopwdthgt _stl 
  = withObjectResult $
    withObjectPtr _prt $ \cobj__prt -> 
    wxPropertyGrid_Create cobj__prt  (toCInt _id)  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
foreign import ccall "wxPropertyGrid_Create" wxPropertyGrid_Create :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TPropertyGrid ()))

-- | usage: (@propertyGridDisableProperty obj propName@).
propertyGridDisableProperty :: PropertyGrid  a -> String ->  IO Bool
propertyGridDisableProperty _obj propName 
  = withBoolResult $
    withObjectRef "propertyGridDisableProperty" _obj $ \cobj__obj -> 
    withStringPtr propName $ \cobj_propName -> 
    wxPropertyGrid_DisableProperty cobj__obj  cobj_propName  
foreign import ccall "wxPropertyGrid_DisableProperty" wxPropertyGrid_DisableProperty :: Ptr (TPropertyGrid a) -> Ptr (TWxString b) -> IO CBool

-- | usage: (@propertyGridEventGetProperty obj@).
propertyGridEventGetProperty :: PropertyGridEvent  a ->  IO (PGProperty  ())
propertyGridEventGetProperty _obj 
  = withObjectResult $
    withObjectRef "propertyGridEventGetProperty" _obj $ \cobj__obj -> 
    wxPropertyGridEvent_GetProperty cobj__obj  
foreign import ccall "wxPropertyGridEvent_GetProperty" wxPropertyGridEvent_GetProperty :: Ptr (TPropertyGridEvent a) -> IO (Ptr (TPGProperty ()))

-- | usage: (@propertyGridEventHasProperty obj@).
propertyGridEventHasProperty :: PropertyGridEvent  a ->  IO Bool
propertyGridEventHasProperty _obj 
  = withBoolResult $
    withObjectRef "propertyGridEventHasProperty" _obj $ \cobj__obj -> 
    wxPropertyGridEvent_HasProperty cobj__obj  
foreign import ccall "wxPropertyGridEvent_HasProperty" wxPropertyGridEvent_HasProperty :: Ptr (TPropertyGridEvent a) -> IO CBool

-- | usage: (@pushProvider provider@).
pushProvider :: ArtProvider  a ->  IO ()
pushProvider provider 
  = withObjectPtr provider $ \cobj_provider -> 
    wx_PushProvider cobj_provider  
foreign import ccall "PushProvider" wx_PushProvider :: Ptr (TArtProvider a) -> IO ()

-- | usage: (@quantize src dest desiredNoColours eightBitData flags@).
quantize :: Image  a -> Image  b -> Int -> Ptr  d -> Int ->  IO Bool
quantize src dest desiredNoColours eightBitData flags 
  = withBoolResult $
    withObjectPtr src $ \cobj_src -> 
    withObjectPtr dest $ \cobj_dest -> 
    wx_Quantize cobj_src  cobj_dest  (toCInt desiredNoColours)  eightBitData  (toCInt flags)  
foreign import ccall "Quantize" wx_Quantize :: Ptr (TImage a) -> Ptr (TImage b) -> CInt -> Ptr  d -> CInt -> IO CBool

-- | usage: (@quantizePalette src dest pPalette desiredNoColours eightBitData flags@).
quantizePalette :: Image  a -> Image  b -> Ptr  c -> Int -> Ptr  e -> Int ->  IO Bool
quantizePalette src dest pPalette desiredNoColours eightBitData flags 
  = withBoolResult $
    withObjectPtr src $ \cobj_src -> 
    withObjectPtr dest $ \cobj_dest -> 
    wx_QuantizePalette cobj_src  cobj_dest  pPalette  (toCInt desiredNoColours)  eightBitData  (toCInt flags)  
foreign import ccall "QuantizePalette" wx_QuantizePalette :: Ptr (TImage a) -> Ptr (TImage b) -> Ptr  c -> CInt -> Ptr  e -> CInt -> IO CBool

-- | usage: (@queryLayoutInfoEventCreate id@).
queryLayoutInfoEventCreate :: Id ->  IO (QueryLayoutInfoEvent  ())
queryLayoutInfoEventCreate id 
  = withObjectResult $
    wxQueryLayoutInfoEvent_Create (toCInt id)  
foreign import ccall "wxQueryLayoutInfoEvent_Create" wxQueryLayoutInfoEvent_Create :: CInt -> IO (Ptr (TQueryLayoutInfoEvent ()))

-- | usage: (@queryLayoutInfoEventGetAlignment obj@).
queryLayoutInfoEventGetAlignment :: QueryLayoutInfoEvent  a ->  IO Int
queryLayoutInfoEventGetAlignment _obj 
  = withIntResult $
    withObjectRef "queryLayoutInfoEventGetAlignment" _obj $ \cobj__obj -> 
    wxQueryLayoutInfoEvent_GetAlignment cobj__obj  
foreign import ccall "wxQueryLayoutInfoEvent_GetAlignment" wxQueryLayoutInfoEvent_GetAlignment :: Ptr (TQueryLayoutInfoEvent a) -> IO CInt

-- | usage: (@queryLayoutInfoEventGetFlags obj@).
queryLayoutInfoEventGetFlags :: QueryLayoutInfoEvent  a ->  IO Int
queryLayoutInfoEventGetFlags _obj 
  = withIntResult $
    withObjectRef "queryLayoutInfoEventGetFlags" _obj $ \cobj__obj -> 
    wxQueryLayoutInfoEvent_GetFlags cobj__obj  
foreign import ccall "wxQueryLayoutInfoEvent_GetFlags" wxQueryLayoutInfoEvent_GetFlags :: Ptr (TQueryLayoutInfoEvent a) -> IO CInt

-- | usage: (@queryLayoutInfoEventGetOrientation obj@).
queryLayoutInfoEventGetOrientation :: QueryLayoutInfoEvent  a ->  IO Int
queryLayoutInfoEventGetOrientation _obj 
  = withIntResult $
    withObjectRef "queryLayoutInfoEventGetOrientation" _obj $ \cobj__obj -> 
    wxQueryLayoutInfoEvent_GetOrientation cobj__obj  
foreign import ccall "wxQueryLayoutInfoEvent_GetOrientation" wxQueryLayoutInfoEvent_GetOrientation :: Ptr (TQueryLayoutInfoEvent a) -> IO CInt

-- | usage: (@queryLayoutInfoEventGetRequestedLength obj@).
queryLayoutInfoEventGetRequestedLength :: QueryLayoutInfoEvent  a ->  IO Int
queryLayoutInfoEventGetRequestedLength _obj 
  = withIntResult $
    withObjectRef "queryLayoutInfoEventGetRequestedLength" _obj $ \cobj__obj -> 
    wxQueryLayoutInfoEvent_GetRequestedLength cobj__obj  
foreign import ccall "wxQueryLayoutInfoEvent_GetRequestedLength" wxQueryLayoutInfoEvent_GetRequestedLength :: Ptr (TQueryLayoutInfoEvent a) -> IO CInt

-- | usage: (@queryLayoutInfoEventGetSize obj@).
queryLayoutInfoEventGetSize :: QueryLayoutInfoEvent  a ->  IO (Size)
queryLayoutInfoEventGetSize _obj 
  = withWxSizeResult $
    withObjectRef "queryLayoutInfoEventGetSize" _obj $ \cobj__obj -> 
    wxQueryLayoutInfoEvent_GetSize cobj__obj  
foreign import ccall "wxQueryLayoutInfoEvent_GetSize" wxQueryLayoutInfoEvent_GetSize :: Ptr (TQueryLayoutInfoEvent a) -> IO (Ptr (TWxSize ()))

-- | usage: (@queryLayoutInfoEventSetAlignment obj align@).
queryLayoutInfoEventSetAlignment :: QueryLayoutInfoEvent  a -> Int ->  IO ()
queryLayoutInfoEventSetAlignment _obj align 
  = withObjectRef "queryLayoutInfoEventSetAlignment" _obj $ \cobj__obj -> 
    wxQueryLayoutInfoEvent_SetAlignment cobj__obj  (toCInt align)  
foreign import ccall "wxQueryLayoutInfoEvent_SetAlignment" wxQueryLayoutInfoEvent_SetAlignment :: Ptr (TQueryLayoutInfoEvent a) -> CInt -> IO ()

-- | usage: (@queryLayoutInfoEventSetFlags obj flags@).
queryLayoutInfoEventSetFlags :: QueryLayoutInfoEvent  a -> Int ->  IO ()
queryLayoutInfoEventSetFlags _obj flags 
  = withObjectRef "queryLayoutInfoEventSetFlags" _obj $ \cobj__obj -> 
    wxQueryLayoutInfoEvent_SetFlags cobj__obj  (toCInt flags)  
foreign import ccall "wxQueryLayoutInfoEvent_SetFlags" wxQueryLayoutInfoEvent_SetFlags :: Ptr (TQueryLayoutInfoEvent a) -> CInt -> IO ()

-- | usage: (@queryLayoutInfoEventSetOrientation obj orient@).
queryLayoutInfoEventSetOrientation :: QueryLayoutInfoEvent  a -> Int ->  IO ()
queryLayoutInfoEventSetOrientation _obj orient 
  = withObjectRef "queryLayoutInfoEventSetOrientation" _obj $ \cobj__obj -> 
    wxQueryLayoutInfoEvent_SetOrientation cobj__obj  (toCInt orient)  
foreign import ccall "wxQueryLayoutInfoEvent_SetOrientation" wxQueryLayoutInfoEvent_SetOrientation :: Ptr (TQueryLayoutInfoEvent a) -> CInt -> IO ()

-- | usage: (@queryLayoutInfoEventSetRequestedLength obj length@).
queryLayoutInfoEventSetRequestedLength :: QueryLayoutInfoEvent  a -> Int ->  IO ()
queryLayoutInfoEventSetRequestedLength _obj length 
  = withObjectRef "queryLayoutInfoEventSetRequestedLength" _obj $ \cobj__obj -> 
    wxQueryLayoutInfoEvent_SetRequestedLength cobj__obj  (toCInt length)  
foreign import ccall "wxQueryLayoutInfoEvent_SetRequestedLength" wxQueryLayoutInfoEvent_SetRequestedLength :: Ptr (TQueryLayoutInfoEvent a) -> CInt -> IO ()

-- | usage: (@queryLayoutInfoEventSetSize obj wh@).
queryLayoutInfoEventSetSize :: QueryLayoutInfoEvent  a -> Size ->  IO ()
queryLayoutInfoEventSetSize _obj wh 
  = withObjectRef "queryLayoutInfoEventSetSize" _obj $ \cobj__obj -> 
    wxQueryLayoutInfoEvent_SetSize cobj__obj  (toCIntSizeW wh) (toCIntSizeH wh)  
foreign import ccall "wxQueryLayoutInfoEvent_SetSize" wxQueryLayoutInfoEvent_SetSize :: Ptr (TQueryLayoutInfoEvent a) -> CInt -> CInt -> IO ()

-- | usage: (@queryNewPaletteEventCopyObject obj obj@).
queryNewPaletteEventCopyObject :: QueryNewPaletteEvent  a -> WxObject  b ->  IO ()
queryNewPaletteEventCopyObject _obj obj 
  = withObjectRef "queryNewPaletteEventCopyObject" _obj $ \cobj__obj -> 
    withObjectPtr obj $ \cobj_obj -> 
    wxQueryNewPaletteEvent_CopyObject cobj__obj  cobj_obj  
foreign import ccall "wxQueryNewPaletteEvent_CopyObject" wxQueryNewPaletteEvent_CopyObject :: Ptr (TQueryNewPaletteEvent a) -> Ptr (TWxObject b) -> IO ()

-- | usage: (@queryNewPaletteEventGetPaletteRealized obj@).
queryNewPaletteEventGetPaletteRealized :: QueryNewPaletteEvent  a ->  IO Bool
queryNewPaletteEventGetPaletteRealized _obj 
  = withBoolResult $
    withObjectRef "queryNewPaletteEventGetPaletteRealized" _obj $ \cobj__obj -> 
    wxQueryNewPaletteEvent_GetPaletteRealized cobj__obj  
foreign import ccall "wxQueryNewPaletteEvent_GetPaletteRealized" wxQueryNewPaletteEvent_GetPaletteRealized :: Ptr (TQueryNewPaletteEvent a) -> IO CBool

-- | usage: (@queryNewPaletteEventSetPaletteRealized obj realized@).
queryNewPaletteEventSetPaletteRealized :: QueryNewPaletteEvent  a -> Bool ->  IO ()
queryNewPaletteEventSetPaletteRealized _obj realized 
  = withObjectRef "queryNewPaletteEventSetPaletteRealized" _obj $ \cobj__obj -> 
    wxQueryNewPaletteEvent_SetPaletteRealized cobj__obj  (toCBool realized)  
foreign import ccall "wxQueryNewPaletteEvent_SetPaletteRealized" wxQueryNewPaletteEvent_SetPaletteRealized :: Ptr (TQueryNewPaletteEvent a) -> CBool -> IO ()

-- | usage: (@radioBoxCreate prt id txt lfttopwdthgt nstr dim stl@).
radioBoxCreate :: Window  a -> Id -> String -> Rect -> [String] -> Int -> Style ->  IO (RadioBox  ())
radioBoxCreate _prt _id _txt _lfttopwdthgt nstr _dim _stl 
  = withObjectResult $
    withObjectPtr _prt $ \cobj__prt -> 
    withStringPtr _txt $ \cobj__txt -> 
    withArrayWString nstr $ \carrlen_nstr carr_nstr -> 
    wxRadioBox_Create cobj__prt  (toCInt _id)  cobj__txt  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  carrlen_nstr carr_nstr  (toCInt _dim)  (toCInt _stl)  
foreign import ccall "wxRadioBox_Create" wxRadioBox_Create :: Ptr (TWindow a) -> CInt -> Ptr (TWxString c) -> CInt -> CInt -> CInt -> CInt -> CInt -> Ptr (Ptr CWchar) -> CInt -> CInt -> IO (Ptr (TRadioBox ()))

-- | usage: (@radioBoxEnableItem obj item enable@).
radioBoxEnableItem :: RadioBox  a -> Int -> Bool ->  IO ()
radioBoxEnableItem _obj item enable 
  = withObjectRef "radioBoxEnableItem" _obj $ \cobj__obj -> 
    wxRadioBox_EnableItem cobj__obj  (toCInt item)  (toCBool enable)  
foreign import ccall "wxRadioBox_EnableItem" wxRadioBox_EnableItem :: Ptr (TRadioBox a) -> CInt -> CBool -> IO ()

-- | usage: (@radioBoxFindString obj s@).
radioBoxFindString :: RadioBox  a -> String ->  IO Int
radioBoxFindString _obj s 
  = withIntResult $
    withObjectRef "radioBoxFindString" _obj $ \cobj__obj -> 
    withStringPtr s $ \cobj_s -> 
    wxRadioBox_FindString cobj__obj  cobj_s  
foreign import ccall "wxRadioBox_FindString" wxRadioBox_FindString :: Ptr (TRadioBox a) -> Ptr (TWxString b) -> IO CInt

-- | usage: (@radioBoxGetItemLabel obj item@).
radioBoxGetItemLabel :: RadioBox  a -> Int ->  IO (String)
radioBoxGetItemLabel _obj item 
  = withManagedStringResult $
    withObjectRef "radioBoxGetItemLabel" _obj $ \cobj__obj -> 
    wxRadioBox_GetItemLabel cobj__obj  (toCInt item)  
foreign import ccall "wxRadioBox_GetItemLabel" wxRadioBox_GetItemLabel :: Ptr (TRadioBox a) -> CInt -> IO (Ptr (TWxString ()))

-- | usage: (@radioBoxGetNumberOfRowsOrCols obj@).
radioBoxGetNumberOfRowsOrCols :: RadioBox  a ->  IO Int
radioBoxGetNumberOfRowsOrCols _obj 
  = withIntResult $
    withObjectRef "radioBoxGetNumberOfRowsOrCols" _obj $ \cobj__obj -> 
    wxRadioBox_GetNumberOfRowsOrCols cobj__obj  
foreign import ccall "wxRadioBox_GetNumberOfRowsOrCols" wxRadioBox_GetNumberOfRowsOrCols :: Ptr (TRadioBox a) -> IO CInt

-- | usage: (@radioBoxGetSelection obj@).
radioBoxGetSelection :: RadioBox  a ->  IO Int
radioBoxGetSelection _obj 
  = withIntResult $
    withObjectRef "radioBoxGetSelection" _obj $ \cobj__obj -> 
    wxRadioBox_GetSelection cobj__obj  
foreign import ccall "wxRadioBox_GetSelection" wxRadioBox_GetSelection :: Ptr (TRadioBox a) -> IO CInt

-- | usage: (@radioBoxGetStringSelection obj@).
radioBoxGetStringSelection :: RadioBox  a ->  IO (String)
radioBoxGetStringSelection _obj 
  = withManagedStringResult $
    withObjectRef "radioBoxGetStringSelection" _obj $ \cobj__obj -> 
    wxRadioBox_GetStringSelection cobj__obj  
foreign import ccall "wxRadioBox_GetStringSelection" wxRadioBox_GetStringSelection :: Ptr (TRadioBox a) -> IO (Ptr (TWxString ()))

-- | usage: (@radioBoxNumber obj@).
radioBoxNumber :: RadioBox  a ->  IO Int
radioBoxNumber _obj 
  = withIntResult $
    withObjectRef "radioBoxNumber" _obj $ \cobj__obj -> 
    wxRadioBox_Number cobj__obj  
foreign import ccall "wxRadioBox_Number" wxRadioBox_Number :: Ptr (TRadioBox a) -> IO CInt

-- | usage: (@radioBoxSetItemBitmap obj item bitmap@).
radioBoxSetItemBitmap :: RadioBox  a -> Int -> Bitmap  c ->  IO ()
radioBoxSetItemBitmap _obj item bitmap 
  = withObjectRef "radioBoxSetItemBitmap" _obj $ \cobj__obj -> 
    withObjectPtr bitmap $ \cobj_bitmap -> 
    wxRadioBox_SetItemBitmap cobj__obj  (toCInt item)  cobj_bitmap  
foreign import ccall "wxRadioBox_SetItemBitmap" wxRadioBox_SetItemBitmap :: Ptr (TRadioBox a) -> CInt -> Ptr (TBitmap c) -> IO ()

-- | usage: (@radioBoxSetItemLabel obj item label@).
radioBoxSetItemLabel :: RadioBox  a -> Int -> String ->  IO ()
radioBoxSetItemLabel _obj item label 
  = withObjectRef "radioBoxSetItemLabel" _obj $ \cobj__obj -> 
    withStringPtr label $ \cobj_label -> 
    wxRadioBox_SetItemLabel cobj__obj  (toCInt item)  cobj_label  
foreign import ccall "wxRadioBox_SetItemLabel" wxRadioBox_SetItemLabel :: Ptr (TRadioBox a) -> CInt -> Ptr (TWxString c) -> IO ()

-- | usage: (@radioBoxSetNumberOfRowsOrCols obj n@).
radioBoxSetNumberOfRowsOrCols :: RadioBox  a -> Int ->  IO ()
radioBoxSetNumberOfRowsOrCols _obj n 
  = withObjectRef "radioBoxSetNumberOfRowsOrCols" _obj $ \cobj__obj -> 
    wxRadioBox_SetNumberOfRowsOrCols cobj__obj  (toCInt n)  
foreign import ccall "wxRadioBox_SetNumberOfRowsOrCols" wxRadioBox_SetNumberOfRowsOrCols :: Ptr (TRadioBox a) -> CInt -> IO ()

-- | usage: (@radioBoxSetSelection obj n@).
radioBoxSetSelection :: RadioBox  a -> Int ->  IO ()
radioBoxSetSelection _obj _n 
  = withObjectRef "radioBoxSetSelection" _obj $ \cobj__obj -> 
    wxRadioBox_SetSelection cobj__obj  (toCInt _n)  
foreign import ccall "wxRadioBox_SetSelection" wxRadioBox_SetSelection :: Ptr (TRadioBox a) -> CInt -> IO ()

-- | usage: (@radioBoxSetStringSelection obj s@).
radioBoxSetStringSelection :: RadioBox  a -> String ->  IO ()
radioBoxSetStringSelection _obj s 
  = withObjectRef "radioBoxSetStringSelection" _obj $ \cobj__obj -> 
    withStringPtr s $ \cobj_s -> 
    wxRadioBox_SetStringSelection cobj__obj  cobj_s  
foreign import ccall "wxRadioBox_SetStringSelection" wxRadioBox_SetStringSelection :: Ptr (TRadioBox a) -> Ptr (TWxString b) -> IO ()

-- | usage: (@radioBoxShowItem obj item show@).
radioBoxShowItem :: RadioBox  a -> Int -> Bool ->  IO ()
radioBoxShowItem _obj item show 
  = withObjectRef "radioBoxShowItem" _obj $ \cobj__obj -> 
    wxRadioBox_ShowItem cobj__obj  (toCInt item)  (toCBool show)  
foreign import ccall "wxRadioBox_ShowItem" wxRadioBox_ShowItem :: Ptr (TRadioBox a) -> CInt -> CBool -> IO ()

-- | usage: (@radioButtonCreate prt id txt lfttopwdthgt stl@).
radioButtonCreate :: Window  a -> Id -> String -> Rect -> Style ->  IO (RadioButton  ())
radioButtonCreate _prt _id _txt _lfttopwdthgt _stl 
  = withObjectResult $
    withObjectPtr _prt $ \cobj__prt -> 
    withStringPtr _txt $ \cobj__txt -> 
    wxRadioButton_Create cobj__prt  (toCInt _id)  cobj__txt  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
foreign import ccall "wxRadioButton_Create" wxRadioButton_Create :: Ptr (TWindow a) -> CInt -> Ptr (TWxString c) -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TRadioButton ()))

-- | usage: (@radioButtonGetValue obj@).
radioButtonGetValue :: RadioButton  a ->  IO Bool
radioButtonGetValue _obj 
  = withBoolResult $
    withObjectRef "radioButtonGetValue" _obj $ \cobj__obj -> 
    wxRadioButton_GetValue cobj__obj  
foreign import ccall "wxRadioButton_GetValue" wxRadioButton_GetValue :: Ptr (TRadioButton a) -> IO CBool

-- | usage: (@radioButtonSetValue obj value@).
radioButtonSetValue :: RadioButton  a -> Bool ->  IO ()
radioButtonSetValue _obj value 
  = withObjectRef "radioButtonSetValue" _obj $ \cobj__obj -> 
    wxRadioButton_SetValue cobj__obj  (toCBool value)  
foreign import ccall "wxRadioButton_SetValue" wxRadioButton_SetValue :: Ptr (TRadioButton a) -> CBool -> IO ()

-- | usage: (@regionAssign obj region@).
regionAssign :: Region  a -> Region  b ->  IO ()
regionAssign _obj region 
  = withObjectRef "regionAssign" _obj $ \cobj__obj -> 
    withObjectPtr region $ \cobj_region -> 
    wxRegion_Assign cobj__obj  cobj_region  
foreign import ccall "wxRegion_Assign" wxRegion_Assign :: Ptr (TRegion a) -> Ptr (TRegion b) -> IO ()

-- | usage: (@regionClear obj@).
regionClear :: Region  a ->  IO ()
regionClear _obj 
  = withObjectRef "regionClear" _obj $ \cobj__obj -> 
    wxRegion_Clear cobj__obj  
foreign import ccall "wxRegion_Clear" wxRegion_Clear :: Ptr (TRegion a) -> IO ()

-- | usage: (@regionContainsPoint obj xy@).
regionContainsPoint :: Region  a -> Point ->  IO Bool
regionContainsPoint _obj xy 
  = withBoolResult $
    withObjectRef "regionContainsPoint" _obj $ \cobj__obj -> 
    wxRegion_ContainsPoint cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
foreign import ccall "wxRegion_ContainsPoint" wxRegion_ContainsPoint :: Ptr (TRegion a) -> CInt -> CInt -> IO CBool

-- | usage: (@regionContainsRect obj xywidthheight@).
regionContainsRect :: Region  a -> Rect ->  IO Bool
regionContainsRect _obj xywidthheight 
  = withBoolResult $
    withObjectRef "regionContainsRect" _obj $ \cobj__obj -> 
    wxRegion_ContainsRect cobj__obj  (toCIntRectX xywidthheight) (toCIntRectY xywidthheight)(toCIntRectW xywidthheight) (toCIntRectH xywidthheight)  
foreign import ccall "wxRegion_ContainsRect" wxRegion_ContainsRect :: Ptr (TRegion a) -> CInt -> CInt -> CInt -> CInt -> IO CBool

-- | usage: (@regionCreateDefault@).
regionCreateDefault ::  IO (Region  ())
regionCreateDefault 
  = withObjectResult $
    wxRegion_CreateDefault 
foreign import ccall "wxRegion_CreateDefault" wxRegion_CreateDefault :: IO (Ptr (TRegion ()))

-- | usage: (@regionCreateFromRect xywh@).
regionCreateFromRect :: Rect ->  IO (Region  ())
regionCreateFromRect xywh 
  = withObjectResult $
    wxRegion_CreateFromRect (toCIntRectX xywh) (toCIntRectY xywh)(toCIntRectW xywh) (toCIntRectH xywh)  
foreign import ccall "wxRegion_CreateFromRect" wxRegion_CreateFromRect :: CInt -> CInt -> CInt -> CInt -> IO (Ptr (TRegion ()))

-- | usage: (@regionDelete obj@).
regionDelete :: Region  a ->  IO ()
regionDelete
  = objectDelete


-- | usage: (@regionGetBox obj@).
regionGetBox :: Region  a ->  IO Rect
regionGetBox _obj 
  = withRectResult $ \px py pw ph -> 
    withObjectRef "regionGetBox" _obj $ \cobj__obj -> 
    wxRegion_GetBox cobj__obj  px py pw ph
foreign import ccall "wxRegion_GetBox" wxRegion_GetBox :: Ptr (TRegion a) -> Ptr CInt -> Ptr CInt -> Ptr CInt -> Ptr CInt -> IO ()

-- | usage: (@regionIntersectRect obj xywidthheight@).
regionIntersectRect :: Region  a -> Rect ->  IO Bool
regionIntersectRect _obj xywidthheight 
  = withBoolResult $
    withObjectRef "regionIntersectRect" _obj $ \cobj__obj -> 
    wxRegion_IntersectRect cobj__obj  (toCIntRectX xywidthheight) (toCIntRectY xywidthheight)(toCIntRectW xywidthheight) (toCIntRectH xywidthheight)  
foreign import ccall "wxRegion_IntersectRect" wxRegion_IntersectRect :: Ptr (TRegion a) -> CInt -> CInt -> CInt -> CInt -> IO CBool

-- | usage: (@regionIntersectRegion obj region@).
regionIntersectRegion :: Region  a -> Region  b ->  IO Bool
regionIntersectRegion _obj region 
  = withBoolResult $
    withObjectRef "regionIntersectRegion" _obj $ \cobj__obj -> 
    withObjectPtr region $ \cobj_region -> 
    wxRegion_IntersectRegion cobj__obj  cobj_region  
foreign import ccall "wxRegion_IntersectRegion" wxRegion_IntersectRegion :: Ptr (TRegion a) -> Ptr (TRegion b) -> IO CBool

-- | usage: (@regionIsEmpty obj@).
regionIsEmpty :: Region  a ->  IO Bool
regionIsEmpty _obj 
  = withBoolResult $
    withObjectRef "regionIsEmpty" _obj $ \cobj__obj -> 
    wxRegion_IsEmpty cobj__obj  
foreign import ccall "wxRegion_IsEmpty" wxRegion_IsEmpty :: Ptr (TRegion a) -> IO CBool

-- | usage: (@regionIteratorCreate@).
regionIteratorCreate ::  IO (RegionIterator  ())
regionIteratorCreate 
  = withObjectResult $
    wxRegionIterator_Create 
foreign import ccall "wxRegionIterator_Create" wxRegionIterator_Create :: IO (Ptr (TRegionIterator ()))

-- | usage: (@regionIteratorCreateFromRegion region@).
regionIteratorCreateFromRegion :: Region  a ->  IO (RegionIterator  ())
regionIteratorCreateFromRegion region 
  = withObjectResult $
    withObjectPtr region $ \cobj_region -> 
    wxRegionIterator_CreateFromRegion cobj_region  
foreign import ccall "wxRegionIterator_CreateFromRegion" wxRegionIterator_CreateFromRegion :: Ptr (TRegion a) -> IO (Ptr (TRegionIterator ()))

-- | usage: (@regionIteratorDelete obj@).
regionIteratorDelete :: RegionIterator  a ->  IO ()
regionIteratorDelete
  = objectDelete


-- | usage: (@regionIteratorGetHeight obj@).
regionIteratorGetHeight :: RegionIterator  a ->  IO Int
regionIteratorGetHeight _obj 
  = withIntResult $
    withObjectRef "regionIteratorGetHeight" _obj $ \cobj__obj -> 
    wxRegionIterator_GetHeight cobj__obj  
foreign import ccall "wxRegionIterator_GetHeight" wxRegionIterator_GetHeight :: Ptr (TRegionIterator a) -> IO CInt

-- | usage: (@regionIteratorGetWidth obj@).
regionIteratorGetWidth :: RegionIterator  a ->  IO Int
regionIteratorGetWidth _obj 
  = withIntResult $
    withObjectRef "regionIteratorGetWidth" _obj $ \cobj__obj -> 
    wxRegionIterator_GetWidth cobj__obj  
foreign import ccall "wxRegionIterator_GetWidth" wxRegionIterator_GetWidth :: Ptr (TRegionIterator a) -> IO CInt

-- | usage: (@regionIteratorGetX obj@).
regionIteratorGetX :: RegionIterator  a ->  IO Int
regionIteratorGetX _obj 
  = withIntResult $
    withObjectRef "regionIteratorGetX" _obj $ \cobj__obj -> 
    wxRegionIterator_GetX cobj__obj  
foreign import ccall "wxRegionIterator_GetX" wxRegionIterator_GetX :: Ptr (TRegionIterator a) -> IO CInt

-- | usage: (@regionIteratorGetY obj@).
regionIteratorGetY :: RegionIterator  a ->  IO Int
regionIteratorGetY _obj 
  = withIntResult $
    withObjectRef "regionIteratorGetY" _obj $ \cobj__obj -> 
    wxRegionIterator_GetY cobj__obj  
foreign import ccall "wxRegionIterator_GetY" wxRegionIterator_GetY :: Ptr (TRegionIterator a) -> IO CInt

-- | usage: (@regionIteratorHaveRects obj@).
regionIteratorHaveRects :: RegionIterator  a ->  IO Bool
regionIteratorHaveRects _obj 
  = withBoolResult $
    withObjectRef "regionIteratorHaveRects" _obj $ \cobj__obj -> 
    wxRegionIterator_HaveRects cobj__obj  
foreign import ccall "wxRegionIterator_HaveRects" wxRegionIterator_HaveRects :: Ptr (TRegionIterator a) -> IO CBool

-- | usage: (@regionIteratorNext obj@).
regionIteratorNext :: RegionIterator  a ->  IO ()
regionIteratorNext _obj 
  = withObjectRef "regionIteratorNext" _obj $ \cobj__obj -> 
    wxRegionIterator_Next cobj__obj  
foreign import ccall "wxRegionIterator_Next" wxRegionIterator_Next :: Ptr (TRegionIterator a) -> IO ()

-- | usage: (@regionIteratorReset obj@).
regionIteratorReset :: RegionIterator  a ->  IO ()
regionIteratorReset _obj 
  = withObjectRef "regionIteratorReset" _obj $ \cobj__obj -> 
    wxRegionIterator_Reset cobj__obj  
foreign import ccall "wxRegionIterator_Reset" wxRegionIterator_Reset :: Ptr (TRegionIterator a) -> IO ()

-- | usage: (@regionIteratorResetToRegion obj region@).
regionIteratorResetToRegion :: RegionIterator  a -> Region  b ->  IO ()
regionIteratorResetToRegion _obj region 
  = withObjectRef "regionIteratorResetToRegion" _obj $ \cobj__obj -> 
    withObjectPtr region $ \cobj_region -> 
    wxRegionIterator_ResetToRegion cobj__obj  cobj_region  
foreign import ccall "wxRegionIterator_ResetToRegion" wxRegionIterator_ResetToRegion :: Ptr (TRegionIterator a) -> Ptr (TRegion b) -> IO ()

-- | usage: (@regionSubtractRect obj xywidthheight@).
regionSubtractRect :: Region  a -> Rect ->  IO Bool
regionSubtractRect _obj xywidthheight 
  = withBoolResult $
    withObjectRef "regionSubtractRect" _obj $ \cobj__obj -> 
    wxRegion_SubtractRect cobj__obj  (toCIntRectX xywidthheight) (toCIntRectY xywidthheight)(toCIntRectW xywidthheight) (toCIntRectH xywidthheight)  
foreign import ccall "wxRegion_SubtractRect" wxRegion_SubtractRect :: Ptr (TRegion a) -> CInt -> CInt -> CInt -> CInt -> IO CBool

-- | usage: (@regionSubtractRegion obj region@).
regionSubtractRegion :: Region  a -> Region  b ->  IO Bool
regionSubtractRegion _obj region 
  = withBoolResult $
    withObjectRef "regionSubtractRegion" _obj $ \cobj__obj -> 
    withObjectPtr region $ \cobj_region -> 
    wxRegion_SubtractRegion cobj__obj  cobj_region  
foreign import ccall "wxRegion_SubtractRegion" wxRegion_SubtractRegion :: Ptr (TRegion a) -> Ptr (TRegion b) -> IO CBool

-- | usage: (@regionUnionRect obj xywidthheight@).
regionUnionRect :: Region  a -> Rect ->  IO Bool
regionUnionRect _obj xywidthheight 
  = withBoolResult $
    withObjectRef "regionUnionRect" _obj $ \cobj__obj -> 
    wxRegion_UnionRect cobj__obj  (toCIntRectX xywidthheight) (toCIntRectY xywidthheight)(toCIntRectW xywidthheight) (toCIntRectH xywidthheight)  
foreign import ccall "wxRegion_UnionRect" wxRegion_UnionRect :: Ptr (TRegion a) -> CInt -> CInt -> CInt -> CInt -> IO CBool

-- | usage: (@regionUnionRegion obj region@).
regionUnionRegion :: Region  a -> Region  b ->  IO Bool
regionUnionRegion _obj region 
  = withBoolResult $
    withObjectRef "regionUnionRegion" _obj $ \cobj__obj -> 
    withObjectPtr region $ \cobj_region -> 
    wxRegion_UnionRegion cobj__obj  cobj_region  
foreign import ccall "wxRegion_UnionRegion" wxRegion_UnionRegion :: Ptr (TRegion a) -> Ptr (TRegion b) -> IO CBool

-- | usage: (@regionXorRect obj xywidthheight@).
regionXorRect :: Region  a -> Rect ->  IO Bool
regionXorRect _obj xywidthheight 
  = withBoolResult $
    withObjectRef "regionXorRect" _obj $ \cobj__obj -> 
    wxRegion_XorRect cobj__obj  (toCIntRectX xywidthheight) (toCIntRectY xywidthheight)(toCIntRectW xywidthheight) (toCIntRectH xywidthheight)  
foreign import ccall "wxRegion_XorRect" wxRegion_XorRect :: Ptr (TRegion a) -> CInt -> CInt -> CInt -> CInt -> IO CBool

-- | usage: (@regionXorRegion obj region@).
regionXorRegion :: Region  a -> Region  b ->  IO Bool
regionXorRegion _obj region 
  = withBoolResult $
    withObjectRef "regionXorRegion" _obj $ \cobj__obj -> 
    withObjectPtr region $ \cobj_region -> 
    wxRegion_XorRegion cobj__obj  cobj_region  
foreign import ccall "wxRegion_XorRegion" wxRegion_XorRegion :: Ptr (TRegion a) -> Ptr (TRegion b) -> IO CBool

-- | usage: (@removeProvider provider@).
removeProvider :: ArtProvider  a ->  IO Bool
removeProvider provider 
  = withBoolResult $
    withObjectPtr provider $ \cobj_provider -> 
    wx_RemoveProvider cobj_provider  
foreign import ccall "RemoveProvider" wx_RemoveProvider :: Ptr (TArtProvider a) -> IO CBool

-- | usage: (@sashEventCreate id edge@).
sashEventCreate :: Id -> Int ->  IO (SashEvent  ())
sashEventCreate id edge 
  = withObjectResult $
    wxSashEvent_Create (toCInt id)  (toCInt edge)  
foreign import ccall "wxSashEvent_Create" wxSashEvent_Create :: CInt -> CInt -> IO (Ptr (TSashEvent ()))

-- | usage: (@sashEventGetDragRect obj@).
sashEventGetDragRect :: SashEvent  a ->  IO (Rect)
sashEventGetDragRect _obj 
  = withWxRectResult $
    withObjectRef "sashEventGetDragRect" _obj $ \cobj__obj -> 
    wxSashEvent_GetDragRect cobj__obj  
foreign import ccall "wxSashEvent_GetDragRect" wxSashEvent_GetDragRect :: Ptr (TSashEvent a) -> IO (Ptr (TWxRect ()))

-- | usage: (@sashEventGetDragStatus obj@).
sashEventGetDragStatus :: SashEvent  a ->  IO Int
sashEventGetDragStatus _obj 
  = withIntResult $
    withObjectRef "sashEventGetDragStatus" _obj $ \cobj__obj -> 
    wxSashEvent_GetDragStatus cobj__obj  
foreign import ccall "wxSashEvent_GetDragStatus" wxSashEvent_GetDragStatus :: Ptr (TSashEvent a) -> IO CInt

-- | usage: (@sashEventGetEdge obj@).
sashEventGetEdge :: SashEvent  a ->  IO Int
sashEventGetEdge _obj 
  = withIntResult $
    withObjectRef "sashEventGetEdge" _obj $ \cobj__obj -> 
    wxSashEvent_GetEdge cobj__obj  
foreign import ccall "wxSashEvent_GetEdge" wxSashEvent_GetEdge :: Ptr (TSashEvent a) -> IO CInt

-- | usage: (@sashEventSetDragRect obj xywh@).
sashEventSetDragRect :: SashEvent  a -> Rect ->  IO ()
sashEventSetDragRect _obj xywh 
  = withObjectRef "sashEventSetDragRect" _obj $ \cobj__obj -> 
    wxSashEvent_SetDragRect cobj__obj  (toCIntRectX xywh) (toCIntRectY xywh)(toCIntRectW xywh) (toCIntRectH xywh)  
foreign import ccall "wxSashEvent_SetDragRect" wxSashEvent_SetDragRect :: Ptr (TSashEvent a) -> CInt -> CInt -> CInt -> CInt -> IO ()

-- | usage: (@sashEventSetDragStatus obj status@).
sashEventSetDragStatus :: SashEvent  a -> Int ->  IO ()
sashEventSetDragStatus _obj status 
  = withObjectRef "sashEventSetDragStatus" _obj $ \cobj__obj -> 
    wxSashEvent_SetDragStatus cobj__obj  (toCInt status)  
foreign import ccall "wxSashEvent_SetDragStatus" wxSashEvent_SetDragStatus :: Ptr (TSashEvent a) -> CInt -> IO ()

-- | usage: (@sashEventSetEdge obj edge@).
sashEventSetEdge :: SashEvent  a -> Int ->  IO ()
sashEventSetEdge _obj edge 
  = withObjectRef "sashEventSetEdge" _obj $ \cobj__obj -> 
    wxSashEvent_SetEdge cobj__obj  (toCInt edge)  
foreign import ccall "wxSashEvent_SetEdge" wxSashEvent_SetEdge :: Ptr (TSashEvent a) -> CInt -> IO ()

-- | usage: (@sashLayoutWindowCreate par id xywh stl@).
sashLayoutWindowCreate :: Window  a -> Id -> Rect -> Style ->  IO (SashLayoutWindow  ())
sashLayoutWindowCreate _par _id _xywh _stl 
  = withObjectResult $
    withObjectPtr _par $ \cobj__par -> 
    wxSashLayoutWindow_Create cobj__par  (toCInt _id)  (toCIntRectX _xywh) (toCIntRectY _xywh)(toCIntRectW _xywh) (toCIntRectH _xywh)  (toCInt _stl)  
foreign import ccall "wxSashLayoutWindow_Create" wxSashLayoutWindow_Create :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TSashLayoutWindow ()))

-- | usage: (@sashLayoutWindowGetAlignment obj@).
sashLayoutWindowGetAlignment :: SashLayoutWindow  a ->  IO Int
sashLayoutWindowGetAlignment _obj 
  = withIntResult $
    withObjectRef "sashLayoutWindowGetAlignment" _obj $ \cobj__obj -> 
    wxSashLayoutWindow_GetAlignment cobj__obj  
foreign import ccall "wxSashLayoutWindow_GetAlignment" wxSashLayoutWindow_GetAlignment :: Ptr (TSashLayoutWindow a) -> IO CInt

-- | usage: (@sashLayoutWindowGetOrientation obj@).
sashLayoutWindowGetOrientation :: SashLayoutWindow  a ->  IO Int
sashLayoutWindowGetOrientation _obj 
  = withIntResult $
    withObjectRef "sashLayoutWindowGetOrientation" _obj $ \cobj__obj -> 
    wxSashLayoutWindow_GetOrientation cobj__obj  
foreign import ccall "wxSashLayoutWindow_GetOrientation" wxSashLayoutWindow_GetOrientation :: Ptr (TSashLayoutWindow a) -> IO CInt

-- | usage: (@sashLayoutWindowSetAlignment obj align@).
sashLayoutWindowSetAlignment :: SashLayoutWindow  a -> Int ->  IO ()
sashLayoutWindowSetAlignment _obj align 
  = withObjectRef "sashLayoutWindowSetAlignment" _obj $ \cobj__obj -> 
    wxSashLayoutWindow_SetAlignment cobj__obj  (toCInt align)  
foreign import ccall "wxSashLayoutWindow_SetAlignment" wxSashLayoutWindow_SetAlignment :: Ptr (TSashLayoutWindow a) -> CInt -> IO ()

-- | usage: (@sashLayoutWindowSetDefaultSize obj wh@).
sashLayoutWindowSetDefaultSize :: SashLayoutWindow  a -> Size ->  IO ()
sashLayoutWindowSetDefaultSize _obj wh 
  = withObjectRef "sashLayoutWindowSetDefaultSize" _obj $ \cobj__obj -> 
    wxSashLayoutWindow_SetDefaultSize cobj__obj  (toCIntSizeW wh) (toCIntSizeH wh)  
foreign import ccall "wxSashLayoutWindow_SetDefaultSize" wxSashLayoutWindow_SetDefaultSize :: Ptr (TSashLayoutWindow a) -> CInt -> CInt -> IO ()

-- | usage: (@sashLayoutWindowSetOrientation obj orient@).
sashLayoutWindowSetOrientation :: SashLayoutWindow  a -> Int ->  IO ()
sashLayoutWindowSetOrientation _obj orient 
  = withObjectRef "sashLayoutWindowSetOrientation" _obj $ \cobj__obj -> 
    wxSashLayoutWindow_SetOrientation cobj__obj  (toCInt orient)  
foreign import ccall "wxSashLayoutWindow_SetOrientation" wxSashLayoutWindow_SetOrientation :: Ptr (TSashLayoutWindow a) -> CInt -> IO ()

-- | usage: (@sashWindowCreate par id xywh stl@).
sashWindowCreate :: Window  a -> Id -> Rect -> Style ->  IO (SashWindow  ())
sashWindowCreate _par _id _xywh _stl 
  = withObjectResult $
    withObjectPtr _par $ \cobj__par -> 
    wxSashWindow_Create cobj__par  (toCInt _id)  (toCIntRectX _xywh) (toCIntRectY _xywh)(toCIntRectW _xywh) (toCIntRectH _xywh)  (toCInt _stl)  
foreign import ccall "wxSashWindow_Create" wxSashWindow_Create :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TSashWindow ()))

-- | usage: (@sashWindowGetDefaultBorderSize obj@).
sashWindowGetDefaultBorderSize :: SashWindow  a ->  IO Int
sashWindowGetDefaultBorderSize _obj 
  = withIntResult $
    withObjectRef "sashWindowGetDefaultBorderSize" _obj $ \cobj__obj -> 
    wxSashWindow_GetDefaultBorderSize cobj__obj  
foreign import ccall "wxSashWindow_GetDefaultBorderSize" wxSashWindow_GetDefaultBorderSize :: Ptr (TSashWindow a) -> IO CInt

-- | usage: (@sashWindowGetEdgeMargin obj edge@).
sashWindowGetEdgeMargin :: SashWindow  a -> Int ->  IO Int
sashWindowGetEdgeMargin _obj edge 
  = withIntResult $
    withObjectRef "sashWindowGetEdgeMargin" _obj $ \cobj__obj -> 
    wxSashWindow_GetEdgeMargin cobj__obj  (toCInt edge)  
foreign import ccall "wxSashWindow_GetEdgeMargin" wxSashWindow_GetEdgeMargin :: Ptr (TSashWindow a) -> CInt -> IO CInt

-- | usage: (@sashWindowGetExtraBorderSize obj@).
sashWindowGetExtraBorderSize :: SashWindow  a ->  IO Int
sashWindowGetExtraBorderSize _obj 
  = withIntResult $
    withObjectRef "sashWindowGetExtraBorderSize" _obj $ \cobj__obj -> 
    wxSashWindow_GetExtraBorderSize cobj__obj  
foreign import ccall "wxSashWindow_GetExtraBorderSize" wxSashWindow_GetExtraBorderSize :: Ptr (TSashWindow a) -> IO CInt

-- | usage: (@sashWindowGetMaximumSizeX obj@).
sashWindowGetMaximumSizeX :: SashWindow  a ->  IO Int
sashWindowGetMaximumSizeX _obj 
  = withIntResult $
    withObjectRef "sashWindowGetMaximumSizeX" _obj $ \cobj__obj -> 
    wxSashWindow_GetMaximumSizeX cobj__obj  
foreign import ccall "wxSashWindow_GetMaximumSizeX" wxSashWindow_GetMaximumSizeX :: Ptr (TSashWindow a) -> IO CInt

-- | usage: (@sashWindowGetMaximumSizeY obj@).
sashWindowGetMaximumSizeY :: SashWindow  a ->  IO Int
sashWindowGetMaximumSizeY _obj 
  = withIntResult $
    withObjectRef "sashWindowGetMaximumSizeY" _obj $ \cobj__obj -> 
    wxSashWindow_GetMaximumSizeY cobj__obj  
foreign import ccall "wxSashWindow_GetMaximumSizeY" wxSashWindow_GetMaximumSizeY :: Ptr (TSashWindow a) -> IO CInt

-- | usage: (@sashWindowGetMinimumSizeX obj@).
sashWindowGetMinimumSizeX :: SashWindow  a ->  IO Int
sashWindowGetMinimumSizeX _obj 
  = withIntResult $
    withObjectRef "sashWindowGetMinimumSizeX" _obj $ \cobj__obj -> 
    wxSashWindow_GetMinimumSizeX cobj__obj  
foreign import ccall "wxSashWindow_GetMinimumSizeX" wxSashWindow_GetMinimumSizeX :: Ptr (TSashWindow a) -> IO CInt

-- | usage: (@sashWindowGetMinimumSizeY obj@).
sashWindowGetMinimumSizeY :: SashWindow  a ->  IO Int
sashWindowGetMinimumSizeY _obj 
  = withIntResult $
    withObjectRef "sashWindowGetMinimumSizeY" _obj $ \cobj__obj -> 
    wxSashWindow_GetMinimumSizeY cobj__obj  
foreign import ccall "wxSashWindow_GetMinimumSizeY" wxSashWindow_GetMinimumSizeY :: Ptr (TSashWindow a) -> IO CInt

-- | usage: (@sashWindowGetSashVisible obj edge@).
sashWindowGetSashVisible :: SashWindow  a -> Int ->  IO Bool
sashWindowGetSashVisible _obj edge 
  = withBoolResult $
    withObjectRef "sashWindowGetSashVisible" _obj $ \cobj__obj -> 
    wxSashWindow_GetSashVisible cobj__obj  (toCInt edge)  
foreign import ccall "wxSashWindow_GetSashVisible" wxSashWindow_GetSashVisible :: Ptr (TSashWindow a) -> CInt -> IO CBool

-- | usage: (@sashWindowHasBorder obj edge@).
sashWindowHasBorder :: SashWindow  a -> Int ->  IO Bool
sashWindowHasBorder _obj edge 
  = withBoolResult $
    withObjectRef "sashWindowHasBorder" _obj $ \cobj__obj -> 
    wxSashWindow_HasBorder cobj__obj  (toCInt edge)  
foreign import ccall "wxSashWindow_HasBorder" wxSashWindow_HasBorder :: Ptr (TSashWindow a) -> CInt -> IO CBool

-- | usage: (@sashWindowSetDefaultBorderSize obj width@).
sashWindowSetDefaultBorderSize :: SashWindow  a -> Int ->  IO ()
sashWindowSetDefaultBorderSize _obj width 
  = withObjectRef "sashWindowSetDefaultBorderSize" _obj $ \cobj__obj -> 
    wxSashWindow_SetDefaultBorderSize cobj__obj  (toCInt width)  
foreign import ccall "wxSashWindow_SetDefaultBorderSize" wxSashWindow_SetDefaultBorderSize :: Ptr (TSashWindow a) -> CInt -> IO ()

-- | usage: (@sashWindowSetExtraBorderSize obj width@).
sashWindowSetExtraBorderSize :: SashWindow  a -> Int ->  IO ()
sashWindowSetExtraBorderSize _obj width 
  = withObjectRef "sashWindowSetExtraBorderSize" _obj $ \cobj__obj -> 
    wxSashWindow_SetExtraBorderSize cobj__obj  (toCInt width)  
foreign import ccall "wxSashWindow_SetExtraBorderSize" wxSashWindow_SetExtraBorderSize :: Ptr (TSashWindow a) -> CInt -> IO ()

-- | usage: (@sashWindowSetMaximumSizeX obj max@).
sashWindowSetMaximumSizeX :: SashWindow  a -> Int ->  IO ()
sashWindowSetMaximumSizeX _obj max 
  = withObjectRef "sashWindowSetMaximumSizeX" _obj $ \cobj__obj -> 
    wxSashWindow_SetMaximumSizeX cobj__obj  (toCInt max)  
foreign import ccall "wxSashWindow_SetMaximumSizeX" wxSashWindow_SetMaximumSizeX :: Ptr (TSashWindow a) -> CInt -> IO ()

-- | usage: (@sashWindowSetMaximumSizeY obj max@).
sashWindowSetMaximumSizeY :: SashWindow  a -> Int ->  IO ()
sashWindowSetMaximumSizeY _obj max 
  = withObjectRef "sashWindowSetMaximumSizeY" _obj $ \cobj__obj -> 
    wxSashWindow_SetMaximumSizeY cobj__obj  (toCInt max)  
foreign import ccall "wxSashWindow_SetMaximumSizeY" wxSashWindow_SetMaximumSizeY :: Ptr (TSashWindow a) -> CInt -> IO ()

-- | usage: (@sashWindowSetMinimumSizeX obj min@).
sashWindowSetMinimumSizeX :: SashWindow  a -> Int ->  IO ()
sashWindowSetMinimumSizeX _obj min 
  = withObjectRef "sashWindowSetMinimumSizeX" _obj $ \cobj__obj -> 
    wxSashWindow_SetMinimumSizeX cobj__obj  (toCInt min)  
foreign import ccall "wxSashWindow_SetMinimumSizeX" wxSashWindow_SetMinimumSizeX :: Ptr (TSashWindow a) -> CInt -> IO ()

-- | usage: (@sashWindowSetMinimumSizeY obj min@).
sashWindowSetMinimumSizeY :: SashWindow  a -> Int ->  IO ()
sashWindowSetMinimumSizeY _obj min 
  = withObjectRef "sashWindowSetMinimumSizeY" _obj $ \cobj__obj -> 
    wxSashWindow_SetMinimumSizeY cobj__obj  (toCInt min)  
foreign import ccall "wxSashWindow_SetMinimumSizeY" wxSashWindow_SetMinimumSizeY :: Ptr (TSashWindow a) -> CInt -> IO ()

-- | usage: (@sashWindowSetSashBorder obj edge border@).
sashWindowSetSashBorder :: SashWindow  a -> Int -> Bool ->  IO ()
sashWindowSetSashBorder _obj edge border 
  = withObjectRef "sashWindowSetSashBorder" _obj $ \cobj__obj -> 
    wxSashWindow_SetSashBorder cobj__obj  (toCInt edge)  (toCBool border)  
foreign import ccall "wxSashWindow_SetSashBorder" wxSashWindow_SetSashBorder :: Ptr (TSashWindow a) -> CInt -> CBool -> IO ()

-- | usage: (@sashWindowSetSashVisible obj edge sash@).
sashWindowSetSashVisible :: SashWindow  a -> Int -> Bool ->  IO ()
sashWindowSetSashVisible _obj edge sash 
  = withObjectRef "sashWindowSetSashVisible" _obj $ \cobj__obj -> 
    wxSashWindow_SetSashVisible cobj__obj  (toCInt edge)  (toCBool sash)  
foreign import ccall "wxSashWindow_SetSashVisible" wxSashWindow_SetSashVisible :: Ptr (TSashWindow a) -> CInt -> CBool -> IO ()

-- | usage: (@screenDCCreate@).
screenDCCreate ::  IO (ScreenDC  ())
screenDCCreate 
  = withObjectResult $
    wxScreenDC_Create 
foreign import ccall "wxScreenDC_Create" wxScreenDC_Create :: IO (Ptr (TScreenDC ()))

-- | usage: (@screenDCDelete obj@).
screenDCDelete :: ScreenDC  a ->  IO ()
screenDCDelete
  = objectDelete


-- | usage: (@screenDCEndDrawingOnTop obj@).
screenDCEndDrawingOnTop :: ScreenDC  a ->  IO Bool
screenDCEndDrawingOnTop _obj 
  = withBoolResult $
    withObjectRef "screenDCEndDrawingOnTop" _obj $ \cobj__obj -> 
    wxScreenDC_EndDrawingOnTop cobj__obj  
foreign import ccall "wxScreenDC_EndDrawingOnTop" wxScreenDC_EndDrawingOnTop :: Ptr (TScreenDC a) -> IO CBool

-- | usage: (@screenDCStartDrawingOnTop obj xywh@).
screenDCStartDrawingOnTop :: ScreenDC  a -> Rect ->  IO Bool
screenDCStartDrawingOnTop _obj xywh 
  = withBoolResult $
    withObjectRef "screenDCStartDrawingOnTop" _obj $ \cobj__obj -> 
    wxScreenDC_StartDrawingOnTop cobj__obj  (toCIntRectX xywh) (toCIntRectY xywh)(toCIntRectW xywh) (toCIntRectH xywh)  
foreign import ccall "wxScreenDC_StartDrawingOnTop" wxScreenDC_StartDrawingOnTop :: Ptr (TScreenDC a) -> CInt -> CInt -> CInt -> CInt -> IO CBool

-- | usage: (@screenDCStartDrawingOnTopOfWin obj win@).
screenDCStartDrawingOnTopOfWin :: ScreenDC  a -> Window  b ->  IO Bool
screenDCStartDrawingOnTopOfWin _obj win 
  = withBoolResult $
    withObjectRef "screenDCStartDrawingOnTopOfWin" _obj $ \cobj__obj -> 
    withObjectPtr win $ \cobj_win -> 
    wxScreenDC_StartDrawingOnTopOfWin cobj__obj  cobj_win  
foreign import ccall "wxScreenDC_StartDrawingOnTopOfWin" wxScreenDC_StartDrawingOnTopOfWin :: Ptr (TScreenDC a) -> Ptr (TWindow b) -> IO CBool

-- | usage: (@scrollBarCreate prt id lfttopwdthgt stl@).
scrollBarCreate :: Window  a -> Id -> Rect -> Style ->  IO (ScrollBar  ())
scrollBarCreate _prt _id _lfttopwdthgt _stl 
  = withObjectResult $
    withObjectPtr _prt $ \cobj__prt -> 
    wxScrollBar_Create cobj__prt  (toCInt _id)  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
foreign import ccall "wxScrollBar_Create" wxScrollBar_Create :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TScrollBar ()))

-- | usage: (@scrollBarGetPageSize obj@).
scrollBarGetPageSize :: ScrollBar  a ->  IO Int
scrollBarGetPageSize _obj 
  = withIntResult $
    withObjectRef "scrollBarGetPageSize" _obj $ \cobj__obj -> 
    wxScrollBar_GetPageSize cobj__obj  
foreign import ccall "wxScrollBar_GetPageSize" wxScrollBar_GetPageSize :: Ptr (TScrollBar a) -> IO CInt

-- | usage: (@scrollBarGetRange obj@).
scrollBarGetRange :: ScrollBar  a ->  IO Int
scrollBarGetRange _obj 
  = withIntResult $
    withObjectRef "scrollBarGetRange" _obj $ \cobj__obj -> 
    wxScrollBar_GetRange cobj__obj  
foreign import ccall "wxScrollBar_GetRange" wxScrollBar_GetRange :: Ptr (TScrollBar a) -> IO CInt

-- | usage: (@scrollBarGetThumbPosition obj@).
scrollBarGetThumbPosition :: ScrollBar  a ->  IO Int
scrollBarGetThumbPosition _obj 
  = withIntResult $
    withObjectRef "scrollBarGetThumbPosition" _obj $ \cobj__obj -> 
    wxScrollBar_GetThumbPosition cobj__obj  
foreign import ccall "wxScrollBar_GetThumbPosition" wxScrollBar_GetThumbPosition :: Ptr (TScrollBar a) -> IO CInt

-- | usage: (@scrollBarGetThumbSize obj@).
scrollBarGetThumbSize :: ScrollBar  a ->  IO Int
scrollBarGetThumbSize _obj 
  = withIntResult $
    withObjectRef "scrollBarGetThumbSize" _obj $ \cobj__obj -> 
    wxScrollBar_GetThumbSize cobj__obj  
foreign import ccall "wxScrollBar_GetThumbSize" wxScrollBar_GetThumbSize :: Ptr (TScrollBar a) -> IO CInt

-- | usage: (@scrollBarSetScrollbar obj position thumbSize range pageSize refresh@).
scrollBarSetScrollbar :: ScrollBar  a -> Int -> Int -> Int -> Int -> Bool ->  IO ()
scrollBarSetScrollbar _obj position thumbSize range pageSize refresh 
  = withObjectRef "scrollBarSetScrollbar" _obj $ \cobj__obj -> 
    wxScrollBar_SetScrollbar cobj__obj  (toCInt position)  (toCInt thumbSize)  (toCInt range)  (toCInt pageSize)  (toCBool refresh)  
foreign import ccall "wxScrollBar_SetScrollbar" wxScrollBar_SetScrollbar :: Ptr (TScrollBar a) -> CInt -> CInt -> CInt -> CInt -> CBool -> IO ()

-- | usage: (@scrollBarSetThumbPosition obj viewStart@).
scrollBarSetThumbPosition :: ScrollBar  a -> Int ->  IO ()
scrollBarSetThumbPosition _obj viewStart 
  = withObjectRef "scrollBarSetThumbPosition" _obj $ \cobj__obj -> 
    wxScrollBar_SetThumbPosition cobj__obj  (toCInt viewStart)  
foreign import ccall "wxScrollBar_SetThumbPosition" wxScrollBar_SetThumbPosition :: Ptr (TScrollBar a) -> CInt -> IO ()

-- | usage: (@scrollEventGetOrientation obj@).
scrollEventGetOrientation :: ScrollEvent  a ->  IO Int
scrollEventGetOrientation _obj 
  = withIntResult $
    withObjectRef "scrollEventGetOrientation" _obj $ \cobj__obj -> 
    wxScrollEvent_GetOrientation cobj__obj  
foreign import ccall "wxScrollEvent_GetOrientation" wxScrollEvent_GetOrientation :: Ptr (TScrollEvent a) -> IO CInt

-- | usage: (@scrollEventGetPosition obj@).
scrollEventGetPosition :: ScrollEvent  a ->  IO Int
scrollEventGetPosition _obj 
  = withIntResult $
    withObjectRef "scrollEventGetPosition" _obj $ \cobj__obj -> 
    wxScrollEvent_GetPosition cobj__obj  
foreign import ccall "wxScrollEvent_GetPosition" wxScrollEvent_GetPosition :: Ptr (TScrollEvent a) -> IO CInt

-- | usage: (@scrollWinEventGetOrientation obj@).
scrollWinEventGetOrientation :: ScrollWinEvent  a ->  IO Int
scrollWinEventGetOrientation _obj 
  = withIntResult $
    withObjectRef "scrollWinEventGetOrientation" _obj $ \cobj__obj -> 
    wxScrollWinEvent_GetOrientation cobj__obj  
foreign import ccall "wxScrollWinEvent_GetOrientation" wxScrollWinEvent_GetOrientation :: Ptr (TScrollWinEvent a) -> IO CInt

-- | usage: (@scrollWinEventGetPosition obj@).
scrollWinEventGetPosition :: ScrollWinEvent  a ->  IO Int
scrollWinEventGetPosition _obj 
  = withIntResult $
    withObjectRef "scrollWinEventGetPosition" _obj $ \cobj__obj -> 
    wxScrollWinEvent_GetPosition cobj__obj  
foreign import ccall "wxScrollWinEvent_GetPosition" wxScrollWinEvent_GetPosition :: Ptr (TScrollWinEvent a) -> IO CInt

-- | usage: (@scrollWinEventSetOrientation obj orient@).
scrollWinEventSetOrientation :: ScrollWinEvent  a -> Int ->  IO ()
scrollWinEventSetOrientation _obj orient 
  = withObjectRef "scrollWinEventSetOrientation" _obj $ \cobj__obj -> 
    wxScrollWinEvent_SetOrientation cobj__obj  (toCInt orient)  
foreign import ccall "wxScrollWinEvent_SetOrientation" wxScrollWinEvent_SetOrientation :: Ptr (TScrollWinEvent a) -> CInt -> IO ()

-- | usage: (@scrollWinEventSetPosition obj pos@).
scrollWinEventSetPosition :: ScrollWinEvent  a -> Int ->  IO ()
scrollWinEventSetPosition _obj pos 
  = withObjectRef "scrollWinEventSetPosition" _obj $ \cobj__obj -> 
    wxScrollWinEvent_SetPosition cobj__obj  (toCInt pos)  
foreign import ccall "wxScrollWinEvent_SetPosition" wxScrollWinEvent_SetPosition :: Ptr (TScrollWinEvent a) -> CInt -> IO ()

-- | usage: (@scrolledWindowAdjustScrollbars obj@).
scrolledWindowAdjustScrollbars :: ScrolledWindow  a ->  IO ()
scrolledWindowAdjustScrollbars _obj 
  = withObjectRef "scrolledWindowAdjustScrollbars" _obj $ \cobj__obj -> 
    wxScrolledWindow_AdjustScrollbars cobj__obj  
foreign import ccall "wxScrolledWindow_AdjustScrollbars" wxScrolledWindow_AdjustScrollbars :: Ptr (TScrolledWindow a) -> IO ()

-- | usage: (@scrolledWindowCalcScrolledPosition obj xy@).
scrolledWindowCalcScrolledPosition :: ScrolledWindow  a -> Point ->  IO Point
scrolledWindowCalcScrolledPosition _obj xy 
  = withPointResult $ \px py -> 
    withObjectRef "scrolledWindowCalcScrolledPosition" _obj $ \cobj__obj -> 
    wxScrolledWindow_CalcScrolledPosition cobj__obj  (toCIntPointX xy) (toCIntPointY xy)   px py
foreign import ccall "wxScrolledWindow_CalcScrolledPosition" wxScrolledWindow_CalcScrolledPosition :: Ptr (TScrolledWindow a) -> CInt -> CInt -> Ptr CInt -> Ptr CInt -> IO ()

-- | usage: (@scrolledWindowCalcUnscrolledPosition obj xy@).
scrolledWindowCalcUnscrolledPosition :: ScrolledWindow  a -> Point ->  IO Point
scrolledWindowCalcUnscrolledPosition _obj xy 
  = withPointResult $ \px py -> 
    withObjectRef "scrolledWindowCalcUnscrolledPosition" _obj $ \cobj__obj -> 
    wxScrolledWindow_CalcUnscrolledPosition cobj__obj  (toCIntPointX xy) (toCIntPointY xy)   px py
foreign import ccall "wxScrolledWindow_CalcUnscrolledPosition" wxScrolledWindow_CalcUnscrolledPosition :: Ptr (TScrolledWindow a) -> CInt -> CInt -> Ptr CInt -> Ptr CInt -> IO ()

-- | usage: (@scrolledWindowCreate prt id lfttopwdthgt stl@).
scrolledWindowCreate :: Window  a -> Id -> Rect -> Style ->  IO (ScrolledWindow  ())
scrolledWindowCreate _prt _id _lfttopwdthgt _stl 
  = withObjectResult $
    withObjectPtr _prt $ \cobj__prt -> 
    wxScrolledWindow_Create cobj__prt  (toCInt _id)  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
foreign import ccall "wxScrolledWindow_Create" wxScrolledWindow_Create :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TScrolledWindow ()))

-- | usage: (@scrolledWindowEnableScrolling obj xscrolling yscrolling@).
scrolledWindowEnableScrolling :: ScrolledWindow  a -> Bool -> Bool ->  IO ()
scrolledWindowEnableScrolling _obj xscrolling yscrolling 
  = withObjectRef "scrolledWindowEnableScrolling" _obj $ \cobj__obj -> 
    wxScrolledWindow_EnableScrolling cobj__obj  (toCBool xscrolling)  (toCBool yscrolling)  
foreign import ccall "wxScrolledWindow_EnableScrolling" wxScrolledWindow_EnableScrolling :: Ptr (TScrolledWindow a) -> CBool -> CBool -> IO ()

-- | usage: (@scrolledWindowGetScaleX obj@).
scrolledWindowGetScaleX :: ScrolledWindow  a ->  IO Double
scrolledWindowGetScaleX _obj 
  = withObjectRef "scrolledWindowGetScaleX" _obj $ \cobj__obj -> 
    wxScrolledWindow_GetScaleX cobj__obj  
foreign import ccall "wxScrolledWindow_GetScaleX" wxScrolledWindow_GetScaleX :: Ptr (TScrolledWindow a) -> IO Double

-- | usage: (@scrolledWindowGetScaleY obj@).
scrolledWindowGetScaleY :: ScrolledWindow  a ->  IO Double
scrolledWindowGetScaleY _obj 
  = withObjectRef "scrolledWindowGetScaleY" _obj $ \cobj__obj -> 
    wxScrolledWindow_GetScaleY cobj__obj  
foreign import ccall "wxScrolledWindow_GetScaleY" wxScrolledWindow_GetScaleY :: Ptr (TScrolledWindow a) -> IO Double

-- | usage: (@scrolledWindowGetScrollPageSize obj orient@).
scrolledWindowGetScrollPageSize :: ScrolledWindow  a -> Int ->  IO Int
scrolledWindowGetScrollPageSize _obj orient 
  = withIntResult $
    withObjectRef "scrolledWindowGetScrollPageSize" _obj $ \cobj__obj -> 
    wxScrolledWindow_GetScrollPageSize cobj__obj  (toCInt orient)  
foreign import ccall "wxScrolledWindow_GetScrollPageSize" wxScrolledWindow_GetScrollPageSize :: Ptr (TScrolledWindow a) -> CInt -> IO CInt

-- | usage: (@scrolledWindowGetScrollPixelsPerUnit obj@).
scrolledWindowGetScrollPixelsPerUnit :: ScrolledWindow  a ->  IO Point
scrolledWindowGetScrollPixelsPerUnit _obj 
  = withPointResult $ \px py -> 
    withObjectRef "scrolledWindowGetScrollPixelsPerUnit" _obj $ \cobj__obj -> 
    wxScrolledWindow_GetScrollPixelsPerUnit cobj__obj   px py
foreign import ccall "wxScrolledWindow_GetScrollPixelsPerUnit" wxScrolledWindow_GetScrollPixelsPerUnit :: Ptr (TScrolledWindow a) -> Ptr CInt -> Ptr CInt -> IO ()

-- | usage: (@scrolledWindowGetTargetWindow obj@).
scrolledWindowGetTargetWindow :: ScrolledWindow  a ->  IO (Window  ())
scrolledWindowGetTargetWindow _obj 
  = withObjectResult $
    withObjectRef "scrolledWindowGetTargetWindow" _obj $ \cobj__obj -> 
    wxScrolledWindow_GetTargetWindow cobj__obj  
foreign import ccall "wxScrolledWindow_GetTargetWindow" wxScrolledWindow_GetTargetWindow :: Ptr (TScrolledWindow a) -> IO (Ptr (TWindow ()))

-- | usage: (@scrolledWindowGetViewStart obj@).
scrolledWindowGetViewStart :: ScrolledWindow  a ->  IO Point
scrolledWindowGetViewStart _obj 
  = withPointResult $ \px py -> 
    withObjectRef "scrolledWindowGetViewStart" _obj $ \cobj__obj -> 
    wxScrolledWindow_GetViewStart cobj__obj   px py
foreign import ccall "wxScrolledWindow_GetViewStart" wxScrolledWindow_GetViewStart :: Ptr (TScrolledWindow a) -> Ptr CInt -> Ptr CInt -> IO ()

-- | usage: (@scrolledWindowGetVirtualSize obj@).
scrolledWindowGetVirtualSize :: ScrolledWindow  a ->  IO Size
scrolledWindowGetVirtualSize _obj 
  = withSizeResult $ \pw ph -> 
    withObjectRef "scrolledWindowGetVirtualSize" _obj $ \cobj__obj -> 
    wxScrolledWindow_GetVirtualSize cobj__obj   pw ph
foreign import ccall "wxScrolledWindow_GetVirtualSize" wxScrolledWindow_GetVirtualSize :: Ptr (TScrolledWindow a) -> Ptr CInt -> Ptr CInt -> IO ()

-- | usage: (@scrolledWindowOnDraw obj dc@).
scrolledWindowOnDraw :: ScrolledWindow  a -> DC  b ->  IO ()
scrolledWindowOnDraw _obj dc 
  = withObjectRef "scrolledWindowOnDraw" _obj $ \cobj__obj -> 
    withObjectPtr dc $ \cobj_dc -> 
    wxScrolledWindow_OnDraw cobj__obj  cobj_dc  
foreign import ccall "wxScrolledWindow_OnDraw" wxScrolledWindow_OnDraw :: Ptr (TScrolledWindow a) -> Ptr (TDC b) -> IO ()

-- | usage: (@scrolledWindowPrepareDC obj dc@).
scrolledWindowPrepareDC :: ScrolledWindow  a -> DC  b ->  IO ()
scrolledWindowPrepareDC _obj dc 
  = withObjectRef "scrolledWindowPrepareDC" _obj $ \cobj__obj -> 
    withObjectPtr dc $ \cobj_dc -> 
    wxScrolledWindow_PrepareDC cobj__obj  cobj_dc  
foreign import ccall "wxScrolledWindow_PrepareDC" wxScrolledWindow_PrepareDC :: Ptr (TScrolledWindow a) -> Ptr (TDC b) -> IO ()

-- | usage: (@scrolledWindowScroll obj xposypos@).
scrolledWindowScroll :: ScrolledWindow  a -> Point ->  IO ()
scrolledWindowScroll _obj xposypos 
  = withObjectRef "scrolledWindowScroll" _obj $ \cobj__obj -> 
    wxScrolledWindow_Scroll cobj__obj  (toCIntPointX xposypos) (toCIntPointY xposypos)  
foreign import ccall "wxScrolledWindow_Scroll" wxScrolledWindow_Scroll :: Ptr (TScrolledWindow a) -> CInt -> CInt -> IO ()

-- | usage: (@scrolledWindowSetScale obj xs ys@).
scrolledWindowSetScale :: ScrolledWindow  a -> Double -> Double ->  IO ()
scrolledWindowSetScale _obj xs ys 
  = withObjectRef "scrolledWindowSetScale" _obj $ \cobj__obj -> 
    wxScrolledWindow_SetScale cobj__obj  xs  ys  
foreign import ccall "wxScrolledWindow_SetScale" wxScrolledWindow_SetScale :: Ptr (TScrolledWindow a) -> Double -> Double -> IO ()

-- | usage: (@scrolledWindowSetScrollPageSize obj orient pageSize@).
scrolledWindowSetScrollPageSize :: ScrolledWindow  a -> Int -> Int ->  IO ()
scrolledWindowSetScrollPageSize _obj orient pageSize 
  = withObjectRef "scrolledWindowSetScrollPageSize" _obj $ \cobj__obj -> 
    wxScrolledWindow_SetScrollPageSize cobj__obj  (toCInt orient)  (toCInt pageSize)  
foreign import ccall "wxScrolledWindow_SetScrollPageSize" wxScrolledWindow_SetScrollPageSize :: Ptr (TScrolledWindow a) -> CInt -> CInt -> IO ()

-- | usage: (@scrolledWindowSetScrollRate obj xstep ystep@).
scrolledWindowSetScrollRate :: ScrolledWindow  a -> Int -> Int ->  IO ()
scrolledWindowSetScrollRate _obj xstep ystep 
  = withObjectRef "scrolledWindowSetScrollRate" _obj $ \cobj__obj -> 
    wxScrolledWindow_SetScrollRate cobj__obj  (toCInt xstep)  (toCInt ystep)  
foreign import ccall "wxScrolledWindow_SetScrollRate" wxScrolledWindow_SetScrollRate :: Ptr (TScrolledWindow a) -> CInt -> CInt -> IO ()

-- | usage: (@scrolledWindowSetScrollbars obj pixelsPerUnitX pixelsPerUnitY noUnitsX noUnitsY xPos yPos noRefresh@).
scrolledWindowSetScrollbars :: ScrolledWindow  a -> Int -> Int -> Int -> Int -> Int -> Int -> Bool ->  IO ()
scrolledWindowSetScrollbars _obj pixelsPerUnitX pixelsPerUnitY noUnitsX noUnitsY xPos yPos noRefresh 
  = withObjectRef "scrolledWindowSetScrollbars" _obj $ \cobj__obj -> 
    wxScrolledWindow_SetScrollbars cobj__obj  (toCInt pixelsPerUnitX)  (toCInt pixelsPerUnitY)  (toCInt noUnitsX)  (toCInt noUnitsY)  (toCInt xPos)  (toCInt yPos)  (toCBool noRefresh)  
foreign import ccall "wxScrolledWindow_SetScrollbars" wxScrolledWindow_SetScrollbars :: Ptr (TScrolledWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> CBool -> IO ()

-- | usage: (@scrolledWindowSetTargetWindow obj target@).
scrolledWindowSetTargetWindow :: ScrolledWindow  a -> Window  b ->  IO ()
scrolledWindowSetTargetWindow _obj target 
  = withObjectRef "scrolledWindowSetTargetWindow" _obj $ \cobj__obj -> 
    withObjectPtr target $ \cobj_target -> 
    wxScrolledWindow_SetTargetWindow cobj__obj  cobj_target  
foreign import ccall "wxScrolledWindow_SetTargetWindow" wxScrolledWindow_SetTargetWindow :: Ptr (TScrolledWindow a) -> Ptr (TWindow b) -> IO ()

-- | usage: (@scrolledWindowShowScrollbars obj showh showv@).
scrolledWindowShowScrollbars :: ScrolledWindow  a -> Int -> Int ->  IO ()
scrolledWindowShowScrollbars _obj showh showv 
  = withObjectRef "scrolledWindowShowScrollbars" _obj $ \cobj__obj -> 
    wxScrolledWindow_ShowScrollbars cobj__obj  (toCInt showh)  (toCInt showv)  
foreign import ccall "wxScrolledWindow_ShowScrollbars" wxScrolledWindow_ShowScrollbars :: Ptr (TScrolledWindow a) -> CInt -> CInt -> IO ()

-- | usage: (@scrolledWindowViewStart obj@).
scrolledWindowViewStart :: ScrolledWindow  a ->  IO Point
scrolledWindowViewStart _obj 
  = withPointResult $ \px py -> 
    withObjectRef "scrolledWindowViewStart" _obj $ \cobj__obj -> 
    wxScrolledWindow_ViewStart cobj__obj   px py
foreign import ccall "wxScrolledWindow_ViewStart" wxScrolledWindow_ViewStart :: Ptr (TScrolledWindow a) -> Ptr CInt -> Ptr CInt -> IO ()

-- | usage: (@setCursorEventGetCursor obj@).
setCursorEventGetCursor :: SetCursorEvent  a ->  IO (Cursor  ())
setCursorEventGetCursor _obj 
  = withManagedCursorResult $
    withObjectRef "setCursorEventGetCursor" _obj $ \cobj__obj -> 
    wxSetCursorEvent_GetCursor cobj__obj  
foreign import ccall "wxSetCursorEvent_GetCursor" wxSetCursorEvent_GetCursor :: Ptr (TSetCursorEvent a) -> IO (Ptr (TCursor ()))

-- | usage: (@setCursorEventGetX obj@).
setCursorEventGetX :: SetCursorEvent  a ->  IO Int
setCursorEventGetX _obj 
  = withIntResult $
    withObjectRef "setCursorEventGetX" _obj $ \cobj__obj -> 
    wxSetCursorEvent_GetX cobj__obj  
foreign import ccall "wxSetCursorEvent_GetX" wxSetCursorEvent_GetX :: Ptr (TSetCursorEvent a) -> IO CInt

-- | usage: (@setCursorEventGetY obj@).
setCursorEventGetY :: SetCursorEvent  a ->  IO Int
setCursorEventGetY _obj 
  = withIntResult $
    withObjectRef "setCursorEventGetY" _obj $ \cobj__obj -> 
    wxSetCursorEvent_GetY cobj__obj  
foreign import ccall "wxSetCursorEvent_GetY" wxSetCursorEvent_GetY :: Ptr (TSetCursorEvent a) -> IO CInt

-- | usage: (@setCursorEventHasCursor obj@).
setCursorEventHasCursor :: SetCursorEvent  a ->  IO Bool
setCursorEventHasCursor _obj 
  = withBoolResult $
    withObjectRef "setCursorEventHasCursor" _obj $ \cobj__obj -> 
    wxSetCursorEvent_HasCursor cobj__obj  
foreign import ccall "wxSetCursorEvent_HasCursor" wxSetCursorEvent_HasCursor :: Ptr (TSetCursorEvent a) -> IO CBool

-- | usage: (@setCursorEventSetCursor obj cursor@).
setCursorEventSetCursor :: SetCursorEvent  a -> Cursor  b ->  IO ()
setCursorEventSetCursor _obj cursor 
  = withObjectRef "setCursorEventSetCursor" _obj $ \cobj__obj -> 
    withObjectPtr cursor $ \cobj_cursor -> 
    wxSetCursorEvent_SetCursor cobj__obj  cobj_cursor  
foreign import ccall "wxSetCursorEvent_SetCursor" wxSetCursorEvent_SetCursor :: Ptr (TSetCursorEvent a) -> Ptr (TCursor b) -> IO ()

-- | usage: (@showEventCopyObject obj obj@).
showEventCopyObject :: ShowEvent  a -> WxObject  b ->  IO ()
showEventCopyObject _obj obj 
  = withObjectRef "showEventCopyObject" _obj $ \cobj__obj -> 
    withObjectPtr obj $ \cobj_obj -> 
    wxShowEvent_CopyObject cobj__obj  cobj_obj  
foreign import ccall "wxShowEvent_CopyObject" wxShowEvent_CopyObject :: Ptr (TShowEvent a) -> Ptr (TWxObject b) -> IO ()

-- | usage: (@showEventIsShown obj@).
showEventIsShown :: ShowEvent  a ->  IO Bool
showEventIsShown _obj 
  = withBoolResult $
    withObjectRef "showEventIsShown" _obj $ \cobj__obj -> 
    wxShowEvent_IsShown cobj__obj  
foreign import ccall "wxShowEvent_IsShown" wxShowEvent_IsShown :: Ptr (TShowEvent a) -> IO CBool

-- | usage: (@showEventSetShow obj show@).
showEventSetShow :: ShowEvent  a -> Bool ->  IO ()
showEventSetShow _obj show 
  = withObjectRef "showEventSetShow" _obj $ \cobj__obj -> 
    wxShowEvent_SetShow cobj__obj  (toCBool show)  
foreign import ccall "wxShowEvent_SetShow" wxShowEvent_SetShow :: Ptr (TShowEvent a) -> CBool -> IO ()

-- | usage: (@simpleHelpProviderCreate@).
simpleHelpProviderCreate ::  IO (SimpleHelpProvider  ())
simpleHelpProviderCreate 
  = withObjectResult $
    wxSimpleHelpProvider_Create 
foreign import ccall "wxSimpleHelpProvider_Create" wxSimpleHelpProvider_Create :: IO (Ptr (TSimpleHelpProvider ()))

-- | usage: (@singleInstanceCheckerCreate obj name path@).
singleInstanceCheckerCreate :: Ptr  a -> String -> String ->  IO Bool
singleInstanceCheckerCreate _obj name path 
  = withBoolResult $
    withStringPtr name $ \cobj_name -> 
    withStringPtr path $ \cobj_path -> 
    wxSingleInstanceChecker_Create _obj  cobj_name  cobj_path  
foreign import ccall "wxSingleInstanceChecker_Create" wxSingleInstanceChecker_Create :: Ptr  a -> Ptr (TWxString b) -> Ptr (TWxString c) -> IO CBool

-- | usage: (@singleInstanceCheckerCreateDefault@).
singleInstanceCheckerCreateDefault ::  IO (SingleInstanceChecker  ())
singleInstanceCheckerCreateDefault 
  = withObjectResult $
    wxSingleInstanceChecker_CreateDefault 
foreign import ccall "wxSingleInstanceChecker_CreateDefault" wxSingleInstanceChecker_CreateDefault :: IO (Ptr (TSingleInstanceChecker ()))

-- | usage: (@singleInstanceCheckerDelete obj@).
singleInstanceCheckerDelete :: SingleInstanceChecker  a ->  IO ()
singleInstanceCheckerDelete _obj 
  = withObjectRef "singleInstanceCheckerDelete" _obj $ \cobj__obj -> 
    wxSingleInstanceChecker_Delete cobj__obj  
foreign import ccall "wxSingleInstanceChecker_Delete" wxSingleInstanceChecker_Delete :: Ptr (TSingleInstanceChecker a) -> IO ()

-- | usage: (@singleInstanceCheckerIsAnotherRunning obj@).
singleInstanceCheckerIsAnotherRunning :: SingleInstanceChecker  a ->  IO Bool
singleInstanceCheckerIsAnotherRunning _obj 
  = withBoolResult $
    withObjectRef "singleInstanceCheckerIsAnotherRunning" _obj $ \cobj__obj -> 
    wxSingleInstanceChecker_IsAnotherRunning cobj__obj  
foreign import ccall "wxSingleInstanceChecker_IsAnotherRunning" wxSingleInstanceChecker_IsAnotherRunning :: Ptr (TSingleInstanceChecker a) -> IO CBool

-- | usage: (@sizeEventCopyObject obj obj@).
sizeEventCopyObject :: SizeEvent  a -> Ptr  b ->  IO ()
sizeEventCopyObject _obj obj 
  = withObjectRef "sizeEventCopyObject" _obj $ \cobj__obj -> 
    wxSizeEvent_CopyObject cobj__obj  obj  
foreign import ccall "wxSizeEvent_CopyObject" wxSizeEvent_CopyObject :: Ptr (TSizeEvent a) -> Ptr  b -> IO ()

-- | usage: (@sizeEventGetSize obj@).
sizeEventGetSize :: SizeEvent  a ->  IO (Size)
sizeEventGetSize _obj 
  = withWxSizeResult $
    withObjectRef "sizeEventGetSize" _obj $ \cobj__obj -> 
    wxSizeEvent_GetSize cobj__obj  
foreign import ccall "wxSizeEvent_GetSize" wxSizeEvent_GetSize :: Ptr (TSizeEvent a) -> IO (Ptr (TWxSize ()))

-- | usage: (@sizerAdd obj widthheight option flag border userData@).
sizerAdd :: Sizer  a -> Size -> Int -> Int -> Int -> Ptr  f ->  IO ()
sizerAdd _obj widthheight option flag border userData 
  = withObjectRef "sizerAdd" _obj $ \cobj__obj -> 
    wxSizer_Add cobj__obj  (toCIntSizeW widthheight) (toCIntSizeH widthheight)  (toCInt option)  (toCInt flag)  (toCInt border)  userData  
foreign import ccall "wxSizer_Add" wxSizer_Add :: Ptr (TSizer a) -> CInt -> CInt -> CInt -> CInt -> CInt -> Ptr  f -> IO ()

-- | usage: (@sizerAddSizer obj sizer option flag border userData@).
sizerAddSizer :: Sizer  a -> Sizer  b -> Int -> Int -> Int -> Ptr  f ->  IO ()
sizerAddSizer _obj sizer option flag border userData 
  = withObjectRef "sizerAddSizer" _obj $ \cobj__obj -> 
    withObjectPtr sizer $ \cobj_sizer -> 
    wxSizer_AddSizer cobj__obj  cobj_sizer  (toCInt option)  (toCInt flag)  (toCInt border)  userData  
foreign import ccall "wxSizer_AddSizer" wxSizer_AddSizer :: Ptr (TSizer a) -> Ptr (TSizer b) -> CInt -> CInt -> CInt -> Ptr  f -> IO ()

-- | usage: (@sizerAddSpacer obj size@).
sizerAddSpacer :: Sizer  a -> Int ->  IO ()
sizerAddSpacer _obj size 
  = withObjectRef "sizerAddSpacer" _obj $ \cobj__obj -> 
    wxSizer_AddSpacer cobj__obj  (toCInt size)  
foreign import ccall "wxSizer_AddSpacer" wxSizer_AddSpacer :: Ptr (TSizer a) -> CInt -> IO ()

-- | usage: (@sizerAddStretchSpacer obj size@).
sizerAddStretchSpacer :: Sizer  a -> Int ->  IO ()
sizerAddStretchSpacer _obj size 
  = withObjectRef "sizerAddStretchSpacer" _obj $ \cobj__obj -> 
    wxSizer_AddStretchSpacer cobj__obj  (toCInt size)  
foreign import ccall "wxSizer_AddStretchSpacer" wxSizer_AddStretchSpacer :: Ptr (TSizer a) -> CInt -> IO ()

-- | usage: (@sizerAddWindow obj window option flag border userData@).
sizerAddWindow :: Sizer  a -> Window  b -> Int -> Int -> Int -> Ptr  f ->  IO ()
sizerAddWindow _obj window option flag border userData 
  = withObjectRef "sizerAddWindow" _obj $ \cobj__obj -> 
    withObjectPtr window $ \cobj_window -> 
    wxSizer_AddWindow cobj__obj  cobj_window  (toCInt option)  (toCInt flag)  (toCInt border)  userData  
foreign import ccall "wxSizer_AddWindow" wxSizer_AddWindow :: Ptr (TSizer a) -> Ptr (TWindow b) -> CInt -> CInt -> CInt -> Ptr  f -> IO ()

-- | usage: (@sizerCalcMin obj@).
sizerCalcMin :: Sizer  a ->  IO (Size)
sizerCalcMin _obj 
  = withWxSizeResult $
    withObjectRef "sizerCalcMin" _obj $ \cobj__obj -> 
    wxSizer_CalcMin cobj__obj  
foreign import ccall "wxSizer_CalcMin" wxSizer_CalcMin :: Ptr (TSizer a) -> IO (Ptr (TWxSize ()))

-- | usage: (@sizerClear obj deletewindows@).
sizerClear :: Sizer  a -> Bool ->  IO ()
sizerClear _obj deletewindows 
  = withObjectRef "sizerClear" _obj $ \cobj__obj -> 
    wxSizer_Clear cobj__obj  (toCBool deletewindows)  
foreign import ccall "wxSizer_Clear" wxSizer_Clear :: Ptr (TSizer a) -> CBool -> IO ()

-- | usage: (@sizerDetach obj index@).
sizerDetach :: Sizer  a -> Int ->  IO Bool
sizerDetach _obj index 
  = withBoolResult $
    withObjectRef "sizerDetach" _obj $ \cobj__obj -> 
    wxSizer_Detach cobj__obj  (toCInt index)  
foreign import ccall "wxSizer_Detach" wxSizer_Detach :: Ptr (TSizer a) -> CInt -> IO CBool

-- | usage: (@sizerDetachSizer obj sizer@).
sizerDetachSizer :: Sizer  a -> Sizer  b ->  IO Bool
sizerDetachSizer _obj sizer 
  = withBoolResult $
    withObjectRef "sizerDetachSizer" _obj $ \cobj__obj -> 
    withObjectPtr sizer $ \cobj_sizer -> 
    wxSizer_DetachSizer cobj__obj  cobj_sizer  
foreign import ccall "wxSizer_DetachSizer" wxSizer_DetachSizer :: Ptr (TSizer a) -> Ptr (TSizer b) -> IO CBool

-- | usage: (@sizerDetachWindow obj window@).
sizerDetachWindow :: Sizer  a -> Window  b ->  IO Bool
sizerDetachWindow _obj window 
  = withBoolResult $
    withObjectRef "sizerDetachWindow" _obj $ \cobj__obj -> 
    withObjectPtr window $ \cobj_window -> 
    wxSizer_DetachWindow cobj__obj  cobj_window  
foreign import ccall "wxSizer_DetachWindow" wxSizer_DetachWindow :: Ptr (TSizer a) -> Ptr (TWindow b) -> IO CBool

-- | usage: (@sizerFit obj window@).
sizerFit :: Sizer  a -> Window  b ->  IO ()
sizerFit _obj window 
  = withObjectRef "sizerFit" _obj $ \cobj__obj -> 
    withObjectPtr window $ \cobj_window -> 
    wxSizer_Fit cobj__obj  cobj_window  
foreign import ccall "wxSizer_Fit" wxSizer_Fit :: Ptr (TSizer a) -> Ptr (TWindow b) -> IO ()

-- | usage: (@sizerFitInside obj window@).
sizerFitInside :: Sizer  a -> Window  b ->  IO ()
sizerFitInside _obj window 
  = withObjectRef "sizerFitInside" _obj $ \cobj__obj -> 
    withObjectPtr window $ \cobj_window -> 
    wxSizer_FitInside cobj__obj  cobj_window  
foreign import ccall "wxSizer_FitInside" wxSizer_FitInside :: Ptr (TSizer a) -> Ptr (TWindow b) -> IO ()

-- | usage: (@sizerGetChildren obj res cnt@).
sizerGetChildren :: Sizer  a -> Ptr  b -> Int ->  IO Int
sizerGetChildren _obj _res _cnt 
  = withIntResult $
    withObjectRef "sizerGetChildren" _obj $ \cobj__obj -> 
    wxSizer_GetChildren cobj__obj  _res  (toCInt _cnt)  
foreign import ccall "wxSizer_GetChildren" wxSizer_GetChildren :: Ptr (TSizer a) -> Ptr  b -> CInt -> IO CInt

-- | usage: (@sizerGetContainingWindow obj@).
sizerGetContainingWindow :: Sizer  a ->  IO (Window  ())
sizerGetContainingWindow _obj 
  = withObjectResult $
    withObjectRef "sizerGetContainingWindow" _obj $ \cobj__obj -> 
    wxSizer_GetContainingWindow cobj__obj  
foreign import ccall "wxSizer_GetContainingWindow" wxSizer_GetContainingWindow :: Ptr (TSizer a) -> IO (Ptr (TWindow ()))

-- | usage: (@sizerGetItem obj index@).
sizerGetItem :: Sizer  a -> Int ->  IO (SizerItem  ())
sizerGetItem _obj index 
  = withObjectResult $
    withObjectRef "sizerGetItem" _obj $ \cobj__obj -> 
    wxSizer_GetItem cobj__obj  (toCInt index)  
foreign import ccall "wxSizer_GetItem" wxSizer_GetItem :: Ptr (TSizer a) -> CInt -> IO (Ptr (TSizerItem ()))

-- | usage: (@sizerGetItemSizer obj window recursive@).
sizerGetItemSizer :: Sizer  a -> Sizer  b -> Bool ->  IO (SizerItem  ())
sizerGetItemSizer _obj window recursive 
  = withObjectResult $
    withObjectRef "sizerGetItemSizer" _obj $ \cobj__obj -> 
    withObjectPtr window $ \cobj_window -> 
    wxSizer_GetItemSizer cobj__obj  cobj_window  (toCBool recursive)  
foreign import ccall "wxSizer_GetItemSizer" wxSizer_GetItemSizer :: Ptr (TSizer a) -> Ptr (TSizer b) -> CBool -> IO (Ptr (TSizerItem ()))

-- | usage: (@sizerGetItemWindow obj window recursive@).
sizerGetItemWindow :: Sizer  a -> Window  b -> Bool ->  IO (SizerItem  ())
sizerGetItemWindow _obj window recursive 
  = withObjectResult $
    withObjectRef "sizerGetItemWindow" _obj $ \cobj__obj -> 
    withObjectPtr window $ \cobj_window -> 
    wxSizer_GetItemWindow cobj__obj  cobj_window  (toCBool recursive)  
foreign import ccall "wxSizer_GetItemWindow" wxSizer_GetItemWindow :: Ptr (TSizer a) -> Ptr (TWindow b) -> CBool -> IO (Ptr (TSizerItem ()))

-- | usage: (@sizerGetMinSize obj@).
sizerGetMinSize :: Sizer  a ->  IO (Size)
sizerGetMinSize _obj 
  = withWxSizeResult $
    withObjectRef "sizerGetMinSize" _obj $ \cobj__obj -> 
    wxSizer_GetMinSize cobj__obj  
foreign import ccall "wxSizer_GetMinSize" wxSizer_GetMinSize :: Ptr (TSizer a) -> IO (Ptr (TWxSize ()))

-- | usage: (@sizerGetPosition obj@).
sizerGetPosition :: Sizer  a ->  IO (Point)
sizerGetPosition _obj 
  = withWxPointResult $
    withObjectRef "sizerGetPosition" _obj $ \cobj__obj -> 
    wxSizer_GetPosition cobj__obj  
foreign import ccall "wxSizer_GetPosition" wxSizer_GetPosition :: Ptr (TSizer a) -> IO (Ptr (TWxPoint ()))

-- | usage: (@sizerGetSize obj@).
sizerGetSize :: Sizer  a ->  IO (Size)
sizerGetSize _obj 
  = withWxSizeResult $
    withObjectRef "sizerGetSize" _obj $ \cobj__obj -> 
    wxSizer_GetSize cobj__obj  
foreign import ccall "wxSizer_GetSize" wxSizer_GetSize :: Ptr (TSizer a) -> IO (Ptr (TWxSize ()))

-- | usage: (@sizerHide obj index@).
sizerHide :: Window  a -> Int ->  IO Bool
sizerHide _obj index 
  = withBoolResult $
    withObjectPtr _obj $ \cobj__obj -> 
    wxSizer_Hide cobj__obj  (toCInt index)  
foreign import ccall "wxSizer_Hide" wxSizer_Hide :: Ptr (TWindow a) -> CInt -> IO CBool

-- | usage: (@sizerHideSizer obj sizer@).
sizerHideSizer :: Window  a -> Sizer  b ->  IO Bool
sizerHideSizer _obj sizer 
  = withBoolResult $
    withObjectPtr _obj $ \cobj__obj -> 
    withObjectPtr sizer $ \cobj_sizer -> 
    wxSizer_HideSizer cobj__obj  cobj_sizer  
foreign import ccall "wxSizer_HideSizer" wxSizer_HideSizer :: Ptr (TWindow a) -> Ptr (TSizer b) -> IO CBool

-- | usage: (@sizerHideWindow obj window@).
sizerHideWindow :: Window  a -> Window  b ->  IO Bool
sizerHideWindow _obj window 
  = withBoolResult $
    withObjectPtr _obj $ \cobj__obj -> 
    withObjectPtr window $ \cobj_window -> 
    wxSizer_HideWindow cobj__obj  cobj_window  
foreign import ccall "wxSizer_HideWindow" wxSizer_HideWindow :: Ptr (TWindow a) -> Ptr (TWindow b) -> IO CBool

-- | usage: (@sizerInsert obj before widthheight option flag border userData@).
sizerInsert :: Sizer  a -> Int -> Size -> Int -> Int -> Int -> Ptr  g ->  IO ()
sizerInsert _obj before widthheight option flag border userData 
  = withObjectRef "sizerInsert" _obj $ \cobj__obj -> 
    wxSizer_Insert cobj__obj  (toCInt before)  (toCIntSizeW widthheight) (toCIntSizeH widthheight)  (toCInt option)  (toCInt flag)  (toCInt border)  userData  
foreign import ccall "wxSizer_Insert" wxSizer_Insert :: Ptr (TSizer a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> Ptr  g -> IO ()

-- | usage: (@sizerInsertSizer obj before sizer option flag border userData@).
sizerInsertSizer :: Sizer  a -> Int -> Sizer  c -> Int -> Int -> Int -> Ptr  g ->  IO ()
sizerInsertSizer _obj before sizer option flag border userData 
  = withObjectRef "sizerInsertSizer" _obj $ \cobj__obj -> 
    withObjectPtr sizer $ \cobj_sizer -> 
    wxSizer_InsertSizer cobj__obj  (toCInt before)  cobj_sizer  (toCInt option)  (toCInt flag)  (toCInt border)  userData  
foreign import ccall "wxSizer_InsertSizer" wxSizer_InsertSizer :: Ptr (TSizer a) -> CInt -> Ptr (TSizer c) -> CInt -> CInt -> CInt -> Ptr  g -> IO ()

-- | usage: (@sizerInsertSpacer obj index size@).
sizerInsertSpacer :: Sizer  a -> Int -> Int ->  IO (SizerItem  ())
sizerInsertSpacer _obj index size 
  = withObjectResult $
    withObjectRef "sizerInsertSpacer" _obj $ \cobj__obj -> 
    wxSizer_InsertSpacer cobj__obj  (toCInt index)  (toCInt size)  
foreign import ccall "wxSizer_InsertSpacer" wxSizer_InsertSpacer :: Ptr (TSizer a) -> CInt -> CInt -> IO (Ptr (TSizerItem ()))

-- | usage: (@sizerInsertStretchSpacer obj index prop@).
sizerInsertStretchSpacer :: Sizer  a -> Int -> Int ->  IO (SizerItem  ())
sizerInsertStretchSpacer _obj index prop 
  = withObjectResult $
    withObjectRef "sizerInsertStretchSpacer" _obj $ \cobj__obj -> 
    wxSizer_InsertStretchSpacer cobj__obj  (toCInt index)  (toCInt prop)  
foreign import ccall "wxSizer_InsertStretchSpacer" wxSizer_InsertStretchSpacer :: Ptr (TSizer a) -> CInt -> CInt -> IO (Ptr (TSizerItem ()))

-- | usage: (@sizerInsertWindow obj before window option flag border userData@).
sizerInsertWindow :: Sizer  a -> Int -> Window  c -> Int -> Int -> Int -> Ptr  g ->  IO ()
sizerInsertWindow _obj before window option flag border userData 
  = withObjectRef "sizerInsertWindow" _obj $ \cobj__obj -> 
    withObjectPtr window $ \cobj_window -> 
    wxSizer_InsertWindow cobj__obj  (toCInt before)  cobj_window  (toCInt option)  (toCInt flag)  (toCInt border)  userData  
foreign import ccall "wxSizer_InsertWindow" wxSizer_InsertWindow :: Ptr (TSizer a) -> CInt -> Ptr (TWindow c) -> CInt -> CInt -> CInt -> Ptr  g -> IO ()

-- | usage: (@sizerIsShown obj index@).
sizerIsShown :: Sizer  a -> Int ->  IO Bool
sizerIsShown _obj index 
  = withBoolResult $
    withObjectRef "sizerIsShown" _obj $ \cobj__obj -> 
    wxSizer_IsShown cobj__obj  (toCInt index)  
foreign import ccall "wxSizer_IsShown" wxSizer_IsShown :: Ptr (TSizer a) -> CInt -> IO CBool

-- | usage: (@sizerIsShownSizer obj sizer@).
sizerIsShownSizer :: Sizer  a -> Ptr (Ptr (TSizer b)) ->  IO Bool
sizerIsShownSizer _obj sizer 
  = withBoolResult $
    withObjectRef "sizerIsShownSizer" _obj $ \cobj__obj -> 
    wxSizer_IsShownSizer cobj__obj  sizer  
foreign import ccall "wxSizer_IsShownSizer" wxSizer_IsShownSizer :: Ptr (TSizer a) -> Ptr (Ptr (TSizer b)) -> IO CBool

-- | usage: (@sizerIsShownWindow obj window@).
sizerIsShownWindow :: Sizer  a -> Ptr (Ptr (TWindow b)) ->  IO Bool
sizerIsShownWindow _obj window 
  = withBoolResult $
    withObjectRef "sizerIsShownWindow" _obj $ \cobj__obj -> 
    wxSizer_IsShownWindow cobj__obj  window  
foreign import ccall "wxSizer_IsShownWindow" wxSizer_IsShownWindow :: Ptr (TSizer a) -> Ptr (Ptr (TWindow b)) -> IO CBool

-- | usage: (@sizerItemAssignSizer obj sizer@).
sizerItemAssignSizer :: SizerItem  a -> Sizer  b ->  IO ()
sizerItemAssignSizer _obj sizer 
  = withObjectRef "sizerItemAssignSizer" _obj $ \cobj__obj -> 
    withObjectPtr sizer $ \cobj_sizer -> 
    wxSizerItem_AssignSizer cobj__obj  cobj_sizer  
foreign import ccall "wxSizerItem_AssignSizer" wxSizerItem_AssignSizer :: Ptr (TSizerItem a) -> Ptr (TSizer b) -> IO ()

-- | usage: (@sizerItemAssignSpacer obj widthheight@).
sizerItemAssignSpacer :: SizerItem  a -> Size ->  IO ()
sizerItemAssignSpacer _obj widthheight 
  = withObjectRef "sizerItemAssignSpacer" _obj $ \cobj__obj -> 
    wxSizerItem_AssignSpacer cobj__obj  (toCIntSizeW widthheight) (toCIntSizeH widthheight)  
foreign import ccall "wxSizerItem_AssignSpacer" wxSizerItem_AssignSpacer :: Ptr (TSizerItem a) -> CInt -> CInt -> IO ()

-- | usage: (@sizerItemAssignWindow obj window@).
sizerItemAssignWindow :: SizerItem  a -> Window  b ->  IO ()
sizerItemAssignWindow _obj window 
  = withObjectRef "sizerItemAssignWindow" _obj $ \cobj__obj -> 
    withObjectPtr window $ \cobj_window -> 
    wxSizerItem_AssignWindow cobj__obj  cobj_window  
foreign import ccall "wxSizerItem_AssignWindow" wxSizerItem_AssignWindow :: Ptr (TSizerItem a) -> Ptr (TWindow b) -> IO ()

-- | usage: (@sizerItemCalcMin obj@).
sizerItemCalcMin :: SizerItem  a ->  IO (Size)
sizerItemCalcMin _obj 
  = withWxSizeResult $
    withObjectRef "sizerItemCalcMin" _obj $ \cobj__obj -> 
    wxSizerItem_CalcMin cobj__obj  
foreign import ccall "wxSizerItem_CalcMin" wxSizerItem_CalcMin :: Ptr (TSizerItem a) -> IO (Ptr (TWxSize ()))

-- | usage: (@sizerItemCreate widthheight option flag border userData@).
sizerItemCreate :: Size -> Int -> Int -> Int -> Ptr  e ->  IO (SizerItem  ())
sizerItemCreate widthheight option flag border userData 
  = withObjectResult $
    wxSizerItem_Create (toCIntSizeW widthheight) (toCIntSizeH widthheight)  (toCInt option)  (toCInt flag)  (toCInt border)  userData  
foreign import ccall "wxSizerItem_Create" wxSizerItem_Create :: CInt -> CInt -> CInt -> CInt -> CInt -> Ptr  e -> IO (Ptr (TSizerItem ()))

-- | usage: (@sizerItemCreateInSizer sizer option flag border userData@).
sizerItemCreateInSizer :: Sizer  a -> Int -> Int -> Int -> Ptr  e ->  IO (Ptr  ())
sizerItemCreateInSizer sizer option flag border userData 
  = withObjectPtr sizer $ \cobj_sizer -> 
    wxSizerItem_CreateInSizer cobj_sizer  (toCInt option)  (toCInt flag)  (toCInt border)  userData  
foreign import ccall "wxSizerItem_CreateInSizer" wxSizerItem_CreateInSizer :: Ptr (TSizer a) -> CInt -> CInt -> CInt -> Ptr  e -> IO (Ptr  ())

-- | usage: (@sizerItemCreateInWindow window option flag border userData@).
sizerItemCreateInWindow :: Window  a -> Int -> Int -> Int -> Ptr  e ->  IO (Ptr  ())
sizerItemCreateInWindow window option flag border userData 
  = withObjectPtr window $ \cobj_window -> 
    wxSizerItem_CreateInWindow cobj_window  (toCInt option)  (toCInt flag)  (toCInt border)  userData  
foreign import ccall "wxSizerItem_CreateInWindow" wxSizerItem_CreateInWindow :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> Ptr  e -> IO (Ptr  ())

-- | usage: (@sizerItemDelete obj@).
sizerItemDelete :: SizerItem  a ->  IO ()
sizerItemDelete
  = objectDelete


-- | usage: (@sizerItemDeleteWindows obj@).
sizerItemDeleteWindows :: SizerItem  a ->  IO ()
sizerItemDeleteWindows _obj 
  = withObjectRef "sizerItemDeleteWindows" _obj $ \cobj__obj -> 
    wxSizerItem_DeleteWindows cobj__obj  
foreign import ccall "wxSizerItem_DeleteWindows" wxSizerItem_DeleteWindows :: Ptr (TSizerItem a) -> IO ()

-- | usage: (@sizerItemDetachSizer obj@).
sizerItemDetachSizer :: SizerItem  a ->  IO ()
sizerItemDetachSizer _obj 
  = withObjectRef "sizerItemDetachSizer" _obj $ \cobj__obj -> 
    wxSizerItem_DetachSizer cobj__obj  
foreign import ccall "wxSizerItem_DetachSizer" wxSizerItem_DetachSizer :: Ptr (TSizerItem a) -> IO ()

-- | usage: (@sizerItemGetBorder obj@).
sizerItemGetBorder :: SizerItem  a ->  IO Int
sizerItemGetBorder _obj 
  = withIntResult $
    withObjectRef "sizerItemGetBorder" _obj $ \cobj__obj -> 
    wxSizerItem_GetBorder cobj__obj  
foreign import ccall "wxSizerItem_GetBorder" wxSizerItem_GetBorder :: Ptr (TSizerItem a) -> IO CInt

-- | usage: (@sizerItemGetFlag obj@).
sizerItemGetFlag :: SizerItem  a ->  IO Int
sizerItemGetFlag _obj 
  = withIntResult $
    withObjectRef "sizerItemGetFlag" _obj $ \cobj__obj -> 
    wxSizerItem_GetFlag cobj__obj  
foreign import ccall "wxSizerItem_GetFlag" wxSizerItem_GetFlag :: Ptr (TSizerItem a) -> IO CInt

-- | usage: (@sizerItemGetMinSize obj@).
sizerItemGetMinSize :: SizerItem  a ->  IO (Size)
sizerItemGetMinSize _obj 
  = withWxSizeResult $
    withObjectRef "sizerItemGetMinSize" _obj $ \cobj__obj -> 
    wxSizerItem_GetMinSize cobj__obj  
foreign import ccall "wxSizerItem_GetMinSize" wxSizerItem_GetMinSize :: Ptr (TSizerItem a) -> IO (Ptr (TWxSize ()))

-- | usage: (@sizerItemGetPosition obj@).
sizerItemGetPosition :: SizerItem  a ->  IO (Point)
sizerItemGetPosition _obj 
  = withWxPointResult $
    withObjectRef "sizerItemGetPosition" _obj $ \cobj__obj -> 
    wxSizerItem_GetPosition cobj__obj  
foreign import ccall "wxSizerItem_GetPosition" wxSizerItem_GetPosition :: Ptr (TSizerItem a) -> IO (Ptr (TWxPoint ()))

-- | usage: (@sizerItemGetProportion obj@).
sizerItemGetProportion :: SizerItem  a ->  IO Int
sizerItemGetProportion _obj 
  = withIntResult $
    withObjectRef "sizerItemGetProportion" _obj $ \cobj__obj -> 
    wxSizerItem_GetProportion cobj__obj  
foreign import ccall "wxSizerItem_GetProportion" wxSizerItem_GetProportion :: Ptr (TSizerItem a) -> IO CInt

-- | usage: (@sizerItemGetRatio obj@).
sizerItemGetRatio :: SizerItem  a ->  IO Float
sizerItemGetRatio _obj 
  = withObjectRef "sizerItemGetRatio" _obj $ \cobj__obj -> 
    wxSizerItem_GetRatio cobj__obj  
foreign import ccall "wxSizerItem_GetRatio" wxSizerItem_GetRatio :: Ptr (TSizerItem a) -> IO Float

-- | usage: (@sizerItemGetRect obj@).
sizerItemGetRect :: SizerItem  a ->  IO (Rect)
sizerItemGetRect _obj 
  = withWxRectResult $
    withObjectRef "sizerItemGetRect" _obj $ \cobj__obj -> 
    wxSizerItem_GetRect cobj__obj  
foreign import ccall "wxSizerItem_GetRect" wxSizerItem_GetRect :: Ptr (TSizerItem a) -> IO (Ptr (TWxRect ()))

-- | usage: (@sizerItemGetSize obj@).
sizerItemGetSize :: SizerItem  a ->  IO (Size)
sizerItemGetSize _obj 
  = withWxSizeResult $
    withObjectRef "sizerItemGetSize" _obj $ \cobj__obj -> 
    wxSizerItem_GetSize cobj__obj  
foreign import ccall "wxSizerItem_GetSize" wxSizerItem_GetSize :: Ptr (TSizerItem a) -> IO (Ptr (TWxSize ()))

-- | usage: (@sizerItemGetSizer obj@).
sizerItemGetSizer :: SizerItem  a ->  IO (Sizer  ())
sizerItemGetSizer _obj 
  = withObjectResult $
    withObjectRef "sizerItemGetSizer" _obj $ \cobj__obj -> 
    wxSizerItem_GetSizer cobj__obj  
foreign import ccall "wxSizerItem_GetSizer" wxSizerItem_GetSizer :: Ptr (TSizerItem a) -> IO (Ptr (TSizer ()))

-- | usage: (@sizerItemGetSpacer obj@).
sizerItemGetSpacer :: SizerItem  a ->  IO (Size)
sizerItemGetSpacer _obj 
  = withWxSizeResult $
    withObjectRef "sizerItemGetSpacer" _obj $ \cobj__obj -> 
    wxSizerItem_GetSpacer cobj__obj  
foreign import ccall "wxSizerItem_GetSpacer" wxSizerItem_GetSpacer :: Ptr (TSizerItem a) -> IO (Ptr (TWxSize ()))

-- | usage: (@sizerItemGetUserData obj@).
sizerItemGetUserData :: SizerItem  a ->  IO (Ptr  ())
sizerItemGetUserData _obj 
  = withObjectRef "sizerItemGetUserData" _obj $ \cobj__obj -> 
    wxSizerItem_GetUserData cobj__obj  
foreign import ccall "wxSizerItem_GetUserData" wxSizerItem_GetUserData :: Ptr (TSizerItem a) -> IO (Ptr  ())

-- | usage: (@sizerItemGetWindow obj@).
sizerItemGetWindow :: SizerItem  a ->  IO (Window  ())
sizerItemGetWindow _obj 
  = withObjectResult $
    withObjectRef "sizerItemGetWindow" _obj $ \cobj__obj -> 
    wxSizerItem_GetWindow cobj__obj  
foreign import ccall "wxSizerItem_GetWindow" wxSizerItem_GetWindow :: Ptr (TSizerItem a) -> IO (Ptr (TWindow ()))

-- | usage: (@sizerItemIsShown obj@).
sizerItemIsShown :: SizerItem  a ->  IO Bool
sizerItemIsShown _obj 
  = withBoolResult $
    withObjectRef "sizerItemIsShown" _obj $ \cobj__obj -> 
    wxSizerItem_IsShown cobj__obj  
foreign import ccall "wxSizerItem_IsShown" wxSizerItem_IsShown :: Ptr (TSizerItem a) -> IO CBool

-- | usage: (@sizerItemIsSizer obj@).
sizerItemIsSizer :: SizerItem  a ->  IO Bool
sizerItemIsSizer _obj 
  = withBoolResult $
    withObjectRef "sizerItemIsSizer" _obj $ \cobj__obj -> 
    wxSizerItem_IsSizer cobj__obj  
foreign import ccall "wxSizerItem_IsSizer" wxSizerItem_IsSizer :: Ptr (TSizerItem a) -> IO CBool

-- | usage: (@sizerItemIsSpacer obj@).
sizerItemIsSpacer :: SizerItem  a ->  IO Bool
sizerItemIsSpacer _obj 
  = withBoolResult $
    withObjectRef "sizerItemIsSpacer" _obj $ \cobj__obj -> 
    wxSizerItem_IsSpacer cobj__obj  
foreign import ccall "wxSizerItem_IsSpacer" wxSizerItem_IsSpacer :: Ptr (TSizerItem a) -> IO CBool

-- | usage: (@sizerItemIsWindow obj@).
sizerItemIsWindow :: SizerItem  a ->  IO Bool
sizerItemIsWindow _obj 
  = withBoolResult $
    withObjectRef "sizerItemIsWindow" _obj $ \cobj__obj -> 
    wxSizerItem_IsWindow cobj__obj  
foreign import ccall "wxSizerItem_IsWindow" wxSizerItem_IsWindow :: Ptr (TSizerItem a) -> IO CBool

-- | usage: (@sizerItemSetBorder obj border@).
sizerItemSetBorder :: SizerItem  a -> Int ->  IO ()
sizerItemSetBorder _obj border 
  = withObjectRef "sizerItemSetBorder" _obj $ \cobj__obj -> 
    wxSizerItem_SetBorder cobj__obj  (toCInt border)  
foreign import ccall "wxSizerItem_SetBorder" wxSizerItem_SetBorder :: Ptr (TSizerItem a) -> CInt -> IO ()

-- | usage: (@sizerItemSetDimension obj xywh@).
sizerItemSetDimension :: SizerItem  a -> Rect ->  IO ()
sizerItemSetDimension _obj _xywh 
  = withObjectRef "sizerItemSetDimension" _obj $ \cobj__obj -> 
    wxSizerItem_SetDimension cobj__obj  (toCIntRectX _xywh) (toCIntRectY _xywh)(toCIntRectW _xywh) (toCIntRectH _xywh)  
foreign import ccall "wxSizerItem_SetDimension" wxSizerItem_SetDimension :: Ptr (TSizerItem a) -> CInt -> CInt -> CInt -> CInt -> IO ()

-- | usage: (@sizerItemSetFlag obj flag@).
sizerItemSetFlag :: SizerItem  a -> Int ->  IO ()
sizerItemSetFlag _obj flag 
  = withObjectRef "sizerItemSetFlag" _obj $ \cobj__obj -> 
    wxSizerItem_SetFlag cobj__obj  (toCInt flag)  
foreign import ccall "wxSizerItem_SetFlag" wxSizerItem_SetFlag :: Ptr (TSizerItem a) -> CInt -> IO ()

-- | usage: (@sizerItemSetFloatRatio obj ratio@).
sizerItemSetFloatRatio :: SizerItem  a -> Float ->  IO ()
sizerItemSetFloatRatio _obj ratio 
  = withObjectRef "sizerItemSetFloatRatio" _obj $ \cobj__obj -> 
    wxSizerItem_SetFloatRatio cobj__obj  ratio  
foreign import ccall "wxSizerItem_SetFloatRatio" wxSizerItem_SetFloatRatio :: Ptr (TSizerItem a) -> Float -> IO ()

-- | usage: (@sizerItemSetInitSize obj xy@).
sizerItemSetInitSize :: SizerItem  a -> Point ->  IO ()
sizerItemSetInitSize _obj xy 
  = withObjectRef "sizerItemSetInitSize" _obj $ \cobj__obj -> 
    wxSizerItem_SetInitSize cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
foreign import ccall "wxSizerItem_SetInitSize" wxSizerItem_SetInitSize :: Ptr (TSizerItem a) -> CInt -> CInt -> IO ()

-- | usage: (@sizerItemSetProportion obj proportion@).
sizerItemSetProportion :: SizerItem  a -> Int ->  IO ()
sizerItemSetProportion _obj proportion 
  = withObjectRef "sizerItemSetProportion" _obj $ \cobj__obj -> 
    wxSizerItem_SetProportion cobj__obj  (toCInt proportion)  
foreign import ccall "wxSizerItem_SetProportion" wxSizerItem_SetProportion :: Ptr (TSizerItem a) -> CInt -> IO ()

-- | usage: (@sizerItemSetRatio obj widthheight@).
sizerItemSetRatio :: SizerItem  a -> Size ->  IO ()
sizerItemSetRatio _obj widthheight 
  = withObjectRef "sizerItemSetRatio" _obj $ \cobj__obj -> 
    wxSizerItem_SetRatio cobj__obj  (toCIntSizeW widthheight) (toCIntSizeH widthheight)  
foreign import ccall "wxSizerItem_SetRatio" wxSizerItem_SetRatio :: Ptr (TSizerItem a) -> CInt -> CInt -> IO ()

-- | usage: (@sizerItemShow obj show@).
sizerItemShow :: SizerItem  a -> Int ->  IO ()
sizerItemShow _obj show 
  = withObjectRef "sizerItemShow" _obj $ \cobj__obj -> 
    wxSizerItem_Show cobj__obj  (toCInt show)  
foreign import ccall "wxSizerItem_Show" wxSizerItem_Show :: Ptr (TSizerItem a) -> CInt -> IO ()

-- | usage: (@sizerLayout obj@).
sizerLayout :: Sizer  a ->  IO ()
sizerLayout _obj 
  = withObjectRef "sizerLayout" _obj $ \cobj__obj -> 
    wxSizer_Layout cobj__obj  
foreign import ccall "wxSizer_Layout" wxSizer_Layout :: Ptr (TSizer a) -> IO ()

-- | usage: (@sizerPrepend obj widthheight option flag border userData@).
sizerPrepend :: Sizer  a -> Size -> Int -> Int -> Int -> Ptr  f ->  IO ()
sizerPrepend _obj widthheight option flag border userData 
  = withObjectRef "sizerPrepend" _obj $ \cobj__obj -> 
    wxSizer_Prepend cobj__obj  (toCIntSizeW widthheight) (toCIntSizeH widthheight)  (toCInt option)  (toCInt flag)  (toCInt border)  userData  
foreign import ccall "wxSizer_Prepend" wxSizer_Prepend :: Ptr (TSizer a) -> CInt -> CInt -> CInt -> CInt -> CInt -> Ptr  f -> IO ()

-- | usage: (@sizerPrependSizer obj sizer option flag border userData@).
sizerPrependSizer :: Sizer  a -> Sizer  b -> Int -> Int -> Int -> Ptr  f ->  IO ()
sizerPrependSizer _obj sizer option flag border userData 
  = withObjectRef "sizerPrependSizer" _obj $ \cobj__obj -> 
    withObjectPtr sizer $ \cobj_sizer -> 
    wxSizer_PrependSizer cobj__obj  cobj_sizer  (toCInt option)  (toCInt flag)  (toCInt border)  userData  
foreign import ccall "wxSizer_PrependSizer" wxSizer_PrependSizer :: Ptr (TSizer a) -> Ptr (TSizer b) -> CInt -> CInt -> CInt -> Ptr  f -> IO ()

-- | usage: (@sizerPrependSpacer obj size@).
sizerPrependSpacer :: Sizer  a -> Int ->  IO (SizerItem  ())
sizerPrependSpacer _obj size 
  = withObjectResult $
    withObjectRef "sizerPrependSpacer" _obj $ \cobj__obj -> 
    wxSizer_PrependSpacer cobj__obj  (toCInt size)  
foreign import ccall "wxSizer_PrependSpacer" wxSizer_PrependSpacer :: Ptr (TSizer a) -> CInt -> IO (Ptr (TSizerItem ()))

-- | usage: (@sizerPrependStretchSpacer obj prop@).
sizerPrependStretchSpacer :: Sizer  a -> Int ->  IO (SizerItem  ())
sizerPrependStretchSpacer _obj prop 
  = withObjectResult $
    withObjectRef "sizerPrependStretchSpacer" _obj $ \cobj__obj -> 
    wxSizer_PrependStretchSpacer cobj__obj  (toCInt prop)  
foreign import ccall "wxSizer_PrependStretchSpacer" wxSizer_PrependStretchSpacer :: Ptr (TSizer a) -> CInt -> IO (Ptr (TSizerItem ()))

-- | usage: (@sizerPrependWindow obj window option flag border userData@).
sizerPrependWindow :: Sizer  a -> Window  b -> Int -> Int -> Int -> Ptr  f ->  IO ()
sizerPrependWindow _obj window option flag border userData 
  = withObjectRef "sizerPrependWindow" _obj $ \cobj__obj -> 
    withObjectPtr window $ \cobj_window -> 
    wxSizer_PrependWindow cobj__obj  cobj_window  (toCInt option)  (toCInt flag)  (toCInt border)  userData  
foreign import ccall "wxSizer_PrependWindow" wxSizer_PrependWindow :: Ptr (TSizer a) -> Ptr (TWindow b) -> CInt -> CInt -> CInt -> Ptr  f -> IO ()

-- | usage: (@sizerRecalcSizes obj@).
sizerRecalcSizes :: Sizer  a ->  IO ()
sizerRecalcSizes _obj 
  = withObjectRef "sizerRecalcSizes" _obj $ \cobj__obj -> 
    wxSizer_RecalcSizes cobj__obj  
foreign import ccall "wxSizer_RecalcSizes" wxSizer_RecalcSizes :: Ptr (TSizer a) -> IO ()

-- | usage: (@sizerReplace obj oldindex newitem@).
sizerReplace :: Sizer  a -> Int -> SizerItem  c ->  IO Bool
sizerReplace _obj oldindex newitem 
  = withBoolResult $
    withObjectRef "sizerReplace" _obj $ \cobj__obj -> 
    withObjectPtr newitem $ \cobj_newitem -> 
    wxSizer_Replace cobj__obj  (toCInt oldindex)  cobj_newitem  
foreign import ccall "wxSizer_Replace" wxSizer_Replace :: Ptr (TSizer a) -> CInt -> Ptr (TSizerItem c) -> IO CBool

-- | usage: (@sizerReplaceSizer obj oldsz newsz recursive@).
sizerReplaceSizer :: Sizer  a -> Sizer  b -> Sizer  c -> Bool ->  IO Bool
sizerReplaceSizer _obj oldsz newsz recursive 
  = withBoolResult $
    withObjectRef "sizerReplaceSizer" _obj $ \cobj__obj -> 
    withObjectPtr oldsz $ \cobj_oldsz -> 
    withObjectPtr newsz $ \cobj_newsz -> 
    wxSizer_ReplaceSizer cobj__obj  cobj_oldsz  cobj_newsz  (toCBool recursive)  
foreign import ccall "wxSizer_ReplaceSizer" wxSizer_ReplaceSizer :: Ptr (TSizer a) -> Ptr (TSizer b) -> Ptr (TSizer c) -> CBool -> IO CBool

-- | usage: (@sizerReplaceWindow obj oldwin newwin recursive@).
sizerReplaceWindow :: Sizer  a -> Window  b -> Window  c -> Bool ->  IO Bool
sizerReplaceWindow _obj oldwin newwin recursive 
  = withBoolResult $
    withObjectRef "sizerReplaceWindow" _obj $ \cobj__obj -> 
    withObjectPtr oldwin $ \cobj_oldwin -> 
    withObjectPtr newwin $ \cobj_newwin -> 
    wxSizer_ReplaceWindow cobj__obj  cobj_oldwin  cobj_newwin  (toCBool recursive)  
foreign import ccall "wxSizer_ReplaceWindow" wxSizer_ReplaceWindow :: Ptr (TSizer a) -> Ptr (TWindow b) -> Ptr (TWindow c) -> CBool -> IO CBool

-- | usage: (@sizerSetDimension obj xywidthheight@).
sizerSetDimension :: Sizer  a -> Rect ->  IO ()
sizerSetDimension _obj xywidthheight 
  = withObjectRef "sizerSetDimension" _obj $ \cobj__obj -> 
    wxSizer_SetDimension cobj__obj  (toCIntRectX xywidthheight) (toCIntRectY xywidthheight)(toCIntRectW xywidthheight) (toCIntRectH xywidthheight)  
foreign import ccall "wxSizer_SetDimension" wxSizer_SetDimension :: Ptr (TSizer a) -> CInt -> CInt -> CInt -> CInt -> IO ()

-- | usage: (@sizerSetItemMinSize obj pos widthheight@).
sizerSetItemMinSize :: Sizer  a -> Int -> Size ->  IO ()
sizerSetItemMinSize _obj pos widthheight 
  = withObjectRef "sizerSetItemMinSize" _obj $ \cobj__obj -> 
    wxSizer_SetItemMinSize cobj__obj  (toCInt pos)  (toCIntSizeW widthheight) (toCIntSizeH widthheight)  
foreign import ccall "wxSizer_SetItemMinSize" wxSizer_SetItemMinSize :: Ptr (TSizer a) -> CInt -> CInt -> CInt -> IO ()

-- | usage: (@sizerSetItemMinSizeSizer obj sizer widthheight@).
sizerSetItemMinSizeSizer :: Sizer  a -> Sizer  b -> Size ->  IO ()
sizerSetItemMinSizeSizer _obj sizer widthheight 
  = withObjectRef "sizerSetItemMinSizeSizer" _obj $ \cobj__obj -> 
    withObjectPtr sizer $ \cobj_sizer -> 
    wxSizer_SetItemMinSizeSizer cobj__obj  cobj_sizer  (toCIntSizeW widthheight) (toCIntSizeH widthheight)  
foreign import ccall "wxSizer_SetItemMinSizeSizer" wxSizer_SetItemMinSizeSizer :: Ptr (TSizer a) -> Ptr (TSizer b) -> CInt -> CInt -> IO ()

-- | usage: (@sizerSetItemMinSizeWindow obj window widthheight@).
sizerSetItemMinSizeWindow :: Sizer  a -> Window  b -> Size ->  IO ()
sizerSetItemMinSizeWindow _obj window widthheight 
  = withObjectRef "sizerSetItemMinSizeWindow" _obj $ \cobj__obj -> 
    withObjectPtr window $ \cobj_window -> 
    wxSizer_SetItemMinSizeWindow cobj__obj  cobj_window  (toCIntSizeW widthheight) (toCIntSizeH widthheight)  
foreign import ccall "wxSizer_SetItemMinSizeWindow" wxSizer_SetItemMinSizeWindow :: Ptr (TSizer a) -> Ptr (TWindow b) -> CInt -> CInt -> IO ()

-- | usage: (@sizerSetMinSize obj widthheight@).
sizerSetMinSize :: Sizer  a -> Size ->  IO ()
sizerSetMinSize _obj widthheight 
  = withObjectRef "sizerSetMinSize" _obj $ \cobj__obj -> 
    wxSizer_SetMinSize cobj__obj  (toCIntSizeW widthheight) (toCIntSizeH widthheight)  
foreign import ccall "wxSizer_SetMinSize" wxSizer_SetMinSize :: Ptr (TSizer a) -> CInt -> CInt -> IO ()

-- | usage: (@sizerSetSizeHints obj window@).
sizerSetSizeHints :: Sizer  a -> Window  b ->  IO ()
sizerSetSizeHints _obj window 
  = withObjectRef "sizerSetSizeHints" _obj $ \cobj__obj -> 
    withObjectPtr window $ \cobj_window -> 
    wxSizer_SetSizeHints cobj__obj  cobj_window  
foreign import ccall "wxSizer_SetSizeHints" wxSizer_SetSizeHints :: Ptr (TSizer a) -> Ptr (TWindow b) -> IO ()

-- | usage: (@sizerShow obj sizer index show@).
sizerShow :: Sizer  a -> Sizer  b -> Int -> Bool ->  IO Bool
sizerShow _obj sizer index show 
  = withBoolResult $
    withObjectRef "sizerShow" _obj $ \cobj__obj -> 
    withObjectPtr sizer $ \cobj_sizer -> 
    wxSizer_Show cobj__obj  cobj_sizer  (toCInt index)  (toCBool show)  
foreign import ccall "wxSizer_Show" wxSizer_Show :: Ptr (TSizer a) -> Ptr (TSizer b) -> CInt -> CBool -> IO CBool

-- | usage: (@sizerShowSizer obj sizer show recursive@).
sizerShowSizer :: Sizer  a -> Sizer  b -> Bool -> Bool ->  IO Bool
sizerShowSizer _obj sizer show recursive 
  = withBoolResult $
    withObjectRef "sizerShowSizer" _obj $ \cobj__obj -> 
    withObjectPtr sizer $ \cobj_sizer -> 
    wxSizer_ShowSizer cobj__obj  cobj_sizer  (toCBool show)  (toCBool recursive)  
foreign import ccall "wxSizer_ShowSizer" wxSizer_ShowSizer :: Ptr (TSizer a) -> Ptr (TSizer b) -> CBool -> CBool -> IO CBool

-- | usage: (@sizerShowWindow obj window show recursive@).
sizerShowWindow :: Sizer  a -> Window  b -> Bool -> Bool ->  IO Bool
sizerShowWindow _obj window show recursive 
  = withBoolResult $
    withObjectRef "sizerShowWindow" _obj $ \cobj__obj -> 
    withObjectPtr window $ \cobj_window -> 
    wxSizer_ShowWindow cobj__obj  cobj_window  (toCBool show)  (toCBool recursive)  
foreign import ccall "wxSizer_ShowWindow" wxSizer_ShowWindow :: Ptr (TSizer a) -> Ptr (TWindow b) -> CBool -> CBool -> IO CBool

-- | usage: (@sliderClearSel obj@).
sliderClearSel :: Slider  a ->  IO ()
sliderClearSel _obj 
  = withObjectRef "sliderClearSel" _obj $ \cobj__obj -> 
    wxSlider_ClearSel cobj__obj  
foreign import ccall "wxSlider_ClearSel" wxSlider_ClearSel :: Ptr (TSlider a) -> IO ()

-- | usage: (@sliderClearTicks obj@).
sliderClearTicks :: Slider  a ->  IO ()
sliderClearTicks _obj 
  = withObjectRef "sliderClearTicks" _obj $ \cobj__obj -> 
    wxSlider_ClearTicks cobj__obj  
foreign import ccall "wxSlider_ClearTicks" wxSlider_ClearTicks :: Ptr (TSlider a) -> IO ()

-- | usage: (@sliderCreate prt id wxinit min max lfttopwdthgt stl@).
sliderCreate :: Window  a -> Id -> Int -> Int -> Int -> Rect -> Style ->  IO (Slider  ())
sliderCreate _prt _id _init _min _max _lfttopwdthgt _stl 
  = withObjectResult $
    withObjectPtr _prt $ \cobj__prt -> 
    wxSlider_Create cobj__prt  (toCInt _id)  (toCInt _init)  (toCInt _min)  (toCInt _max)  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
foreign import ccall "wxSlider_Create" wxSlider_Create :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TSlider ()))

-- | usage: (@sliderGetLineSize obj@).
sliderGetLineSize :: Slider  a ->  IO Int
sliderGetLineSize _obj 
  = withIntResult $
    withObjectRef "sliderGetLineSize" _obj $ \cobj__obj -> 
    wxSlider_GetLineSize cobj__obj  
foreign import ccall "wxSlider_GetLineSize" wxSlider_GetLineSize :: Ptr (TSlider a) -> IO CInt

-- | usage: (@sliderGetMax obj@).
sliderGetMax :: Slider  a ->  IO Int
sliderGetMax _obj 
  = withIntResult $
    withObjectRef "sliderGetMax" _obj $ \cobj__obj -> 
    wxSlider_GetMax cobj__obj  
foreign import ccall "wxSlider_GetMax" wxSlider_GetMax :: Ptr (TSlider a) -> IO CInt

-- | usage: (@sliderGetMin obj@).
sliderGetMin :: Slider  a ->  IO Int
sliderGetMin _obj 
  = withIntResult $
    withObjectRef "sliderGetMin" _obj $ \cobj__obj -> 
    wxSlider_GetMin cobj__obj  
foreign import ccall "wxSlider_GetMin" wxSlider_GetMin :: Ptr (TSlider a) -> IO CInt

-- | usage: (@sliderGetPageSize obj@).
sliderGetPageSize :: Slider  a ->  IO Int
sliderGetPageSize _obj 
  = withIntResult $
    withObjectRef "sliderGetPageSize" _obj $ \cobj__obj -> 
    wxSlider_GetPageSize cobj__obj  
foreign import ccall "wxSlider_GetPageSize" wxSlider_GetPageSize :: Ptr (TSlider a) -> IO CInt

-- | usage: (@sliderGetSelEnd obj@).
sliderGetSelEnd :: Slider  a ->  IO Int
sliderGetSelEnd _obj 
  = withIntResult $
    withObjectRef "sliderGetSelEnd" _obj $ \cobj__obj -> 
    wxSlider_GetSelEnd cobj__obj  
foreign import ccall "wxSlider_GetSelEnd" wxSlider_GetSelEnd :: Ptr (TSlider a) -> IO CInt

-- | usage: (@sliderGetSelStart obj@).
sliderGetSelStart :: Slider  a ->  IO Int
sliderGetSelStart _obj 
  = withIntResult $
    withObjectRef "sliderGetSelStart" _obj $ \cobj__obj -> 
    wxSlider_GetSelStart cobj__obj  
foreign import ccall "wxSlider_GetSelStart" wxSlider_GetSelStart :: Ptr (TSlider a) -> IO CInt

-- | usage: (@sliderGetThumbLength obj@).
sliderGetThumbLength :: Slider  a ->  IO Int
sliderGetThumbLength _obj 
  = withIntResult $
    withObjectRef "sliderGetThumbLength" _obj $ \cobj__obj -> 
    wxSlider_GetThumbLength cobj__obj  
foreign import ccall "wxSlider_GetThumbLength" wxSlider_GetThumbLength :: Ptr (TSlider a) -> IO CInt

-- | usage: (@sliderGetTickFreq obj@).
sliderGetTickFreq :: Slider  a ->  IO Int
sliderGetTickFreq _obj 
  = withIntResult $
    withObjectRef "sliderGetTickFreq" _obj $ \cobj__obj -> 
    wxSlider_GetTickFreq cobj__obj  
foreign import ccall "wxSlider_GetTickFreq" wxSlider_GetTickFreq :: Ptr (TSlider a) -> IO CInt

-- | usage: (@sliderGetValue obj@).
sliderGetValue :: Slider  a ->  IO Int
sliderGetValue _obj 
  = withIntResult $
    withObjectRef "sliderGetValue" _obj $ \cobj__obj -> 
    wxSlider_GetValue cobj__obj  
foreign import ccall "wxSlider_GetValue" wxSlider_GetValue :: Ptr (TSlider a) -> IO CInt

-- | usage: (@sliderSetLineSize obj lineSize@).
sliderSetLineSize :: Slider  a -> Int ->  IO ()
sliderSetLineSize _obj lineSize 
  = withObjectRef "sliderSetLineSize" _obj $ \cobj__obj -> 
    wxSlider_SetLineSize cobj__obj  (toCInt lineSize)  
foreign import ccall "wxSlider_SetLineSize" wxSlider_SetLineSize :: Ptr (TSlider a) -> CInt -> IO ()

-- | usage: (@sliderSetPageSize obj pageSize@).
sliderSetPageSize :: Slider  a -> Int ->  IO ()
sliderSetPageSize _obj pageSize 
  = withObjectRef "sliderSetPageSize" _obj $ \cobj__obj -> 
    wxSlider_SetPageSize cobj__obj  (toCInt pageSize)  
foreign import ccall "wxSlider_SetPageSize" wxSlider_SetPageSize :: Ptr (TSlider a) -> CInt -> IO ()

-- | usage: (@sliderSetRange obj minValue maxValue@).
sliderSetRange :: Slider  a -> Int -> Int ->  IO ()
sliderSetRange _obj minValue maxValue 
  = withObjectRef "sliderSetRange" _obj $ \cobj__obj -> 
    wxSlider_SetRange cobj__obj  (toCInt minValue)  (toCInt maxValue)  
foreign import ccall "wxSlider_SetRange" wxSlider_SetRange :: Ptr (TSlider a) -> CInt -> CInt -> IO ()

-- | usage: (@sliderSetSelection obj minPos maxPos@).
sliderSetSelection :: Slider  a -> Int -> Int ->  IO ()
sliderSetSelection _obj minPos maxPos 
  = withObjectRef "sliderSetSelection" _obj $ \cobj__obj -> 
    wxSlider_SetSelection cobj__obj  (toCInt minPos)  (toCInt maxPos)  
foreign import ccall "wxSlider_SetSelection" wxSlider_SetSelection :: Ptr (TSlider a) -> CInt -> CInt -> IO ()

-- | usage: (@sliderSetThumbLength obj len@).
sliderSetThumbLength :: Slider  a -> Int ->  IO ()
sliderSetThumbLength _obj len 
  = withObjectRef "sliderSetThumbLength" _obj $ \cobj__obj -> 
    wxSlider_SetThumbLength cobj__obj  (toCInt len)  
foreign import ccall "wxSlider_SetThumbLength" wxSlider_SetThumbLength :: Ptr (TSlider a) -> CInt -> IO ()

-- | usage: (@sliderSetTick obj tickPos@).
sliderSetTick :: Slider  a -> Int ->  IO ()
sliderSetTick _obj tickPos 
  = withObjectRef "sliderSetTick" _obj $ \cobj__obj -> 
    wxSlider_SetTick cobj__obj  (toCInt tickPos)  
foreign import ccall "wxSlider_SetTick" wxSlider_SetTick :: Ptr (TSlider a) -> CInt -> IO ()

-- | usage: (@sliderSetValue obj value@).
sliderSetValue :: Slider  a -> Int ->  IO ()
sliderSetValue _obj value 
  = withObjectRef "sliderSetValue" _obj $ \cobj__obj -> 
    wxSlider_SetValue cobj__obj  (toCInt value)  
foreign import ccall "wxSlider_SetValue" wxSlider_SetValue :: Ptr (TSlider a) -> CInt -> IO ()

{- |  Usage: @soundCreate fileName isResource@. As yet (Nov 2003) unsupported on MacOS X  -}
soundCreate :: String -> Bool ->  IO (Sound  ())
soundCreate fileName isResource 
  = withManagedObjectResult $
    withStringPtr fileName $ \cobj_fileName -> 
    wxSound_Create cobj_fileName  (toCBool isResource)  
foreign import ccall "wxSound_Create" wxSound_Create :: Ptr (TWxString a) -> CBool -> IO (Ptr (TSound ()))

-- | usage: (@soundDelete self@).
soundDelete :: Sound  a ->  IO ()
soundDelete
  = objectDelete


-- | usage: (@soundIsOk self@).
soundIsOk :: Sound  a ->  IO Bool
soundIsOk self 
  = withBoolResult $
    withObjectRef "soundIsOk" self $ \cobj_self -> 
    wxSound_IsOk cobj_self  
foreign import ccall "wxSound_IsOk" wxSound_IsOk :: Ptr (TSound a) -> IO CBool

-- | usage: (@soundPlay self flag@).
soundPlay :: Sound  a -> Int ->  IO Bool
soundPlay self flag 
  = withBoolResult $
    withObjectRef "soundPlay" self $ \cobj_self -> 
    wxSound_Play cobj_self  (toCInt flag)  
foreign import ccall "wxSound_Play" wxSound_Play :: Ptr (TSound a) -> CInt -> IO CBool

-- | usage: (@soundStop self@).
soundStop :: Sound  a ->  IO ()
soundStop self 
  = withObjectRef "soundStop" self $ \cobj_self -> 
    wxSound_Stop cobj_self  
foreign import ccall "wxSound_Stop" wxSound_Stop :: Ptr (TSound a) -> IO ()

-- | usage: (@spinButtonCreate prt id lfttopwdthgt stl@).
spinButtonCreate :: Window  a -> Id -> Rect -> Style ->  IO (SpinButton  ())
spinButtonCreate _prt _id _lfttopwdthgt _stl 
  = withObjectResult $
    withObjectPtr _prt $ \cobj__prt -> 
    wxSpinButton_Create cobj__prt  (toCInt _id)  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
foreign import ccall "wxSpinButton_Create" wxSpinButton_Create :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TSpinButton ()))

-- | usage: (@spinButtonGetMax obj@).
spinButtonGetMax :: SpinButton  a ->  IO Int
spinButtonGetMax _obj 
  = withIntResult $
    withObjectRef "spinButtonGetMax" _obj $ \cobj__obj -> 
    wxSpinButton_GetMax cobj__obj  
foreign import ccall "wxSpinButton_GetMax" wxSpinButton_GetMax :: Ptr (TSpinButton a) -> IO CInt

-- | usage: (@spinButtonGetMin obj@).
spinButtonGetMin :: SpinButton  a ->  IO Int
spinButtonGetMin _obj 
  = withIntResult $
    withObjectRef "spinButtonGetMin" _obj $ \cobj__obj -> 
    wxSpinButton_GetMin cobj__obj  
foreign import ccall "wxSpinButton_GetMin" wxSpinButton_GetMin :: Ptr (TSpinButton a) -> IO CInt

-- | usage: (@spinButtonGetValue obj@).
spinButtonGetValue :: SpinButton  a ->  IO Int
spinButtonGetValue _obj 
  = withIntResult $
    withObjectRef "spinButtonGetValue" _obj $ \cobj__obj -> 
    wxSpinButton_GetValue cobj__obj  
foreign import ccall "wxSpinButton_GetValue" wxSpinButton_GetValue :: Ptr (TSpinButton a) -> IO CInt

-- | usage: (@spinButtonSetRange obj minVal maxVal@).
spinButtonSetRange :: SpinButton  a -> Int -> Int ->  IO ()
spinButtonSetRange _obj minVal maxVal 
  = withObjectRef "spinButtonSetRange" _obj $ \cobj__obj -> 
    wxSpinButton_SetRange cobj__obj  (toCInt minVal)  (toCInt maxVal)  
foreign import ccall "wxSpinButton_SetRange" wxSpinButton_SetRange :: Ptr (TSpinButton a) -> CInt -> CInt -> IO ()

-- | usage: (@spinButtonSetValue obj val@).
spinButtonSetValue :: SpinButton  a -> Int ->  IO ()
spinButtonSetValue _obj val 
  = withObjectRef "spinButtonSetValue" _obj $ \cobj__obj -> 
    wxSpinButton_SetValue cobj__obj  (toCInt val)  
foreign import ccall "wxSpinButton_SetValue" wxSpinButton_SetValue :: Ptr (TSpinButton a) -> CInt -> IO ()

-- | usage: (@spinCtrlCreate prt id txt lfttopwdthgt stl min max wxinit@).
spinCtrlCreate :: Window  a -> Id -> String -> Rect -> Style -> Int -> Int -> Int ->  IO (SpinCtrl  ())
spinCtrlCreate _prt _id _txt _lfttopwdthgt _stl _min _max _init 
  = withObjectResult $
    withObjectPtr _prt $ \cobj__prt -> 
    withStringPtr _txt $ \cobj__txt -> 
    wxSpinCtrl_Create cobj__prt  (toCInt _id)  cobj__txt  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  (toCInt _min)  (toCInt _max)  (toCInt _init)  
foreign import ccall "wxSpinCtrl_Create" wxSpinCtrl_Create :: Ptr (TWindow a) -> CInt -> Ptr (TWxString c) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TSpinCtrl ()))

-- | usage: (@spinCtrlGetMax obj@).
spinCtrlGetMax :: SpinCtrl  a ->  IO Int
spinCtrlGetMax _obj 
  = withIntResult $
    withObjectRef "spinCtrlGetMax" _obj $ \cobj__obj -> 
    wxSpinCtrl_GetMax cobj__obj  
foreign import ccall "wxSpinCtrl_GetMax" wxSpinCtrl_GetMax :: Ptr (TSpinCtrl a) -> IO CInt

-- | usage: (@spinCtrlGetMin obj@).
spinCtrlGetMin :: SpinCtrl  a ->  IO Int
spinCtrlGetMin _obj 
  = withIntResult $
    withObjectRef "spinCtrlGetMin" _obj $ \cobj__obj -> 
    wxSpinCtrl_GetMin cobj__obj  
foreign import ccall "wxSpinCtrl_GetMin" wxSpinCtrl_GetMin :: Ptr (TSpinCtrl a) -> IO CInt

-- | usage: (@spinCtrlGetValue obj@).
spinCtrlGetValue :: SpinCtrl  a ->  IO Int
spinCtrlGetValue _obj 
  = withIntResult $
    withObjectRef "spinCtrlGetValue" _obj $ \cobj__obj -> 
    wxSpinCtrl_GetValue cobj__obj  
foreign import ccall "wxSpinCtrl_GetValue" wxSpinCtrl_GetValue :: Ptr (TSpinCtrl a) -> IO CInt

-- | usage: (@spinCtrlSetRange obj minval maxval@).
spinCtrlSetRange :: SpinCtrl  a -> Int -> Int ->  IO ()
spinCtrlSetRange _obj minval maxval 
  = withObjectRef "spinCtrlSetRange" _obj $ \cobj__obj -> 
    wxSpinCtrl_SetRange cobj__obj  (toCInt minval)  (toCInt maxval)  
foreign import ccall "wxSpinCtrl_SetRange" wxSpinCtrl_SetRange :: Ptr (TSpinCtrl a) -> CInt -> CInt -> IO ()

-- | usage: (@spinCtrlSetValue obj val@).
spinCtrlSetValue :: SpinCtrl  a -> Int ->  IO ()
spinCtrlSetValue _obj val 
  = withObjectRef "spinCtrlSetValue" _obj $ \cobj__obj -> 
    wxSpinCtrl_SetValue cobj__obj  (toCInt val)  
foreign import ccall "wxSpinCtrl_SetValue" wxSpinCtrl_SetValue :: Ptr (TSpinCtrl a) -> CInt -> IO ()

-- | usage: (@spinEventGetPosition obj@).
spinEventGetPosition :: SpinEvent  a ->  IO Int
spinEventGetPosition _obj 
  = withIntResult $
    withObjectRef "spinEventGetPosition" _obj $ \cobj__obj -> 
    wxSpinEvent_GetPosition cobj__obj  
foreign import ccall "wxSpinEvent_GetPosition" wxSpinEvent_GetPosition :: Ptr (TSpinEvent a) -> IO CInt

-- | usage: (@spinEventSetPosition obj pos@).
spinEventSetPosition :: SpinEvent  a -> Int ->  IO ()
spinEventSetPosition _obj pos 
  = withObjectRef "spinEventSetPosition" _obj $ \cobj__obj -> 
    wxSpinEvent_SetPosition cobj__obj  (toCInt pos)  
foreign import ccall "wxSpinEvent_SetPosition" wxSpinEvent_SetPosition :: Ptr (TSpinEvent a) -> CInt -> IO ()

-- | usage: (@splashScreenCreate bmp sstl ms parent id lfttopwdthgt stl@).
splashScreenCreate :: Bitmap  a -> Int -> Int -> Window  d -> Id -> Rect -> Style ->  IO (SplashScreen  ())
splashScreenCreate _bmp _sstl _ms parent id _lfttopwdthgt _stl 
  = withObjectResult $
    withObjectPtr _bmp $ \cobj__bmp -> 
    withObjectPtr parent $ \cobj_parent -> 
    wxSplashScreen_Create cobj__bmp  (toCInt _sstl)  (toCInt _ms)  cobj_parent  (toCInt id)  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
foreign import ccall "wxSplashScreen_Create" wxSplashScreen_Create :: Ptr (TBitmap a) -> CInt -> CInt -> Ptr (TWindow d) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TSplashScreen ()))

-- | usage: (@splashScreenGetSplashStyle obj@).
splashScreenGetSplashStyle :: SplashScreen  a ->  IO Int
splashScreenGetSplashStyle _obj 
  = withIntResult $
    withObjectRef "splashScreenGetSplashStyle" _obj $ \cobj__obj -> 
    wxSplashScreen_GetSplashStyle cobj__obj  
foreign import ccall "wxSplashScreen_GetSplashStyle" wxSplashScreen_GetSplashStyle :: Ptr (TSplashScreen a) -> IO CInt

-- | usage: (@splashScreenGetTimeout obj@).
splashScreenGetTimeout :: SplashScreen  a ->  IO Int
splashScreenGetTimeout _obj 
  = withIntResult $
    withObjectRef "splashScreenGetTimeout" _obj $ \cobj__obj -> 
    wxSplashScreen_GetTimeout cobj__obj  
foreign import ccall "wxSplashScreen_GetTimeout" wxSplashScreen_GetTimeout :: Ptr (TSplashScreen a) -> IO CInt

-- | usage: (@splitterWindowCreate prt id lfttopwdthgt stl@).
splitterWindowCreate :: Window  a -> Id -> Rect -> Style ->  IO (SplitterWindow  ())
splitterWindowCreate _prt _id _lfttopwdthgt _stl 
  = withObjectResult $
    withObjectPtr _prt $ \cobj__prt -> 
    wxSplitterWindow_Create cobj__prt  (toCInt _id)  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
foreign import ccall "wxSplitterWindow_Create" wxSplitterWindow_Create :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TSplitterWindow ()))

-- | usage: (@splitterWindowGetBorderSize obj@).
splitterWindowGetBorderSize :: SplitterWindow  a ->  IO Int
splitterWindowGetBorderSize _obj 
  = withIntResult $
    withObjectRef "splitterWindowGetBorderSize" _obj $ \cobj__obj -> 
    wxSplitterWindow_GetBorderSize cobj__obj  
foreign import ccall "wxSplitterWindow_GetBorderSize" wxSplitterWindow_GetBorderSize :: Ptr (TSplitterWindow a) -> IO CInt

-- | usage: (@splitterWindowGetMinimumPaneSize obj@).
splitterWindowGetMinimumPaneSize :: SplitterWindow  a ->  IO Int
splitterWindowGetMinimumPaneSize _obj 
  = withIntResult $
    withObjectRef "splitterWindowGetMinimumPaneSize" _obj $ \cobj__obj -> 
    wxSplitterWindow_GetMinimumPaneSize cobj__obj  
foreign import ccall "wxSplitterWindow_GetMinimumPaneSize" wxSplitterWindow_GetMinimumPaneSize :: Ptr (TSplitterWindow a) -> IO CInt

-- | usage: (@splitterWindowGetSashGravity obj@).
splitterWindowGetSashGravity :: SplitterWindow  a ->  IO Double
splitterWindowGetSashGravity _obj 
  = withObjectRef "splitterWindowGetSashGravity" _obj $ \cobj__obj -> 
    wxSplitterWindow_GetSashGravity cobj__obj  
foreign import ccall "wxSplitterWindow_GetSashGravity" wxSplitterWindow_GetSashGravity :: Ptr (TSplitterWindow a) -> IO Double

-- | usage: (@splitterWindowGetSashPosition obj@).
splitterWindowGetSashPosition :: SplitterWindow  a ->  IO Int
splitterWindowGetSashPosition _obj 
  = withIntResult $
    withObjectRef "splitterWindowGetSashPosition" _obj $ \cobj__obj -> 
    wxSplitterWindow_GetSashPosition cobj__obj  
foreign import ccall "wxSplitterWindow_GetSashPosition" wxSplitterWindow_GetSashPosition :: Ptr (TSplitterWindow a) -> IO CInt

-- | usage: (@splitterWindowGetSashSize obj@).
splitterWindowGetSashSize :: SplitterWindow  a ->  IO Int
splitterWindowGetSashSize _obj 
  = withIntResult $
    withObjectRef "splitterWindowGetSashSize" _obj $ \cobj__obj -> 
    wxSplitterWindow_GetSashSize cobj__obj  
foreign import ccall "wxSplitterWindow_GetSashSize" wxSplitterWindow_GetSashSize :: Ptr (TSplitterWindow a) -> IO CInt

-- | usage: (@splitterWindowGetSplitMode obj@).
splitterWindowGetSplitMode :: SplitterWindow  a ->  IO Int
splitterWindowGetSplitMode _obj 
  = withIntResult $
    withObjectRef "splitterWindowGetSplitMode" _obj $ \cobj__obj -> 
    wxSplitterWindow_GetSplitMode cobj__obj  
foreign import ccall "wxSplitterWindow_GetSplitMode" wxSplitterWindow_GetSplitMode :: Ptr (TSplitterWindow a) -> IO CInt

-- | usage: (@splitterWindowGetWindow1 obj@).
splitterWindowGetWindow1 :: SplitterWindow  a ->  IO (Window  ())
splitterWindowGetWindow1 _obj 
  = withObjectResult $
    withObjectRef "splitterWindowGetWindow1" _obj $ \cobj__obj -> 
    wxSplitterWindow_GetWindow1 cobj__obj  
foreign import ccall "wxSplitterWindow_GetWindow1" wxSplitterWindow_GetWindow1 :: Ptr (TSplitterWindow a) -> IO (Ptr (TWindow ()))

-- | usage: (@splitterWindowGetWindow2 obj@).
splitterWindowGetWindow2 :: SplitterWindow  a ->  IO (Window  ())
splitterWindowGetWindow2 _obj 
  = withObjectResult $
    withObjectRef "splitterWindowGetWindow2" _obj $ \cobj__obj -> 
    wxSplitterWindow_GetWindow2 cobj__obj  
foreign import ccall "wxSplitterWindow_GetWindow2" wxSplitterWindow_GetWindow2 :: Ptr (TSplitterWindow a) -> IO (Ptr (TWindow ()))

-- | usage: (@splitterWindowInitialize obj window@).
splitterWindowInitialize :: SplitterWindow  a -> Window  b ->  IO ()
splitterWindowInitialize _obj window 
  = withObjectRef "splitterWindowInitialize" _obj $ \cobj__obj -> 
    withObjectPtr window $ \cobj_window -> 
    wxSplitterWindow_Initialize cobj__obj  cobj_window  
foreign import ccall "wxSplitterWindow_Initialize" wxSplitterWindow_Initialize :: Ptr (TSplitterWindow a) -> Ptr (TWindow b) -> IO ()

-- | usage: (@splitterWindowIsSplit obj@).
splitterWindowIsSplit :: SplitterWindow  a ->  IO Bool
splitterWindowIsSplit _obj 
  = withBoolResult $
    withObjectRef "splitterWindowIsSplit" _obj $ \cobj__obj -> 
    wxSplitterWindow_IsSplit cobj__obj  
foreign import ccall "wxSplitterWindow_IsSplit" wxSplitterWindow_IsSplit :: Ptr (TSplitterWindow a) -> IO CBool

-- | usage: (@splitterWindowReplaceWindow obj winOld winNew@).
splitterWindowReplaceWindow :: SplitterWindow  a -> Window  b -> Window  c ->  IO Bool
splitterWindowReplaceWindow _obj winOld winNew 
  = withBoolResult $
    withObjectRef "splitterWindowReplaceWindow" _obj $ \cobj__obj -> 
    withObjectPtr winOld $ \cobj_winOld -> 
    withObjectPtr winNew $ \cobj_winNew -> 
    wxSplitterWindow_ReplaceWindow cobj__obj  cobj_winOld  cobj_winNew  
foreign import ccall "wxSplitterWindow_ReplaceWindow" wxSplitterWindow_ReplaceWindow :: Ptr (TSplitterWindow a) -> Ptr (TWindow b) -> Ptr (TWindow c) -> IO CBool

-- | usage: (@splitterWindowSetBorderSize obj width@).
splitterWindowSetBorderSize :: SplitterWindow  a -> Int ->  IO ()
splitterWindowSetBorderSize _obj width 
  = withObjectRef "splitterWindowSetBorderSize" _obj $ \cobj__obj -> 
    wxSplitterWindow_SetBorderSize cobj__obj  (toCInt width)  
foreign import ccall "wxSplitterWindow_SetBorderSize" wxSplitterWindow_SetBorderSize :: Ptr (TSplitterWindow a) -> CInt -> IO ()

-- | usage: (@splitterWindowSetMinimumPaneSize obj min@).
splitterWindowSetMinimumPaneSize :: SplitterWindow  a -> Int ->  IO ()
splitterWindowSetMinimumPaneSize _obj min 
  = withObjectRef "splitterWindowSetMinimumPaneSize" _obj $ \cobj__obj -> 
    wxSplitterWindow_SetMinimumPaneSize cobj__obj  (toCInt min)  
foreign import ccall "wxSplitterWindow_SetMinimumPaneSize" wxSplitterWindow_SetMinimumPaneSize :: Ptr (TSplitterWindow a) -> CInt -> IO ()

-- | usage: (@splitterWindowSetSashGravity obj gravity@).
splitterWindowSetSashGravity :: SplitterWindow  a -> Double ->  IO ()
splitterWindowSetSashGravity _obj gravity 
  = withObjectRef "splitterWindowSetSashGravity" _obj $ \cobj__obj -> 
    wxSplitterWindow_SetSashGravity cobj__obj  gravity  
foreign import ccall "wxSplitterWindow_SetSashGravity" wxSplitterWindow_SetSashGravity :: Ptr (TSplitterWindow a) -> Double -> IO ()

-- | usage: (@splitterWindowSetSashPosition obj position redraw@).
splitterWindowSetSashPosition :: SplitterWindow  a -> Int -> Bool ->  IO ()
splitterWindowSetSashPosition _obj position redraw 
  = withObjectRef "splitterWindowSetSashPosition" _obj $ \cobj__obj -> 
    wxSplitterWindow_SetSashPosition cobj__obj  (toCInt position)  (toCBool redraw)  
foreign import ccall "wxSplitterWindow_SetSashPosition" wxSplitterWindow_SetSashPosition :: Ptr (TSplitterWindow a) -> CInt -> CBool -> IO ()

-- | usage: (@splitterWindowSetSplitMode obj mode@).
splitterWindowSetSplitMode :: SplitterWindow  a -> Int ->  IO ()
splitterWindowSetSplitMode _obj mode 
  = withObjectRef "splitterWindowSetSplitMode" _obj $ \cobj__obj -> 
    wxSplitterWindow_SetSplitMode cobj__obj  (toCInt mode)  
foreign import ccall "wxSplitterWindow_SetSplitMode" wxSplitterWindow_SetSplitMode :: Ptr (TSplitterWindow a) -> CInt -> IO ()

-- | usage: (@splitterWindowSplitHorizontally obj window1 window2 sashPosition@).
splitterWindowSplitHorizontally :: SplitterWindow  a -> Window  b -> Window  c -> Int ->  IO Bool
splitterWindowSplitHorizontally _obj window1 window2 sashPosition 
  = withBoolResult $
    withObjectRef "splitterWindowSplitHorizontally" _obj $ \cobj__obj -> 
    withObjectPtr window1 $ \cobj_window1 -> 
    withObjectPtr window2 $ \cobj_window2 -> 
    wxSplitterWindow_SplitHorizontally cobj__obj  cobj_window1  cobj_window2  (toCInt sashPosition)  
foreign import ccall "wxSplitterWindow_SplitHorizontally" wxSplitterWindow_SplitHorizontally :: Ptr (TSplitterWindow a) -> Ptr (TWindow b) -> Ptr (TWindow c) -> CInt -> IO CBool

-- | usage: (@splitterWindowSplitVertically obj window1 window2 sashPosition@).
splitterWindowSplitVertically :: SplitterWindow  a -> Window  b -> Window  c -> Int ->  IO Bool
splitterWindowSplitVertically _obj window1 window2 sashPosition 
  = withBoolResult $
    withObjectRef "splitterWindowSplitVertically" _obj $ \cobj__obj -> 
    withObjectPtr window1 $ \cobj_window1 -> 
    withObjectPtr window2 $ \cobj_window2 -> 
    wxSplitterWindow_SplitVertically cobj__obj  cobj_window1  cobj_window2  (toCInt sashPosition)  
foreign import ccall "wxSplitterWindow_SplitVertically" wxSplitterWindow_SplitVertically :: Ptr (TSplitterWindow a) -> Ptr (TWindow b) -> Ptr (TWindow c) -> CInt -> IO CBool

-- | usage: (@splitterWindowUnsplit obj toRemove@).
splitterWindowUnsplit :: SplitterWindow  a -> Window  b ->  IO Bool
splitterWindowUnsplit _obj toRemove 
  = withBoolResult $
    withObjectRef "splitterWindowUnsplit" _obj $ \cobj__obj -> 
    withObjectPtr toRemove $ \cobj_toRemove -> 
    wxSplitterWindow_Unsplit cobj__obj  cobj_toRemove  
foreign import ccall "wxSplitterWindow_Unsplit" wxSplitterWindow_Unsplit :: Ptr (TSplitterWindow a) -> Ptr (TWindow b) -> IO CBool

-- | usage: (@staticBitmapCreate prt id bitmap lfttopwdthgt stl@).
staticBitmapCreate :: Window  a -> Id -> Bitmap  c -> Rect -> Style ->  IO (StaticBitmap  ())
staticBitmapCreate _prt _id bitmap _lfttopwdthgt _stl 
  = withObjectResult $
    withObjectPtr _prt $ \cobj__prt -> 
    withObjectPtr bitmap $ \cobj_bitmap -> 
    wxStaticBitmap_Create cobj__prt  (toCInt _id)  cobj_bitmap  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
foreign import ccall "wxStaticBitmap_Create" wxStaticBitmap_Create :: Ptr (TWindow a) -> CInt -> Ptr (TBitmap c) -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TStaticBitmap ()))

-- | usage: (@staticBitmapDelete obj@).
staticBitmapDelete :: StaticBitmap  a ->  IO ()
staticBitmapDelete
  = objectDelete


-- | usage: (@staticBitmapGetBitmap obj@).
staticBitmapGetBitmap :: StaticBitmap  a ->  IO (Bitmap  ())
staticBitmapGetBitmap _obj 
  = withRefBitmap $ \pref -> 
    withObjectRef "staticBitmapGetBitmap" _obj $ \cobj__obj -> 
    wxStaticBitmap_GetBitmap cobj__obj   pref
foreign import ccall "wxStaticBitmap_GetBitmap" wxStaticBitmap_GetBitmap :: Ptr (TStaticBitmap a) -> Ptr (TBitmap ()) -> IO ()

-- | usage: (@staticBitmapGetIcon obj@).
staticBitmapGetIcon :: StaticBitmap  a ->  IO (Icon  ())
staticBitmapGetIcon _obj 
  = withRefIcon $ \pref -> 
    withObjectRef "staticBitmapGetIcon" _obj $ \cobj__obj -> 
    wxStaticBitmap_GetIcon cobj__obj   pref
foreign import ccall "wxStaticBitmap_GetIcon" wxStaticBitmap_GetIcon :: Ptr (TStaticBitmap a) -> Ptr (TIcon ()) -> IO ()

-- | usage: (@staticBitmapSetBitmap obj bitmap@).
staticBitmapSetBitmap :: StaticBitmap  a -> Bitmap  b ->  IO ()
staticBitmapSetBitmap _obj bitmap 
  = withObjectRef "staticBitmapSetBitmap" _obj $ \cobj__obj -> 
    withObjectPtr bitmap $ \cobj_bitmap -> 
    wxStaticBitmap_SetBitmap cobj__obj  cobj_bitmap  
foreign import ccall "wxStaticBitmap_SetBitmap" wxStaticBitmap_SetBitmap :: Ptr (TStaticBitmap a) -> Ptr (TBitmap b) -> IO ()

-- | usage: (@staticBitmapSetIcon obj icon@).
staticBitmapSetIcon :: StaticBitmap  a -> Icon  b ->  IO ()
staticBitmapSetIcon _obj icon 
  = withObjectRef "staticBitmapSetIcon" _obj $ \cobj__obj -> 
    withObjectPtr icon $ \cobj_icon -> 
    wxStaticBitmap_SetIcon cobj__obj  cobj_icon  
foreign import ccall "wxStaticBitmap_SetIcon" wxStaticBitmap_SetIcon :: Ptr (TStaticBitmap a) -> Ptr (TIcon b) -> IO ()

-- | usage: (@staticBoxCreate prt id txt lfttopwdthgt stl@).
staticBoxCreate :: Window  a -> Id -> String -> Rect -> Style ->  IO (StaticBox  ())
staticBoxCreate _prt _id _txt _lfttopwdthgt _stl 
  = withObjectResult $
    withObjectPtr _prt $ \cobj__prt -> 
    withStringPtr _txt $ \cobj__txt -> 
    wxStaticBox_Create cobj__prt  (toCInt _id)  cobj__txt  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
foreign import ccall "wxStaticBox_Create" wxStaticBox_Create :: Ptr (TWindow a) -> CInt -> Ptr (TWxString c) -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TStaticBox ()))

-- | usage: (@staticBoxSizerCalcMin obj@).
staticBoxSizerCalcMin :: StaticBoxSizer  a ->  IO (Size)
staticBoxSizerCalcMin _obj 
  = withWxSizeResult $
    withObjectRef "staticBoxSizerCalcMin" _obj $ \cobj__obj -> 
    wxStaticBoxSizer_CalcMin cobj__obj  
foreign import ccall "wxStaticBoxSizer_CalcMin" wxStaticBoxSizer_CalcMin :: Ptr (TStaticBoxSizer a) -> IO (Ptr (TWxSize ()))

-- | usage: (@staticBoxSizerCreate box orient@).
staticBoxSizerCreate :: StaticBox  a -> Int ->  IO (StaticBoxSizer  ())
staticBoxSizerCreate box orient 
  = withObjectResult $
    withObjectPtr box $ \cobj_box -> 
    wxStaticBoxSizer_Create cobj_box  (toCInt orient)  
foreign import ccall "wxStaticBoxSizer_Create" wxStaticBoxSizer_Create :: Ptr (TStaticBox a) -> CInt -> IO (Ptr (TStaticBoxSizer ()))

-- | usage: (@staticBoxSizerGetStaticBox obj@).
staticBoxSizerGetStaticBox :: StaticBoxSizer  a ->  IO (StaticBox  ())
staticBoxSizerGetStaticBox _obj 
  = withObjectResult $
    withObjectRef "staticBoxSizerGetStaticBox" _obj $ \cobj__obj -> 
    wxStaticBoxSizer_GetStaticBox cobj__obj  
foreign import ccall "wxStaticBoxSizer_GetStaticBox" wxStaticBoxSizer_GetStaticBox :: Ptr (TStaticBoxSizer a) -> IO (Ptr (TStaticBox ()))

-- | usage: (@staticBoxSizerRecalcSizes obj@).
staticBoxSizerRecalcSizes :: StaticBoxSizer  a ->  IO ()
staticBoxSizerRecalcSizes _obj 
  = withObjectRef "staticBoxSizerRecalcSizes" _obj $ \cobj__obj -> 
    wxStaticBoxSizer_RecalcSizes cobj__obj  
foreign import ccall "wxStaticBoxSizer_RecalcSizes" wxStaticBoxSizer_RecalcSizes :: Ptr (TStaticBoxSizer a) -> IO ()

-- | usage: (@staticLineCreate prt id lfttopwdthgt stl@).
staticLineCreate :: Window  a -> Id -> Rect -> Style ->  IO (StaticLine  ())
staticLineCreate _prt _id _lfttopwdthgt _stl 
  = withObjectResult $
    withObjectPtr _prt $ \cobj__prt -> 
    wxStaticLine_Create cobj__prt  (toCInt _id)  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
foreign import ccall "wxStaticLine_Create" wxStaticLine_Create :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TStaticLine ()))

-- | usage: (@staticLineGetDefaultSize obj@).
staticLineGetDefaultSize :: StaticLine  a ->  IO Int
staticLineGetDefaultSize _obj 
  = withIntResult $
    withObjectRef "staticLineGetDefaultSize" _obj $ \cobj__obj -> 
    wxStaticLine_GetDefaultSize cobj__obj  
foreign import ccall "wxStaticLine_GetDefaultSize" wxStaticLine_GetDefaultSize :: Ptr (TStaticLine a) -> IO CInt

-- | usage: (@staticLineIsVertical obj@).
staticLineIsVertical :: StaticLine  a ->  IO Bool
staticLineIsVertical _obj 
  = withBoolResult $
    withObjectRef "staticLineIsVertical" _obj $ \cobj__obj -> 
    wxStaticLine_IsVertical cobj__obj  
foreign import ccall "wxStaticLine_IsVertical" wxStaticLine_IsVertical :: Ptr (TStaticLine a) -> IO CBool

-- | usage: (@staticTextCreate prt id txt lfttopwdthgt stl@).
staticTextCreate :: Window  a -> Id -> String -> Rect -> Style ->  IO (StaticText  ())
staticTextCreate _prt _id _txt _lfttopwdthgt _stl 
  = withObjectResult $
    withObjectPtr _prt $ \cobj__prt -> 
    withStringPtr _txt $ \cobj__txt -> 
    wxStaticText_Create cobj__prt  (toCInt _id)  cobj__txt  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
foreign import ccall "wxStaticText_Create" wxStaticText_Create :: Ptr (TWindow a) -> CInt -> Ptr (TWxString c) -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TStaticText ()))

-- | usage: (@statusBarCreate prt id lfttopwdthgt stl@).
statusBarCreate :: Window  a -> Id -> Rect -> Style ->  IO (StatusBar  ())
statusBarCreate _prt _id _lfttopwdthgt _stl 
  = withObjectResult $
    withObjectPtr _prt $ \cobj__prt -> 
    wxStatusBar_Create cobj__prt  (toCInt _id)  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
foreign import ccall "wxStatusBar_Create" wxStatusBar_Create :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TStatusBar ()))

-- | usage: (@statusBarGetBorderX obj@).
statusBarGetBorderX :: StatusBar  a ->  IO Int
statusBarGetBorderX _obj 
  = withIntResult $
    withObjectRef "statusBarGetBorderX" _obj $ \cobj__obj -> 
    wxStatusBar_GetBorderX cobj__obj  
foreign import ccall "wxStatusBar_GetBorderX" wxStatusBar_GetBorderX :: Ptr (TStatusBar a) -> IO CInt

-- | usage: (@statusBarGetBorderY obj@).
statusBarGetBorderY :: StatusBar  a ->  IO Int
statusBarGetBorderY _obj 
  = withIntResult $
    withObjectRef "statusBarGetBorderY" _obj $ \cobj__obj -> 
    wxStatusBar_GetBorderY cobj__obj  
foreign import ccall "wxStatusBar_GetBorderY" wxStatusBar_GetBorderY :: Ptr (TStatusBar a) -> IO CInt

-- | usage: (@statusBarGetFieldsCount obj@).
statusBarGetFieldsCount :: StatusBar  a ->  IO Int
statusBarGetFieldsCount _obj 
  = withIntResult $
    withObjectRef "statusBarGetFieldsCount" _obj $ \cobj__obj -> 
    wxStatusBar_GetFieldsCount cobj__obj  
foreign import ccall "wxStatusBar_GetFieldsCount" wxStatusBar_GetFieldsCount :: Ptr (TStatusBar a) -> IO CInt

-- | usage: (@statusBarGetStatusText obj number@).
statusBarGetStatusText :: StatusBar  a -> Int ->  IO (String)
statusBarGetStatusText _obj number 
  = withManagedStringResult $
    withObjectRef "statusBarGetStatusText" _obj $ \cobj__obj -> 
    wxStatusBar_GetStatusText cobj__obj  (toCInt number)  
foreign import ccall "wxStatusBar_GetStatusText" wxStatusBar_GetStatusText :: Ptr (TStatusBar a) -> CInt -> IO (Ptr (TWxString ()))

-- | usage: (@statusBarSetFieldsCount obj number widths@).
statusBarSetFieldsCount :: StatusBar  a -> Int -> Ptr CInt ->  IO ()
statusBarSetFieldsCount _obj number widths 
  = withObjectRef "statusBarSetFieldsCount" _obj $ \cobj__obj -> 
    wxStatusBar_SetFieldsCount cobj__obj  (toCInt number)  widths  
foreign import ccall "wxStatusBar_SetFieldsCount" wxStatusBar_SetFieldsCount :: Ptr (TStatusBar a) -> CInt -> Ptr CInt -> IO ()

-- | usage: (@statusBarSetMinHeight obj height@).
statusBarSetMinHeight :: StatusBar  a -> Int ->  IO ()
statusBarSetMinHeight _obj height 
  = withObjectRef "statusBarSetMinHeight" _obj $ \cobj__obj -> 
    wxStatusBar_SetMinHeight cobj__obj  (toCInt height)  
foreign import ccall "wxStatusBar_SetMinHeight" wxStatusBar_SetMinHeight :: Ptr (TStatusBar a) -> CInt -> IO ()

-- | usage: (@statusBarSetStatusText obj text number@).
statusBarSetStatusText :: StatusBar  a -> String -> Int ->  IO ()
statusBarSetStatusText _obj text number 
  = withObjectRef "statusBarSetStatusText" _obj $ \cobj__obj -> 
    withStringPtr text $ \cobj_text -> 
    wxStatusBar_SetStatusText cobj__obj  cobj_text  (toCInt number)  
foreign import ccall "wxStatusBar_SetStatusText" wxStatusBar_SetStatusText :: Ptr (TStatusBar a) -> Ptr (TWxString b) -> CInt -> IO ()

-- | usage: (@statusBarSetStatusWidths obj n widths@).
statusBarSetStatusWidths :: StatusBar  a -> Int -> Ptr CInt ->  IO ()
statusBarSetStatusWidths _obj n widths 
  = withObjectRef "statusBarSetStatusWidths" _obj $ \cobj__obj -> 
    wxStatusBar_SetStatusWidths cobj__obj  (toCInt n)  widths  
foreign import ccall "wxStatusBar_SetStatusWidths" wxStatusBar_SetStatusWidths :: Ptr (TStatusBar a) -> CInt -> Ptr CInt -> IO ()

-- | usage: (@stopWatchCreate@).
stopWatchCreate ::  IO (StopWatch  ())
stopWatchCreate 
  = withObjectResult $
    wxStopWatch_Create 
foreign import ccall "wxStopWatch_Create" wxStopWatch_Create :: IO (Ptr (TStopWatch ()))

-- | usage: (@stopWatchDelete obj@).
stopWatchDelete :: StopWatch  a ->  IO ()
stopWatchDelete _obj 
  = withObjectRef "stopWatchDelete" _obj $ \cobj__obj -> 
    wxStopWatch_Delete cobj__obj  
foreign import ccall "wxStopWatch_Delete" wxStopWatch_Delete :: Ptr (TStopWatch a) -> IO ()

-- | usage: (@stopWatchPause obj@).
stopWatchPause :: StopWatch  a ->  IO ()
stopWatchPause _obj 
  = withObjectRef "stopWatchPause" _obj $ \cobj__obj -> 
    wxStopWatch_Pause cobj__obj  
foreign import ccall "wxStopWatch_Pause" wxStopWatch_Pause :: Ptr (TStopWatch a) -> IO ()

-- | usage: (@stopWatchResume obj@).
stopWatchResume :: StopWatch  a ->  IO ()
stopWatchResume _obj 
  = withObjectRef "stopWatchResume" _obj $ \cobj__obj -> 
    wxStopWatch_Resume cobj__obj  
foreign import ccall "wxStopWatch_Resume" wxStopWatch_Resume :: Ptr (TStopWatch a) -> IO ()

-- | usage: (@stopWatchStart obj msec@).
stopWatchStart :: StopWatch  a -> Int ->  IO ()
stopWatchStart _obj msec 
  = withObjectRef "stopWatchStart" _obj $ \cobj__obj -> 
    wxStopWatch_Start cobj__obj  (toCInt msec)  
foreign import ccall "wxStopWatch_Start" wxStopWatch_Start :: Ptr (TStopWatch a) -> CInt -> IO ()

-- | usage: (@stopWatchTime obj@).
stopWatchTime :: StopWatch  a ->  IO Int
stopWatchTime _obj 
  = withIntResult $
    withObjectRef "stopWatchTime" _obj $ \cobj__obj -> 
    wxStopWatch_Time cobj__obj  
foreign import ccall "wxStopWatch_Time" wxStopWatch_Time :: Ptr (TStopWatch a) -> IO CInt

-- | usage: (@streamBaseDelete obj@).
streamBaseDelete :: StreamBase  a ->  IO ()
streamBaseDelete obj 
  = withObjectRef "streamBaseDelete" obj $ \cobj_obj -> 
    wxStreamBase_Delete cobj_obj  
foreign import ccall "wxStreamBase_Delete" wxStreamBase_Delete :: Ptr (TStreamBase a) -> IO ()

-- | usage: (@streamBaseGetLastError obj@).
streamBaseGetLastError :: StreamBase  a ->  IO Int
streamBaseGetLastError _obj 
  = withIntResult $
    withObjectRef "streamBaseGetLastError" _obj $ \cobj__obj -> 
    wxStreamBase_GetLastError cobj__obj  
foreign import ccall "wxStreamBase_GetLastError" wxStreamBase_GetLastError :: Ptr (TStreamBase a) -> IO CInt

-- | usage: (@streamBaseGetSize obj@).
streamBaseGetSize :: StreamBase  a ->  IO Int
streamBaseGetSize _obj 
  = withIntResult $
    withObjectRef "streamBaseGetSize" _obj $ \cobj__obj -> 
    wxStreamBase_GetSize cobj__obj  
foreign import ccall "wxStreamBase_GetSize" wxStreamBase_GetSize :: Ptr (TStreamBase a) -> IO CInt

-- | usage: (@streamBaseIsOk obj@).
streamBaseIsOk :: StreamBase  a ->  IO Bool
streamBaseIsOk _obj 
  = withBoolResult $
    withObjectRef "streamBaseIsOk" _obj $ \cobj__obj -> 
    wxStreamBase_IsOk cobj__obj  
foreign import ccall "wxStreamBase_IsOk" wxStreamBase_IsOk :: Ptr (TStreamBase a) -> IO CBool

-- | usage: (@stringPropertyCreate label name value@).
stringPropertyCreate :: String -> String -> String ->  IO (StringProperty  ())
stringPropertyCreate label name value 
  = withObjectResult $
    withStringPtr label $ \cobj_label -> 
    withStringPtr name $ \cobj_name -> 
    withStringPtr value $ \cobj_value -> 
    wxStringProperty_Create cobj_label  cobj_name  cobj_value  
foreign import ccall "wxStringProperty_Create" wxStringProperty_Create :: Ptr (TWxString a) -> Ptr (TWxString b) -> Ptr (TWxString c) -> IO (Ptr (TStringProperty ()))

-- | usage: (@styledTextCtrlAddRefDocument obj docPointer@).
styledTextCtrlAddRefDocument :: StyledTextCtrl  a -> STCDoc  b ->  IO ()
styledTextCtrlAddRefDocument _obj docPointer 
  = withObjectRef "styledTextCtrlAddRefDocument" _obj $ \cobj__obj -> 
    withObjectPtr docPointer $ \cobj_docPointer -> 
    wxStyledTextCtrl_AddRefDocument cobj__obj  cobj_docPointer  
foreign import ccall "wxStyledTextCtrl_AddRefDocument" wxStyledTextCtrl_AddRefDocument :: Ptr (TStyledTextCtrl a) -> Ptr (TSTCDoc b) -> IO ()

-- | usage: (@styledTextCtrlAddStyledText obj wxdata@).
styledTextCtrlAddStyledText :: StyledTextCtrl  a -> MemoryBuffer  b ->  IO ()
styledTextCtrlAddStyledText _obj wxdata 
  = withObjectRef "styledTextCtrlAddStyledText" _obj $ \cobj__obj -> 
    withObjectPtr wxdata $ \cobj_wxdata -> 
    wxStyledTextCtrl_AddStyledText cobj__obj  cobj_wxdata  
foreign import ccall "wxStyledTextCtrl_AddStyledText" wxStyledTextCtrl_AddStyledText :: Ptr (TStyledTextCtrl a) -> Ptr (TMemoryBuffer b) -> IO ()

-- | usage: (@styledTextCtrlAddText obj text@).
styledTextCtrlAddText :: StyledTextCtrl  a -> String ->  IO ()
styledTextCtrlAddText _obj text 
  = withObjectRef "styledTextCtrlAddText" _obj $ \cobj__obj -> 
    withStringPtr text $ \cobj_text -> 
    wxStyledTextCtrl_AddText cobj__obj  cobj_text  
foreign import ccall "wxStyledTextCtrl_AddText" wxStyledTextCtrl_AddText :: Ptr (TStyledTextCtrl a) -> Ptr (TWxString b) -> IO ()

-- | usage: (@styledTextCtrlAppendText obj text@).
styledTextCtrlAppendText :: StyledTextCtrl  a -> String ->  IO ()
styledTextCtrlAppendText _obj text 
  = withObjectRef "styledTextCtrlAppendText" _obj $ \cobj__obj -> 
    withStringPtr text $ \cobj_text -> 
    wxStyledTextCtrl_AppendText cobj__obj  cobj_text  
foreign import ccall "wxStyledTextCtrl_AppendText" wxStyledTextCtrl_AppendText :: Ptr (TStyledTextCtrl a) -> Ptr (TWxString b) -> IO ()

-- | usage: (@styledTextCtrlAutoCompActive obj@).
styledTextCtrlAutoCompActive :: StyledTextCtrl  a ->  IO Bool
styledTextCtrlAutoCompActive _obj 
  = withBoolResult $
    withObjectRef "styledTextCtrlAutoCompActive" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_AutoCompActive cobj__obj  
foreign import ccall "wxStyledTextCtrl_AutoCompActive" wxStyledTextCtrl_AutoCompActive :: Ptr (TStyledTextCtrl a) -> IO CBool

-- | usage: (@styledTextCtrlAutoCompCancel obj@).
styledTextCtrlAutoCompCancel :: StyledTextCtrl  a ->  IO ()
styledTextCtrlAutoCompCancel _obj 
  = withObjectRef "styledTextCtrlAutoCompCancel" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_AutoCompCancel cobj__obj  
foreign import ccall "wxStyledTextCtrl_AutoCompCancel" wxStyledTextCtrl_AutoCompCancel :: Ptr (TStyledTextCtrl a) -> IO ()

-- | usage: (@styledTextCtrlAutoCompComplete obj@).
styledTextCtrlAutoCompComplete :: StyledTextCtrl  a ->  IO ()
styledTextCtrlAutoCompComplete _obj 
  = withObjectRef "styledTextCtrlAutoCompComplete" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_AutoCompComplete cobj__obj  
foreign import ccall "wxStyledTextCtrl_AutoCompComplete" wxStyledTextCtrl_AutoCompComplete :: Ptr (TStyledTextCtrl a) -> IO ()

-- | usage: (@styledTextCtrlAutoCompGetAutoHide obj@).
styledTextCtrlAutoCompGetAutoHide :: StyledTextCtrl  a ->  IO Bool
styledTextCtrlAutoCompGetAutoHide _obj 
  = withBoolResult $
    withObjectRef "styledTextCtrlAutoCompGetAutoHide" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_AutoCompGetAutoHide cobj__obj  
foreign import ccall "wxStyledTextCtrl_AutoCompGetAutoHide" wxStyledTextCtrl_AutoCompGetAutoHide :: Ptr (TStyledTextCtrl a) -> IO CBool

-- | usage: (@styledTextCtrlAutoCompGetCancelAtStart obj@).
styledTextCtrlAutoCompGetCancelAtStart :: StyledTextCtrl  a ->  IO Bool
styledTextCtrlAutoCompGetCancelAtStart _obj 
  = withBoolResult $
    withObjectRef "styledTextCtrlAutoCompGetCancelAtStart" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_AutoCompGetCancelAtStart cobj__obj  
foreign import ccall "wxStyledTextCtrl_AutoCompGetCancelAtStart" wxStyledTextCtrl_AutoCompGetCancelAtStart :: Ptr (TStyledTextCtrl a) -> IO CBool

-- | usage: (@styledTextCtrlAutoCompGetChooseSingle obj@).
styledTextCtrlAutoCompGetChooseSingle :: StyledTextCtrl  a ->  IO Bool
styledTextCtrlAutoCompGetChooseSingle _obj 
  = withBoolResult $
    withObjectRef "styledTextCtrlAutoCompGetChooseSingle" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_AutoCompGetChooseSingle cobj__obj  
foreign import ccall "wxStyledTextCtrl_AutoCompGetChooseSingle" wxStyledTextCtrl_AutoCompGetChooseSingle :: Ptr (TStyledTextCtrl a) -> IO CBool

-- | usage: (@styledTextCtrlAutoCompGetDropRestOfWord obj@).
styledTextCtrlAutoCompGetDropRestOfWord :: StyledTextCtrl  a ->  IO Bool
styledTextCtrlAutoCompGetDropRestOfWord _obj 
  = withBoolResult $
    withObjectRef "styledTextCtrlAutoCompGetDropRestOfWord" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_AutoCompGetDropRestOfWord cobj__obj  
foreign import ccall "wxStyledTextCtrl_AutoCompGetDropRestOfWord" wxStyledTextCtrl_AutoCompGetDropRestOfWord :: Ptr (TStyledTextCtrl a) -> IO CBool

-- | usage: (@styledTextCtrlAutoCompGetIgnoreCase obj@).
styledTextCtrlAutoCompGetIgnoreCase :: StyledTextCtrl  a ->  IO Bool
styledTextCtrlAutoCompGetIgnoreCase _obj 
  = withBoolResult $
    withObjectRef "styledTextCtrlAutoCompGetIgnoreCase" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_AutoCompGetIgnoreCase cobj__obj  
foreign import ccall "wxStyledTextCtrl_AutoCompGetIgnoreCase" wxStyledTextCtrl_AutoCompGetIgnoreCase :: Ptr (TStyledTextCtrl a) -> IO CBool

-- | usage: (@styledTextCtrlAutoCompGetSeparator obj@).
styledTextCtrlAutoCompGetSeparator :: StyledTextCtrl  a ->  IO Int
styledTextCtrlAutoCompGetSeparator _obj 
  = withIntResult $
    withObjectRef "styledTextCtrlAutoCompGetSeparator" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_AutoCompGetSeparator cobj__obj  
foreign import ccall "wxStyledTextCtrl_AutoCompGetSeparator" wxStyledTextCtrl_AutoCompGetSeparator :: Ptr (TStyledTextCtrl a) -> IO CInt

-- | usage: (@styledTextCtrlAutoCompGetTypeSeparator obj@).
styledTextCtrlAutoCompGetTypeSeparator :: StyledTextCtrl  a ->  IO Int
styledTextCtrlAutoCompGetTypeSeparator _obj 
  = withIntResult $
    withObjectRef "styledTextCtrlAutoCompGetTypeSeparator" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_AutoCompGetTypeSeparator cobj__obj  
foreign import ccall "wxStyledTextCtrl_AutoCompGetTypeSeparator" wxStyledTextCtrl_AutoCompGetTypeSeparator :: Ptr (TStyledTextCtrl a) -> IO CInt

-- | usage: (@styledTextCtrlAutoCompPosStart obj@).
styledTextCtrlAutoCompPosStart :: StyledTextCtrl  a ->  IO Int
styledTextCtrlAutoCompPosStart _obj 
  = withIntResult $
    withObjectRef "styledTextCtrlAutoCompPosStart" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_AutoCompPosStart cobj__obj  
foreign import ccall "wxStyledTextCtrl_AutoCompPosStart" wxStyledTextCtrl_AutoCompPosStart :: Ptr (TStyledTextCtrl a) -> IO CInt

-- | usage: (@styledTextCtrlAutoCompSelect obj text@).
styledTextCtrlAutoCompSelect :: StyledTextCtrl  a -> String ->  IO ()
styledTextCtrlAutoCompSelect _obj text 
  = withObjectRef "styledTextCtrlAutoCompSelect" _obj $ \cobj__obj -> 
    withStringPtr text $ \cobj_text -> 
    wxStyledTextCtrl_AutoCompSelect cobj__obj  cobj_text  
foreign import ccall "wxStyledTextCtrl_AutoCompSelect" wxStyledTextCtrl_AutoCompSelect :: Ptr (TStyledTextCtrl a) -> Ptr (TWxString b) -> IO ()

-- | usage: (@styledTextCtrlAutoCompSetAutoHide obj autoHide@).
styledTextCtrlAutoCompSetAutoHide :: StyledTextCtrl  a -> Bool ->  IO ()
styledTextCtrlAutoCompSetAutoHide _obj autoHide 
  = withObjectRef "styledTextCtrlAutoCompSetAutoHide" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_AutoCompSetAutoHide cobj__obj  (toCBool autoHide)  
foreign import ccall "wxStyledTextCtrl_AutoCompSetAutoHide" wxStyledTextCtrl_AutoCompSetAutoHide :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()

-- | usage: (@styledTextCtrlAutoCompSetCancelAtStart obj cancel@).
styledTextCtrlAutoCompSetCancelAtStart :: StyledTextCtrl  a -> Bool ->  IO ()
styledTextCtrlAutoCompSetCancelAtStart _obj cancel 
  = withObjectRef "styledTextCtrlAutoCompSetCancelAtStart" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_AutoCompSetCancelAtStart cobj__obj  (toCBool cancel)  
foreign import ccall "wxStyledTextCtrl_AutoCompSetCancelAtStart" wxStyledTextCtrl_AutoCompSetCancelAtStart :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()

-- | usage: (@styledTextCtrlAutoCompSetChooseSingle obj chooseSingle@).
styledTextCtrlAutoCompSetChooseSingle :: StyledTextCtrl  a -> Bool ->  IO ()
styledTextCtrlAutoCompSetChooseSingle _obj chooseSingle 
  = withObjectRef "styledTextCtrlAutoCompSetChooseSingle" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_AutoCompSetChooseSingle cobj__obj  (toCBool chooseSingle)  
foreign import ccall "wxStyledTextCtrl_AutoCompSetChooseSingle" wxStyledTextCtrl_AutoCompSetChooseSingle :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()

-- | usage: (@styledTextCtrlAutoCompSetDropRestOfWord obj dropRestOfWord@).
styledTextCtrlAutoCompSetDropRestOfWord :: StyledTextCtrl  a -> Bool ->  IO ()
styledTextCtrlAutoCompSetDropRestOfWord _obj dropRestOfWord 
  = withObjectRef "styledTextCtrlAutoCompSetDropRestOfWord" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_AutoCompSetDropRestOfWord cobj__obj  (toCBool dropRestOfWord)  
foreign import ccall "wxStyledTextCtrl_AutoCompSetDropRestOfWord" wxStyledTextCtrl_AutoCompSetDropRestOfWord :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()

-- | usage: (@styledTextCtrlAutoCompSetFillUps obj characterSet@).
styledTextCtrlAutoCompSetFillUps :: StyledTextCtrl  a -> String ->  IO ()
styledTextCtrlAutoCompSetFillUps _obj characterSet 
  = withObjectRef "styledTextCtrlAutoCompSetFillUps" _obj $ \cobj__obj -> 
    withStringPtr characterSet $ \cobj_characterSet -> 
    wxStyledTextCtrl_AutoCompSetFillUps cobj__obj  cobj_characterSet  
foreign import ccall "wxStyledTextCtrl_AutoCompSetFillUps" wxStyledTextCtrl_AutoCompSetFillUps :: Ptr (TStyledTextCtrl a) -> Ptr (TWxString b) -> IO ()

-- | usage: (@styledTextCtrlAutoCompSetIgnoreCase obj ignoreCase@).
styledTextCtrlAutoCompSetIgnoreCase :: StyledTextCtrl  a -> Bool ->  IO ()
styledTextCtrlAutoCompSetIgnoreCase _obj ignoreCase 
  = withObjectRef "styledTextCtrlAutoCompSetIgnoreCase" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_AutoCompSetIgnoreCase cobj__obj  (toCBool ignoreCase)  
foreign import ccall "wxStyledTextCtrl_AutoCompSetIgnoreCase" wxStyledTextCtrl_AutoCompSetIgnoreCase :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()

-- | usage: (@styledTextCtrlAutoCompSetSeparator obj separatorCharacter@).
styledTextCtrlAutoCompSetSeparator :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlAutoCompSetSeparator _obj separatorCharacter 
  = withObjectRef "styledTextCtrlAutoCompSetSeparator" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_AutoCompSetSeparator cobj__obj  (toCInt separatorCharacter)  
foreign import ccall "wxStyledTextCtrl_AutoCompSetSeparator" wxStyledTextCtrl_AutoCompSetSeparator :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlAutoCompSetTypeSeparator obj separatorCharacter@).
styledTextCtrlAutoCompSetTypeSeparator :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlAutoCompSetTypeSeparator _obj separatorCharacter 
  = withObjectRef "styledTextCtrlAutoCompSetTypeSeparator" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_AutoCompSetTypeSeparator cobj__obj  (toCInt separatorCharacter)  
foreign import ccall "wxStyledTextCtrl_AutoCompSetTypeSeparator" wxStyledTextCtrl_AutoCompSetTypeSeparator :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlAutoCompShow obj lenEntered itemList@).
styledTextCtrlAutoCompShow :: StyledTextCtrl  a -> Int -> String ->  IO ()
styledTextCtrlAutoCompShow _obj lenEntered itemList 
  = withObjectRef "styledTextCtrlAutoCompShow" _obj $ \cobj__obj -> 
    withStringPtr itemList $ \cobj_itemList -> 
    wxStyledTextCtrl_AutoCompShow cobj__obj  (toCInt lenEntered)  cobj_itemList  
foreign import ccall "wxStyledTextCtrl_AutoCompShow" wxStyledTextCtrl_AutoCompShow :: Ptr (TStyledTextCtrl a) -> CInt -> Ptr (TWxString c) -> IO ()

-- | usage: (@styledTextCtrlAutoCompStops obj characterSet@).
styledTextCtrlAutoCompStops :: StyledTextCtrl  a -> String ->  IO ()
styledTextCtrlAutoCompStops _obj characterSet 
  = withObjectRef "styledTextCtrlAutoCompStops" _obj $ \cobj__obj -> 
    withStringPtr characterSet $ \cobj_characterSet -> 
    wxStyledTextCtrl_AutoCompStops cobj__obj  cobj_characterSet  
foreign import ccall "wxStyledTextCtrl_AutoCompStops" wxStyledTextCtrl_AutoCompStops :: Ptr (TStyledTextCtrl a) -> Ptr (TWxString b) -> IO ()

-- | usage: (@styledTextCtrlBeginUndoAction obj@).
styledTextCtrlBeginUndoAction :: StyledTextCtrl  a ->  IO ()
styledTextCtrlBeginUndoAction _obj 
  = withObjectRef "styledTextCtrlBeginUndoAction" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_BeginUndoAction cobj__obj  
foreign import ccall "wxStyledTextCtrl_BeginUndoAction" wxStyledTextCtrl_BeginUndoAction :: Ptr (TStyledTextCtrl a) -> IO ()

-- | usage: (@styledTextCtrlBraceBadLight obj pos@).
styledTextCtrlBraceBadLight :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlBraceBadLight _obj pos 
  = withObjectRef "styledTextCtrlBraceBadLight" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_BraceBadLight cobj__obj  (toCInt pos)  
foreign import ccall "wxStyledTextCtrl_BraceBadLight" wxStyledTextCtrl_BraceBadLight :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlBraceHighlight obj pos1 pos2@).
styledTextCtrlBraceHighlight :: StyledTextCtrl  a -> Int -> Int ->  IO ()
styledTextCtrlBraceHighlight _obj pos1 pos2 
  = withObjectRef "styledTextCtrlBraceHighlight" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_BraceHighlight cobj__obj  (toCInt pos1)  (toCInt pos2)  
foreign import ccall "wxStyledTextCtrl_BraceHighlight" wxStyledTextCtrl_BraceHighlight :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()

-- | usage: (@styledTextCtrlBraceMatch obj pos@).
styledTextCtrlBraceMatch :: StyledTextCtrl  a -> Int ->  IO Int
styledTextCtrlBraceMatch _obj pos 
  = withIntResult $
    withObjectRef "styledTextCtrlBraceMatch" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_BraceMatch cobj__obj  (toCInt pos)  
foreign import ccall "wxStyledTextCtrl_BraceMatch" wxStyledTextCtrl_BraceMatch :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt

-- | usage: (@styledTextCtrlCallTipActive obj@).
styledTextCtrlCallTipActive :: StyledTextCtrl  a ->  IO Bool
styledTextCtrlCallTipActive _obj 
  = withBoolResult $
    withObjectRef "styledTextCtrlCallTipActive" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_CallTipActive cobj__obj  
foreign import ccall "wxStyledTextCtrl_CallTipActive" wxStyledTextCtrl_CallTipActive :: Ptr (TStyledTextCtrl a) -> IO CBool

-- | usage: (@styledTextCtrlCallTipCancel obj@).
styledTextCtrlCallTipCancel :: StyledTextCtrl  a ->  IO ()
styledTextCtrlCallTipCancel _obj 
  = withObjectRef "styledTextCtrlCallTipCancel" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_CallTipCancel cobj__obj  
foreign import ccall "wxStyledTextCtrl_CallTipCancel" wxStyledTextCtrl_CallTipCancel :: Ptr (TStyledTextCtrl a) -> IO ()

-- | usage: (@styledTextCtrlCallTipPosAtStart obj@).
styledTextCtrlCallTipPosAtStart :: StyledTextCtrl  a ->  IO Int
styledTextCtrlCallTipPosAtStart _obj 
  = withIntResult $
    withObjectRef "styledTextCtrlCallTipPosAtStart" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_CallTipPosAtStart cobj__obj  
foreign import ccall "wxStyledTextCtrl_CallTipPosAtStart" wxStyledTextCtrl_CallTipPosAtStart :: Ptr (TStyledTextCtrl a) -> IO CInt

-- | usage: (@styledTextCtrlCallTipSetBackground obj backrbackgbackb@).
styledTextCtrlCallTipSetBackground :: StyledTextCtrl  a -> Color ->  IO ()
styledTextCtrlCallTipSetBackground _obj backrbackgbackb 
  = withObjectRef "styledTextCtrlCallTipSetBackground" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_CallTipSetBackground cobj__obj  (colorRed backrbackgbackb) (colorGreen backrbackgbackb) (colorBlue backrbackgbackb)  
foreign import ccall "wxStyledTextCtrl_CallTipSetBackground" wxStyledTextCtrl_CallTipSetBackground :: Ptr (TStyledTextCtrl a) -> Word8 -> Word8 -> Word8 -> IO ()

-- | usage: (@styledTextCtrlCallTipSetForeground obj forerforegforeb@).
styledTextCtrlCallTipSetForeground :: StyledTextCtrl  a -> Color ->  IO ()
styledTextCtrlCallTipSetForeground _obj forerforegforeb 
  = withObjectRef "styledTextCtrlCallTipSetForeground" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_CallTipSetForeground cobj__obj  (colorRed forerforegforeb) (colorGreen forerforegforeb) (colorBlue forerforegforeb)  
foreign import ccall "wxStyledTextCtrl_CallTipSetForeground" wxStyledTextCtrl_CallTipSetForeground :: Ptr (TStyledTextCtrl a) -> Word8 -> Word8 -> Word8 -> IO ()

-- | usage: (@styledTextCtrlCallTipSetForegroundHighlight obj forerforegforeb@).
styledTextCtrlCallTipSetForegroundHighlight :: StyledTextCtrl  a -> Color ->  IO ()
styledTextCtrlCallTipSetForegroundHighlight _obj forerforegforeb 
  = withObjectRef "styledTextCtrlCallTipSetForegroundHighlight" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_CallTipSetForegroundHighlight cobj__obj  (colorRed forerforegforeb) (colorGreen forerforegforeb) (colorBlue forerforegforeb)  
foreign import ccall "wxStyledTextCtrl_CallTipSetForegroundHighlight" wxStyledTextCtrl_CallTipSetForegroundHighlight :: Ptr (TStyledTextCtrl a) -> Word8 -> Word8 -> Word8 -> IO ()

-- | usage: (@styledTextCtrlCallTipSetHighlight obj start end@).
styledTextCtrlCallTipSetHighlight :: StyledTextCtrl  a -> Int -> Int ->  IO ()
styledTextCtrlCallTipSetHighlight _obj start end 
  = withObjectRef "styledTextCtrlCallTipSetHighlight" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_CallTipSetHighlight cobj__obj  (toCInt start)  (toCInt end)  
foreign import ccall "wxStyledTextCtrl_CallTipSetHighlight" wxStyledTextCtrl_CallTipSetHighlight :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()

-- | usage: (@styledTextCtrlCallTipShow obj pos definition@).
styledTextCtrlCallTipShow :: StyledTextCtrl  a -> Int -> String ->  IO ()
styledTextCtrlCallTipShow _obj pos definition 
  = withObjectRef "styledTextCtrlCallTipShow" _obj $ \cobj__obj -> 
    withStringPtr definition $ \cobj_definition -> 
    wxStyledTextCtrl_CallTipShow cobj__obj  (toCInt pos)  cobj_definition  
foreign import ccall "wxStyledTextCtrl_CallTipShow" wxStyledTextCtrl_CallTipShow :: Ptr (TStyledTextCtrl a) -> CInt -> Ptr (TWxString c) -> IO ()

-- | usage: (@styledTextCtrlCanPaste obj@).
styledTextCtrlCanPaste :: StyledTextCtrl  a ->  IO Bool
styledTextCtrlCanPaste _obj 
  = withBoolResult $
    withObjectRef "styledTextCtrlCanPaste" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_CanPaste cobj__obj  
foreign import ccall "wxStyledTextCtrl_CanPaste" wxStyledTextCtrl_CanPaste :: Ptr (TStyledTextCtrl a) -> IO CBool

-- | usage: (@styledTextCtrlCanRedo obj@).
styledTextCtrlCanRedo :: StyledTextCtrl  a ->  IO Bool
styledTextCtrlCanRedo _obj 
  = withBoolResult $
    withObjectRef "styledTextCtrlCanRedo" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_CanRedo cobj__obj  
foreign import ccall "wxStyledTextCtrl_CanRedo" wxStyledTextCtrl_CanRedo :: Ptr (TStyledTextCtrl a) -> IO CBool

-- | usage: (@styledTextCtrlCanUndo obj@).
styledTextCtrlCanUndo :: StyledTextCtrl  a ->  IO Bool
styledTextCtrlCanUndo _obj 
  = withBoolResult $
    withObjectRef "styledTextCtrlCanUndo" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_CanUndo cobj__obj  
foreign import ccall "wxStyledTextCtrl_CanUndo" wxStyledTextCtrl_CanUndo :: Ptr (TStyledTextCtrl a) -> IO CBool

-- | usage: (@styledTextCtrlChooseCaretX obj@).
styledTextCtrlChooseCaretX :: StyledTextCtrl  a ->  IO ()
styledTextCtrlChooseCaretX _obj 
  = withObjectRef "styledTextCtrlChooseCaretX" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_ChooseCaretX cobj__obj  
foreign import ccall "wxStyledTextCtrl_ChooseCaretX" wxStyledTextCtrl_ChooseCaretX :: Ptr (TStyledTextCtrl a) -> IO ()

-- | usage: (@styledTextCtrlClear obj@).
styledTextCtrlClear :: StyledTextCtrl  a ->  IO ()
styledTextCtrlClear _obj 
  = withObjectRef "styledTextCtrlClear" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_Clear cobj__obj  
foreign import ccall "wxStyledTextCtrl_Clear" wxStyledTextCtrl_Clear :: Ptr (TStyledTextCtrl a) -> IO ()

-- | usage: (@styledTextCtrlClearAll obj@).
styledTextCtrlClearAll :: StyledTextCtrl  a ->  IO ()
styledTextCtrlClearAll _obj 
  = withObjectRef "styledTextCtrlClearAll" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_ClearAll cobj__obj  
foreign import ccall "wxStyledTextCtrl_ClearAll" wxStyledTextCtrl_ClearAll :: Ptr (TStyledTextCtrl a) -> IO ()

-- | usage: (@styledTextCtrlClearDocumentStyle obj@).
styledTextCtrlClearDocumentStyle :: StyledTextCtrl  a ->  IO ()
styledTextCtrlClearDocumentStyle _obj 
  = withObjectRef "styledTextCtrlClearDocumentStyle" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_ClearDocumentStyle cobj__obj  
foreign import ccall "wxStyledTextCtrl_ClearDocumentStyle" wxStyledTextCtrl_ClearDocumentStyle :: Ptr (TStyledTextCtrl a) -> IO ()

-- | usage: (@styledTextCtrlClearRegisteredImages obj@).
styledTextCtrlClearRegisteredImages :: StyledTextCtrl  a ->  IO ()
styledTextCtrlClearRegisteredImages _obj 
  = withObjectRef "styledTextCtrlClearRegisteredImages" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_ClearRegisteredImages cobj__obj  
foreign import ccall "wxStyledTextCtrl_ClearRegisteredImages" wxStyledTextCtrl_ClearRegisteredImages :: Ptr (TStyledTextCtrl a) -> IO ()

-- | usage: (@styledTextCtrlCmdKeyAssign obj key modifiers cmd@).
styledTextCtrlCmdKeyAssign :: StyledTextCtrl  a -> Int -> Int -> Int ->  IO ()
styledTextCtrlCmdKeyAssign _obj key modifiers cmd 
  = withObjectRef "styledTextCtrlCmdKeyAssign" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_CmdKeyAssign cobj__obj  (toCInt key)  (toCInt modifiers)  (toCInt cmd)  
foreign import ccall "wxStyledTextCtrl_CmdKeyAssign" wxStyledTextCtrl_CmdKeyAssign :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> CInt -> IO ()

-- | usage: (@styledTextCtrlCmdKeyClear obj key modifiers@).
styledTextCtrlCmdKeyClear :: StyledTextCtrl  a -> Int -> Int ->  IO ()
styledTextCtrlCmdKeyClear _obj key modifiers 
  = withObjectRef "styledTextCtrlCmdKeyClear" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_CmdKeyClear cobj__obj  (toCInt key)  (toCInt modifiers)  
foreign import ccall "wxStyledTextCtrl_CmdKeyClear" wxStyledTextCtrl_CmdKeyClear :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()

-- | usage: (@styledTextCtrlCmdKeyClearAll obj@).
styledTextCtrlCmdKeyClearAll :: StyledTextCtrl  a ->  IO ()
styledTextCtrlCmdKeyClearAll _obj 
  = withObjectRef "styledTextCtrlCmdKeyClearAll" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_CmdKeyClearAll cobj__obj  
foreign import ccall "wxStyledTextCtrl_CmdKeyClearAll" wxStyledTextCtrl_CmdKeyClearAll :: Ptr (TStyledTextCtrl a) -> IO ()

-- | usage: (@styledTextCtrlCmdKeyExecute obj cmd@).
styledTextCtrlCmdKeyExecute :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlCmdKeyExecute _obj cmd 
  = withObjectRef "styledTextCtrlCmdKeyExecute" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_CmdKeyExecute cobj__obj  (toCInt cmd)  
foreign import ccall "wxStyledTextCtrl_CmdKeyExecute" wxStyledTextCtrl_CmdKeyExecute :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlColourise obj start end@).
styledTextCtrlColourise :: StyledTextCtrl  a -> Int -> Int ->  IO ()
styledTextCtrlColourise _obj start end 
  = withObjectRef "styledTextCtrlColourise" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_Colourise cobj__obj  (toCInt start)  (toCInt end)  
foreign import ccall "wxStyledTextCtrl_Colourise" wxStyledTextCtrl_Colourise :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()

-- | usage: (@styledTextCtrlConvertEOLs obj eolMode@).
styledTextCtrlConvertEOLs :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlConvertEOLs _obj eolMode 
  = withObjectRef "styledTextCtrlConvertEOLs" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_ConvertEOLs cobj__obj  (toCInt eolMode)  
foreign import ccall "wxStyledTextCtrl_ConvertEOLs" wxStyledTextCtrl_ConvertEOLs :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlCopy obj@).
styledTextCtrlCopy :: StyledTextCtrl  a ->  IO ()
styledTextCtrlCopy _obj 
  = withObjectRef "styledTextCtrlCopy" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_Copy cobj__obj  
foreign import ccall "wxStyledTextCtrl_Copy" wxStyledTextCtrl_Copy :: Ptr (TStyledTextCtrl a) -> IO ()

-- | usage: (@styledTextCtrlCopyRange obj start end@).
styledTextCtrlCopyRange :: StyledTextCtrl  a -> Int -> Int ->  IO ()
styledTextCtrlCopyRange _obj start end 
  = withObjectRef "styledTextCtrlCopyRange" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_CopyRange cobj__obj  (toCInt start)  (toCInt end)  
foreign import ccall "wxStyledTextCtrl_CopyRange" wxStyledTextCtrl_CopyRange :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()

-- | usage: (@styledTextCtrlCopyText obj length text@).
styledTextCtrlCopyText :: StyledTextCtrl  a -> Int -> String ->  IO ()
styledTextCtrlCopyText _obj length text 
  = withObjectRef "styledTextCtrlCopyText" _obj $ \cobj__obj -> 
    withStringPtr text $ \cobj_text -> 
    wxStyledTextCtrl_CopyText cobj__obj  (toCInt length)  cobj_text  
foreign import ccall "wxStyledTextCtrl_CopyText" wxStyledTextCtrl_CopyText :: Ptr (TStyledTextCtrl a) -> CInt -> Ptr (TWxString c) -> IO ()

-- | usage: (@styledTextCtrlCreate prt id txt lfttopwdthgt style@).
styledTextCtrlCreate :: Window  a -> Id -> String -> Rect -> Int ->  IO (StyledTextCtrl  ())
styledTextCtrlCreate _prt _id _txt _lfttopwdthgt style 
  = withObjectResult $
    withObjectPtr _prt $ \cobj__prt -> 
    withStringPtr _txt $ \cobj__txt -> 
    wxStyledTextCtrl_Create cobj__prt  (toCInt _id)  cobj__txt  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt style)  
foreign import ccall "wxStyledTextCtrl_Create" wxStyledTextCtrl_Create :: Ptr (TWindow a) -> CInt -> Ptr (TWxString c) -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TStyledTextCtrl ()))

-- | usage: (@styledTextCtrlCreateDocument obj@).
styledTextCtrlCreateDocument :: StyledTextCtrl  a ->  IO (STCDoc  ())
styledTextCtrlCreateDocument _obj 
  = withObjectResult $
    withObjectRef "styledTextCtrlCreateDocument" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_CreateDocument cobj__obj  
foreign import ccall "wxStyledTextCtrl_CreateDocument" wxStyledTextCtrl_CreateDocument :: Ptr (TStyledTextCtrl a) -> IO (Ptr (TSTCDoc ()))

-- | usage: (@styledTextCtrlCut obj@).
styledTextCtrlCut :: StyledTextCtrl  a ->  IO ()
styledTextCtrlCut _obj 
  = withObjectRef "styledTextCtrlCut" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_Cut cobj__obj  
foreign import ccall "wxStyledTextCtrl_Cut" wxStyledTextCtrl_Cut :: Ptr (TStyledTextCtrl a) -> IO ()

-- | usage: (@styledTextCtrlDelLineLeft obj@).
styledTextCtrlDelLineLeft :: StyledTextCtrl  a ->  IO ()
styledTextCtrlDelLineLeft _obj 
  = withObjectRef "styledTextCtrlDelLineLeft" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_DelLineLeft cobj__obj  
foreign import ccall "wxStyledTextCtrl_DelLineLeft" wxStyledTextCtrl_DelLineLeft :: Ptr (TStyledTextCtrl a) -> IO ()

-- | usage: (@styledTextCtrlDelLineRight obj@).
styledTextCtrlDelLineRight :: StyledTextCtrl  a ->  IO ()
styledTextCtrlDelLineRight _obj 
  = withObjectRef "styledTextCtrlDelLineRight" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_DelLineRight cobj__obj  
foreign import ccall "wxStyledTextCtrl_DelLineRight" wxStyledTextCtrl_DelLineRight :: Ptr (TStyledTextCtrl a) -> IO ()

-- | usage: (@styledTextCtrlDocLineFromVisible obj lineDisplay@).
styledTextCtrlDocLineFromVisible :: StyledTextCtrl  a -> Int ->  IO Int
styledTextCtrlDocLineFromVisible _obj lineDisplay 
  = withIntResult $
    withObjectRef "styledTextCtrlDocLineFromVisible" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_DocLineFromVisible cobj__obj  (toCInt lineDisplay)  
foreign import ccall "wxStyledTextCtrl_DocLineFromVisible" wxStyledTextCtrl_DocLineFromVisible :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt

-- | usage: (@styledTextCtrlEmptyUndoBuffer obj@).
styledTextCtrlEmptyUndoBuffer :: StyledTextCtrl  a ->  IO ()
styledTextCtrlEmptyUndoBuffer _obj 
  = withObjectRef "styledTextCtrlEmptyUndoBuffer" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_EmptyUndoBuffer cobj__obj  
foreign import ccall "wxStyledTextCtrl_EmptyUndoBuffer" wxStyledTextCtrl_EmptyUndoBuffer :: Ptr (TStyledTextCtrl a) -> IO ()

-- | usage: (@styledTextCtrlEndUndoAction obj@).
styledTextCtrlEndUndoAction :: StyledTextCtrl  a ->  IO ()
styledTextCtrlEndUndoAction _obj 
  = withObjectRef "styledTextCtrlEndUndoAction" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_EndUndoAction cobj__obj  
foreign import ccall "wxStyledTextCtrl_EndUndoAction" wxStyledTextCtrl_EndUndoAction :: Ptr (TStyledTextCtrl a) -> IO ()

-- | usage: (@styledTextCtrlEnsureCaretVisible obj@).
styledTextCtrlEnsureCaretVisible :: StyledTextCtrl  a ->  IO ()
styledTextCtrlEnsureCaretVisible _obj 
  = withObjectRef "styledTextCtrlEnsureCaretVisible" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_EnsureCaretVisible cobj__obj  
foreign import ccall "wxStyledTextCtrl_EnsureCaretVisible" wxStyledTextCtrl_EnsureCaretVisible :: Ptr (TStyledTextCtrl a) -> IO ()

-- | usage: (@styledTextCtrlEnsureVisible obj line@).
styledTextCtrlEnsureVisible :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlEnsureVisible _obj line 
  = withObjectRef "styledTextCtrlEnsureVisible" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_EnsureVisible cobj__obj  (toCInt line)  
foreign import ccall "wxStyledTextCtrl_EnsureVisible" wxStyledTextCtrl_EnsureVisible :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlEnsureVisibleEnforcePolicy obj line@).
styledTextCtrlEnsureVisibleEnforcePolicy :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlEnsureVisibleEnforcePolicy _obj line 
  = withObjectRef "styledTextCtrlEnsureVisibleEnforcePolicy" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_EnsureVisibleEnforcePolicy cobj__obj  (toCInt line)  
foreign import ccall "wxStyledTextCtrl_EnsureVisibleEnforcePolicy" wxStyledTextCtrl_EnsureVisibleEnforcePolicy :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlFindText obj minPos maxPos text flags@).
styledTextCtrlFindText :: StyledTextCtrl  a -> Int -> Int -> String -> Int ->  IO Int
styledTextCtrlFindText _obj minPos maxPos text flags 
  = withIntResult $
    withObjectRef "styledTextCtrlFindText" _obj $ \cobj__obj -> 
    withStringPtr text $ \cobj_text -> 
    wxStyledTextCtrl_FindText cobj__obj  (toCInt minPos)  (toCInt maxPos)  cobj_text  (toCInt flags)  
foreign import ccall "wxStyledTextCtrl_FindText" wxStyledTextCtrl_FindText :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> Ptr (TWxString d) -> CInt -> IO CInt

-- | usage: (@styledTextCtrlFormatRange obj doDraw startPos endPos draw target renderRect pageRect@).
styledTextCtrlFormatRange :: StyledTextCtrl  a -> Bool -> Int -> Int -> DC  e -> DC  f -> Rect -> Rect ->  IO Int
styledTextCtrlFormatRange _obj doDraw startPos endPos draw target renderRect pageRect 
  = withIntResult $
    withObjectRef "styledTextCtrlFormatRange" _obj $ \cobj__obj -> 
    withObjectPtr draw $ \cobj_draw -> 
    withObjectPtr target $ \cobj_target -> 
    withWxRectPtr renderRect $ \cobj_renderRect -> 
    withWxRectPtr pageRect $ \cobj_pageRect -> 
    wxStyledTextCtrl_FormatRange cobj__obj  (toCBool doDraw)  (toCInt startPos)  (toCInt endPos)  cobj_draw  cobj_target  cobj_renderRect  cobj_pageRect  
foreign import ccall "wxStyledTextCtrl_FormatRange" wxStyledTextCtrl_FormatRange :: Ptr (TStyledTextCtrl a) -> CBool -> CInt -> CInt -> Ptr (TDC e) -> Ptr (TDC f) -> Ptr (TWxRect g) -> Ptr (TWxRect h) -> IO CInt

-- | usage: (@styledTextCtrlGetAnchor obj@).
styledTextCtrlGetAnchor :: StyledTextCtrl  a ->  IO Int
styledTextCtrlGetAnchor _obj 
  = withIntResult $
    withObjectRef "styledTextCtrlGetAnchor" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetAnchor cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetAnchor" wxStyledTextCtrl_GetAnchor :: Ptr (TStyledTextCtrl a) -> IO CInt

-- | usage: (@styledTextCtrlGetBackSpaceUnIndents obj@).
styledTextCtrlGetBackSpaceUnIndents :: StyledTextCtrl  a ->  IO Bool
styledTextCtrlGetBackSpaceUnIndents _obj 
  = withBoolResult $
    withObjectRef "styledTextCtrlGetBackSpaceUnIndents" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetBackSpaceUnIndents cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetBackSpaceUnIndents" wxStyledTextCtrl_GetBackSpaceUnIndents :: Ptr (TStyledTextCtrl a) -> IO CBool

-- | usage: (@styledTextCtrlGetBufferedDraw obj@).
styledTextCtrlGetBufferedDraw :: StyledTextCtrl  a ->  IO Bool
styledTextCtrlGetBufferedDraw _obj 
  = withBoolResult $
    withObjectRef "styledTextCtrlGetBufferedDraw" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetBufferedDraw cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetBufferedDraw" wxStyledTextCtrl_GetBufferedDraw :: Ptr (TStyledTextCtrl a) -> IO CBool

-- | usage: (@styledTextCtrlGetCaretForeground obj@).
styledTextCtrlGetCaretForeground :: StyledTextCtrl  a ->  IO (Color)
styledTextCtrlGetCaretForeground _obj 
  = withManagedColourResult $
    withObjectRef "styledTextCtrlGetCaretForeground" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetCaretForeground cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetCaretForeground" wxStyledTextCtrl_GetCaretForeground :: Ptr (TStyledTextCtrl a) -> IO (Ptr (TColour ()))

-- | usage: (@styledTextCtrlGetCaretLineBackground obj@).
styledTextCtrlGetCaretLineBackground :: StyledTextCtrl  a ->  IO (Color)
styledTextCtrlGetCaretLineBackground _obj 
  = withManagedColourResult $
    withObjectRef "styledTextCtrlGetCaretLineBackground" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetCaretLineBackground cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetCaretLineBackground" wxStyledTextCtrl_GetCaretLineBackground :: Ptr (TStyledTextCtrl a) -> IO (Ptr (TColour ()))

-- | usage: (@styledTextCtrlGetCaretLineVisible obj@).
styledTextCtrlGetCaretLineVisible :: StyledTextCtrl  a ->  IO Bool
styledTextCtrlGetCaretLineVisible _obj 
  = withBoolResult $
    withObjectRef "styledTextCtrlGetCaretLineVisible" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetCaretLineVisible cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetCaretLineVisible" wxStyledTextCtrl_GetCaretLineVisible :: Ptr (TStyledTextCtrl a) -> IO CBool

-- | usage: (@styledTextCtrlGetCaretPeriod obj@).
styledTextCtrlGetCaretPeriod :: StyledTextCtrl  a ->  IO Int
styledTextCtrlGetCaretPeriod _obj 
  = withIntResult $
    withObjectRef "styledTextCtrlGetCaretPeriod" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetCaretPeriod cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetCaretPeriod" wxStyledTextCtrl_GetCaretPeriod :: Ptr (TStyledTextCtrl a) -> IO CInt

-- | usage: (@styledTextCtrlGetCaretWidth obj@).
styledTextCtrlGetCaretWidth :: StyledTextCtrl  a ->  IO Int
styledTextCtrlGetCaretWidth _obj 
  = withIntResult $
    withObjectRef "styledTextCtrlGetCaretWidth" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetCaretWidth cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetCaretWidth" wxStyledTextCtrl_GetCaretWidth :: Ptr (TStyledTextCtrl a) -> IO CInt

-- | usage: (@styledTextCtrlGetCharAt obj pos@).
styledTextCtrlGetCharAt :: StyledTextCtrl  a -> Int ->  IO Int
styledTextCtrlGetCharAt _obj pos 
  = withIntResult $
    withObjectRef "styledTextCtrlGetCharAt" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetCharAt cobj__obj  (toCInt pos)  
foreign import ccall "wxStyledTextCtrl_GetCharAt" wxStyledTextCtrl_GetCharAt :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt

-- | usage: (@styledTextCtrlGetCodePage obj@).
styledTextCtrlGetCodePage :: StyledTextCtrl  a ->  IO Int
styledTextCtrlGetCodePage _obj 
  = withIntResult $
    withObjectRef "styledTextCtrlGetCodePage" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetCodePage cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetCodePage" wxStyledTextCtrl_GetCodePage :: Ptr (TStyledTextCtrl a) -> IO CInt

-- | usage: (@styledTextCtrlGetColumn obj pos@).
styledTextCtrlGetColumn :: StyledTextCtrl  a -> Int ->  IO Int
styledTextCtrlGetColumn _obj pos 
  = withIntResult $
    withObjectRef "styledTextCtrlGetColumn" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetColumn cobj__obj  (toCInt pos)  
foreign import ccall "wxStyledTextCtrl_GetColumn" wxStyledTextCtrl_GetColumn :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt

-- | usage: (@styledTextCtrlGetControlCharSymbol obj@).
styledTextCtrlGetControlCharSymbol :: StyledTextCtrl  a ->  IO Int
styledTextCtrlGetControlCharSymbol _obj 
  = withIntResult $
    withObjectRef "styledTextCtrlGetControlCharSymbol" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetControlCharSymbol cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetControlCharSymbol" wxStyledTextCtrl_GetControlCharSymbol :: Ptr (TStyledTextCtrl a) -> IO CInt

-- | usage: (@styledTextCtrlGetCurrentLine obj@).
styledTextCtrlGetCurrentLine :: StyledTextCtrl  a ->  IO Int
styledTextCtrlGetCurrentLine _obj 
  = withIntResult $
    withObjectRef "styledTextCtrlGetCurrentLine" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetCurrentLine cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetCurrentLine" wxStyledTextCtrl_GetCurrentLine :: Ptr (TStyledTextCtrl a) -> IO CInt

-- | usage: (@styledTextCtrlGetCurrentPos obj@).
styledTextCtrlGetCurrentPos :: StyledTextCtrl  a ->  IO Int
styledTextCtrlGetCurrentPos _obj 
  = withIntResult $
    withObjectRef "styledTextCtrlGetCurrentPos" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetCurrentPos cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetCurrentPos" wxStyledTextCtrl_GetCurrentPos :: Ptr (TStyledTextCtrl a) -> IO CInt

-- | usage: (@styledTextCtrlGetDocPointer obj@).
styledTextCtrlGetDocPointer :: StyledTextCtrl  a ->  IO (STCDoc  ())
styledTextCtrlGetDocPointer _obj 
  = withObjectResult $
    withObjectRef "styledTextCtrlGetDocPointer" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetDocPointer cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetDocPointer" wxStyledTextCtrl_GetDocPointer :: Ptr (TStyledTextCtrl a) -> IO (Ptr (TSTCDoc ()))

-- | usage: (@styledTextCtrlGetEOLMode obj@).
styledTextCtrlGetEOLMode :: StyledTextCtrl  a ->  IO Int
styledTextCtrlGetEOLMode _obj 
  = withIntResult $
    withObjectRef "styledTextCtrlGetEOLMode" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetEOLMode cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetEOLMode" wxStyledTextCtrl_GetEOLMode :: Ptr (TStyledTextCtrl a) -> IO CInt

-- | usage: (@styledTextCtrlGetEdgeColour obj@).
styledTextCtrlGetEdgeColour :: StyledTextCtrl  a ->  IO (Color)
styledTextCtrlGetEdgeColour _obj 
  = withManagedColourResult $
    withObjectRef "styledTextCtrlGetEdgeColour" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetEdgeColour cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetEdgeColour" wxStyledTextCtrl_GetEdgeColour :: Ptr (TStyledTextCtrl a) -> IO (Ptr (TColour ()))

-- | usage: (@styledTextCtrlGetEdgeColumn obj@).
styledTextCtrlGetEdgeColumn :: StyledTextCtrl  a ->  IO Int
styledTextCtrlGetEdgeColumn _obj 
  = withIntResult $
    withObjectRef "styledTextCtrlGetEdgeColumn" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetEdgeColumn cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetEdgeColumn" wxStyledTextCtrl_GetEdgeColumn :: Ptr (TStyledTextCtrl a) -> IO CInt

-- | usage: (@styledTextCtrlGetEdgeMode obj@).
styledTextCtrlGetEdgeMode :: StyledTextCtrl  a ->  IO Int
styledTextCtrlGetEdgeMode _obj 
  = withIntResult $
    withObjectRef "styledTextCtrlGetEdgeMode" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetEdgeMode cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetEdgeMode" wxStyledTextCtrl_GetEdgeMode :: Ptr (TStyledTextCtrl a) -> IO CInt

-- | usage: (@styledTextCtrlGetEndAtLastLine obj@).
styledTextCtrlGetEndAtLastLine :: StyledTextCtrl  a ->  IO Int
styledTextCtrlGetEndAtLastLine _obj 
  = withIntResult $
    withObjectRef "styledTextCtrlGetEndAtLastLine" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetEndAtLastLine cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetEndAtLastLine" wxStyledTextCtrl_GetEndAtLastLine :: Ptr (TStyledTextCtrl a) -> IO CInt

-- | usage: (@styledTextCtrlGetEndStyled obj@).
styledTextCtrlGetEndStyled :: StyledTextCtrl  a ->  IO Int
styledTextCtrlGetEndStyled _obj 
  = withIntResult $
    withObjectRef "styledTextCtrlGetEndStyled" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetEndStyled cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetEndStyled" wxStyledTextCtrl_GetEndStyled :: Ptr (TStyledTextCtrl a) -> IO CInt

-- | usage: (@styledTextCtrlGetFirstVisibleLine obj@).
styledTextCtrlGetFirstVisibleLine :: StyledTextCtrl  a ->  IO Int
styledTextCtrlGetFirstVisibleLine _obj 
  = withIntResult $
    withObjectRef "styledTextCtrlGetFirstVisibleLine" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetFirstVisibleLine cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetFirstVisibleLine" wxStyledTextCtrl_GetFirstVisibleLine :: Ptr (TStyledTextCtrl a) -> IO CInt

-- | usage: (@styledTextCtrlGetFoldExpanded obj line@).
styledTextCtrlGetFoldExpanded :: StyledTextCtrl  a -> Int ->  IO Bool
styledTextCtrlGetFoldExpanded _obj line 
  = withBoolResult $
    withObjectRef "styledTextCtrlGetFoldExpanded" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetFoldExpanded cobj__obj  (toCInt line)  
foreign import ccall "wxStyledTextCtrl_GetFoldExpanded" wxStyledTextCtrl_GetFoldExpanded :: Ptr (TStyledTextCtrl a) -> CInt -> IO CBool

-- | usage: (@styledTextCtrlGetFoldLevel obj line@).
styledTextCtrlGetFoldLevel :: StyledTextCtrl  a -> Int ->  IO Int
styledTextCtrlGetFoldLevel _obj line 
  = withIntResult $
    withObjectRef "styledTextCtrlGetFoldLevel" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetFoldLevel cobj__obj  (toCInt line)  
foreign import ccall "wxStyledTextCtrl_GetFoldLevel" wxStyledTextCtrl_GetFoldLevel :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt

-- | usage: (@styledTextCtrlGetFoldParent obj line@).
styledTextCtrlGetFoldParent :: StyledTextCtrl  a -> Int ->  IO Int
styledTextCtrlGetFoldParent _obj line 
  = withIntResult $
    withObjectRef "styledTextCtrlGetFoldParent" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetFoldParent cobj__obj  (toCInt line)  
foreign import ccall "wxStyledTextCtrl_GetFoldParent" wxStyledTextCtrl_GetFoldParent :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt

-- | usage: (@styledTextCtrlGetHighlightGuide obj@).
styledTextCtrlGetHighlightGuide :: StyledTextCtrl  a ->  IO Int
styledTextCtrlGetHighlightGuide _obj 
  = withIntResult $
    withObjectRef "styledTextCtrlGetHighlightGuide" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetHighlightGuide cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetHighlightGuide" wxStyledTextCtrl_GetHighlightGuide :: Ptr (TStyledTextCtrl a) -> IO CInt

-- | usage: (@styledTextCtrlGetIndent obj@).
styledTextCtrlGetIndent :: StyledTextCtrl  a ->  IO Int
styledTextCtrlGetIndent _obj 
  = withIntResult $
    withObjectRef "styledTextCtrlGetIndent" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetIndent cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetIndent" wxStyledTextCtrl_GetIndent :: Ptr (TStyledTextCtrl a) -> IO CInt

-- | usage: (@styledTextCtrlGetIndentationGuides obj@).
styledTextCtrlGetIndentationGuides :: StyledTextCtrl  a ->  IO Bool
styledTextCtrlGetIndentationGuides _obj 
  = withBoolResult $
    withObjectRef "styledTextCtrlGetIndentationGuides" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetIndentationGuides cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetIndentationGuides" wxStyledTextCtrl_GetIndentationGuides :: Ptr (TStyledTextCtrl a) -> IO CBool

-- | usage: (@styledTextCtrlGetLastChild obj line level@).
styledTextCtrlGetLastChild :: StyledTextCtrl  a -> Int -> Int ->  IO Int
styledTextCtrlGetLastChild _obj line level 
  = withIntResult $
    withObjectRef "styledTextCtrlGetLastChild" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetLastChild cobj__obj  (toCInt line)  (toCInt level)  
foreign import ccall "wxStyledTextCtrl_GetLastChild" wxStyledTextCtrl_GetLastChild :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO CInt

-- | usage: (@styledTextCtrlGetLastKeydownProcessed obj@).
styledTextCtrlGetLastKeydownProcessed :: StyledTextCtrl  a ->  IO Bool
styledTextCtrlGetLastKeydownProcessed _obj 
  = withBoolResult $
    withObjectRef "styledTextCtrlGetLastKeydownProcessed" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetLastKeydownProcessed cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetLastKeydownProcessed" wxStyledTextCtrl_GetLastKeydownProcessed :: Ptr (TStyledTextCtrl a) -> IO CBool

-- | usage: (@styledTextCtrlGetLayoutCache obj@).
styledTextCtrlGetLayoutCache :: StyledTextCtrl  a ->  IO Int
styledTextCtrlGetLayoutCache _obj 
  = withIntResult $
    withObjectRef "styledTextCtrlGetLayoutCache" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetLayoutCache cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetLayoutCache" wxStyledTextCtrl_GetLayoutCache :: Ptr (TStyledTextCtrl a) -> IO CInt

-- | usage: (@styledTextCtrlGetLength obj@).
styledTextCtrlGetLength :: StyledTextCtrl  a ->  IO Int
styledTextCtrlGetLength _obj 
  = withIntResult $
    withObjectRef "styledTextCtrlGetLength" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetLength cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetLength" wxStyledTextCtrl_GetLength :: Ptr (TStyledTextCtrl a) -> IO CInt

-- | usage: (@styledTextCtrlGetLexer obj@).
styledTextCtrlGetLexer :: StyledTextCtrl  a ->  IO Int
styledTextCtrlGetLexer _obj 
  = withIntResult $
    withObjectRef "styledTextCtrlGetLexer" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetLexer cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetLexer" wxStyledTextCtrl_GetLexer :: Ptr (TStyledTextCtrl a) -> IO CInt

-- | usage: (@styledTextCtrlGetLine obj line@).
styledTextCtrlGetLine :: StyledTextCtrl  a -> Int ->  IO (String)
styledTextCtrlGetLine _obj line 
  = withManagedStringResult $
    withObjectRef "styledTextCtrlGetLine" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetLine cobj__obj  (toCInt line)  
foreign import ccall "wxStyledTextCtrl_GetLine" wxStyledTextCtrl_GetLine :: Ptr (TStyledTextCtrl a) -> CInt -> IO (Ptr (TWxString ()))

-- | usage: (@styledTextCtrlGetLineCount obj@).
styledTextCtrlGetLineCount :: StyledTextCtrl  a ->  IO Int
styledTextCtrlGetLineCount _obj 
  = withIntResult $
    withObjectRef "styledTextCtrlGetLineCount" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetLineCount cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetLineCount" wxStyledTextCtrl_GetLineCount :: Ptr (TStyledTextCtrl a) -> IO CInt

-- | usage: (@styledTextCtrlGetLineEndPosition obj line@).
styledTextCtrlGetLineEndPosition :: StyledTextCtrl  a -> Int ->  IO Int
styledTextCtrlGetLineEndPosition _obj line 
  = withIntResult $
    withObjectRef "styledTextCtrlGetLineEndPosition" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetLineEndPosition cobj__obj  (toCInt line)  
foreign import ccall "wxStyledTextCtrl_GetLineEndPosition" wxStyledTextCtrl_GetLineEndPosition :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt

-- | usage: (@styledTextCtrlGetLineIndentPosition obj line@).
styledTextCtrlGetLineIndentPosition :: StyledTextCtrl  a -> Int ->  IO Int
styledTextCtrlGetLineIndentPosition _obj line 
  = withIntResult $
    withObjectRef "styledTextCtrlGetLineIndentPosition" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetLineIndentPosition cobj__obj  (toCInt line)  
foreign import ccall "wxStyledTextCtrl_GetLineIndentPosition" wxStyledTextCtrl_GetLineIndentPosition :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt

-- | usage: (@styledTextCtrlGetLineIndentation obj line@).
styledTextCtrlGetLineIndentation :: StyledTextCtrl  a -> Int ->  IO Int
styledTextCtrlGetLineIndentation _obj line 
  = withIntResult $
    withObjectRef "styledTextCtrlGetLineIndentation" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetLineIndentation cobj__obj  (toCInt line)  
foreign import ccall "wxStyledTextCtrl_GetLineIndentation" wxStyledTextCtrl_GetLineIndentation :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt

-- | usage: (@styledTextCtrlGetLineState obj line@).
styledTextCtrlGetLineState :: StyledTextCtrl  a -> Int ->  IO Int
styledTextCtrlGetLineState _obj line 
  = withIntResult $
    withObjectRef "styledTextCtrlGetLineState" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetLineState cobj__obj  (toCInt line)  
foreign import ccall "wxStyledTextCtrl_GetLineState" wxStyledTextCtrl_GetLineState :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt

-- | usage: (@styledTextCtrlGetLineVisible obj line@).
styledTextCtrlGetLineVisible :: StyledTextCtrl  a -> Int ->  IO Bool
styledTextCtrlGetLineVisible _obj line 
  = withBoolResult $
    withObjectRef "styledTextCtrlGetLineVisible" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetLineVisible cobj__obj  (toCInt line)  
foreign import ccall "wxStyledTextCtrl_GetLineVisible" wxStyledTextCtrl_GetLineVisible :: Ptr (TStyledTextCtrl a) -> CInt -> IO CBool

-- | usage: (@styledTextCtrlGetMarginLeft obj@).
styledTextCtrlGetMarginLeft :: StyledTextCtrl  a ->  IO Int
styledTextCtrlGetMarginLeft _obj 
  = withIntResult $
    withObjectRef "styledTextCtrlGetMarginLeft" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetMarginLeft cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetMarginLeft" wxStyledTextCtrl_GetMarginLeft :: Ptr (TStyledTextCtrl a) -> IO CInt

-- | usage: (@styledTextCtrlGetMarginMask obj margin@).
styledTextCtrlGetMarginMask :: StyledTextCtrl  a -> Int ->  IO Int
styledTextCtrlGetMarginMask _obj margin 
  = withIntResult $
    withObjectRef "styledTextCtrlGetMarginMask" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetMarginMask cobj__obj  (toCInt margin)  
foreign import ccall "wxStyledTextCtrl_GetMarginMask" wxStyledTextCtrl_GetMarginMask :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt

-- | usage: (@styledTextCtrlGetMarginRight obj@).
styledTextCtrlGetMarginRight :: StyledTextCtrl  a ->  IO Int
styledTextCtrlGetMarginRight _obj 
  = withIntResult $
    withObjectRef "styledTextCtrlGetMarginRight" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetMarginRight cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetMarginRight" wxStyledTextCtrl_GetMarginRight :: Ptr (TStyledTextCtrl a) -> IO CInt

-- | usage: (@styledTextCtrlGetMarginSensitive obj margin@).
styledTextCtrlGetMarginSensitive :: StyledTextCtrl  a -> Int ->  IO Bool
styledTextCtrlGetMarginSensitive _obj margin 
  = withBoolResult $
    withObjectRef "styledTextCtrlGetMarginSensitive" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetMarginSensitive cobj__obj  (toCInt margin)  
foreign import ccall "wxStyledTextCtrl_GetMarginSensitive" wxStyledTextCtrl_GetMarginSensitive :: Ptr (TStyledTextCtrl a) -> CInt -> IO CBool

-- | usage: (@styledTextCtrlGetMarginType obj margin@).
styledTextCtrlGetMarginType :: StyledTextCtrl  a -> Int ->  IO Int
styledTextCtrlGetMarginType _obj margin 
  = withIntResult $
    withObjectRef "styledTextCtrlGetMarginType" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetMarginType cobj__obj  (toCInt margin)  
foreign import ccall "wxStyledTextCtrl_GetMarginType" wxStyledTextCtrl_GetMarginType :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt

-- | usage: (@styledTextCtrlGetMarginWidth obj margin@).
styledTextCtrlGetMarginWidth :: StyledTextCtrl  a -> Int ->  IO Int
styledTextCtrlGetMarginWidth _obj margin 
  = withIntResult $
    withObjectRef "styledTextCtrlGetMarginWidth" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetMarginWidth cobj__obj  (toCInt margin)  
foreign import ccall "wxStyledTextCtrl_GetMarginWidth" wxStyledTextCtrl_GetMarginWidth :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt

-- | usage: (@styledTextCtrlGetMaxLineState obj@).
styledTextCtrlGetMaxLineState :: StyledTextCtrl  a ->  IO Int
styledTextCtrlGetMaxLineState _obj 
  = withIntResult $
    withObjectRef "styledTextCtrlGetMaxLineState" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetMaxLineState cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetMaxLineState" wxStyledTextCtrl_GetMaxLineState :: Ptr (TStyledTextCtrl a) -> IO CInt

-- | usage: (@styledTextCtrlGetModEventMask obj@).
styledTextCtrlGetModEventMask :: StyledTextCtrl  a ->  IO Int
styledTextCtrlGetModEventMask _obj 
  = withIntResult $
    withObjectRef "styledTextCtrlGetModEventMask" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetModEventMask cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetModEventMask" wxStyledTextCtrl_GetModEventMask :: Ptr (TStyledTextCtrl a) -> IO CInt

-- | usage: (@styledTextCtrlGetModify obj@).
styledTextCtrlGetModify :: StyledTextCtrl  a ->  IO Bool
styledTextCtrlGetModify _obj 
  = withBoolResult $
    withObjectRef "styledTextCtrlGetModify" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetModify cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetModify" wxStyledTextCtrl_GetModify :: Ptr (TStyledTextCtrl a) -> IO CBool

-- | usage: (@styledTextCtrlGetMouseDownCaptures obj@).
styledTextCtrlGetMouseDownCaptures :: StyledTextCtrl  a ->  IO Bool
styledTextCtrlGetMouseDownCaptures _obj 
  = withBoolResult $
    withObjectRef "styledTextCtrlGetMouseDownCaptures" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetMouseDownCaptures cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetMouseDownCaptures" wxStyledTextCtrl_GetMouseDownCaptures :: Ptr (TStyledTextCtrl a) -> IO CBool

-- | usage: (@styledTextCtrlGetMouseDwellTime obj@).
styledTextCtrlGetMouseDwellTime :: StyledTextCtrl  a ->  IO Int
styledTextCtrlGetMouseDwellTime _obj 
  = withIntResult $
    withObjectRef "styledTextCtrlGetMouseDwellTime" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetMouseDwellTime cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetMouseDwellTime" wxStyledTextCtrl_GetMouseDwellTime :: Ptr (TStyledTextCtrl a) -> IO CInt

-- | usage: (@styledTextCtrlGetOvertype obj@).
styledTextCtrlGetOvertype :: StyledTextCtrl  a ->  IO Bool
styledTextCtrlGetOvertype _obj 
  = withBoolResult $
    withObjectRef "styledTextCtrlGetOvertype" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetOvertype cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetOvertype" wxStyledTextCtrl_GetOvertype :: Ptr (TStyledTextCtrl a) -> IO CBool

-- | usage: (@styledTextCtrlGetPrintColourMode obj@).
styledTextCtrlGetPrintColourMode :: StyledTextCtrl  a ->  IO Int
styledTextCtrlGetPrintColourMode _obj 
  = withIntResult $
    withObjectRef "styledTextCtrlGetPrintColourMode" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetPrintColourMode cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetPrintColourMode" wxStyledTextCtrl_GetPrintColourMode :: Ptr (TStyledTextCtrl a) -> IO CInt

-- | usage: (@styledTextCtrlGetPrintMagnification obj@).
styledTextCtrlGetPrintMagnification :: StyledTextCtrl  a ->  IO Int
styledTextCtrlGetPrintMagnification _obj 
  = withIntResult $
    withObjectRef "styledTextCtrlGetPrintMagnification" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetPrintMagnification cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetPrintMagnification" wxStyledTextCtrl_GetPrintMagnification :: Ptr (TStyledTextCtrl a) -> IO CInt

-- | usage: (@styledTextCtrlGetPrintWrapMode obj@).
styledTextCtrlGetPrintWrapMode :: StyledTextCtrl  a ->  IO Int
styledTextCtrlGetPrintWrapMode _obj 
  = withIntResult $
    withObjectRef "styledTextCtrlGetPrintWrapMode" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetPrintWrapMode cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetPrintWrapMode" wxStyledTextCtrl_GetPrintWrapMode :: Ptr (TStyledTextCtrl a) -> IO CInt

-- | usage: (@styledTextCtrlGetReadOnly obj@).
styledTextCtrlGetReadOnly :: StyledTextCtrl  a ->  IO Bool
styledTextCtrlGetReadOnly _obj 
  = withBoolResult $
    withObjectRef "styledTextCtrlGetReadOnly" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetReadOnly cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetReadOnly" wxStyledTextCtrl_GetReadOnly :: Ptr (TStyledTextCtrl a) -> IO CBool

-- | usage: (@styledTextCtrlGetSTCCursor obj@).
styledTextCtrlGetSTCCursor :: StyledTextCtrl  a ->  IO Int
styledTextCtrlGetSTCCursor _obj 
  = withIntResult $
    withObjectRef "styledTextCtrlGetSTCCursor" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetSTCCursor cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetSTCCursor" wxStyledTextCtrl_GetSTCCursor :: Ptr (TStyledTextCtrl a) -> IO CInt

-- | usage: (@styledTextCtrlGetSTCFocus obj@).
styledTextCtrlGetSTCFocus :: StyledTextCtrl  a ->  IO Bool
styledTextCtrlGetSTCFocus _obj 
  = withBoolResult $
    withObjectRef "styledTextCtrlGetSTCFocus" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetSTCFocus cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetSTCFocus" wxStyledTextCtrl_GetSTCFocus :: Ptr (TStyledTextCtrl a) -> IO CBool

-- | usage: (@styledTextCtrlGetScrollWidth obj@).
styledTextCtrlGetScrollWidth :: StyledTextCtrl  a ->  IO Int
styledTextCtrlGetScrollWidth _obj 
  = withIntResult $
    withObjectRef "styledTextCtrlGetScrollWidth" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetScrollWidth cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetScrollWidth" wxStyledTextCtrl_GetScrollWidth :: Ptr (TStyledTextCtrl a) -> IO CInt

-- | usage: (@styledTextCtrlGetSearchFlags obj@).
styledTextCtrlGetSearchFlags :: StyledTextCtrl  a ->  IO Int
styledTextCtrlGetSearchFlags _obj 
  = withIntResult $
    withObjectRef "styledTextCtrlGetSearchFlags" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetSearchFlags cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetSearchFlags" wxStyledTextCtrl_GetSearchFlags :: Ptr (TStyledTextCtrl a) -> IO CInt

-- | usage: (@styledTextCtrlGetSelectedText obj@).
styledTextCtrlGetSelectedText :: StyledTextCtrl  a ->  IO (String)
styledTextCtrlGetSelectedText _obj 
  = withManagedStringResult $
    withObjectRef "styledTextCtrlGetSelectedText" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetSelectedText cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetSelectedText" wxStyledTextCtrl_GetSelectedText :: Ptr (TStyledTextCtrl a) -> IO (Ptr (TWxString ()))

-- | usage: (@styledTextCtrlGetSelection obj startPos endPos@).
styledTextCtrlGetSelection :: StyledTextCtrl  a -> Ptr CInt -> Ptr CInt ->  IO ()
styledTextCtrlGetSelection _obj startPos endPos 
  = withObjectRef "styledTextCtrlGetSelection" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetSelection cobj__obj  startPos  endPos  
foreign import ccall "wxStyledTextCtrl_GetSelection" wxStyledTextCtrl_GetSelection :: Ptr (TStyledTextCtrl a) -> Ptr CInt -> Ptr CInt -> IO ()

-- | usage: (@styledTextCtrlGetSelectionEnd obj@).
styledTextCtrlGetSelectionEnd :: StyledTextCtrl  a ->  IO Int
styledTextCtrlGetSelectionEnd _obj 
  = withIntResult $
    withObjectRef "styledTextCtrlGetSelectionEnd" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetSelectionEnd cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetSelectionEnd" wxStyledTextCtrl_GetSelectionEnd :: Ptr (TStyledTextCtrl a) -> IO CInt

-- | usage: (@styledTextCtrlGetSelectionStart obj@).
styledTextCtrlGetSelectionStart :: StyledTextCtrl  a ->  IO Int
styledTextCtrlGetSelectionStart _obj 
  = withIntResult $
    withObjectRef "styledTextCtrlGetSelectionStart" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetSelectionStart cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetSelectionStart" wxStyledTextCtrl_GetSelectionStart :: Ptr (TStyledTextCtrl a) -> IO CInt

-- | usage: (@styledTextCtrlGetStatus obj@).
styledTextCtrlGetStatus :: StyledTextCtrl  a ->  IO Int
styledTextCtrlGetStatus _obj 
  = withIntResult $
    withObjectRef "styledTextCtrlGetStatus" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetStatus cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetStatus" wxStyledTextCtrl_GetStatus :: Ptr (TStyledTextCtrl a) -> IO CInt

-- | usage: (@styledTextCtrlGetStyleAt obj pos@).
styledTextCtrlGetStyleAt :: StyledTextCtrl  a -> Int ->  IO Int
styledTextCtrlGetStyleAt _obj pos 
  = withIntResult $
    withObjectRef "styledTextCtrlGetStyleAt" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetStyleAt cobj__obj  (toCInt pos)  
foreign import ccall "wxStyledTextCtrl_GetStyleAt" wxStyledTextCtrl_GetStyleAt :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt

-- | usage: (@styledTextCtrlGetStyleBits obj@).
styledTextCtrlGetStyleBits :: StyledTextCtrl  a ->  IO Int
styledTextCtrlGetStyleBits _obj 
  = withIntResult $
    withObjectRef "styledTextCtrlGetStyleBits" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetStyleBits cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetStyleBits" wxStyledTextCtrl_GetStyleBits :: Ptr (TStyledTextCtrl a) -> IO CInt

-- | usage: (@styledTextCtrlGetTabIndents obj@).
styledTextCtrlGetTabIndents :: StyledTextCtrl  a ->  IO Bool
styledTextCtrlGetTabIndents _obj 
  = withBoolResult $
    withObjectRef "styledTextCtrlGetTabIndents" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetTabIndents cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetTabIndents" wxStyledTextCtrl_GetTabIndents :: Ptr (TStyledTextCtrl a) -> IO CBool

-- | usage: (@styledTextCtrlGetTabWidth obj@).
styledTextCtrlGetTabWidth :: StyledTextCtrl  a ->  IO Int
styledTextCtrlGetTabWidth _obj 
  = withIntResult $
    withObjectRef "styledTextCtrlGetTabWidth" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetTabWidth cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetTabWidth" wxStyledTextCtrl_GetTabWidth :: Ptr (TStyledTextCtrl a) -> IO CInt

-- | usage: (@styledTextCtrlGetTargetEnd obj@).
styledTextCtrlGetTargetEnd :: StyledTextCtrl  a ->  IO Int
styledTextCtrlGetTargetEnd _obj 
  = withIntResult $
    withObjectRef "styledTextCtrlGetTargetEnd" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetTargetEnd cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetTargetEnd" wxStyledTextCtrl_GetTargetEnd :: Ptr (TStyledTextCtrl a) -> IO CInt

-- | usage: (@styledTextCtrlGetTargetStart obj@).
styledTextCtrlGetTargetStart :: StyledTextCtrl  a ->  IO Int
styledTextCtrlGetTargetStart _obj 
  = withIntResult $
    withObjectRef "styledTextCtrlGetTargetStart" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetTargetStart cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetTargetStart" wxStyledTextCtrl_GetTargetStart :: Ptr (TStyledTextCtrl a) -> IO CInt

-- | usage: (@styledTextCtrlGetText obj@).
styledTextCtrlGetText :: StyledTextCtrl  a ->  IO (String)
styledTextCtrlGetText _obj 
  = withManagedStringResult $
    withObjectRef "styledTextCtrlGetText" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetText cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetText" wxStyledTextCtrl_GetText :: Ptr (TStyledTextCtrl a) -> IO (Ptr (TWxString ()))

-- | usage: (@styledTextCtrlGetTextLength obj@).
styledTextCtrlGetTextLength :: StyledTextCtrl  a ->  IO Int
styledTextCtrlGetTextLength _obj 
  = withIntResult $
    withObjectRef "styledTextCtrlGetTextLength" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetTextLength cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetTextLength" wxStyledTextCtrl_GetTextLength :: Ptr (TStyledTextCtrl a) -> IO CInt

-- | usage: (@styledTextCtrlGetTextRange obj startPos endPos@).
styledTextCtrlGetTextRange :: StyledTextCtrl  a -> Int -> Int ->  IO (String)
styledTextCtrlGetTextRange _obj startPos endPos 
  = withManagedStringResult $
    withObjectRef "styledTextCtrlGetTextRange" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetTextRange cobj__obj  (toCInt startPos)  (toCInt endPos)  
foreign import ccall "wxStyledTextCtrl_GetTextRange" wxStyledTextCtrl_GetTextRange :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO (Ptr (TWxString ()))

-- | usage: (@styledTextCtrlGetTwoPhaseDraw obj@).
styledTextCtrlGetTwoPhaseDraw :: StyledTextCtrl  a ->  IO Bool
styledTextCtrlGetTwoPhaseDraw _obj 
  = withBoolResult $
    withObjectRef "styledTextCtrlGetTwoPhaseDraw" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetTwoPhaseDraw cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetTwoPhaseDraw" wxStyledTextCtrl_GetTwoPhaseDraw :: Ptr (TStyledTextCtrl a) -> IO CBool

-- | usage: (@styledTextCtrlGetUndoCollection obj@).
styledTextCtrlGetUndoCollection :: StyledTextCtrl  a ->  IO Bool
styledTextCtrlGetUndoCollection _obj 
  = withBoolResult $
    withObjectRef "styledTextCtrlGetUndoCollection" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetUndoCollection cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetUndoCollection" wxStyledTextCtrl_GetUndoCollection :: Ptr (TStyledTextCtrl a) -> IO CBool

-- | usage: (@styledTextCtrlGetUseHorizontalScrollBar obj@).
styledTextCtrlGetUseHorizontalScrollBar :: StyledTextCtrl  a ->  IO Bool
styledTextCtrlGetUseHorizontalScrollBar _obj 
  = withBoolResult $
    withObjectRef "styledTextCtrlGetUseHorizontalScrollBar" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetUseHorizontalScrollBar cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetUseHorizontalScrollBar" wxStyledTextCtrl_GetUseHorizontalScrollBar :: Ptr (TStyledTextCtrl a) -> IO CBool

-- | usage: (@styledTextCtrlGetUseTabs obj@).
styledTextCtrlGetUseTabs :: StyledTextCtrl  a ->  IO Bool
styledTextCtrlGetUseTabs _obj 
  = withBoolResult $
    withObjectRef "styledTextCtrlGetUseTabs" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetUseTabs cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetUseTabs" wxStyledTextCtrl_GetUseTabs :: Ptr (TStyledTextCtrl a) -> IO CBool

-- | usage: (@styledTextCtrlGetUseVerticalScrollBar obj@).
styledTextCtrlGetUseVerticalScrollBar :: StyledTextCtrl  a ->  IO Bool
styledTextCtrlGetUseVerticalScrollBar _obj 
  = withBoolResult $
    withObjectRef "styledTextCtrlGetUseVerticalScrollBar" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetUseVerticalScrollBar cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetUseVerticalScrollBar" wxStyledTextCtrl_GetUseVerticalScrollBar :: Ptr (TStyledTextCtrl a) -> IO CBool

-- | usage: (@styledTextCtrlGetViewEOL obj@).
styledTextCtrlGetViewEOL :: StyledTextCtrl  a ->  IO Bool
styledTextCtrlGetViewEOL _obj 
  = withBoolResult $
    withObjectRef "styledTextCtrlGetViewEOL" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetViewEOL cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetViewEOL" wxStyledTextCtrl_GetViewEOL :: Ptr (TStyledTextCtrl a) -> IO CBool

-- | usage: (@styledTextCtrlGetViewWhiteSpace obj@).
styledTextCtrlGetViewWhiteSpace :: StyledTextCtrl  a ->  IO Int
styledTextCtrlGetViewWhiteSpace _obj 
  = withIntResult $
    withObjectRef "styledTextCtrlGetViewWhiteSpace" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetViewWhiteSpace cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetViewWhiteSpace" wxStyledTextCtrl_GetViewWhiteSpace :: Ptr (TStyledTextCtrl a) -> IO CInt

-- | usage: (@styledTextCtrlGetWrapMode obj@).
styledTextCtrlGetWrapMode :: StyledTextCtrl  a ->  IO Int
styledTextCtrlGetWrapMode _obj 
  = withIntResult $
    withObjectRef "styledTextCtrlGetWrapMode" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetWrapMode cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetWrapMode" wxStyledTextCtrl_GetWrapMode :: Ptr (TStyledTextCtrl a) -> IO CInt

-- | usage: (@styledTextCtrlGetXOffset obj@).
styledTextCtrlGetXOffset :: StyledTextCtrl  a ->  IO Int
styledTextCtrlGetXOffset _obj 
  = withIntResult $
    withObjectRef "styledTextCtrlGetXOffset" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetXOffset cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetXOffset" wxStyledTextCtrl_GetXOffset :: Ptr (TStyledTextCtrl a) -> IO CInt

-- | usage: (@styledTextCtrlGetZoom obj@).
styledTextCtrlGetZoom :: StyledTextCtrl  a ->  IO Int
styledTextCtrlGetZoom _obj 
  = withIntResult $
    withObjectRef "styledTextCtrlGetZoom" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GetZoom cobj__obj  
foreign import ccall "wxStyledTextCtrl_GetZoom" wxStyledTextCtrl_GetZoom :: Ptr (TStyledTextCtrl a) -> IO CInt

-- | usage: (@styledTextCtrlGotoLine obj line@).
styledTextCtrlGotoLine :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlGotoLine _obj line 
  = withObjectRef "styledTextCtrlGotoLine" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GotoLine cobj__obj  (toCInt line)  
foreign import ccall "wxStyledTextCtrl_GotoLine" wxStyledTextCtrl_GotoLine :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlGotoPos obj pos@).
styledTextCtrlGotoPos :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlGotoPos _obj pos 
  = withObjectRef "styledTextCtrlGotoPos" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_GotoPos cobj__obj  (toCInt pos)  
foreign import ccall "wxStyledTextCtrl_GotoPos" wxStyledTextCtrl_GotoPos :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlHideLines obj lineStart lineEnd@).
styledTextCtrlHideLines :: StyledTextCtrl  a -> Int -> Int ->  IO ()
styledTextCtrlHideLines _obj lineStart lineEnd 
  = withObjectRef "styledTextCtrlHideLines" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_HideLines cobj__obj  (toCInt lineStart)  (toCInt lineEnd)  
foreign import ccall "wxStyledTextCtrl_HideLines" wxStyledTextCtrl_HideLines :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()

-- | usage: (@styledTextCtrlHideSelection obj normal@).
styledTextCtrlHideSelection :: StyledTextCtrl  a -> Bool ->  IO ()
styledTextCtrlHideSelection _obj normal 
  = withObjectRef "styledTextCtrlHideSelection" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_HideSelection cobj__obj  (toCBool normal)  
foreign import ccall "wxStyledTextCtrl_HideSelection" wxStyledTextCtrl_HideSelection :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()

-- | usage: (@styledTextCtrlHomeDisplay obj@).
styledTextCtrlHomeDisplay :: StyledTextCtrl  a ->  IO ()
styledTextCtrlHomeDisplay _obj 
  = withObjectRef "styledTextCtrlHomeDisplay" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_HomeDisplay cobj__obj  
foreign import ccall "wxStyledTextCtrl_HomeDisplay" wxStyledTextCtrl_HomeDisplay :: Ptr (TStyledTextCtrl a) -> IO ()

-- | usage: (@styledTextCtrlHomeDisplayExtend obj@).
styledTextCtrlHomeDisplayExtend :: StyledTextCtrl  a ->  IO ()
styledTextCtrlHomeDisplayExtend _obj 
  = withObjectRef "styledTextCtrlHomeDisplayExtend" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_HomeDisplayExtend cobj__obj  
foreign import ccall "wxStyledTextCtrl_HomeDisplayExtend" wxStyledTextCtrl_HomeDisplayExtend :: Ptr (TStyledTextCtrl a) -> IO ()

-- | usage: (@styledTextCtrlIndicatorGetForeground obj indic@).
styledTextCtrlIndicatorGetForeground :: StyledTextCtrl  a -> Int ->  IO (Color)
styledTextCtrlIndicatorGetForeground _obj indic 
  = withManagedColourResult $
    withObjectRef "styledTextCtrlIndicatorGetForeground" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_IndicatorGetForeground cobj__obj  (toCInt indic)  
foreign import ccall "wxStyledTextCtrl_IndicatorGetForeground" wxStyledTextCtrl_IndicatorGetForeground :: Ptr (TStyledTextCtrl a) -> CInt -> IO (Ptr (TColour ()))

-- | usage: (@styledTextCtrlIndicatorGetStyle obj indic@).
styledTextCtrlIndicatorGetStyle :: StyledTextCtrl  a -> Int ->  IO Int
styledTextCtrlIndicatorGetStyle _obj indic 
  = withIntResult $
    withObjectRef "styledTextCtrlIndicatorGetStyle" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_IndicatorGetStyle cobj__obj  (toCInt indic)  
foreign import ccall "wxStyledTextCtrl_IndicatorGetStyle" wxStyledTextCtrl_IndicatorGetStyle :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt

-- | usage: (@styledTextCtrlIndicatorSetForeground obj indic forerforegforeb@).
styledTextCtrlIndicatorSetForeground :: StyledTextCtrl  a -> Int -> Color ->  IO ()
styledTextCtrlIndicatorSetForeground _obj indic forerforegforeb 
  = withObjectRef "styledTextCtrlIndicatorSetForeground" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_IndicatorSetForeground cobj__obj  (toCInt indic)  (colorRed forerforegforeb) (colorGreen forerforegforeb) (colorBlue forerforegforeb)  
foreign import ccall "wxStyledTextCtrl_IndicatorSetForeground" wxStyledTextCtrl_IndicatorSetForeground :: Ptr (TStyledTextCtrl a) -> CInt -> Word8 -> Word8 -> Word8 -> IO ()

-- | usage: (@styledTextCtrlIndicatorSetStyle obj indic style@).
styledTextCtrlIndicatorSetStyle :: StyledTextCtrl  a -> Int -> Int ->  IO ()
styledTextCtrlIndicatorSetStyle _obj indic style 
  = withObjectRef "styledTextCtrlIndicatorSetStyle" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_IndicatorSetStyle cobj__obj  (toCInt indic)  (toCInt style)  
foreign import ccall "wxStyledTextCtrl_IndicatorSetStyle" wxStyledTextCtrl_IndicatorSetStyle :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()

-- | usage: (@styledTextCtrlInsertText obj pos text@).
styledTextCtrlInsertText :: StyledTextCtrl  a -> Int -> String ->  IO ()
styledTextCtrlInsertText _obj pos text 
  = withObjectRef "styledTextCtrlInsertText" _obj $ \cobj__obj -> 
    withStringPtr text $ \cobj_text -> 
    wxStyledTextCtrl_InsertText cobj__obj  (toCInt pos)  cobj_text  
foreign import ccall "wxStyledTextCtrl_InsertText" wxStyledTextCtrl_InsertText :: Ptr (TStyledTextCtrl a) -> CInt -> Ptr (TWxString c) -> IO ()

-- | usage: (@styledTextCtrlLineCopy obj@).
styledTextCtrlLineCopy :: StyledTextCtrl  a ->  IO ()
styledTextCtrlLineCopy _obj 
  = withObjectRef "styledTextCtrlLineCopy" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_LineCopy cobj__obj  
foreign import ccall "wxStyledTextCtrl_LineCopy" wxStyledTextCtrl_LineCopy :: Ptr (TStyledTextCtrl a) -> IO ()

-- | usage: (@styledTextCtrlLineDuplicate obj@).
styledTextCtrlLineDuplicate :: StyledTextCtrl  a ->  IO ()
styledTextCtrlLineDuplicate _obj 
  = withObjectRef "styledTextCtrlLineDuplicate" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_LineDuplicate cobj__obj  
foreign import ccall "wxStyledTextCtrl_LineDuplicate" wxStyledTextCtrl_LineDuplicate :: Ptr (TStyledTextCtrl a) -> IO ()

-- | usage: (@styledTextCtrlLineEndDisplay obj@).
styledTextCtrlLineEndDisplay :: StyledTextCtrl  a ->  IO ()
styledTextCtrlLineEndDisplay _obj 
  = withObjectRef "styledTextCtrlLineEndDisplay" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_LineEndDisplay cobj__obj  
foreign import ccall "wxStyledTextCtrl_LineEndDisplay" wxStyledTextCtrl_LineEndDisplay :: Ptr (TStyledTextCtrl a) -> IO ()

-- | usage: (@styledTextCtrlLineEndDisplayExtend obj@).
styledTextCtrlLineEndDisplayExtend :: StyledTextCtrl  a ->  IO ()
styledTextCtrlLineEndDisplayExtend _obj 
  = withObjectRef "styledTextCtrlLineEndDisplayExtend" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_LineEndDisplayExtend cobj__obj  
foreign import ccall "wxStyledTextCtrl_LineEndDisplayExtend" wxStyledTextCtrl_LineEndDisplayExtend :: Ptr (TStyledTextCtrl a) -> IO ()

-- | usage: (@styledTextCtrlLineFromPosition obj pos@).
styledTextCtrlLineFromPosition :: StyledTextCtrl  a -> Int ->  IO Int
styledTextCtrlLineFromPosition _obj pos 
  = withIntResult $
    withObjectRef "styledTextCtrlLineFromPosition" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_LineFromPosition cobj__obj  (toCInt pos)  
foreign import ccall "wxStyledTextCtrl_LineFromPosition" wxStyledTextCtrl_LineFromPosition :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt

-- | usage: (@styledTextCtrlLineLength obj line@).
styledTextCtrlLineLength :: StyledTextCtrl  a -> Int ->  IO Int
styledTextCtrlLineLength _obj line 
  = withIntResult $
    withObjectRef "styledTextCtrlLineLength" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_LineLength cobj__obj  (toCInt line)  
foreign import ccall "wxStyledTextCtrl_LineLength" wxStyledTextCtrl_LineLength :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt

-- | usage: (@styledTextCtrlLineScroll obj columns lines@).
styledTextCtrlLineScroll :: StyledTextCtrl  a -> Int -> Int ->  IO ()
styledTextCtrlLineScroll _obj columns lines 
  = withObjectRef "styledTextCtrlLineScroll" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_LineScroll cobj__obj  (toCInt columns)  (toCInt lines)  
foreign import ccall "wxStyledTextCtrl_LineScroll" wxStyledTextCtrl_LineScroll :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()

-- | usage: (@styledTextCtrlLinesJoin obj@).
styledTextCtrlLinesJoin :: StyledTextCtrl  a ->  IO ()
styledTextCtrlLinesJoin _obj 
  = withObjectRef "styledTextCtrlLinesJoin" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_LinesJoin cobj__obj  
foreign import ccall "wxStyledTextCtrl_LinesJoin" wxStyledTextCtrl_LinesJoin :: Ptr (TStyledTextCtrl a) -> IO ()

-- | usage: (@styledTextCtrlLinesOnScreen obj@).
styledTextCtrlLinesOnScreen :: StyledTextCtrl  a ->  IO Int
styledTextCtrlLinesOnScreen _obj 
  = withIntResult $
    withObjectRef "styledTextCtrlLinesOnScreen" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_LinesOnScreen cobj__obj  
foreign import ccall "wxStyledTextCtrl_LinesOnScreen" wxStyledTextCtrl_LinesOnScreen :: Ptr (TStyledTextCtrl a) -> IO CInt

-- | usage: (@styledTextCtrlLinesSplit obj pixelWidth@).
styledTextCtrlLinesSplit :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlLinesSplit _obj pixelWidth 
  = withObjectRef "styledTextCtrlLinesSplit" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_LinesSplit cobj__obj  (toCInt pixelWidth)  
foreign import ccall "wxStyledTextCtrl_LinesSplit" wxStyledTextCtrl_LinesSplit :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlLoadFile obj filename@).
styledTextCtrlLoadFile :: StyledTextCtrl  a -> String ->  IO Bool
styledTextCtrlLoadFile _obj filename 
  = withBoolResult $
    withObjectRef "styledTextCtrlLoadFile" _obj $ \cobj__obj -> 
    withStringPtr filename $ \cobj_filename -> 
    wxStyledTextCtrl_LoadFile cobj__obj  cobj_filename  
foreign import ccall "wxStyledTextCtrl_LoadFile" wxStyledTextCtrl_LoadFile :: Ptr (TStyledTextCtrl a) -> Ptr (TWxString b) -> IO CBool

-- | usage: (@styledTextCtrlMarkerAdd obj line markerNumber@).
styledTextCtrlMarkerAdd :: StyledTextCtrl  a -> Int -> Int ->  IO Int
styledTextCtrlMarkerAdd _obj line markerNumber 
  = withIntResult $
    withObjectRef "styledTextCtrlMarkerAdd" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_MarkerAdd cobj__obj  (toCInt line)  (toCInt markerNumber)  
foreign import ccall "wxStyledTextCtrl_MarkerAdd" wxStyledTextCtrl_MarkerAdd :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO CInt

-- | usage: (@styledTextCtrlMarkerDefine obj markerNumber markerSymbol foregroundrforegroundgforegroundb backgroundrbackgroundgbackgroundb@).
styledTextCtrlMarkerDefine :: StyledTextCtrl  a -> Int -> Int -> Color -> Color ->  IO ()
styledTextCtrlMarkerDefine _obj markerNumber markerSymbol foregroundrforegroundgforegroundb backgroundrbackgroundgbackgroundb 
  = withObjectRef "styledTextCtrlMarkerDefine" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_MarkerDefine cobj__obj  (toCInt markerNumber)  (toCInt markerSymbol)  (colorRed foregroundrforegroundgforegroundb) (colorGreen foregroundrforegroundgforegroundb) (colorBlue foregroundrforegroundgforegroundb)  (colorRed backgroundrbackgroundgbackgroundb) (colorGreen backgroundrbackgroundgbackgroundb) (colorBlue backgroundrbackgroundgbackgroundb)  
foreign import ccall "wxStyledTextCtrl_MarkerDefine" wxStyledTextCtrl_MarkerDefine :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> Word8 -> Word8 -> Word8 -> Word8 -> Word8 -> Word8 -> IO ()

-- | usage: (@styledTextCtrlMarkerDefineBitmap obj markerNumber bmp@).
styledTextCtrlMarkerDefineBitmap :: StyledTextCtrl  a -> Int -> Bitmap  c ->  IO ()
styledTextCtrlMarkerDefineBitmap _obj markerNumber bmp 
  = withObjectRef "styledTextCtrlMarkerDefineBitmap" _obj $ \cobj__obj -> 
    withObjectPtr bmp $ \cobj_bmp -> 
    wxStyledTextCtrl_MarkerDefineBitmap cobj__obj  (toCInt markerNumber)  cobj_bmp  
foreign import ccall "wxStyledTextCtrl_MarkerDefineBitmap" wxStyledTextCtrl_MarkerDefineBitmap :: Ptr (TStyledTextCtrl a) -> CInt -> Ptr (TBitmap c) -> IO ()

-- | usage: (@styledTextCtrlMarkerDelete obj line markerNumber@).
styledTextCtrlMarkerDelete :: StyledTextCtrl  a -> Int -> Int ->  IO ()
styledTextCtrlMarkerDelete _obj line markerNumber 
  = withObjectRef "styledTextCtrlMarkerDelete" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_MarkerDelete cobj__obj  (toCInt line)  (toCInt markerNumber)  
foreign import ccall "wxStyledTextCtrl_MarkerDelete" wxStyledTextCtrl_MarkerDelete :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()

-- | usage: (@styledTextCtrlMarkerDeleteAll obj markerNumber@).
styledTextCtrlMarkerDeleteAll :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlMarkerDeleteAll _obj markerNumber 
  = withObjectRef "styledTextCtrlMarkerDeleteAll" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_MarkerDeleteAll cobj__obj  (toCInt markerNumber)  
foreign import ccall "wxStyledTextCtrl_MarkerDeleteAll" wxStyledTextCtrl_MarkerDeleteAll :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlMarkerDeleteHandle obj handle@).
styledTextCtrlMarkerDeleteHandle :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlMarkerDeleteHandle _obj handle 
  = withObjectRef "styledTextCtrlMarkerDeleteHandle" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_MarkerDeleteHandle cobj__obj  (toCInt handle)  
foreign import ccall "wxStyledTextCtrl_MarkerDeleteHandle" wxStyledTextCtrl_MarkerDeleteHandle :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlMarkerGet obj line@).
styledTextCtrlMarkerGet :: StyledTextCtrl  a -> Int ->  IO Int
styledTextCtrlMarkerGet _obj line 
  = withIntResult $
    withObjectRef "styledTextCtrlMarkerGet" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_MarkerGet cobj__obj  (toCInt line)  
foreign import ccall "wxStyledTextCtrl_MarkerGet" wxStyledTextCtrl_MarkerGet :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt

-- | usage: (@styledTextCtrlMarkerLineFromHandle obj handle@).
styledTextCtrlMarkerLineFromHandle :: StyledTextCtrl  a -> Int ->  IO Int
styledTextCtrlMarkerLineFromHandle _obj handle 
  = withIntResult $
    withObjectRef "styledTextCtrlMarkerLineFromHandle" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_MarkerLineFromHandle cobj__obj  (toCInt handle)  
foreign import ccall "wxStyledTextCtrl_MarkerLineFromHandle" wxStyledTextCtrl_MarkerLineFromHandle :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt

-- | usage: (@styledTextCtrlMarkerNext obj lineStart markerMask@).
styledTextCtrlMarkerNext :: StyledTextCtrl  a -> Int -> Int ->  IO Int
styledTextCtrlMarkerNext _obj lineStart markerMask 
  = withIntResult $
    withObjectRef "styledTextCtrlMarkerNext" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_MarkerNext cobj__obj  (toCInt lineStart)  (toCInt markerMask)  
foreign import ccall "wxStyledTextCtrl_MarkerNext" wxStyledTextCtrl_MarkerNext :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO CInt

-- | usage: (@styledTextCtrlMarkerPrevious obj lineStart markerMask@).
styledTextCtrlMarkerPrevious :: StyledTextCtrl  a -> Int -> Int ->  IO Int
styledTextCtrlMarkerPrevious _obj lineStart markerMask 
  = withIntResult $
    withObjectRef "styledTextCtrlMarkerPrevious" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_MarkerPrevious cobj__obj  (toCInt lineStart)  (toCInt markerMask)  
foreign import ccall "wxStyledTextCtrl_MarkerPrevious" wxStyledTextCtrl_MarkerPrevious :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO CInt

-- | usage: (@styledTextCtrlMarkerSetBackground obj markerNumber backrbackgbackb@).
styledTextCtrlMarkerSetBackground :: StyledTextCtrl  a -> Int -> Color ->  IO ()
styledTextCtrlMarkerSetBackground _obj markerNumber backrbackgbackb 
  = withObjectRef "styledTextCtrlMarkerSetBackground" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_MarkerSetBackground cobj__obj  (toCInt markerNumber)  (colorRed backrbackgbackb) (colorGreen backrbackgbackb) (colorBlue backrbackgbackb)  
foreign import ccall "wxStyledTextCtrl_MarkerSetBackground" wxStyledTextCtrl_MarkerSetBackground :: Ptr (TStyledTextCtrl a) -> CInt -> Word8 -> Word8 -> Word8 -> IO ()

-- | usage: (@styledTextCtrlMarkerSetForeground obj markerNumber forerforegforeb@).
styledTextCtrlMarkerSetForeground :: StyledTextCtrl  a -> Int -> Color ->  IO ()
styledTextCtrlMarkerSetForeground _obj markerNumber forerforegforeb 
  = withObjectRef "styledTextCtrlMarkerSetForeground" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_MarkerSetForeground cobj__obj  (toCInt markerNumber)  (colorRed forerforegforeb) (colorGreen forerforegforeb) (colorBlue forerforegforeb)  
foreign import ccall "wxStyledTextCtrl_MarkerSetForeground" wxStyledTextCtrl_MarkerSetForeground :: Ptr (TStyledTextCtrl a) -> CInt -> Word8 -> Word8 -> Word8 -> IO ()

-- | usage: (@styledTextCtrlMoveCaretInsideView obj@).
styledTextCtrlMoveCaretInsideView :: StyledTextCtrl  a ->  IO ()
styledTextCtrlMoveCaretInsideView _obj 
  = withObjectRef "styledTextCtrlMoveCaretInsideView" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_MoveCaretInsideView cobj__obj  
foreign import ccall "wxStyledTextCtrl_MoveCaretInsideView" wxStyledTextCtrl_MoveCaretInsideView :: Ptr (TStyledTextCtrl a) -> IO ()

-- | usage: (@styledTextCtrlPaste obj@).
styledTextCtrlPaste :: StyledTextCtrl  a ->  IO ()
styledTextCtrlPaste _obj 
  = withObjectRef "styledTextCtrlPaste" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_Paste cobj__obj  
foreign import ccall "wxStyledTextCtrl_Paste" wxStyledTextCtrl_Paste :: Ptr (TStyledTextCtrl a) -> IO ()

-- | usage: (@styledTextCtrlPointFromPosition obj@).
styledTextCtrlPointFromPosition :: StyledTextCtrl  a ->  IO (Point)
styledTextCtrlPointFromPosition _obj 
  = withWxPointResult $
    withObjectRef "styledTextCtrlPointFromPosition" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_PointFromPosition cobj__obj  
foreign import ccall "wxStyledTextCtrl_PointFromPosition" wxStyledTextCtrl_PointFromPosition :: Ptr (TStyledTextCtrl a) -> IO (Ptr (TWxPoint ()))

-- | usage: (@styledTextCtrlPositionAfter obj pos@).
styledTextCtrlPositionAfter :: StyledTextCtrl  a -> Int ->  IO Int
styledTextCtrlPositionAfter _obj pos 
  = withIntResult $
    withObjectRef "styledTextCtrlPositionAfter" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_PositionAfter cobj__obj  (toCInt pos)  
foreign import ccall "wxStyledTextCtrl_PositionAfter" wxStyledTextCtrl_PositionAfter :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt

-- | usage: (@styledTextCtrlPositionBefore obj pos@).
styledTextCtrlPositionBefore :: StyledTextCtrl  a -> Int ->  IO Int
styledTextCtrlPositionBefore _obj pos 
  = withIntResult $
    withObjectRef "styledTextCtrlPositionBefore" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_PositionBefore cobj__obj  (toCInt pos)  
foreign import ccall "wxStyledTextCtrl_PositionBefore" wxStyledTextCtrl_PositionBefore :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt

-- | usage: (@styledTextCtrlPositionFromLine obj line@).
styledTextCtrlPositionFromLine :: StyledTextCtrl  a -> Int ->  IO Int
styledTextCtrlPositionFromLine _obj line 
  = withIntResult $
    withObjectRef "styledTextCtrlPositionFromLine" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_PositionFromLine cobj__obj  (toCInt line)  
foreign import ccall "wxStyledTextCtrl_PositionFromLine" wxStyledTextCtrl_PositionFromLine :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt

-- | usage: (@styledTextCtrlPositionFromPoint obj ptxpty@).
styledTextCtrlPositionFromPoint :: StyledTextCtrl  a -> Point ->  IO Int
styledTextCtrlPositionFromPoint _obj ptxpty 
  = withIntResult $
    withObjectRef "styledTextCtrlPositionFromPoint" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_PositionFromPoint cobj__obj  (toCIntPointX ptxpty) (toCIntPointY ptxpty)  
foreign import ccall "wxStyledTextCtrl_PositionFromPoint" wxStyledTextCtrl_PositionFromPoint :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO CInt

-- | usage: (@styledTextCtrlPositionFromPointClose obj xy@).
styledTextCtrlPositionFromPointClose :: StyledTextCtrl  a -> Point ->  IO Int
styledTextCtrlPositionFromPointClose _obj xy 
  = withIntResult $
    withObjectRef "styledTextCtrlPositionFromPointClose" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_PositionFromPointClose cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
foreign import ccall "wxStyledTextCtrl_PositionFromPointClose" wxStyledTextCtrl_PositionFromPointClose :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO CInt

-- | usage: (@styledTextCtrlRedo obj@).
styledTextCtrlRedo :: StyledTextCtrl  a ->  IO ()
styledTextCtrlRedo _obj 
  = withObjectRef "styledTextCtrlRedo" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_Redo cobj__obj  
foreign import ccall "wxStyledTextCtrl_Redo" wxStyledTextCtrl_Redo :: Ptr (TStyledTextCtrl a) -> IO ()

-- | usage: (@styledTextCtrlRegisterImage obj wxtype bmp@).
styledTextCtrlRegisterImage :: StyledTextCtrl  a -> Int -> Bitmap  c ->  IO ()
styledTextCtrlRegisterImage _obj wxtype bmp 
  = withObjectRef "styledTextCtrlRegisterImage" _obj $ \cobj__obj -> 
    withObjectPtr bmp $ \cobj_bmp -> 
    wxStyledTextCtrl_RegisterImage cobj__obj  (toCInt wxtype)  cobj_bmp  
foreign import ccall "wxStyledTextCtrl_RegisterImage" wxStyledTextCtrl_RegisterImage :: Ptr (TStyledTextCtrl a) -> CInt -> Ptr (TBitmap c) -> IO ()

-- | usage: (@styledTextCtrlReleaseDocument obj docPointer@).
styledTextCtrlReleaseDocument :: StyledTextCtrl  a -> STCDoc  b ->  IO ()
styledTextCtrlReleaseDocument _obj docPointer 
  = withObjectRef "styledTextCtrlReleaseDocument" _obj $ \cobj__obj -> 
    withObjectPtr docPointer $ \cobj_docPointer -> 
    wxStyledTextCtrl_ReleaseDocument cobj__obj  cobj_docPointer  
foreign import ccall "wxStyledTextCtrl_ReleaseDocument" wxStyledTextCtrl_ReleaseDocument :: Ptr (TStyledTextCtrl a) -> Ptr (TSTCDoc b) -> IO ()

-- | usage: (@styledTextCtrlReplaceSelection obj text@).
styledTextCtrlReplaceSelection :: StyledTextCtrl  a -> String ->  IO ()
styledTextCtrlReplaceSelection _obj text 
  = withObjectRef "styledTextCtrlReplaceSelection" _obj $ \cobj__obj -> 
    withStringPtr text $ \cobj_text -> 
    wxStyledTextCtrl_ReplaceSelection cobj__obj  cobj_text  
foreign import ccall "wxStyledTextCtrl_ReplaceSelection" wxStyledTextCtrl_ReplaceSelection :: Ptr (TStyledTextCtrl a) -> Ptr (TWxString b) -> IO ()

-- | usage: (@styledTextCtrlReplaceTarget obj text@).
styledTextCtrlReplaceTarget :: StyledTextCtrl  a -> String ->  IO Int
styledTextCtrlReplaceTarget _obj text 
  = withIntResult $
    withObjectRef "styledTextCtrlReplaceTarget" _obj $ \cobj__obj -> 
    withStringPtr text $ \cobj_text -> 
    wxStyledTextCtrl_ReplaceTarget cobj__obj  cobj_text  
foreign import ccall "wxStyledTextCtrl_ReplaceTarget" wxStyledTextCtrl_ReplaceTarget :: Ptr (TStyledTextCtrl a) -> Ptr (TWxString b) -> IO CInt

-- | usage: (@styledTextCtrlReplaceTargetRE obj text@).
styledTextCtrlReplaceTargetRE :: StyledTextCtrl  a -> String ->  IO Int
styledTextCtrlReplaceTargetRE _obj text 
  = withIntResult $
    withObjectRef "styledTextCtrlReplaceTargetRE" _obj $ \cobj__obj -> 
    withStringPtr text $ \cobj_text -> 
    wxStyledTextCtrl_ReplaceTargetRE cobj__obj  cobj_text  
foreign import ccall "wxStyledTextCtrl_ReplaceTargetRE" wxStyledTextCtrl_ReplaceTargetRE :: Ptr (TStyledTextCtrl a) -> Ptr (TWxString b) -> IO CInt

-- | usage: (@styledTextCtrlSaveFile obj filename@).
styledTextCtrlSaveFile :: StyledTextCtrl  a -> String ->  IO Bool
styledTextCtrlSaveFile _obj filename 
  = withBoolResult $
    withObjectRef "styledTextCtrlSaveFile" _obj $ \cobj__obj -> 
    withStringPtr filename $ \cobj_filename -> 
    wxStyledTextCtrl_SaveFile cobj__obj  cobj_filename  
foreign import ccall "wxStyledTextCtrl_SaveFile" wxStyledTextCtrl_SaveFile :: Ptr (TStyledTextCtrl a) -> Ptr (TWxString b) -> IO CBool

-- | usage: (@styledTextCtrlScrollToColumn obj column@).
styledTextCtrlScrollToColumn :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlScrollToColumn _obj column 
  = withObjectRef "styledTextCtrlScrollToColumn" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_ScrollToColumn cobj__obj  (toCInt column)  
foreign import ccall "wxStyledTextCtrl_ScrollToColumn" wxStyledTextCtrl_ScrollToColumn :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlScrollToLine obj line@).
styledTextCtrlScrollToLine :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlScrollToLine _obj line 
  = withObjectRef "styledTextCtrlScrollToLine" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_ScrollToLine cobj__obj  (toCInt line)  
foreign import ccall "wxStyledTextCtrl_ScrollToLine" wxStyledTextCtrl_ScrollToLine :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlSearchAnchor obj@).
styledTextCtrlSearchAnchor :: StyledTextCtrl  a ->  IO ()
styledTextCtrlSearchAnchor _obj 
  = withObjectRef "styledTextCtrlSearchAnchor" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SearchAnchor cobj__obj  
foreign import ccall "wxStyledTextCtrl_SearchAnchor" wxStyledTextCtrl_SearchAnchor :: Ptr (TStyledTextCtrl a) -> IO ()

-- | usage: (@styledTextCtrlSearchInTarget obj text@).
styledTextCtrlSearchInTarget :: StyledTextCtrl  a -> String ->  IO Int
styledTextCtrlSearchInTarget _obj text 
  = withIntResult $
    withObjectRef "styledTextCtrlSearchInTarget" _obj $ \cobj__obj -> 
    withStringPtr text $ \cobj_text -> 
    wxStyledTextCtrl_SearchInTarget cobj__obj  cobj_text  
foreign import ccall "wxStyledTextCtrl_SearchInTarget" wxStyledTextCtrl_SearchInTarget :: Ptr (TStyledTextCtrl a) -> Ptr (TWxString b) -> IO CInt

-- | usage: (@styledTextCtrlSearchNext obj flags text@).
styledTextCtrlSearchNext :: StyledTextCtrl  a -> Int -> String ->  IO Int
styledTextCtrlSearchNext _obj flags text 
  = withIntResult $
    withObjectRef "styledTextCtrlSearchNext" _obj $ \cobj__obj -> 
    withStringPtr text $ \cobj_text -> 
    wxStyledTextCtrl_SearchNext cobj__obj  (toCInt flags)  cobj_text  
foreign import ccall "wxStyledTextCtrl_SearchNext" wxStyledTextCtrl_SearchNext :: Ptr (TStyledTextCtrl a) -> CInt -> Ptr (TWxString c) -> IO CInt

-- | usage: (@styledTextCtrlSearchPrev obj flags text@).
styledTextCtrlSearchPrev :: StyledTextCtrl  a -> Int -> String ->  IO Int
styledTextCtrlSearchPrev _obj flags text 
  = withIntResult $
    withObjectRef "styledTextCtrlSearchPrev" _obj $ \cobj__obj -> 
    withStringPtr text $ \cobj_text -> 
    wxStyledTextCtrl_SearchPrev cobj__obj  (toCInt flags)  cobj_text  
foreign import ccall "wxStyledTextCtrl_SearchPrev" wxStyledTextCtrl_SearchPrev :: Ptr (TStyledTextCtrl a) -> CInt -> Ptr (TWxString c) -> IO CInt

-- | usage: (@styledTextCtrlSelectAll obj@).
styledTextCtrlSelectAll :: StyledTextCtrl  a ->  IO ()
styledTextCtrlSelectAll _obj 
  = withObjectRef "styledTextCtrlSelectAll" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SelectAll cobj__obj  
foreign import ccall "wxStyledTextCtrl_SelectAll" wxStyledTextCtrl_SelectAll :: Ptr (TStyledTextCtrl a) -> IO ()

-- | usage: (@styledTextCtrlSelectionIsRectangle obj@).
styledTextCtrlSelectionIsRectangle :: StyledTextCtrl  a ->  IO Bool
styledTextCtrlSelectionIsRectangle _obj 
  = withBoolResult $
    withObjectRef "styledTextCtrlSelectionIsRectangle" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SelectionIsRectangle cobj__obj  
foreign import ccall "wxStyledTextCtrl_SelectionIsRectangle" wxStyledTextCtrl_SelectionIsRectangle :: Ptr (TStyledTextCtrl a) -> IO CBool

-- | usage: (@styledTextCtrlSetAnchor obj posAnchor@).
styledTextCtrlSetAnchor :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlSetAnchor _obj posAnchor 
  = withObjectRef "styledTextCtrlSetAnchor" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetAnchor cobj__obj  (toCInt posAnchor)  
foreign import ccall "wxStyledTextCtrl_SetAnchor" wxStyledTextCtrl_SetAnchor :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlSetBackSpaceUnIndents obj bsUnIndents@).
styledTextCtrlSetBackSpaceUnIndents :: StyledTextCtrl  a -> Bool ->  IO ()
styledTextCtrlSetBackSpaceUnIndents _obj bsUnIndents 
  = withObjectRef "styledTextCtrlSetBackSpaceUnIndents" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetBackSpaceUnIndents cobj__obj  (toCBool bsUnIndents)  
foreign import ccall "wxStyledTextCtrl_SetBackSpaceUnIndents" wxStyledTextCtrl_SetBackSpaceUnIndents :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()

-- | usage: (@styledTextCtrlSetBufferedDraw obj buffered@).
styledTextCtrlSetBufferedDraw :: StyledTextCtrl  a -> Bool ->  IO ()
styledTextCtrlSetBufferedDraw _obj buffered 
  = withObjectRef "styledTextCtrlSetBufferedDraw" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetBufferedDraw cobj__obj  (toCBool buffered)  
foreign import ccall "wxStyledTextCtrl_SetBufferedDraw" wxStyledTextCtrl_SetBufferedDraw :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()

-- | usage: (@styledTextCtrlSetCaretForeground obj forerforegforeb@).
styledTextCtrlSetCaretForeground :: StyledTextCtrl  a -> Color ->  IO ()
styledTextCtrlSetCaretForeground _obj forerforegforeb 
  = withObjectRef "styledTextCtrlSetCaretForeground" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetCaretForeground cobj__obj  (colorRed forerforegforeb) (colorGreen forerforegforeb) (colorBlue forerforegforeb)  
foreign import ccall "wxStyledTextCtrl_SetCaretForeground" wxStyledTextCtrl_SetCaretForeground :: Ptr (TStyledTextCtrl a) -> Word8 -> Word8 -> Word8 -> IO ()

-- | usage: (@styledTextCtrlSetCaretLineBackground obj backrbackgbackb@).
styledTextCtrlSetCaretLineBackground :: StyledTextCtrl  a -> Color ->  IO ()
styledTextCtrlSetCaretLineBackground _obj backrbackgbackb 
  = withObjectRef "styledTextCtrlSetCaretLineBackground" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetCaretLineBackground cobj__obj  (colorRed backrbackgbackb) (colorGreen backrbackgbackb) (colorBlue backrbackgbackb)  
foreign import ccall "wxStyledTextCtrl_SetCaretLineBackground" wxStyledTextCtrl_SetCaretLineBackground :: Ptr (TStyledTextCtrl a) -> Word8 -> Word8 -> Word8 -> IO ()

-- | usage: (@styledTextCtrlSetCaretLineVisible obj show@).
styledTextCtrlSetCaretLineVisible :: StyledTextCtrl  a -> Bool ->  IO ()
styledTextCtrlSetCaretLineVisible _obj show 
  = withObjectRef "styledTextCtrlSetCaretLineVisible" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetCaretLineVisible cobj__obj  (toCBool show)  
foreign import ccall "wxStyledTextCtrl_SetCaretLineVisible" wxStyledTextCtrl_SetCaretLineVisible :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()

-- | usage: (@styledTextCtrlSetCaretPeriod obj periodMilliseconds@).
styledTextCtrlSetCaretPeriod :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlSetCaretPeriod _obj periodMilliseconds 
  = withObjectRef "styledTextCtrlSetCaretPeriod" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetCaretPeriod cobj__obj  (toCInt periodMilliseconds)  
foreign import ccall "wxStyledTextCtrl_SetCaretPeriod" wxStyledTextCtrl_SetCaretPeriod :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlSetCaretWidth obj pixelWidth@).
styledTextCtrlSetCaretWidth :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlSetCaretWidth _obj pixelWidth 
  = withObjectRef "styledTextCtrlSetCaretWidth" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetCaretWidth cobj__obj  (toCInt pixelWidth)  
foreign import ccall "wxStyledTextCtrl_SetCaretWidth" wxStyledTextCtrl_SetCaretWidth :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlSetCodePage obj codePage@).
styledTextCtrlSetCodePage :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlSetCodePage _obj codePage 
  = withObjectRef "styledTextCtrlSetCodePage" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetCodePage cobj__obj  (toCInt codePage)  
foreign import ccall "wxStyledTextCtrl_SetCodePage" wxStyledTextCtrl_SetCodePage :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlSetControlCharSymbol obj symbol@).
styledTextCtrlSetControlCharSymbol :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlSetControlCharSymbol _obj symbol 
  = withObjectRef "styledTextCtrlSetControlCharSymbol" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetControlCharSymbol cobj__obj  (toCInt symbol)  
foreign import ccall "wxStyledTextCtrl_SetControlCharSymbol" wxStyledTextCtrl_SetControlCharSymbol :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlSetCurrentPos obj pos@).
styledTextCtrlSetCurrentPos :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlSetCurrentPos _obj pos 
  = withObjectRef "styledTextCtrlSetCurrentPos" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetCurrentPos cobj__obj  (toCInt pos)  
foreign import ccall "wxStyledTextCtrl_SetCurrentPos" wxStyledTextCtrl_SetCurrentPos :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlSetDocPointer obj docPointer@).
styledTextCtrlSetDocPointer :: StyledTextCtrl  a -> STCDoc  b ->  IO ()
styledTextCtrlSetDocPointer _obj docPointer 
  = withObjectRef "styledTextCtrlSetDocPointer" _obj $ \cobj__obj -> 
    withObjectPtr docPointer $ \cobj_docPointer -> 
    wxStyledTextCtrl_SetDocPointer cobj__obj  cobj_docPointer  
foreign import ccall "wxStyledTextCtrl_SetDocPointer" wxStyledTextCtrl_SetDocPointer :: Ptr (TStyledTextCtrl a) -> Ptr (TSTCDoc b) -> IO ()

-- | usage: (@styledTextCtrlSetEOLMode obj eolMode@).
styledTextCtrlSetEOLMode :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlSetEOLMode _obj eolMode 
  = withObjectRef "styledTextCtrlSetEOLMode" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetEOLMode cobj__obj  (toCInt eolMode)  
foreign import ccall "wxStyledTextCtrl_SetEOLMode" wxStyledTextCtrl_SetEOLMode :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlSetEdgeColour obj edgeColourredgeColourgedgeColourb@).
styledTextCtrlSetEdgeColour :: StyledTextCtrl  a -> Color ->  IO ()
styledTextCtrlSetEdgeColour _obj edgeColourredgeColourgedgeColourb 
  = withObjectRef "styledTextCtrlSetEdgeColour" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetEdgeColour cobj__obj  (colorRed edgeColourredgeColourgedgeColourb) (colorGreen edgeColourredgeColourgedgeColourb) (colorBlue edgeColourredgeColourgedgeColourb)  
foreign import ccall "wxStyledTextCtrl_SetEdgeColour" wxStyledTextCtrl_SetEdgeColour :: Ptr (TStyledTextCtrl a) -> Word8 -> Word8 -> Word8 -> IO ()

-- | usage: (@styledTextCtrlSetEdgeColumn obj column@).
styledTextCtrlSetEdgeColumn :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlSetEdgeColumn _obj column 
  = withObjectRef "styledTextCtrlSetEdgeColumn" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetEdgeColumn cobj__obj  (toCInt column)  
foreign import ccall "wxStyledTextCtrl_SetEdgeColumn" wxStyledTextCtrl_SetEdgeColumn :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlSetEdgeMode obj mode@).
styledTextCtrlSetEdgeMode :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlSetEdgeMode _obj mode 
  = withObjectRef "styledTextCtrlSetEdgeMode" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetEdgeMode cobj__obj  (toCInt mode)  
foreign import ccall "wxStyledTextCtrl_SetEdgeMode" wxStyledTextCtrl_SetEdgeMode :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlSetEndAtLastLine obj endAtLastLine@).
styledTextCtrlSetEndAtLastLine :: StyledTextCtrl  a -> Bool ->  IO ()
styledTextCtrlSetEndAtLastLine _obj endAtLastLine 
  = withObjectRef "styledTextCtrlSetEndAtLastLine" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetEndAtLastLine cobj__obj  (toCBool endAtLastLine)  
foreign import ccall "wxStyledTextCtrl_SetEndAtLastLine" wxStyledTextCtrl_SetEndAtLastLine :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()

-- | usage: (@styledTextCtrlSetFoldExpanded obj line expanded@).
styledTextCtrlSetFoldExpanded :: StyledTextCtrl  a -> Int -> Bool ->  IO ()
styledTextCtrlSetFoldExpanded _obj line expanded 
  = withObjectRef "styledTextCtrlSetFoldExpanded" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetFoldExpanded cobj__obj  (toCInt line)  (toCBool expanded)  
foreign import ccall "wxStyledTextCtrl_SetFoldExpanded" wxStyledTextCtrl_SetFoldExpanded :: Ptr (TStyledTextCtrl a) -> CInt -> CBool -> IO ()

-- | usage: (@styledTextCtrlSetFoldFlags obj flags@).
styledTextCtrlSetFoldFlags :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlSetFoldFlags _obj flags 
  = withObjectRef "styledTextCtrlSetFoldFlags" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetFoldFlags cobj__obj  (toCInt flags)  
foreign import ccall "wxStyledTextCtrl_SetFoldFlags" wxStyledTextCtrl_SetFoldFlags :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlSetFoldLevel obj line level@).
styledTextCtrlSetFoldLevel :: StyledTextCtrl  a -> Int -> Int ->  IO ()
styledTextCtrlSetFoldLevel _obj line level 
  = withObjectRef "styledTextCtrlSetFoldLevel" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetFoldLevel cobj__obj  (toCInt line)  (toCInt level)  
foreign import ccall "wxStyledTextCtrl_SetFoldLevel" wxStyledTextCtrl_SetFoldLevel :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()

-- | usage: (@styledTextCtrlSetFoldMarginColour obj useSetting backrbackgbackb@).
styledTextCtrlSetFoldMarginColour :: StyledTextCtrl  a -> Bool -> Color ->  IO ()
styledTextCtrlSetFoldMarginColour _obj useSetting backrbackgbackb 
  = withObjectRef "styledTextCtrlSetFoldMarginColour" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetFoldMarginColour cobj__obj  (toCBool useSetting)  (colorRed backrbackgbackb) (colorGreen backrbackgbackb) (colorBlue backrbackgbackb)  
foreign import ccall "wxStyledTextCtrl_SetFoldMarginColour" wxStyledTextCtrl_SetFoldMarginColour :: Ptr (TStyledTextCtrl a) -> CBool -> Word8 -> Word8 -> Word8 -> IO ()

-- | usage: (@styledTextCtrlSetFoldMarginHiColour obj useSetting forerforegforeb@).
styledTextCtrlSetFoldMarginHiColour :: StyledTextCtrl  a -> Bool -> Color ->  IO ()
styledTextCtrlSetFoldMarginHiColour _obj useSetting forerforegforeb 
  = withObjectRef "styledTextCtrlSetFoldMarginHiColour" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetFoldMarginHiColour cobj__obj  (toCBool useSetting)  (colorRed forerforegforeb) (colorGreen forerforegforeb) (colorBlue forerforegforeb)  
foreign import ccall "wxStyledTextCtrl_SetFoldMarginHiColour" wxStyledTextCtrl_SetFoldMarginHiColour :: Ptr (TStyledTextCtrl a) -> CBool -> Word8 -> Word8 -> Word8 -> IO ()

-- | usage: (@styledTextCtrlSetHScrollBar obj bar@).
styledTextCtrlSetHScrollBar :: StyledTextCtrl  a -> ScrollBar  b ->  IO ()
styledTextCtrlSetHScrollBar _obj bar 
  = withObjectRef "styledTextCtrlSetHScrollBar" _obj $ \cobj__obj -> 
    withObjectPtr bar $ \cobj_bar -> 
    wxStyledTextCtrl_SetHScrollBar cobj__obj  cobj_bar  
foreign import ccall "wxStyledTextCtrl_SetHScrollBar" wxStyledTextCtrl_SetHScrollBar :: Ptr (TStyledTextCtrl a) -> Ptr (TScrollBar b) -> IO ()

-- | usage: (@styledTextCtrlSetHighlightGuide obj column@).
styledTextCtrlSetHighlightGuide :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlSetHighlightGuide _obj column 
  = withObjectRef "styledTextCtrlSetHighlightGuide" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetHighlightGuide cobj__obj  (toCInt column)  
foreign import ccall "wxStyledTextCtrl_SetHighlightGuide" wxStyledTextCtrl_SetHighlightGuide :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlSetHotspotActiveBackground obj useSetting backrbackgbackb@).
styledTextCtrlSetHotspotActiveBackground :: StyledTextCtrl  a -> Bool -> Color ->  IO ()
styledTextCtrlSetHotspotActiveBackground _obj useSetting backrbackgbackb 
  = withObjectRef "styledTextCtrlSetHotspotActiveBackground" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetHotspotActiveBackground cobj__obj  (toCBool useSetting)  (colorRed backrbackgbackb) (colorGreen backrbackgbackb) (colorBlue backrbackgbackb)  
foreign import ccall "wxStyledTextCtrl_SetHotspotActiveBackground" wxStyledTextCtrl_SetHotspotActiveBackground :: Ptr (TStyledTextCtrl a) -> CBool -> Word8 -> Word8 -> Word8 -> IO ()

-- | usage: (@styledTextCtrlSetHotspotActiveForeground obj useSetting forerforegforeb@).
styledTextCtrlSetHotspotActiveForeground :: StyledTextCtrl  a -> Bool -> Color ->  IO ()
styledTextCtrlSetHotspotActiveForeground _obj useSetting forerforegforeb 
  = withObjectRef "styledTextCtrlSetHotspotActiveForeground" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetHotspotActiveForeground cobj__obj  (toCBool useSetting)  (colorRed forerforegforeb) (colorGreen forerforegforeb) (colorBlue forerforegforeb)  
foreign import ccall "wxStyledTextCtrl_SetHotspotActiveForeground" wxStyledTextCtrl_SetHotspotActiveForeground :: Ptr (TStyledTextCtrl a) -> CBool -> Word8 -> Word8 -> Word8 -> IO ()

-- | usage: (@styledTextCtrlSetHotspotActiveUnderline obj underline@).
styledTextCtrlSetHotspotActiveUnderline :: StyledTextCtrl  a -> Bool ->  IO ()
styledTextCtrlSetHotspotActiveUnderline _obj underline 
  = withObjectRef "styledTextCtrlSetHotspotActiveUnderline" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetHotspotActiveUnderline cobj__obj  (toCBool underline)  
foreign import ccall "wxStyledTextCtrl_SetHotspotActiveUnderline" wxStyledTextCtrl_SetHotspotActiveUnderline :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()

-- | usage: (@styledTextCtrlSetIndent obj indentSize@).
styledTextCtrlSetIndent :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlSetIndent _obj indentSize 
  = withObjectRef "styledTextCtrlSetIndent" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetIndent cobj__obj  (toCInt indentSize)  
foreign import ccall "wxStyledTextCtrl_SetIndent" wxStyledTextCtrl_SetIndent :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlSetIndentationGuides obj show@).
styledTextCtrlSetIndentationGuides :: StyledTextCtrl  a -> Bool ->  IO ()
styledTextCtrlSetIndentationGuides _obj show 
  = withObjectRef "styledTextCtrlSetIndentationGuides" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetIndentationGuides cobj__obj  (toCBool show)  
foreign import ccall "wxStyledTextCtrl_SetIndentationGuides" wxStyledTextCtrl_SetIndentationGuides :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()

-- | usage: (@styledTextCtrlSetKeyWords obj keywordSet keyWords@).
styledTextCtrlSetKeyWords :: StyledTextCtrl  a -> Int -> String ->  IO ()
styledTextCtrlSetKeyWords _obj keywordSet keyWords 
  = withObjectRef "styledTextCtrlSetKeyWords" _obj $ \cobj__obj -> 
    withStringPtr keyWords $ \cobj_keyWords -> 
    wxStyledTextCtrl_SetKeyWords cobj__obj  (toCInt keywordSet)  cobj_keyWords  
foreign import ccall "wxStyledTextCtrl_SetKeyWords" wxStyledTextCtrl_SetKeyWords :: Ptr (TStyledTextCtrl a) -> CInt -> Ptr (TWxString c) -> IO ()

-- | usage: (@styledTextCtrlSetLastKeydownProcessed obj val@).
styledTextCtrlSetLastKeydownProcessed :: StyledTextCtrl  a -> Bool ->  IO ()
styledTextCtrlSetLastKeydownProcessed _obj val 
  = withObjectRef "styledTextCtrlSetLastKeydownProcessed" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetLastKeydownProcessed cobj__obj  (toCBool val)  
foreign import ccall "wxStyledTextCtrl_SetLastKeydownProcessed" wxStyledTextCtrl_SetLastKeydownProcessed :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()

-- | usage: (@styledTextCtrlSetLayoutCache obj mode@).
styledTextCtrlSetLayoutCache :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlSetLayoutCache _obj mode 
  = withObjectRef "styledTextCtrlSetLayoutCache" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetLayoutCache cobj__obj  (toCInt mode)  
foreign import ccall "wxStyledTextCtrl_SetLayoutCache" wxStyledTextCtrl_SetLayoutCache :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlSetLexer obj lexer@).
styledTextCtrlSetLexer :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlSetLexer _obj lexer 
  = withObjectRef "styledTextCtrlSetLexer" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetLexer cobj__obj  (toCInt lexer)  
foreign import ccall "wxStyledTextCtrl_SetLexer" wxStyledTextCtrl_SetLexer :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlSetLexerLanguage obj language@).
styledTextCtrlSetLexerLanguage :: StyledTextCtrl  a -> String ->  IO ()
styledTextCtrlSetLexerLanguage _obj language 
  = withObjectRef "styledTextCtrlSetLexerLanguage" _obj $ \cobj__obj -> 
    withStringPtr language $ \cobj_language -> 
    wxStyledTextCtrl_SetLexerLanguage cobj__obj  cobj_language  
foreign import ccall "wxStyledTextCtrl_SetLexerLanguage" wxStyledTextCtrl_SetLexerLanguage :: Ptr (TStyledTextCtrl a) -> Ptr (TWxString b) -> IO ()

-- | usage: (@styledTextCtrlSetLineIndentation obj line indentSize@).
styledTextCtrlSetLineIndentation :: StyledTextCtrl  a -> Int -> Int ->  IO ()
styledTextCtrlSetLineIndentation _obj line indentSize 
  = withObjectRef "styledTextCtrlSetLineIndentation" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetLineIndentation cobj__obj  (toCInt line)  (toCInt indentSize)  
foreign import ccall "wxStyledTextCtrl_SetLineIndentation" wxStyledTextCtrl_SetLineIndentation :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()

-- | usage: (@styledTextCtrlSetLineState obj line state@).
styledTextCtrlSetLineState :: StyledTextCtrl  a -> Int -> Int ->  IO ()
styledTextCtrlSetLineState _obj line state 
  = withObjectRef "styledTextCtrlSetLineState" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetLineState cobj__obj  (toCInt line)  (toCInt state)  
foreign import ccall "wxStyledTextCtrl_SetLineState" wxStyledTextCtrl_SetLineState :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()

-- | usage: (@styledTextCtrlSetMarginLeft obj pixelWidth@).
styledTextCtrlSetMarginLeft :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlSetMarginLeft _obj pixelWidth 
  = withObjectRef "styledTextCtrlSetMarginLeft" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetMarginLeft cobj__obj  (toCInt pixelWidth)  
foreign import ccall "wxStyledTextCtrl_SetMarginLeft" wxStyledTextCtrl_SetMarginLeft :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlSetMarginMask obj margin mask@).
styledTextCtrlSetMarginMask :: StyledTextCtrl  a -> Int -> Int ->  IO ()
styledTextCtrlSetMarginMask _obj margin mask 
  = withObjectRef "styledTextCtrlSetMarginMask" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetMarginMask cobj__obj  (toCInt margin)  (toCInt mask)  
foreign import ccall "wxStyledTextCtrl_SetMarginMask" wxStyledTextCtrl_SetMarginMask :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()

-- | usage: (@styledTextCtrlSetMarginRight obj pixelWidth@).
styledTextCtrlSetMarginRight :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlSetMarginRight _obj pixelWidth 
  = withObjectRef "styledTextCtrlSetMarginRight" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetMarginRight cobj__obj  (toCInt pixelWidth)  
foreign import ccall "wxStyledTextCtrl_SetMarginRight" wxStyledTextCtrl_SetMarginRight :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlSetMarginSensitive obj margin sensitive@).
styledTextCtrlSetMarginSensitive :: StyledTextCtrl  a -> Int -> Bool ->  IO ()
styledTextCtrlSetMarginSensitive _obj margin sensitive 
  = withObjectRef "styledTextCtrlSetMarginSensitive" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetMarginSensitive cobj__obj  (toCInt margin)  (toCBool sensitive)  
foreign import ccall "wxStyledTextCtrl_SetMarginSensitive" wxStyledTextCtrl_SetMarginSensitive :: Ptr (TStyledTextCtrl a) -> CInt -> CBool -> IO ()

-- | usage: (@styledTextCtrlSetMarginType obj margin marginType@).
styledTextCtrlSetMarginType :: StyledTextCtrl  a -> Int -> Int ->  IO ()
styledTextCtrlSetMarginType _obj margin marginType 
  = withObjectRef "styledTextCtrlSetMarginType" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetMarginType cobj__obj  (toCInt margin)  (toCInt marginType)  
foreign import ccall "wxStyledTextCtrl_SetMarginType" wxStyledTextCtrl_SetMarginType :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()

-- | usage: (@styledTextCtrlSetMarginWidth obj margin pixelWidth@).
styledTextCtrlSetMarginWidth :: StyledTextCtrl  a -> Int -> Int ->  IO ()
styledTextCtrlSetMarginWidth _obj margin pixelWidth 
  = withObjectRef "styledTextCtrlSetMarginWidth" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetMarginWidth cobj__obj  (toCInt margin)  (toCInt pixelWidth)  
foreign import ccall "wxStyledTextCtrl_SetMarginWidth" wxStyledTextCtrl_SetMarginWidth :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()

-- | usage: (@styledTextCtrlSetMargins obj left right@).
styledTextCtrlSetMargins :: StyledTextCtrl  a -> Int -> Int ->  IO ()
styledTextCtrlSetMargins _obj left right 
  = withObjectRef "styledTextCtrlSetMargins" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetMargins cobj__obj  (toCInt left)  (toCInt right)  
foreign import ccall "wxStyledTextCtrl_SetMargins" wxStyledTextCtrl_SetMargins :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()

-- | usage: (@styledTextCtrlSetModEventMask obj mask@).
styledTextCtrlSetModEventMask :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlSetModEventMask _obj mask 
  = withObjectRef "styledTextCtrlSetModEventMask" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetModEventMask cobj__obj  (toCInt mask)  
foreign import ccall "wxStyledTextCtrl_SetModEventMask" wxStyledTextCtrl_SetModEventMask :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlSetMouseDownCaptures obj captures@).
styledTextCtrlSetMouseDownCaptures :: StyledTextCtrl  a -> Bool ->  IO ()
styledTextCtrlSetMouseDownCaptures _obj captures 
  = withObjectRef "styledTextCtrlSetMouseDownCaptures" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetMouseDownCaptures cobj__obj  (toCBool captures)  
foreign import ccall "wxStyledTextCtrl_SetMouseDownCaptures" wxStyledTextCtrl_SetMouseDownCaptures :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()

-- | usage: (@styledTextCtrlSetMouseDwellTime obj periodMilliseconds@).
styledTextCtrlSetMouseDwellTime :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlSetMouseDwellTime _obj periodMilliseconds 
  = withObjectRef "styledTextCtrlSetMouseDwellTime" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetMouseDwellTime cobj__obj  (toCInt periodMilliseconds)  
foreign import ccall "wxStyledTextCtrl_SetMouseDwellTime" wxStyledTextCtrl_SetMouseDwellTime :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlSetOvertype obj overtype@).
styledTextCtrlSetOvertype :: StyledTextCtrl  a -> Bool ->  IO ()
styledTextCtrlSetOvertype _obj overtype 
  = withObjectRef "styledTextCtrlSetOvertype" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetOvertype cobj__obj  (toCBool overtype)  
foreign import ccall "wxStyledTextCtrl_SetOvertype" wxStyledTextCtrl_SetOvertype :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()

-- | usage: (@styledTextCtrlSetPrintColourMode obj mode@).
styledTextCtrlSetPrintColourMode :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlSetPrintColourMode _obj mode 
  = withObjectRef "styledTextCtrlSetPrintColourMode" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetPrintColourMode cobj__obj  (toCInt mode)  
foreign import ccall "wxStyledTextCtrl_SetPrintColourMode" wxStyledTextCtrl_SetPrintColourMode :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlSetPrintMagnification obj magnification@).
styledTextCtrlSetPrintMagnification :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlSetPrintMagnification _obj magnification 
  = withObjectRef "styledTextCtrlSetPrintMagnification" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetPrintMagnification cobj__obj  (toCInt magnification)  
foreign import ccall "wxStyledTextCtrl_SetPrintMagnification" wxStyledTextCtrl_SetPrintMagnification :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlSetPrintWrapMode obj mode@).
styledTextCtrlSetPrintWrapMode :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlSetPrintWrapMode _obj mode 
  = withObjectRef "styledTextCtrlSetPrintWrapMode" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetPrintWrapMode cobj__obj  (toCInt mode)  
foreign import ccall "wxStyledTextCtrl_SetPrintWrapMode" wxStyledTextCtrl_SetPrintWrapMode :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlSetProperty obj key value@).
styledTextCtrlSetProperty :: StyledTextCtrl  a -> String -> String ->  IO ()
styledTextCtrlSetProperty _obj key value 
  = withObjectRef "styledTextCtrlSetProperty" _obj $ \cobj__obj -> 
    withStringPtr key $ \cobj_key -> 
    withStringPtr value $ \cobj_value -> 
    wxStyledTextCtrl_SetProperty cobj__obj  cobj_key  cobj_value  
foreign import ccall "wxStyledTextCtrl_SetProperty" wxStyledTextCtrl_SetProperty :: Ptr (TStyledTextCtrl a) -> Ptr (TWxString b) -> Ptr (TWxString c) -> IO ()

-- | usage: (@styledTextCtrlSetReadOnly obj readOnly@).
styledTextCtrlSetReadOnly :: StyledTextCtrl  a -> Bool ->  IO ()
styledTextCtrlSetReadOnly _obj readOnly 
  = withObjectRef "styledTextCtrlSetReadOnly" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetReadOnly cobj__obj  (toCBool readOnly)  
foreign import ccall "wxStyledTextCtrl_SetReadOnly" wxStyledTextCtrl_SetReadOnly :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()

-- | usage: (@styledTextCtrlSetSTCCursor obj cursorType@).
styledTextCtrlSetSTCCursor :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlSetSTCCursor _obj cursorType 
  = withObjectRef "styledTextCtrlSetSTCCursor" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetSTCCursor cobj__obj  (toCInt cursorType)  
foreign import ccall "wxStyledTextCtrl_SetSTCCursor" wxStyledTextCtrl_SetSTCCursor :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlSetSTCFocus obj focus@).
styledTextCtrlSetSTCFocus :: StyledTextCtrl  a -> Bool ->  IO ()
styledTextCtrlSetSTCFocus _obj focus 
  = withObjectRef "styledTextCtrlSetSTCFocus" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetSTCFocus cobj__obj  (toCBool focus)  
foreign import ccall "wxStyledTextCtrl_SetSTCFocus" wxStyledTextCtrl_SetSTCFocus :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()

-- | usage: (@styledTextCtrlSetSavePoint obj@).
styledTextCtrlSetSavePoint :: StyledTextCtrl  a ->  IO ()
styledTextCtrlSetSavePoint _obj 
  = withObjectRef "styledTextCtrlSetSavePoint" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetSavePoint cobj__obj  
foreign import ccall "wxStyledTextCtrl_SetSavePoint" wxStyledTextCtrl_SetSavePoint :: Ptr (TStyledTextCtrl a) -> IO ()

-- | usage: (@styledTextCtrlSetScrollWidth obj pixelWidth@).
styledTextCtrlSetScrollWidth :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlSetScrollWidth _obj pixelWidth 
  = withObjectRef "styledTextCtrlSetScrollWidth" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetScrollWidth cobj__obj  (toCInt pixelWidth)  
foreign import ccall "wxStyledTextCtrl_SetScrollWidth" wxStyledTextCtrl_SetScrollWidth :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlSetSearchFlags obj flags@).
styledTextCtrlSetSearchFlags :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlSetSearchFlags _obj flags 
  = withObjectRef "styledTextCtrlSetSearchFlags" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetSearchFlags cobj__obj  (toCInt flags)  
foreign import ccall "wxStyledTextCtrl_SetSearchFlags" wxStyledTextCtrl_SetSearchFlags :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlSetSelBackground obj useSetting backrbackgbackb@).
styledTextCtrlSetSelBackground :: StyledTextCtrl  a -> Bool -> Color ->  IO ()
styledTextCtrlSetSelBackground _obj useSetting backrbackgbackb 
  = withObjectRef "styledTextCtrlSetSelBackground" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetSelBackground cobj__obj  (toCBool useSetting)  (colorRed backrbackgbackb) (colorGreen backrbackgbackb) (colorBlue backrbackgbackb)  
foreign import ccall "wxStyledTextCtrl_SetSelBackground" wxStyledTextCtrl_SetSelBackground :: Ptr (TStyledTextCtrl a) -> CBool -> Word8 -> Word8 -> Word8 -> IO ()

-- | usage: (@styledTextCtrlSetSelForeground obj useSetting forerforegforeb@).
styledTextCtrlSetSelForeground :: StyledTextCtrl  a -> Bool -> Color ->  IO ()
styledTextCtrlSetSelForeground _obj useSetting forerforegforeb 
  = withObjectRef "styledTextCtrlSetSelForeground" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetSelForeground cobj__obj  (toCBool useSetting)  (colorRed forerforegforeb) (colorGreen forerforegforeb) (colorBlue forerforegforeb)  
foreign import ccall "wxStyledTextCtrl_SetSelForeground" wxStyledTextCtrl_SetSelForeground :: Ptr (TStyledTextCtrl a) -> CBool -> Word8 -> Word8 -> Word8 -> IO ()

-- | usage: (@styledTextCtrlSetSelection obj start end@).
styledTextCtrlSetSelection :: StyledTextCtrl  a -> Int -> Int ->  IO ()
styledTextCtrlSetSelection _obj start end 
  = withObjectRef "styledTextCtrlSetSelection" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetSelection cobj__obj  (toCInt start)  (toCInt end)  
foreign import ccall "wxStyledTextCtrl_SetSelection" wxStyledTextCtrl_SetSelection :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()

-- | usage: (@styledTextCtrlSetSelectionEnd obj pos@).
styledTextCtrlSetSelectionEnd :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlSetSelectionEnd _obj pos 
  = withObjectRef "styledTextCtrlSetSelectionEnd" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetSelectionEnd cobj__obj  (toCInt pos)  
foreign import ccall "wxStyledTextCtrl_SetSelectionEnd" wxStyledTextCtrl_SetSelectionEnd :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlSetSelectionStart obj pos@).
styledTextCtrlSetSelectionStart :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlSetSelectionStart _obj pos 
  = withObjectRef "styledTextCtrlSetSelectionStart" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetSelectionStart cobj__obj  (toCInt pos)  
foreign import ccall "wxStyledTextCtrl_SetSelectionStart" wxStyledTextCtrl_SetSelectionStart :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlSetStatus obj statusCode@).
styledTextCtrlSetStatus :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlSetStatus _obj statusCode 
  = withObjectRef "styledTextCtrlSetStatus" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetStatus cobj__obj  (toCInt statusCode)  
foreign import ccall "wxStyledTextCtrl_SetStatus" wxStyledTextCtrl_SetStatus :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlSetStyleBits obj bits@).
styledTextCtrlSetStyleBits :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlSetStyleBits _obj bits 
  = withObjectRef "styledTextCtrlSetStyleBits" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetStyleBits cobj__obj  (toCInt bits)  
foreign import ccall "wxStyledTextCtrl_SetStyleBits" wxStyledTextCtrl_SetStyleBits :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlSetStyleBytes obj length styleBytes@).
styledTextCtrlSetStyleBytes :: StyledTextCtrl  a -> Int -> String ->  IO ()
styledTextCtrlSetStyleBytes _obj length styleBytes 
  = withObjectRef "styledTextCtrlSetStyleBytes" _obj $ \cobj__obj -> 
    withCWString styleBytes $ \cstr_styleBytes -> 
    wxStyledTextCtrl_SetStyleBytes cobj__obj  (toCInt length)  cstr_styleBytes  
foreign import ccall "wxStyledTextCtrl_SetStyleBytes" wxStyledTextCtrl_SetStyleBytes :: Ptr (TStyledTextCtrl a) -> CInt -> CWString -> IO ()

-- | usage: (@styledTextCtrlSetStyling obj length style@).
styledTextCtrlSetStyling :: StyledTextCtrl  a -> Int -> Int ->  IO ()
styledTextCtrlSetStyling _obj length style 
  = withObjectRef "styledTextCtrlSetStyling" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetStyling cobj__obj  (toCInt length)  (toCInt style)  
foreign import ccall "wxStyledTextCtrl_SetStyling" wxStyledTextCtrl_SetStyling :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()

-- | usage: (@styledTextCtrlSetTabIndents obj tabIndents@).
styledTextCtrlSetTabIndents :: StyledTextCtrl  a -> Bool ->  IO ()
styledTextCtrlSetTabIndents _obj tabIndents 
  = withObjectRef "styledTextCtrlSetTabIndents" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetTabIndents cobj__obj  (toCBool tabIndents)  
foreign import ccall "wxStyledTextCtrl_SetTabIndents" wxStyledTextCtrl_SetTabIndents :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()

-- | usage: (@styledTextCtrlSetTabWidth obj tabWidth@).
styledTextCtrlSetTabWidth :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlSetTabWidth _obj tabWidth 
  = withObjectRef "styledTextCtrlSetTabWidth" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetTabWidth cobj__obj  (toCInt tabWidth)  
foreign import ccall "wxStyledTextCtrl_SetTabWidth" wxStyledTextCtrl_SetTabWidth :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlSetTargetEnd obj pos@).
styledTextCtrlSetTargetEnd :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlSetTargetEnd _obj pos 
  = withObjectRef "styledTextCtrlSetTargetEnd" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetTargetEnd cobj__obj  (toCInt pos)  
foreign import ccall "wxStyledTextCtrl_SetTargetEnd" wxStyledTextCtrl_SetTargetEnd :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlSetTargetStart obj pos@).
styledTextCtrlSetTargetStart :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlSetTargetStart _obj pos 
  = withObjectRef "styledTextCtrlSetTargetStart" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetTargetStart cobj__obj  (toCInt pos)  
foreign import ccall "wxStyledTextCtrl_SetTargetStart" wxStyledTextCtrl_SetTargetStart :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlSetText obj text@).
styledTextCtrlSetText :: StyledTextCtrl  a -> String ->  IO ()
styledTextCtrlSetText _obj text 
  = withObjectRef "styledTextCtrlSetText" _obj $ \cobj__obj -> 
    withStringPtr text $ \cobj_text -> 
    wxStyledTextCtrl_SetText cobj__obj  cobj_text  
foreign import ccall "wxStyledTextCtrl_SetText" wxStyledTextCtrl_SetText :: Ptr (TStyledTextCtrl a) -> Ptr (TWxString b) -> IO ()

-- | usage: (@styledTextCtrlSetTwoPhaseDraw obj twoPhase@).
styledTextCtrlSetTwoPhaseDraw :: StyledTextCtrl  a -> Bool ->  IO ()
styledTextCtrlSetTwoPhaseDraw _obj twoPhase 
  = withObjectRef "styledTextCtrlSetTwoPhaseDraw" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetTwoPhaseDraw cobj__obj  (toCBool twoPhase)  
foreign import ccall "wxStyledTextCtrl_SetTwoPhaseDraw" wxStyledTextCtrl_SetTwoPhaseDraw :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()

-- | usage: (@styledTextCtrlSetUndoCollection obj collectUndo@).
styledTextCtrlSetUndoCollection :: StyledTextCtrl  a -> Bool ->  IO ()
styledTextCtrlSetUndoCollection _obj collectUndo 
  = withObjectRef "styledTextCtrlSetUndoCollection" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetUndoCollection cobj__obj  (toCBool collectUndo)  
foreign import ccall "wxStyledTextCtrl_SetUndoCollection" wxStyledTextCtrl_SetUndoCollection :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()

-- | usage: (@styledTextCtrlSetUseHorizontalScrollBar obj show@).
styledTextCtrlSetUseHorizontalScrollBar :: StyledTextCtrl  a -> Bool ->  IO ()
styledTextCtrlSetUseHorizontalScrollBar _obj show 
  = withObjectRef "styledTextCtrlSetUseHorizontalScrollBar" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetUseHorizontalScrollBar cobj__obj  (toCBool show)  
foreign import ccall "wxStyledTextCtrl_SetUseHorizontalScrollBar" wxStyledTextCtrl_SetUseHorizontalScrollBar :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()

-- | usage: (@styledTextCtrlSetUseTabs obj useTabs@).
styledTextCtrlSetUseTabs :: StyledTextCtrl  a -> Bool ->  IO ()
styledTextCtrlSetUseTabs _obj useTabs 
  = withObjectRef "styledTextCtrlSetUseTabs" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetUseTabs cobj__obj  (toCBool useTabs)  
foreign import ccall "wxStyledTextCtrl_SetUseTabs" wxStyledTextCtrl_SetUseTabs :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()

-- | usage: (@styledTextCtrlSetUseVerticalScrollBar obj show@).
styledTextCtrlSetUseVerticalScrollBar :: StyledTextCtrl  a -> Bool ->  IO ()
styledTextCtrlSetUseVerticalScrollBar _obj show 
  = withObjectRef "styledTextCtrlSetUseVerticalScrollBar" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetUseVerticalScrollBar cobj__obj  (toCBool show)  
foreign import ccall "wxStyledTextCtrl_SetUseVerticalScrollBar" wxStyledTextCtrl_SetUseVerticalScrollBar :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()

-- | usage: (@styledTextCtrlSetVScrollBar obj bar@).
styledTextCtrlSetVScrollBar :: StyledTextCtrl  a -> ScrollBar  b ->  IO ()
styledTextCtrlSetVScrollBar _obj bar 
  = withObjectRef "styledTextCtrlSetVScrollBar" _obj $ \cobj__obj -> 
    withObjectPtr bar $ \cobj_bar -> 
    wxStyledTextCtrl_SetVScrollBar cobj__obj  cobj_bar  
foreign import ccall "wxStyledTextCtrl_SetVScrollBar" wxStyledTextCtrl_SetVScrollBar :: Ptr (TStyledTextCtrl a) -> Ptr (TScrollBar b) -> IO ()

-- | usage: (@styledTextCtrlSetViewEOL obj visible@).
styledTextCtrlSetViewEOL :: StyledTextCtrl  a -> Bool ->  IO ()
styledTextCtrlSetViewEOL _obj visible 
  = withObjectRef "styledTextCtrlSetViewEOL" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetViewEOL cobj__obj  (toCBool visible)  
foreign import ccall "wxStyledTextCtrl_SetViewEOL" wxStyledTextCtrl_SetViewEOL :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()

-- | usage: (@styledTextCtrlSetViewWhiteSpace obj viewWS@).
styledTextCtrlSetViewWhiteSpace :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlSetViewWhiteSpace _obj viewWS 
  = withObjectRef "styledTextCtrlSetViewWhiteSpace" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetViewWhiteSpace cobj__obj  (toCInt viewWS)  
foreign import ccall "wxStyledTextCtrl_SetViewWhiteSpace" wxStyledTextCtrl_SetViewWhiteSpace :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlSetVisiblePolicy obj visiblePolicy visibleSlop@).
styledTextCtrlSetVisiblePolicy :: StyledTextCtrl  a -> Int -> Int ->  IO ()
styledTextCtrlSetVisiblePolicy _obj visiblePolicy visibleSlop 
  = withObjectRef "styledTextCtrlSetVisiblePolicy" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetVisiblePolicy cobj__obj  (toCInt visiblePolicy)  (toCInt visibleSlop)  
foreign import ccall "wxStyledTextCtrl_SetVisiblePolicy" wxStyledTextCtrl_SetVisiblePolicy :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()

-- | usage: (@styledTextCtrlSetWhitespaceBackground obj useSetting backrbackgbackb@).
styledTextCtrlSetWhitespaceBackground :: StyledTextCtrl  a -> Bool -> Color ->  IO ()
styledTextCtrlSetWhitespaceBackground _obj useSetting backrbackgbackb 
  = withObjectRef "styledTextCtrlSetWhitespaceBackground" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetWhitespaceBackground cobj__obj  (toCBool useSetting)  (colorRed backrbackgbackb) (colorGreen backrbackgbackb) (colorBlue backrbackgbackb)  
foreign import ccall "wxStyledTextCtrl_SetWhitespaceBackground" wxStyledTextCtrl_SetWhitespaceBackground :: Ptr (TStyledTextCtrl a) -> CBool -> Word8 -> Word8 -> Word8 -> IO ()

-- | usage: (@styledTextCtrlSetWhitespaceForeground obj useSetting forerforegforeb@).
styledTextCtrlSetWhitespaceForeground :: StyledTextCtrl  a -> Bool -> Color ->  IO ()
styledTextCtrlSetWhitespaceForeground _obj useSetting forerforegforeb 
  = withObjectRef "styledTextCtrlSetWhitespaceForeground" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetWhitespaceForeground cobj__obj  (toCBool useSetting)  (colorRed forerforegforeb) (colorGreen forerforegforeb) (colorBlue forerforegforeb)  
foreign import ccall "wxStyledTextCtrl_SetWhitespaceForeground" wxStyledTextCtrl_SetWhitespaceForeground :: Ptr (TStyledTextCtrl a) -> CBool -> Word8 -> Word8 -> Word8 -> IO ()

-- | usage: (@styledTextCtrlSetWordChars obj characters@).
styledTextCtrlSetWordChars :: StyledTextCtrl  a -> String ->  IO ()
styledTextCtrlSetWordChars _obj characters 
  = withObjectRef "styledTextCtrlSetWordChars" _obj $ \cobj__obj -> 
    withStringPtr characters $ \cobj_characters -> 
    wxStyledTextCtrl_SetWordChars cobj__obj  cobj_characters  
foreign import ccall "wxStyledTextCtrl_SetWordChars" wxStyledTextCtrl_SetWordChars :: Ptr (TStyledTextCtrl a) -> Ptr (TWxString b) -> IO ()

-- | usage: (@styledTextCtrlSetWrapMode obj mode@).
styledTextCtrlSetWrapMode :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlSetWrapMode _obj mode 
  = withObjectRef "styledTextCtrlSetWrapMode" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetWrapMode cobj__obj  (toCInt mode)  
foreign import ccall "wxStyledTextCtrl_SetWrapMode" wxStyledTextCtrl_SetWrapMode :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlSetXCaretPolicy obj caretPolicy caretSlop@).
styledTextCtrlSetXCaretPolicy :: StyledTextCtrl  a -> Int -> Int ->  IO ()
styledTextCtrlSetXCaretPolicy _obj caretPolicy caretSlop 
  = withObjectRef "styledTextCtrlSetXCaretPolicy" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetXCaretPolicy cobj__obj  (toCInt caretPolicy)  (toCInt caretSlop)  
foreign import ccall "wxStyledTextCtrl_SetXCaretPolicy" wxStyledTextCtrl_SetXCaretPolicy :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()

-- | usage: (@styledTextCtrlSetXOffset obj newOffset@).
styledTextCtrlSetXOffset :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlSetXOffset _obj newOffset 
  = withObjectRef "styledTextCtrlSetXOffset" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetXOffset cobj__obj  (toCInt newOffset)  
foreign import ccall "wxStyledTextCtrl_SetXOffset" wxStyledTextCtrl_SetXOffset :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlSetYCaretPolicy obj caretPolicy caretSlop@).
styledTextCtrlSetYCaretPolicy :: StyledTextCtrl  a -> Int -> Int ->  IO ()
styledTextCtrlSetYCaretPolicy _obj caretPolicy caretSlop 
  = withObjectRef "styledTextCtrlSetYCaretPolicy" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetYCaretPolicy cobj__obj  (toCInt caretPolicy)  (toCInt caretSlop)  
foreign import ccall "wxStyledTextCtrl_SetYCaretPolicy" wxStyledTextCtrl_SetYCaretPolicy :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()

-- | usage: (@styledTextCtrlSetZoom obj zoom@).
styledTextCtrlSetZoom :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlSetZoom _obj zoom 
  = withObjectRef "styledTextCtrlSetZoom" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_SetZoom cobj__obj  (toCInt zoom)  
foreign import ccall "wxStyledTextCtrl_SetZoom" wxStyledTextCtrl_SetZoom :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlShowLines obj lineStart lineEnd@).
styledTextCtrlShowLines :: StyledTextCtrl  a -> Int -> Int ->  IO ()
styledTextCtrlShowLines _obj lineStart lineEnd 
  = withObjectRef "styledTextCtrlShowLines" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_ShowLines cobj__obj  (toCInt lineStart)  (toCInt lineEnd)  
foreign import ccall "wxStyledTextCtrl_ShowLines" wxStyledTextCtrl_ShowLines :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()

-- | usage: (@styledTextCtrlStartRecord obj@).
styledTextCtrlStartRecord :: StyledTextCtrl  a ->  IO ()
styledTextCtrlStartRecord _obj 
  = withObjectRef "styledTextCtrlStartRecord" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_StartRecord cobj__obj  
foreign import ccall "wxStyledTextCtrl_StartRecord" wxStyledTextCtrl_StartRecord :: Ptr (TStyledTextCtrl a) -> IO ()

-- | usage: (@styledTextCtrlStartStyling obj pos mask@).
styledTextCtrlStartStyling :: StyledTextCtrl  a -> Int -> Int ->  IO ()
styledTextCtrlStartStyling _obj pos mask 
  = withObjectRef "styledTextCtrlStartStyling" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_StartStyling cobj__obj  (toCInt pos)  (toCInt mask)  
foreign import ccall "wxStyledTextCtrl_StartStyling" wxStyledTextCtrl_StartStyling :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()

-- | usage: (@styledTextCtrlStopRecord obj@).
styledTextCtrlStopRecord :: StyledTextCtrl  a ->  IO ()
styledTextCtrlStopRecord _obj 
  = withObjectRef "styledTextCtrlStopRecord" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_StopRecord cobj__obj  
foreign import ccall "wxStyledTextCtrl_StopRecord" wxStyledTextCtrl_StopRecord :: Ptr (TStyledTextCtrl a) -> IO ()

-- | usage: (@styledTextCtrlStyleClearAll obj@).
styledTextCtrlStyleClearAll :: StyledTextCtrl  a ->  IO ()
styledTextCtrlStyleClearAll _obj 
  = withObjectRef "styledTextCtrlStyleClearAll" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_StyleClearAll cobj__obj  
foreign import ccall "wxStyledTextCtrl_StyleClearAll" wxStyledTextCtrl_StyleClearAll :: Ptr (TStyledTextCtrl a) -> IO ()

-- | usage: (@styledTextCtrlStyleResetDefault obj@).
styledTextCtrlStyleResetDefault :: StyledTextCtrl  a ->  IO ()
styledTextCtrlStyleResetDefault _obj 
  = withObjectRef "styledTextCtrlStyleResetDefault" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_StyleResetDefault cobj__obj  
foreign import ccall "wxStyledTextCtrl_StyleResetDefault" wxStyledTextCtrl_StyleResetDefault :: Ptr (TStyledTextCtrl a) -> IO ()

-- | usage: (@styledTextCtrlStyleSetBackground obj style backrbackgbackb@).
styledTextCtrlStyleSetBackground :: StyledTextCtrl  a -> Int -> Color ->  IO ()
styledTextCtrlStyleSetBackground _obj style backrbackgbackb 
  = withObjectRef "styledTextCtrlStyleSetBackground" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_StyleSetBackground cobj__obj  (toCInt style)  (colorRed backrbackgbackb) (colorGreen backrbackgbackb) (colorBlue backrbackgbackb)  
foreign import ccall "wxStyledTextCtrl_StyleSetBackground" wxStyledTextCtrl_StyleSetBackground :: Ptr (TStyledTextCtrl a) -> CInt -> Word8 -> Word8 -> Word8 -> IO ()

-- | usage: (@styledTextCtrlStyleSetBold obj style bold@).
styledTextCtrlStyleSetBold :: StyledTextCtrl  a -> Int -> Bool ->  IO ()
styledTextCtrlStyleSetBold _obj style bold 
  = withObjectRef "styledTextCtrlStyleSetBold" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_StyleSetBold cobj__obj  (toCInt style)  (toCBool bold)  
foreign import ccall "wxStyledTextCtrl_StyleSetBold" wxStyledTextCtrl_StyleSetBold :: Ptr (TStyledTextCtrl a) -> CInt -> CBool -> IO ()

-- | usage: (@styledTextCtrlStyleSetCase obj style caseForce@).
styledTextCtrlStyleSetCase :: StyledTextCtrl  a -> Int -> Int ->  IO ()
styledTextCtrlStyleSetCase _obj style caseForce 
  = withObjectRef "styledTextCtrlStyleSetCase" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_StyleSetCase cobj__obj  (toCInt style)  (toCInt caseForce)  
foreign import ccall "wxStyledTextCtrl_StyleSetCase" wxStyledTextCtrl_StyleSetCase :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()

-- | usage: (@styledTextCtrlStyleSetChangeable obj style changeable@).
styledTextCtrlStyleSetChangeable :: StyledTextCtrl  a -> Int -> Bool ->  IO ()
styledTextCtrlStyleSetChangeable _obj style changeable 
  = withObjectRef "styledTextCtrlStyleSetChangeable" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_StyleSetChangeable cobj__obj  (toCInt style)  (toCBool changeable)  
foreign import ccall "wxStyledTextCtrl_StyleSetChangeable" wxStyledTextCtrl_StyleSetChangeable :: Ptr (TStyledTextCtrl a) -> CInt -> CBool -> IO ()

-- | usage: (@styledTextCtrlStyleSetCharacterSet obj style characterSet@).
styledTextCtrlStyleSetCharacterSet :: StyledTextCtrl  a -> Int -> Int ->  IO ()
styledTextCtrlStyleSetCharacterSet _obj style characterSet 
  = withObjectRef "styledTextCtrlStyleSetCharacterSet" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_StyleSetCharacterSet cobj__obj  (toCInt style)  (toCInt characterSet)  
foreign import ccall "wxStyledTextCtrl_StyleSetCharacterSet" wxStyledTextCtrl_StyleSetCharacterSet :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()

-- | usage: (@styledTextCtrlStyleSetEOLFilled obj style filled@).
styledTextCtrlStyleSetEOLFilled :: StyledTextCtrl  a -> Int -> Bool ->  IO ()
styledTextCtrlStyleSetEOLFilled _obj style filled 
  = withObjectRef "styledTextCtrlStyleSetEOLFilled" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_StyleSetEOLFilled cobj__obj  (toCInt style)  (toCBool filled)  
foreign import ccall "wxStyledTextCtrl_StyleSetEOLFilled" wxStyledTextCtrl_StyleSetEOLFilled :: Ptr (TStyledTextCtrl a) -> CInt -> CBool -> IO ()

-- | usage: (@styledTextCtrlStyleSetFaceName obj style fontName@).
styledTextCtrlStyleSetFaceName :: StyledTextCtrl  a -> Int -> String ->  IO ()
styledTextCtrlStyleSetFaceName _obj style fontName 
  = withObjectRef "styledTextCtrlStyleSetFaceName" _obj $ \cobj__obj -> 
    withStringPtr fontName $ \cobj_fontName -> 
    wxStyledTextCtrl_StyleSetFaceName cobj__obj  (toCInt style)  cobj_fontName  
foreign import ccall "wxStyledTextCtrl_StyleSetFaceName" wxStyledTextCtrl_StyleSetFaceName :: Ptr (TStyledTextCtrl a) -> CInt -> Ptr (TWxString c) -> IO ()

-- | usage: (@styledTextCtrlStyleSetFont obj styleNum font@).
styledTextCtrlStyleSetFont :: StyledTextCtrl  a -> Int -> Font  c ->  IO ()
styledTextCtrlStyleSetFont _obj styleNum font 
  = withObjectRef "styledTextCtrlStyleSetFont" _obj $ \cobj__obj -> 
    withObjectPtr font $ \cobj_font -> 
    wxStyledTextCtrl_StyleSetFont cobj__obj  (toCInt styleNum)  cobj_font  
foreign import ccall "wxStyledTextCtrl_StyleSetFont" wxStyledTextCtrl_StyleSetFont :: Ptr (TStyledTextCtrl a) -> CInt -> Ptr (TFont c) -> IO ()

-- | usage: (@styledTextCtrlStyleSetFontAttr obj styleNum size faceName bold italic underline@).
styledTextCtrlStyleSetFontAttr :: StyledTextCtrl  a -> Int -> Int -> String -> Bool -> Bool -> Bool ->  IO ()
styledTextCtrlStyleSetFontAttr _obj styleNum size faceName bold italic underline 
  = withObjectRef "styledTextCtrlStyleSetFontAttr" _obj $ \cobj__obj -> 
    withStringPtr faceName $ \cobj_faceName -> 
    wxStyledTextCtrl_StyleSetFontAttr cobj__obj  (toCInt styleNum)  (toCInt size)  cobj_faceName  (toCBool bold)  (toCBool italic)  (toCBool underline)  
foreign import ccall "wxStyledTextCtrl_StyleSetFontAttr" wxStyledTextCtrl_StyleSetFontAttr :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> Ptr (TWxString d) -> CBool -> CBool -> CBool -> IO ()

-- | usage: (@styledTextCtrlStyleSetForeground obj style forerforegforeb@).
styledTextCtrlStyleSetForeground :: StyledTextCtrl  a -> Int -> Color ->  IO ()
styledTextCtrlStyleSetForeground _obj style forerforegforeb 
  = withObjectRef "styledTextCtrlStyleSetForeground" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_StyleSetForeground cobj__obj  (toCInt style)  (colorRed forerforegforeb) (colorGreen forerforegforeb) (colorBlue forerforegforeb)  
foreign import ccall "wxStyledTextCtrl_StyleSetForeground" wxStyledTextCtrl_StyleSetForeground :: Ptr (TStyledTextCtrl a) -> CInt -> Word8 -> Word8 -> Word8 -> IO ()

-- | usage: (@styledTextCtrlStyleSetHotSpot obj style hotspot@).
styledTextCtrlStyleSetHotSpot :: StyledTextCtrl  a -> Int -> Bool ->  IO ()
styledTextCtrlStyleSetHotSpot _obj style hotspot 
  = withObjectRef "styledTextCtrlStyleSetHotSpot" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_StyleSetHotSpot cobj__obj  (toCInt style)  (toCBool hotspot)  
foreign import ccall "wxStyledTextCtrl_StyleSetHotSpot" wxStyledTextCtrl_StyleSetHotSpot :: Ptr (TStyledTextCtrl a) -> CInt -> CBool -> IO ()

-- | usage: (@styledTextCtrlStyleSetItalic obj style italic@).
styledTextCtrlStyleSetItalic :: StyledTextCtrl  a -> Int -> Bool ->  IO ()
styledTextCtrlStyleSetItalic _obj style italic 
  = withObjectRef "styledTextCtrlStyleSetItalic" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_StyleSetItalic cobj__obj  (toCInt style)  (toCBool italic)  
foreign import ccall "wxStyledTextCtrl_StyleSetItalic" wxStyledTextCtrl_StyleSetItalic :: Ptr (TStyledTextCtrl a) -> CInt -> CBool -> IO ()

-- | usage: (@styledTextCtrlStyleSetSize obj style sizePoints@).
styledTextCtrlStyleSetSize :: StyledTextCtrl  a -> Int -> Int ->  IO ()
styledTextCtrlStyleSetSize _obj style sizePoints 
  = withObjectRef "styledTextCtrlStyleSetSize" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_StyleSetSize cobj__obj  (toCInt style)  (toCInt sizePoints)  
foreign import ccall "wxStyledTextCtrl_StyleSetSize" wxStyledTextCtrl_StyleSetSize :: Ptr (TStyledTextCtrl a) -> CInt -> CInt -> IO ()

-- | usage: (@styledTextCtrlStyleSetSpec obj styleNum spec@).
styledTextCtrlStyleSetSpec :: StyledTextCtrl  a -> Int -> String ->  IO ()
styledTextCtrlStyleSetSpec _obj styleNum spec 
  = withObjectRef "styledTextCtrlStyleSetSpec" _obj $ \cobj__obj -> 
    withStringPtr spec $ \cobj_spec -> 
    wxStyledTextCtrl_StyleSetSpec cobj__obj  (toCInt styleNum)  cobj_spec  
foreign import ccall "wxStyledTextCtrl_StyleSetSpec" wxStyledTextCtrl_StyleSetSpec :: Ptr (TStyledTextCtrl a) -> CInt -> Ptr (TWxString c) -> IO ()

-- | usage: (@styledTextCtrlStyleSetUnderline obj style underline@).
styledTextCtrlStyleSetUnderline :: StyledTextCtrl  a -> Int -> Bool ->  IO ()
styledTextCtrlStyleSetUnderline _obj style underline 
  = withObjectRef "styledTextCtrlStyleSetUnderline" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_StyleSetUnderline cobj__obj  (toCInt style)  (toCBool underline)  
foreign import ccall "wxStyledTextCtrl_StyleSetUnderline" wxStyledTextCtrl_StyleSetUnderline :: Ptr (TStyledTextCtrl a) -> CInt -> CBool -> IO ()

-- | usage: (@styledTextCtrlStyleSetVisible obj style visible@).
styledTextCtrlStyleSetVisible :: StyledTextCtrl  a -> Int -> Bool ->  IO ()
styledTextCtrlStyleSetVisible _obj style visible 
  = withObjectRef "styledTextCtrlStyleSetVisible" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_StyleSetVisible cobj__obj  (toCInt style)  (toCBool visible)  
foreign import ccall "wxStyledTextCtrl_StyleSetVisible" wxStyledTextCtrl_StyleSetVisible :: Ptr (TStyledTextCtrl a) -> CInt -> CBool -> IO ()

-- | usage: (@styledTextCtrlTargetFromSelection obj@).
styledTextCtrlTargetFromSelection :: StyledTextCtrl  a ->  IO ()
styledTextCtrlTargetFromSelection _obj 
  = withObjectRef "styledTextCtrlTargetFromSelection" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_TargetFromSelection cobj__obj  
foreign import ccall "wxStyledTextCtrl_TargetFromSelection" wxStyledTextCtrl_TargetFromSelection :: Ptr (TStyledTextCtrl a) -> IO ()

-- | usage: (@styledTextCtrlTextHeight obj line@).
styledTextCtrlTextHeight :: StyledTextCtrl  a -> Int ->  IO Int
styledTextCtrlTextHeight _obj line 
  = withIntResult $
    withObjectRef "styledTextCtrlTextHeight" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_TextHeight cobj__obj  (toCInt line)  
foreign import ccall "wxStyledTextCtrl_TextHeight" wxStyledTextCtrl_TextHeight :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt

-- | usage: (@styledTextCtrlTextWidth obj style text@).
styledTextCtrlTextWidth :: StyledTextCtrl  a -> Int -> String ->  IO Int
styledTextCtrlTextWidth _obj style text 
  = withIntResult $
    withObjectRef "styledTextCtrlTextWidth" _obj $ \cobj__obj -> 
    withStringPtr text $ \cobj_text -> 
    wxStyledTextCtrl_TextWidth cobj__obj  (toCInt style)  cobj_text  
foreign import ccall "wxStyledTextCtrl_TextWidth" wxStyledTextCtrl_TextWidth :: Ptr (TStyledTextCtrl a) -> CInt -> Ptr (TWxString c) -> IO CInt

-- | usage: (@styledTextCtrlToggleFold obj line@).
styledTextCtrlToggleFold :: StyledTextCtrl  a -> Int ->  IO ()
styledTextCtrlToggleFold _obj line 
  = withObjectRef "styledTextCtrlToggleFold" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_ToggleFold cobj__obj  (toCInt line)  
foreign import ccall "wxStyledTextCtrl_ToggleFold" wxStyledTextCtrl_ToggleFold :: Ptr (TStyledTextCtrl a) -> CInt -> IO ()

-- | usage: (@styledTextCtrlUndo obj@).
styledTextCtrlUndo :: StyledTextCtrl  a ->  IO ()
styledTextCtrlUndo _obj 
  = withObjectRef "styledTextCtrlUndo" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_Undo cobj__obj  
foreign import ccall "wxStyledTextCtrl_Undo" wxStyledTextCtrl_Undo :: Ptr (TStyledTextCtrl a) -> IO ()

-- | usage: (@styledTextCtrlUsePopUp obj allowPopUp@).
styledTextCtrlUsePopUp :: StyledTextCtrl  a -> Bool ->  IO ()
styledTextCtrlUsePopUp _obj allowPopUp 
  = withObjectRef "styledTextCtrlUsePopUp" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_UsePopUp cobj__obj  (toCBool allowPopUp)  
foreign import ccall "wxStyledTextCtrl_UsePopUp" wxStyledTextCtrl_UsePopUp :: Ptr (TStyledTextCtrl a) -> CBool -> IO ()

-- | usage: (@styledTextCtrlUserListShow obj listType itemList@).
styledTextCtrlUserListShow :: StyledTextCtrl  a -> Int -> String ->  IO ()
styledTextCtrlUserListShow _obj listType itemList 
  = withObjectRef "styledTextCtrlUserListShow" _obj $ \cobj__obj -> 
    withStringPtr itemList $ \cobj_itemList -> 
    wxStyledTextCtrl_UserListShow cobj__obj  (toCInt listType)  cobj_itemList  
foreign import ccall "wxStyledTextCtrl_UserListShow" wxStyledTextCtrl_UserListShow :: Ptr (TStyledTextCtrl a) -> CInt -> Ptr (TWxString c) -> IO ()

-- | usage: (@styledTextCtrlVisibleFromDocLine obj line@).
styledTextCtrlVisibleFromDocLine :: StyledTextCtrl  a -> Int ->  IO Int
styledTextCtrlVisibleFromDocLine _obj line 
  = withIntResult $
    withObjectRef "styledTextCtrlVisibleFromDocLine" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_VisibleFromDocLine cobj__obj  (toCInt line)  
foreign import ccall "wxStyledTextCtrl_VisibleFromDocLine" wxStyledTextCtrl_VisibleFromDocLine :: Ptr (TStyledTextCtrl a) -> CInt -> IO CInt

-- | usage: (@styledTextCtrlWordEndPosition obj pos onlyWordCharacters@).
styledTextCtrlWordEndPosition :: StyledTextCtrl  a -> Int -> Bool ->  IO Int
styledTextCtrlWordEndPosition _obj pos onlyWordCharacters 
  = withIntResult $
    withObjectRef "styledTextCtrlWordEndPosition" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_WordEndPosition cobj__obj  (toCInt pos)  (toCBool onlyWordCharacters)  
foreign import ccall "wxStyledTextCtrl_WordEndPosition" wxStyledTextCtrl_WordEndPosition :: Ptr (TStyledTextCtrl a) -> CInt -> CBool -> IO CInt

-- | usage: (@styledTextCtrlWordPartLeft obj@).
styledTextCtrlWordPartLeft :: StyledTextCtrl  a ->  IO ()
styledTextCtrlWordPartLeft _obj 
  = withObjectRef "styledTextCtrlWordPartLeft" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_WordPartLeft cobj__obj  
foreign import ccall "wxStyledTextCtrl_WordPartLeft" wxStyledTextCtrl_WordPartLeft :: Ptr (TStyledTextCtrl a) -> IO ()

-- | usage: (@styledTextCtrlWordPartLeftExtend obj@).
styledTextCtrlWordPartLeftExtend :: StyledTextCtrl  a ->  IO ()
styledTextCtrlWordPartLeftExtend _obj 
  = withObjectRef "styledTextCtrlWordPartLeftExtend" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_WordPartLeftExtend cobj__obj  
foreign import ccall "wxStyledTextCtrl_WordPartLeftExtend" wxStyledTextCtrl_WordPartLeftExtend :: Ptr (TStyledTextCtrl a) -> IO ()

-- | usage: (@styledTextCtrlWordPartRight obj@).
styledTextCtrlWordPartRight :: StyledTextCtrl  a ->  IO ()
styledTextCtrlWordPartRight _obj 
  = withObjectRef "styledTextCtrlWordPartRight" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_WordPartRight cobj__obj  
foreign import ccall "wxStyledTextCtrl_WordPartRight" wxStyledTextCtrl_WordPartRight :: Ptr (TStyledTextCtrl a) -> IO ()

-- | usage: (@styledTextCtrlWordPartRightExtend obj@).
styledTextCtrlWordPartRightExtend :: StyledTextCtrl  a ->  IO ()
styledTextCtrlWordPartRightExtend _obj 
  = withObjectRef "styledTextCtrlWordPartRightExtend" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_WordPartRightExtend cobj__obj  
foreign import ccall "wxStyledTextCtrl_WordPartRightExtend" wxStyledTextCtrl_WordPartRightExtend :: Ptr (TStyledTextCtrl a) -> IO ()

-- | usage: (@styledTextCtrlWordStartPosition obj pos onlyWordCharacters@).
styledTextCtrlWordStartPosition :: StyledTextCtrl  a -> Int -> Bool ->  IO Int
styledTextCtrlWordStartPosition _obj pos onlyWordCharacters 
  = withIntResult $
    withObjectRef "styledTextCtrlWordStartPosition" _obj $ \cobj__obj -> 
    wxStyledTextCtrl_WordStartPosition cobj__obj  (toCInt pos)  (toCBool onlyWordCharacters)  
foreign import ccall "wxStyledTextCtrl_WordStartPosition" wxStyledTextCtrl_WordStartPosition :: Ptr (TStyledTextCtrl a) -> CInt -> CBool -> IO CInt

-- | usage: (@styledTextEventClone obj@).
styledTextEventClone :: StyledTextEvent  a ->  IO (StyledTextEvent  ())
styledTextEventClone _obj 
  = withObjectResult $
    withObjectRef "styledTextEventClone" _obj $ \cobj__obj -> 
    wxStyledTextEvent_Clone cobj__obj  
foreign import ccall "wxStyledTextEvent_Clone" wxStyledTextEvent_Clone :: Ptr (TStyledTextEvent a) -> IO (Ptr (TStyledTextEvent ()))

-- | usage: (@styledTextEventGetAlt obj@).
styledTextEventGetAlt :: StyledTextEvent  a ->  IO Bool
styledTextEventGetAlt _obj 
  = withBoolResult $
    withObjectRef "styledTextEventGetAlt" _obj $ \cobj__obj -> 
    wxStyledTextEvent_GetAlt cobj__obj  
foreign import ccall "wxStyledTextEvent_GetAlt" wxStyledTextEvent_GetAlt :: Ptr (TStyledTextEvent a) -> IO CBool

-- | usage: (@styledTextEventGetControl obj@).
styledTextEventGetControl :: StyledTextEvent  a ->  IO Bool
styledTextEventGetControl _obj 
  = withBoolResult $
    withObjectRef "styledTextEventGetControl" _obj $ \cobj__obj -> 
    wxStyledTextEvent_GetControl cobj__obj  
foreign import ccall "wxStyledTextEvent_GetControl" wxStyledTextEvent_GetControl :: Ptr (TStyledTextEvent a) -> IO CBool

-- | usage: (@styledTextEventGetDragAllowMove obj@).
styledTextEventGetDragAllowMove :: StyledTextEvent  a ->  IO Bool
styledTextEventGetDragAllowMove _obj 
  = withBoolResult $
    withObjectRef "styledTextEventGetDragAllowMove" _obj $ \cobj__obj -> 
    wxStyledTextEvent_GetDragAllowMove cobj__obj  
foreign import ccall "wxStyledTextEvent_GetDragAllowMove" wxStyledTextEvent_GetDragAllowMove :: Ptr (TStyledTextEvent a) -> IO CBool

-- | usage: (@styledTextEventGetDragResult obj@).
styledTextEventGetDragResult :: StyledTextEvent  a ->  IO Int
styledTextEventGetDragResult _obj 
  = withIntResult $
    withObjectRef "styledTextEventGetDragResult" _obj $ \cobj__obj -> 
    wxStyledTextEvent_GetDragResult cobj__obj  
foreign import ccall "wxStyledTextEvent_GetDragResult" wxStyledTextEvent_GetDragResult :: Ptr (TStyledTextEvent a) -> IO CInt

-- | usage: (@styledTextEventGetDragText obj@).
styledTextEventGetDragText :: StyledTextEvent  a ->  IO (String)
styledTextEventGetDragText _obj 
  = withManagedStringResult $
    withObjectRef "styledTextEventGetDragText" _obj $ \cobj__obj -> 
    wxStyledTextEvent_GetDragText cobj__obj  
foreign import ccall "wxStyledTextEvent_GetDragText" wxStyledTextEvent_GetDragText :: Ptr (TStyledTextEvent a) -> IO (Ptr (TWxString ()))

-- | usage: (@styledTextEventGetFoldLevelNow obj@).
styledTextEventGetFoldLevelNow :: StyledTextEvent  a ->  IO Int
styledTextEventGetFoldLevelNow _obj 
  = withIntResult $
    withObjectRef "styledTextEventGetFoldLevelNow" _obj $ \cobj__obj -> 
    wxStyledTextEvent_GetFoldLevelNow cobj__obj  
foreign import ccall "wxStyledTextEvent_GetFoldLevelNow" wxStyledTextEvent_GetFoldLevelNow :: Ptr (TStyledTextEvent a) -> IO CInt

-- | usage: (@styledTextEventGetFoldLevelPrev obj@).
styledTextEventGetFoldLevelPrev :: StyledTextEvent  a ->  IO Int
styledTextEventGetFoldLevelPrev _obj 
  = withIntResult $
    withObjectRef "styledTextEventGetFoldLevelPrev" _obj $ \cobj__obj -> 
    wxStyledTextEvent_GetFoldLevelPrev cobj__obj  
foreign import ccall "wxStyledTextEvent_GetFoldLevelPrev" wxStyledTextEvent_GetFoldLevelPrev :: Ptr (TStyledTextEvent a) -> IO CInt

-- | usage: (@styledTextEventGetKey obj@).
styledTextEventGetKey :: StyledTextEvent  a ->  IO Int
styledTextEventGetKey _obj 
  = withIntResult $
    withObjectRef "styledTextEventGetKey" _obj $ \cobj__obj -> 
    wxStyledTextEvent_GetKey cobj__obj  
foreign import ccall "wxStyledTextEvent_GetKey" wxStyledTextEvent_GetKey :: Ptr (TStyledTextEvent a) -> IO CInt

-- | usage: (@styledTextEventGetLParam obj@).
styledTextEventGetLParam :: StyledTextEvent  a ->  IO Int
styledTextEventGetLParam _obj 
  = withIntResult $
    withObjectRef "styledTextEventGetLParam" _obj $ \cobj__obj -> 
    wxStyledTextEvent_GetLParam cobj__obj  
foreign import ccall "wxStyledTextEvent_GetLParam" wxStyledTextEvent_GetLParam :: Ptr (TStyledTextEvent a) -> IO CInt

-- | usage: (@styledTextEventGetLength obj@).
styledTextEventGetLength :: StyledTextEvent  a ->  IO Int
styledTextEventGetLength _obj 
  = withIntResult $
    withObjectRef "styledTextEventGetLength" _obj $ \cobj__obj -> 
    wxStyledTextEvent_GetLength cobj__obj  
foreign import ccall "wxStyledTextEvent_GetLength" wxStyledTextEvent_GetLength :: Ptr (TStyledTextEvent a) -> IO CInt

-- | usage: (@styledTextEventGetLine obj@).
styledTextEventGetLine :: StyledTextEvent  a ->  IO Int
styledTextEventGetLine _obj 
  = withIntResult $
    withObjectRef "styledTextEventGetLine" _obj $ \cobj__obj -> 
    wxStyledTextEvent_GetLine cobj__obj  
foreign import ccall "wxStyledTextEvent_GetLine" wxStyledTextEvent_GetLine :: Ptr (TStyledTextEvent a) -> IO CInt

-- | usage: (@styledTextEventGetLinesAdded obj@).
styledTextEventGetLinesAdded :: StyledTextEvent  a ->  IO Int
styledTextEventGetLinesAdded _obj 
  = withIntResult $
    withObjectRef "styledTextEventGetLinesAdded" _obj $ \cobj__obj -> 
    wxStyledTextEvent_GetLinesAdded cobj__obj  
foreign import ccall "wxStyledTextEvent_GetLinesAdded" wxStyledTextEvent_GetLinesAdded :: Ptr (TStyledTextEvent a) -> IO CInt

-- | usage: (@styledTextEventGetListType obj@).
styledTextEventGetListType :: StyledTextEvent  a ->  IO Int
styledTextEventGetListType _obj 
  = withIntResult $
    withObjectRef "styledTextEventGetListType" _obj $ \cobj__obj -> 
    wxStyledTextEvent_GetListType cobj__obj  
foreign import ccall "wxStyledTextEvent_GetListType" wxStyledTextEvent_GetListType :: Ptr (TStyledTextEvent a) -> IO CInt

-- | usage: (@styledTextEventGetMargin obj@).
styledTextEventGetMargin :: StyledTextEvent  a ->  IO Int
styledTextEventGetMargin _obj 
  = withIntResult $
    withObjectRef "styledTextEventGetMargin" _obj $ \cobj__obj -> 
    wxStyledTextEvent_GetMargin cobj__obj  
foreign import ccall "wxStyledTextEvent_GetMargin" wxStyledTextEvent_GetMargin :: Ptr (TStyledTextEvent a) -> IO CInt

-- | usage: (@styledTextEventGetMessage obj@).
styledTextEventGetMessage :: StyledTextEvent  a ->  IO Int
styledTextEventGetMessage _obj 
  = withIntResult $
    withObjectRef "styledTextEventGetMessage" _obj $ \cobj__obj -> 
    wxStyledTextEvent_GetMessage cobj__obj  
foreign import ccall "wxStyledTextEvent_GetMessage" wxStyledTextEvent_GetMessage :: Ptr (TStyledTextEvent a) -> IO CInt

-- | usage: (@styledTextEventGetModificationType obj@).
styledTextEventGetModificationType :: StyledTextEvent  a ->  IO Int
styledTextEventGetModificationType _obj 
  = withIntResult $
    withObjectRef "styledTextEventGetModificationType" _obj $ \cobj__obj -> 
    wxStyledTextEvent_GetModificationType cobj__obj  
foreign import ccall "wxStyledTextEvent_GetModificationType" wxStyledTextEvent_GetModificationType :: Ptr (TStyledTextEvent a) -> IO CInt

-- | usage: (@styledTextEventGetModifiers obj@).
styledTextEventGetModifiers :: StyledTextEvent  a ->  IO Int
styledTextEventGetModifiers _obj 
  = withIntResult $
    withObjectRef "styledTextEventGetModifiers" _obj $ \cobj__obj -> 
    wxStyledTextEvent_GetModifiers cobj__obj  
foreign import ccall "wxStyledTextEvent_GetModifiers" wxStyledTextEvent_GetModifiers :: Ptr (TStyledTextEvent a) -> IO CInt

-- | usage: (@styledTextEventGetPosition obj@).
styledTextEventGetPosition :: StyledTextEvent  a ->  IO Int
styledTextEventGetPosition _obj 
  = withIntResult $
    withObjectRef "styledTextEventGetPosition" _obj $ \cobj__obj -> 
    wxStyledTextEvent_GetPosition cobj__obj  
foreign import ccall "wxStyledTextEvent_GetPosition" wxStyledTextEvent_GetPosition :: Ptr (TStyledTextEvent a) -> IO CInt

-- | usage: (@styledTextEventGetShift obj@).
styledTextEventGetShift :: StyledTextEvent  a ->  IO Bool
styledTextEventGetShift _obj 
  = withBoolResult $
    withObjectRef "styledTextEventGetShift" _obj $ \cobj__obj -> 
    wxStyledTextEvent_GetShift cobj__obj  
foreign import ccall "wxStyledTextEvent_GetShift" wxStyledTextEvent_GetShift :: Ptr (TStyledTextEvent a) -> IO CBool

-- | usage: (@styledTextEventGetText obj@).
styledTextEventGetText :: StyledTextEvent  a ->  IO (String)
styledTextEventGetText _obj 
  = withManagedStringResult $
    withObjectRef "styledTextEventGetText" _obj $ \cobj__obj -> 
    wxStyledTextEvent_GetText cobj__obj  
foreign import ccall "wxStyledTextEvent_GetText" wxStyledTextEvent_GetText :: Ptr (TStyledTextEvent a) -> IO (Ptr (TWxString ()))

-- | usage: (@styledTextEventGetWParam obj@).
styledTextEventGetWParam :: StyledTextEvent  a ->  IO Int
styledTextEventGetWParam _obj 
  = withIntResult $
    withObjectRef "styledTextEventGetWParam" _obj $ \cobj__obj -> 
    wxStyledTextEvent_GetWParam cobj__obj  
foreign import ccall "wxStyledTextEvent_GetWParam" wxStyledTextEvent_GetWParam :: Ptr (TStyledTextEvent a) -> IO CInt

-- | usage: (@styledTextEventGetX obj@).
styledTextEventGetX :: StyledTextEvent  a ->  IO Int
styledTextEventGetX _obj 
  = withIntResult $
    withObjectRef "styledTextEventGetX" _obj $ \cobj__obj -> 
    wxStyledTextEvent_GetX cobj__obj  
foreign import ccall "wxStyledTextEvent_GetX" wxStyledTextEvent_GetX :: Ptr (TStyledTextEvent a) -> IO CInt

-- | usage: (@styledTextEventGetY obj@).
styledTextEventGetY :: StyledTextEvent  a ->  IO Int
styledTextEventGetY _obj 
  = withIntResult $
    withObjectRef "styledTextEventGetY" _obj $ \cobj__obj -> 
    wxStyledTextEvent_GetY cobj__obj  
foreign import ccall "wxStyledTextEvent_GetY" wxStyledTextEvent_GetY :: Ptr (TStyledTextEvent a) -> IO CInt

-- | usage: (@styledTextEventSetDragAllowMove obj val@).
styledTextEventSetDragAllowMove :: StyledTextEvent  a -> Bool ->  IO ()
styledTextEventSetDragAllowMove _obj val 
  = withObjectRef "styledTextEventSetDragAllowMove" _obj $ \cobj__obj -> 
    wxStyledTextEvent_SetDragAllowMove cobj__obj  (toCBool val)  
foreign import ccall "wxStyledTextEvent_SetDragAllowMove" wxStyledTextEvent_SetDragAllowMove :: Ptr (TStyledTextEvent a) -> CBool -> IO ()

-- | usage: (@styledTextEventSetDragResult obj val@).
styledTextEventSetDragResult :: StyledTextEvent  a -> Int ->  IO ()
styledTextEventSetDragResult _obj val 
  = withObjectRef "styledTextEventSetDragResult" _obj $ \cobj__obj -> 
    wxStyledTextEvent_SetDragResult cobj__obj  (toCInt val)  
foreign import ccall "wxStyledTextEvent_SetDragResult" wxStyledTextEvent_SetDragResult :: Ptr (TStyledTextEvent a) -> CInt -> IO ()

-- | usage: (@styledTextEventSetDragText obj val@).
styledTextEventSetDragText :: StyledTextEvent  a -> String ->  IO ()
styledTextEventSetDragText _obj val 
  = withObjectRef "styledTextEventSetDragText" _obj $ \cobj__obj -> 
    withStringPtr val $ \cobj_val -> 
    wxStyledTextEvent_SetDragText cobj__obj  cobj_val  
foreign import ccall "wxStyledTextEvent_SetDragText" wxStyledTextEvent_SetDragText :: Ptr (TStyledTextEvent a) -> Ptr (TWxString b) -> IO ()

-- | usage: (@styledTextEventSetFoldLevelNow obj val@).
styledTextEventSetFoldLevelNow :: StyledTextEvent  a -> Int ->  IO ()
styledTextEventSetFoldLevelNow _obj val 
  = withObjectRef "styledTextEventSetFoldLevelNow" _obj $ \cobj__obj -> 
    wxStyledTextEvent_SetFoldLevelNow cobj__obj  (toCInt val)  
foreign import ccall "wxStyledTextEvent_SetFoldLevelNow" wxStyledTextEvent_SetFoldLevelNow :: Ptr (TStyledTextEvent a) -> CInt -> IO ()

-- | usage: (@styledTextEventSetFoldLevelPrev obj val@).
styledTextEventSetFoldLevelPrev :: StyledTextEvent  a -> Int ->  IO ()
styledTextEventSetFoldLevelPrev _obj val 
  = withObjectRef "styledTextEventSetFoldLevelPrev" _obj $ \cobj__obj -> 
    wxStyledTextEvent_SetFoldLevelPrev cobj__obj  (toCInt val)  
foreign import ccall "wxStyledTextEvent_SetFoldLevelPrev" wxStyledTextEvent_SetFoldLevelPrev :: Ptr (TStyledTextEvent a) -> CInt -> IO ()

-- | usage: (@styledTextEventSetKey obj k@).
styledTextEventSetKey :: StyledTextEvent  a -> Int ->  IO ()
styledTextEventSetKey _obj k 
  = withObjectRef "styledTextEventSetKey" _obj $ \cobj__obj -> 
    wxStyledTextEvent_SetKey cobj__obj  (toCInt k)  
foreign import ccall "wxStyledTextEvent_SetKey" wxStyledTextEvent_SetKey :: Ptr (TStyledTextEvent a) -> CInt -> IO ()

-- | usage: (@styledTextEventSetLParam obj val@).
styledTextEventSetLParam :: StyledTextEvent  a -> Int ->  IO ()
styledTextEventSetLParam _obj val 
  = withObjectRef "styledTextEventSetLParam" _obj $ \cobj__obj -> 
    wxStyledTextEvent_SetLParam cobj__obj  (toCInt val)  
foreign import ccall "wxStyledTextEvent_SetLParam" wxStyledTextEvent_SetLParam :: Ptr (TStyledTextEvent a) -> CInt -> IO ()

-- | usage: (@styledTextEventSetLength obj len@).
styledTextEventSetLength :: StyledTextEvent  a -> Int ->  IO ()
styledTextEventSetLength _obj len 
  = withObjectRef "styledTextEventSetLength" _obj $ \cobj__obj -> 
    wxStyledTextEvent_SetLength cobj__obj  (toCInt len)  
foreign import ccall "wxStyledTextEvent_SetLength" wxStyledTextEvent_SetLength :: Ptr (TStyledTextEvent a) -> CInt -> IO ()

-- | usage: (@styledTextEventSetLine obj val@).
styledTextEventSetLine :: StyledTextEvent  a -> Int ->  IO ()
styledTextEventSetLine _obj val 
  = withObjectRef "styledTextEventSetLine" _obj $ \cobj__obj -> 
    wxStyledTextEvent_SetLine cobj__obj  (toCInt val)  
foreign import ccall "wxStyledTextEvent_SetLine" wxStyledTextEvent_SetLine :: Ptr (TStyledTextEvent a) -> CInt -> IO ()

-- | usage: (@styledTextEventSetLinesAdded obj num@).
styledTextEventSetLinesAdded :: StyledTextEvent  a -> Int ->  IO ()
styledTextEventSetLinesAdded _obj num 
  = withObjectRef "styledTextEventSetLinesAdded" _obj $ \cobj__obj -> 
    wxStyledTextEvent_SetLinesAdded cobj__obj  (toCInt num)  
foreign import ccall "wxStyledTextEvent_SetLinesAdded" wxStyledTextEvent_SetLinesAdded :: Ptr (TStyledTextEvent a) -> CInt -> IO ()

-- | usage: (@styledTextEventSetListType obj val@).
styledTextEventSetListType :: StyledTextEvent  a -> Int ->  IO ()
styledTextEventSetListType _obj val 
  = withObjectRef "styledTextEventSetListType" _obj $ \cobj__obj -> 
    wxStyledTextEvent_SetListType cobj__obj  (toCInt val)  
foreign import ccall "wxStyledTextEvent_SetListType" wxStyledTextEvent_SetListType :: Ptr (TStyledTextEvent a) -> CInt -> IO ()

-- | usage: (@styledTextEventSetMargin obj val@).
styledTextEventSetMargin :: StyledTextEvent  a -> Int ->  IO ()
styledTextEventSetMargin _obj val 
  = withObjectRef "styledTextEventSetMargin" _obj $ \cobj__obj -> 
    wxStyledTextEvent_SetMargin cobj__obj  (toCInt val)  
foreign import ccall "wxStyledTextEvent_SetMargin" wxStyledTextEvent_SetMargin :: Ptr (TStyledTextEvent a) -> CInt -> IO ()

-- | usage: (@styledTextEventSetMessage obj val@).
styledTextEventSetMessage :: StyledTextEvent  a -> Int ->  IO ()
styledTextEventSetMessage _obj val 
  = withObjectRef "styledTextEventSetMessage" _obj $ \cobj__obj -> 
    wxStyledTextEvent_SetMessage cobj__obj  (toCInt val)  
foreign import ccall "wxStyledTextEvent_SetMessage" wxStyledTextEvent_SetMessage :: Ptr (TStyledTextEvent a) -> CInt -> IO ()

-- | usage: (@styledTextEventSetModificationType obj t@).
styledTextEventSetModificationType :: StyledTextEvent  a -> Int ->  IO ()
styledTextEventSetModificationType _obj t 
  = withObjectRef "styledTextEventSetModificationType" _obj $ \cobj__obj -> 
    wxStyledTextEvent_SetModificationType cobj__obj  (toCInt t)  
foreign import ccall "wxStyledTextEvent_SetModificationType" wxStyledTextEvent_SetModificationType :: Ptr (TStyledTextEvent a) -> CInt -> IO ()

-- | usage: (@styledTextEventSetModifiers obj m@).
styledTextEventSetModifiers :: StyledTextEvent  a -> Int ->  IO ()
styledTextEventSetModifiers _obj m 
  = withObjectRef "styledTextEventSetModifiers" _obj $ \cobj__obj -> 
    wxStyledTextEvent_SetModifiers cobj__obj  (toCInt m)  
foreign import ccall "wxStyledTextEvent_SetModifiers" wxStyledTextEvent_SetModifiers :: Ptr (TStyledTextEvent a) -> CInt -> IO ()

-- | usage: (@styledTextEventSetPosition obj pos@).
styledTextEventSetPosition :: StyledTextEvent  a -> Int ->  IO ()
styledTextEventSetPosition _obj pos 
  = withObjectRef "styledTextEventSetPosition" _obj $ \cobj__obj -> 
    wxStyledTextEvent_SetPosition cobj__obj  (toCInt pos)  
foreign import ccall "wxStyledTextEvent_SetPosition" wxStyledTextEvent_SetPosition :: Ptr (TStyledTextEvent a) -> CInt -> IO ()

-- | usage: (@styledTextEventSetText obj t@).
styledTextEventSetText :: StyledTextEvent  a -> String ->  IO ()
styledTextEventSetText _obj t 
  = withObjectRef "styledTextEventSetText" _obj $ \cobj__obj -> 
    withStringPtr t $ \cobj_t -> 
    wxStyledTextEvent_SetText cobj__obj  cobj_t  
foreign import ccall "wxStyledTextEvent_SetText" wxStyledTextEvent_SetText :: Ptr (TStyledTextEvent a) -> Ptr (TWxString b) -> IO ()

-- | usage: (@styledTextEventSetWParam obj val@).
styledTextEventSetWParam :: StyledTextEvent  a -> Int ->  IO ()
styledTextEventSetWParam _obj val 
  = withObjectRef "styledTextEventSetWParam" _obj $ \cobj__obj -> 
    wxStyledTextEvent_SetWParam cobj__obj  (toCInt val)  
foreign import ccall "wxStyledTextEvent_SetWParam" wxStyledTextEvent_SetWParam :: Ptr (TStyledTextEvent a) -> CInt -> IO ()

-- | usage: (@styledTextEventSetX obj val@).
styledTextEventSetX :: StyledTextEvent  a -> Int ->  IO ()
styledTextEventSetX _obj val 
  = withObjectRef "styledTextEventSetX" _obj $ \cobj__obj -> 
    wxStyledTextEvent_SetX cobj__obj  (toCInt val)  
foreign import ccall "wxStyledTextEvent_SetX" wxStyledTextEvent_SetX :: Ptr (TStyledTextEvent a) -> CInt -> IO ()

-- | usage: (@styledTextEventSetY obj val@).
styledTextEventSetY :: StyledTextEvent  a -> Int ->  IO ()
styledTextEventSetY _obj val 
  = withObjectRef "styledTextEventSetY" _obj $ \cobj__obj -> 
    wxStyledTextEvent_SetY cobj__obj  (toCInt val)  
foreign import ccall "wxStyledTextEvent_SetY" wxStyledTextEvent_SetY :: Ptr (TStyledTextEvent a) -> CInt -> IO ()

-- | usage: (@svgFileDCCreate fileName@).
svgFileDCCreate :: String ->  IO (SVGFileDC  ())
svgFileDCCreate fileName 
  = withObjectResult $
    withStringPtr fileName $ \cobj_fileName -> 
    wxSVGFileDC_Create cobj_fileName  
foreign import ccall "wxSVGFileDC_Create" wxSVGFileDC_Create :: Ptr (TWxString a) -> IO (Ptr (TSVGFileDC ()))

-- | usage: (@svgFileDCCreateWithSize fileName wh@).
svgFileDCCreateWithSize :: String -> Size ->  IO (SVGFileDC  ())
svgFileDCCreateWithSize fileName wh 
  = withObjectResult $
    withStringPtr fileName $ \cobj_fileName -> 
    wxSVGFileDC_CreateWithSize cobj_fileName  (toCIntSizeW wh) (toCIntSizeH wh)  
foreign import ccall "wxSVGFileDC_CreateWithSize" wxSVGFileDC_CreateWithSize :: Ptr (TWxString a) -> CInt -> CInt -> IO (Ptr (TSVGFileDC ()))

-- | usage: (@svgFileDCCreateWithSizeAndResolution fileName wh adpi@).
svgFileDCCreateWithSizeAndResolution :: String -> Size -> Float ->  IO (SVGFileDC  ())
svgFileDCCreateWithSizeAndResolution fileName wh adpi 
  = withObjectResult $
    withStringPtr fileName $ \cobj_fileName -> 
    wxSVGFileDC_CreateWithSizeAndResolution cobj_fileName  (toCIntSizeW wh) (toCIntSizeH wh)  adpi  
foreign import ccall "wxSVGFileDC_CreateWithSizeAndResolution" wxSVGFileDC_CreateWithSizeAndResolution :: Ptr (TWxString a) -> CInt -> CInt -> Float -> IO (Ptr (TSVGFileDC ()))

-- | usage: (@svgFileDCDelete obj@).
svgFileDCDelete :: SVGFileDC  a ->  IO ()
svgFileDCDelete
  = objectDelete


-- | usage: (@systemSettingsGetColour index@).
systemSettingsGetColour :: Int ->  IO (Color)
systemSettingsGetColour index 
  = withRefColour $ \pref -> 
    wxSystemSettings_GetColour (toCInt index)   pref
foreign import ccall "wxSystemSettings_GetColour" wxSystemSettings_GetColour :: CInt -> Ptr (TColour ()) -> IO ()

-- | usage: (@systemSettingsGetFont index@).
systemSettingsGetFont :: Int ->  IO (Font  ())
systemSettingsGetFont index 
  = withRefFont $ \pref -> 
    wxSystemSettings_GetFont (toCInt index)   pref
foreign import ccall "wxSystemSettings_GetFont" wxSystemSettings_GetFont :: CInt -> Ptr (TFont ()) -> IO ()

-- | usage: (@systemSettingsGetMetric index@).
systemSettingsGetMetric :: Int ->  IO Int
systemSettingsGetMetric index 
  = withIntResult $
    wxSystemSettings_GetMetric (toCInt index)  
foreign import ccall "wxSystemSettings_GetMetric" wxSystemSettings_GetMetric :: CInt -> IO CInt

-- | usage: (@systemSettingsGetScreenType@).
systemSettingsGetScreenType ::  IO Int
systemSettingsGetScreenType 
  = withIntResult $
    wxSystemSettings_GetScreenType 
foreign import ccall "wxSystemSettings_GetScreenType" wxSystemSettings_GetScreenType :: IO CInt

-- | usage: (@taskBarIconCreate@).
taskBarIconCreate ::  IO (TaskBarIcon  ())
taskBarIconCreate 
  = withObjectResult $
    wxTaskBarIcon_Create 
foreign import ccall "wxTaskBarIcon_Create" wxTaskBarIcon_Create :: IO (Ptr (TTaskBarIcon ()))

-- | usage: (@taskBarIconDelete obj@).
taskBarIconDelete :: TaskBarIcon  a ->  IO ()
taskBarIconDelete
  = objectDelete


-- | usage: (@taskBarIconIsIconInstalled obj@).
taskBarIconIsIconInstalled :: TaskBarIcon  a ->  IO Bool
taskBarIconIsIconInstalled _obj 
  = withBoolResult $
    withObjectRef "taskBarIconIsIconInstalled" _obj $ \cobj__obj -> 
    wxTaskBarIcon_IsIconInstalled cobj__obj  
foreign import ccall "wxTaskBarIcon_IsIconInstalled" wxTaskBarIcon_IsIconInstalled :: Ptr (TTaskBarIcon a) -> IO CBool

-- | usage: (@taskBarIconIsOk obj@).
taskBarIconIsOk :: TaskBarIcon  a ->  IO Bool
taskBarIconIsOk _obj 
  = withBoolResult $
    withObjectRef "taskBarIconIsOk" _obj $ \cobj__obj -> 
    wxTaskBarIcon_IsOk cobj__obj  
foreign import ccall "wxTaskBarIcon_IsOk" wxTaskBarIcon_IsOk :: Ptr (TTaskBarIcon a) -> IO CBool

-- | usage: (@taskBarIconPopupMenu obj menu@).
taskBarIconPopupMenu :: TaskBarIcon  a -> Menu  b ->  IO Bool
taskBarIconPopupMenu _obj menu 
  = withBoolResult $
    withObjectRef "taskBarIconPopupMenu" _obj $ \cobj__obj -> 
    withObjectPtr menu $ \cobj_menu -> 
    wxTaskBarIcon_PopupMenu cobj__obj  cobj_menu  
foreign import ccall "wxTaskBarIcon_PopupMenu" wxTaskBarIcon_PopupMenu :: Ptr (TTaskBarIcon a) -> Ptr (TMenu b) -> IO CBool

-- | usage: (@taskBarIconRemoveIcon obj@).
taskBarIconRemoveIcon :: TaskBarIcon  a ->  IO Bool
taskBarIconRemoveIcon _obj 
  = withBoolResult $
    withObjectRef "taskBarIconRemoveIcon" _obj $ \cobj__obj -> 
    wxTaskBarIcon_RemoveIcon cobj__obj  
foreign import ccall "wxTaskBarIcon_RemoveIcon" wxTaskBarIcon_RemoveIcon :: Ptr (TTaskBarIcon a) -> IO CBool

-- | usage: (@taskBarIconSetIcon obj icon text@).
taskBarIconSetIcon :: TaskBarIcon  a -> Icon  b -> String ->  IO Bool
taskBarIconSetIcon _obj icon text 
  = withBoolResult $
    withObjectRef "taskBarIconSetIcon" _obj $ \cobj__obj -> 
    withObjectPtr icon $ \cobj_icon -> 
    withStringPtr text $ \cobj_text -> 
    wxTaskBarIcon_SetIcon cobj__obj  cobj_icon  cobj_text  
foreign import ccall "wxTaskBarIcon_SetIcon" wxTaskBarIcon_SetIcon :: Ptr (TTaskBarIcon a) -> Ptr (TIcon b) -> Ptr (TWxString c) -> IO CBool

-- | usage: (@textAttrCreate colText colBack font@).
textAttrCreate :: Color -> Color -> Font  c ->  IO (TextAttr  ())
textAttrCreate colText colBack font 
  = withObjectResult $
    withColourPtr colText $ \cobj_colText -> 
    withColourPtr colBack $ \cobj_colBack -> 
    withObjectPtr font $ \cobj_font -> 
    wxTextAttr_Create cobj_colText  cobj_colBack  cobj_font  
foreign import ccall "wxTextAttr_Create" wxTextAttr_Create :: Ptr (TColour a) -> Ptr (TColour b) -> Ptr (TFont c) -> IO (Ptr (TTextAttr ()))

-- | usage: (@textAttrCreateDefault@).
textAttrCreateDefault ::  IO (TextAttr  ())
textAttrCreateDefault 
  = withObjectResult $
    wxTextAttr_CreateDefault 
foreign import ccall "wxTextAttr_CreateDefault" wxTextAttr_CreateDefault :: IO (Ptr (TTextAttr ()))

-- | usage: (@textAttrDelete obj@).
textAttrDelete :: TextAttr  a ->  IO ()
textAttrDelete _obj 
  = withObjectRef "textAttrDelete" _obj $ \cobj__obj -> 
    wxTextAttr_Delete cobj__obj  
foreign import ccall "wxTextAttr_Delete" wxTextAttr_Delete :: Ptr (TTextAttr a) -> IO ()

-- | usage: (@textAttrGetBackgroundColour obj@).
textAttrGetBackgroundColour :: TextAttr  a ->  IO (Color)
textAttrGetBackgroundColour _obj 
  = withRefColour $ \pref -> 
    withObjectRef "textAttrGetBackgroundColour" _obj $ \cobj__obj -> 
    wxTextAttr_GetBackgroundColour cobj__obj   pref
foreign import ccall "wxTextAttr_GetBackgroundColour" wxTextAttr_GetBackgroundColour :: Ptr (TTextAttr a) -> Ptr (TColour ()) -> IO ()

-- | usage: (@textAttrGetFont obj@).
textAttrGetFont :: TextAttr  a ->  IO (Font  ())
textAttrGetFont _obj 
  = withRefFont $ \pref -> 
    withObjectRef "textAttrGetFont" _obj $ \cobj__obj -> 
    wxTextAttr_GetFont cobj__obj   pref
foreign import ccall "wxTextAttr_GetFont" wxTextAttr_GetFont :: Ptr (TTextAttr a) -> Ptr (TFont ()) -> IO ()

-- | usage: (@textAttrGetTextColour obj@).
textAttrGetTextColour :: TextAttr  a ->  IO (Color)
textAttrGetTextColour _obj 
  = withRefColour $ \pref -> 
    withObjectRef "textAttrGetTextColour" _obj $ \cobj__obj -> 
    wxTextAttr_GetTextColour cobj__obj   pref
foreign import ccall "wxTextAttr_GetTextColour" wxTextAttr_GetTextColour :: Ptr (TTextAttr a) -> Ptr (TColour ()) -> IO ()

-- | usage: (@textAttrHasBackgroundColour obj@).
textAttrHasBackgroundColour :: TextAttr  a ->  IO Bool
textAttrHasBackgroundColour _obj 
  = withBoolResult $
    withObjectRef "textAttrHasBackgroundColour" _obj $ \cobj__obj -> 
    wxTextAttr_HasBackgroundColour cobj__obj  
foreign import ccall "wxTextAttr_HasBackgroundColour" wxTextAttr_HasBackgroundColour :: Ptr (TTextAttr a) -> IO CBool

-- | usage: (@textAttrHasFont obj@).
textAttrHasFont :: TextAttr  a ->  IO Bool
textAttrHasFont _obj 
  = withBoolResult $
    withObjectRef "textAttrHasFont" _obj $ \cobj__obj -> 
    wxTextAttr_HasFont cobj__obj  
foreign import ccall "wxTextAttr_HasFont" wxTextAttr_HasFont :: Ptr (TTextAttr a) -> IO CBool

-- | usage: (@textAttrHasTextColour obj@).
textAttrHasTextColour :: TextAttr  a ->  IO Bool
textAttrHasTextColour _obj 
  = withBoolResult $
    withObjectRef "textAttrHasTextColour" _obj $ \cobj__obj -> 
    wxTextAttr_HasTextColour cobj__obj  
foreign import ccall "wxTextAttr_HasTextColour" wxTextAttr_HasTextColour :: Ptr (TTextAttr a) -> IO CBool

-- | usage: (@textAttrIsDefault obj@).
textAttrIsDefault :: TextAttr  a ->  IO Bool
textAttrIsDefault _obj 
  = withBoolResult $
    withObjectRef "textAttrIsDefault" _obj $ \cobj__obj -> 
    wxTextAttr_IsDefault cobj__obj  
foreign import ccall "wxTextAttr_IsDefault" wxTextAttr_IsDefault :: Ptr (TTextAttr a) -> IO CBool

-- | usage: (@textAttrSetBackgroundColour obj colour@).
textAttrSetBackgroundColour :: TextAttr  a -> Color ->  IO ()
textAttrSetBackgroundColour _obj colour 
  = withObjectRef "textAttrSetBackgroundColour" _obj $ \cobj__obj -> 
    withColourPtr colour $ \cobj_colour -> 
    wxTextAttr_SetBackgroundColour cobj__obj  cobj_colour  
foreign import ccall "wxTextAttr_SetBackgroundColour" wxTextAttr_SetBackgroundColour :: Ptr (TTextAttr a) -> Ptr (TColour b) -> IO ()

-- | usage: (@textAttrSetFont obj font@).
textAttrSetFont :: TextAttr  a -> Font  b ->  IO ()
textAttrSetFont _obj font 
  = withObjectRef "textAttrSetFont" _obj $ \cobj__obj -> 
    withObjectPtr font $ \cobj_font -> 
    wxTextAttr_SetFont cobj__obj  cobj_font  
foreign import ccall "wxTextAttr_SetFont" wxTextAttr_SetFont :: Ptr (TTextAttr a) -> Ptr (TFont b) -> IO ()

-- | usage: (@textAttrSetTextColour obj colour@).
textAttrSetTextColour :: TextAttr  a -> Color ->  IO ()
textAttrSetTextColour _obj colour 
  = withObjectRef "textAttrSetTextColour" _obj $ \cobj__obj -> 
    withColourPtr colour $ \cobj_colour -> 
    wxTextAttr_SetTextColour cobj__obj  cobj_colour  
foreign import ccall "wxTextAttr_SetTextColour" wxTextAttr_SetTextColour :: Ptr (TTextAttr a) -> Ptr (TColour b) -> IO ()

-- | usage: (@textCtrlAppendText obj text@).
textCtrlAppendText :: TextCtrl  a -> String ->  IO ()
textCtrlAppendText _obj text 
  = withObjectRef "textCtrlAppendText" _obj $ \cobj__obj -> 
    withStringPtr text $ \cobj_text -> 
    wxTextCtrl_AppendText cobj__obj  cobj_text  
foreign import ccall "wxTextCtrl_AppendText" wxTextCtrl_AppendText :: Ptr (TTextCtrl a) -> Ptr (TWxString b) -> IO ()

-- | usage: (@textCtrlCanCopy obj@).
textCtrlCanCopy :: TextCtrl  a ->  IO Bool
textCtrlCanCopy _obj 
  = withBoolResult $
    withObjectRef "textCtrlCanCopy" _obj $ \cobj__obj -> 
    wxTextCtrl_CanCopy cobj__obj  
foreign import ccall "wxTextCtrl_CanCopy" wxTextCtrl_CanCopy :: Ptr (TTextCtrl a) -> IO CBool

-- | usage: (@textCtrlCanCut obj@).
textCtrlCanCut :: TextCtrl  a ->  IO Bool
textCtrlCanCut _obj 
  = withBoolResult $
    withObjectRef "textCtrlCanCut" _obj $ \cobj__obj -> 
    wxTextCtrl_CanCut cobj__obj  
foreign import ccall "wxTextCtrl_CanCut" wxTextCtrl_CanCut :: Ptr (TTextCtrl a) -> IO CBool

-- | usage: (@textCtrlCanPaste obj@).
textCtrlCanPaste :: TextCtrl  a ->  IO Bool
textCtrlCanPaste _obj 
  = withBoolResult $
    withObjectRef "textCtrlCanPaste" _obj $ \cobj__obj -> 
    wxTextCtrl_CanPaste cobj__obj  
foreign import ccall "wxTextCtrl_CanPaste" wxTextCtrl_CanPaste :: Ptr (TTextCtrl a) -> IO CBool

-- | usage: (@textCtrlCanRedo obj@).
textCtrlCanRedo :: TextCtrl  a ->  IO Bool
textCtrlCanRedo _obj 
  = withBoolResult $
    withObjectRef "textCtrlCanRedo" _obj $ \cobj__obj -> 
    wxTextCtrl_CanRedo cobj__obj  
foreign import ccall "wxTextCtrl_CanRedo" wxTextCtrl_CanRedo :: Ptr (TTextCtrl a) -> IO CBool

-- | usage: (@textCtrlCanUndo obj@).
textCtrlCanUndo :: TextCtrl  a ->  IO Bool
textCtrlCanUndo _obj 
  = withBoolResult $
    withObjectRef "textCtrlCanUndo" _obj $ \cobj__obj -> 
    wxTextCtrl_CanUndo cobj__obj  
foreign import ccall "wxTextCtrl_CanUndo" wxTextCtrl_CanUndo :: Ptr (TTextCtrl a) -> IO CBool

-- | usage: (@textCtrlChangeValue obj text@).
textCtrlChangeValue :: TextCtrl  a -> String ->  IO ()
textCtrlChangeValue _obj text 
  = withObjectRef "textCtrlChangeValue" _obj $ \cobj__obj -> 
    withStringPtr text $ \cobj_text -> 
    wxTextCtrl_ChangeValue cobj__obj  cobj_text  
foreign import ccall "wxTextCtrl_ChangeValue" wxTextCtrl_ChangeValue :: Ptr (TTextCtrl a) -> Ptr (TWxString b) -> IO ()

-- | usage: (@textCtrlClear obj@).
textCtrlClear :: TextCtrl  a ->  IO ()
textCtrlClear _obj 
  = withObjectRef "textCtrlClear" _obj $ \cobj__obj -> 
    wxTextCtrl_Clear cobj__obj  
foreign import ccall "wxTextCtrl_Clear" wxTextCtrl_Clear :: Ptr (TTextCtrl a) -> IO ()

-- | usage: (@textCtrlCopy obj@).
textCtrlCopy :: TextCtrl  a ->  IO ()
textCtrlCopy _obj 
  = withObjectRef "textCtrlCopy" _obj $ \cobj__obj -> 
    wxTextCtrl_Copy cobj__obj  
foreign import ccall "wxTextCtrl_Copy" wxTextCtrl_Copy :: Ptr (TTextCtrl a) -> IO ()

-- | usage: (@textCtrlCreate prt id txt lfttopwdthgt stl@).
textCtrlCreate :: Window  a -> Id -> String -> Rect -> Style ->  IO (TextCtrl  ())
textCtrlCreate _prt _id _txt _lfttopwdthgt _stl 
  = withObjectResult $
    withObjectPtr _prt $ \cobj__prt -> 
    withStringPtr _txt $ \cobj__txt -> 
    wxTextCtrl_Create cobj__prt  (toCInt _id)  cobj__txt  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
foreign import ccall "wxTextCtrl_Create" wxTextCtrl_Create :: Ptr (TWindow a) -> CInt -> Ptr (TWxString c) -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TTextCtrl ()))

-- | usage: (@textCtrlCut obj@).
textCtrlCut :: TextCtrl  a ->  IO ()
textCtrlCut _obj 
  = withObjectRef "textCtrlCut" _obj $ \cobj__obj -> 
    wxTextCtrl_Cut cobj__obj  
foreign import ccall "wxTextCtrl_Cut" wxTextCtrl_Cut :: Ptr (TTextCtrl a) -> IO ()

-- | usage: (@textCtrlDiscardEdits obj@).
textCtrlDiscardEdits :: TextCtrl  a ->  IO ()
textCtrlDiscardEdits _obj 
  = withObjectRef "textCtrlDiscardEdits" _obj $ \cobj__obj -> 
    wxTextCtrl_DiscardEdits cobj__obj  
foreign import ccall "wxTextCtrl_DiscardEdits" wxTextCtrl_DiscardEdits :: Ptr (TTextCtrl a) -> IO ()

-- | usage: (@textCtrlEmulateKeyPress obj keyevent@).
textCtrlEmulateKeyPress :: TextCtrl  a -> KeyEvent  b ->  IO Bool
textCtrlEmulateKeyPress _obj keyevent 
  = withBoolResult $
    withObjectRef "textCtrlEmulateKeyPress" _obj $ \cobj__obj -> 
    withObjectPtr keyevent $ \cobj_keyevent -> 
    wxTextCtrl_EmulateKeyPress cobj__obj  cobj_keyevent  
foreign import ccall "wxTextCtrl_EmulateKeyPress" wxTextCtrl_EmulateKeyPress :: Ptr (TTextCtrl a) -> Ptr (TKeyEvent b) -> IO CBool

-- | usage: (@textCtrlGetDefaultStyle obj@).
textCtrlGetDefaultStyle :: TextCtrl  a ->  IO (TextAttr  ())
textCtrlGetDefaultStyle _obj 
  = withObjectResult $
    withObjectRef "textCtrlGetDefaultStyle" _obj $ \cobj__obj -> 
    wxTextCtrl_GetDefaultStyle cobj__obj  
foreign import ccall "wxTextCtrl_GetDefaultStyle" wxTextCtrl_GetDefaultStyle :: Ptr (TTextCtrl a) -> IO (Ptr (TTextAttr ()))

-- | usage: (@textCtrlGetInsertionPoint obj@).
textCtrlGetInsertionPoint :: TextCtrl  a ->  IO Int
textCtrlGetInsertionPoint _obj 
  = withIntResult $
    withObjectRef "textCtrlGetInsertionPoint" _obj $ \cobj__obj -> 
    wxTextCtrl_GetInsertionPoint cobj__obj  
foreign import ccall "wxTextCtrl_GetInsertionPoint" wxTextCtrl_GetInsertionPoint :: Ptr (TTextCtrl a) -> IO CInt

-- | usage: (@textCtrlGetLastPosition obj@).
textCtrlGetLastPosition :: TextCtrl  a ->  IO Int
textCtrlGetLastPosition _obj 
  = withIntResult $
    withObjectRef "textCtrlGetLastPosition" _obj $ \cobj__obj -> 
    wxTextCtrl_GetLastPosition cobj__obj  
foreign import ccall "wxTextCtrl_GetLastPosition" wxTextCtrl_GetLastPosition :: Ptr (TTextCtrl a) -> IO CInt

-- | usage: (@textCtrlGetLineLength obj lineNo@).
textCtrlGetLineLength :: TextCtrl  a -> Int ->  IO Int
textCtrlGetLineLength _obj lineNo 
  = withIntResult $
    withObjectRef "textCtrlGetLineLength" _obj $ \cobj__obj -> 
    wxTextCtrl_GetLineLength cobj__obj  (toCInt lineNo)  
foreign import ccall "wxTextCtrl_GetLineLength" wxTextCtrl_GetLineLength :: Ptr (TTextCtrl a) -> CInt -> IO CInt

-- | usage: (@textCtrlGetLineText obj lineNo@).
textCtrlGetLineText :: TextCtrl  a -> Int ->  IO (String)
textCtrlGetLineText _obj lineNo 
  = withManagedStringResult $
    withObjectRef "textCtrlGetLineText" _obj $ \cobj__obj -> 
    wxTextCtrl_GetLineText cobj__obj  (toCInt lineNo)  
foreign import ccall "wxTextCtrl_GetLineText" wxTextCtrl_GetLineText :: Ptr (TTextCtrl a) -> CInt -> IO (Ptr (TWxString ()))

-- | usage: (@textCtrlGetNumberOfLines obj@).
textCtrlGetNumberOfLines :: TextCtrl  a ->  IO Int
textCtrlGetNumberOfLines _obj 
  = withIntResult $
    withObjectRef "textCtrlGetNumberOfLines" _obj $ \cobj__obj -> 
    wxTextCtrl_GetNumberOfLines cobj__obj  
foreign import ccall "wxTextCtrl_GetNumberOfLines" wxTextCtrl_GetNumberOfLines :: Ptr (TTextCtrl a) -> IO CInt

-- | usage: (@textCtrlGetRange obj from to@).
textCtrlGetRange :: TextCtrl  a -> Int -> Int ->  IO (String)
textCtrlGetRange _obj from to 
  = withManagedStringResult $
    withObjectRef "textCtrlGetRange" _obj $ \cobj__obj -> 
    wxTextCtrl_GetRange cobj__obj  (toCInt from)  (toCInt to)  
foreign import ccall "wxTextCtrl_GetRange" wxTextCtrl_GetRange :: Ptr (TTextCtrl a) -> CInt -> CInt -> IO (Ptr (TWxString ()))

-- | usage: (@textCtrlGetSelection obj from to@).
textCtrlGetSelection :: TextCtrl  a -> Ptr  b -> Ptr  c ->  IO ()
textCtrlGetSelection _obj from to 
  = withObjectRef "textCtrlGetSelection" _obj $ \cobj__obj -> 
    wxTextCtrl_GetSelection cobj__obj  from  to  
foreign import ccall "wxTextCtrl_GetSelection" wxTextCtrl_GetSelection :: Ptr (TTextCtrl a) -> Ptr  b -> Ptr  c -> IO ()

-- | usage: (@textCtrlGetStringSelection obj@).
textCtrlGetStringSelection :: TextCtrl  a ->  IO (String)
textCtrlGetStringSelection _obj 
  = withManagedStringResult $
    withObjectRef "textCtrlGetStringSelection" _obj $ \cobj__obj -> 
    wxTextCtrl_GetStringSelection cobj__obj  
foreign import ccall "wxTextCtrl_GetStringSelection" wxTextCtrl_GetStringSelection :: Ptr (TTextCtrl a) -> IO (Ptr (TWxString ()))

-- | usage: (@textCtrlGetValue obj@).
textCtrlGetValue :: TextCtrl  a ->  IO (String)
textCtrlGetValue _obj 
  = withManagedStringResult $
    withObjectRef "textCtrlGetValue" _obj $ \cobj__obj -> 
    wxTextCtrl_GetValue cobj__obj  
foreign import ccall "wxTextCtrl_GetValue" wxTextCtrl_GetValue :: Ptr (TTextCtrl a) -> IO (Ptr (TWxString ()))

-- | usage: (@textCtrlIsEditable obj@).
textCtrlIsEditable :: TextCtrl  a ->  IO Bool
textCtrlIsEditable _obj 
  = withBoolResult $
    withObjectRef "textCtrlIsEditable" _obj $ \cobj__obj -> 
    wxTextCtrl_IsEditable cobj__obj  
foreign import ccall "wxTextCtrl_IsEditable" wxTextCtrl_IsEditable :: Ptr (TTextCtrl a) -> IO CBool

-- | usage: (@textCtrlIsModified obj@).
textCtrlIsModified :: TextCtrl  a ->  IO Bool
textCtrlIsModified _obj 
  = withBoolResult $
    withObjectRef "textCtrlIsModified" _obj $ \cobj__obj -> 
    wxTextCtrl_IsModified cobj__obj  
foreign import ccall "wxTextCtrl_IsModified" wxTextCtrl_IsModified :: Ptr (TTextCtrl a) -> IO CBool

-- | usage: (@textCtrlIsMultiLine obj@).
textCtrlIsMultiLine :: TextCtrl  a ->  IO Bool
textCtrlIsMultiLine _obj 
  = withBoolResult $
    withObjectRef "textCtrlIsMultiLine" _obj $ \cobj__obj -> 
    wxTextCtrl_IsMultiLine cobj__obj  
foreign import ccall "wxTextCtrl_IsMultiLine" wxTextCtrl_IsMultiLine :: Ptr (TTextCtrl a) -> IO CBool

-- | usage: (@textCtrlIsSingleLine obj@).
textCtrlIsSingleLine :: TextCtrl  a ->  IO Bool
textCtrlIsSingleLine _obj 
  = withBoolResult $
    withObjectRef "textCtrlIsSingleLine" _obj $ \cobj__obj -> 
    wxTextCtrl_IsSingleLine cobj__obj  
foreign import ccall "wxTextCtrl_IsSingleLine" wxTextCtrl_IsSingleLine :: Ptr (TTextCtrl a) -> IO CBool

-- | usage: (@textCtrlLoadFile obj file@).
textCtrlLoadFile :: TextCtrl  a -> String ->  IO Bool
textCtrlLoadFile _obj file 
  = withBoolResult $
    withObjectRef "textCtrlLoadFile" _obj $ \cobj__obj -> 
    withStringPtr file $ \cobj_file -> 
    wxTextCtrl_LoadFile cobj__obj  cobj_file  
foreign import ccall "wxTextCtrl_LoadFile" wxTextCtrl_LoadFile :: Ptr (TTextCtrl a) -> Ptr (TWxString b) -> IO CBool

-- | usage: (@textCtrlPaste obj@).
textCtrlPaste :: TextCtrl  a ->  IO ()
textCtrlPaste _obj 
  = withObjectRef "textCtrlPaste" _obj $ \cobj__obj -> 
    wxTextCtrl_Paste cobj__obj  
foreign import ccall "wxTextCtrl_Paste" wxTextCtrl_Paste :: Ptr (TTextCtrl a) -> IO ()

-- | usage: (@textCtrlPositionToXY obj pos x y@).
textCtrlPositionToXY :: TextCtrl  a -> Int -> Ptr CInt -> Ptr CInt ->  IO Int
textCtrlPositionToXY _obj pos x y 
  = withIntResult $
    withObjectRef "textCtrlPositionToXY" _obj $ \cobj__obj -> 
    wxTextCtrl_PositionToXY cobj__obj  (toCInt pos)  x  y  
foreign import ccall "wxTextCtrl_PositionToXY" wxTextCtrl_PositionToXY :: Ptr (TTextCtrl a) -> CInt -> Ptr CInt -> Ptr CInt -> IO CInt

-- | usage: (@textCtrlRedo obj@).
textCtrlRedo :: TextCtrl  a ->  IO ()
textCtrlRedo _obj 
  = withObjectRef "textCtrlRedo" _obj $ \cobj__obj -> 
    wxTextCtrl_Redo cobj__obj  
foreign import ccall "wxTextCtrl_Redo" wxTextCtrl_Redo :: Ptr (TTextCtrl a) -> IO ()

-- | usage: (@textCtrlRemove obj from to@).
textCtrlRemove :: TextCtrl  a -> Int -> Int ->  IO ()
textCtrlRemove _obj from to 
  = withObjectRef "textCtrlRemove" _obj $ \cobj__obj -> 
    wxTextCtrl_Remove cobj__obj  (toCInt from)  (toCInt to)  
foreign import ccall "wxTextCtrl_Remove" wxTextCtrl_Remove :: Ptr (TTextCtrl a) -> CInt -> CInt -> IO ()

-- | usage: (@textCtrlReplace obj from to value@).
textCtrlReplace :: TextCtrl  a -> Int -> Int -> String ->  IO ()
textCtrlReplace _obj from to value 
  = withObjectRef "textCtrlReplace" _obj $ \cobj__obj -> 
    withStringPtr value $ \cobj_value -> 
    wxTextCtrl_Replace cobj__obj  (toCInt from)  (toCInt to)  cobj_value  
foreign import ccall "wxTextCtrl_Replace" wxTextCtrl_Replace :: Ptr (TTextCtrl a) -> CInt -> CInt -> Ptr (TWxString d) -> IO ()

-- | usage: (@textCtrlSaveFile obj file@).
textCtrlSaveFile :: TextCtrl  a -> String ->  IO Bool
textCtrlSaveFile _obj file 
  = withBoolResult $
    withObjectRef "textCtrlSaveFile" _obj $ \cobj__obj -> 
    withStringPtr file $ \cobj_file -> 
    wxTextCtrl_SaveFile cobj__obj  cobj_file  
foreign import ccall "wxTextCtrl_SaveFile" wxTextCtrl_SaveFile :: Ptr (TTextCtrl a) -> Ptr (TWxString b) -> IO CBool

-- | usage: (@textCtrlSetDefaultStyle obj style@).
textCtrlSetDefaultStyle :: TextCtrl  a -> TextAttr  b ->  IO Bool
textCtrlSetDefaultStyle _obj style 
  = withBoolResult $
    withObjectRef "textCtrlSetDefaultStyle" _obj $ \cobj__obj -> 
    withObjectPtr style $ \cobj_style -> 
    wxTextCtrl_SetDefaultStyle cobj__obj  cobj_style  
foreign import ccall "wxTextCtrl_SetDefaultStyle" wxTextCtrl_SetDefaultStyle :: Ptr (TTextCtrl a) -> Ptr (TTextAttr b) -> IO CBool

-- | usage: (@textCtrlSetEditable obj editable@).
textCtrlSetEditable :: TextCtrl  a -> Bool ->  IO ()
textCtrlSetEditable _obj editable 
  = withObjectRef "textCtrlSetEditable" _obj $ \cobj__obj -> 
    wxTextCtrl_SetEditable cobj__obj  (toCBool editable)  
foreign import ccall "wxTextCtrl_SetEditable" wxTextCtrl_SetEditable :: Ptr (TTextCtrl a) -> CBool -> IO ()

-- | usage: (@textCtrlSetInsertionPoint obj pos@).
textCtrlSetInsertionPoint :: TextCtrl  a -> Int ->  IO ()
textCtrlSetInsertionPoint _obj pos 
  = withObjectRef "textCtrlSetInsertionPoint" _obj $ \cobj__obj -> 
    wxTextCtrl_SetInsertionPoint cobj__obj  (toCInt pos)  
foreign import ccall "wxTextCtrl_SetInsertionPoint" wxTextCtrl_SetInsertionPoint :: Ptr (TTextCtrl a) -> CInt -> IO ()

-- | usage: (@textCtrlSetInsertionPointEnd obj@).
textCtrlSetInsertionPointEnd :: TextCtrl  a ->  IO ()
textCtrlSetInsertionPointEnd _obj 
  = withObjectRef "textCtrlSetInsertionPointEnd" _obj $ \cobj__obj -> 
    wxTextCtrl_SetInsertionPointEnd cobj__obj  
foreign import ccall "wxTextCtrl_SetInsertionPointEnd" wxTextCtrl_SetInsertionPointEnd :: Ptr (TTextCtrl a) -> IO ()

-- | usage: (@textCtrlSetMaxLength obj len@).
textCtrlSetMaxLength :: TextCtrl  a -> Int ->  IO ()
textCtrlSetMaxLength _obj len 
  = withObjectRef "textCtrlSetMaxLength" _obj $ \cobj__obj -> 
    wxTextCtrl_SetMaxLength cobj__obj  (toCInt len)  
foreign import ccall "wxTextCtrl_SetMaxLength" wxTextCtrl_SetMaxLength :: Ptr (TTextCtrl a) -> CInt -> IO ()

-- | usage: (@textCtrlSetSelection obj from to@).
textCtrlSetSelection :: TextCtrl  a -> Int -> Int ->  IO ()
textCtrlSetSelection _obj from to 
  = withObjectRef "textCtrlSetSelection" _obj $ \cobj__obj -> 
    wxTextCtrl_SetSelection cobj__obj  (toCInt from)  (toCInt to)  
foreign import ccall "wxTextCtrl_SetSelection" wxTextCtrl_SetSelection :: Ptr (TTextCtrl a) -> CInt -> CInt -> IO ()

-- | usage: (@textCtrlSetStyle obj start end style@).
textCtrlSetStyle :: TextCtrl  a -> Int -> Int -> TextAttr  d ->  IO Bool
textCtrlSetStyle _obj start end style 
  = withBoolResult $
    withObjectRef "textCtrlSetStyle" _obj $ \cobj__obj -> 
    withObjectPtr style $ \cobj_style -> 
    wxTextCtrl_SetStyle cobj__obj  (toCInt start)  (toCInt end)  cobj_style  
foreign import ccall "wxTextCtrl_SetStyle" wxTextCtrl_SetStyle :: Ptr (TTextCtrl a) -> CInt -> CInt -> Ptr (TTextAttr d) -> IO CBool

-- | usage: (@textCtrlSetValue obj value@).
textCtrlSetValue :: TextCtrl  a -> String ->  IO ()
textCtrlSetValue _obj value 
  = withObjectRef "textCtrlSetValue" _obj $ \cobj__obj -> 
    withStringPtr value $ \cobj_value -> 
    wxTextCtrl_SetValue cobj__obj  cobj_value  
foreign import ccall "wxTextCtrl_SetValue" wxTextCtrl_SetValue :: Ptr (TTextCtrl a) -> Ptr (TWxString b) -> IO ()

-- | usage: (@textCtrlShowPosition obj pos@).
textCtrlShowPosition :: TextCtrl  a -> Int ->  IO ()
textCtrlShowPosition _obj pos 
  = withObjectRef "textCtrlShowPosition" _obj $ \cobj__obj -> 
    wxTextCtrl_ShowPosition cobj__obj  (toCInt pos)  
foreign import ccall "wxTextCtrl_ShowPosition" wxTextCtrl_ShowPosition :: Ptr (TTextCtrl a) -> CInt -> IO ()

-- | usage: (@textCtrlUndo obj@).
textCtrlUndo :: TextCtrl  a ->  IO ()
textCtrlUndo _obj 
  = withObjectRef "textCtrlUndo" _obj $ \cobj__obj -> 
    wxTextCtrl_Undo cobj__obj  
foreign import ccall "wxTextCtrl_Undo" wxTextCtrl_Undo :: Ptr (TTextCtrl a) -> IO ()

-- | usage: (@textCtrlWriteText obj text@).
textCtrlWriteText :: TextCtrl  a -> String ->  IO ()
textCtrlWriteText _obj text 
  = withObjectRef "textCtrlWriteText" _obj $ \cobj__obj -> 
    withStringPtr text $ \cobj_text -> 
    wxTextCtrl_WriteText cobj__obj  cobj_text  
foreign import ccall "wxTextCtrl_WriteText" wxTextCtrl_WriteText :: Ptr (TTextCtrl a) -> Ptr (TWxString b) -> IO ()

-- | usage: (@textCtrlXYToPosition obj xy@).
textCtrlXYToPosition :: TextCtrl  a -> Point ->  IO Int
textCtrlXYToPosition _obj xy 
  = withIntResult $
    withObjectRef "textCtrlXYToPosition" _obj $ \cobj__obj -> 
    wxTextCtrl_XYToPosition cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
foreign import ccall "wxTextCtrl_XYToPosition" wxTextCtrl_XYToPosition :: Ptr (TTextCtrl a) -> CInt -> CInt -> IO CInt

-- | usage: (@textDataObjectCreate txt@).
textDataObjectCreate :: String ->  IO (TextDataObject  ())
textDataObjectCreate _txt 
  = withObjectResult $
    withStringPtr _txt $ \cobj__txt -> 
    wx_TextDataObject_Create cobj__txt  
foreign import ccall "TextDataObject_Create" wx_TextDataObject_Create :: Ptr (TWxString a) -> IO (Ptr (TTextDataObject ()))

-- | usage: (@textDataObjectDelete obj@).
textDataObjectDelete :: TextDataObject  a ->  IO ()
textDataObjectDelete _obj 
  = withObjectPtr _obj $ \cobj__obj -> 
    wx_TextDataObject_Delete cobj__obj  
foreign import ccall "TextDataObject_Delete" wx_TextDataObject_Delete :: Ptr (TTextDataObject a) -> IO ()

-- | usage: (@textDataObjectGetText obj@).
textDataObjectGetText :: TextDataObject  a ->  IO (String)
textDataObjectGetText _obj 
  = withManagedStringResult $
    withObjectPtr _obj $ \cobj__obj -> 
    wx_TextDataObject_GetText cobj__obj  
foreign import ccall "TextDataObject_GetText" wx_TextDataObject_GetText :: Ptr (TTextDataObject a) -> IO (Ptr (TWxString ()))

-- | usage: (@textDataObjectGetTextLength obj@).
textDataObjectGetTextLength :: TextDataObject  a ->  IO Int
textDataObjectGetTextLength _obj 
  = withIntResult $
    withObjectPtr _obj $ \cobj__obj -> 
    wx_TextDataObject_GetTextLength cobj__obj  
foreign import ccall "TextDataObject_GetTextLength" wx_TextDataObject_GetTextLength :: Ptr (TTextDataObject a) -> IO CInt

-- | usage: (@textDataObjectSetText obj text@).
textDataObjectSetText :: TextDataObject  a -> String ->  IO ()
textDataObjectSetText _obj text 
  = withObjectPtr _obj $ \cobj__obj -> 
    withStringPtr text $ \cobj_text -> 
    wx_TextDataObject_SetText cobj__obj  cobj_text  
foreign import ccall "TextDataObject_SetText" wx_TextDataObject_SetText :: Ptr (TTextDataObject a) -> Ptr (TWxString b) -> IO ()

-- | usage: (@textInputStreamCreate inputStream sep@).
textInputStreamCreate :: InputStream  a -> String ->  IO (TextInputStream  ())
textInputStreamCreate inputStream sep 
  = withObjectResult $
    withObjectPtr inputStream $ \cobj_inputStream -> 
    withStringPtr sep $ \cobj_sep -> 
    wxTextInputStream_Create cobj_inputStream  cobj_sep  
foreign import ccall "wxTextInputStream_Create" wxTextInputStream_Create :: Ptr (TInputStream a) -> Ptr (TWxString b) -> IO (Ptr (TTextInputStream ()))

-- | usage: (@textInputStreamDelete self@).
textInputStreamDelete :: TextInputStream  a ->  IO ()
textInputStreamDelete self 
  = withObjectRef "textInputStreamDelete" self $ \cobj_self -> 
    wxTextInputStream_Delete cobj_self  
foreign import ccall "wxTextInputStream_Delete" wxTextInputStream_Delete :: Ptr (TTextInputStream a) -> IO ()

-- | usage: (@textInputStreamReadLine self@).
textInputStreamReadLine :: TextInputStream  a ->  IO (String)
textInputStreamReadLine self 
  = withManagedStringResult $
    withObjectRef "textInputStreamReadLine" self $ \cobj_self -> 
    wxTextInputStream_ReadLine cobj_self  
foreign import ccall "wxTextInputStream_ReadLine" wxTextInputStream_ReadLine :: Ptr (TTextInputStream a) -> IO (Ptr (TWxString ()))

-- | usage: (@textOutputStreamCreate outputStream mode@).
textOutputStreamCreate :: OutputStream  a -> Int ->  IO (TextOutputStream  ())
textOutputStreamCreate outputStream mode 
  = withObjectResult $
    withObjectPtr outputStream $ \cobj_outputStream -> 
    wxTextOutputStream_Create cobj_outputStream  (toCInt mode)  
foreign import ccall "wxTextOutputStream_Create" wxTextOutputStream_Create :: Ptr (TOutputStream a) -> CInt -> IO (Ptr (TTextOutputStream ()))

-- | usage: (@textOutputStreamDelete self@).
textOutputStreamDelete :: TextOutputStream  a ->  IO ()
textOutputStreamDelete self 
  = withObjectRef "textOutputStreamDelete" self $ \cobj_self -> 
    wxTextOutputStream_Delete cobj_self  
foreign import ccall "wxTextOutputStream_Delete" wxTextOutputStream_Delete :: Ptr (TTextOutputStream a) -> IO ()

-- | usage: (@textOutputStreamWriteString self txt@).
textOutputStreamWriteString :: TextOutputStream  a -> String ->  IO ()
textOutputStreamWriteString self txt 
  = withObjectRef "textOutputStreamWriteString" self $ \cobj_self -> 
    withStringPtr txt $ \cobj_txt -> 
    wxTextOutputStream_WriteString cobj_self  cobj_txt  
foreign import ccall "wxTextOutputStream_WriteString" wxTextOutputStream_WriteString :: Ptr (TTextOutputStream a) -> Ptr (TWxString b) -> IO ()

-- | usage: (@textValidatorClone obj@).
textValidatorClone :: TextValidator  a ->  IO (Validator  ())
textValidatorClone _obj 
  = withObjectResult $
    withObjectRef "textValidatorClone" _obj $ \cobj__obj -> 
    wxTextValidator_Clone cobj__obj  
foreign import ccall "wxTextValidator_Clone" wxTextValidator_Clone :: Ptr (TTextValidator a) -> IO (Ptr (TValidator ()))

-- | usage: (@textValidatorCreate style val@).
textValidatorCreate :: Int -> Ptr  b ->  IO (TextValidator  ())
textValidatorCreate style val 
  = withObjectResult $
    wxTextValidator_Create (toCInt style)  val  
foreign import ccall "wxTextValidator_Create" wxTextValidator_Create :: CInt -> Ptr  b -> IO (Ptr (TTextValidator ()))

-- | usage: (@textValidatorGetExcludes obj@).
textValidatorGetExcludes :: TextValidator  a ->  IO [String]
textValidatorGetExcludes _obj 
  = withArrayWStringResult $ \arr -> 
    withObjectRef "textValidatorGetExcludes" _obj $ \cobj__obj -> 
    wxTextValidator_GetExcludes cobj__obj   arr
foreign import ccall "wxTextValidator_GetExcludes" wxTextValidator_GetExcludes :: Ptr (TTextValidator a) -> Ptr (Ptr CWchar) -> IO CInt

-- | usage: (@textValidatorGetIncludes obj@).
textValidatorGetIncludes :: TextValidator  a ->  IO [String]
textValidatorGetIncludes _obj 
  = withArrayWStringResult $ \arr -> 
    withObjectRef "textValidatorGetIncludes" _obj $ \cobj__obj -> 
    wxTextValidator_GetIncludes cobj__obj   arr
foreign import ccall "wxTextValidator_GetIncludes" wxTextValidator_GetIncludes :: Ptr (TTextValidator a) -> Ptr (Ptr CWchar) -> IO CInt

-- | usage: (@textValidatorGetStyle obj@).
textValidatorGetStyle :: TextValidator  a ->  IO Int
textValidatorGetStyle _obj 
  = withIntResult $
    withObjectRef "textValidatorGetStyle" _obj $ \cobj__obj -> 
    wxTextValidator_GetStyle cobj__obj  
foreign import ccall "wxTextValidator_GetStyle" wxTextValidator_GetStyle :: Ptr (TTextValidator a) -> IO CInt

-- | usage: (@textValidatorOnChar obj event@).
textValidatorOnChar :: TextValidator  a -> Event  b ->  IO ()
textValidatorOnChar _obj event 
  = withObjectRef "textValidatorOnChar" _obj $ \cobj__obj -> 
    withObjectPtr event $ \cobj_event -> 
    wxTextValidator_OnChar cobj__obj  cobj_event  
foreign import ccall "wxTextValidator_OnChar" wxTextValidator_OnChar :: Ptr (TTextValidator a) -> Ptr (TEvent b) -> IO ()

-- | usage: (@textValidatorSetExcludes obj list count@).
textValidatorSetExcludes :: TextValidator  a -> String -> Int ->  IO ()
textValidatorSetExcludes _obj list count 
  = withObjectRef "textValidatorSetExcludes" _obj $ \cobj__obj -> 
    withCWString list $ \cstr_list -> 
    wxTextValidator_SetExcludes cobj__obj  cstr_list  (toCInt count)  
foreign import ccall "wxTextValidator_SetExcludes" wxTextValidator_SetExcludes :: Ptr (TTextValidator a) -> CWString -> CInt -> IO ()

-- | usage: (@textValidatorSetIncludes obj list count@).
textValidatorSetIncludes :: TextValidator  a -> String -> Int ->  IO ()
textValidatorSetIncludes _obj list count 
  = withObjectRef "textValidatorSetIncludes" _obj $ \cobj__obj -> 
    withCWString list $ \cstr_list -> 
    wxTextValidator_SetIncludes cobj__obj  cstr_list  (toCInt count)  
foreign import ccall "wxTextValidator_SetIncludes" wxTextValidator_SetIncludes :: Ptr (TTextValidator a) -> CWString -> CInt -> IO ()

-- | usage: (@textValidatorSetStyle obj style@).
textValidatorSetStyle :: TextValidator  a -> Int ->  IO ()
textValidatorSetStyle _obj style 
  = withObjectRef "textValidatorSetStyle" _obj $ \cobj__obj -> 
    wxTextValidator_SetStyle cobj__obj  (toCInt style)  
foreign import ccall "wxTextValidator_SetStyle" wxTextValidator_SetStyle :: Ptr (TTextValidator a) -> CInt -> IO ()

-- | usage: (@textValidatorTransferFromWindow obj@).
textValidatorTransferFromWindow :: TextValidator  a ->  IO Bool
textValidatorTransferFromWindow _obj 
  = withBoolResult $
    withObjectRef "textValidatorTransferFromWindow" _obj $ \cobj__obj -> 
    wxTextValidator_TransferFromWindow cobj__obj  
foreign import ccall "wxTextValidator_TransferFromWindow" wxTextValidator_TransferFromWindow :: Ptr (TTextValidator a) -> IO CBool

-- | usage: (@textValidatorTransferToWindow obj@).
textValidatorTransferToWindow :: TextValidator  a ->  IO Bool
textValidatorTransferToWindow _obj 
  = withBoolResult $
    withObjectRef "textValidatorTransferToWindow" _obj $ \cobj__obj -> 
    wxTextValidator_TransferToWindow cobj__obj  
foreign import ccall "wxTextValidator_TransferToWindow" wxTextValidator_TransferToWindow :: Ptr (TTextValidator a) -> IO CBool

-- | usage: (@timerCreate prt id@).
timerCreate :: Window  a -> Id ->  IO (Timer  ())
timerCreate _prt _id 
  = withObjectResult $
    withObjectPtr _prt $ \cobj__prt -> 
    wxTimer_Create cobj__prt  (toCInt _id)  
foreign import ccall "wxTimer_Create" wxTimer_Create :: Ptr (TWindow a) -> CInt -> IO (Ptr (TTimer ()))

-- | usage: (@timerDelete obj@).
timerDelete :: Timer  a ->  IO ()
timerDelete
  = objectDelete


-- | usage: (@timerEventGetInterval obj@).
timerEventGetInterval :: TimerEvent  a ->  IO Int
timerEventGetInterval _obj 
  = withIntResult $
    withObjectRef "timerEventGetInterval" _obj $ \cobj__obj -> 
    wxTimerEvent_GetInterval cobj__obj  
foreign import ccall "wxTimerEvent_GetInterval" wxTimerEvent_GetInterval :: Ptr (TTimerEvent a) -> IO CInt

-- | usage: (@timerExConnect obj closure@).
timerExConnect :: TimerEx  a -> Closure  b ->  IO ()
timerExConnect _obj closure 
  = withObjectRef "timerExConnect" _obj $ \cobj__obj -> 
    withObjectPtr closure $ \cobj_closure -> 
    wxTimerEx_Connect cobj__obj  cobj_closure  
foreign import ccall "wxTimerEx_Connect" wxTimerEx_Connect :: Ptr (TTimerEx a) -> Ptr (TClosure b) -> IO ()

-- | usage: (@timerExCreate@).
timerExCreate ::  IO (TimerEx  ())
timerExCreate 
  = withObjectResult $
    wxTimerEx_Create 
foreign import ccall "wxTimerEx_Create" wxTimerEx_Create :: IO (Ptr (TTimerEx ()))

-- | usage: (@timerExGetClosure obj@).
timerExGetClosure :: TimerEx  a ->  IO (Closure  ())
timerExGetClosure _obj 
  = withObjectResult $
    withObjectRef "timerExGetClosure" _obj $ \cobj__obj -> 
    wxTimerEx_GetClosure cobj__obj  
foreign import ccall "wxTimerEx_GetClosure" wxTimerEx_GetClosure :: Ptr (TTimerEx a) -> IO (Ptr (TClosure ()))

-- | usage: (@timerGetInterval obj@).
timerGetInterval :: Timer  a ->  IO Int
timerGetInterval _obj 
  = withIntResult $
    withObjectRef "timerGetInterval" _obj $ \cobj__obj -> 
    wxTimer_GetInterval cobj__obj  
foreign import ccall "wxTimer_GetInterval" wxTimer_GetInterval :: Ptr (TTimer a) -> IO CInt

-- | usage: (@timerIsOneShot obj@).
timerIsOneShot :: Timer  a ->  IO Bool
timerIsOneShot _obj 
  = withBoolResult $
    withObjectRef "timerIsOneShot" _obj $ \cobj__obj -> 
    wxTimer_IsOneShot cobj__obj  
foreign import ccall "wxTimer_IsOneShot" wxTimer_IsOneShot :: Ptr (TTimer a) -> IO CBool

-- | usage: (@timerIsRuning obj@).
timerIsRuning :: Timer  a ->  IO Bool
timerIsRuning _obj 
  = withBoolResult $
    withObjectRef "timerIsRuning" _obj $ \cobj__obj -> 
    wxTimer_IsRuning cobj__obj  
foreign import ccall "wxTimer_IsRuning" wxTimer_IsRuning :: Ptr (TTimer a) -> IO CBool

-- | usage: (@timerStart obj wxint one@).
timerStart :: Timer  a -> Int -> Bool ->  IO Bool
timerStart _obj _int _one 
  = withBoolResult $
    withObjectRef "timerStart" _obj $ \cobj__obj -> 
    wxTimer_Start cobj__obj  (toCInt _int)  (toCBool _one)  
foreign import ccall "wxTimer_Start" wxTimer_Start :: Ptr (TTimer a) -> CInt -> CBool -> IO CBool

-- | usage: (@timerStop obj@).
timerStop :: Timer  a ->  IO ()
timerStop _obj 
  = withObjectRef "timerStop" _obj $ \cobj__obj -> 
    wxTimer_Stop cobj__obj  
foreign import ccall "wxTimer_Stop" wxTimer_Stop :: Ptr (TTimer a) -> IO ()

-- | usage: (@tipWindowClose obj@).
tipWindowClose :: TipWindow  a ->  IO ()
tipWindowClose _obj 
  = withObjectRef "tipWindowClose" _obj $ \cobj__obj -> 
    wxTipWindow_Close cobj__obj  
foreign import ccall "wxTipWindow_Close" wxTipWindow_Close :: Ptr (TTipWindow a) -> IO ()

-- | usage: (@tipWindowCreate parent text maxLength@).
tipWindowCreate :: Window  a -> String -> Int ->  IO (TipWindow  ())
tipWindowCreate parent text maxLength 
  = withObjectResult $
    withObjectPtr parent $ \cobj_parent -> 
    withStringPtr text $ \cobj_text -> 
    wxTipWindow_Create cobj_parent  cobj_text  (toCInt maxLength)  
foreign import ccall "wxTipWindow_Create" wxTipWindow_Create :: Ptr (TWindow a) -> Ptr (TWxString b) -> CInt -> IO (Ptr (TTipWindow ()))

-- | usage: (@tipWindowSetBoundingRect obj xywh@).
tipWindowSetBoundingRect :: TipWindow  a -> Rect ->  IO ()
tipWindowSetBoundingRect _obj xywh 
  = withObjectRef "tipWindowSetBoundingRect" _obj $ \cobj__obj -> 
    wxTipWindow_SetBoundingRect cobj__obj  (toCIntRectX xywh) (toCIntRectY xywh)(toCIntRectW xywh) (toCIntRectH xywh)  
foreign import ccall "wxTipWindow_SetBoundingRect" wxTipWindow_SetBoundingRect :: Ptr (TTipWindow a) -> CInt -> CInt -> CInt -> CInt -> IO ()

-- | usage: (@tipWindowSetTipWindowPtr obj windowPtr@).
tipWindowSetTipWindowPtr :: TipWindow  a -> Ptr  b ->  IO ()
tipWindowSetTipWindowPtr _obj windowPtr 
  = withObjectRef "tipWindowSetTipWindowPtr" _obj $ \cobj__obj -> 
    wxTipWindow_SetTipWindowPtr cobj__obj  windowPtr  
foreign import ccall "wxTipWindow_SetTipWindowPtr" wxTipWindow_SetTipWindowPtr :: Ptr (TTipWindow a) -> Ptr  b -> IO ()

-- | usage: (@toggleButtonCreate parent id label xywh style@).
toggleButtonCreate :: Window  a -> Id -> String -> Rect -> Int ->  IO (ToggleButton  ())
toggleButtonCreate parent id label xywh style 
  = withObjectResult $
    withObjectPtr parent $ \cobj_parent -> 
    withStringPtr label $ \cobj_label -> 
    wxToggleButton_Create cobj_parent  (toCInt id)  cobj_label  (toCIntRectX xywh) (toCIntRectY xywh)(toCIntRectW xywh) (toCIntRectH xywh)  (toCInt style)  
foreign import ccall "wxToggleButton_Create" wxToggleButton_Create :: Ptr (TWindow a) -> CInt -> Ptr (TWxString c) -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TToggleButton ()))

-- | usage: (@toggleButtonEnable obj enable@).
toggleButtonEnable :: ToggleButton  a -> Bool ->  IO Bool
toggleButtonEnable _obj enable 
  = withBoolResult $
    withObjectRef "toggleButtonEnable" _obj $ \cobj__obj -> 
    wxToggleButton_Enable cobj__obj  (toCBool enable)  
foreign import ccall "wxToggleButton_Enable" wxToggleButton_Enable :: Ptr (TToggleButton a) -> CBool -> IO CBool

-- | usage: (@toggleButtonGetValue obj@).
toggleButtonGetValue :: ToggleButton  a ->  IO Bool
toggleButtonGetValue _obj 
  = withBoolResult $
    withObjectRef "toggleButtonGetValue" _obj $ \cobj__obj -> 
    wxToggleButton_GetValue cobj__obj  
foreign import ccall "wxToggleButton_GetValue" wxToggleButton_GetValue :: Ptr (TToggleButton a) -> IO CBool

-- | usage: (@toggleButtonSetLabel obj label@).
toggleButtonSetLabel :: ToggleButton  a -> String ->  IO ()
toggleButtonSetLabel _obj label 
  = withObjectRef "toggleButtonSetLabel" _obj $ \cobj__obj -> 
    withStringPtr label $ \cobj_label -> 
    wxToggleButton_SetLabel cobj__obj  cobj_label  
foreign import ccall "wxToggleButton_SetLabel" wxToggleButton_SetLabel :: Ptr (TToggleButton a) -> Ptr (TWxString b) -> IO ()

-- | usage: (@toggleButtonSetValue obj state@).
toggleButtonSetValue :: ToggleButton  a -> Bool ->  IO ()
toggleButtonSetValue _obj state 
  = withObjectRef "toggleButtonSetValue" _obj $ \cobj__obj -> 
    wxToggleButton_SetValue cobj__obj  (toCBool state)  
foreign import ccall "wxToggleButton_SetValue" wxToggleButton_SetValue :: Ptr (TToggleButton a) -> CBool -> IO ()

-- | usage: (@toolBarAddControl obj ctrl@).
toolBarAddControl :: ToolBar  a -> Control  b ->  IO Bool
toolBarAddControl _obj ctrl 
  = withBoolResult $
    withObjectRef "toolBarAddControl" _obj $ \cobj__obj -> 
    withObjectPtr ctrl $ \cobj_ctrl -> 
    wxToolBar_AddControl cobj__obj  cobj_ctrl  
foreign import ccall "wxToolBar_AddControl" wxToolBar_AddControl :: Ptr (TToolBar a) -> Ptr (TControl b) -> IO CBool

-- | usage: (@toolBarAddSeparator obj@).
toolBarAddSeparator :: ToolBar  a ->  IO ()
toolBarAddSeparator _obj 
  = withObjectRef "toolBarAddSeparator" _obj $ \cobj__obj -> 
    wxToolBar_AddSeparator cobj__obj  
foreign import ccall "wxToolBar_AddSeparator" wxToolBar_AddSeparator :: Ptr (TToolBar a) -> IO ()

-- | usage: (@toolBarAddTool obj toolid label bitmap bmpDisabled kind shortHelp longHelp wxdata@).
toolBarAddTool :: ToolBar  a -> Int -> String -> Bitmap  d -> Bitmap  e -> Int -> String -> String -> WxObject  i ->  IO ()
toolBarAddTool _obj toolid label bitmap bmpDisabled kind shortHelp longHelp wxdata 
  = withObjectRef "toolBarAddTool" _obj $ \cobj__obj -> 
    withStringPtr label $ \cobj_label -> 
    withObjectPtr bitmap $ \cobj_bitmap -> 
    withObjectPtr bmpDisabled $ \cobj_bmpDisabled -> 
    withStringPtr shortHelp $ \cobj_shortHelp -> 
    withStringPtr longHelp $ \cobj_longHelp -> 
    withObjectPtr wxdata $ \cobj_wxdata -> 
    wxToolBar_AddTool cobj__obj  (toCInt toolid)  cobj_label  cobj_bitmap  cobj_bmpDisabled  (toCInt kind)  cobj_shortHelp  cobj_longHelp  cobj_wxdata  
foreign import ccall "wxToolBar_AddTool" wxToolBar_AddTool :: Ptr (TToolBar a) -> CInt -> Ptr (TWxString c) -> Ptr (TBitmap d) -> Ptr (TBitmap e) -> CInt -> Ptr (TWxString g) -> Ptr (TWxString h) -> Ptr (TWxObject i) -> IO ()

-- | usage: (@toolBarAddTool2 obj toolId label bmp bmpDisabled itemKind shortHelp longHelp@).
toolBarAddTool2 :: ToolBar  a -> Int -> String -> Bitmap  d -> Bitmap  e -> Int -> String -> String ->  IO ()
toolBarAddTool2 _obj toolId label bmp bmpDisabled itemKind shortHelp longHelp 
  = withObjectRef "toolBarAddTool2" _obj $ \cobj__obj -> 
    withStringPtr label $ \cobj_label -> 
    withObjectPtr bmp $ \cobj_bmp -> 
    withObjectPtr bmpDisabled $ \cobj_bmpDisabled -> 
    withStringPtr shortHelp $ \cobj_shortHelp -> 
    withStringPtr longHelp $ \cobj_longHelp -> 
    wxToolBar_AddTool2 cobj__obj  (toCInt toolId)  cobj_label  cobj_bmp  cobj_bmpDisabled  (toCInt itemKind)  cobj_shortHelp  cobj_longHelp  
foreign import ccall "wxToolBar_AddTool2" wxToolBar_AddTool2 :: Ptr (TToolBar a) -> CInt -> Ptr (TWxString c) -> Ptr (TBitmap d) -> Ptr (TBitmap e) -> CInt -> Ptr (TWxString g) -> Ptr (TWxString h) -> IO ()

-- | usage: (@toolBarCreate prt id lfttopwdthgt stl@).
toolBarCreate :: Window  a -> Id -> Rect -> Style ->  IO (ToolBar  ())
toolBarCreate _prt _id _lfttopwdthgt _stl 
  = withObjectResult $
    withObjectPtr _prt $ \cobj__prt -> 
    wxToolBar_Create cobj__prt  (toCInt _id)  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
foreign import ccall "wxToolBar_Create" wxToolBar_Create :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TToolBar ()))

-- | usage: (@toolBarDelete obj@).
toolBarDelete :: ToolBar  a ->  IO ()
toolBarDelete
  = objectDelete


-- | usage: (@toolBarDeleteTool obj id@).
toolBarDeleteTool :: ToolBar  a -> Id ->  IO Bool
toolBarDeleteTool _obj id 
  = withBoolResult $
    withObjectRef "toolBarDeleteTool" _obj $ \cobj__obj -> 
    wxToolBar_DeleteTool cobj__obj  (toCInt id)  
foreign import ccall "wxToolBar_DeleteTool" wxToolBar_DeleteTool :: Ptr (TToolBar a) -> CInt -> IO CBool

-- | usage: (@toolBarDeleteToolByPos obj pos@).
toolBarDeleteToolByPos :: ToolBar  a -> Int ->  IO Bool
toolBarDeleteToolByPos _obj pos 
  = withBoolResult $
    withObjectRef "toolBarDeleteToolByPos" _obj $ \cobj__obj -> 
    wxToolBar_DeleteToolByPos cobj__obj  (toCInt pos)  
foreign import ccall "wxToolBar_DeleteToolByPos" wxToolBar_DeleteToolByPos :: Ptr (TToolBar a) -> CInt -> IO CBool

-- | usage: (@toolBarEnableTool obj id enable@).
toolBarEnableTool :: ToolBar  a -> Id -> Bool ->  IO ()
toolBarEnableTool _obj id enable 
  = withObjectRef "toolBarEnableTool" _obj $ \cobj__obj -> 
    wxToolBar_EnableTool cobj__obj  (toCInt id)  (toCBool enable)  
foreign import ccall "wxToolBar_EnableTool" wxToolBar_EnableTool :: Ptr (TToolBar a) -> CInt -> CBool -> IO ()

-- | usage: (@toolBarGetMargins obj@).
toolBarGetMargins :: ToolBar  a ->  IO (Point)
toolBarGetMargins _obj 
  = withWxPointResult $
    withObjectRef "toolBarGetMargins" _obj $ \cobj__obj -> 
    wxToolBar_GetMargins cobj__obj  
foreign import ccall "wxToolBar_GetMargins" wxToolBar_GetMargins :: Ptr (TToolBar a) -> IO (Ptr (TWxPoint ()))

-- | usage: (@toolBarGetToolBitmapSize obj@).
toolBarGetToolBitmapSize :: ToolBar  a ->  IO (Size)
toolBarGetToolBitmapSize _obj 
  = withWxSizeResult $
    withObjectRef "toolBarGetToolBitmapSize" _obj $ \cobj__obj -> 
    wxToolBar_GetToolBitmapSize cobj__obj  
foreign import ccall "wxToolBar_GetToolBitmapSize" wxToolBar_GetToolBitmapSize :: Ptr (TToolBar a) -> IO (Ptr (TWxSize ()))

-- | usage: (@toolBarGetToolClientData obj id@).
toolBarGetToolClientData :: ToolBar  a -> Id ->  IO (WxObject  ())
toolBarGetToolClientData _obj id 
  = withObjectResult $
    withObjectRef "toolBarGetToolClientData" _obj $ \cobj__obj -> 
    wxToolBar_GetToolClientData cobj__obj  (toCInt id)  
foreign import ccall "wxToolBar_GetToolClientData" wxToolBar_GetToolClientData :: Ptr (TToolBar a) -> CInt -> IO (Ptr (TWxObject ()))

-- | usage: (@toolBarGetToolEnabled obj id@).
toolBarGetToolEnabled :: ToolBar  a -> Id ->  IO Bool
toolBarGetToolEnabled _obj id 
  = withBoolResult $
    withObjectRef "toolBarGetToolEnabled" _obj $ \cobj__obj -> 
    wxToolBar_GetToolEnabled cobj__obj  (toCInt id)  
foreign import ccall "wxToolBar_GetToolEnabled" wxToolBar_GetToolEnabled :: Ptr (TToolBar a) -> CInt -> IO CBool

-- | usage: (@toolBarGetToolLongHelp obj id@).
toolBarGetToolLongHelp :: ToolBar  a -> Id ->  IO (String)
toolBarGetToolLongHelp _obj id 
  = withManagedStringResult $
    withObjectRef "toolBarGetToolLongHelp" _obj $ \cobj__obj -> 
    wxToolBar_GetToolLongHelp cobj__obj  (toCInt id)  
foreign import ccall "wxToolBar_GetToolLongHelp" wxToolBar_GetToolLongHelp :: Ptr (TToolBar a) -> CInt -> IO (Ptr (TWxString ()))

-- | usage: (@toolBarGetToolPacking obj@).
toolBarGetToolPacking :: ToolBar  a ->  IO Int
toolBarGetToolPacking _obj 
  = withIntResult $
    withObjectRef "toolBarGetToolPacking" _obj $ \cobj__obj -> 
    wxToolBar_GetToolPacking cobj__obj  
foreign import ccall "wxToolBar_GetToolPacking" wxToolBar_GetToolPacking :: Ptr (TToolBar a) -> IO CInt

-- | usage: (@toolBarGetToolShortHelp obj id@).
toolBarGetToolShortHelp :: ToolBar  a -> Id ->  IO (String)
toolBarGetToolShortHelp _obj id 
  = withManagedStringResult $
    withObjectRef "toolBarGetToolShortHelp" _obj $ \cobj__obj -> 
    wxToolBar_GetToolShortHelp cobj__obj  (toCInt id)  
foreign import ccall "wxToolBar_GetToolShortHelp" wxToolBar_GetToolShortHelp :: Ptr (TToolBar a) -> CInt -> IO (Ptr (TWxString ()))

-- | usage: (@toolBarGetToolSize obj@).
toolBarGetToolSize :: ToolBar  a ->  IO (Size)
toolBarGetToolSize _obj 
  = withWxSizeResult $
    withObjectRef "toolBarGetToolSize" _obj $ \cobj__obj -> 
    wxToolBar_GetToolSize cobj__obj  
foreign import ccall "wxToolBar_GetToolSize" wxToolBar_GetToolSize :: Ptr (TToolBar a) -> IO (Ptr (TWxSize ()))

-- | usage: (@toolBarGetToolState obj id@).
toolBarGetToolState :: ToolBar  a -> Id ->  IO Bool
toolBarGetToolState _obj id 
  = withBoolResult $
    withObjectRef "toolBarGetToolState" _obj $ \cobj__obj -> 
    wxToolBar_GetToolState cobj__obj  (toCInt id)  
foreign import ccall "wxToolBar_GetToolState" wxToolBar_GetToolState :: Ptr (TToolBar a) -> CInt -> IO CBool

-- | usage: (@toolBarInsertControl obj pos ctrl@).
toolBarInsertControl :: ToolBar  a -> Int -> Control  c ->  IO ()
toolBarInsertControl _obj pos ctrl 
  = withObjectRef "toolBarInsertControl" _obj $ \cobj__obj -> 
    withObjectPtr ctrl $ \cobj_ctrl -> 
    wxToolBar_InsertControl cobj__obj  (toCInt pos)  cobj_ctrl  
foreign import ccall "wxToolBar_InsertControl" wxToolBar_InsertControl :: Ptr (TToolBar a) -> CInt -> Ptr (TControl c) -> IO ()

-- | usage: (@toolBarInsertSeparator obj pos@).
toolBarInsertSeparator :: ToolBar  a -> Int ->  IO ()
toolBarInsertSeparator _obj pos 
  = withObjectRef "toolBarInsertSeparator" _obj $ \cobj__obj -> 
    wxToolBar_InsertSeparator cobj__obj  (toCInt pos)  
foreign import ccall "wxToolBar_InsertSeparator" wxToolBar_InsertSeparator :: Ptr (TToolBar a) -> CInt -> IO ()

-- | usage: (@toolBarRealize obj@).
toolBarRealize :: ToolBar  a ->  IO Bool
toolBarRealize _obj 
  = withBoolResult $
    withObjectRef "toolBarRealize" _obj $ \cobj__obj -> 
    wxToolBar_Realize cobj__obj  
foreign import ccall "wxToolBar_Realize" wxToolBar_Realize :: Ptr (TToolBar a) -> IO CBool

-- | usage: (@toolBarRemoveTool obj id@).
toolBarRemoveTool :: ToolBar  a -> Id ->  IO ()
toolBarRemoveTool _obj id 
  = withObjectRef "toolBarRemoveTool" _obj $ \cobj__obj -> 
    wxToolBar_RemoveTool cobj__obj  (toCInt id)  
foreign import ccall "wxToolBar_RemoveTool" wxToolBar_RemoveTool :: Ptr (TToolBar a) -> CInt -> IO ()

-- | usage: (@toolBarSetMargins obj xy@).
toolBarSetMargins :: ToolBar  a -> Point ->  IO ()
toolBarSetMargins _obj xy 
  = withObjectRef "toolBarSetMargins" _obj $ \cobj__obj -> 
    wxToolBar_SetMargins cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
foreign import ccall "wxToolBar_SetMargins" wxToolBar_SetMargins :: Ptr (TToolBar a) -> CInt -> CInt -> IO ()

-- | usage: (@toolBarSetToolBitmapSize obj xy@).
toolBarSetToolBitmapSize :: ToolBar  a -> Size ->  IO ()
toolBarSetToolBitmapSize _obj xy 
  = withObjectRef "toolBarSetToolBitmapSize" _obj $ \cobj__obj -> 
    wxToolBar_SetToolBitmapSize cobj__obj  (toCIntSizeW xy) (toCIntSizeH xy)  
foreign import ccall "wxToolBar_SetToolBitmapSize" wxToolBar_SetToolBitmapSize :: Ptr (TToolBar a) -> CInt -> CInt -> IO ()

-- | usage: (@toolBarSetToolClientData obj id wxdata@).
toolBarSetToolClientData :: ToolBar  a -> Id -> WxObject  c ->  IO ()
toolBarSetToolClientData _obj id wxdata 
  = withObjectRef "toolBarSetToolClientData" _obj $ \cobj__obj -> 
    withObjectPtr wxdata $ \cobj_wxdata -> 
    wxToolBar_SetToolClientData cobj__obj  (toCInt id)  cobj_wxdata  
foreign import ccall "wxToolBar_SetToolClientData" wxToolBar_SetToolClientData :: Ptr (TToolBar a) -> CInt -> Ptr (TWxObject c) -> IO ()

-- | usage: (@toolBarSetToolLongHelp obj id str@).
toolBarSetToolLongHelp :: ToolBar  a -> Id -> String ->  IO ()
toolBarSetToolLongHelp _obj id str 
  = withObjectRef "toolBarSetToolLongHelp" _obj $ \cobj__obj -> 
    withStringPtr str $ \cobj_str -> 
    wxToolBar_SetToolLongHelp cobj__obj  (toCInt id)  cobj_str  
foreign import ccall "wxToolBar_SetToolLongHelp" wxToolBar_SetToolLongHelp :: Ptr (TToolBar a) -> CInt -> Ptr (TWxString c) -> IO ()

-- | usage: (@toolBarSetToolPacking obj packing@).
toolBarSetToolPacking :: ToolBar  a -> Int ->  IO ()
toolBarSetToolPacking _obj packing 
  = withObjectRef "toolBarSetToolPacking" _obj $ \cobj__obj -> 
    wxToolBar_SetToolPacking cobj__obj  (toCInt packing)  
foreign import ccall "wxToolBar_SetToolPacking" wxToolBar_SetToolPacking :: Ptr (TToolBar a) -> CInt -> IO ()

-- | usage: (@toolBarSetToolSeparation obj separation@).
toolBarSetToolSeparation :: ToolBar  a -> Int ->  IO ()
toolBarSetToolSeparation _obj separation 
  = withObjectRef "toolBarSetToolSeparation" _obj $ \cobj__obj -> 
    wxToolBar_SetToolSeparation cobj__obj  (toCInt separation)  
foreign import ccall "wxToolBar_SetToolSeparation" wxToolBar_SetToolSeparation :: Ptr (TToolBar a) -> CInt -> IO ()

-- | usage: (@toolBarSetToolShortHelp obj id str@).
toolBarSetToolShortHelp :: ToolBar  a -> Id -> String ->  IO ()
toolBarSetToolShortHelp _obj id str 
  = withObjectRef "toolBarSetToolShortHelp" _obj $ \cobj__obj -> 
    withStringPtr str $ \cobj_str -> 
    wxToolBar_SetToolShortHelp cobj__obj  (toCInt id)  cobj_str  
foreign import ccall "wxToolBar_SetToolShortHelp" wxToolBar_SetToolShortHelp :: Ptr (TToolBar a) -> CInt -> Ptr (TWxString c) -> IO ()

-- | usage: (@toolBarToggleTool obj id toggle@).
toolBarToggleTool :: ToolBar  a -> Id -> Bool ->  IO ()
toolBarToggleTool _obj id toggle 
  = withObjectRef "toolBarToggleTool" _obj $ \cobj__obj -> 
    wxToolBar_ToggleTool cobj__obj  (toCInt id)  (toCBool toggle)  
foreign import ccall "wxToolBar_ToggleTool" wxToolBar_ToggleTool :: Ptr (TToolBar a) -> CInt -> CBool -> IO ()

-- | usage: (@topLevelWindowEnableCloseButton obj enable@).
topLevelWindowEnableCloseButton :: TopLevelWindow  a -> Bool ->  IO Bool
topLevelWindowEnableCloseButton _obj enable 
  = withBoolResult $
    withObjectRef "topLevelWindowEnableCloseButton" _obj $ \cobj__obj -> 
    wxTopLevelWindow_EnableCloseButton cobj__obj  (toCBool enable)  
foreign import ccall "wxTopLevelWindow_EnableCloseButton" wxTopLevelWindow_EnableCloseButton :: Ptr (TTopLevelWindow a) -> CBool -> IO CBool

-- | usage: (@topLevelWindowGetDefaultButton obj@).
topLevelWindowGetDefaultButton :: TopLevelWindow  a ->  IO (Button  ())
topLevelWindowGetDefaultButton _obj 
  = withObjectResult $
    withObjectRef "topLevelWindowGetDefaultButton" _obj $ \cobj__obj -> 
    wxTopLevelWindow_GetDefaultButton cobj__obj  
foreign import ccall "wxTopLevelWindow_GetDefaultButton" wxTopLevelWindow_GetDefaultButton :: Ptr (TTopLevelWindow a) -> IO (Ptr (TButton ()))

-- | usage: (@topLevelWindowGetDefaultItem obj@).
topLevelWindowGetDefaultItem :: TopLevelWindow  a ->  IO (Window  ())
topLevelWindowGetDefaultItem _obj 
  = withObjectResult $
    withObjectRef "topLevelWindowGetDefaultItem" _obj $ \cobj__obj -> 
    wxTopLevelWindow_GetDefaultItem cobj__obj  
foreign import ccall "wxTopLevelWindow_GetDefaultItem" wxTopLevelWindow_GetDefaultItem :: Ptr (TTopLevelWindow a) -> IO (Ptr (TWindow ()))

-- | usage: (@topLevelWindowGetIcon obj@).
topLevelWindowGetIcon :: TopLevelWindow  a ->  IO (Icon  ())
topLevelWindowGetIcon _obj 
  = withManagedIconResult $
    withObjectRef "topLevelWindowGetIcon" _obj $ \cobj__obj -> 
    wxTopLevelWindow_GetIcon cobj__obj  
foreign import ccall "wxTopLevelWindow_GetIcon" wxTopLevelWindow_GetIcon :: Ptr (TTopLevelWindow a) -> IO (Ptr (TIcon ()))

-- | usage: (@topLevelWindowGetTitle obj@).
topLevelWindowGetTitle :: TopLevelWindow  a ->  IO (String)
topLevelWindowGetTitle _obj 
  = withManagedStringResult $
    withObjectRef "topLevelWindowGetTitle" _obj $ \cobj__obj -> 
    wxTopLevelWindow_GetTitle cobj__obj  
foreign import ccall "wxTopLevelWindow_GetTitle" wxTopLevelWindow_GetTitle :: Ptr (TTopLevelWindow a) -> IO (Ptr (TWxString ()))

-- | usage: (@topLevelWindowIconize obj iconize@).
topLevelWindowIconize :: TopLevelWindow  a -> Bool ->  IO Bool
topLevelWindowIconize _obj iconize 
  = withBoolResult $
    withObjectRef "topLevelWindowIconize" _obj $ \cobj__obj -> 
    wxTopLevelWindow_Iconize cobj__obj  (toCBool iconize)  
foreign import ccall "wxTopLevelWindow_Iconize" wxTopLevelWindow_Iconize :: Ptr (TTopLevelWindow a) -> CBool -> IO CBool

-- | usage: (@topLevelWindowIsActive obj@).
topLevelWindowIsActive :: TopLevelWindow  a ->  IO Bool
topLevelWindowIsActive _obj 
  = withBoolResult $
    withObjectRef "topLevelWindowIsActive" _obj $ \cobj__obj -> 
    wxTopLevelWindow_IsActive cobj__obj  
foreign import ccall "wxTopLevelWindow_IsActive" wxTopLevelWindow_IsActive :: Ptr (TTopLevelWindow a) -> IO CBool

-- | usage: (@topLevelWindowIsIconized obj@).
topLevelWindowIsIconized :: TopLevelWindow  a ->  IO Bool
topLevelWindowIsIconized _obj 
  = withBoolResult $
    withObjectRef "topLevelWindowIsIconized" _obj $ \cobj__obj -> 
    wxTopLevelWindow_IsIconized cobj__obj  
foreign import ccall "wxTopLevelWindow_IsIconized" wxTopLevelWindow_IsIconized :: Ptr (TTopLevelWindow a) -> IO CBool

-- | usage: (@topLevelWindowIsMaximized obj@).
topLevelWindowIsMaximized :: TopLevelWindow  a ->  IO Bool
topLevelWindowIsMaximized _obj 
  = withBoolResult $
    withObjectRef "topLevelWindowIsMaximized" _obj $ \cobj__obj -> 
    wxTopLevelWindow_IsMaximized cobj__obj  
foreign import ccall "wxTopLevelWindow_IsMaximized" wxTopLevelWindow_IsMaximized :: Ptr (TTopLevelWindow a) -> IO CBool

-- | usage: (@topLevelWindowMaximize obj maximize@).
topLevelWindowMaximize :: TopLevelWindow  a -> Bool ->  IO ()
topLevelWindowMaximize _obj maximize 
  = withObjectRef "topLevelWindowMaximize" _obj $ \cobj__obj -> 
    wxTopLevelWindow_Maximize cobj__obj  (toCBool maximize)  
foreign import ccall "wxTopLevelWindow_Maximize" wxTopLevelWindow_Maximize :: Ptr (TTopLevelWindow a) -> CBool -> IO ()

-- | usage: (@topLevelWindowRequestUserAttention obj flags@).
topLevelWindowRequestUserAttention :: TopLevelWindow  a -> Int ->  IO ()
topLevelWindowRequestUserAttention _obj flags 
  = withObjectRef "topLevelWindowRequestUserAttention" _obj $ \cobj__obj -> 
    wxTopLevelWindow_RequestUserAttention cobj__obj  (toCInt flags)  
foreign import ccall "wxTopLevelWindow_RequestUserAttention" wxTopLevelWindow_RequestUserAttention :: Ptr (TTopLevelWindow a) -> CInt -> IO ()

-- | usage: (@topLevelWindowSetDefaultButton obj pBut@).
topLevelWindowSetDefaultButton :: TopLevelWindow  a -> Button  b ->  IO ()
topLevelWindowSetDefaultButton _obj pBut 
  = withObjectRef "topLevelWindowSetDefaultButton" _obj $ \cobj__obj -> 
    withObjectPtr pBut $ \cobj_pBut -> 
    wxTopLevelWindow_SetDefaultButton cobj__obj  cobj_pBut  
foreign import ccall "wxTopLevelWindow_SetDefaultButton" wxTopLevelWindow_SetDefaultButton :: Ptr (TTopLevelWindow a) -> Ptr (TButton b) -> IO ()

-- | usage: (@topLevelWindowSetDefaultItem obj pBut@).
topLevelWindowSetDefaultItem :: TopLevelWindow  a -> Window  b ->  IO ()
topLevelWindowSetDefaultItem _obj pBut 
  = withObjectRef "topLevelWindowSetDefaultItem" _obj $ \cobj__obj -> 
    withObjectPtr pBut $ \cobj_pBut -> 
    wxTopLevelWindow_SetDefaultItem cobj__obj  cobj_pBut  
foreign import ccall "wxTopLevelWindow_SetDefaultItem" wxTopLevelWindow_SetDefaultItem :: Ptr (TTopLevelWindow a) -> Ptr (TWindow b) -> IO ()

-- | usage: (@topLevelWindowSetIcon obj pIcon@).
topLevelWindowSetIcon :: TopLevelWindow  a -> Icon  b ->  IO ()
topLevelWindowSetIcon _obj pIcon 
  = withObjectRef "topLevelWindowSetIcon" _obj $ \cobj__obj -> 
    withObjectPtr pIcon $ \cobj_pIcon -> 
    wxTopLevelWindow_SetIcon cobj__obj  cobj_pIcon  
foreign import ccall "wxTopLevelWindow_SetIcon" wxTopLevelWindow_SetIcon :: Ptr (TTopLevelWindow a) -> Ptr (TIcon b) -> IO ()

-- | usage: (@topLevelWindowSetIcons obj icons@).
topLevelWindowSetIcons :: TopLevelWindow  a -> Ptr  b ->  IO ()
topLevelWindowSetIcons _obj _icons 
  = withObjectRef "topLevelWindowSetIcons" _obj $ \cobj__obj -> 
    wxTopLevelWindow_SetIcons cobj__obj  _icons  
foreign import ccall "wxTopLevelWindow_SetIcons" wxTopLevelWindow_SetIcons :: Ptr (TTopLevelWindow a) -> Ptr  b -> IO ()

-- | usage: (@topLevelWindowSetMaxSize obj wh@).
topLevelWindowSetMaxSize :: TopLevelWindow  a -> Size ->  IO ()
topLevelWindowSetMaxSize _obj wh 
  = withObjectRef "topLevelWindowSetMaxSize" _obj $ \cobj__obj -> 
    wxTopLevelWindow_SetMaxSize cobj__obj  (toCIntSizeW wh) (toCIntSizeH wh)  
foreign import ccall "wxTopLevelWindow_SetMaxSize" wxTopLevelWindow_SetMaxSize :: Ptr (TTopLevelWindow a) -> CInt -> CInt -> IO ()

-- | usage: (@topLevelWindowSetMinSize obj wh@).
topLevelWindowSetMinSize :: TopLevelWindow  a -> Size ->  IO ()
topLevelWindowSetMinSize _obj wh 
  = withObjectRef "topLevelWindowSetMinSize" _obj $ \cobj__obj -> 
    wxTopLevelWindow_SetMinSize cobj__obj  (toCIntSizeW wh) (toCIntSizeH wh)  
foreign import ccall "wxTopLevelWindow_SetMinSize" wxTopLevelWindow_SetMinSize :: Ptr (TTopLevelWindow a) -> CInt -> CInt -> IO ()

-- | usage: (@topLevelWindowSetTitle obj pString@).
topLevelWindowSetTitle :: TopLevelWindow  a -> String ->  IO ()
topLevelWindowSetTitle _obj pString 
  = withObjectRef "topLevelWindowSetTitle" _obj $ \cobj__obj -> 
    withStringPtr pString $ \cobj_pString -> 
    wxTopLevelWindow_SetTitle cobj__obj  cobj_pString  
foreign import ccall "wxTopLevelWindow_SetTitle" wxTopLevelWindow_SetTitle :: Ptr (TTopLevelWindow a) -> Ptr (TWxString b) -> IO ()

-- | usage: (@treeCtrlAddRoot obj text image selectedImage wxdata@).
treeCtrlAddRoot :: TreeCtrl  a -> String -> Int -> Int -> TreeItemData  e ->  IO (TreeItem)
treeCtrlAddRoot _obj text image selectedImage wxdata 
  = withRefTreeItemId $ \pref -> 
    withObjectRef "treeCtrlAddRoot" _obj $ \cobj__obj -> 
    withStringPtr text $ \cobj_text -> 
    withObjectPtr wxdata $ \cobj_wxdata -> 
    wxTreeCtrl_AddRoot cobj__obj  cobj_text  (toCInt image)  (toCInt selectedImage)  cobj_wxdata   pref
foreign import ccall "wxTreeCtrl_AddRoot" wxTreeCtrl_AddRoot :: Ptr (TTreeCtrl a) -> Ptr (TWxString b) -> CInt -> CInt -> Ptr (TTreeItemData e) -> Ptr (TTreeItemId ()) -> IO ()

-- | usage: (@treeCtrlAppendItem obj parent text image selectedImage wxdata@).
treeCtrlAppendItem :: TreeCtrl  a -> TreeItem -> String -> Int -> Int -> TreeItemData  f ->  IO (TreeItem)
treeCtrlAppendItem _obj parent text image selectedImage wxdata 
  = withRefTreeItemId $ \pref -> 
    withObjectRef "treeCtrlAppendItem" _obj $ \cobj__obj -> 
    withTreeItemIdPtr parent $ \cobj_parent -> 
    withStringPtr text $ \cobj_text -> 
    withObjectPtr wxdata $ \cobj_wxdata -> 
    wxTreeCtrl_AppendItem cobj__obj  cobj_parent  cobj_text  (toCInt image)  (toCInt selectedImage)  cobj_wxdata   pref
foreign import ccall "wxTreeCtrl_AppendItem" wxTreeCtrl_AppendItem :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> Ptr (TWxString c) -> CInt -> CInt -> Ptr (TTreeItemData f) -> Ptr (TTreeItemId ()) -> IO ()

-- | usage: (@treeCtrlAssignImageList obj imageList@).
treeCtrlAssignImageList :: TreeCtrl  a -> ImageList  b ->  IO ()
treeCtrlAssignImageList _obj imageList 
  = withObjectRef "treeCtrlAssignImageList" _obj $ \cobj__obj -> 
    withObjectPtr imageList $ \cobj_imageList -> 
    wxTreeCtrl_AssignImageList cobj__obj  cobj_imageList  
foreign import ccall "wxTreeCtrl_AssignImageList" wxTreeCtrl_AssignImageList :: Ptr (TTreeCtrl a) -> Ptr (TImageList b) -> IO ()

-- | usage: (@treeCtrlAssignStateImageList obj imageList@).
treeCtrlAssignStateImageList :: TreeCtrl  a -> ImageList  b ->  IO ()
treeCtrlAssignStateImageList _obj imageList 
  = withObjectRef "treeCtrlAssignStateImageList" _obj $ \cobj__obj -> 
    withObjectPtr imageList $ \cobj_imageList -> 
    wxTreeCtrl_AssignStateImageList cobj__obj  cobj_imageList  
foreign import ccall "wxTreeCtrl_AssignStateImageList" wxTreeCtrl_AssignStateImageList :: Ptr (TTreeCtrl a) -> Ptr (TImageList b) -> IO ()

-- | usage: (@treeCtrlCollapse obj item@).
treeCtrlCollapse :: TreeCtrl  a -> TreeItem ->  IO ()
treeCtrlCollapse _obj item 
  = withObjectRef "treeCtrlCollapse" _obj $ \cobj__obj -> 
    withTreeItemIdPtr item $ \cobj_item -> 
    wxTreeCtrl_Collapse cobj__obj  cobj_item  
foreign import ccall "wxTreeCtrl_Collapse" wxTreeCtrl_Collapse :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> IO ()

-- | usage: (@treeCtrlCollapseAndReset obj item@).
treeCtrlCollapseAndReset :: TreeCtrl  a -> TreeItem ->  IO ()
treeCtrlCollapseAndReset _obj item 
  = withObjectRef "treeCtrlCollapseAndReset" _obj $ \cobj__obj -> 
    withTreeItemIdPtr item $ \cobj_item -> 
    wxTreeCtrl_CollapseAndReset cobj__obj  cobj_item  
foreign import ccall "wxTreeCtrl_CollapseAndReset" wxTreeCtrl_CollapseAndReset :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> IO ()

-- | usage: (@treeCtrlCreate obj cmp prt id lfttopwdthgt stl@).
treeCtrlCreate :: Ptr  a -> Ptr  b -> Window  c -> Id -> Rect -> Style ->  IO (TreeCtrl  ())
treeCtrlCreate _obj _cmp _prt _id _lfttopwdthgt _stl 
  = withObjectResult $
    withObjectPtr _prt $ \cobj__prt -> 
    wxTreeCtrl_Create _obj  _cmp  cobj__prt  (toCInt _id)  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
foreign import ccall "wxTreeCtrl_Create" wxTreeCtrl_Create :: Ptr  a -> Ptr  b -> Ptr (TWindow c) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TTreeCtrl ()))

-- | usage: (@treeCtrlCreate2 prt id lfttopwdthgt stl@).
treeCtrlCreate2 :: Window  a -> Id -> Rect -> Style ->  IO (TreeCtrl  ())
treeCtrlCreate2 _prt _id _lfttopwdthgt _stl 
  = withObjectResult $
    withObjectPtr _prt $ \cobj__prt -> 
    wxTreeCtrl_Create2 cobj__prt  (toCInt _id)  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  
foreign import ccall "wxTreeCtrl_Create2" wxTreeCtrl_Create2 :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TTreeCtrl ()))

-- | usage: (@treeCtrlDelete obj item@).
treeCtrlDelete :: TreeCtrl  a -> TreeItem ->  IO ()
treeCtrlDelete _obj item 
  = withObjectRef "treeCtrlDelete" _obj $ \cobj__obj -> 
    withTreeItemIdPtr item $ \cobj_item -> 
    wxTreeCtrl_Delete cobj__obj  cobj_item  
foreign import ccall "wxTreeCtrl_Delete" wxTreeCtrl_Delete :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> IO ()

-- | usage: (@treeCtrlDeleteAllItems obj@).
treeCtrlDeleteAllItems :: TreeCtrl  a ->  IO ()
treeCtrlDeleteAllItems _obj 
  = withObjectRef "treeCtrlDeleteAllItems" _obj $ \cobj__obj -> 
    wxTreeCtrl_DeleteAllItems cobj__obj  
foreign import ccall "wxTreeCtrl_DeleteAllItems" wxTreeCtrl_DeleteAllItems :: Ptr (TTreeCtrl a) -> IO ()

-- | usage: (@treeCtrlDeleteChildren obj item@).
treeCtrlDeleteChildren :: TreeCtrl  a -> TreeItem ->  IO ()
treeCtrlDeleteChildren _obj item 
  = withObjectRef "treeCtrlDeleteChildren" _obj $ \cobj__obj -> 
    withTreeItemIdPtr item $ \cobj_item -> 
    wxTreeCtrl_DeleteChildren cobj__obj  cobj_item  
foreign import ccall "wxTreeCtrl_DeleteChildren" wxTreeCtrl_DeleteChildren :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> IO ()

-- | usage: (@treeCtrlEditLabel obj item@).
treeCtrlEditLabel :: TreeCtrl  a -> TreeItem ->  IO ()
treeCtrlEditLabel _obj item 
  = withObjectRef "treeCtrlEditLabel" _obj $ \cobj__obj -> 
    withTreeItemIdPtr item $ \cobj_item -> 
    wxTreeCtrl_EditLabel cobj__obj  cobj_item  
foreign import ccall "wxTreeCtrl_EditLabel" wxTreeCtrl_EditLabel :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> IO ()

-- | usage: (@treeCtrlEndEditLabel obj item discardChanges@).
treeCtrlEndEditLabel :: TreeCtrl  a -> TreeItem -> Bool ->  IO ()
treeCtrlEndEditLabel _obj item discardChanges 
  = withObjectRef "treeCtrlEndEditLabel" _obj $ \cobj__obj -> 
    withTreeItemIdPtr item $ \cobj_item -> 
    wxTreeCtrl_EndEditLabel cobj__obj  cobj_item  (toCBool discardChanges)  
foreign import ccall "wxTreeCtrl_EndEditLabel" wxTreeCtrl_EndEditLabel :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> CBool -> IO ()

-- | usage: (@treeCtrlEnsureVisible obj item@).
treeCtrlEnsureVisible :: TreeCtrl  a -> TreeItem ->  IO ()
treeCtrlEnsureVisible _obj item 
  = withObjectRef "treeCtrlEnsureVisible" _obj $ \cobj__obj -> 
    withTreeItemIdPtr item $ \cobj_item -> 
    wxTreeCtrl_EnsureVisible cobj__obj  cobj_item  
foreign import ccall "wxTreeCtrl_EnsureVisible" wxTreeCtrl_EnsureVisible :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> IO ()

-- | usage: (@treeCtrlExpand obj item@).
treeCtrlExpand :: TreeCtrl  a -> TreeItem ->  IO ()
treeCtrlExpand _obj item 
  = withObjectRef "treeCtrlExpand" _obj $ \cobj__obj -> 
    withTreeItemIdPtr item $ \cobj_item -> 
    wxTreeCtrl_Expand cobj__obj  cobj_item  
foreign import ccall "wxTreeCtrl_Expand" wxTreeCtrl_Expand :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> IO ()

-- | usage: (@treeCtrlGetBoundingRect obj item textOnly@).
treeCtrlGetBoundingRect :: TreeCtrl  a -> TreeItem -> Bool ->  IO (Rect)
treeCtrlGetBoundingRect _obj item textOnly 
  = withWxRectResult $
    withObjectRef "treeCtrlGetBoundingRect" _obj $ \cobj__obj -> 
    withTreeItemIdPtr item $ \cobj_item -> 
    wxTreeCtrl_GetBoundingRect cobj__obj  cobj_item  (toCBool textOnly)  
foreign import ccall "wxTreeCtrl_GetBoundingRect" wxTreeCtrl_GetBoundingRect :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> CBool -> IO (Ptr (TWxRect ()))

-- | usage: (@treeCtrlGetChildrenCount obj item recursively@).
treeCtrlGetChildrenCount :: TreeCtrl  a -> TreeItem -> Bool ->  IO Int
treeCtrlGetChildrenCount _obj item recursively 
  = withIntResult $
    withObjectRef "treeCtrlGetChildrenCount" _obj $ \cobj__obj -> 
    withTreeItemIdPtr item $ \cobj_item -> 
    wxTreeCtrl_GetChildrenCount cobj__obj  cobj_item  (toCBool recursively)  
foreign import ccall "wxTreeCtrl_GetChildrenCount" wxTreeCtrl_GetChildrenCount :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> CBool -> IO CInt

-- | usage: (@treeCtrlGetCount obj@).
treeCtrlGetCount :: TreeCtrl  a ->  IO Int
treeCtrlGetCount _obj 
  = withIntResult $
    withObjectRef "treeCtrlGetCount" _obj $ \cobj__obj -> 
    wxTreeCtrl_GetCount cobj__obj  
foreign import ccall "wxTreeCtrl_GetCount" wxTreeCtrl_GetCount :: Ptr (TTreeCtrl a) -> IO CInt

-- | usage: (@treeCtrlGetEditControl obj@).
treeCtrlGetEditControl :: TreeCtrl  a ->  IO (TextCtrl  ())
treeCtrlGetEditControl _obj 
  = withObjectResult $
    withObjectRef "treeCtrlGetEditControl" _obj $ \cobj__obj -> 
    wxTreeCtrl_GetEditControl cobj__obj  
foreign import ccall "wxTreeCtrl_GetEditControl" wxTreeCtrl_GetEditControl :: Ptr (TTreeCtrl a) -> IO (Ptr (TTextCtrl ()))

-- | usage: (@treeCtrlGetFirstChild obj item cookie@).
treeCtrlGetFirstChild :: TreeCtrl  a -> TreeItem -> Ptr CInt ->  IO (TreeItem)
treeCtrlGetFirstChild _obj item cookie 
  = withRefTreeItemId $ \pref -> 
    withObjectRef "treeCtrlGetFirstChild" _obj $ \cobj__obj -> 
    withTreeItemIdPtr item $ \cobj_item -> 
    wxTreeCtrl_GetFirstChild cobj__obj  cobj_item  cookie   pref
foreign import ccall "wxTreeCtrl_GetFirstChild" wxTreeCtrl_GetFirstChild :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> Ptr CInt -> Ptr (TTreeItemId ()) -> IO ()

-- | usage: (@treeCtrlGetFirstVisibleItem obj item@).
treeCtrlGetFirstVisibleItem :: TreeCtrl  a -> TreeItem ->  IO (TreeItem)
treeCtrlGetFirstVisibleItem _obj item 
  = withRefTreeItemId $ \pref -> 
    withObjectRef "treeCtrlGetFirstVisibleItem" _obj $ \cobj__obj -> 
    withTreeItemIdPtr item $ \cobj_item -> 
    wxTreeCtrl_GetFirstVisibleItem cobj__obj  cobj_item   pref
foreign import ccall "wxTreeCtrl_GetFirstVisibleItem" wxTreeCtrl_GetFirstVisibleItem :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> Ptr (TTreeItemId ()) -> IO ()

-- | usage: (@treeCtrlGetImageList obj@).
treeCtrlGetImageList :: TreeCtrl  a ->  IO (ImageList  ())
treeCtrlGetImageList _obj 
  = withObjectResult $
    withObjectRef "treeCtrlGetImageList" _obj $ \cobj__obj -> 
    wxTreeCtrl_GetImageList cobj__obj  
foreign import ccall "wxTreeCtrl_GetImageList" wxTreeCtrl_GetImageList :: Ptr (TTreeCtrl a) -> IO (Ptr (TImageList ()))

-- | usage: (@treeCtrlGetIndent obj@).
treeCtrlGetIndent :: TreeCtrl  a ->  IO Int
treeCtrlGetIndent _obj 
  = withIntResult $
    withObjectRef "treeCtrlGetIndent" _obj $ \cobj__obj -> 
    wxTreeCtrl_GetIndent cobj__obj  
foreign import ccall "wxTreeCtrl_GetIndent" wxTreeCtrl_GetIndent :: Ptr (TTreeCtrl a) -> IO CInt

-- | usage: (@treeCtrlGetItemClientClosure obj item@).
treeCtrlGetItemClientClosure :: TreeCtrl  a -> TreeItem ->  IO (Closure  ())
treeCtrlGetItemClientClosure _obj item 
  = withObjectResult $
    withObjectRef "treeCtrlGetItemClientClosure" _obj $ \cobj__obj -> 
    withTreeItemIdPtr item $ \cobj_item -> 
    wxTreeCtrl_GetItemClientClosure cobj__obj  cobj_item  
foreign import ccall "wxTreeCtrl_GetItemClientClosure" wxTreeCtrl_GetItemClientClosure :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> IO (Ptr (TClosure ()))

-- | usage: (@treeCtrlGetItemData obj item@).
treeCtrlGetItemData :: TreeCtrl  a -> TreeItem ->  IO (Ptr  ())
treeCtrlGetItemData _obj item 
  = withObjectRef "treeCtrlGetItemData" _obj $ \cobj__obj -> 
    withTreeItemIdPtr item $ \cobj_item -> 
    wxTreeCtrl_GetItemData cobj__obj  cobj_item  
foreign import ccall "wxTreeCtrl_GetItemData" wxTreeCtrl_GetItemData :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> IO (Ptr  ())

-- | usage: (@treeCtrlGetItemImage obj item which@).
treeCtrlGetItemImage :: TreeCtrl  a -> TreeItem -> Int ->  IO Int
treeCtrlGetItemImage _obj item which 
  = withIntResult $
    withObjectRef "treeCtrlGetItemImage" _obj $ \cobj__obj -> 
    withTreeItemIdPtr item $ \cobj_item -> 
    wxTreeCtrl_GetItemImage cobj__obj  cobj_item  (toCInt which)  
foreign import ccall "wxTreeCtrl_GetItemImage" wxTreeCtrl_GetItemImage :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> CInt -> IO CInt

-- | usage: (@treeCtrlGetItemText obj item@).
treeCtrlGetItemText :: TreeCtrl  a -> TreeItem ->  IO (String)
treeCtrlGetItemText _obj item 
  = withManagedStringResult $
    withObjectRef "treeCtrlGetItemText" _obj $ \cobj__obj -> 
    withTreeItemIdPtr item $ \cobj_item -> 
    wxTreeCtrl_GetItemText cobj__obj  cobj_item  
foreign import ccall "wxTreeCtrl_GetItemText" wxTreeCtrl_GetItemText :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> IO (Ptr (TWxString ()))

-- | usage: (@treeCtrlGetLastChild obj item@).
treeCtrlGetLastChild :: TreeCtrl  a -> TreeItem ->  IO (TreeItem)
treeCtrlGetLastChild _obj item 
  = withRefTreeItemId $ \pref -> 
    withObjectRef "treeCtrlGetLastChild" _obj $ \cobj__obj -> 
    withTreeItemIdPtr item $ \cobj_item -> 
    wxTreeCtrl_GetLastChild cobj__obj  cobj_item   pref
foreign import ccall "wxTreeCtrl_GetLastChild" wxTreeCtrl_GetLastChild :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> Ptr (TTreeItemId ()) -> IO ()

-- | usage: (@treeCtrlGetNextChild obj item cookie@).
treeCtrlGetNextChild :: TreeCtrl  a -> TreeItem -> Ptr CInt ->  IO (TreeItem)
treeCtrlGetNextChild _obj item cookie 
  = withRefTreeItemId $ \pref -> 
    withObjectRef "treeCtrlGetNextChild" _obj $ \cobj__obj -> 
    withTreeItemIdPtr item $ \cobj_item -> 
    wxTreeCtrl_GetNextChild cobj__obj  cobj_item  cookie   pref
foreign import ccall "wxTreeCtrl_GetNextChild" wxTreeCtrl_GetNextChild :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> Ptr CInt -> Ptr (TTreeItemId ()) -> IO ()

-- | usage: (@treeCtrlGetNextSibling obj item@).
treeCtrlGetNextSibling :: TreeCtrl  a -> TreeItem ->  IO (TreeItem)
treeCtrlGetNextSibling _obj item 
  = withRefTreeItemId $ \pref -> 
    withObjectRef "treeCtrlGetNextSibling" _obj $ \cobj__obj -> 
    withTreeItemIdPtr item $ \cobj_item -> 
    wxTreeCtrl_GetNextSibling cobj__obj  cobj_item   pref
foreign import ccall "wxTreeCtrl_GetNextSibling" wxTreeCtrl_GetNextSibling :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> Ptr (TTreeItemId ()) -> IO ()

-- | usage: (@treeCtrlGetNextVisible obj item@).
treeCtrlGetNextVisible :: TreeCtrl  a -> TreeItem ->  IO (TreeItem)
treeCtrlGetNextVisible _obj item 
  = withRefTreeItemId $ \pref -> 
    withObjectRef "treeCtrlGetNextVisible" _obj $ \cobj__obj -> 
    withTreeItemIdPtr item $ \cobj_item -> 
    wxTreeCtrl_GetNextVisible cobj__obj  cobj_item   pref
foreign import ccall "wxTreeCtrl_GetNextVisible" wxTreeCtrl_GetNextVisible :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> Ptr (TTreeItemId ()) -> IO ()

-- | usage: (@treeCtrlGetParent obj item@).
treeCtrlGetParent :: TreeCtrl  a -> TreeItem ->  IO (TreeItem)
treeCtrlGetParent _obj item 
  = withRefTreeItemId $ \pref -> 
    withObjectRef "treeCtrlGetParent" _obj $ \cobj__obj -> 
    withTreeItemIdPtr item $ \cobj_item -> 
    wxTreeCtrl_GetParent cobj__obj  cobj_item   pref
foreign import ccall "wxTreeCtrl_GetParent" wxTreeCtrl_GetParent :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> Ptr (TTreeItemId ()) -> IO ()

-- | usage: (@treeCtrlGetPrevSibling obj item@).
treeCtrlGetPrevSibling :: TreeCtrl  a -> TreeItem ->  IO (TreeItem)
treeCtrlGetPrevSibling _obj item 
  = withRefTreeItemId $ \pref -> 
    withObjectRef "treeCtrlGetPrevSibling" _obj $ \cobj__obj -> 
    withTreeItemIdPtr item $ \cobj_item -> 
    wxTreeCtrl_GetPrevSibling cobj__obj  cobj_item   pref
foreign import ccall "wxTreeCtrl_GetPrevSibling" wxTreeCtrl_GetPrevSibling :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> Ptr (TTreeItemId ()) -> IO ()

-- | usage: (@treeCtrlGetPrevVisible obj item@).
treeCtrlGetPrevVisible :: TreeCtrl  a -> TreeItem ->  IO (TreeItem)
treeCtrlGetPrevVisible _obj item 
  = withRefTreeItemId $ \pref -> 
    withObjectRef "treeCtrlGetPrevVisible" _obj $ \cobj__obj -> 
    withTreeItemIdPtr item $ \cobj_item -> 
    wxTreeCtrl_GetPrevVisible cobj__obj  cobj_item   pref
foreign import ccall "wxTreeCtrl_GetPrevVisible" wxTreeCtrl_GetPrevVisible :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> Ptr (TTreeItemId ()) -> IO ()

-- | usage: (@treeCtrlGetRootItem obj@).
treeCtrlGetRootItem :: TreeCtrl  a ->  IO (TreeItem)
treeCtrlGetRootItem _obj 
  = withRefTreeItemId $ \pref -> 
    withObjectRef "treeCtrlGetRootItem" _obj $ \cobj__obj -> 
    wxTreeCtrl_GetRootItem cobj__obj   pref
foreign import ccall "wxTreeCtrl_GetRootItem" wxTreeCtrl_GetRootItem :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId ()) -> IO ()

-- | usage: (@treeCtrlGetSelection obj@).
treeCtrlGetSelection :: TreeCtrl  a ->  IO (TreeItem)
treeCtrlGetSelection _obj 
  = withRefTreeItemId $ \pref -> 
    withObjectRef "treeCtrlGetSelection" _obj $ \cobj__obj -> 
    wxTreeCtrl_GetSelection cobj__obj   pref
foreign import ccall "wxTreeCtrl_GetSelection" wxTreeCtrl_GetSelection :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId ()) -> IO ()

-- | usage: (@treeCtrlGetSelections obj@).
treeCtrlGetSelections :: TreeCtrl  a ->  IO [IntPtr]
treeCtrlGetSelections _obj 
  = withArrayIntPtrResult $ \arr -> 
    withObjectRef "treeCtrlGetSelections" _obj $ \cobj__obj -> 
    wxTreeCtrl_GetSelections cobj__obj   arr
foreign import ccall "wxTreeCtrl_GetSelections" wxTreeCtrl_GetSelections :: Ptr (TTreeCtrl a) -> Ptr CIntPtr -> IO CInt

-- | usage: (@treeCtrlGetSpacing obj@).
treeCtrlGetSpacing :: TreeCtrl  a ->  IO Int
treeCtrlGetSpacing _obj 
  = withIntResult $
    withObjectRef "treeCtrlGetSpacing" _obj $ \cobj__obj -> 
    wxTreeCtrl_GetSpacing cobj__obj  
foreign import ccall "wxTreeCtrl_GetSpacing" wxTreeCtrl_GetSpacing :: Ptr (TTreeCtrl a) -> IO CInt

-- | usage: (@treeCtrlGetStateImageList obj@).
treeCtrlGetStateImageList :: TreeCtrl  a ->  IO (ImageList  ())
treeCtrlGetStateImageList _obj 
  = withObjectResult $
    withObjectRef "treeCtrlGetStateImageList" _obj $ \cobj__obj -> 
    wxTreeCtrl_GetStateImageList cobj__obj  
foreign import ccall "wxTreeCtrl_GetStateImageList" wxTreeCtrl_GetStateImageList :: Ptr (TTreeCtrl a) -> IO (Ptr (TImageList ()))

-- | usage: (@treeCtrlHitTest obj xy flags@).
treeCtrlHitTest :: TreeCtrl  a -> Point -> Ptr CInt ->  IO (TreeItem)
treeCtrlHitTest _obj _xy flags 
  = withRefTreeItemId $ \pref -> 
    withObjectRef "treeCtrlHitTest" _obj $ \cobj__obj -> 
    wxTreeCtrl_HitTest cobj__obj  (toCIntPointX _xy) (toCIntPointY _xy)  flags   pref
foreign import ccall "wxTreeCtrl_HitTest" wxTreeCtrl_HitTest :: Ptr (TTreeCtrl a) -> CInt -> CInt -> Ptr CInt -> Ptr (TTreeItemId ()) -> IO ()

-- | usage: (@treeCtrlInsertItem obj parent idPrevious text image selectedImage wxdata@).
treeCtrlInsertItem :: TreeCtrl  a -> TreeItem -> TreeItem -> String -> Int -> Int -> Ptr  g ->  IO (TreeItem)
treeCtrlInsertItem _obj parent idPrevious text image selectedImage wxdata 
  = withRefTreeItemId $ \pref -> 
    withObjectRef "treeCtrlInsertItem" _obj $ \cobj__obj -> 
    withTreeItemIdPtr parent $ \cobj_parent -> 
    withTreeItemIdPtr idPrevious $ \cobj_idPrevious -> 
    withStringPtr text $ \cobj_text -> 
    wxTreeCtrl_InsertItem cobj__obj  cobj_parent  cobj_idPrevious  cobj_text  (toCInt image)  (toCInt selectedImage)  wxdata   pref
foreign import ccall "wxTreeCtrl_InsertItem" wxTreeCtrl_InsertItem :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> Ptr (TTreeItemId c) -> Ptr (TWxString d) -> CInt -> CInt -> Ptr  g -> Ptr (TTreeItemId ()) -> IO ()

-- | usage: (@treeCtrlInsertItem2 obj parent idPrevious text image selectedImage closure@).
treeCtrlInsertItem2 :: TreeCtrl  a -> Window  b -> TreeItem -> String -> Int -> Int -> Closure  g ->  IO (TreeItem)
treeCtrlInsertItem2 _obj parent idPrevious text image selectedImage closure 
  = withRefTreeItemId $ \pref -> 
    withObjectRef "treeCtrlInsertItem2" _obj $ \cobj__obj -> 
    withObjectPtr parent $ \cobj_parent -> 
    withTreeItemIdPtr idPrevious $ \cobj_idPrevious -> 
    withStringPtr text $ \cobj_text -> 
    withObjectPtr closure $ \cobj_closure -> 
    wxTreeCtrl_InsertItem2 cobj__obj  cobj_parent  cobj_idPrevious  cobj_text  (toCInt image)  (toCInt selectedImage)  cobj_closure   pref
foreign import ccall "wxTreeCtrl_InsertItem2" wxTreeCtrl_InsertItem2 :: Ptr (TTreeCtrl a) -> Ptr (TWindow b) -> Ptr (TTreeItemId c) -> Ptr (TWxString d) -> CInt -> CInt -> Ptr (TClosure g) -> Ptr (TTreeItemId ()) -> IO ()

-- | usage: (@treeCtrlInsertItemByIndex obj parent index text image selectedImage wxdata@).
treeCtrlInsertItemByIndex :: TreeCtrl  a -> TreeItem -> Int -> String -> Int -> Int -> Ptr  g ->  IO (TreeItem)
treeCtrlInsertItemByIndex _obj parent index text image selectedImage wxdata 
  = withRefTreeItemId $ \pref -> 
    withObjectRef "treeCtrlInsertItemByIndex" _obj $ \cobj__obj -> 
    withTreeItemIdPtr parent $ \cobj_parent -> 
    withStringPtr text $ \cobj_text -> 
    wxTreeCtrl_InsertItemByIndex cobj__obj  cobj_parent  (toCInt index)  cobj_text  (toCInt image)  (toCInt selectedImage)  wxdata   pref
foreign import ccall "wxTreeCtrl_InsertItemByIndex" wxTreeCtrl_InsertItemByIndex :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> CInt -> Ptr (TWxString d) -> CInt -> CInt -> Ptr  g -> Ptr (TTreeItemId ()) -> IO ()

-- | usage: (@treeCtrlInsertItemByIndex2 obj parent index text image selectedImage closure@).
treeCtrlInsertItemByIndex2 :: TreeCtrl  a -> Window  b -> Int -> String -> Int -> Int -> Closure  g ->  IO (TreeItem)
treeCtrlInsertItemByIndex2 _obj parent index text image selectedImage closure 
  = withRefTreeItemId $ \pref -> 
    withObjectRef "treeCtrlInsertItemByIndex2" _obj $ \cobj__obj -> 
    withObjectPtr parent $ \cobj_parent -> 
    withStringPtr text $ \cobj_text -> 
    withObjectPtr closure $ \cobj_closure -> 
    wxTreeCtrl_InsertItemByIndex2 cobj__obj  cobj_parent  (toCInt index)  cobj_text  (toCInt image)  (toCInt selectedImage)  cobj_closure   pref
foreign import ccall "wxTreeCtrl_InsertItemByIndex2" wxTreeCtrl_InsertItemByIndex2 :: Ptr (TTreeCtrl a) -> Ptr (TWindow b) -> CInt -> Ptr (TWxString d) -> CInt -> CInt -> Ptr (TClosure g) -> Ptr (TTreeItemId ()) -> IO ()

-- | usage: (@treeCtrlIsBold obj item@).
treeCtrlIsBold :: TreeCtrl  a -> TreeItem ->  IO Bool
treeCtrlIsBold _obj item 
  = withBoolResult $
    withObjectRef "treeCtrlIsBold" _obj $ \cobj__obj -> 
    withTreeItemIdPtr item $ \cobj_item -> 
    wxTreeCtrl_IsBold cobj__obj  cobj_item  
foreign import ccall "wxTreeCtrl_IsBold" wxTreeCtrl_IsBold :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> IO CBool

-- | usage: (@treeCtrlIsExpanded obj item@).
treeCtrlIsExpanded :: TreeCtrl  a -> TreeItem ->  IO Bool
treeCtrlIsExpanded _obj item 
  = withBoolResult $
    withObjectRef "treeCtrlIsExpanded" _obj $ \cobj__obj -> 
    withTreeItemIdPtr item $ \cobj_item -> 
    wxTreeCtrl_IsExpanded cobj__obj  cobj_item  
foreign import ccall "wxTreeCtrl_IsExpanded" wxTreeCtrl_IsExpanded :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> IO CBool

-- | usage: (@treeCtrlIsSelected obj item@).
treeCtrlIsSelected :: TreeCtrl  a -> TreeItem ->  IO Bool
treeCtrlIsSelected _obj item 
  = withBoolResult $
    withObjectRef "treeCtrlIsSelected" _obj $ \cobj__obj -> 
    withTreeItemIdPtr item $ \cobj_item -> 
    wxTreeCtrl_IsSelected cobj__obj  cobj_item  
foreign import ccall "wxTreeCtrl_IsSelected" wxTreeCtrl_IsSelected :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> IO CBool

-- | usage: (@treeCtrlIsVisible obj item@).
treeCtrlIsVisible :: TreeCtrl  a -> TreeItem ->  IO Bool
treeCtrlIsVisible _obj item 
  = withBoolResult $
    withObjectRef "treeCtrlIsVisible" _obj $ \cobj__obj -> 
    withTreeItemIdPtr item $ \cobj_item -> 
    wxTreeCtrl_IsVisible cobj__obj  cobj_item  
foreign import ccall "wxTreeCtrl_IsVisible" wxTreeCtrl_IsVisible :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> IO CBool

-- | usage: (@treeCtrlItemHasChildren obj item@).
treeCtrlItemHasChildren :: TreeCtrl  a -> TreeItem ->  IO Int
treeCtrlItemHasChildren _obj item 
  = withIntResult $
    withObjectRef "treeCtrlItemHasChildren" _obj $ \cobj__obj -> 
    withTreeItemIdPtr item $ \cobj_item -> 
    wxTreeCtrl_ItemHasChildren cobj__obj  cobj_item  
foreign import ccall "wxTreeCtrl_ItemHasChildren" wxTreeCtrl_ItemHasChildren :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> IO CInt

-- | usage: (@treeCtrlOnCompareItems obj item1 item2@).
treeCtrlOnCompareItems :: TreeCtrl  a -> TreeItem -> TreeItem ->  IO Int
treeCtrlOnCompareItems _obj item1 item2 
  = withIntResult $
    withObjectRef "treeCtrlOnCompareItems" _obj $ \cobj__obj -> 
    withTreeItemIdPtr item1 $ \cobj_item1 -> 
    withTreeItemIdPtr item2 $ \cobj_item2 -> 
    wxTreeCtrl_OnCompareItems cobj__obj  cobj_item1  cobj_item2  
foreign import ccall "wxTreeCtrl_OnCompareItems" wxTreeCtrl_OnCompareItems :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> Ptr (TTreeItemId c) -> IO CInt

-- | usage: (@treeCtrlPrependItem obj parent text image selectedImage wxdata@).
treeCtrlPrependItem :: TreeCtrl  a -> TreeItem -> String -> Int -> Int -> Ptr  f ->  IO (TreeItem)
treeCtrlPrependItem _obj parent text image selectedImage wxdata 
  = withRefTreeItemId $ \pref -> 
    withObjectRef "treeCtrlPrependItem" _obj $ \cobj__obj -> 
    withTreeItemIdPtr parent $ \cobj_parent -> 
    withStringPtr text $ \cobj_text -> 
    wxTreeCtrl_PrependItem cobj__obj  cobj_parent  cobj_text  (toCInt image)  (toCInt selectedImage)  wxdata   pref
foreign import ccall "wxTreeCtrl_PrependItem" wxTreeCtrl_PrependItem :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> Ptr (TWxString c) -> CInt -> CInt -> Ptr  f -> Ptr (TTreeItemId ()) -> IO ()

-- | usage: (@treeCtrlScrollTo obj item@).
treeCtrlScrollTo :: TreeCtrl  a -> TreeItem ->  IO ()
treeCtrlScrollTo _obj item 
  = withObjectRef "treeCtrlScrollTo" _obj $ \cobj__obj -> 
    withTreeItemIdPtr item $ \cobj_item -> 
    wxTreeCtrl_ScrollTo cobj__obj  cobj_item  
foreign import ccall "wxTreeCtrl_ScrollTo" wxTreeCtrl_ScrollTo :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> IO ()

-- | usage: (@treeCtrlSelectItem obj item@).
treeCtrlSelectItem :: TreeCtrl  a -> TreeItem ->  IO ()
treeCtrlSelectItem _obj item 
  = withObjectRef "treeCtrlSelectItem" _obj $ \cobj__obj -> 
    withTreeItemIdPtr item $ \cobj_item -> 
    wxTreeCtrl_SelectItem cobj__obj  cobj_item  
foreign import ccall "wxTreeCtrl_SelectItem" wxTreeCtrl_SelectItem :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> IO ()

-- | usage: (@treeCtrlSetImageList obj imageList@).
treeCtrlSetImageList :: TreeCtrl  a -> ImageList  b ->  IO ()
treeCtrlSetImageList _obj imageList 
  = withObjectRef "treeCtrlSetImageList" _obj $ \cobj__obj -> 
    withObjectPtr imageList $ \cobj_imageList -> 
    wxTreeCtrl_SetImageList cobj__obj  cobj_imageList  
foreign import ccall "wxTreeCtrl_SetImageList" wxTreeCtrl_SetImageList :: Ptr (TTreeCtrl a) -> Ptr (TImageList b) -> IO ()

-- | usage: (@treeCtrlSetIndent obj indent@).
treeCtrlSetIndent :: TreeCtrl  a -> Int ->  IO ()
treeCtrlSetIndent _obj indent 
  = withObjectRef "treeCtrlSetIndent" _obj $ \cobj__obj -> 
    wxTreeCtrl_SetIndent cobj__obj  (toCInt indent)  
foreign import ccall "wxTreeCtrl_SetIndent" wxTreeCtrl_SetIndent :: Ptr (TTreeCtrl a) -> CInt -> IO ()

-- | usage: (@treeCtrlSetItemBackgroundColour obj item col@).
treeCtrlSetItemBackgroundColour :: TreeCtrl  a -> TreeItem -> Color ->  IO ()
treeCtrlSetItemBackgroundColour _obj item col 
  = withObjectRef "treeCtrlSetItemBackgroundColour" _obj $ \cobj__obj -> 
    withTreeItemIdPtr item $ \cobj_item -> 
    withColourPtr col $ \cobj_col -> 
    wxTreeCtrl_SetItemBackgroundColour cobj__obj  cobj_item  cobj_col  
foreign import ccall "wxTreeCtrl_SetItemBackgroundColour" wxTreeCtrl_SetItemBackgroundColour :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> Ptr (TColour c) -> IO ()

-- | usage: (@treeCtrlSetItemBold obj item bold@).
treeCtrlSetItemBold :: TreeCtrl  a -> TreeItem -> Bool ->  IO ()
treeCtrlSetItemBold _obj item bold 
  = withObjectRef "treeCtrlSetItemBold" _obj $ \cobj__obj -> 
    withTreeItemIdPtr item $ \cobj_item -> 
    wxTreeCtrl_SetItemBold cobj__obj  cobj_item  (toCBool bold)  
foreign import ccall "wxTreeCtrl_SetItemBold" wxTreeCtrl_SetItemBold :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> CBool -> IO ()

-- | usage: (@treeCtrlSetItemClientClosure obj item closure@).
treeCtrlSetItemClientClosure :: TreeCtrl  a -> TreeItem -> Closure  c ->  IO ()
treeCtrlSetItemClientClosure _obj item closure 
  = withObjectRef "treeCtrlSetItemClientClosure" _obj $ \cobj__obj -> 
    withTreeItemIdPtr item $ \cobj_item -> 
    withObjectPtr closure $ \cobj_closure -> 
    wxTreeCtrl_SetItemClientClosure cobj__obj  cobj_item  cobj_closure  
foreign import ccall "wxTreeCtrl_SetItemClientClosure" wxTreeCtrl_SetItemClientClosure :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> Ptr (TClosure c) -> IO ()

-- | usage: (@treeCtrlSetItemData obj item wxdata@).
treeCtrlSetItemData :: TreeCtrl  a -> TreeItem -> Ptr  c ->  IO ()
treeCtrlSetItemData _obj item wxdata 
  = withObjectRef "treeCtrlSetItemData" _obj $ \cobj__obj -> 
    withTreeItemIdPtr item $ \cobj_item -> 
    wxTreeCtrl_SetItemData cobj__obj  cobj_item  wxdata  
foreign import ccall "wxTreeCtrl_SetItemData" wxTreeCtrl_SetItemData :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> Ptr  c -> IO ()

-- | usage: (@treeCtrlSetItemDropHighlight obj item highlight@).
treeCtrlSetItemDropHighlight :: TreeCtrl  a -> TreeItem -> Bool ->  IO ()
treeCtrlSetItemDropHighlight _obj item highlight 
  = withObjectRef "treeCtrlSetItemDropHighlight" _obj $ \cobj__obj -> 
    withTreeItemIdPtr item $ \cobj_item -> 
    wxTreeCtrl_SetItemDropHighlight cobj__obj  cobj_item  (toCBool highlight)  
foreign import ccall "wxTreeCtrl_SetItemDropHighlight" wxTreeCtrl_SetItemDropHighlight :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> CBool -> IO ()

-- | usage: (@treeCtrlSetItemFont obj item font@).
treeCtrlSetItemFont :: TreeCtrl  a -> TreeItem -> Font  c ->  IO ()
treeCtrlSetItemFont _obj item font 
  = withObjectRef "treeCtrlSetItemFont" _obj $ \cobj__obj -> 
    withTreeItemIdPtr item $ \cobj_item -> 
    withObjectPtr font $ \cobj_font -> 
    wxTreeCtrl_SetItemFont cobj__obj  cobj_item  cobj_font  
foreign import ccall "wxTreeCtrl_SetItemFont" wxTreeCtrl_SetItemFont :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> Ptr (TFont c) -> IO ()

-- | usage: (@treeCtrlSetItemHasChildren obj item hasChildren@).
treeCtrlSetItemHasChildren :: TreeCtrl  a -> TreeItem -> Bool ->  IO ()
treeCtrlSetItemHasChildren _obj item hasChildren 
  = withObjectRef "treeCtrlSetItemHasChildren" _obj $ \cobj__obj -> 
    withTreeItemIdPtr item $ \cobj_item -> 
    wxTreeCtrl_SetItemHasChildren cobj__obj  cobj_item  (toCBool hasChildren)  
foreign import ccall "wxTreeCtrl_SetItemHasChildren" wxTreeCtrl_SetItemHasChildren :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> CBool -> IO ()

-- | usage: (@treeCtrlSetItemImage obj item image which@).
treeCtrlSetItemImage :: TreeCtrl  a -> TreeItem -> Int -> Int ->  IO ()
treeCtrlSetItemImage _obj item image which 
  = withObjectRef "treeCtrlSetItemImage" _obj $ \cobj__obj -> 
    withTreeItemIdPtr item $ \cobj_item -> 
    wxTreeCtrl_SetItemImage cobj__obj  cobj_item  (toCInt image)  (toCInt which)  
foreign import ccall "wxTreeCtrl_SetItemImage" wxTreeCtrl_SetItemImage :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> CInt -> CInt -> IO ()

-- | usage: (@treeCtrlSetItemText obj item text@).
treeCtrlSetItemText :: TreeCtrl  a -> TreeItem -> String ->  IO ()
treeCtrlSetItemText _obj item text 
  = withObjectRef "treeCtrlSetItemText" _obj $ \cobj__obj -> 
    withTreeItemIdPtr item $ \cobj_item -> 
    withStringPtr text $ \cobj_text -> 
    wxTreeCtrl_SetItemText cobj__obj  cobj_item  cobj_text  
foreign import ccall "wxTreeCtrl_SetItemText" wxTreeCtrl_SetItemText :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> Ptr (TWxString c) -> IO ()

-- | usage: (@treeCtrlSetItemTextColour obj item col@).
treeCtrlSetItemTextColour :: TreeCtrl  a -> TreeItem -> Color ->  IO ()
treeCtrlSetItemTextColour _obj item col 
  = withObjectRef "treeCtrlSetItemTextColour" _obj $ \cobj__obj -> 
    withTreeItemIdPtr item $ \cobj_item -> 
    withColourPtr col $ \cobj_col -> 
    wxTreeCtrl_SetItemTextColour cobj__obj  cobj_item  cobj_col  
foreign import ccall "wxTreeCtrl_SetItemTextColour" wxTreeCtrl_SetItemTextColour :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> Ptr (TColour c) -> IO ()

-- | usage: (@treeCtrlSetSpacing obj spacing@).
treeCtrlSetSpacing :: TreeCtrl  a -> Int ->  IO ()
treeCtrlSetSpacing _obj spacing 
  = withObjectRef "treeCtrlSetSpacing" _obj $ \cobj__obj -> 
    wxTreeCtrl_SetSpacing cobj__obj  (toCInt spacing)  
foreign import ccall "wxTreeCtrl_SetSpacing" wxTreeCtrl_SetSpacing :: Ptr (TTreeCtrl a) -> CInt -> IO ()

-- | usage: (@treeCtrlSetStateImageList obj imageList@).
treeCtrlSetStateImageList :: TreeCtrl  a -> ImageList  b ->  IO ()
treeCtrlSetStateImageList _obj imageList 
  = withObjectRef "treeCtrlSetStateImageList" _obj $ \cobj__obj -> 
    withObjectPtr imageList $ \cobj_imageList -> 
    wxTreeCtrl_SetStateImageList cobj__obj  cobj_imageList  
foreign import ccall "wxTreeCtrl_SetStateImageList" wxTreeCtrl_SetStateImageList :: Ptr (TTreeCtrl a) -> Ptr (TImageList b) -> IO ()

-- | usage: (@treeCtrlSortChildren obj item@).
treeCtrlSortChildren :: TreeCtrl  a -> TreeItem ->  IO ()
treeCtrlSortChildren _obj item 
  = withObjectRef "treeCtrlSortChildren" _obj $ \cobj__obj -> 
    withTreeItemIdPtr item $ \cobj_item -> 
    wxTreeCtrl_SortChildren cobj__obj  cobj_item  
foreign import ccall "wxTreeCtrl_SortChildren" wxTreeCtrl_SortChildren :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> IO ()

-- | usage: (@treeCtrlToggle obj item@).
treeCtrlToggle :: TreeCtrl  a -> TreeItem ->  IO ()
treeCtrlToggle _obj item 
  = withObjectRef "treeCtrlToggle" _obj $ \cobj__obj -> 
    withTreeItemIdPtr item $ \cobj_item -> 
    wxTreeCtrl_Toggle cobj__obj  cobj_item  
foreign import ccall "wxTreeCtrl_Toggle" wxTreeCtrl_Toggle :: Ptr (TTreeCtrl a) -> Ptr (TTreeItemId b) -> IO ()

-- | usage: (@treeCtrlUnselect obj@).
treeCtrlUnselect :: TreeCtrl  a ->  IO ()
treeCtrlUnselect _obj 
  = withObjectRef "treeCtrlUnselect" _obj $ \cobj__obj -> 
    wxTreeCtrl_Unselect cobj__obj  
foreign import ccall "wxTreeCtrl_Unselect" wxTreeCtrl_Unselect :: Ptr (TTreeCtrl a) -> IO ()

-- | usage: (@treeCtrlUnselectAll obj@).
treeCtrlUnselectAll :: TreeCtrl  a ->  IO ()
treeCtrlUnselectAll _obj 
  = withObjectRef "treeCtrlUnselectAll" _obj $ \cobj__obj -> 
    wxTreeCtrl_UnselectAll cobj__obj  
foreign import ccall "wxTreeCtrl_UnselectAll" wxTreeCtrl_UnselectAll :: Ptr (TTreeCtrl a) -> IO ()

-- | usage: (@treeEventAllow obj@).
treeEventAllow :: TreeEvent  a ->  IO ()
treeEventAllow _obj 
  = withObjectRef "treeEventAllow" _obj $ \cobj__obj -> 
    wxTreeEvent_Allow cobj__obj  
foreign import ccall "wxTreeEvent_Allow" wxTreeEvent_Allow :: Ptr (TTreeEvent a) -> IO ()

-- | usage: (@treeEventGetCode obj@).
treeEventGetCode :: TreeEvent  a ->  IO Int
treeEventGetCode _obj 
  = withIntResult $
    withObjectRef "treeEventGetCode" _obj $ \cobj__obj -> 
    wxTreeEvent_GetCode cobj__obj  
foreign import ccall "wxTreeEvent_GetCode" wxTreeEvent_GetCode :: Ptr (TTreeEvent a) -> IO CInt

-- | usage: (@treeEventGetItem obj@).
treeEventGetItem :: TreeEvent  a ->  IO (TreeItem)
treeEventGetItem _obj 
  = withRefTreeItemId $ \pref -> 
    withObjectRef "treeEventGetItem" _obj $ \cobj__obj -> 
    wxTreeEvent_GetItem cobj__obj   pref
foreign import ccall "wxTreeEvent_GetItem" wxTreeEvent_GetItem :: Ptr (TTreeEvent a) -> Ptr (TTreeItemId ()) -> IO ()

-- | usage: (@treeEventGetKeyEvent obj@).
treeEventGetKeyEvent :: TreeEvent  a ->  IO (KeyEvent  ())
treeEventGetKeyEvent _obj 
  = withObjectResult $
    withObjectRef "treeEventGetKeyEvent" _obj $ \cobj__obj -> 
    wxTreeEvent_GetKeyEvent cobj__obj  
foreign import ccall "wxTreeEvent_GetKeyEvent" wxTreeEvent_GetKeyEvent :: Ptr (TTreeEvent a) -> IO (Ptr (TKeyEvent ()))

-- | usage: (@treeEventGetLabel obj@).
treeEventGetLabel :: TreeEvent  a ->  IO (String)
treeEventGetLabel _obj 
  = withManagedStringResult $
    withObjectRef "treeEventGetLabel" _obj $ \cobj__obj -> 
    wxTreeEvent_GetLabel cobj__obj  
foreign import ccall "wxTreeEvent_GetLabel" wxTreeEvent_GetLabel :: Ptr (TTreeEvent a) -> IO (Ptr (TWxString ()))

-- | usage: (@treeEventGetOldItem obj@).
treeEventGetOldItem :: TreeEvent  a ->  IO (TreeItem)
treeEventGetOldItem _obj 
  = withRefTreeItemId $ \pref -> 
    withObjectRef "treeEventGetOldItem" _obj $ \cobj__obj -> 
    wxTreeEvent_GetOldItem cobj__obj   pref
foreign import ccall "wxTreeEvent_GetOldItem" wxTreeEvent_GetOldItem :: Ptr (TTreeEvent a) -> Ptr (TTreeItemId ()) -> IO ()

-- | usage: (@treeEventGetPoint obj@).
treeEventGetPoint :: TreeEvent  a ->  IO (Point)
treeEventGetPoint _obj 
  = withWxPointResult $
    withObjectRef "treeEventGetPoint" _obj $ \cobj__obj -> 
    wxTreeEvent_GetPoint cobj__obj  
foreign import ccall "wxTreeEvent_GetPoint" wxTreeEvent_GetPoint :: Ptr (TTreeEvent a) -> IO (Ptr (TWxPoint ()))

-- | usage: (@treeEventIsEditCancelled obj@).
treeEventIsEditCancelled :: TreeEvent  a ->  IO Bool
treeEventIsEditCancelled _obj 
  = withBoolResult $
    withObjectRef "treeEventIsEditCancelled" _obj $ \cobj__obj -> 
    wxTreeEvent_IsEditCancelled cobj__obj  
foreign import ccall "wxTreeEvent_IsEditCancelled" wxTreeEvent_IsEditCancelled :: Ptr (TTreeEvent a) -> IO CBool

-- | usage: (@updateUIEventCheck obj check@).
updateUIEventCheck :: UpdateUIEvent  a -> Bool ->  IO ()
updateUIEventCheck _obj check 
  = withObjectRef "updateUIEventCheck" _obj $ \cobj__obj -> 
    wxUpdateUIEvent_Check cobj__obj  (toCBool check)  
foreign import ccall "wxUpdateUIEvent_Check" wxUpdateUIEvent_Check :: Ptr (TUpdateUIEvent a) -> CBool -> IO ()

-- | usage: (@updateUIEventCopyObject obj obj@).
updateUIEventCopyObject :: UpdateUIEvent  a -> WxObject  b ->  IO ()
updateUIEventCopyObject _obj obj 
  = withObjectRef "updateUIEventCopyObject" _obj $ \cobj__obj -> 
    withObjectPtr obj $ \cobj_obj -> 
    wxUpdateUIEvent_CopyObject cobj__obj  cobj_obj  
foreign import ccall "wxUpdateUIEvent_CopyObject" wxUpdateUIEvent_CopyObject :: Ptr (TUpdateUIEvent a) -> Ptr (TWxObject b) -> IO ()

-- | usage: (@updateUIEventEnable obj enable@).
updateUIEventEnable :: UpdateUIEvent  a -> Bool ->  IO ()
updateUIEventEnable _obj enable 
  = withObjectRef "updateUIEventEnable" _obj $ \cobj__obj -> 
    wxUpdateUIEvent_Enable cobj__obj  (toCBool enable)  
foreign import ccall "wxUpdateUIEvent_Enable" wxUpdateUIEvent_Enable :: Ptr (TUpdateUIEvent a) -> CBool -> IO ()

-- | usage: (@updateUIEventGetChecked obj@).
updateUIEventGetChecked :: UpdateUIEvent  a ->  IO Bool
updateUIEventGetChecked _obj 
  = withBoolResult $
    withObjectRef "updateUIEventGetChecked" _obj $ \cobj__obj -> 
    wxUpdateUIEvent_GetChecked cobj__obj  
foreign import ccall "wxUpdateUIEvent_GetChecked" wxUpdateUIEvent_GetChecked :: Ptr (TUpdateUIEvent a) -> IO CBool

-- | usage: (@updateUIEventGetEnabled obj@).
updateUIEventGetEnabled :: UpdateUIEvent  a ->  IO Bool
updateUIEventGetEnabled _obj 
  = withBoolResult $
    withObjectRef "updateUIEventGetEnabled" _obj $ \cobj__obj -> 
    wxUpdateUIEvent_GetEnabled cobj__obj  
foreign import ccall "wxUpdateUIEvent_GetEnabled" wxUpdateUIEvent_GetEnabled :: Ptr (TUpdateUIEvent a) -> IO CBool

-- | usage: (@updateUIEventGetSetChecked obj@).
updateUIEventGetSetChecked :: UpdateUIEvent  a ->  IO Bool
updateUIEventGetSetChecked _obj 
  = withBoolResult $
    withObjectRef "updateUIEventGetSetChecked" _obj $ \cobj__obj -> 
    wxUpdateUIEvent_GetSetChecked cobj__obj  
foreign import ccall "wxUpdateUIEvent_GetSetChecked" wxUpdateUIEvent_GetSetChecked :: Ptr (TUpdateUIEvent a) -> IO CBool

-- | usage: (@updateUIEventGetSetEnabled obj@).
updateUIEventGetSetEnabled :: UpdateUIEvent  a ->  IO Bool
updateUIEventGetSetEnabled _obj 
  = withBoolResult $
    withObjectRef "updateUIEventGetSetEnabled" _obj $ \cobj__obj -> 
    wxUpdateUIEvent_GetSetEnabled cobj__obj  
foreign import ccall "wxUpdateUIEvent_GetSetEnabled" wxUpdateUIEvent_GetSetEnabled :: Ptr (TUpdateUIEvent a) -> IO CBool

-- | usage: (@updateUIEventGetSetText obj@).
updateUIEventGetSetText :: UpdateUIEvent  a ->  IO Bool
updateUIEventGetSetText _obj 
  = withBoolResult $
    withObjectRef "updateUIEventGetSetText" _obj $ \cobj__obj -> 
    wxUpdateUIEvent_GetSetText cobj__obj  
foreign import ccall "wxUpdateUIEvent_GetSetText" wxUpdateUIEvent_GetSetText :: Ptr (TUpdateUIEvent a) -> IO CBool

-- | usage: (@updateUIEventGetText obj@).
updateUIEventGetText :: UpdateUIEvent  a ->  IO (String)
updateUIEventGetText _obj 
  = withManagedStringResult $
    withObjectRef "updateUIEventGetText" _obj $ \cobj__obj -> 
    wxUpdateUIEvent_GetText cobj__obj  
foreign import ccall "wxUpdateUIEvent_GetText" wxUpdateUIEvent_GetText :: Ptr (TUpdateUIEvent a) -> IO (Ptr (TWxString ()))

-- | usage: (@updateUIEventSetText obj text@).
updateUIEventSetText :: UpdateUIEvent  a -> String ->  IO ()
updateUIEventSetText _obj text 
  = withObjectRef "updateUIEventSetText" _obj $ \cobj__obj -> 
    withStringPtr text $ \cobj_text -> 
    wxUpdateUIEvent_SetText cobj__obj  cobj_text  
foreign import ccall "wxUpdateUIEvent_SetText" wxUpdateUIEvent_SetText :: Ptr (TUpdateUIEvent a) -> Ptr (TWxString b) -> IO ()

-- | usage: (@validatorCreate@).
validatorCreate ::  IO (Validator  ())
validatorCreate 
  = withObjectResult $
    wxValidator_Create 
foreign import ccall "wxValidator_Create" wxValidator_Create :: IO (Ptr (TValidator ()))

-- | usage: (@validatorDelete obj@).
validatorDelete :: Validator  a ->  IO ()
validatorDelete
  = objectDelete


-- | usage: (@validatorGetWindow obj@).
validatorGetWindow :: Validator  a ->  IO (Window  ())
validatorGetWindow _obj 
  = withObjectResult $
    withObjectRef "validatorGetWindow" _obj $ \cobj__obj -> 
    wxValidator_GetWindow cobj__obj  
foreign import ccall "wxValidator_GetWindow" wxValidator_GetWindow :: Ptr (TValidator a) -> IO (Ptr (TWindow ()))

-- | usage: (@validatorSetWindow obj win@).
validatorSetWindow :: Validator  a -> Window  b ->  IO ()
validatorSetWindow _obj win 
  = withObjectRef "validatorSetWindow" _obj $ \cobj__obj -> 
    withObjectPtr win $ \cobj_win -> 
    wxValidator_SetWindow cobj__obj  cobj_win  
foreign import ccall "wxValidator_SetWindow" wxValidator_SetWindow :: Ptr (TValidator a) -> Ptr (TWindow b) -> IO ()

-- | usage: (@validatorSuppressBellOnError doIt@).
validatorSuppressBellOnError :: Bool ->  IO ()
validatorSuppressBellOnError doIt 
  = wxValidator_SuppressBellOnError (toCBool doIt)  
foreign import ccall "wxValidator_SuppressBellOnError" wxValidator_SuppressBellOnError :: CBool -> IO ()

-- | usage: (@validatorTransferFromWindow obj@).
validatorTransferFromWindow :: Validator  a ->  IO Bool
validatorTransferFromWindow _obj 
  = withBoolResult $
    withObjectRef "validatorTransferFromWindow" _obj $ \cobj__obj -> 
    wxValidator_TransferFromWindow cobj__obj  
foreign import ccall "wxValidator_TransferFromWindow" wxValidator_TransferFromWindow :: Ptr (TValidator a) -> IO CBool

-- | usage: (@validatorTransferToWindow obj@).
validatorTransferToWindow :: Validator  a ->  IO Bool
validatorTransferToWindow _obj 
  = withBoolResult $
    withObjectRef "validatorTransferToWindow" _obj $ \cobj__obj -> 
    wxValidator_TransferToWindow cobj__obj  
foreign import ccall "wxValidator_TransferToWindow" wxValidator_TransferToWindow :: Ptr (TValidator a) -> IO CBool

-- | usage: (@validatorValidate obj parent@).
validatorValidate :: Validator  a -> Window  b ->  IO Bool
validatorValidate _obj parent 
  = withBoolResult $
    withObjectRef "validatorValidate" _obj $ \cobj__obj -> 
    withObjectPtr parent $ \cobj_parent -> 
    wxValidator_Validate cobj__obj  cobj_parent  
foreign import ccall "wxValidator_Validate" wxValidator_Validate :: Ptr (TValidator a) -> Ptr (TWindow b) -> IO CBool

{- |  Get the version number of wxWidgets as a number composed of the major version times 1000, minor version times 100, and the release number. For example, release 2.1.15 becomes 2115.  -}
versionNumber ::  IO Int
versionNumber 
  = withIntResult $
    wx_wxVersionNumber 
foreign import ccall "wxVersionNumber" wx_wxVersionNumber :: IO CInt

-- | usage: (@windowAddChild obj child@).
windowAddChild :: Window  a -> Window  b ->  IO ()
windowAddChild _obj child 
  = withObjectRef "windowAddChild" _obj $ \cobj__obj -> 
    withObjectPtr child $ \cobj_child -> 
    wxWindow_AddChild cobj__obj  cobj_child  
foreign import ccall "wxWindow_AddChild" wxWindow_AddChild :: Ptr (TWindow a) -> Ptr (TWindow b) -> IO ()

-- | usage: (@windowAddConstraintReference obj otherWin@).
windowAddConstraintReference :: Window  a -> Window  b ->  IO ()
windowAddConstraintReference _obj otherWin 
  = withObjectRef "windowAddConstraintReference" _obj $ \cobj__obj -> 
    withObjectPtr otherWin $ \cobj_otherWin -> 
    wxWindow_AddConstraintReference cobj__obj  cobj_otherWin  
foreign import ccall "wxWindow_AddConstraintReference" wxWindow_AddConstraintReference :: Ptr (TWindow a) -> Ptr (TWindow b) -> IO ()

-- | usage: (@windowCaptureMouse obj@).
windowCaptureMouse :: Window  a ->  IO ()
windowCaptureMouse _obj 
  = withObjectRef "windowCaptureMouse" _obj $ \cobj__obj -> 
    wxWindow_CaptureMouse cobj__obj  
foreign import ccall "wxWindow_CaptureMouse" wxWindow_CaptureMouse :: Ptr (TWindow a) -> IO ()

-- | usage: (@windowCenter obj direction@).
windowCenter :: Window  a -> Int ->  IO ()
windowCenter _obj direction 
  = withObjectRef "windowCenter" _obj $ \cobj__obj -> 
    wxWindow_Center cobj__obj  (toCInt direction)  
foreign import ccall "wxWindow_Center" wxWindow_Center :: Ptr (TWindow a) -> CInt -> IO ()

-- | usage: (@windowCenterOnParent obj dir@).
windowCenterOnParent :: Window  a -> Int ->  IO ()
windowCenterOnParent _obj dir 
  = withObjectRef "windowCenterOnParent" _obj $ \cobj__obj -> 
    wxWindow_CenterOnParent cobj__obj  (toCInt dir)  
foreign import ccall "wxWindow_CenterOnParent" wxWindow_CenterOnParent :: Ptr (TWindow a) -> CInt -> IO ()

-- | usage: (@windowClearBackground obj@).
windowClearBackground :: Window  a ->  IO ()
windowClearBackground _obj 
  = withObjectRef "windowClearBackground" _obj $ \cobj__obj -> 
    wxWindow_ClearBackground cobj__obj  
foreign import ccall "wxWindow_ClearBackground" wxWindow_ClearBackground :: Ptr (TWindow a) -> IO ()

-- | usage: (@windowClientToScreen obj xy@).
windowClientToScreen :: Window  a -> Point ->  IO (Point)
windowClientToScreen _obj xy 
  = withWxPointResult $
    withObjectRef "windowClientToScreen" _obj $ \cobj__obj -> 
    wxWindow_ClientToScreen cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
foreign import ccall "wxWindow_ClientToScreen" wxWindow_ClientToScreen :: Ptr (TWindow a) -> CInt -> CInt -> IO (Ptr (TWxPoint ()))

-- | usage: (@windowClose obj force@).
windowClose :: Window  a -> Bool ->  IO Bool
windowClose _obj _force 
  = withBoolResult $
    withObjectRef "windowClose" _obj $ \cobj__obj -> 
    wxWindow_Close cobj__obj  (toCBool _force)  
foreign import ccall "wxWindow_Close" wxWindow_Close :: Ptr (TWindow a) -> CBool -> IO CBool

-- | usage: (@windowConvertDialogToPixels obj@).
windowConvertDialogToPixels :: Window  a ->  IO (Point)
windowConvertDialogToPixels _obj 
  = withWxPointResult $
    withObjectRef "windowConvertDialogToPixels" _obj $ \cobj__obj -> 
    wxWindow_ConvertDialogToPixels cobj__obj  
foreign import ccall "wxWindow_ConvertDialogToPixels" wxWindow_ConvertDialogToPixels :: Ptr (TWindow a) -> IO (Ptr (TWxPoint ()))

-- | usage: (@windowConvertDialogToPixelsEx obj@).
windowConvertDialogToPixelsEx :: Window  a ->  IO (Point)
windowConvertDialogToPixelsEx _obj 
  = withWxPointResult $
    withObjectRef "windowConvertDialogToPixelsEx" _obj $ \cobj__obj -> 
    wxWindow_ConvertDialogToPixelsEx cobj__obj  
foreign import ccall "wxWindow_ConvertDialogToPixelsEx" wxWindow_ConvertDialogToPixelsEx :: Ptr (TWindow a) -> IO (Ptr (TWxPoint ()))

-- | usage: (@windowConvertPixelsToDialog obj@).
windowConvertPixelsToDialog :: Window  a ->  IO (Point)
windowConvertPixelsToDialog _obj 
  = withWxPointResult $
    withObjectRef "windowConvertPixelsToDialog" _obj $ \cobj__obj -> 
    wxWindow_ConvertPixelsToDialog cobj__obj  
foreign import ccall "wxWindow_ConvertPixelsToDialog" wxWindow_ConvertPixelsToDialog :: Ptr (TWindow a) -> IO (Ptr (TWxPoint ()))

-- | usage: (@windowConvertPixelsToDialogEx obj@).
windowConvertPixelsToDialogEx :: Window  a ->  IO (Point)
windowConvertPixelsToDialogEx _obj 
  = withWxPointResult $
    withObjectRef "windowConvertPixelsToDialogEx" _obj $ \cobj__obj -> 
    wxWindow_ConvertPixelsToDialogEx cobj__obj  
foreign import ccall "wxWindow_ConvertPixelsToDialogEx" wxWindow_ConvertPixelsToDialogEx :: Ptr (TWindow a) -> IO (Ptr (TWxPoint ()))

-- | usage: (@windowCreate prt id xywh stl@).
windowCreate :: Window  a -> Id -> Rect -> Style ->  IO (Window  ())
windowCreate _prt _id _xywh _stl 
  = withObjectResult $
    withObjectPtr _prt $ \cobj__prt -> 
    wxWindow_Create cobj__prt  (toCInt _id)  (toCIntRectX _xywh) (toCIntRectY _xywh)(toCIntRectW _xywh) (toCIntRectH _xywh)  (toCInt _stl)  
foreign import ccall "wxWindow_Create" wxWindow_Create :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TWindow ()))

-- | usage: (@windowCreateEventGetWindow obj@).
windowCreateEventGetWindow :: WindowCreateEvent  a ->  IO (Window  ())
windowCreateEventGetWindow _obj 
  = withObjectResult $
    withObjectRef "windowCreateEventGetWindow" _obj $ \cobj__obj -> 
    wxWindowCreateEvent_GetWindow cobj__obj  
foreign import ccall "wxWindowCreateEvent_GetWindow" wxWindowCreateEvent_GetWindow :: Ptr (TWindowCreateEvent a) -> IO (Ptr (TWindow ()))

-- | usage: (@windowDCCreate win@).
windowDCCreate :: Window  a ->  IO (WindowDC  ())
windowDCCreate win 
  = withObjectResult $
    withObjectPtr win $ \cobj_win -> 
    wxWindowDC_Create cobj_win  
foreign import ccall "wxWindowDC_Create" wxWindowDC_Create :: Ptr (TWindow a) -> IO (Ptr (TWindowDC ()))

-- | usage: (@windowDCDelete obj@).
windowDCDelete :: WindowDC  a ->  IO ()
windowDCDelete
  = objectDelete


-- | usage: (@windowDeleteRelatedConstraints obj@).
windowDeleteRelatedConstraints :: Window  a ->  IO ()
windowDeleteRelatedConstraints _obj 
  = withObjectRef "windowDeleteRelatedConstraints" _obj $ \cobj__obj -> 
    wxWindow_DeleteRelatedConstraints cobj__obj  
foreign import ccall "wxWindow_DeleteRelatedConstraints" wxWindow_DeleteRelatedConstraints :: Ptr (TWindow a) -> IO ()

-- | usage: (@windowDestroy obj@).
windowDestroy :: Window  a ->  IO Bool
windowDestroy _obj 
  = withBoolResult $
    withObjectRef "windowDestroy" _obj $ \cobj__obj -> 
    wxWindow_Destroy cobj__obj  
foreign import ccall "wxWindow_Destroy" wxWindow_Destroy :: Ptr (TWindow a) -> IO CBool

-- | usage: (@windowDestroyChildren obj@).
windowDestroyChildren :: Window  a ->  IO Bool
windowDestroyChildren _obj 
  = withBoolResult $
    withObjectRef "windowDestroyChildren" _obj $ \cobj__obj -> 
    wxWindow_DestroyChildren cobj__obj  
foreign import ccall "wxWindow_DestroyChildren" wxWindow_DestroyChildren :: Ptr (TWindow a) -> IO CBool

-- | usage: (@windowDestroyEventGetWindow obj@).
windowDestroyEventGetWindow :: WindowDestroyEvent  a ->  IO (Window  ())
windowDestroyEventGetWindow _obj 
  = withObjectResult $
    withObjectRef "windowDestroyEventGetWindow" _obj $ \cobj__obj -> 
    wxWindowDestroyEvent_GetWindow cobj__obj  
foreign import ccall "wxWindowDestroyEvent_GetWindow" wxWindowDestroyEvent_GetWindow :: Ptr (TWindowDestroyEvent a) -> IO (Ptr (TWindow ()))

-- | usage: (@windowDisable obj@).
windowDisable :: Window  a ->  IO Bool
windowDisable _obj 
  = withBoolResult $
    withObjectRef "windowDisable" _obj $ \cobj__obj -> 
    wxWindow_Disable cobj__obj  
foreign import ccall "wxWindow_Disable" wxWindow_Disable :: Ptr (TWindow a) -> IO CBool

-- | usage: (@windowDoPhase obj phase@).
windowDoPhase :: Window  a -> Int ->  IO Int
windowDoPhase _obj phase 
  = withIntResult $
    withObjectRef "windowDoPhase" _obj $ \cobj__obj -> 
    wxWindow_DoPhase cobj__obj  (toCInt phase)  
foreign import ccall "wxWindow_DoPhase" wxWindow_DoPhase :: Ptr (TWindow a) -> CInt -> IO CInt

-- | usage: (@windowEnable obj@).
windowEnable :: Window  a ->  IO Bool
windowEnable _obj 
  = withBoolResult $
    withObjectRef "windowEnable" _obj $ \cobj__obj -> 
    wxWindow_Enable cobj__obj  
foreign import ccall "wxWindow_Enable" wxWindow_Enable :: Ptr (TWindow a) -> IO CBool

-- | usage: (@windowFindFocus obj@).
windowFindFocus :: Window  a ->  IO (Window  ())
windowFindFocus _obj 
  = withObjectResult $
    withObjectRef "windowFindFocus" _obj $ \cobj__obj -> 
    wxWindow_FindFocus cobj__obj  
foreign import ccall "wxWindow_FindFocus" wxWindow_FindFocus :: Ptr (TWindow a) -> IO (Ptr (TWindow ()))

-- | usage: (@windowFindWindow obj name@).
windowFindWindow :: Window  a -> String ->  IO (Window  ())
windowFindWindow _obj name 
  = withObjectResult $
    withObjectRef "windowFindWindow" _obj $ \cobj__obj -> 
    withStringPtr name $ \cobj_name -> 
    wxWindow_FindWindow cobj__obj  cobj_name  
foreign import ccall "wxWindow_FindWindow" wxWindow_FindWindow :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TWindow ()))

-- | usage: (@windowFit obj@).
windowFit :: Window  a ->  IO ()
windowFit _obj 
  = withObjectRef "windowFit" _obj $ \cobj__obj -> 
    wxWindow_Fit cobj__obj  
foreign import ccall "wxWindow_Fit" wxWindow_Fit :: Ptr (TWindow a) -> IO ()

-- | usage: (@windowFitInside obj@).
windowFitInside :: Window  a ->  IO ()
windowFitInside _obj 
  = withObjectRef "windowFitInside" _obj $ \cobj__obj -> 
    wxWindow_FitInside cobj__obj  
foreign import ccall "wxWindow_FitInside" wxWindow_FitInside :: Ptr (TWindow a) -> IO ()

-- | usage: (@windowFreeze obj@).
windowFreeze :: Window  a ->  IO ()
windowFreeze _obj 
  = withObjectRef "windowFreeze" _obj $ \cobj__obj -> 
    wxWindow_Freeze cobj__obj  
foreign import ccall "wxWindow_Freeze" wxWindow_Freeze :: Ptr (TWindow a) -> IO ()

-- | usage: (@windowGetAutoLayout obj@).
windowGetAutoLayout :: Window  a ->  IO Int
windowGetAutoLayout _obj 
  = withIntResult $
    withObjectRef "windowGetAutoLayout" _obj $ \cobj__obj -> 
    wxWindow_GetAutoLayout cobj__obj  
foreign import ccall "wxWindow_GetAutoLayout" wxWindow_GetAutoLayout :: Ptr (TWindow a) -> IO CInt

-- | usage: (@windowGetBackgroundColour obj@).
windowGetBackgroundColour :: Window  a ->  IO (Color)
windowGetBackgroundColour _obj 
  = withRefColour $ \pref -> 
    withObjectRef "windowGetBackgroundColour" _obj $ \cobj__obj -> 
    wxWindow_GetBackgroundColour cobj__obj   pref
foreign import ccall "wxWindow_GetBackgroundColour" wxWindow_GetBackgroundColour :: Ptr (TWindow a) -> Ptr (TColour ()) -> IO ()

-- | usage: (@windowGetBestSize obj@).
windowGetBestSize :: Window  a ->  IO (Size)
windowGetBestSize _obj 
  = withWxSizeResult $
    withObjectRef "windowGetBestSize" _obj $ \cobj__obj -> 
    wxWindow_GetBestSize cobj__obj  
foreign import ccall "wxWindow_GetBestSize" wxWindow_GetBestSize :: Ptr (TWindow a) -> IO (Ptr (TWxSize ()))

-- | usage: (@windowGetCaret obj@).
windowGetCaret :: Window  a ->  IO (Caret  ())
windowGetCaret _obj 
  = withObjectResult $
    withObjectRef "windowGetCaret" _obj $ \cobj__obj -> 
    wxWindow_GetCaret cobj__obj  
foreign import ccall "wxWindow_GetCaret" wxWindow_GetCaret :: Ptr (TWindow a) -> IO (Ptr (TCaret ()))

-- | usage: (@windowGetCharHeight obj@).
windowGetCharHeight :: Window  a ->  IO Int
windowGetCharHeight _obj 
  = withIntResult $
    withObjectRef "windowGetCharHeight" _obj $ \cobj__obj -> 
    wxWindow_GetCharHeight cobj__obj  
foreign import ccall "wxWindow_GetCharHeight" wxWindow_GetCharHeight :: Ptr (TWindow a) -> IO CInt

-- | usage: (@windowGetCharWidth obj@).
windowGetCharWidth :: Window  a ->  IO Int
windowGetCharWidth _obj 
  = withIntResult $
    withObjectRef "windowGetCharWidth" _obj $ \cobj__obj -> 
    wxWindow_GetCharWidth cobj__obj  
foreign import ccall "wxWindow_GetCharWidth" wxWindow_GetCharWidth :: Ptr (TWindow a) -> IO CInt

-- | usage: (@windowGetChildren obj res cnt@).
windowGetChildren :: Window  a -> Ptr  b -> Int ->  IO Int
windowGetChildren _obj _res _cnt 
  = withIntResult $
    withObjectRef "windowGetChildren" _obj $ \cobj__obj -> 
    wxWindow_GetChildren cobj__obj  _res  (toCInt _cnt)  
foreign import ccall "wxWindow_GetChildren" wxWindow_GetChildren :: Ptr (TWindow a) -> Ptr  b -> CInt -> IO CInt

-- | usage: (@windowGetClientData obj@).
windowGetClientData :: Window  a ->  IO (ClientData  ())
windowGetClientData _obj 
  = withObjectResult $
    withObjectRef "windowGetClientData" _obj $ \cobj__obj -> 
    wxWindow_GetClientData cobj__obj  
foreign import ccall "wxWindow_GetClientData" wxWindow_GetClientData :: Ptr (TWindow a) -> IO (Ptr (TClientData ()))

-- | usage: (@windowGetClientSize obj@).
windowGetClientSize :: Window  a ->  IO (Size)
windowGetClientSize _obj 
  = withWxSizeResult $
    withObjectRef "windowGetClientSize" _obj $ \cobj__obj -> 
    wxWindow_GetClientSize cobj__obj  
foreign import ccall "wxWindow_GetClientSize" wxWindow_GetClientSize :: Ptr (TWindow a) -> IO (Ptr (TWxSize ()))

-- | usage: (@windowGetClientSizeConstraint obj@).
windowGetClientSizeConstraint :: Window  a ->  IO Size
windowGetClientSizeConstraint _obj 
  = withSizeResult $ \pw ph -> 
    withObjectRef "windowGetClientSizeConstraint" _obj $ \cobj__obj -> 
    wxWindow_GetClientSizeConstraint cobj__obj   pw ph
foreign import ccall "wxWindow_GetClientSizeConstraint" wxWindow_GetClientSizeConstraint :: Ptr (TWindow a) -> Ptr CInt -> Ptr CInt -> IO ()

-- | usage: (@windowGetConstraints obj@).
windowGetConstraints :: Window  a ->  IO (LayoutConstraints  ())
windowGetConstraints _obj 
  = withObjectResult $
    withObjectRef "windowGetConstraints" _obj $ \cobj__obj -> 
    wxWindow_GetConstraints cobj__obj  
foreign import ccall "wxWindow_GetConstraints" wxWindow_GetConstraints :: Ptr (TWindow a) -> IO (Ptr (TLayoutConstraints ()))

-- | usage: (@windowGetConstraintsInvolvedIn obj@).
windowGetConstraintsInvolvedIn :: Window  a ->  IO (Ptr  ())
windowGetConstraintsInvolvedIn _obj 
  = withObjectRef "windowGetConstraintsInvolvedIn" _obj $ \cobj__obj -> 
    wxWindow_GetConstraintsInvolvedIn cobj__obj  
foreign import ccall "wxWindow_GetConstraintsInvolvedIn" wxWindow_GetConstraintsInvolvedIn :: Ptr (TWindow a) -> IO (Ptr  ())

-- | usage: (@windowGetCursor obj@).
windowGetCursor :: Window  a ->  IO (Cursor  ())
windowGetCursor _obj 
  = withManagedCursorResult $
    withObjectRef "windowGetCursor" _obj $ \cobj__obj -> 
    wxWindow_GetCursor cobj__obj  
foreign import ccall "wxWindow_GetCursor" wxWindow_GetCursor :: Ptr (TWindow a) -> IO (Ptr (TCursor ()))

-- | usage: (@windowGetDropTarget obj@).
windowGetDropTarget :: Window  a ->  IO (DropTarget  ())
windowGetDropTarget _obj 
  = withObjectResult $
    withObjectRef "windowGetDropTarget" _obj $ \cobj__obj -> 
    wxWindow_GetDropTarget cobj__obj  
foreign import ccall "wxWindow_GetDropTarget" wxWindow_GetDropTarget :: Ptr (TWindow a) -> IO (Ptr (TDropTarget ()))

-- | usage: (@windowGetEffectiveMinSize obj@).
windowGetEffectiveMinSize :: Window  a ->  IO (Size)
windowGetEffectiveMinSize _obj 
  = withWxSizeResult $
    withObjectRef "windowGetEffectiveMinSize" _obj $ \cobj__obj -> 
    wxWindow_GetEffectiveMinSize cobj__obj  
foreign import ccall "wxWindow_GetEffectiveMinSize" wxWindow_GetEffectiveMinSize :: Ptr (TWindow a) -> IO (Ptr (TWxSize ()))

-- | usage: (@windowGetEventHandler obj@).
windowGetEventHandler :: Window  a ->  IO (EvtHandler  ())
windowGetEventHandler _obj 
  = withObjectResult $
    withObjectRef "windowGetEventHandler" _obj $ \cobj__obj -> 
    wxWindow_GetEventHandler cobj__obj  
foreign import ccall "wxWindow_GetEventHandler" wxWindow_GetEventHandler :: Ptr (TWindow a) -> IO (Ptr (TEvtHandler ()))

-- | usage: (@windowGetFont obj@).
windowGetFont :: Window  a ->  IO (Font  ())
windowGetFont _obj 
  = withRefFont $ \pref -> 
    withObjectRef "windowGetFont" _obj $ \cobj__obj -> 
    wxWindow_GetFont cobj__obj   pref
foreign import ccall "wxWindow_GetFont" wxWindow_GetFont :: Ptr (TWindow a) -> Ptr (TFont ()) -> IO ()

-- | usage: (@windowGetForegroundColour obj@).
windowGetForegroundColour :: Window  a ->  IO (Color)
windowGetForegroundColour _obj 
  = withRefColour $ \pref -> 
    withObjectRef "windowGetForegroundColour" _obj $ \cobj__obj -> 
    wxWindow_GetForegroundColour cobj__obj   pref
foreign import ccall "wxWindow_GetForegroundColour" wxWindow_GetForegroundColour :: Ptr (TWindow a) -> Ptr (TColour ()) -> IO ()

-- | usage: (@windowGetHandle obj@).
windowGetHandle :: Window  a ->  IO (Ptr  ())
windowGetHandle _obj 
  = withObjectRef "windowGetHandle" _obj $ \cobj__obj -> 
    wxWindow_GetHandle cobj__obj  
foreign import ccall "wxWindow_GetHandle" wxWindow_GetHandle :: Ptr (TWindow a) -> IO (Ptr  ())

-- | usage: (@windowGetId obj@).
windowGetId :: Window  a ->  IO Int
windowGetId _obj 
  = withIntResult $
    withObjectRef "windowGetId" _obj $ \cobj__obj -> 
    wxWindow_GetId cobj__obj  
foreign import ccall "wxWindow_GetId" wxWindow_GetId :: Ptr (TWindow a) -> IO CInt

-- | usage: (@windowGetLabel obj@).
windowGetLabel :: Window  a ->  IO (String)
windowGetLabel _obj 
  = withManagedStringResult $
    withObjectRef "windowGetLabel" _obj $ \cobj__obj -> 
    wxWindow_GetLabel cobj__obj  
foreign import ccall "wxWindow_GetLabel" wxWindow_GetLabel :: Ptr (TWindow a) -> IO (Ptr (TWxString ()))

-- | usage: (@windowGetLabelEmpty obj@).
windowGetLabelEmpty :: Window  a ->  IO Int
windowGetLabelEmpty _obj 
  = withIntResult $
    withObjectRef "windowGetLabelEmpty" _obj $ \cobj__obj -> 
    wxWindow_GetLabelEmpty cobj__obj  
foreign import ccall "wxWindow_GetLabelEmpty" wxWindow_GetLabelEmpty :: Ptr (TWindow a) -> IO CInt

-- | usage: (@windowGetMaxHeight obj@).
windowGetMaxHeight :: Window  a ->  IO Int
windowGetMaxHeight _obj 
  = withIntResult $
    withObjectRef "windowGetMaxHeight" _obj $ \cobj__obj -> 
    wxWindow_GetMaxHeight cobj__obj  
foreign import ccall "wxWindow_GetMaxHeight" wxWindow_GetMaxHeight :: Ptr (TWindow a) -> IO CInt

-- | usage: (@windowGetMaxWidth obj@).
windowGetMaxWidth :: Window  a ->  IO Int
windowGetMaxWidth _obj 
  = withIntResult $
    withObjectRef "windowGetMaxWidth" _obj $ \cobj__obj -> 
    wxWindow_GetMaxWidth cobj__obj  
foreign import ccall "wxWindow_GetMaxWidth" wxWindow_GetMaxWidth :: Ptr (TWindow a) -> IO CInt

-- | usage: (@windowGetMinHeight obj@).
windowGetMinHeight :: Window  a ->  IO Int
windowGetMinHeight _obj 
  = withIntResult $
    withObjectRef "windowGetMinHeight" _obj $ \cobj__obj -> 
    wxWindow_GetMinHeight cobj__obj  
foreign import ccall "wxWindow_GetMinHeight" wxWindow_GetMinHeight :: Ptr (TWindow a) -> IO CInt

-- | usage: (@windowGetMinWidth obj@).
windowGetMinWidth :: Window  a ->  IO Int
windowGetMinWidth _obj 
  = withIntResult $
    withObjectRef "windowGetMinWidth" _obj $ \cobj__obj -> 
    wxWindow_GetMinWidth cobj__obj  
foreign import ccall "wxWindow_GetMinWidth" wxWindow_GetMinWidth :: Ptr (TWindow a) -> IO CInt

-- | usage: (@windowGetName obj@).
windowGetName :: Window  a ->  IO (String)
windowGetName _obj 
  = withManagedStringResult $
    withObjectRef "windowGetName" _obj $ \cobj__obj -> 
    wxWindow_GetName cobj__obj  
foreign import ccall "wxWindow_GetName" wxWindow_GetName :: Ptr (TWindow a) -> IO (Ptr (TWxString ()))

-- | usage: (@windowGetParent obj@).
windowGetParent :: Window  a ->  IO (Window  ())
windowGetParent _obj 
  = withObjectResult $
    withObjectRef "windowGetParent" _obj $ \cobj__obj -> 
    wxWindow_GetParent cobj__obj  
foreign import ccall "wxWindow_GetParent" wxWindow_GetParent :: Ptr (TWindow a) -> IO (Ptr (TWindow ()))

-- | usage: (@windowGetPosition obj@).
windowGetPosition :: Window  a ->  IO (Point)
windowGetPosition _obj 
  = withWxPointResult $
    withObjectRef "windowGetPosition" _obj $ \cobj__obj -> 
    wxWindow_GetPosition cobj__obj  
foreign import ccall "wxWindow_GetPosition" wxWindow_GetPosition :: Ptr (TWindow a) -> IO (Ptr (TWxPoint ()))

-- | usage: (@windowGetPositionConstraint obj@).
windowGetPositionConstraint :: Window  a ->  IO Point
windowGetPositionConstraint _obj 
  = withPointResult $ \px py -> 
    withObjectRef "windowGetPositionConstraint" _obj $ \cobj__obj -> 
    wxWindow_GetPositionConstraint cobj__obj   px py
foreign import ccall "wxWindow_GetPositionConstraint" wxWindow_GetPositionConstraint :: Ptr (TWindow a) -> Ptr CInt -> Ptr CInt -> IO ()

-- | usage: (@windowGetRect obj@).
windowGetRect :: Window  a ->  IO (Rect)
windowGetRect _obj 
  = withWxRectResult $
    withObjectRef "windowGetRect" _obj $ \cobj__obj -> 
    wxWindow_GetRect cobj__obj  
foreign import ccall "wxWindow_GetRect" wxWindow_GetRect :: Ptr (TWindow a) -> IO (Ptr (TWxRect ()))

-- | usage: (@windowGetScrollPos obj orient@).
windowGetScrollPos :: Window  a -> Int ->  IO Int
windowGetScrollPos _obj orient 
  = withIntResult $
    withObjectRef "windowGetScrollPos" _obj $ \cobj__obj -> 
    wxWindow_GetScrollPos cobj__obj  (toCInt orient)  
foreign import ccall "wxWindow_GetScrollPos" wxWindow_GetScrollPos :: Ptr (TWindow a) -> CInt -> IO CInt

-- | usage: (@windowGetScrollRange obj orient@).
windowGetScrollRange :: Window  a -> Int ->  IO Int
windowGetScrollRange _obj orient 
  = withIntResult $
    withObjectRef "windowGetScrollRange" _obj $ \cobj__obj -> 
    wxWindow_GetScrollRange cobj__obj  (toCInt orient)  
foreign import ccall "wxWindow_GetScrollRange" wxWindow_GetScrollRange :: Ptr (TWindow a) -> CInt -> IO CInt

-- | usage: (@windowGetScrollThumb obj orient@).
windowGetScrollThumb :: Window  a -> Int ->  IO Int
windowGetScrollThumb _obj orient 
  = withIntResult $
    withObjectRef "windowGetScrollThumb" _obj $ \cobj__obj -> 
    wxWindow_GetScrollThumb cobj__obj  (toCInt orient)  
foreign import ccall "wxWindow_GetScrollThumb" wxWindow_GetScrollThumb :: Ptr (TWindow a) -> CInt -> IO CInt

-- | usage: (@windowGetSize obj@).
windowGetSize :: Window  a ->  IO (Size)
windowGetSize _obj 
  = withWxSizeResult $
    withObjectRef "windowGetSize" _obj $ \cobj__obj -> 
    wxWindow_GetSize cobj__obj  
foreign import ccall "wxWindow_GetSize" wxWindow_GetSize :: Ptr (TWindow a) -> IO (Ptr (TWxSize ()))

-- | usage: (@windowGetSizeConstraint obj@).
windowGetSizeConstraint :: Window  a ->  IO Size
windowGetSizeConstraint _obj 
  = withSizeResult $ \pw ph -> 
    withObjectRef "windowGetSizeConstraint" _obj $ \cobj__obj -> 
    wxWindow_GetSizeConstraint cobj__obj   pw ph
foreign import ccall "wxWindow_GetSizeConstraint" wxWindow_GetSizeConstraint :: Ptr (TWindow a) -> Ptr CInt -> Ptr CInt -> IO ()

-- | usage: (@windowGetSizer obj@).
windowGetSizer :: Window  a ->  IO (Sizer  ())
windowGetSizer _obj 
  = withObjectResult $
    withObjectRef "windowGetSizer" _obj $ \cobj__obj -> 
    wxWindow_GetSizer cobj__obj  
foreign import ccall "wxWindow_GetSizer" wxWindow_GetSizer :: Ptr (TWindow a) -> IO (Ptr (TSizer ()))

-- | usage: (@windowGetTextExtent obj string x y descent externalLeading theFont@).
windowGetTextExtent :: Window  a -> String -> Ptr CInt -> Ptr CInt -> Ptr CInt -> Ptr CInt -> Font  g ->  IO ()
windowGetTextExtent _obj string x y descent externalLeading theFont 
  = withObjectRef "windowGetTextExtent" _obj $ \cobj__obj -> 
    withStringPtr string $ \cobj_string -> 
    withObjectPtr theFont $ \cobj_theFont -> 
    wxWindow_GetTextExtent cobj__obj  cobj_string  x  y  descent  externalLeading  cobj_theFont  
foreign import ccall "wxWindow_GetTextExtent" wxWindow_GetTextExtent :: Ptr (TWindow a) -> Ptr (TWxString b) -> Ptr CInt -> Ptr CInt -> Ptr CInt -> Ptr CInt -> Ptr (TFont g) -> IO ()

-- | usage: (@windowGetToolTip obj@).
windowGetToolTip :: Window  a ->  IO (String)
windowGetToolTip _obj 
  = withManagedStringResult $
    withObjectRef "windowGetToolTip" _obj $ \cobj__obj -> 
    wxWindow_GetToolTip cobj__obj  
foreign import ccall "wxWindow_GetToolTip" wxWindow_GetToolTip :: Ptr (TWindow a) -> IO (Ptr (TWxString ()))

-- | usage: (@windowGetUpdateRegion obj@).
windowGetUpdateRegion :: Window  a ->  IO (Region  ())
windowGetUpdateRegion _obj 
  = withObjectResult $
    withObjectRef "windowGetUpdateRegion" _obj $ \cobj__obj -> 
    wxWindow_GetUpdateRegion cobj__obj  
foreign import ccall "wxWindow_GetUpdateRegion" wxWindow_GetUpdateRegion :: Ptr (TWindow a) -> IO (Ptr (TRegion ()))

-- | usage: (@windowGetValidator obj@).
windowGetValidator :: Window  a ->  IO (Validator  ())
windowGetValidator _obj 
  = withObjectResult $
    withObjectRef "windowGetValidator" _obj $ \cobj__obj -> 
    wxWindow_GetValidator cobj__obj  
foreign import ccall "wxWindow_GetValidator" wxWindow_GetValidator :: Ptr (TWindow a) -> IO (Ptr (TValidator ()))

-- | usage: (@windowGetVirtualSize obj@).
windowGetVirtualSize :: Window  a ->  IO (Size)
windowGetVirtualSize _obj 
  = withWxSizeResult $
    withObjectRef "windowGetVirtualSize" _obj $ \cobj__obj -> 
    wxWindow_GetVirtualSize cobj__obj  
foreign import ccall "wxWindow_GetVirtualSize" wxWindow_GetVirtualSize :: Ptr (TWindow a) -> IO (Ptr (TWxSize ()))

-- | usage: (@windowGetWindowStyleFlag obj@).
windowGetWindowStyleFlag :: Window  a ->  IO Int
windowGetWindowStyleFlag _obj 
  = withIntResult $
    withObjectRef "windowGetWindowStyleFlag" _obj $ \cobj__obj -> 
    wxWindow_GetWindowStyleFlag cobj__obj  
foreign import ccall "wxWindow_GetWindowStyleFlag" wxWindow_GetWindowStyleFlag :: Ptr (TWindow a) -> IO CInt

-- | usage: (@windowHasFlag obj flag@).
windowHasFlag :: Window  a -> Int ->  IO Bool
windowHasFlag _obj flag 
  = withBoolResult $
    withObjectRef "windowHasFlag" _obj $ \cobj__obj -> 
    wxWindow_HasFlag cobj__obj  (toCInt flag)  
foreign import ccall "wxWindow_HasFlag" wxWindow_HasFlag :: Ptr (TWindow a) -> CInt -> IO CBool

-- | usage: (@windowHasFocus obj@).
windowHasFocus :: Window  a ->  IO Bool
windowHasFocus _obj 
  = withBoolResult $
    withObjectRef "windowHasFocus" _obj $ \cobj__obj -> 
    wxWindow_HasFocus cobj__obj  
foreign import ccall "wxWindow_HasFocus" wxWindow_HasFocus :: Ptr (TWindow a) -> IO CBool

-- | usage: (@windowHide obj@).
windowHide :: Window  a ->  IO Bool
windowHide _obj 
  = withBoolResult $
    withObjectRef "windowHide" _obj $ \cobj__obj -> 
    wxWindow_Hide cobj__obj  
foreign import ccall "wxWindow_Hide" wxWindow_Hide :: Ptr (TWindow a) -> IO CBool

-- | usage: (@windowInitDialog obj@).
windowInitDialog :: Window  a ->  IO ()
windowInitDialog _obj 
  = withObjectRef "windowInitDialog" _obj $ \cobj__obj -> 
    wxWindow_InitDialog cobj__obj  
foreign import ccall "wxWindow_InitDialog" wxWindow_InitDialog :: Ptr (TWindow a) -> IO ()

-- | usage: (@windowIsBeingDeleted obj@).
windowIsBeingDeleted :: Window  a ->  IO Bool
windowIsBeingDeleted _obj 
  = withBoolResult $
    withObjectRef "windowIsBeingDeleted" _obj $ \cobj__obj -> 
    wxWindow_IsBeingDeleted cobj__obj  
foreign import ccall "wxWindow_IsBeingDeleted" wxWindow_IsBeingDeleted :: Ptr (TWindow a) -> IO CBool

-- | usage: (@windowIsEnabled obj@).
windowIsEnabled :: Window  a ->  IO Bool
windowIsEnabled _obj 
  = withBoolResult $
    withObjectRef "windowIsEnabled" _obj $ \cobj__obj -> 
    wxWindow_IsEnabled cobj__obj  
foreign import ccall "wxWindow_IsEnabled" wxWindow_IsEnabled :: Ptr (TWindow a) -> IO CBool

-- | usage: (@windowIsExposed obj xywh@).
windowIsExposed :: Window  a -> Rect ->  IO Bool
windowIsExposed _obj xywh 
  = withBoolResult $
    withObjectRef "windowIsExposed" _obj $ \cobj__obj -> 
    wxWindow_IsExposed cobj__obj  (toCIntRectX xywh) (toCIntRectY xywh)(toCIntRectW xywh) (toCIntRectH xywh)  
foreign import ccall "wxWindow_IsExposed" wxWindow_IsExposed :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> IO CBool

-- | usage: (@windowIsShown obj@).
windowIsShown :: Window  a ->  IO Bool
windowIsShown _obj 
  = withBoolResult $
    withObjectRef "windowIsShown" _obj $ \cobj__obj -> 
    wxWindow_IsShown cobj__obj  
foreign import ccall "wxWindow_IsShown" wxWindow_IsShown :: Ptr (TWindow a) -> IO CBool

-- | usage: (@windowIsTopLevel obj@).
windowIsTopLevel :: Window  a ->  IO Bool
windowIsTopLevel _obj 
  = withBoolResult $
    withObjectRef "windowIsTopLevel" _obj $ \cobj__obj -> 
    wxWindow_IsTopLevel cobj__obj  
foreign import ccall "wxWindow_IsTopLevel" wxWindow_IsTopLevel :: Ptr (TWindow a) -> IO CBool

-- | usage: (@windowLayout obj@).
windowLayout :: Window  a ->  IO Int
windowLayout _obj 
  = withIntResult $
    withObjectRef "windowLayout" _obj $ \cobj__obj -> 
    wxWindow_Layout cobj__obj  
foreign import ccall "wxWindow_Layout" wxWindow_Layout :: Ptr (TWindow a) -> IO CInt

-- | usage: (@windowLayoutPhase1 obj noChanges@).
windowLayoutPhase1 :: Window  a -> Ptr CInt ->  IO Int
windowLayoutPhase1 _obj noChanges 
  = withIntResult $
    withObjectRef "windowLayoutPhase1" _obj $ \cobj__obj -> 
    wxWindow_LayoutPhase1 cobj__obj  noChanges  
foreign import ccall "wxWindow_LayoutPhase1" wxWindow_LayoutPhase1 :: Ptr (TWindow a) -> Ptr CInt -> IO CInt

-- | usage: (@windowLayoutPhase2 obj noChanges@).
windowLayoutPhase2 :: Window  a -> Ptr CInt ->  IO Int
windowLayoutPhase2 _obj noChanges 
  = withIntResult $
    withObjectRef "windowLayoutPhase2" _obj $ \cobj__obj -> 
    wxWindow_LayoutPhase2 cobj__obj  noChanges  
foreign import ccall "wxWindow_LayoutPhase2" wxWindow_LayoutPhase2 :: Ptr (TWindow a) -> Ptr CInt -> IO CInt

-- | usage: (@windowLower obj@).
windowLower :: Window  a ->  IO ()
windowLower _obj 
  = withObjectRef "windowLower" _obj $ \cobj__obj -> 
    wxWindow_Lower cobj__obj  
foreign import ccall "wxWindow_Lower" wxWindow_Lower :: Ptr (TWindow a) -> IO ()

-- | usage: (@windowMove obj xy@).
windowMove :: Window  a -> Point ->  IO ()
windowMove _obj xy 
  = withObjectRef "windowMove" _obj $ \cobj__obj -> 
    wxWindow_Move cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
foreign import ccall "wxWindow_Move" wxWindow_Move :: Ptr (TWindow a) -> CInt -> CInt -> IO ()

-- | usage: (@windowMoveConstraint obj xy@).
windowMoveConstraint :: Window  a -> Point ->  IO ()
windowMoveConstraint _obj xy 
  = withObjectRef "windowMoveConstraint" _obj $ \cobj__obj -> 
    wxWindow_MoveConstraint cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
foreign import ccall "wxWindow_MoveConstraint" wxWindow_MoveConstraint :: Ptr (TWindow a) -> CInt -> CInt -> IO ()

-- | usage: (@windowPopEventHandler obj deleteHandler@).
windowPopEventHandler :: Window  a -> Bool ->  IO (Ptr  ())
windowPopEventHandler _obj deleteHandler 
  = withObjectRef "windowPopEventHandler" _obj $ \cobj__obj -> 
    wxWindow_PopEventHandler cobj__obj  (toCBool deleteHandler)  
foreign import ccall "wxWindow_PopEventHandler" wxWindow_PopEventHandler :: Ptr (TWindow a) -> CBool -> IO (Ptr  ())

-- | usage: (@windowPopupMenu obj menu xy@).
windowPopupMenu :: Window  a -> Menu  b -> Point ->  IO Int
windowPopupMenu _obj menu xy 
  = withIntResult $
    withObjectRef "windowPopupMenu" _obj $ \cobj__obj -> 
    withObjectPtr menu $ \cobj_menu -> 
    wxWindow_PopupMenu cobj__obj  cobj_menu  (toCIntPointX xy) (toCIntPointY xy)  
foreign import ccall "wxWindow_PopupMenu" wxWindow_PopupMenu :: Ptr (TWindow a) -> Ptr (TMenu b) -> CInt -> CInt -> IO CInt

-- | usage: (@windowPrepareDC obj dc@).
windowPrepareDC :: Window  a -> DC  b ->  IO ()
windowPrepareDC _obj dc 
  = withObjectRef "windowPrepareDC" _obj $ \cobj__obj -> 
    withObjectPtr dc $ \cobj_dc -> 
    wxWindow_PrepareDC cobj__obj  cobj_dc  
foreign import ccall "wxWindow_PrepareDC" wxWindow_PrepareDC :: Ptr (TWindow a) -> Ptr (TDC b) -> IO ()

-- | usage: (@windowPushEventHandler obj handler@).
windowPushEventHandler :: Window  a -> EvtHandler  b ->  IO ()
windowPushEventHandler _obj handler 
  = withObjectRef "windowPushEventHandler" _obj $ \cobj__obj -> 
    withObjectPtr handler $ \cobj_handler -> 
    wxWindow_PushEventHandler cobj__obj  cobj_handler  
foreign import ccall "wxWindow_PushEventHandler" wxWindow_PushEventHandler :: Ptr (TWindow a) -> Ptr (TEvtHandler b) -> IO ()

-- | usage: (@windowRaise obj@).
windowRaise :: Window  a ->  IO ()
windowRaise _obj 
  = withObjectRef "windowRaise" _obj $ \cobj__obj -> 
    wxWindow_Raise cobj__obj  
foreign import ccall "wxWindow_Raise" wxWindow_Raise :: Ptr (TWindow a) -> IO ()

-- | usage: (@windowRefresh obj eraseBackground@).
windowRefresh :: Window  a -> Bool ->  IO ()
windowRefresh _obj eraseBackground 
  = withObjectRef "windowRefresh" _obj $ \cobj__obj -> 
    wxWindow_Refresh cobj__obj  (toCBool eraseBackground)  
foreign import ccall "wxWindow_Refresh" wxWindow_Refresh :: Ptr (TWindow a) -> CBool -> IO ()

-- | usage: (@windowRefreshRect obj eraseBackground xywh@).
windowRefreshRect :: Window  a -> Bool -> Rect ->  IO ()
windowRefreshRect _obj eraseBackground xywh 
  = withObjectRef "windowRefreshRect" _obj $ \cobj__obj -> 
    wxWindow_RefreshRect cobj__obj  (toCBool eraseBackground)  (toCIntRectX xywh) (toCIntRectY xywh)(toCIntRectW xywh) (toCIntRectH xywh)  
foreign import ccall "wxWindow_RefreshRect" wxWindow_RefreshRect :: Ptr (TWindow a) -> CBool -> CInt -> CInt -> CInt -> CInt -> IO ()

-- | usage: (@windowReleaseMouse obj@).
windowReleaseMouse :: Window  a ->  IO ()
windowReleaseMouse _obj 
  = withObjectRef "windowReleaseMouse" _obj $ \cobj__obj -> 
    wxWindow_ReleaseMouse cobj__obj  
foreign import ccall "wxWindow_ReleaseMouse" wxWindow_ReleaseMouse :: Ptr (TWindow a) -> IO ()

-- | usage: (@windowRemoveChild obj child@).
windowRemoveChild :: Window  a -> Window  b ->  IO ()
windowRemoveChild _obj child 
  = withObjectRef "windowRemoveChild" _obj $ \cobj__obj -> 
    withObjectPtr child $ \cobj_child -> 
    wxWindow_RemoveChild cobj__obj  cobj_child  
foreign import ccall "wxWindow_RemoveChild" wxWindow_RemoveChild :: Ptr (TWindow a) -> Ptr (TWindow b) -> IO ()

-- | usage: (@windowRemoveConstraintReference obj otherWin@).
windowRemoveConstraintReference :: Window  a -> Window  b ->  IO ()
windowRemoveConstraintReference _obj otherWin 
  = withObjectRef "windowRemoveConstraintReference" _obj $ \cobj__obj -> 
    withObjectPtr otherWin $ \cobj_otherWin -> 
    wxWindow_RemoveConstraintReference cobj__obj  cobj_otherWin  
foreign import ccall "wxWindow_RemoveConstraintReference" wxWindow_RemoveConstraintReference :: Ptr (TWindow a) -> Ptr (TWindow b) -> IO ()

-- | usage: (@windowReparent obj par@).
windowReparent :: Window  a -> Window  b ->  IO Int
windowReparent _obj _par 
  = withIntResult $
    withObjectRef "windowReparent" _obj $ \cobj__obj -> 
    withObjectPtr _par $ \cobj__par -> 
    wxWindow_Reparent cobj__obj  cobj__par  
foreign import ccall "wxWindow_Reparent" wxWindow_Reparent :: Ptr (TWindow a) -> Ptr (TWindow b) -> IO CInt

-- | usage: (@windowResetConstraints obj@).
windowResetConstraints :: Window  a ->  IO ()
windowResetConstraints _obj 
  = withObjectRef "windowResetConstraints" _obj $ \cobj__obj -> 
    wxWindow_ResetConstraints cobj__obj  
foreign import ccall "wxWindow_ResetConstraints" wxWindow_ResetConstraints :: Ptr (TWindow a) -> IO ()

-- | usage: (@windowScreenToClient obj xy@).
windowScreenToClient :: Window  a -> Point ->  IO (Point)
windowScreenToClient _obj xy 
  = withWxPointResult $
    withObjectRef "windowScreenToClient" _obj $ \cobj__obj -> 
    wxWindow_ScreenToClient cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
foreign import ccall "wxWindow_ScreenToClient" wxWindow_ScreenToClient :: Ptr (TWindow a) -> CInt -> CInt -> IO (Ptr (TWxPoint ()))

-- | usage: (@windowScreenToClient2 obj xy@).
windowScreenToClient2 :: Window  a -> Point ->  IO (Point)
windowScreenToClient2 _obj xy 
  = withWxPointResult $
    withObjectRef "windowScreenToClient2" _obj $ \cobj__obj -> 
    wxWindow_ScreenToClient2 cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
foreign import ccall "wxWindow_ScreenToClient2" wxWindow_ScreenToClient2 :: Ptr (TWindow a) -> CInt -> CInt -> IO (Ptr (TWxPoint ()))

-- | usage: (@windowScrollWindow obj dxdy@).
windowScrollWindow :: Window  a -> Vector ->  IO ()
windowScrollWindow _obj dxdy 
  = withObjectRef "windowScrollWindow" _obj $ \cobj__obj -> 
    wxWindow_ScrollWindow cobj__obj  (toCIntVectorX dxdy) (toCIntVectorY dxdy)  
foreign import ccall "wxWindow_ScrollWindow" wxWindow_ScrollWindow :: Ptr (TWindow a) -> CInt -> CInt -> IO ()

-- | usage: (@windowScrollWindowRect obj dxdy xywh@).
windowScrollWindowRect :: Window  a -> Vector -> Rect ->  IO ()
windowScrollWindowRect _obj dxdy xywh 
  = withObjectRef "windowScrollWindowRect" _obj $ \cobj__obj -> 
    wxWindow_ScrollWindowRect cobj__obj  (toCIntVectorX dxdy) (toCIntVectorY dxdy)  (toCIntRectX xywh) (toCIntRectY xywh)(toCIntRectW xywh) (toCIntRectH xywh)  
foreign import ccall "wxWindow_ScrollWindowRect" wxWindow_ScrollWindowRect :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO ()

-- | usage: (@windowSetAcceleratorTable obj accel@).
windowSetAcceleratorTable :: Window  a -> AcceleratorTable  b ->  IO ()
windowSetAcceleratorTable _obj accel 
  = withObjectRef "windowSetAcceleratorTable" _obj $ \cobj__obj -> 
    withObjectPtr accel $ \cobj_accel -> 
    wxWindow_SetAcceleratorTable cobj__obj  cobj_accel  
foreign import ccall "wxWindow_SetAcceleratorTable" wxWindow_SetAcceleratorTable :: Ptr (TWindow a) -> Ptr (TAcceleratorTable b) -> IO ()

-- | usage: (@windowSetAutoLayout obj autoLayout@).
windowSetAutoLayout :: Window  a -> Bool ->  IO ()
windowSetAutoLayout _obj autoLayout 
  = withObjectRef "windowSetAutoLayout" _obj $ \cobj__obj -> 
    wxWindow_SetAutoLayout cobj__obj  (toCBool autoLayout)  
foreign import ccall "wxWindow_SetAutoLayout" wxWindow_SetAutoLayout :: Ptr (TWindow a) -> CBool -> IO ()

-- | usage: (@windowSetBackgroundColour obj colour@).
windowSetBackgroundColour :: Window  a -> Color ->  IO Int
windowSetBackgroundColour _obj colour 
  = withIntResult $
    withObjectRef "windowSetBackgroundColour" _obj $ \cobj__obj -> 
    withColourPtr colour $ \cobj_colour -> 
    wxWindow_SetBackgroundColour cobj__obj  cobj_colour  
foreign import ccall "wxWindow_SetBackgroundColour" wxWindow_SetBackgroundColour :: Ptr (TWindow a) -> Ptr (TColour b) -> IO CInt

-- | usage: (@windowSetCaret obj caret@).
windowSetCaret :: Window  a -> Caret  b ->  IO ()
windowSetCaret _obj caret 
  = withObjectRef "windowSetCaret" _obj $ \cobj__obj -> 
    withObjectPtr caret $ \cobj_caret -> 
    wxWindow_SetCaret cobj__obj  cobj_caret  
foreign import ccall "wxWindow_SetCaret" wxWindow_SetCaret :: Ptr (TWindow a) -> Ptr (TCaret b) -> IO ()

-- | usage: (@windowSetClientData obj wxdata@).
windowSetClientData :: Window  a -> ClientData  b ->  IO ()
windowSetClientData _obj wxdata 
  = withObjectRef "windowSetClientData" _obj $ \cobj__obj -> 
    withObjectPtr wxdata $ \cobj_wxdata -> 
    wxWindow_SetClientData cobj__obj  cobj_wxdata  
foreign import ccall "wxWindow_SetClientData" wxWindow_SetClientData :: Ptr (TWindow a) -> Ptr (TClientData b) -> IO ()

-- | usage: (@windowSetClientObject obj wxdata@).
windowSetClientObject :: Window  a -> ClientData  b ->  IO ()
windowSetClientObject _obj wxdata 
  = withObjectRef "windowSetClientObject" _obj $ \cobj__obj -> 
    withObjectPtr wxdata $ \cobj_wxdata -> 
    wxWindow_SetClientObject cobj__obj  cobj_wxdata  
foreign import ccall "wxWindow_SetClientObject" wxWindow_SetClientObject :: Ptr (TWindow a) -> Ptr (TClientData b) -> IO ()

-- | usage: (@windowSetClientSize obj widthheight@).
windowSetClientSize :: Window  a -> Size ->  IO ()
windowSetClientSize _obj widthheight 
  = withObjectRef "windowSetClientSize" _obj $ \cobj__obj -> 
    wxWindow_SetClientSize cobj__obj  (toCIntSizeW widthheight) (toCIntSizeH widthheight)  
foreign import ccall "wxWindow_SetClientSize" wxWindow_SetClientSize :: Ptr (TWindow a) -> CInt -> CInt -> IO ()

-- | usage: (@windowSetConstraintSizes obj recurse@).
windowSetConstraintSizes :: Window  a -> Int ->  IO ()
windowSetConstraintSizes _obj recurse 
  = withObjectRef "windowSetConstraintSizes" _obj $ \cobj__obj -> 
    wxWindow_SetConstraintSizes cobj__obj  (toCInt recurse)  
foreign import ccall "wxWindow_SetConstraintSizes" wxWindow_SetConstraintSizes :: Ptr (TWindow a) -> CInt -> IO ()

-- | usage: (@windowSetConstraints obj constraints@).
windowSetConstraints :: Window  a -> LayoutConstraints  b ->  IO ()
windowSetConstraints _obj constraints 
  = withObjectRef "windowSetConstraints" _obj $ \cobj__obj -> 
    withObjectPtr constraints $ \cobj_constraints -> 
    wxWindow_SetConstraints cobj__obj  cobj_constraints  
foreign import ccall "wxWindow_SetConstraints" wxWindow_SetConstraints :: Ptr (TWindow a) -> Ptr (TLayoutConstraints b) -> IO ()

-- | usage: (@windowSetCursor obj cursor@).
windowSetCursor :: Window  a -> Cursor  b ->  IO Int
windowSetCursor _obj cursor 
  = withIntResult $
    withObjectRef "windowSetCursor" _obj $ \cobj__obj -> 
    withObjectPtr cursor $ \cobj_cursor -> 
    wxWindow_SetCursor cobj__obj  cobj_cursor  
foreign import ccall "wxWindow_SetCursor" wxWindow_SetCursor :: Ptr (TWindow a) -> Ptr (TCursor b) -> IO CInt

-- | usage: (@windowSetDropTarget obj dropTarget@).
windowSetDropTarget :: Window  a -> DropTarget  b ->  IO ()
windowSetDropTarget _obj dropTarget 
  = withObjectRef "windowSetDropTarget" _obj $ \cobj__obj -> 
    withObjectPtr dropTarget $ \cobj_dropTarget -> 
    wxWindow_SetDropTarget cobj__obj  cobj_dropTarget  
foreign import ccall "wxWindow_SetDropTarget" wxWindow_SetDropTarget :: Ptr (TWindow a) -> Ptr (TDropTarget b) -> IO ()

-- | usage: (@windowSetExtraStyle obj exStyle@).
windowSetExtraStyle :: Window  a -> Int ->  IO ()
windowSetExtraStyle _obj exStyle 
  = withObjectRef "windowSetExtraStyle" _obj $ \cobj__obj -> 
    wxWindow_SetExtraStyle cobj__obj  (toCInt exStyle)  
foreign import ccall "wxWindow_SetExtraStyle" wxWindow_SetExtraStyle :: Ptr (TWindow a) -> CInt -> IO ()

-- | usage: (@windowSetFocus obj@).
windowSetFocus :: Window  a ->  IO ()
windowSetFocus _obj 
  = withObjectRef "windowSetFocus" _obj $ \cobj__obj -> 
    wxWindow_SetFocus cobj__obj  
foreign import ccall "wxWindow_SetFocus" wxWindow_SetFocus :: Ptr (TWindow a) -> IO ()

-- | usage: (@windowSetFont obj font@).
windowSetFont :: Window  a -> Font  b ->  IO Int
windowSetFont _obj font 
  = withIntResult $
    withObjectRef "windowSetFont" _obj $ \cobj__obj -> 
    withObjectPtr font $ \cobj_font -> 
    wxWindow_SetFont cobj__obj  cobj_font  
foreign import ccall "wxWindow_SetFont" wxWindow_SetFont :: Ptr (TWindow a) -> Ptr (TFont b) -> IO CInt

-- | usage: (@windowSetForegroundColour obj colour@).
windowSetForegroundColour :: Window  a -> Color ->  IO Int
windowSetForegroundColour _obj colour 
  = withIntResult $
    withObjectRef "windowSetForegroundColour" _obj $ \cobj__obj -> 
    withColourPtr colour $ \cobj_colour -> 
    wxWindow_SetForegroundColour cobj__obj  cobj_colour  
foreign import ccall "wxWindow_SetForegroundColour" wxWindow_SetForegroundColour :: Ptr (TWindow a) -> Ptr (TColour b) -> IO CInt

-- | usage: (@windowSetId obj id@).
windowSetId :: Window  a -> Id ->  IO ()
windowSetId _obj _id 
  = withObjectRef "windowSetId" _obj $ \cobj__obj -> 
    wxWindow_SetId cobj__obj  (toCInt _id)  
foreign import ccall "wxWindow_SetId" wxWindow_SetId :: Ptr (TWindow a) -> CInt -> IO ()

-- | usage: (@windowSetLabel obj title@).
windowSetLabel :: Window  a -> String ->  IO ()
windowSetLabel _obj _title 
  = withObjectRef "windowSetLabel" _obj $ \cobj__obj -> 
    withStringPtr _title $ \cobj__title -> 
    wxWindow_SetLabel cobj__obj  cobj__title  
foreign import ccall "wxWindow_SetLabel" wxWindow_SetLabel :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO ()

-- | usage: (@windowSetName obj name@).
windowSetName :: Window  a -> String ->  IO ()
windowSetName _obj _name 
  = withObjectRef "windowSetName" _obj $ \cobj__obj -> 
    withStringPtr _name $ \cobj__name -> 
    wxWindow_SetName cobj__obj  cobj__name  
foreign import ccall "wxWindow_SetName" wxWindow_SetName :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO ()

-- | usage: (@windowSetScrollPos obj orient pos refresh@).
windowSetScrollPos :: Window  a -> Int -> Int -> Bool ->  IO ()
windowSetScrollPos _obj orient pos refresh 
  = withObjectRef "windowSetScrollPos" _obj $ \cobj__obj -> 
    wxWindow_SetScrollPos cobj__obj  (toCInt orient)  (toCInt pos)  (toCBool refresh)  
foreign import ccall "wxWindow_SetScrollPos" wxWindow_SetScrollPos :: Ptr (TWindow a) -> CInt -> CInt -> CBool -> IO ()

-- | usage: (@windowSetScrollbar obj orient pos thumbVisible range refresh@).
windowSetScrollbar :: Window  a -> Int -> Int -> Int -> Int -> Bool ->  IO ()
windowSetScrollbar _obj orient pos thumbVisible range refresh 
  = withObjectRef "windowSetScrollbar" _obj $ \cobj__obj -> 
    wxWindow_SetScrollbar cobj__obj  (toCInt orient)  (toCInt pos)  (toCInt thumbVisible)  (toCInt range)  (toCBool refresh)  
foreign import ccall "wxWindow_SetScrollbar" wxWindow_SetScrollbar :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CBool -> IO ()

-- | usage: (@windowSetSize obj xywidthheight sizeFlags@).
windowSetSize :: Window  a -> Rect -> Int ->  IO ()
windowSetSize _obj xywidthheight sizeFlags 
  = withObjectRef "windowSetSize" _obj $ \cobj__obj -> 
    wxWindow_SetSize cobj__obj  (toCIntRectX xywidthheight) (toCIntRectY xywidthheight)(toCIntRectW xywidthheight) (toCIntRectH xywidthheight)  (toCInt sizeFlags)  
foreign import ccall "wxWindow_SetSize" wxWindow_SetSize :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> IO ()

-- | usage: (@windowSetSizeConstraint obj xywh@).
windowSetSizeConstraint :: Window  a -> Rect ->  IO ()
windowSetSizeConstraint _obj xywh 
  = withObjectRef "windowSetSizeConstraint" _obj $ \cobj__obj -> 
    wxWindow_SetSizeConstraint cobj__obj  (toCIntRectX xywh) (toCIntRectY xywh)(toCIntRectW xywh) (toCIntRectH xywh)  
foreign import ccall "wxWindow_SetSizeConstraint" wxWindow_SetSizeConstraint :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> IO ()

-- | usage: (@windowSetSizeHints obj minW minH maxW maxH incW incH@).
windowSetSizeHints :: Window  a -> Int -> Int -> Int -> Int -> Int -> Int ->  IO ()
windowSetSizeHints _obj minW minH maxW maxH incW incH 
  = withObjectRef "windowSetSizeHints" _obj $ \cobj__obj -> 
    wxWindow_SetSizeHints cobj__obj  (toCInt minW)  (toCInt minH)  (toCInt maxW)  (toCInt maxH)  (toCInt incW)  (toCInt incH)  
foreign import ccall "wxWindow_SetSizeHints" wxWindow_SetSizeHints :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO ()

-- | usage: (@windowSetSizer obj sizer@).
windowSetSizer :: Window  a -> Sizer  b ->  IO ()
windowSetSizer _obj sizer 
  = withObjectRef "windowSetSizer" _obj $ \cobj__obj -> 
    withObjectPtr sizer $ \cobj_sizer -> 
    wxWindow_SetSizer cobj__obj  cobj_sizer  
foreign import ccall "wxWindow_SetSizer" wxWindow_SetSizer :: Ptr (TWindow a) -> Ptr (TSizer b) -> IO ()

-- | usage: (@windowSetToolTip obj tip@).
windowSetToolTip :: Window  a -> String ->  IO ()
windowSetToolTip _obj tip 
  = withObjectRef "windowSetToolTip" _obj $ \cobj__obj -> 
    withStringPtr tip $ \cobj_tip -> 
    wxWindow_SetToolTip cobj__obj  cobj_tip  
foreign import ccall "wxWindow_SetToolTip" wxWindow_SetToolTip :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO ()

-- | usage: (@windowSetValidator obj validator@).
windowSetValidator :: Window  a -> Validator  b ->  IO ()
windowSetValidator _obj validator 
  = withObjectRef "windowSetValidator" _obj $ \cobj__obj -> 
    withObjectPtr validator $ \cobj_validator -> 
    wxWindow_SetValidator cobj__obj  cobj_validator  
foreign import ccall "wxWindow_SetValidator" wxWindow_SetValidator :: Ptr (TWindow a) -> Ptr (TValidator b) -> IO ()

-- | usage: (@windowSetVirtualSize obj wh@).
windowSetVirtualSize :: Window  a -> Size ->  IO ()
windowSetVirtualSize _obj wh 
  = withObjectRef "windowSetVirtualSize" _obj $ \cobj__obj -> 
    wxWindow_SetVirtualSize cobj__obj  (toCIntSizeW wh) (toCIntSizeH wh)  
foreign import ccall "wxWindow_SetVirtualSize" wxWindow_SetVirtualSize :: Ptr (TWindow a) -> CInt -> CInt -> IO ()

-- | usage: (@windowSetWindowStyleFlag obj style@).
windowSetWindowStyleFlag :: Window  a -> Int ->  IO ()
windowSetWindowStyleFlag _obj style 
  = withObjectRef "windowSetWindowStyleFlag" _obj $ \cobj__obj -> 
    wxWindow_SetWindowStyleFlag cobj__obj  (toCInt style)  
foreign import ccall "wxWindow_SetWindowStyleFlag" wxWindow_SetWindowStyleFlag :: Ptr (TWindow a) -> CInt -> IO ()

-- | usage: (@windowShow obj@).
windowShow :: Window  a ->  IO Bool
windowShow _obj 
  = withBoolResult $
    withObjectRef "windowShow" _obj $ \cobj__obj -> 
    wxWindow_Show cobj__obj  
foreign import ccall "wxWindow_Show" wxWindow_Show :: Ptr (TWindow a) -> IO CBool

-- | usage: (@windowThaw obj@).
windowThaw :: Window  a ->  IO ()
windowThaw _obj 
  = withObjectRef "windowThaw" _obj $ \cobj__obj -> 
    wxWindow_Thaw cobj__obj  
foreign import ccall "wxWindow_Thaw" wxWindow_Thaw :: Ptr (TWindow a) -> IO ()

-- | usage: (@windowTransferDataFromWindow obj@).
windowTransferDataFromWindow :: Window  a ->  IO Bool
windowTransferDataFromWindow _obj 
  = withBoolResult $
    withObjectRef "windowTransferDataFromWindow" _obj $ \cobj__obj -> 
    wxWindow_TransferDataFromWindow cobj__obj  
foreign import ccall "wxWindow_TransferDataFromWindow" wxWindow_TransferDataFromWindow :: Ptr (TWindow a) -> IO CBool

-- | usage: (@windowTransferDataToWindow obj@).
windowTransferDataToWindow :: Window  a ->  IO Bool
windowTransferDataToWindow _obj 
  = withBoolResult $
    withObjectRef "windowTransferDataToWindow" _obj $ \cobj__obj -> 
    wxWindow_TransferDataToWindow cobj__obj  
foreign import ccall "wxWindow_TransferDataToWindow" wxWindow_TransferDataToWindow :: Ptr (TWindow a) -> IO CBool

-- | usage: (@windowUnsetConstraints obj c@).
windowUnsetConstraints :: Window  a -> Ptr  b ->  IO ()
windowUnsetConstraints _obj c 
  = withObjectRef "windowUnsetConstraints" _obj $ \cobj__obj -> 
    wxWindow_UnsetConstraints cobj__obj  c  
foreign import ccall "wxWindow_UnsetConstraints" wxWindow_UnsetConstraints :: Ptr (TWindow a) -> Ptr  b -> IO ()

-- | usage: (@windowUpdateWindowUI obj@).
windowUpdateWindowUI :: Window  a ->  IO ()
windowUpdateWindowUI _obj 
  = withObjectRef "windowUpdateWindowUI" _obj $ \cobj__obj -> 
    wxWindow_UpdateWindowUI cobj__obj  
foreign import ccall "wxWindow_UpdateWindowUI" wxWindow_UpdateWindowUI :: Ptr (TWindow a) -> IO ()

-- | usage: (@windowValidate obj@).
windowValidate :: Window  a ->  IO Bool
windowValidate _obj 
  = withBoolResult $
    withObjectRef "windowValidate" _obj $ \cobj__obj -> 
    wxWindow_Validate cobj__obj  
foreign import ccall "wxWindow_Validate" wxWindow_Validate :: Ptr (TWindow a) -> IO CBool

-- | usage: (@windowWarpPointer obj xy@).
windowWarpPointer :: Window  a -> Point ->  IO ()
windowWarpPointer _obj xy 
  = withObjectRef "windowWarpPointer" _obj $ \cobj__obj -> 
    wxWindow_WarpPointer cobj__obj  (toCIntPointX xy) (toCIntPointY xy)  
foreign import ccall "wxWindow_WarpPointer" wxWindow_WarpPointer :: Ptr (TWindow a) -> CInt -> CInt -> IO ()

-- | usage: (@wizardChain f s@).
wizardChain :: WizardPageSimple  a -> WizardPageSimple  b ->  IO ()
wizardChain f s 
  = withObjectPtr f $ \cobj_f -> 
    withObjectPtr s $ \cobj_s -> 
    wxWizard_Chain cobj_f  cobj_s  
foreign import ccall "wxWizard_Chain" wxWizard_Chain :: Ptr (TWizardPageSimple a) -> Ptr (TWizardPageSimple b) -> IO ()

-- | usage: (@wizardCreate prt id txt bmp lfttopwdthgt@).
wizardCreate :: Window  a -> Id -> String -> Bitmap  d -> Rect ->  IO (Wizard  ())
wizardCreate _prt _id _txt _bmp _lfttopwdthgt 
  = withObjectResult $
    withObjectPtr _prt $ \cobj__prt -> 
    withStringPtr _txt $ \cobj__txt -> 
    withObjectPtr _bmp $ \cobj__bmp -> 
    wxWizard_Create cobj__prt  (toCInt _id)  cobj__txt  cobj__bmp  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  
foreign import ccall "wxWizard_Create" wxWizard_Create :: Ptr (TWindow a) -> CInt -> Ptr (TWxString c) -> Ptr (TBitmap d) -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TWizard ()))

-- | usage: (@wizardEventGetDirection obj@).
wizardEventGetDirection :: WizardEvent  a ->  IO Int
wizardEventGetDirection _obj 
  = withIntResult $
    withObjectRef "wizardEventGetDirection" _obj $ \cobj__obj -> 
    wxWizardEvent_GetDirection cobj__obj  
foreign import ccall "wxWizardEvent_GetDirection" wxWizardEvent_GetDirection :: Ptr (TWizardEvent a) -> IO CInt

-- | usage: (@wizardGetCurrentPage obj@).
wizardGetCurrentPage :: Wizard  a ->  IO (WizardPage  ())
wizardGetCurrentPage _obj 
  = withObjectResult $
    withObjectRef "wizardGetCurrentPage" _obj $ \cobj__obj -> 
    wxWizard_GetCurrentPage cobj__obj  
foreign import ccall "wxWizard_GetCurrentPage" wxWizard_GetCurrentPage :: Ptr (TWizard a) -> IO (Ptr (TWizardPage ()))

-- | usage: (@wizardGetPageSize obj@).
wizardGetPageSize :: Wizard  a ->  IO (Size)
wizardGetPageSize _obj 
  = withWxSizeResult $
    withObjectRef "wizardGetPageSize" _obj $ \cobj__obj -> 
    wxWizard_GetPageSize cobj__obj  
foreign import ccall "wxWizard_GetPageSize" wxWizard_GetPageSize :: Ptr (TWizard a) -> IO (Ptr (TWxSize ()))

-- | usage: (@wizardPageSimpleCreate prt@).
wizardPageSimpleCreate :: Wizard  a ->  IO (WizardPageSimple  ())
wizardPageSimpleCreate _prt 
  = withObjectResult $
    withObjectPtr _prt $ \cobj__prt -> 
    wxWizardPageSimple_Create cobj__prt  
foreign import ccall "wxWizardPageSimple_Create" wxWizardPageSimple_Create :: Ptr (TWizard a) -> IO (Ptr (TWizardPageSimple ()))

-- | usage: (@wizardPageSimpleGetBitmap obj@).
wizardPageSimpleGetBitmap :: WizardPageSimple  a ->  IO (Bitmap  ())
wizardPageSimpleGetBitmap _obj 
  = withRefBitmap $ \pref -> 
    withObjectRef "wizardPageSimpleGetBitmap" _obj $ \cobj__obj -> 
    wxWizardPageSimple_GetBitmap cobj__obj   pref
foreign import ccall "wxWizardPageSimple_GetBitmap" wxWizardPageSimple_GetBitmap :: Ptr (TWizardPageSimple a) -> Ptr (TBitmap ()) -> IO ()

-- | usage: (@wizardPageSimpleGetNext obj@).
wizardPageSimpleGetNext :: WizardPageSimple  a ->  IO (WizardPageSimple  ())
wizardPageSimpleGetNext _obj 
  = withObjectResult $
    withObjectRef "wizardPageSimpleGetNext" _obj $ \cobj__obj -> 
    wxWizardPageSimple_GetNext cobj__obj  
foreign import ccall "wxWizardPageSimple_GetNext" wxWizardPageSimple_GetNext :: Ptr (TWizardPageSimple a) -> IO (Ptr (TWizardPageSimple ()))

-- | usage: (@wizardPageSimpleGetPrev obj@).
wizardPageSimpleGetPrev :: WizardPageSimple  a ->  IO (WizardPageSimple  ())
wizardPageSimpleGetPrev _obj 
  = withObjectResult $
    withObjectRef "wizardPageSimpleGetPrev" _obj $ \cobj__obj -> 
    wxWizardPageSimple_GetPrev cobj__obj  
foreign import ccall "wxWizardPageSimple_GetPrev" wxWizardPageSimple_GetPrev :: Ptr (TWizardPageSimple a) -> IO (Ptr (TWizardPageSimple ()))

-- | usage: (@wizardPageSimpleSetNext obj next@).
wizardPageSimpleSetNext :: WizardPageSimple  a -> WizardPageSimple  b ->  IO ()
wizardPageSimpleSetNext _obj next 
  = withObjectRef "wizardPageSimpleSetNext" _obj $ \cobj__obj -> 
    withObjectPtr next $ \cobj_next -> 
    wxWizardPageSimple_SetNext cobj__obj  cobj_next  
foreign import ccall "wxWizardPageSimple_SetNext" wxWizardPageSimple_SetNext :: Ptr (TWizardPageSimple a) -> Ptr (TWizardPageSimple b) -> IO ()

-- | usage: (@wizardPageSimpleSetPrev obj prev@).
wizardPageSimpleSetPrev :: WizardPageSimple  a -> WizardPageSimple  b ->  IO ()
wizardPageSimpleSetPrev _obj prev 
  = withObjectRef "wizardPageSimpleSetPrev" _obj $ \cobj__obj -> 
    withObjectPtr prev $ \cobj_prev -> 
    wxWizardPageSimple_SetPrev cobj__obj  cobj_prev  
foreign import ccall "wxWizardPageSimple_SetPrev" wxWizardPageSimple_SetPrev :: Ptr (TWizardPageSimple a) -> Ptr (TWizardPageSimple b) -> IO ()

-- | usage: (@wizardRunWizard obj firstPage@).
wizardRunWizard :: Wizard  a -> WizardPage  b ->  IO Int
wizardRunWizard _obj firstPage 
  = withIntResult $
    withObjectRef "wizardRunWizard" _obj $ \cobj__obj -> 
    withObjectPtr firstPage $ \cobj_firstPage -> 
    wxWizard_RunWizard cobj__obj  cobj_firstPage  
foreign import ccall "wxWizard_RunWizard" wxWizard_RunWizard :: Ptr (TWizard a) -> Ptr (TWizardPage b) -> IO CInt

-- | usage: (@wizardSetPageSize obj wh@).
wizardSetPageSize :: Wizard  a -> Size ->  IO ()
wizardSetPageSize _obj wh 
  = withObjectRef "wizardSetPageSize" _obj $ \cobj__obj -> 
    wxWizard_SetPageSize cobj__obj  (toCIntSizeW wh) (toCIntSizeH wh)  
foreign import ccall "wxWizard_SetPageSize" wxWizard_SetPageSize :: Ptr (TWizard a) -> CInt -> CInt -> IO ()

-- | usage: (@wxBK_HITTEST_NOWHERE@).
{-# NOINLINE wxBK_HITTEST_NOWHERE #-}
wxBK_HITTEST_NOWHERE ::  Int
wxBK_HITTEST_NOWHERE 
  = unsafePerformIO $
    withIntResult $
    wx_expBK_HITTEST_NOWHERE 
foreign import ccall "expBK_HITTEST_NOWHERE" wx_expBK_HITTEST_NOWHERE :: IO CInt

-- | usage: (@wxBK_HITTEST_ONICON@).
{-# NOINLINE wxBK_HITTEST_ONICON #-}
wxBK_HITTEST_ONICON ::  Int
wxBK_HITTEST_ONICON 
  = unsafePerformIO $
    withIntResult $
    wx_expBK_HITTEST_ONICON 
foreign import ccall "expBK_HITTEST_ONICON" wx_expBK_HITTEST_ONICON :: IO CInt

-- | usage: (@wxBK_HITTEST_ONITEM@).
{-# NOINLINE wxBK_HITTEST_ONITEM #-}
wxBK_HITTEST_ONITEM ::  Int
wxBK_HITTEST_ONITEM 
  = unsafePerformIO $
    withIntResult $
    wx_expBK_HITTEST_ONITEM 
foreign import ccall "expBK_HITTEST_ONITEM" wx_expBK_HITTEST_ONITEM :: IO CInt

-- | usage: (@wxBK_HITTEST_ONLABEL@).
{-# NOINLINE wxBK_HITTEST_ONLABEL #-}
wxBK_HITTEST_ONLABEL ::  Int
wxBK_HITTEST_ONLABEL 
  = unsafePerformIO $
    withIntResult $
    wx_expBK_HITTEST_ONLABEL 
foreign import ccall "expBK_HITTEST_ONLABEL" wx_expBK_HITTEST_ONLABEL :: IO CInt

-- | usage: (@wxBK_HITTEST_ONPAGE@).
{-# NOINLINE wxBK_HITTEST_ONPAGE #-}
wxBK_HITTEST_ONPAGE ::  Int
wxBK_HITTEST_ONPAGE 
  = unsafePerformIO $
    withIntResult $
    wx_expBK_HITTEST_ONPAGE 
foreign import ccall "expBK_HITTEST_ONPAGE" wx_expBK_HITTEST_ONPAGE :: IO CInt

-- | usage: (@wxEVT_ACTIVATE@).
{-# NOINLINE wxEVT_ACTIVATE #-}
wxEVT_ACTIVATE ::  EventId
wxEVT_ACTIVATE 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_ACTIVATE 
foreign import ccall "expEVT_ACTIVATE" wx_expEVT_ACTIVATE :: IO CInt

-- | usage: (@wxEVT_ACTIVATE_APP@).
{-# NOINLINE wxEVT_ACTIVATE_APP #-}
wxEVT_ACTIVATE_APP ::  EventId
wxEVT_ACTIVATE_APP 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_ACTIVATE_APP 
foreign import ccall "expEVT_ACTIVATE_APP" wx_expEVT_ACTIVATE_APP :: IO CInt

-- | usage: (@wxEVT_AUINOTEBOOK_ALLOW_DND@).
{-# NOINLINE wxEVT_AUINOTEBOOK_ALLOW_DND #-}
wxEVT_AUINOTEBOOK_ALLOW_DND ::  EventId
wxEVT_AUINOTEBOOK_ALLOW_DND 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_AUINOTEBOOK_ALLOW_DND 
foreign import ccall "expEVT_AUINOTEBOOK_ALLOW_DND" wx_expEVT_AUINOTEBOOK_ALLOW_DND :: IO CInt

-- | usage: (@wxEVT_AUINOTEBOOK_BEGIN_DRAG@).
{-# NOINLINE wxEVT_AUINOTEBOOK_BEGIN_DRAG #-}
wxEVT_AUINOTEBOOK_BEGIN_DRAG ::  EventId
wxEVT_AUINOTEBOOK_BEGIN_DRAG 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_AUINOTEBOOK_BEGIN_DRAG 
foreign import ccall "expEVT_AUINOTEBOOK_BEGIN_DRAG" wx_expEVT_AUINOTEBOOK_BEGIN_DRAG :: IO CInt

-- | usage: (@wxEVT_AUINOTEBOOK_BG_DCLICK@).
{-# NOINLINE wxEVT_AUINOTEBOOK_BG_DCLICK #-}
wxEVT_AUINOTEBOOK_BG_DCLICK ::  EventId
wxEVT_AUINOTEBOOK_BG_DCLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_AUINOTEBOOK_BG_DCLICK 
foreign import ccall "expEVT_AUINOTEBOOK_BG_DCLICK" wx_expEVT_AUINOTEBOOK_BG_DCLICK :: IO CInt

-- | usage: (@wxEVT_AUINOTEBOOK_BUTTON@).
{-# NOINLINE wxEVT_AUINOTEBOOK_BUTTON #-}
wxEVT_AUINOTEBOOK_BUTTON ::  EventId
wxEVT_AUINOTEBOOK_BUTTON 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_AUINOTEBOOK_BUTTON 
foreign import ccall "expEVT_AUINOTEBOOK_BUTTON" wx_expEVT_AUINOTEBOOK_BUTTON :: IO CInt

-- | usage: (@wxEVT_AUINOTEBOOK_DRAG_DONE@).
{-# NOINLINE wxEVT_AUINOTEBOOK_DRAG_DONE #-}
wxEVT_AUINOTEBOOK_DRAG_DONE ::  EventId
wxEVT_AUINOTEBOOK_DRAG_DONE 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_AUINOTEBOOK_DRAG_DONE 
foreign import ccall "expEVT_AUINOTEBOOK_DRAG_DONE" wx_expEVT_AUINOTEBOOK_DRAG_DONE :: IO CInt

-- | usage: (@wxEVT_AUINOTEBOOK_DRAG_MOTION@).
{-# NOINLINE wxEVT_AUINOTEBOOK_DRAG_MOTION #-}
wxEVT_AUINOTEBOOK_DRAG_MOTION ::  EventId
wxEVT_AUINOTEBOOK_DRAG_MOTION 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_AUINOTEBOOK_DRAG_MOTION 
foreign import ccall "expEVT_AUINOTEBOOK_DRAG_MOTION" wx_expEVT_AUINOTEBOOK_DRAG_MOTION :: IO CInt

-- | usage: (@wxEVT_AUINOTEBOOK_END_DRAG@).
{-# NOINLINE wxEVT_AUINOTEBOOK_END_DRAG #-}
wxEVT_AUINOTEBOOK_END_DRAG ::  EventId
wxEVT_AUINOTEBOOK_END_DRAG 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_AUINOTEBOOK_END_DRAG 
foreign import ccall "expEVT_AUINOTEBOOK_END_DRAG" wx_expEVT_AUINOTEBOOK_END_DRAG :: IO CInt

-- | usage: (@wxEVT_AUINOTEBOOK_PAGE_CHANGED@).
{-# NOINLINE wxEVT_AUINOTEBOOK_PAGE_CHANGED #-}
wxEVT_AUINOTEBOOK_PAGE_CHANGED ::  EventId
wxEVT_AUINOTEBOOK_PAGE_CHANGED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_AUINOTEBOOK_PAGE_CHANGED 
foreign import ccall "expEVT_AUINOTEBOOK_PAGE_CHANGED" wx_expEVT_AUINOTEBOOK_PAGE_CHANGED :: IO CInt

-- | usage: (@wxEVT_AUINOTEBOOK_PAGE_CHANGING@).
{-# NOINLINE wxEVT_AUINOTEBOOK_PAGE_CHANGING #-}
wxEVT_AUINOTEBOOK_PAGE_CHANGING ::  EventId
wxEVT_AUINOTEBOOK_PAGE_CHANGING 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_AUINOTEBOOK_PAGE_CHANGING 
foreign import ccall "expEVT_AUINOTEBOOK_PAGE_CHANGING" wx_expEVT_AUINOTEBOOK_PAGE_CHANGING :: IO CInt

-- | usage: (@wxEVT_AUINOTEBOOK_PAGE_CLOSE@).
{-# NOINLINE wxEVT_AUINOTEBOOK_PAGE_CLOSE #-}
wxEVT_AUINOTEBOOK_PAGE_CLOSE ::  EventId
wxEVT_AUINOTEBOOK_PAGE_CLOSE 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_AUINOTEBOOK_PAGE_CLOSE 
foreign import ccall "expEVT_AUINOTEBOOK_PAGE_CLOSE" wx_expEVT_AUINOTEBOOK_PAGE_CLOSE :: IO CInt

-- | usage: (@wxEVT_AUINOTEBOOK_PAGE_CLOSED@).
{-# NOINLINE wxEVT_AUINOTEBOOK_PAGE_CLOSED #-}
wxEVT_AUINOTEBOOK_PAGE_CLOSED ::  EventId
wxEVT_AUINOTEBOOK_PAGE_CLOSED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_AUINOTEBOOK_PAGE_CLOSED 
foreign import ccall "expEVT_AUINOTEBOOK_PAGE_CLOSED" wx_expEVT_AUINOTEBOOK_PAGE_CLOSED :: IO CInt

-- | usage: (@wxEVT_AUINOTEBOOK_TAB_MIDDLE_DOWN@).
{-# NOINLINE wxEVT_AUINOTEBOOK_TAB_MIDDLE_DOWN #-}
wxEVT_AUINOTEBOOK_TAB_MIDDLE_DOWN ::  EventId
wxEVT_AUINOTEBOOK_TAB_MIDDLE_DOWN 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_AUINOTEBOOK_TAB_MIDDLE_DOWN 
foreign import ccall "expEVT_AUINOTEBOOK_TAB_MIDDLE_DOWN" wx_expEVT_AUINOTEBOOK_TAB_MIDDLE_DOWN :: IO CInt

-- | usage: (@wxEVT_AUINOTEBOOK_TAB_MIDDLE_UP@).
{-# NOINLINE wxEVT_AUINOTEBOOK_TAB_MIDDLE_UP #-}
wxEVT_AUINOTEBOOK_TAB_MIDDLE_UP ::  EventId
wxEVT_AUINOTEBOOK_TAB_MIDDLE_UP 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_AUINOTEBOOK_TAB_MIDDLE_UP 
foreign import ccall "expEVT_AUINOTEBOOK_TAB_MIDDLE_UP" wx_expEVT_AUINOTEBOOK_TAB_MIDDLE_UP :: IO CInt

-- | usage: (@wxEVT_AUINOTEBOOK_TAB_RIGHT_DOWN@).
{-# NOINLINE wxEVT_AUINOTEBOOK_TAB_RIGHT_DOWN #-}
wxEVT_AUINOTEBOOK_TAB_RIGHT_DOWN ::  EventId
wxEVT_AUINOTEBOOK_TAB_RIGHT_DOWN 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_AUINOTEBOOK_TAB_RIGHT_DOWN 
foreign import ccall "expEVT_AUINOTEBOOK_TAB_RIGHT_DOWN" wx_expEVT_AUINOTEBOOK_TAB_RIGHT_DOWN :: IO CInt

-- | usage: (@wxEVT_AUINOTEBOOK_TAB_RIGHT_UP@).
{-# NOINLINE wxEVT_AUINOTEBOOK_TAB_RIGHT_UP #-}
wxEVT_AUINOTEBOOK_TAB_RIGHT_UP ::  EventId
wxEVT_AUINOTEBOOK_TAB_RIGHT_UP 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_AUINOTEBOOK_TAB_RIGHT_UP 
foreign import ccall "expEVT_AUINOTEBOOK_TAB_RIGHT_UP" wx_expEVT_AUINOTEBOOK_TAB_RIGHT_UP :: IO CInt

-- | usage: (@wxEVT_AUITOOLBAR_BEGIN_DRAG@).
{-# NOINLINE wxEVT_AUITOOLBAR_BEGIN_DRAG #-}
wxEVT_AUITOOLBAR_BEGIN_DRAG ::  EventId
wxEVT_AUITOOLBAR_BEGIN_DRAG 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_AUITOOLBAR_BEGIN_DRAG 
foreign import ccall "expEVT_AUITOOLBAR_BEGIN_DRAG" wx_expEVT_AUITOOLBAR_BEGIN_DRAG :: IO CInt

-- | usage: (@wxEVT_AUITOOLBAR_MIDDLE_CLICK@).
{-# NOINLINE wxEVT_AUITOOLBAR_MIDDLE_CLICK #-}
wxEVT_AUITOOLBAR_MIDDLE_CLICK ::  EventId
wxEVT_AUITOOLBAR_MIDDLE_CLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_AUITOOLBAR_MIDDLE_CLICK 
foreign import ccall "expEVT_AUITOOLBAR_MIDDLE_CLICK" wx_expEVT_AUITOOLBAR_MIDDLE_CLICK :: IO CInt

-- | usage: (@wxEVT_AUITOOLBAR_OVERFLOW_CLICK@).
{-# NOINLINE wxEVT_AUITOOLBAR_OVERFLOW_CLICK #-}
wxEVT_AUITOOLBAR_OVERFLOW_CLICK ::  EventId
wxEVT_AUITOOLBAR_OVERFLOW_CLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_AUITOOLBAR_OVERFLOW_CLICK 
foreign import ccall "expEVT_AUITOOLBAR_OVERFLOW_CLICK" wx_expEVT_AUITOOLBAR_OVERFLOW_CLICK :: IO CInt

-- | usage: (@wxEVT_AUITOOLBAR_RIGHT_CLICK@).
{-# NOINLINE wxEVT_AUITOOLBAR_RIGHT_CLICK #-}
wxEVT_AUITOOLBAR_RIGHT_CLICK ::  EventId
wxEVT_AUITOOLBAR_RIGHT_CLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_AUITOOLBAR_RIGHT_CLICK 
foreign import ccall "expEVT_AUITOOLBAR_RIGHT_CLICK" wx_expEVT_AUITOOLBAR_RIGHT_CLICK :: IO CInt

-- | usage: (@wxEVT_AUITOOLBAR_TOOL_DROPDOWN@).
{-# NOINLINE wxEVT_AUITOOLBAR_TOOL_DROPDOWN #-}
wxEVT_AUITOOLBAR_TOOL_DROPDOWN ::  EventId
wxEVT_AUITOOLBAR_TOOL_DROPDOWN 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_AUITOOLBAR_TOOL_DROPDOWN 
foreign import ccall "expEVT_AUITOOLBAR_TOOL_DROPDOWN" wx_expEVT_AUITOOLBAR_TOOL_DROPDOWN :: IO CInt

-- | usage: (@wxEVT_AUI_FIND_MANAGER@).
{-# NOINLINE wxEVT_AUI_FIND_MANAGER #-}
wxEVT_AUI_FIND_MANAGER ::  EventId
wxEVT_AUI_FIND_MANAGER 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_AUI_FIND_MANAGER 
foreign import ccall "expEVT_AUI_FIND_MANAGER" wx_expEVT_AUI_FIND_MANAGER :: IO CInt

-- | usage: (@wxEVT_AUI_PANE_BUTTON@).
{-# NOINLINE wxEVT_AUI_PANE_BUTTON #-}
wxEVT_AUI_PANE_BUTTON ::  EventId
wxEVT_AUI_PANE_BUTTON 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_AUI_PANE_BUTTON 
foreign import ccall "expEVT_AUI_PANE_BUTTON" wx_expEVT_AUI_PANE_BUTTON :: IO CInt

-- | usage: (@wxEVT_AUI_PANE_CLOSE@).
{-# NOINLINE wxEVT_AUI_PANE_CLOSE #-}
wxEVT_AUI_PANE_CLOSE ::  EventId
wxEVT_AUI_PANE_CLOSE 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_AUI_PANE_CLOSE 
foreign import ccall "expEVT_AUI_PANE_CLOSE" wx_expEVT_AUI_PANE_CLOSE :: IO CInt

-- | usage: (@wxEVT_AUI_PANE_MAXIMIZE@).
{-# NOINLINE wxEVT_AUI_PANE_MAXIMIZE #-}
wxEVT_AUI_PANE_MAXIMIZE ::  EventId
wxEVT_AUI_PANE_MAXIMIZE 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_AUI_PANE_MAXIMIZE 
foreign import ccall "expEVT_AUI_PANE_MAXIMIZE" wx_expEVT_AUI_PANE_MAXIMIZE :: IO CInt

-- | usage: (@wxEVT_AUI_PANE_RESTORE@).
{-# NOINLINE wxEVT_AUI_PANE_RESTORE #-}
wxEVT_AUI_PANE_RESTORE ::  EventId
wxEVT_AUI_PANE_RESTORE 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_AUI_PANE_RESTORE 
foreign import ccall "expEVT_AUI_PANE_RESTORE" wx_expEVT_AUI_PANE_RESTORE :: IO CInt

-- | usage: (@wxEVT_AUI_RENDER@).
{-# NOINLINE wxEVT_AUI_RENDER #-}
wxEVT_AUI_RENDER ::  EventId
wxEVT_AUI_RENDER 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_AUI_RENDER 
foreign import ccall "expEVT_AUI_RENDER" wx_expEVT_AUI_RENDER :: IO CInt

-- | usage: (@wxEVT_AUX1_DCLICK@).
{-# NOINLINE wxEVT_AUX1_DCLICK #-}
wxEVT_AUX1_DCLICK ::  EventId
wxEVT_AUX1_DCLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_AUX1_DCLICK 
foreign import ccall "expEVT_AUX1_DCLICK" wx_expEVT_AUX1_DCLICK :: IO CInt

-- | usage: (@wxEVT_AUX1_DOWN@).
{-# NOINLINE wxEVT_AUX1_DOWN #-}
wxEVT_AUX1_DOWN ::  EventId
wxEVT_AUX1_DOWN 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_AUX1_DOWN 
foreign import ccall "expEVT_AUX1_DOWN" wx_expEVT_AUX1_DOWN :: IO CInt

-- | usage: (@wxEVT_AUX1_UP@).
{-# NOINLINE wxEVT_AUX1_UP #-}
wxEVT_AUX1_UP ::  EventId
wxEVT_AUX1_UP 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_AUX1_UP 
foreign import ccall "expEVT_AUX1_UP" wx_expEVT_AUX1_UP :: IO CInt

-- | usage: (@wxEVT_AUX2_DCLICK@).
{-# NOINLINE wxEVT_AUX2_DCLICK #-}
wxEVT_AUX2_DCLICK ::  EventId
wxEVT_AUX2_DCLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_AUX2_DCLICK 
foreign import ccall "expEVT_AUX2_DCLICK" wx_expEVT_AUX2_DCLICK :: IO CInt

-- | usage: (@wxEVT_AUX2_DOWN@).
{-# NOINLINE wxEVT_AUX2_DOWN #-}
wxEVT_AUX2_DOWN ::  EventId
wxEVT_AUX2_DOWN 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_AUX2_DOWN 
foreign import ccall "expEVT_AUX2_DOWN" wx_expEVT_AUX2_DOWN :: IO CInt

-- | usage: (@wxEVT_AUX2_UP@).
{-# NOINLINE wxEVT_AUX2_UP #-}
wxEVT_AUX2_UP ::  EventId
wxEVT_AUX2_UP 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_AUX2_UP 
foreign import ccall "expEVT_AUX2_UP" wx_expEVT_AUX2_UP :: IO CInt

-- | usage: (@wxEVT_CALCULATE_LAYOUT@).
{-# NOINLINE wxEVT_CALCULATE_LAYOUT #-}
wxEVT_CALCULATE_LAYOUT ::  EventId
wxEVT_CALCULATE_LAYOUT 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_CALCULATE_LAYOUT 
foreign import ccall "expEVT_CALCULATE_LAYOUT" wx_expEVT_CALCULATE_LAYOUT :: IO CInt

-- | usage: (@wxEVT_CALENDAR_DAY_CHANGED@).
{-# NOINLINE wxEVT_CALENDAR_DAY_CHANGED #-}
wxEVT_CALENDAR_DAY_CHANGED ::  EventId
wxEVT_CALENDAR_DAY_CHANGED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_CALENDAR_DAY_CHANGED 
foreign import ccall "expEVT_CALENDAR_DAY_CHANGED" wx_expEVT_CALENDAR_DAY_CHANGED :: IO CInt

-- | usage: (@wxEVT_CALENDAR_DOUBLECLICKED@).
{-# NOINLINE wxEVT_CALENDAR_DOUBLECLICKED #-}
wxEVT_CALENDAR_DOUBLECLICKED ::  EventId
wxEVT_CALENDAR_DOUBLECLICKED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_CALENDAR_DOUBLECLICKED 
foreign import ccall "expEVT_CALENDAR_DOUBLECLICKED" wx_expEVT_CALENDAR_DOUBLECLICKED :: IO CInt

-- | usage: (@wxEVT_CALENDAR_MONTH_CHANGED@).
{-# NOINLINE wxEVT_CALENDAR_MONTH_CHANGED #-}
wxEVT_CALENDAR_MONTH_CHANGED ::  EventId
wxEVT_CALENDAR_MONTH_CHANGED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_CALENDAR_MONTH_CHANGED 
foreign import ccall "expEVT_CALENDAR_MONTH_CHANGED" wx_expEVT_CALENDAR_MONTH_CHANGED :: IO CInt

-- | usage: (@wxEVT_CALENDAR_PAGE_CHANGED@).
{-# NOINLINE wxEVT_CALENDAR_PAGE_CHANGED #-}
wxEVT_CALENDAR_PAGE_CHANGED ::  EventId
wxEVT_CALENDAR_PAGE_CHANGED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_CALENDAR_PAGE_CHANGED 
foreign import ccall "expEVT_CALENDAR_PAGE_CHANGED" wx_expEVT_CALENDAR_PAGE_CHANGED :: IO CInt

-- | usage: (@wxEVT_CALENDAR_SEL_CHANGED@).
{-# NOINLINE wxEVT_CALENDAR_SEL_CHANGED #-}
wxEVT_CALENDAR_SEL_CHANGED ::  EventId
wxEVT_CALENDAR_SEL_CHANGED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_CALENDAR_SEL_CHANGED 
foreign import ccall "expEVT_CALENDAR_SEL_CHANGED" wx_expEVT_CALENDAR_SEL_CHANGED :: IO CInt

-- | usage: (@wxEVT_CALENDAR_WEEKDAY_CLICKED@).
{-# NOINLINE wxEVT_CALENDAR_WEEKDAY_CLICKED #-}
wxEVT_CALENDAR_WEEKDAY_CLICKED ::  EventId
wxEVT_CALENDAR_WEEKDAY_CLICKED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_CALENDAR_WEEKDAY_CLICKED 
foreign import ccall "expEVT_CALENDAR_WEEKDAY_CLICKED" wx_expEVT_CALENDAR_WEEKDAY_CLICKED :: IO CInt

-- | usage: (@wxEVT_CALENDAR_WEEK_CLICKED@).
{-# NOINLINE wxEVT_CALENDAR_WEEK_CLICKED #-}
wxEVT_CALENDAR_WEEK_CLICKED ::  EventId
wxEVT_CALENDAR_WEEK_CLICKED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_CALENDAR_WEEK_CLICKED 
foreign import ccall "expEVT_CALENDAR_WEEK_CLICKED" wx_expEVT_CALENDAR_WEEK_CLICKED :: IO CInt

-- | usage: (@wxEVT_CALENDAR_YEAR_CHANGED@).
{-# NOINLINE wxEVT_CALENDAR_YEAR_CHANGED #-}
wxEVT_CALENDAR_YEAR_CHANGED ::  EventId
wxEVT_CALENDAR_YEAR_CHANGED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_CALENDAR_YEAR_CHANGED 
foreign import ccall "expEVT_CALENDAR_YEAR_CHANGED" wx_expEVT_CALENDAR_YEAR_CHANGED :: IO CInt

-- | usage: (@wxEVT_CHAR@).
{-# NOINLINE wxEVT_CHAR #-}
wxEVT_CHAR ::  EventId
wxEVT_CHAR 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_CHAR 
foreign import ccall "expEVT_CHAR" wx_expEVT_CHAR :: IO CInt

-- | usage: (@wxEVT_CHAR_HOOK@).
{-# NOINLINE wxEVT_CHAR_HOOK #-}
wxEVT_CHAR_HOOK ::  EventId
wxEVT_CHAR_HOOK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_CHAR_HOOK 
foreign import ccall "expEVT_CHAR_HOOK" wx_expEVT_CHAR_HOOK :: IO CInt

-- | usage: (@wxEVT_CHILD_FOCUS@).
{-# NOINLINE wxEVT_CHILD_FOCUS #-}
wxEVT_CHILD_FOCUS ::  EventId
wxEVT_CHILD_FOCUS 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_CHILD_FOCUS 
foreign import ccall "expEVT_CHILD_FOCUS" wx_expEVT_CHILD_FOCUS :: IO CInt

-- | usage: (@wxEVT_CLIPBOARD_CHANGED@).
{-# NOINLINE wxEVT_CLIPBOARD_CHANGED #-}
wxEVT_CLIPBOARD_CHANGED ::  EventId
wxEVT_CLIPBOARD_CHANGED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_CLIPBOARD_CHANGED 
foreign import ccall "expEVT_CLIPBOARD_CHANGED" wx_expEVT_CLIPBOARD_CHANGED :: IO CInt

-- | usage: (@wxEVT_CLOSE_WINDOW@).
{-# NOINLINE wxEVT_CLOSE_WINDOW #-}
wxEVT_CLOSE_WINDOW ::  EventId
wxEVT_CLOSE_WINDOW 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_CLOSE_WINDOW 
foreign import ccall "expEVT_CLOSE_WINDOW" wx_expEVT_CLOSE_WINDOW :: IO CInt

-- | usage: (@wxEVT_COMMAND_BUTTON_CLICKED@).
{-# NOINLINE wxEVT_COMMAND_BUTTON_CLICKED #-}
wxEVT_COMMAND_BUTTON_CLICKED ::  EventId
wxEVT_COMMAND_BUTTON_CLICKED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_BUTTON_CLICKED 
foreign import ccall "expEVT_COMMAND_BUTTON_CLICKED" wx_expEVT_COMMAND_BUTTON_CLICKED :: IO CInt

-- | usage: (@wxEVT_COMMAND_CHECKBOX_CLICKED@).
{-# NOINLINE wxEVT_COMMAND_CHECKBOX_CLICKED #-}
wxEVT_COMMAND_CHECKBOX_CLICKED ::  EventId
wxEVT_COMMAND_CHECKBOX_CLICKED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_CHECKBOX_CLICKED 
foreign import ccall "expEVT_COMMAND_CHECKBOX_CLICKED" wx_expEVT_COMMAND_CHECKBOX_CLICKED :: IO CInt

-- | usage: (@wxEVT_COMMAND_CHECKLISTBOX_TOGGLED@).
{-# NOINLINE wxEVT_COMMAND_CHECKLISTBOX_TOGGLED #-}
wxEVT_COMMAND_CHECKLISTBOX_TOGGLED ::  EventId
wxEVT_COMMAND_CHECKLISTBOX_TOGGLED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_CHECKLISTBOX_TOGGLED 
foreign import ccall "expEVT_COMMAND_CHECKLISTBOX_TOGGLED" wx_expEVT_COMMAND_CHECKLISTBOX_TOGGLED :: IO CInt

-- | usage: (@wxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGED@).
{-# NOINLINE wxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGED #-}
wxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGED ::  EventId
wxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_CHOICEBOOK_PAGE_CHANGED 
foreign import ccall "expEVT_COMMAND_CHOICEBOOK_PAGE_CHANGED" wx_expEVT_COMMAND_CHOICEBOOK_PAGE_CHANGED :: IO CInt

-- | usage: (@wxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGING@).
{-# NOINLINE wxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGING #-}
wxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGING ::  EventId
wxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGING 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_CHOICEBOOK_PAGE_CHANGING 
foreign import ccall "expEVT_COMMAND_CHOICEBOOK_PAGE_CHANGING" wx_expEVT_COMMAND_CHOICEBOOK_PAGE_CHANGING :: IO CInt

-- | usage: (@wxEVT_COMMAND_CHOICE_SELECTED@).
{-# NOINLINE wxEVT_COMMAND_CHOICE_SELECTED #-}
wxEVT_COMMAND_CHOICE_SELECTED ::  EventId
wxEVT_COMMAND_CHOICE_SELECTED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_CHOICE_SELECTED 
foreign import ccall "expEVT_COMMAND_CHOICE_SELECTED" wx_expEVT_COMMAND_CHOICE_SELECTED :: IO CInt

-- | usage: (@wxEVT_COMMAND_COLLPANE_CHANGED@).
{-# NOINLINE wxEVT_COMMAND_COLLPANE_CHANGED #-}
wxEVT_COMMAND_COLLPANE_CHANGED ::  EventId
wxEVT_COMMAND_COLLPANE_CHANGED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_COLLPANE_CHANGED 
foreign import ccall "expEVT_COMMAND_COLLPANE_CHANGED" wx_expEVT_COMMAND_COLLPANE_CHANGED :: IO CInt

-- | usage: (@wxEVT_COMMAND_COLOURPICKER_CHANGED@).
{-# NOINLINE wxEVT_COMMAND_COLOURPICKER_CHANGED #-}
wxEVT_COMMAND_COLOURPICKER_CHANGED ::  EventId
wxEVT_COMMAND_COLOURPICKER_CHANGED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_COLOURPICKER_CHANGED 
foreign import ccall "expEVT_COMMAND_COLOURPICKER_CHANGED" wx_expEVT_COMMAND_COLOURPICKER_CHANGED :: IO CInt

-- | usage: (@wxEVT_COMMAND_COMBOBOX_CLOSEUP@).
{-# NOINLINE wxEVT_COMMAND_COMBOBOX_CLOSEUP #-}
wxEVT_COMMAND_COMBOBOX_CLOSEUP ::  EventId
wxEVT_COMMAND_COMBOBOX_CLOSEUP 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_COMBOBOX_CLOSEUP 
foreign import ccall "expEVT_COMMAND_COMBOBOX_CLOSEUP" wx_expEVT_COMMAND_COMBOBOX_CLOSEUP :: IO CInt

-- | usage: (@wxEVT_COMMAND_COMBOBOX_DROPDOWN@).
{-# NOINLINE wxEVT_COMMAND_COMBOBOX_DROPDOWN #-}
wxEVT_COMMAND_COMBOBOX_DROPDOWN ::  EventId
wxEVT_COMMAND_COMBOBOX_DROPDOWN 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_COMBOBOX_DROPDOWN 
foreign import ccall "expEVT_COMMAND_COMBOBOX_DROPDOWN" wx_expEVT_COMMAND_COMBOBOX_DROPDOWN :: IO CInt

-- | usage: (@wxEVT_COMMAND_COMBOBOX_SELECTED@).
{-# NOINLINE wxEVT_COMMAND_COMBOBOX_SELECTED #-}
wxEVT_COMMAND_COMBOBOX_SELECTED ::  EventId
wxEVT_COMMAND_COMBOBOX_SELECTED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_COMBOBOX_SELECTED 
foreign import ccall "expEVT_COMMAND_COMBOBOX_SELECTED" wx_expEVT_COMMAND_COMBOBOX_SELECTED :: IO CInt

-- | usage: (@wxEVT_COMMAND_DATAVIEW_CACHE_HINT@).
{-# NOINLINE wxEVT_COMMAND_DATAVIEW_CACHE_HINT #-}
wxEVT_COMMAND_DATAVIEW_CACHE_HINT ::  EventId
wxEVT_COMMAND_DATAVIEW_CACHE_HINT 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_DATAVIEW_CACHE_HINT 
foreign import ccall "expEVT_COMMAND_DATAVIEW_CACHE_HINT" wx_expEVT_COMMAND_DATAVIEW_CACHE_HINT :: IO CInt

-- | usage: (@wxEVT_COMMAND_DATAVIEW_COLUMN_HEADER_CLICK@).
{-# NOINLINE wxEVT_COMMAND_DATAVIEW_COLUMN_HEADER_CLICK #-}
wxEVT_COMMAND_DATAVIEW_COLUMN_HEADER_CLICK ::  EventId
wxEVT_COMMAND_DATAVIEW_COLUMN_HEADER_CLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_DATAVIEW_COLUMN_HEADER_CLICK 
foreign import ccall "expEVT_COMMAND_DATAVIEW_COLUMN_HEADER_CLICK" wx_expEVT_COMMAND_DATAVIEW_COLUMN_HEADER_CLICK :: IO CInt

-- | usage: (@wxEVT_COMMAND_DATAVIEW_COLUMN_HEADER_RIGHT_CLICK@).
{-# NOINLINE wxEVT_COMMAND_DATAVIEW_COLUMN_HEADER_RIGHT_CLICK #-}
wxEVT_COMMAND_DATAVIEW_COLUMN_HEADER_RIGHT_CLICK ::  EventId
wxEVT_COMMAND_DATAVIEW_COLUMN_HEADER_RIGHT_CLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_DATAVIEW_COLUMN_HEADER_RIGHT_CLICK 
foreign import ccall "expEVT_COMMAND_DATAVIEW_COLUMN_HEADER_RIGHT_CLICK" wx_expEVT_COMMAND_DATAVIEW_COLUMN_HEADER_RIGHT_CLICK :: IO CInt

-- | usage: (@wxEVT_COMMAND_DATAVIEW_COLUMN_REORDERED@).
{-# NOINLINE wxEVT_COMMAND_DATAVIEW_COLUMN_REORDERED #-}
wxEVT_COMMAND_DATAVIEW_COLUMN_REORDERED ::  EventId
wxEVT_COMMAND_DATAVIEW_COLUMN_REORDERED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_DATAVIEW_COLUMN_REORDERED 
foreign import ccall "expEVT_COMMAND_DATAVIEW_COLUMN_REORDERED" wx_expEVT_COMMAND_DATAVIEW_COLUMN_REORDERED :: IO CInt

-- | usage: (@wxEVT_COMMAND_DATAVIEW_COLUMN_SORTED@).
{-# NOINLINE wxEVT_COMMAND_DATAVIEW_COLUMN_SORTED #-}
wxEVT_COMMAND_DATAVIEW_COLUMN_SORTED ::  EventId
wxEVT_COMMAND_DATAVIEW_COLUMN_SORTED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_DATAVIEW_COLUMN_SORTED 
foreign import ccall "expEVT_COMMAND_DATAVIEW_COLUMN_SORTED" wx_expEVT_COMMAND_DATAVIEW_COLUMN_SORTED :: IO CInt

-- | usage: (@wxEVT_COMMAND_DATAVIEW_ITEM_ACTIVATED@).
{-# NOINLINE wxEVT_COMMAND_DATAVIEW_ITEM_ACTIVATED #-}
wxEVT_COMMAND_DATAVIEW_ITEM_ACTIVATED ::  EventId
wxEVT_COMMAND_DATAVIEW_ITEM_ACTIVATED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_DATAVIEW_ITEM_ACTIVATED 
foreign import ccall "expEVT_COMMAND_DATAVIEW_ITEM_ACTIVATED" wx_expEVT_COMMAND_DATAVIEW_ITEM_ACTIVATED :: IO CInt

-- | usage: (@wxEVT_COMMAND_DATAVIEW_ITEM_BEGIN_DRAG@).
{-# NOINLINE wxEVT_COMMAND_DATAVIEW_ITEM_BEGIN_DRAG #-}
wxEVT_COMMAND_DATAVIEW_ITEM_BEGIN_DRAG ::  EventId
wxEVT_COMMAND_DATAVIEW_ITEM_BEGIN_DRAG 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_DATAVIEW_ITEM_BEGIN_DRAG 
foreign import ccall "expEVT_COMMAND_DATAVIEW_ITEM_BEGIN_DRAG" wx_expEVT_COMMAND_DATAVIEW_ITEM_BEGIN_DRAG :: IO CInt

-- | usage: (@wxEVT_COMMAND_DATAVIEW_ITEM_COLLAPSED@).
{-# NOINLINE wxEVT_COMMAND_DATAVIEW_ITEM_COLLAPSED #-}
wxEVT_COMMAND_DATAVIEW_ITEM_COLLAPSED ::  EventId
wxEVT_COMMAND_DATAVIEW_ITEM_COLLAPSED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_DATAVIEW_ITEM_COLLAPSED 
foreign import ccall "expEVT_COMMAND_DATAVIEW_ITEM_COLLAPSED" wx_expEVT_COMMAND_DATAVIEW_ITEM_COLLAPSED :: IO CInt

-- | usage: (@wxEVT_COMMAND_DATAVIEW_ITEM_COLLAPSING@).
{-# NOINLINE wxEVT_COMMAND_DATAVIEW_ITEM_COLLAPSING #-}
wxEVT_COMMAND_DATAVIEW_ITEM_COLLAPSING ::  EventId
wxEVT_COMMAND_DATAVIEW_ITEM_COLLAPSING 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_DATAVIEW_ITEM_COLLAPSING 
foreign import ccall "expEVT_COMMAND_DATAVIEW_ITEM_COLLAPSING" wx_expEVT_COMMAND_DATAVIEW_ITEM_COLLAPSING :: IO CInt

-- | usage: (@wxEVT_COMMAND_DATAVIEW_ITEM_CONTEXT_MENU@).
{-# NOINLINE wxEVT_COMMAND_DATAVIEW_ITEM_CONTEXT_MENU #-}
wxEVT_COMMAND_DATAVIEW_ITEM_CONTEXT_MENU ::  EventId
wxEVT_COMMAND_DATAVIEW_ITEM_CONTEXT_MENU 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_DATAVIEW_ITEM_CONTEXT_MENU 
foreign import ccall "expEVT_COMMAND_DATAVIEW_ITEM_CONTEXT_MENU" wx_expEVT_COMMAND_DATAVIEW_ITEM_CONTEXT_MENU :: IO CInt

-- | usage: (@wxEVT_COMMAND_DATAVIEW_ITEM_DROP@).
{-# NOINLINE wxEVT_COMMAND_DATAVIEW_ITEM_DROP #-}
wxEVT_COMMAND_DATAVIEW_ITEM_DROP ::  EventId
wxEVT_COMMAND_DATAVIEW_ITEM_DROP 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_DATAVIEW_ITEM_DROP 
foreign import ccall "expEVT_COMMAND_DATAVIEW_ITEM_DROP" wx_expEVT_COMMAND_DATAVIEW_ITEM_DROP :: IO CInt

-- | usage: (@wxEVT_COMMAND_DATAVIEW_ITEM_DROP_POSSIBLE@).
{-# NOINLINE wxEVT_COMMAND_DATAVIEW_ITEM_DROP_POSSIBLE #-}
wxEVT_COMMAND_DATAVIEW_ITEM_DROP_POSSIBLE ::  EventId
wxEVT_COMMAND_DATAVIEW_ITEM_DROP_POSSIBLE 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_DATAVIEW_ITEM_DROP_POSSIBLE 
foreign import ccall "expEVT_COMMAND_DATAVIEW_ITEM_DROP_POSSIBLE" wx_expEVT_COMMAND_DATAVIEW_ITEM_DROP_POSSIBLE :: IO CInt

-- | usage: (@wxEVT_COMMAND_DATAVIEW_ITEM_EDITING_DONE@).
{-# NOINLINE wxEVT_COMMAND_DATAVIEW_ITEM_EDITING_DONE #-}
wxEVT_COMMAND_DATAVIEW_ITEM_EDITING_DONE ::  EventId
wxEVT_COMMAND_DATAVIEW_ITEM_EDITING_DONE 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_DATAVIEW_ITEM_EDITING_DONE 
foreign import ccall "expEVT_COMMAND_DATAVIEW_ITEM_EDITING_DONE" wx_expEVT_COMMAND_DATAVIEW_ITEM_EDITING_DONE :: IO CInt

-- | usage: (@wxEVT_COMMAND_DATAVIEW_ITEM_EDITING_STARTED@).
{-# NOINLINE wxEVT_COMMAND_DATAVIEW_ITEM_EDITING_STARTED #-}
wxEVT_COMMAND_DATAVIEW_ITEM_EDITING_STARTED ::  EventId
wxEVT_COMMAND_DATAVIEW_ITEM_EDITING_STARTED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_DATAVIEW_ITEM_EDITING_STARTED 
foreign import ccall "expEVT_COMMAND_DATAVIEW_ITEM_EDITING_STARTED" wx_expEVT_COMMAND_DATAVIEW_ITEM_EDITING_STARTED :: IO CInt

-- | usage: (@wxEVT_COMMAND_DATAVIEW_ITEM_EXPANDED@).
{-# NOINLINE wxEVT_COMMAND_DATAVIEW_ITEM_EXPANDED #-}
wxEVT_COMMAND_DATAVIEW_ITEM_EXPANDED ::  EventId
wxEVT_COMMAND_DATAVIEW_ITEM_EXPANDED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_DATAVIEW_ITEM_EXPANDED 
foreign import ccall "expEVT_COMMAND_DATAVIEW_ITEM_EXPANDED" wx_expEVT_COMMAND_DATAVIEW_ITEM_EXPANDED :: IO CInt

-- | usage: (@wxEVT_COMMAND_DATAVIEW_ITEM_EXPANDING@).
{-# NOINLINE wxEVT_COMMAND_DATAVIEW_ITEM_EXPANDING #-}
wxEVT_COMMAND_DATAVIEW_ITEM_EXPANDING ::  EventId
wxEVT_COMMAND_DATAVIEW_ITEM_EXPANDING 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_DATAVIEW_ITEM_EXPANDING 
foreign import ccall "expEVT_COMMAND_DATAVIEW_ITEM_EXPANDING" wx_expEVT_COMMAND_DATAVIEW_ITEM_EXPANDING :: IO CInt

-- | usage: (@wxEVT_COMMAND_DATAVIEW_ITEM_START_EDITING@).
{-# NOINLINE wxEVT_COMMAND_DATAVIEW_ITEM_START_EDITING #-}
wxEVT_COMMAND_DATAVIEW_ITEM_START_EDITING ::  EventId
wxEVT_COMMAND_DATAVIEW_ITEM_START_EDITING 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_DATAVIEW_ITEM_START_EDITING 
foreign import ccall "expEVT_COMMAND_DATAVIEW_ITEM_START_EDITING" wx_expEVT_COMMAND_DATAVIEW_ITEM_START_EDITING :: IO CInt

-- | usage: (@wxEVT_COMMAND_DATAVIEW_ITEM_VALUE_CHANGED@).
{-# NOINLINE wxEVT_COMMAND_DATAVIEW_ITEM_VALUE_CHANGED #-}
wxEVT_COMMAND_DATAVIEW_ITEM_VALUE_CHANGED ::  EventId
wxEVT_COMMAND_DATAVIEW_ITEM_VALUE_CHANGED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_DATAVIEW_ITEM_VALUE_CHANGED 
foreign import ccall "expEVT_COMMAND_DATAVIEW_ITEM_VALUE_CHANGED" wx_expEVT_COMMAND_DATAVIEW_ITEM_VALUE_CHANGED :: IO CInt

-- | usage: (@wxEVT_COMMAND_DATAVIEW_SELECTION_CHANGED@).
{-# NOINLINE wxEVT_COMMAND_DATAVIEW_SELECTION_CHANGED #-}
wxEVT_COMMAND_DATAVIEW_SELECTION_CHANGED ::  EventId
wxEVT_COMMAND_DATAVIEW_SELECTION_CHANGED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_DATAVIEW_SELECTION_CHANGED 
foreign import ccall "expEVT_COMMAND_DATAVIEW_SELECTION_CHANGED" wx_expEVT_COMMAND_DATAVIEW_SELECTION_CHANGED :: IO CInt

-- | usage: (@wxEVT_COMMAND_DIRPICKER_CHANGED@).
{-# NOINLINE wxEVT_COMMAND_DIRPICKER_CHANGED #-}
wxEVT_COMMAND_DIRPICKER_CHANGED ::  EventId
wxEVT_COMMAND_DIRPICKER_CHANGED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_DIRPICKER_CHANGED 
foreign import ccall "expEVT_COMMAND_DIRPICKER_CHANGED" wx_expEVT_COMMAND_DIRPICKER_CHANGED :: IO CInt

-- | usage: (@wxEVT_COMMAND_ENTER@).
{-# NOINLINE wxEVT_COMMAND_ENTER #-}
wxEVT_COMMAND_ENTER ::  EventId
wxEVT_COMMAND_ENTER 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_ENTER 
foreign import ccall "expEVT_COMMAND_ENTER" wx_expEVT_COMMAND_ENTER :: IO CInt

-- | usage: (@wxEVT_COMMAND_FILEPICKER_CHANGED@).
{-# NOINLINE wxEVT_COMMAND_FILEPICKER_CHANGED #-}
wxEVT_COMMAND_FILEPICKER_CHANGED ::  EventId
wxEVT_COMMAND_FILEPICKER_CHANGED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_FILEPICKER_CHANGED 
foreign import ccall "expEVT_COMMAND_FILEPICKER_CHANGED" wx_expEVT_COMMAND_FILEPICKER_CHANGED :: IO CInt

-- | usage: (@wxEVT_COMMAND_FIND@).
{-# NOINLINE wxEVT_COMMAND_FIND #-}
wxEVT_COMMAND_FIND ::  EventId
wxEVT_COMMAND_FIND 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_FIND 
foreign import ccall "expEVT_COMMAND_FIND" wx_expEVT_COMMAND_FIND :: IO CInt

-- | usage: (@wxEVT_COMMAND_FIND_CLOSE@).
{-# NOINLINE wxEVT_COMMAND_FIND_CLOSE #-}
wxEVT_COMMAND_FIND_CLOSE ::  EventId
wxEVT_COMMAND_FIND_CLOSE 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_FIND_CLOSE 
foreign import ccall "expEVT_COMMAND_FIND_CLOSE" wx_expEVT_COMMAND_FIND_CLOSE :: IO CInt

-- | usage: (@wxEVT_COMMAND_FIND_NEXT@).
{-# NOINLINE wxEVT_COMMAND_FIND_NEXT #-}
wxEVT_COMMAND_FIND_NEXT ::  EventId
wxEVT_COMMAND_FIND_NEXT 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_FIND_NEXT 
foreign import ccall "expEVT_COMMAND_FIND_NEXT" wx_expEVT_COMMAND_FIND_NEXT :: IO CInt

-- | usage: (@wxEVT_COMMAND_FIND_REPLACE@).
{-# NOINLINE wxEVT_COMMAND_FIND_REPLACE #-}
wxEVT_COMMAND_FIND_REPLACE ::  EventId
wxEVT_COMMAND_FIND_REPLACE 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_FIND_REPLACE 
foreign import ccall "expEVT_COMMAND_FIND_REPLACE" wx_expEVT_COMMAND_FIND_REPLACE :: IO CInt

-- | usage: (@wxEVT_COMMAND_FIND_REPLACE_ALL@).
{-# NOINLINE wxEVT_COMMAND_FIND_REPLACE_ALL #-}
wxEVT_COMMAND_FIND_REPLACE_ALL ::  EventId
wxEVT_COMMAND_FIND_REPLACE_ALL 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_FIND_REPLACE_ALL 
foreign import ccall "expEVT_COMMAND_FIND_REPLACE_ALL" wx_expEVT_COMMAND_FIND_REPLACE_ALL :: IO CInt

-- | usage: (@wxEVT_COMMAND_FONTPICKER_CHANGED@).
{-# NOINLINE wxEVT_COMMAND_FONTPICKER_CHANGED #-}
wxEVT_COMMAND_FONTPICKER_CHANGED ::  EventId
wxEVT_COMMAND_FONTPICKER_CHANGED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_FONTPICKER_CHANGED 
foreign import ccall "expEVT_COMMAND_FONTPICKER_CHANGED" wx_expEVT_COMMAND_FONTPICKER_CHANGED :: IO CInt

-- | usage: (@wxEVT_COMMAND_HEADER_BEGIN_REORDER@).
{-# NOINLINE wxEVT_COMMAND_HEADER_BEGIN_REORDER #-}
wxEVT_COMMAND_HEADER_BEGIN_REORDER ::  EventId
wxEVT_COMMAND_HEADER_BEGIN_REORDER 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_HEADER_BEGIN_REORDER 
foreign import ccall "expEVT_COMMAND_HEADER_BEGIN_REORDER" wx_expEVT_COMMAND_HEADER_BEGIN_REORDER :: IO CInt

-- | usage: (@wxEVT_COMMAND_HEADER_BEGIN_RESIZE@).
{-# NOINLINE wxEVT_COMMAND_HEADER_BEGIN_RESIZE #-}
wxEVT_COMMAND_HEADER_BEGIN_RESIZE ::  EventId
wxEVT_COMMAND_HEADER_BEGIN_RESIZE 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_HEADER_BEGIN_RESIZE 
foreign import ccall "expEVT_COMMAND_HEADER_BEGIN_RESIZE" wx_expEVT_COMMAND_HEADER_BEGIN_RESIZE :: IO CInt

-- | usage: (@wxEVT_COMMAND_HEADER_CLICK@).
{-# NOINLINE wxEVT_COMMAND_HEADER_CLICK #-}
wxEVT_COMMAND_HEADER_CLICK ::  EventId
wxEVT_COMMAND_HEADER_CLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_HEADER_CLICK 
foreign import ccall "expEVT_COMMAND_HEADER_CLICK" wx_expEVT_COMMAND_HEADER_CLICK :: IO CInt

-- | usage: (@wxEVT_COMMAND_HEADER_DCLICK@).
{-# NOINLINE wxEVT_COMMAND_HEADER_DCLICK #-}
wxEVT_COMMAND_HEADER_DCLICK ::  EventId
wxEVT_COMMAND_HEADER_DCLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_HEADER_DCLICK 
foreign import ccall "expEVT_COMMAND_HEADER_DCLICK" wx_expEVT_COMMAND_HEADER_DCLICK :: IO CInt

-- | usage: (@wxEVT_COMMAND_HEADER_DRAGGING_CANCELLED@).
{-# NOINLINE wxEVT_COMMAND_HEADER_DRAGGING_CANCELLED #-}
wxEVT_COMMAND_HEADER_DRAGGING_CANCELLED ::  EventId
wxEVT_COMMAND_HEADER_DRAGGING_CANCELLED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_HEADER_DRAGGING_CANCELLED 
foreign import ccall "expEVT_COMMAND_HEADER_DRAGGING_CANCELLED" wx_expEVT_COMMAND_HEADER_DRAGGING_CANCELLED :: IO CInt

-- | usage: (@wxEVT_COMMAND_HEADER_END_REORDER@).
{-# NOINLINE wxEVT_COMMAND_HEADER_END_REORDER #-}
wxEVT_COMMAND_HEADER_END_REORDER ::  EventId
wxEVT_COMMAND_HEADER_END_REORDER 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_HEADER_END_REORDER 
foreign import ccall "expEVT_COMMAND_HEADER_END_REORDER" wx_expEVT_COMMAND_HEADER_END_REORDER :: IO CInt

-- | usage: (@wxEVT_COMMAND_HEADER_END_RESIZE@).
{-# NOINLINE wxEVT_COMMAND_HEADER_END_RESIZE #-}
wxEVT_COMMAND_HEADER_END_RESIZE ::  EventId
wxEVT_COMMAND_HEADER_END_RESIZE 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_HEADER_END_RESIZE 
foreign import ccall "expEVT_COMMAND_HEADER_END_RESIZE" wx_expEVT_COMMAND_HEADER_END_RESIZE :: IO CInt

-- | usage: (@wxEVT_COMMAND_HEADER_MIDDLE_CLICK@).
{-# NOINLINE wxEVT_COMMAND_HEADER_MIDDLE_CLICK #-}
wxEVT_COMMAND_HEADER_MIDDLE_CLICK ::  EventId
wxEVT_COMMAND_HEADER_MIDDLE_CLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_HEADER_MIDDLE_CLICK 
foreign import ccall "expEVT_COMMAND_HEADER_MIDDLE_CLICK" wx_expEVT_COMMAND_HEADER_MIDDLE_CLICK :: IO CInt

-- | usage: (@wxEVT_COMMAND_HEADER_MIDDLE_DCLICK@).
{-# NOINLINE wxEVT_COMMAND_HEADER_MIDDLE_DCLICK #-}
wxEVT_COMMAND_HEADER_MIDDLE_DCLICK ::  EventId
wxEVT_COMMAND_HEADER_MIDDLE_DCLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_HEADER_MIDDLE_DCLICK 
foreign import ccall "expEVT_COMMAND_HEADER_MIDDLE_DCLICK" wx_expEVT_COMMAND_HEADER_MIDDLE_DCLICK :: IO CInt

-- | usage: (@wxEVT_COMMAND_HEADER_RESIZING@).
{-# NOINLINE wxEVT_COMMAND_HEADER_RESIZING #-}
wxEVT_COMMAND_HEADER_RESIZING ::  EventId
wxEVT_COMMAND_HEADER_RESIZING 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_HEADER_RESIZING 
foreign import ccall "expEVT_COMMAND_HEADER_RESIZING" wx_expEVT_COMMAND_HEADER_RESIZING :: IO CInt

-- | usage: (@wxEVT_COMMAND_HEADER_RIGHT_CLICK@).
{-# NOINLINE wxEVT_COMMAND_HEADER_RIGHT_CLICK #-}
wxEVT_COMMAND_HEADER_RIGHT_CLICK ::  EventId
wxEVT_COMMAND_HEADER_RIGHT_CLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_HEADER_RIGHT_CLICK 
foreign import ccall "expEVT_COMMAND_HEADER_RIGHT_CLICK" wx_expEVT_COMMAND_HEADER_RIGHT_CLICK :: IO CInt

-- | usage: (@wxEVT_COMMAND_HEADER_RIGHT_DCLICK@).
{-# NOINLINE wxEVT_COMMAND_HEADER_RIGHT_DCLICK #-}
wxEVT_COMMAND_HEADER_RIGHT_DCLICK ::  EventId
wxEVT_COMMAND_HEADER_RIGHT_DCLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_HEADER_RIGHT_DCLICK 
foreign import ccall "expEVT_COMMAND_HEADER_RIGHT_DCLICK" wx_expEVT_COMMAND_HEADER_RIGHT_DCLICK :: IO CInt

-- | usage: (@wxEVT_COMMAND_HEADER_SEPARATOR_DCLICK@).
{-# NOINLINE wxEVT_COMMAND_HEADER_SEPARATOR_DCLICK #-}
wxEVT_COMMAND_HEADER_SEPARATOR_DCLICK ::  EventId
wxEVT_COMMAND_HEADER_SEPARATOR_DCLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_HEADER_SEPARATOR_DCLICK 
foreign import ccall "expEVT_COMMAND_HEADER_SEPARATOR_DCLICK" wx_expEVT_COMMAND_HEADER_SEPARATOR_DCLICK :: IO CInt

-- | usage: (@wxEVT_COMMAND_HTML_CELL_CLICKED@).
{-# NOINLINE wxEVT_COMMAND_HTML_CELL_CLICKED #-}
wxEVT_COMMAND_HTML_CELL_CLICKED ::  EventId
wxEVT_COMMAND_HTML_CELL_CLICKED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_HTML_CELL_CLICKED 
foreign import ccall "expEVT_COMMAND_HTML_CELL_CLICKED" wx_expEVT_COMMAND_HTML_CELL_CLICKED :: IO CInt

-- | usage: (@wxEVT_COMMAND_HTML_CELL_HOVER@).
{-# NOINLINE wxEVT_COMMAND_HTML_CELL_HOVER #-}
wxEVT_COMMAND_HTML_CELL_HOVER ::  EventId
wxEVT_COMMAND_HTML_CELL_HOVER 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_HTML_CELL_HOVER 
foreign import ccall "expEVT_COMMAND_HTML_CELL_HOVER" wx_expEVT_COMMAND_HTML_CELL_HOVER :: IO CInt

-- | usage: (@wxEVT_COMMAND_HTML_LINK_CLICKED@).
{-# NOINLINE wxEVT_COMMAND_HTML_LINK_CLICKED #-}
wxEVT_COMMAND_HTML_LINK_CLICKED ::  EventId
wxEVT_COMMAND_HTML_LINK_CLICKED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_HTML_LINK_CLICKED 
foreign import ccall "expEVT_COMMAND_HTML_LINK_CLICKED" wx_expEVT_COMMAND_HTML_LINK_CLICKED :: IO CInt

-- | usage: (@wxEVT_COMMAND_HYPERLINK@).
{-# NOINLINE wxEVT_COMMAND_HYPERLINK #-}
wxEVT_COMMAND_HYPERLINK ::  EventId
wxEVT_COMMAND_HYPERLINK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_HYPERLINK 
foreign import ccall "expEVT_COMMAND_HYPERLINK" wx_expEVT_COMMAND_HYPERLINK :: IO CInt

-- | usage: (@wxEVT_COMMAND_KILL_FOCUS@).
{-# NOINLINE wxEVT_COMMAND_KILL_FOCUS #-}
wxEVT_COMMAND_KILL_FOCUS ::  EventId
wxEVT_COMMAND_KILL_FOCUS 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_KILL_FOCUS 
foreign import ccall "expEVT_COMMAND_KILL_FOCUS" wx_expEVT_COMMAND_KILL_FOCUS :: IO CInt

-- | usage: (@wxEVT_COMMAND_LEFT_CLICK@).
{-# NOINLINE wxEVT_COMMAND_LEFT_CLICK #-}
wxEVT_COMMAND_LEFT_CLICK ::  EventId
wxEVT_COMMAND_LEFT_CLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_LEFT_CLICK 
foreign import ccall "expEVT_COMMAND_LEFT_CLICK" wx_expEVT_COMMAND_LEFT_CLICK :: IO CInt

-- | usage: (@wxEVT_COMMAND_LEFT_DCLICK@).
{-# NOINLINE wxEVT_COMMAND_LEFT_DCLICK #-}
wxEVT_COMMAND_LEFT_DCLICK ::  EventId
wxEVT_COMMAND_LEFT_DCLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_LEFT_DCLICK 
foreign import ccall "expEVT_COMMAND_LEFT_DCLICK" wx_expEVT_COMMAND_LEFT_DCLICK :: IO CInt

-- | usage: (@wxEVT_COMMAND_LISTBOOK_PAGE_CHANGED@).
{-# NOINLINE wxEVT_COMMAND_LISTBOOK_PAGE_CHANGED #-}
wxEVT_COMMAND_LISTBOOK_PAGE_CHANGED ::  EventId
wxEVT_COMMAND_LISTBOOK_PAGE_CHANGED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_LISTBOOK_PAGE_CHANGED 
foreign import ccall "expEVT_COMMAND_LISTBOOK_PAGE_CHANGED" wx_expEVT_COMMAND_LISTBOOK_PAGE_CHANGED :: IO CInt

-- | usage: (@wxEVT_COMMAND_LISTBOOK_PAGE_CHANGING@).
{-# NOINLINE wxEVT_COMMAND_LISTBOOK_PAGE_CHANGING #-}
wxEVT_COMMAND_LISTBOOK_PAGE_CHANGING ::  EventId
wxEVT_COMMAND_LISTBOOK_PAGE_CHANGING 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_LISTBOOK_PAGE_CHANGING 
foreign import ccall "expEVT_COMMAND_LISTBOOK_PAGE_CHANGING" wx_expEVT_COMMAND_LISTBOOK_PAGE_CHANGING :: IO CInt

-- | usage: (@wxEVT_COMMAND_LISTBOX_DOUBLECLICKED@).
{-# NOINLINE wxEVT_COMMAND_LISTBOX_DOUBLECLICKED #-}
wxEVT_COMMAND_LISTBOX_DOUBLECLICKED ::  EventId
wxEVT_COMMAND_LISTBOX_DOUBLECLICKED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_LISTBOX_DOUBLECLICKED 
foreign import ccall "expEVT_COMMAND_LISTBOX_DOUBLECLICKED" wx_expEVT_COMMAND_LISTBOX_DOUBLECLICKED :: IO CInt

-- | usage: (@wxEVT_COMMAND_LISTBOX_SELECTED@).
{-# NOINLINE wxEVT_COMMAND_LISTBOX_SELECTED #-}
wxEVT_COMMAND_LISTBOX_SELECTED ::  EventId
wxEVT_COMMAND_LISTBOX_SELECTED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_LISTBOX_SELECTED 
foreign import ccall "expEVT_COMMAND_LISTBOX_SELECTED" wx_expEVT_COMMAND_LISTBOX_SELECTED :: IO CInt

-- | usage: (@wxEVT_COMMAND_LIST_BEGIN_DRAG@).
{-# NOINLINE wxEVT_COMMAND_LIST_BEGIN_DRAG #-}
wxEVT_COMMAND_LIST_BEGIN_DRAG ::  EventId
wxEVT_COMMAND_LIST_BEGIN_DRAG 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_LIST_BEGIN_DRAG 
foreign import ccall "expEVT_COMMAND_LIST_BEGIN_DRAG" wx_expEVT_COMMAND_LIST_BEGIN_DRAG :: IO CInt

-- | usage: (@wxEVT_COMMAND_LIST_BEGIN_LABEL_EDIT@).
{-# NOINLINE wxEVT_COMMAND_LIST_BEGIN_LABEL_EDIT #-}
wxEVT_COMMAND_LIST_BEGIN_LABEL_EDIT ::  EventId
wxEVT_COMMAND_LIST_BEGIN_LABEL_EDIT 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_LIST_BEGIN_LABEL_EDIT 
foreign import ccall "expEVT_COMMAND_LIST_BEGIN_LABEL_EDIT" wx_expEVT_COMMAND_LIST_BEGIN_LABEL_EDIT :: IO CInt

-- | usage: (@wxEVT_COMMAND_LIST_BEGIN_RDRAG@).
{-# NOINLINE wxEVT_COMMAND_LIST_BEGIN_RDRAG #-}
wxEVT_COMMAND_LIST_BEGIN_RDRAG ::  EventId
wxEVT_COMMAND_LIST_BEGIN_RDRAG 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_LIST_BEGIN_RDRAG 
foreign import ccall "expEVT_COMMAND_LIST_BEGIN_RDRAG" wx_expEVT_COMMAND_LIST_BEGIN_RDRAG :: IO CInt

-- | usage: (@wxEVT_COMMAND_LIST_CACHE_HINT@).
{-# NOINLINE wxEVT_COMMAND_LIST_CACHE_HINT #-}
wxEVT_COMMAND_LIST_CACHE_HINT ::  EventId
wxEVT_COMMAND_LIST_CACHE_HINT 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_LIST_CACHE_HINT 
foreign import ccall "expEVT_COMMAND_LIST_CACHE_HINT" wx_expEVT_COMMAND_LIST_CACHE_HINT :: IO CInt

-- | usage: (@wxEVT_COMMAND_LIST_COL_BEGIN_DRAG@).
{-# NOINLINE wxEVT_COMMAND_LIST_COL_BEGIN_DRAG #-}
wxEVT_COMMAND_LIST_COL_BEGIN_DRAG ::  EventId
wxEVT_COMMAND_LIST_COL_BEGIN_DRAG 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_LIST_COL_BEGIN_DRAG 
foreign import ccall "expEVT_COMMAND_LIST_COL_BEGIN_DRAG" wx_expEVT_COMMAND_LIST_COL_BEGIN_DRAG :: IO CInt

-- | usage: (@wxEVT_COMMAND_LIST_COL_CLICK@).
{-# NOINLINE wxEVT_COMMAND_LIST_COL_CLICK #-}
wxEVT_COMMAND_LIST_COL_CLICK ::  EventId
wxEVT_COMMAND_LIST_COL_CLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_LIST_COL_CLICK 
foreign import ccall "expEVT_COMMAND_LIST_COL_CLICK" wx_expEVT_COMMAND_LIST_COL_CLICK :: IO CInt

-- | usage: (@wxEVT_COMMAND_LIST_COL_DRAGGING@).
{-# NOINLINE wxEVT_COMMAND_LIST_COL_DRAGGING #-}
wxEVT_COMMAND_LIST_COL_DRAGGING ::  EventId
wxEVT_COMMAND_LIST_COL_DRAGGING 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_LIST_COL_DRAGGING 
foreign import ccall "expEVT_COMMAND_LIST_COL_DRAGGING" wx_expEVT_COMMAND_LIST_COL_DRAGGING :: IO CInt

-- | usage: (@wxEVT_COMMAND_LIST_COL_END_DRAG@).
{-# NOINLINE wxEVT_COMMAND_LIST_COL_END_DRAG #-}
wxEVT_COMMAND_LIST_COL_END_DRAG ::  EventId
wxEVT_COMMAND_LIST_COL_END_DRAG 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_LIST_COL_END_DRAG 
foreign import ccall "expEVT_COMMAND_LIST_COL_END_DRAG" wx_expEVT_COMMAND_LIST_COL_END_DRAG :: IO CInt

-- | usage: (@wxEVT_COMMAND_LIST_COL_RIGHT_CLICK@).
{-# NOINLINE wxEVT_COMMAND_LIST_COL_RIGHT_CLICK #-}
wxEVT_COMMAND_LIST_COL_RIGHT_CLICK ::  EventId
wxEVT_COMMAND_LIST_COL_RIGHT_CLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_LIST_COL_RIGHT_CLICK 
foreign import ccall "expEVT_COMMAND_LIST_COL_RIGHT_CLICK" wx_expEVT_COMMAND_LIST_COL_RIGHT_CLICK :: IO CInt

-- | usage: (@wxEVT_COMMAND_LIST_DELETE_ALL_ITEMS@).
{-# NOINLINE wxEVT_COMMAND_LIST_DELETE_ALL_ITEMS #-}
wxEVT_COMMAND_LIST_DELETE_ALL_ITEMS ::  EventId
wxEVT_COMMAND_LIST_DELETE_ALL_ITEMS 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_LIST_DELETE_ALL_ITEMS 
foreign import ccall "expEVT_COMMAND_LIST_DELETE_ALL_ITEMS" wx_expEVT_COMMAND_LIST_DELETE_ALL_ITEMS :: IO CInt

-- | usage: (@wxEVT_COMMAND_LIST_DELETE_ITEM@).
{-# NOINLINE wxEVT_COMMAND_LIST_DELETE_ITEM #-}
wxEVT_COMMAND_LIST_DELETE_ITEM ::  EventId
wxEVT_COMMAND_LIST_DELETE_ITEM 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_LIST_DELETE_ITEM 
foreign import ccall "expEVT_COMMAND_LIST_DELETE_ITEM" wx_expEVT_COMMAND_LIST_DELETE_ITEM :: IO CInt

-- | usage: (@wxEVT_COMMAND_LIST_END_LABEL_EDIT@).
{-# NOINLINE wxEVT_COMMAND_LIST_END_LABEL_EDIT #-}
wxEVT_COMMAND_LIST_END_LABEL_EDIT ::  EventId
wxEVT_COMMAND_LIST_END_LABEL_EDIT 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_LIST_END_LABEL_EDIT 
foreign import ccall "expEVT_COMMAND_LIST_END_LABEL_EDIT" wx_expEVT_COMMAND_LIST_END_LABEL_EDIT :: IO CInt

-- | usage: (@wxEVT_COMMAND_LIST_INSERT_ITEM@).
{-# NOINLINE wxEVT_COMMAND_LIST_INSERT_ITEM #-}
wxEVT_COMMAND_LIST_INSERT_ITEM ::  EventId
wxEVT_COMMAND_LIST_INSERT_ITEM 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_LIST_INSERT_ITEM 
foreign import ccall "expEVT_COMMAND_LIST_INSERT_ITEM" wx_expEVT_COMMAND_LIST_INSERT_ITEM :: IO CInt

-- | usage: (@wxEVT_COMMAND_LIST_ITEM_ACTIVATED@).
{-# NOINLINE wxEVT_COMMAND_LIST_ITEM_ACTIVATED #-}
wxEVT_COMMAND_LIST_ITEM_ACTIVATED ::  EventId
wxEVT_COMMAND_LIST_ITEM_ACTIVATED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_LIST_ITEM_ACTIVATED 
foreign import ccall "expEVT_COMMAND_LIST_ITEM_ACTIVATED" wx_expEVT_COMMAND_LIST_ITEM_ACTIVATED :: IO CInt

-- | usage: (@wxEVT_COMMAND_LIST_ITEM_DESELECTED@).
{-# NOINLINE wxEVT_COMMAND_LIST_ITEM_DESELECTED #-}
wxEVT_COMMAND_LIST_ITEM_DESELECTED ::  EventId
wxEVT_COMMAND_LIST_ITEM_DESELECTED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_LIST_ITEM_DESELECTED 
foreign import ccall "expEVT_COMMAND_LIST_ITEM_DESELECTED" wx_expEVT_COMMAND_LIST_ITEM_DESELECTED :: IO CInt

-- | usage: (@wxEVT_COMMAND_LIST_ITEM_FOCUSED@).
{-# NOINLINE wxEVT_COMMAND_LIST_ITEM_FOCUSED #-}
wxEVT_COMMAND_LIST_ITEM_FOCUSED ::  EventId
wxEVT_COMMAND_LIST_ITEM_FOCUSED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_LIST_ITEM_FOCUSED 
foreign import ccall "expEVT_COMMAND_LIST_ITEM_FOCUSED" wx_expEVT_COMMAND_LIST_ITEM_FOCUSED :: IO CInt

-- | usage: (@wxEVT_COMMAND_LIST_ITEM_MIDDLE_CLICK@).
{-# NOINLINE wxEVT_COMMAND_LIST_ITEM_MIDDLE_CLICK #-}
wxEVT_COMMAND_LIST_ITEM_MIDDLE_CLICK ::  EventId
wxEVT_COMMAND_LIST_ITEM_MIDDLE_CLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_LIST_ITEM_MIDDLE_CLICK 
foreign import ccall "expEVT_COMMAND_LIST_ITEM_MIDDLE_CLICK" wx_expEVT_COMMAND_LIST_ITEM_MIDDLE_CLICK :: IO CInt

-- | usage: (@wxEVT_COMMAND_LIST_ITEM_RIGHT_CLICK@).
{-# NOINLINE wxEVT_COMMAND_LIST_ITEM_RIGHT_CLICK #-}
wxEVT_COMMAND_LIST_ITEM_RIGHT_CLICK ::  EventId
wxEVT_COMMAND_LIST_ITEM_RIGHT_CLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_LIST_ITEM_RIGHT_CLICK 
foreign import ccall "expEVT_COMMAND_LIST_ITEM_RIGHT_CLICK" wx_expEVT_COMMAND_LIST_ITEM_RIGHT_CLICK :: IO CInt

-- | usage: (@wxEVT_COMMAND_LIST_ITEM_SELECTED@).
{-# NOINLINE wxEVT_COMMAND_LIST_ITEM_SELECTED #-}
wxEVT_COMMAND_LIST_ITEM_SELECTED ::  EventId
wxEVT_COMMAND_LIST_ITEM_SELECTED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_LIST_ITEM_SELECTED 
foreign import ccall "expEVT_COMMAND_LIST_ITEM_SELECTED" wx_expEVT_COMMAND_LIST_ITEM_SELECTED :: IO CInt

-- | usage: (@wxEVT_COMMAND_LIST_KEY_DOWN@).
{-# NOINLINE wxEVT_COMMAND_LIST_KEY_DOWN #-}
wxEVT_COMMAND_LIST_KEY_DOWN ::  EventId
wxEVT_COMMAND_LIST_KEY_DOWN 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_LIST_KEY_DOWN 
foreign import ccall "expEVT_COMMAND_LIST_KEY_DOWN" wx_expEVT_COMMAND_LIST_KEY_DOWN :: IO CInt

-- | usage: (@wxEVT_COMMAND_MENU_SELECTED@).
{-# NOINLINE wxEVT_COMMAND_MENU_SELECTED #-}
wxEVT_COMMAND_MENU_SELECTED ::  EventId
wxEVT_COMMAND_MENU_SELECTED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_MENU_SELECTED 
foreign import ccall "expEVT_COMMAND_MENU_SELECTED" wx_expEVT_COMMAND_MENU_SELECTED :: IO CInt

-- | usage: (@wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED@).
{-# NOINLINE wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED #-}
wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED ::  EventId
wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_NOTEBOOK_PAGE_CHANGED 
foreign import ccall "expEVT_COMMAND_NOTEBOOK_PAGE_CHANGED" wx_expEVT_COMMAND_NOTEBOOK_PAGE_CHANGED :: IO CInt

-- | usage: (@wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGING@).
{-# NOINLINE wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGING #-}
wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGING ::  EventId
wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGING 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_NOTEBOOK_PAGE_CHANGING 
foreign import ccall "expEVT_COMMAND_NOTEBOOK_PAGE_CHANGING" wx_expEVT_COMMAND_NOTEBOOK_PAGE_CHANGING :: IO CInt

-- | usage: (@wxEVT_COMMAND_RADIOBOX_SELECTED@).
{-# NOINLINE wxEVT_COMMAND_RADIOBOX_SELECTED #-}
wxEVT_COMMAND_RADIOBOX_SELECTED ::  EventId
wxEVT_COMMAND_RADIOBOX_SELECTED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_RADIOBOX_SELECTED 
foreign import ccall "expEVT_COMMAND_RADIOBOX_SELECTED" wx_expEVT_COMMAND_RADIOBOX_SELECTED :: IO CInt

-- | usage: (@wxEVT_COMMAND_RADIOBUTTON_SELECTED@).
{-# NOINLINE wxEVT_COMMAND_RADIOBUTTON_SELECTED #-}
wxEVT_COMMAND_RADIOBUTTON_SELECTED ::  EventId
wxEVT_COMMAND_RADIOBUTTON_SELECTED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_RADIOBUTTON_SELECTED 
foreign import ccall "expEVT_COMMAND_RADIOBUTTON_SELECTED" wx_expEVT_COMMAND_RADIOBUTTON_SELECTED :: IO CInt

-- | usage: (@wxEVT_COMMAND_RIBBONBAR_PAGE_CHANGED@).
{-# NOINLINE wxEVT_COMMAND_RIBBONBAR_PAGE_CHANGED #-}
wxEVT_COMMAND_RIBBONBAR_PAGE_CHANGED ::  EventId
wxEVT_COMMAND_RIBBONBAR_PAGE_CHANGED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_RIBBONBAR_PAGE_CHANGED 
foreign import ccall "expEVT_COMMAND_RIBBONBAR_PAGE_CHANGED" wx_expEVT_COMMAND_RIBBONBAR_PAGE_CHANGED :: IO CInt

-- | usage: (@wxEVT_COMMAND_RIBBONBAR_PAGE_CHANGING@).
{-# NOINLINE wxEVT_COMMAND_RIBBONBAR_PAGE_CHANGING #-}
wxEVT_COMMAND_RIBBONBAR_PAGE_CHANGING ::  EventId
wxEVT_COMMAND_RIBBONBAR_PAGE_CHANGING 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_RIBBONBAR_PAGE_CHANGING 
foreign import ccall "expEVT_COMMAND_RIBBONBAR_PAGE_CHANGING" wx_expEVT_COMMAND_RIBBONBAR_PAGE_CHANGING :: IO CInt

-- | usage: (@wxEVT_COMMAND_RIBBONBAR_TAB_MIDDLE_DOWN@).
{-# NOINLINE wxEVT_COMMAND_RIBBONBAR_TAB_MIDDLE_DOWN #-}
wxEVT_COMMAND_RIBBONBAR_TAB_MIDDLE_DOWN ::  EventId
wxEVT_COMMAND_RIBBONBAR_TAB_MIDDLE_DOWN 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_RIBBONBAR_TAB_MIDDLE_DOWN 
foreign import ccall "expEVT_COMMAND_RIBBONBAR_TAB_MIDDLE_DOWN" wx_expEVT_COMMAND_RIBBONBAR_TAB_MIDDLE_DOWN :: IO CInt

-- | usage: (@wxEVT_COMMAND_RIBBONBAR_TAB_MIDDLE_UP@).
{-# NOINLINE wxEVT_COMMAND_RIBBONBAR_TAB_MIDDLE_UP #-}
wxEVT_COMMAND_RIBBONBAR_TAB_MIDDLE_UP ::  EventId
wxEVT_COMMAND_RIBBONBAR_TAB_MIDDLE_UP 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_RIBBONBAR_TAB_MIDDLE_UP 
foreign import ccall "expEVT_COMMAND_RIBBONBAR_TAB_MIDDLE_UP" wx_expEVT_COMMAND_RIBBONBAR_TAB_MIDDLE_UP :: IO CInt

-- | usage: (@wxEVT_COMMAND_RIBBONBAR_TAB_RIGHT_DOWN@).
{-# NOINLINE wxEVT_COMMAND_RIBBONBAR_TAB_RIGHT_DOWN #-}
wxEVT_COMMAND_RIBBONBAR_TAB_RIGHT_DOWN ::  EventId
wxEVT_COMMAND_RIBBONBAR_TAB_RIGHT_DOWN 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_RIBBONBAR_TAB_RIGHT_DOWN 
foreign import ccall "expEVT_COMMAND_RIBBONBAR_TAB_RIGHT_DOWN" wx_expEVT_COMMAND_RIBBONBAR_TAB_RIGHT_DOWN :: IO CInt

-- | usage: (@wxEVT_COMMAND_RIBBONBAR_TAB_RIGHT_UP@).
{-# NOINLINE wxEVT_COMMAND_RIBBONBAR_TAB_RIGHT_UP #-}
wxEVT_COMMAND_RIBBONBAR_TAB_RIGHT_UP ::  EventId
wxEVT_COMMAND_RIBBONBAR_TAB_RIGHT_UP 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_RIBBONBAR_TAB_RIGHT_UP 
foreign import ccall "expEVT_COMMAND_RIBBONBAR_TAB_RIGHT_UP" wx_expEVT_COMMAND_RIBBONBAR_TAB_RIGHT_UP :: IO CInt

-- | usage: (@wxEVT_COMMAND_RIBBONBUTTON_CLICKED@).
{-# NOINLINE wxEVT_COMMAND_RIBBONBUTTON_CLICKED #-}
wxEVT_COMMAND_RIBBONBUTTON_CLICKED ::  EventId
wxEVT_COMMAND_RIBBONBUTTON_CLICKED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_RIBBONBUTTON_CLICKED 
foreign import ccall "expEVT_COMMAND_RIBBONBUTTON_CLICKED" wx_expEVT_COMMAND_RIBBONBUTTON_CLICKED :: IO CInt

-- | usage: (@wxEVT_COMMAND_RIBBONBUTTON_DROPDOWN_CLICKED@).
{-# NOINLINE wxEVT_COMMAND_RIBBONBUTTON_DROPDOWN_CLICKED #-}
wxEVT_COMMAND_RIBBONBUTTON_DROPDOWN_CLICKED ::  EventId
wxEVT_COMMAND_RIBBONBUTTON_DROPDOWN_CLICKED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_RIBBONBUTTON_DROPDOWN_CLICKED 
foreign import ccall "expEVT_COMMAND_RIBBONBUTTON_DROPDOWN_CLICKED" wx_expEVT_COMMAND_RIBBONBUTTON_DROPDOWN_CLICKED :: IO CInt

-- | usage: (@wxEVT_COMMAND_RIBBONGALLERY_HOVER_CHANGED@).
{-# NOINLINE wxEVT_COMMAND_RIBBONGALLERY_HOVER_CHANGED #-}
wxEVT_COMMAND_RIBBONGALLERY_HOVER_CHANGED ::  EventId
wxEVT_COMMAND_RIBBONGALLERY_HOVER_CHANGED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_RIBBONGALLERY_HOVER_CHANGED 
foreign import ccall "expEVT_COMMAND_RIBBONGALLERY_HOVER_CHANGED" wx_expEVT_COMMAND_RIBBONGALLERY_HOVER_CHANGED :: IO CInt

-- | usage: (@wxEVT_COMMAND_RIBBONGALLERY_SELECTED@).
{-# NOINLINE wxEVT_COMMAND_RIBBONGALLERY_SELECTED #-}
wxEVT_COMMAND_RIBBONGALLERY_SELECTED ::  EventId
wxEVT_COMMAND_RIBBONGALLERY_SELECTED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_RIBBONGALLERY_SELECTED 
foreign import ccall "expEVT_COMMAND_RIBBONGALLERY_SELECTED" wx_expEVT_COMMAND_RIBBONGALLERY_SELECTED :: IO CInt

-- | usage: (@wxEVT_COMMAND_RIBBONTOOL_CLICKED@).
{-# NOINLINE wxEVT_COMMAND_RIBBONTOOL_CLICKED #-}
wxEVT_COMMAND_RIBBONTOOL_CLICKED ::  EventId
wxEVT_COMMAND_RIBBONTOOL_CLICKED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_RIBBONTOOL_CLICKED 
foreign import ccall "expEVT_COMMAND_RIBBONTOOL_CLICKED" wx_expEVT_COMMAND_RIBBONTOOL_CLICKED :: IO CInt

-- | usage: (@wxEVT_COMMAND_RIBBONTOOL_DROPDOWN_CLICKED@).
{-# NOINLINE wxEVT_COMMAND_RIBBONTOOL_DROPDOWN_CLICKED #-}
wxEVT_COMMAND_RIBBONTOOL_DROPDOWN_CLICKED ::  EventId
wxEVT_COMMAND_RIBBONTOOL_DROPDOWN_CLICKED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_RIBBONTOOL_DROPDOWN_CLICKED 
foreign import ccall "expEVT_COMMAND_RIBBONTOOL_DROPDOWN_CLICKED" wx_expEVT_COMMAND_RIBBONTOOL_DROPDOWN_CLICKED :: IO CInt

-- | usage: (@wxEVT_COMMAND_RICHTEXT_BUFFER_RESET@).
{-# NOINLINE wxEVT_COMMAND_RICHTEXT_BUFFER_RESET #-}
wxEVT_COMMAND_RICHTEXT_BUFFER_RESET ::  EventId
wxEVT_COMMAND_RICHTEXT_BUFFER_RESET 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_RICHTEXT_BUFFER_RESET 
foreign import ccall "expEVT_COMMAND_RICHTEXT_BUFFER_RESET" wx_expEVT_COMMAND_RICHTEXT_BUFFER_RESET :: IO CInt

-- | usage: (@wxEVT_COMMAND_RICHTEXT_CHARACTER@).
{-# NOINLINE wxEVT_COMMAND_RICHTEXT_CHARACTER #-}
wxEVT_COMMAND_RICHTEXT_CHARACTER ::  EventId
wxEVT_COMMAND_RICHTEXT_CHARACTER 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_RICHTEXT_CHARACTER 
foreign import ccall "expEVT_COMMAND_RICHTEXT_CHARACTER" wx_expEVT_COMMAND_RICHTEXT_CHARACTER :: IO CInt

-- | usage: (@wxEVT_COMMAND_RICHTEXT_CONTENT_DELETED@).
{-# NOINLINE wxEVT_COMMAND_RICHTEXT_CONTENT_DELETED #-}
wxEVT_COMMAND_RICHTEXT_CONTENT_DELETED ::  EventId
wxEVT_COMMAND_RICHTEXT_CONTENT_DELETED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_RICHTEXT_CONTENT_DELETED 
foreign import ccall "expEVT_COMMAND_RICHTEXT_CONTENT_DELETED" wx_expEVT_COMMAND_RICHTEXT_CONTENT_DELETED :: IO CInt

-- | usage: (@wxEVT_COMMAND_RICHTEXT_CONTENT_INSERTED@).
{-# NOINLINE wxEVT_COMMAND_RICHTEXT_CONTENT_INSERTED #-}
wxEVT_COMMAND_RICHTEXT_CONTENT_INSERTED ::  EventId
wxEVT_COMMAND_RICHTEXT_CONTENT_INSERTED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_RICHTEXT_CONTENT_INSERTED 
foreign import ccall "expEVT_COMMAND_RICHTEXT_CONTENT_INSERTED" wx_expEVT_COMMAND_RICHTEXT_CONTENT_INSERTED :: IO CInt

-- | usage: (@wxEVT_COMMAND_RICHTEXT_DELETE@).
{-# NOINLINE wxEVT_COMMAND_RICHTEXT_DELETE #-}
wxEVT_COMMAND_RICHTEXT_DELETE ::  EventId
wxEVT_COMMAND_RICHTEXT_DELETE 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_RICHTEXT_DELETE 
foreign import ccall "expEVT_COMMAND_RICHTEXT_DELETE" wx_expEVT_COMMAND_RICHTEXT_DELETE :: IO CInt

-- | usage: (@wxEVT_COMMAND_RICHTEXT_LEFT_CLICK@).
{-# NOINLINE wxEVT_COMMAND_RICHTEXT_LEFT_CLICK #-}
wxEVT_COMMAND_RICHTEXT_LEFT_CLICK ::  EventId
wxEVT_COMMAND_RICHTEXT_LEFT_CLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_RICHTEXT_LEFT_CLICK 
foreign import ccall "expEVT_COMMAND_RICHTEXT_LEFT_CLICK" wx_expEVT_COMMAND_RICHTEXT_LEFT_CLICK :: IO CInt

-- | usage: (@wxEVT_COMMAND_RICHTEXT_LEFT_DCLICK@).
{-# NOINLINE wxEVT_COMMAND_RICHTEXT_LEFT_DCLICK #-}
wxEVT_COMMAND_RICHTEXT_LEFT_DCLICK ::  EventId
wxEVT_COMMAND_RICHTEXT_LEFT_DCLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_RICHTEXT_LEFT_DCLICK 
foreign import ccall "expEVT_COMMAND_RICHTEXT_LEFT_DCLICK" wx_expEVT_COMMAND_RICHTEXT_LEFT_DCLICK :: IO CInt

-- | usage: (@wxEVT_COMMAND_RICHTEXT_MIDDLE_CLICK@).
{-# NOINLINE wxEVT_COMMAND_RICHTEXT_MIDDLE_CLICK #-}
wxEVT_COMMAND_RICHTEXT_MIDDLE_CLICK ::  EventId
wxEVT_COMMAND_RICHTEXT_MIDDLE_CLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_RICHTEXT_MIDDLE_CLICK 
foreign import ccall "expEVT_COMMAND_RICHTEXT_MIDDLE_CLICK" wx_expEVT_COMMAND_RICHTEXT_MIDDLE_CLICK :: IO CInt

-- | usage: (@wxEVT_COMMAND_RICHTEXT_RETURN@).
{-# NOINLINE wxEVT_COMMAND_RICHTEXT_RETURN #-}
wxEVT_COMMAND_RICHTEXT_RETURN ::  EventId
wxEVT_COMMAND_RICHTEXT_RETURN 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_RICHTEXT_RETURN 
foreign import ccall "expEVT_COMMAND_RICHTEXT_RETURN" wx_expEVT_COMMAND_RICHTEXT_RETURN :: IO CInt

-- | usage: (@wxEVT_COMMAND_RICHTEXT_RIGHT_CLICK@).
{-# NOINLINE wxEVT_COMMAND_RICHTEXT_RIGHT_CLICK #-}
wxEVT_COMMAND_RICHTEXT_RIGHT_CLICK ::  EventId
wxEVT_COMMAND_RICHTEXT_RIGHT_CLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_RICHTEXT_RIGHT_CLICK 
foreign import ccall "expEVT_COMMAND_RICHTEXT_RIGHT_CLICK" wx_expEVT_COMMAND_RICHTEXT_RIGHT_CLICK :: IO CInt

-- | usage: (@wxEVT_COMMAND_RICHTEXT_SELECTION_CHANGED@).
{-# NOINLINE wxEVT_COMMAND_RICHTEXT_SELECTION_CHANGED #-}
wxEVT_COMMAND_RICHTEXT_SELECTION_CHANGED ::  EventId
wxEVT_COMMAND_RICHTEXT_SELECTION_CHANGED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_RICHTEXT_SELECTION_CHANGED 
foreign import ccall "expEVT_COMMAND_RICHTEXT_SELECTION_CHANGED" wx_expEVT_COMMAND_RICHTEXT_SELECTION_CHANGED :: IO CInt

-- | usage: (@wxEVT_COMMAND_RICHTEXT_STYLESHEET_CHANGED@).
{-# NOINLINE wxEVT_COMMAND_RICHTEXT_STYLESHEET_CHANGED #-}
wxEVT_COMMAND_RICHTEXT_STYLESHEET_CHANGED ::  EventId
wxEVT_COMMAND_RICHTEXT_STYLESHEET_CHANGED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_RICHTEXT_STYLESHEET_CHANGED 
foreign import ccall "expEVT_COMMAND_RICHTEXT_STYLESHEET_CHANGED" wx_expEVT_COMMAND_RICHTEXT_STYLESHEET_CHANGED :: IO CInt

-- | usage: (@wxEVT_COMMAND_RICHTEXT_STYLESHEET_CHANGING@).
{-# NOINLINE wxEVT_COMMAND_RICHTEXT_STYLESHEET_CHANGING #-}
wxEVT_COMMAND_RICHTEXT_STYLESHEET_CHANGING ::  EventId
wxEVT_COMMAND_RICHTEXT_STYLESHEET_CHANGING 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_RICHTEXT_STYLESHEET_CHANGING 
foreign import ccall "expEVT_COMMAND_RICHTEXT_STYLESHEET_CHANGING" wx_expEVT_COMMAND_RICHTEXT_STYLESHEET_CHANGING :: IO CInt

-- | usage: (@wxEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACED@).
{-# NOINLINE wxEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACED #-}
wxEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACED ::  EventId
wxEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACED 
foreign import ccall "expEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACED" wx_expEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACED :: IO CInt

-- | usage: (@wxEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACING@).
{-# NOINLINE wxEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACING #-}
wxEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACING ::  EventId
wxEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACING 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACING 
foreign import ccall "expEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACING" wx_expEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACING :: IO CInt

-- | usage: (@wxEVT_COMMAND_RICHTEXT_STYLE_CHANGED@).
{-# NOINLINE wxEVT_COMMAND_RICHTEXT_STYLE_CHANGED #-}
wxEVT_COMMAND_RICHTEXT_STYLE_CHANGED ::  EventId
wxEVT_COMMAND_RICHTEXT_STYLE_CHANGED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_RICHTEXT_STYLE_CHANGED 
foreign import ccall "expEVT_COMMAND_RICHTEXT_STYLE_CHANGED" wx_expEVT_COMMAND_RICHTEXT_STYLE_CHANGED :: IO CInt

-- | usage: (@wxEVT_COMMAND_RIGHT_CLICK@).
{-# NOINLINE wxEVT_COMMAND_RIGHT_CLICK #-}
wxEVT_COMMAND_RIGHT_CLICK ::  EventId
wxEVT_COMMAND_RIGHT_CLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_RIGHT_CLICK 
foreign import ccall "expEVT_COMMAND_RIGHT_CLICK" wx_expEVT_COMMAND_RIGHT_CLICK :: IO CInt

-- | usage: (@wxEVT_COMMAND_RIGHT_DCLICK@).
{-# NOINLINE wxEVT_COMMAND_RIGHT_DCLICK #-}
wxEVT_COMMAND_RIGHT_DCLICK ::  EventId
wxEVT_COMMAND_RIGHT_DCLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_RIGHT_DCLICK 
foreign import ccall "expEVT_COMMAND_RIGHT_DCLICK" wx_expEVT_COMMAND_RIGHT_DCLICK :: IO CInt

-- | usage: (@wxEVT_COMMAND_SEARCHCTRL_CANCEL_BTN@).
{-# NOINLINE wxEVT_COMMAND_SEARCHCTRL_CANCEL_BTN #-}
wxEVT_COMMAND_SEARCHCTRL_CANCEL_BTN ::  EventId
wxEVT_COMMAND_SEARCHCTRL_CANCEL_BTN 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_SEARCHCTRL_CANCEL_BTN 
foreign import ccall "expEVT_COMMAND_SEARCHCTRL_CANCEL_BTN" wx_expEVT_COMMAND_SEARCHCTRL_CANCEL_BTN :: IO CInt

-- | usage: (@wxEVT_COMMAND_SEARCHCTRL_SEARCH_BTN@).
{-# NOINLINE wxEVT_COMMAND_SEARCHCTRL_SEARCH_BTN #-}
wxEVT_COMMAND_SEARCHCTRL_SEARCH_BTN ::  EventId
wxEVT_COMMAND_SEARCHCTRL_SEARCH_BTN 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_SEARCHCTRL_SEARCH_BTN 
foreign import ccall "expEVT_COMMAND_SEARCHCTRL_SEARCH_BTN" wx_expEVT_COMMAND_SEARCHCTRL_SEARCH_BTN :: IO CInt

-- | usage: (@wxEVT_COMMAND_SET_FOCUS@).
{-# NOINLINE wxEVT_COMMAND_SET_FOCUS #-}
wxEVT_COMMAND_SET_FOCUS ::  EventId
wxEVT_COMMAND_SET_FOCUS 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_SET_FOCUS 
foreign import ccall "expEVT_COMMAND_SET_FOCUS" wx_expEVT_COMMAND_SET_FOCUS :: IO CInt

-- | usage: (@wxEVT_COMMAND_SLIDER_UPDATED@).
{-# NOINLINE wxEVT_COMMAND_SLIDER_UPDATED #-}
wxEVT_COMMAND_SLIDER_UPDATED ::  EventId
wxEVT_COMMAND_SLIDER_UPDATED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_SLIDER_UPDATED 
foreign import ccall "expEVT_COMMAND_SLIDER_UPDATED" wx_expEVT_COMMAND_SLIDER_UPDATED :: IO CInt

-- | usage: (@wxEVT_COMMAND_SPINCTRLDOUBLE_UPDATED@).
{-# NOINLINE wxEVT_COMMAND_SPINCTRLDOUBLE_UPDATED #-}
wxEVT_COMMAND_SPINCTRLDOUBLE_UPDATED ::  EventId
wxEVT_COMMAND_SPINCTRLDOUBLE_UPDATED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_SPINCTRLDOUBLE_UPDATED 
foreign import ccall "expEVT_COMMAND_SPINCTRLDOUBLE_UPDATED" wx_expEVT_COMMAND_SPINCTRLDOUBLE_UPDATED :: IO CInt

-- | usage: (@wxEVT_COMMAND_SPINCTRL_UPDATED@).
{-# NOINLINE wxEVT_COMMAND_SPINCTRL_UPDATED #-}
wxEVT_COMMAND_SPINCTRL_UPDATED ::  EventId
wxEVT_COMMAND_SPINCTRL_UPDATED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_SPINCTRL_UPDATED 
foreign import ccall "expEVT_COMMAND_SPINCTRL_UPDATED" wx_expEVT_COMMAND_SPINCTRL_UPDATED :: IO CInt

-- | usage: (@wxEVT_COMMAND_SPLITTER_DOUBLECLICKED@).
{-# NOINLINE wxEVT_COMMAND_SPLITTER_DOUBLECLICKED #-}
wxEVT_COMMAND_SPLITTER_DOUBLECLICKED ::  EventId
wxEVT_COMMAND_SPLITTER_DOUBLECLICKED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_SPLITTER_DOUBLECLICKED 
foreign import ccall "expEVT_COMMAND_SPLITTER_DOUBLECLICKED" wx_expEVT_COMMAND_SPLITTER_DOUBLECLICKED :: IO CInt

-- | usage: (@wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGED@).
{-# NOINLINE wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGED #-}
wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGED ::  EventId
wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_SPLITTER_SASH_POS_CHANGED 
foreign import ccall "expEVT_COMMAND_SPLITTER_SASH_POS_CHANGED" wx_expEVT_COMMAND_SPLITTER_SASH_POS_CHANGED :: IO CInt

-- | usage: (@wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGING@).
{-# NOINLINE wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGING #-}
wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGING ::  EventId
wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGING 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_SPLITTER_SASH_POS_CHANGING 
foreign import ccall "expEVT_COMMAND_SPLITTER_SASH_POS_CHANGING" wx_expEVT_COMMAND_SPLITTER_SASH_POS_CHANGING :: IO CInt

-- | usage: (@wxEVT_COMMAND_SPLITTER_UNSPLIT@).
{-# NOINLINE wxEVT_COMMAND_SPLITTER_UNSPLIT #-}
wxEVT_COMMAND_SPLITTER_UNSPLIT ::  EventId
wxEVT_COMMAND_SPLITTER_UNSPLIT 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_SPLITTER_UNSPLIT 
foreign import ccall "expEVT_COMMAND_SPLITTER_UNSPLIT" wx_expEVT_COMMAND_SPLITTER_UNSPLIT :: IO CInt

-- | usage: (@wxEVT_COMMAND_TEXT_COPY@).
{-# NOINLINE wxEVT_COMMAND_TEXT_COPY #-}
wxEVT_COMMAND_TEXT_COPY ::  EventId
wxEVT_COMMAND_TEXT_COPY 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_TEXT_COPY 
foreign import ccall "expEVT_COMMAND_TEXT_COPY" wx_expEVT_COMMAND_TEXT_COPY :: IO CInt

-- | usage: (@wxEVT_COMMAND_TEXT_CUT@).
{-# NOINLINE wxEVT_COMMAND_TEXT_CUT #-}
wxEVT_COMMAND_TEXT_CUT ::  EventId
wxEVT_COMMAND_TEXT_CUT 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_TEXT_CUT 
foreign import ccall "expEVT_COMMAND_TEXT_CUT" wx_expEVT_COMMAND_TEXT_CUT :: IO CInt

-- | usage: (@wxEVT_COMMAND_TEXT_ENTER@).
{-# NOINLINE wxEVT_COMMAND_TEXT_ENTER #-}
wxEVT_COMMAND_TEXT_ENTER ::  EventId
wxEVT_COMMAND_TEXT_ENTER 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_TEXT_ENTER 
foreign import ccall "expEVT_COMMAND_TEXT_ENTER" wx_expEVT_COMMAND_TEXT_ENTER :: IO CInt

-- | usage: (@wxEVT_COMMAND_TEXT_MAXLEN@).
{-# NOINLINE wxEVT_COMMAND_TEXT_MAXLEN #-}
wxEVT_COMMAND_TEXT_MAXLEN ::  EventId
wxEVT_COMMAND_TEXT_MAXLEN 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_TEXT_MAXLEN 
foreign import ccall "expEVT_COMMAND_TEXT_MAXLEN" wx_expEVT_COMMAND_TEXT_MAXLEN :: IO CInt

-- | usage: (@wxEVT_COMMAND_TEXT_PASTE@).
{-# NOINLINE wxEVT_COMMAND_TEXT_PASTE #-}
wxEVT_COMMAND_TEXT_PASTE ::  EventId
wxEVT_COMMAND_TEXT_PASTE 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_TEXT_PASTE 
foreign import ccall "expEVT_COMMAND_TEXT_PASTE" wx_expEVT_COMMAND_TEXT_PASTE :: IO CInt

-- | usage: (@wxEVT_COMMAND_TEXT_UPDATED@).
{-# NOINLINE wxEVT_COMMAND_TEXT_UPDATED #-}
wxEVT_COMMAND_TEXT_UPDATED ::  EventId
wxEVT_COMMAND_TEXT_UPDATED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_TEXT_UPDATED 
foreign import ccall "expEVT_COMMAND_TEXT_UPDATED" wx_expEVT_COMMAND_TEXT_UPDATED :: IO CInt

-- | usage: (@wxEVT_COMMAND_TEXT_URL@).
{-# NOINLINE wxEVT_COMMAND_TEXT_URL #-}
wxEVT_COMMAND_TEXT_URL ::  EventId
wxEVT_COMMAND_TEXT_URL 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_TEXT_URL 
foreign import ccall "expEVT_COMMAND_TEXT_URL" wx_expEVT_COMMAND_TEXT_URL :: IO CInt

-- | usage: (@wxEVT_COMMAND_THREAD@).
{-# NOINLINE wxEVT_COMMAND_THREAD #-}
wxEVT_COMMAND_THREAD ::  EventId
wxEVT_COMMAND_THREAD 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_THREAD 
foreign import ccall "expEVT_COMMAND_THREAD" wx_expEVT_COMMAND_THREAD :: IO CInt

-- | usage: (@wxEVT_COMMAND_TOGGLEBUTTON_CLICKED@).
{-# NOINLINE wxEVT_COMMAND_TOGGLEBUTTON_CLICKED #-}
wxEVT_COMMAND_TOGGLEBUTTON_CLICKED ::  EventId
wxEVT_COMMAND_TOGGLEBUTTON_CLICKED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_TOGGLEBUTTON_CLICKED 
foreign import ccall "expEVT_COMMAND_TOGGLEBUTTON_CLICKED" wx_expEVT_COMMAND_TOGGLEBUTTON_CLICKED :: IO CInt

-- | usage: (@wxEVT_COMMAND_TOOLBOOK_PAGE_CHANGED@).
{-# NOINLINE wxEVT_COMMAND_TOOLBOOK_PAGE_CHANGED #-}
wxEVT_COMMAND_TOOLBOOK_PAGE_CHANGED ::  EventId
wxEVT_COMMAND_TOOLBOOK_PAGE_CHANGED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_TOOLBOOK_PAGE_CHANGED 
foreign import ccall "expEVT_COMMAND_TOOLBOOK_PAGE_CHANGED" wx_expEVT_COMMAND_TOOLBOOK_PAGE_CHANGED :: IO CInt

-- | usage: (@wxEVT_COMMAND_TOOLBOOK_PAGE_CHANGING@).
{-# NOINLINE wxEVT_COMMAND_TOOLBOOK_PAGE_CHANGING #-}
wxEVT_COMMAND_TOOLBOOK_PAGE_CHANGING ::  EventId
wxEVT_COMMAND_TOOLBOOK_PAGE_CHANGING 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_TOOLBOOK_PAGE_CHANGING 
foreign import ccall "expEVT_COMMAND_TOOLBOOK_PAGE_CHANGING" wx_expEVT_COMMAND_TOOLBOOK_PAGE_CHANGING :: IO CInt

-- | usage: (@wxEVT_COMMAND_TOOL_CLICKED@).
{-# NOINLINE wxEVT_COMMAND_TOOL_CLICKED #-}
wxEVT_COMMAND_TOOL_CLICKED ::  EventId
wxEVT_COMMAND_TOOL_CLICKED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_TOOL_CLICKED 
foreign import ccall "expEVT_COMMAND_TOOL_CLICKED" wx_expEVT_COMMAND_TOOL_CLICKED :: IO CInt

-- | usage: (@wxEVT_COMMAND_TOOL_DROPDOWN_CLICKED@).
{-# NOINLINE wxEVT_COMMAND_TOOL_DROPDOWN_CLICKED #-}
wxEVT_COMMAND_TOOL_DROPDOWN_CLICKED ::  EventId
wxEVT_COMMAND_TOOL_DROPDOWN_CLICKED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_TOOL_DROPDOWN_CLICKED 
foreign import ccall "expEVT_COMMAND_TOOL_DROPDOWN_CLICKED" wx_expEVT_COMMAND_TOOL_DROPDOWN_CLICKED :: IO CInt

-- | usage: (@wxEVT_COMMAND_TOOL_ENTER@).
{-# NOINLINE wxEVT_COMMAND_TOOL_ENTER #-}
wxEVT_COMMAND_TOOL_ENTER ::  EventId
wxEVT_COMMAND_TOOL_ENTER 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_TOOL_ENTER 
foreign import ccall "expEVT_COMMAND_TOOL_ENTER" wx_expEVT_COMMAND_TOOL_ENTER :: IO CInt

-- | usage: (@wxEVT_COMMAND_TOOL_RCLICKED@).
{-# NOINLINE wxEVT_COMMAND_TOOL_RCLICKED #-}
wxEVT_COMMAND_TOOL_RCLICKED ::  EventId
wxEVT_COMMAND_TOOL_RCLICKED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_TOOL_RCLICKED 
foreign import ccall "expEVT_COMMAND_TOOL_RCLICKED" wx_expEVT_COMMAND_TOOL_RCLICKED :: IO CInt

-- | usage: (@wxEVT_COMMAND_TREEBOOK_NODE_COLLAPSED@).
{-# NOINLINE wxEVT_COMMAND_TREEBOOK_NODE_COLLAPSED #-}
wxEVT_COMMAND_TREEBOOK_NODE_COLLAPSED ::  EventId
wxEVT_COMMAND_TREEBOOK_NODE_COLLAPSED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_TREEBOOK_NODE_COLLAPSED 
foreign import ccall "expEVT_COMMAND_TREEBOOK_NODE_COLLAPSED" wx_expEVT_COMMAND_TREEBOOK_NODE_COLLAPSED :: IO CInt

-- | usage: (@wxEVT_COMMAND_TREEBOOK_NODE_EXPANDED@).
{-# NOINLINE wxEVT_COMMAND_TREEBOOK_NODE_EXPANDED #-}
wxEVT_COMMAND_TREEBOOK_NODE_EXPANDED ::  EventId
wxEVT_COMMAND_TREEBOOK_NODE_EXPANDED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_TREEBOOK_NODE_EXPANDED 
foreign import ccall "expEVT_COMMAND_TREEBOOK_NODE_EXPANDED" wx_expEVT_COMMAND_TREEBOOK_NODE_EXPANDED :: IO CInt

-- | usage: (@wxEVT_COMMAND_TREEBOOK_PAGE_CHANGED@).
{-# NOINLINE wxEVT_COMMAND_TREEBOOK_PAGE_CHANGED #-}
wxEVT_COMMAND_TREEBOOK_PAGE_CHANGED ::  EventId
wxEVT_COMMAND_TREEBOOK_PAGE_CHANGED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_TREEBOOK_PAGE_CHANGED 
foreign import ccall "expEVT_COMMAND_TREEBOOK_PAGE_CHANGED" wx_expEVT_COMMAND_TREEBOOK_PAGE_CHANGED :: IO CInt

-- | usage: (@wxEVT_COMMAND_TREEBOOK_PAGE_CHANGING@).
{-# NOINLINE wxEVT_COMMAND_TREEBOOK_PAGE_CHANGING #-}
wxEVT_COMMAND_TREEBOOK_PAGE_CHANGING ::  EventId
wxEVT_COMMAND_TREEBOOK_PAGE_CHANGING 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_TREEBOOK_PAGE_CHANGING 
foreign import ccall "expEVT_COMMAND_TREEBOOK_PAGE_CHANGING" wx_expEVT_COMMAND_TREEBOOK_PAGE_CHANGING :: IO CInt

-- | usage: (@wxEVT_COMMAND_TREE_BEGIN_DRAG@).
{-# NOINLINE wxEVT_COMMAND_TREE_BEGIN_DRAG #-}
wxEVT_COMMAND_TREE_BEGIN_DRAG ::  EventId
wxEVT_COMMAND_TREE_BEGIN_DRAG 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_TREE_BEGIN_DRAG 
foreign import ccall "expEVT_COMMAND_TREE_BEGIN_DRAG" wx_expEVT_COMMAND_TREE_BEGIN_DRAG :: IO CInt

-- | usage: (@wxEVT_COMMAND_TREE_BEGIN_LABEL_EDIT@).
{-# NOINLINE wxEVT_COMMAND_TREE_BEGIN_LABEL_EDIT #-}
wxEVT_COMMAND_TREE_BEGIN_LABEL_EDIT ::  EventId
wxEVT_COMMAND_TREE_BEGIN_LABEL_EDIT 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_TREE_BEGIN_LABEL_EDIT 
foreign import ccall "expEVT_COMMAND_TREE_BEGIN_LABEL_EDIT" wx_expEVT_COMMAND_TREE_BEGIN_LABEL_EDIT :: IO CInt

-- | usage: (@wxEVT_COMMAND_TREE_BEGIN_RDRAG@).
{-# NOINLINE wxEVT_COMMAND_TREE_BEGIN_RDRAG #-}
wxEVT_COMMAND_TREE_BEGIN_RDRAG ::  EventId
wxEVT_COMMAND_TREE_BEGIN_RDRAG 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_TREE_BEGIN_RDRAG 
foreign import ccall "expEVT_COMMAND_TREE_BEGIN_RDRAG" wx_expEVT_COMMAND_TREE_BEGIN_RDRAG :: IO CInt

-- | usage: (@wxEVT_COMMAND_TREE_DELETE_ITEM@).
{-# NOINLINE wxEVT_COMMAND_TREE_DELETE_ITEM #-}
wxEVT_COMMAND_TREE_DELETE_ITEM ::  EventId
wxEVT_COMMAND_TREE_DELETE_ITEM 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_TREE_DELETE_ITEM 
foreign import ccall "expEVT_COMMAND_TREE_DELETE_ITEM" wx_expEVT_COMMAND_TREE_DELETE_ITEM :: IO CInt

-- | usage: (@wxEVT_COMMAND_TREE_END_DRAG@).
{-# NOINLINE wxEVT_COMMAND_TREE_END_DRAG #-}
wxEVT_COMMAND_TREE_END_DRAG ::  EventId
wxEVT_COMMAND_TREE_END_DRAG 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_TREE_END_DRAG 
foreign import ccall "expEVT_COMMAND_TREE_END_DRAG" wx_expEVT_COMMAND_TREE_END_DRAG :: IO CInt

-- | usage: (@wxEVT_COMMAND_TREE_END_LABEL_EDIT@).
{-# NOINLINE wxEVT_COMMAND_TREE_END_LABEL_EDIT #-}
wxEVT_COMMAND_TREE_END_LABEL_EDIT ::  EventId
wxEVT_COMMAND_TREE_END_LABEL_EDIT 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_TREE_END_LABEL_EDIT 
foreign import ccall "expEVT_COMMAND_TREE_END_LABEL_EDIT" wx_expEVT_COMMAND_TREE_END_LABEL_EDIT :: IO CInt

-- | usage: (@wxEVT_COMMAND_TREE_GET_INFO@).
{-# NOINLINE wxEVT_COMMAND_TREE_GET_INFO #-}
wxEVT_COMMAND_TREE_GET_INFO ::  EventId
wxEVT_COMMAND_TREE_GET_INFO 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_TREE_GET_INFO 
foreign import ccall "expEVT_COMMAND_TREE_GET_INFO" wx_expEVT_COMMAND_TREE_GET_INFO :: IO CInt

-- | usage: (@wxEVT_COMMAND_TREE_ITEM_ACTIVATED@).
{-# NOINLINE wxEVT_COMMAND_TREE_ITEM_ACTIVATED #-}
wxEVT_COMMAND_TREE_ITEM_ACTIVATED ::  EventId
wxEVT_COMMAND_TREE_ITEM_ACTIVATED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_TREE_ITEM_ACTIVATED 
foreign import ccall "expEVT_COMMAND_TREE_ITEM_ACTIVATED" wx_expEVT_COMMAND_TREE_ITEM_ACTIVATED :: IO CInt

-- | usage: (@wxEVT_COMMAND_TREE_ITEM_COLLAPSED@).
{-# NOINLINE wxEVT_COMMAND_TREE_ITEM_COLLAPSED #-}
wxEVT_COMMAND_TREE_ITEM_COLLAPSED ::  EventId
wxEVT_COMMAND_TREE_ITEM_COLLAPSED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_TREE_ITEM_COLLAPSED 
foreign import ccall "expEVT_COMMAND_TREE_ITEM_COLLAPSED" wx_expEVT_COMMAND_TREE_ITEM_COLLAPSED :: IO CInt

-- | usage: (@wxEVT_COMMAND_TREE_ITEM_COLLAPSING@).
{-# NOINLINE wxEVT_COMMAND_TREE_ITEM_COLLAPSING #-}
wxEVT_COMMAND_TREE_ITEM_COLLAPSING ::  EventId
wxEVT_COMMAND_TREE_ITEM_COLLAPSING 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_TREE_ITEM_COLLAPSING 
foreign import ccall "expEVT_COMMAND_TREE_ITEM_COLLAPSING" wx_expEVT_COMMAND_TREE_ITEM_COLLAPSING :: IO CInt

-- | usage: (@wxEVT_COMMAND_TREE_ITEM_EXPANDED@).
{-# NOINLINE wxEVT_COMMAND_TREE_ITEM_EXPANDED #-}
wxEVT_COMMAND_TREE_ITEM_EXPANDED ::  EventId
wxEVT_COMMAND_TREE_ITEM_EXPANDED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_TREE_ITEM_EXPANDED 
foreign import ccall "expEVT_COMMAND_TREE_ITEM_EXPANDED" wx_expEVT_COMMAND_TREE_ITEM_EXPANDED :: IO CInt

-- | usage: (@wxEVT_COMMAND_TREE_ITEM_EXPANDING@).
{-# NOINLINE wxEVT_COMMAND_TREE_ITEM_EXPANDING #-}
wxEVT_COMMAND_TREE_ITEM_EXPANDING ::  EventId
wxEVT_COMMAND_TREE_ITEM_EXPANDING 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_TREE_ITEM_EXPANDING 
foreign import ccall "expEVT_COMMAND_TREE_ITEM_EXPANDING" wx_expEVT_COMMAND_TREE_ITEM_EXPANDING :: IO CInt

-- | usage: (@wxEVT_COMMAND_TREE_ITEM_GETTOOLTIP@).
{-# NOINLINE wxEVT_COMMAND_TREE_ITEM_GETTOOLTIP #-}
wxEVT_COMMAND_TREE_ITEM_GETTOOLTIP ::  EventId
wxEVT_COMMAND_TREE_ITEM_GETTOOLTIP 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_TREE_ITEM_GETTOOLTIP 
foreign import ccall "expEVT_COMMAND_TREE_ITEM_GETTOOLTIP" wx_expEVT_COMMAND_TREE_ITEM_GETTOOLTIP :: IO CInt

-- | usage: (@wxEVT_COMMAND_TREE_ITEM_MENU@).
{-# NOINLINE wxEVT_COMMAND_TREE_ITEM_MENU #-}
wxEVT_COMMAND_TREE_ITEM_MENU ::  EventId
wxEVT_COMMAND_TREE_ITEM_MENU 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_TREE_ITEM_MENU 
foreign import ccall "expEVT_COMMAND_TREE_ITEM_MENU" wx_expEVT_COMMAND_TREE_ITEM_MENU :: IO CInt

-- | usage: (@wxEVT_COMMAND_TREE_ITEM_MIDDLE_CLICK@).
{-# NOINLINE wxEVT_COMMAND_TREE_ITEM_MIDDLE_CLICK #-}
wxEVT_COMMAND_TREE_ITEM_MIDDLE_CLICK ::  EventId
wxEVT_COMMAND_TREE_ITEM_MIDDLE_CLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_TREE_ITEM_MIDDLE_CLICK 
foreign import ccall "expEVT_COMMAND_TREE_ITEM_MIDDLE_CLICK" wx_expEVT_COMMAND_TREE_ITEM_MIDDLE_CLICK :: IO CInt

-- | usage: (@wxEVT_COMMAND_TREE_ITEM_RIGHT_CLICK@).
{-# NOINLINE wxEVT_COMMAND_TREE_ITEM_RIGHT_CLICK #-}
wxEVT_COMMAND_TREE_ITEM_RIGHT_CLICK ::  EventId
wxEVT_COMMAND_TREE_ITEM_RIGHT_CLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_TREE_ITEM_RIGHT_CLICK 
foreign import ccall "expEVT_COMMAND_TREE_ITEM_RIGHT_CLICK" wx_expEVT_COMMAND_TREE_ITEM_RIGHT_CLICK :: IO CInt

-- | usage: (@wxEVT_COMMAND_TREE_KEY_DOWN@).
{-# NOINLINE wxEVT_COMMAND_TREE_KEY_DOWN #-}
wxEVT_COMMAND_TREE_KEY_DOWN ::  EventId
wxEVT_COMMAND_TREE_KEY_DOWN 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_TREE_KEY_DOWN 
foreign import ccall "expEVT_COMMAND_TREE_KEY_DOWN" wx_expEVT_COMMAND_TREE_KEY_DOWN :: IO CInt

-- | usage: (@wxEVT_COMMAND_TREE_SEL_CHANGED@).
{-# NOINLINE wxEVT_COMMAND_TREE_SEL_CHANGED #-}
wxEVT_COMMAND_TREE_SEL_CHANGED ::  EventId
wxEVT_COMMAND_TREE_SEL_CHANGED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_TREE_SEL_CHANGED 
foreign import ccall "expEVT_COMMAND_TREE_SEL_CHANGED" wx_expEVT_COMMAND_TREE_SEL_CHANGED :: IO CInt

-- | usage: (@wxEVT_COMMAND_TREE_SEL_CHANGING@).
{-# NOINLINE wxEVT_COMMAND_TREE_SEL_CHANGING #-}
wxEVT_COMMAND_TREE_SEL_CHANGING ::  EventId
wxEVT_COMMAND_TREE_SEL_CHANGING 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_TREE_SEL_CHANGING 
foreign import ccall "expEVT_COMMAND_TREE_SEL_CHANGING" wx_expEVT_COMMAND_TREE_SEL_CHANGING :: IO CInt

-- | usage: (@wxEVT_COMMAND_TREE_SET_INFO@).
{-# NOINLINE wxEVT_COMMAND_TREE_SET_INFO #-}
wxEVT_COMMAND_TREE_SET_INFO ::  EventId
wxEVT_COMMAND_TREE_SET_INFO 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_TREE_SET_INFO 
foreign import ccall "expEVT_COMMAND_TREE_SET_INFO" wx_expEVT_COMMAND_TREE_SET_INFO :: IO CInt

-- | usage: (@wxEVT_COMMAND_TREE_STATE_IMAGE_CLICK@).
{-# NOINLINE wxEVT_COMMAND_TREE_STATE_IMAGE_CLICK #-}
wxEVT_COMMAND_TREE_STATE_IMAGE_CLICK ::  EventId
wxEVT_COMMAND_TREE_STATE_IMAGE_CLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_TREE_STATE_IMAGE_CLICK 
foreign import ccall "expEVT_COMMAND_TREE_STATE_IMAGE_CLICK" wx_expEVT_COMMAND_TREE_STATE_IMAGE_CLICK :: IO CInt

-- | usage: (@wxEVT_COMMAND_VLBOX_SELECTED@).
{-# NOINLINE wxEVT_COMMAND_VLBOX_SELECTED #-}
wxEVT_COMMAND_VLBOX_SELECTED ::  EventId
wxEVT_COMMAND_VLBOX_SELECTED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_COMMAND_VLBOX_SELECTED 
foreign import ccall "expEVT_COMMAND_VLBOX_SELECTED" wx_expEVT_COMMAND_VLBOX_SELECTED :: IO CInt

-- | usage: (@wxEVT_CONTEXT_MENU@).
{-# NOINLINE wxEVT_CONTEXT_MENU #-}
wxEVT_CONTEXT_MENU ::  EventId
wxEVT_CONTEXT_MENU 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_CONTEXT_MENU 
foreign import ccall "expEVT_CONTEXT_MENU" wx_expEVT_CONTEXT_MENU :: IO CInt

-- | usage: (@wxEVT_CREATE@).
{-# NOINLINE wxEVT_CREATE #-}
wxEVT_CREATE ::  EventId
wxEVT_CREATE 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_CREATE 
foreign import ccall "expEVT_CREATE" wx_expEVT_CREATE :: IO CInt

-- | usage: (@wxEVT_DATE_CHANGED@).
{-# NOINLINE wxEVT_DATE_CHANGED #-}
wxEVT_DATE_CHANGED ::  EventId
wxEVT_DATE_CHANGED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_DATE_CHANGED 
foreign import ccall "expEVT_DATE_CHANGED" wx_expEVT_DATE_CHANGED :: IO CInt

-- | usage: (@wxEVT_DELETE@).
{-# NOINLINE wxEVT_DELETE #-}
wxEVT_DELETE ::  EventId
wxEVT_DELETE 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_DELETE 
foreign import ccall "expEVT_DELETE" wx_expEVT_DELETE :: IO CInt

-- | usage: (@wxEVT_DESTROY@).
{-# NOINLINE wxEVT_DESTROY #-}
wxEVT_DESTROY ::  EventId
wxEVT_DESTROY 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_DESTROY 
foreign import ccall "expEVT_DESTROY" wx_expEVT_DESTROY :: IO CInt

-- | usage: (@wxEVT_DETAILED_HELP@).
{-# NOINLINE wxEVT_DETAILED_HELP #-}
wxEVT_DETAILED_HELP ::  EventId
wxEVT_DETAILED_HELP 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_DETAILED_HELP 
foreign import ccall "expEVT_DETAILED_HELP" wx_expEVT_DETAILED_HELP :: IO CInt

-- | usage: (@wxEVT_DISPLAY_CHANGED@).
{-# NOINLINE wxEVT_DISPLAY_CHANGED #-}
wxEVT_DISPLAY_CHANGED ::  EventId
wxEVT_DISPLAY_CHANGED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_DISPLAY_CHANGED 
foreign import ccall "expEVT_DISPLAY_CHANGED" wx_expEVT_DISPLAY_CHANGED :: IO CInt

-- | usage: (@wxEVT_DROP_FILES@).
{-# NOINLINE wxEVT_DROP_FILES #-}
wxEVT_DROP_FILES ::  EventId
wxEVT_DROP_FILES 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_DROP_FILES 
foreign import ccall "expEVT_DROP_FILES" wx_expEVT_DROP_FILES :: IO CInt

-- | usage: (@wxEVT_END_PROCESS@).
{-# NOINLINE wxEVT_END_PROCESS #-}
wxEVT_END_PROCESS ::  EventId
wxEVT_END_PROCESS 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_END_PROCESS 
foreign import ccall "expEVT_END_PROCESS" wx_expEVT_END_PROCESS :: IO CInt

-- | usage: (@wxEVT_END_SESSION@).
{-# NOINLINE wxEVT_END_SESSION #-}
wxEVT_END_SESSION ::  EventId
wxEVT_END_SESSION 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_END_SESSION 
foreign import ccall "expEVT_END_SESSION" wx_expEVT_END_SESSION :: IO CInt

-- | usage: (@wxEVT_ENTER_WINDOW@).
{-# NOINLINE wxEVT_ENTER_WINDOW #-}
wxEVT_ENTER_WINDOW ::  EventId
wxEVT_ENTER_WINDOW 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_ENTER_WINDOW 
foreign import ccall "expEVT_ENTER_WINDOW" wx_expEVT_ENTER_WINDOW :: IO CInt

-- | usage: (@wxEVT_ERASE_BACKGROUND@).
{-# NOINLINE wxEVT_ERASE_BACKGROUND #-}
wxEVT_ERASE_BACKGROUND ::  EventId
wxEVT_ERASE_BACKGROUND 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_ERASE_BACKGROUND 
foreign import ccall "expEVT_ERASE_BACKGROUND" wx_expEVT_ERASE_BACKGROUND :: IO CInt

-- | usage: (@wxEVT_FILECTRL_FILEACTIVATED@).
{-# NOINLINE wxEVT_FILECTRL_FILEACTIVATED #-}
wxEVT_FILECTRL_FILEACTIVATED ::  EventId
wxEVT_FILECTRL_FILEACTIVATED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_FILECTRL_FILEACTIVATED 
foreign import ccall "expEVT_FILECTRL_FILEACTIVATED" wx_expEVT_FILECTRL_FILEACTIVATED :: IO CInt

-- | usage: (@wxEVT_FILECTRL_FILTERCHANGED@).
{-# NOINLINE wxEVT_FILECTRL_FILTERCHANGED #-}
wxEVT_FILECTRL_FILTERCHANGED ::  EventId
wxEVT_FILECTRL_FILTERCHANGED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_FILECTRL_FILTERCHANGED 
foreign import ccall "expEVT_FILECTRL_FILTERCHANGED" wx_expEVT_FILECTRL_FILTERCHANGED :: IO CInt

-- | usage: (@wxEVT_FILECTRL_FOLDERCHANGED@).
{-# NOINLINE wxEVT_FILECTRL_FOLDERCHANGED #-}
wxEVT_FILECTRL_FOLDERCHANGED ::  EventId
wxEVT_FILECTRL_FOLDERCHANGED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_FILECTRL_FOLDERCHANGED 
foreign import ccall "expEVT_FILECTRL_FOLDERCHANGED" wx_expEVT_FILECTRL_FOLDERCHANGED :: IO CInt

-- | usage: (@wxEVT_FILECTRL_SELECTIONCHANGED@).
{-# NOINLINE wxEVT_FILECTRL_SELECTIONCHANGED #-}
wxEVT_FILECTRL_SELECTIONCHANGED ::  EventId
wxEVT_FILECTRL_SELECTIONCHANGED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_FILECTRL_SELECTIONCHANGED 
foreign import ccall "expEVT_FILECTRL_SELECTIONCHANGED" wx_expEVT_FILECTRL_SELECTIONCHANGED :: IO CInt

-- | usage: (@wxEVT_FSWATCHER@).
{-# NOINLINE wxEVT_FSWATCHER #-}
wxEVT_FSWATCHER ::  EventId
wxEVT_FSWATCHER 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_FSWATCHER 
foreign import ccall "expEVT_FSWATCHER" wx_expEVT_FSWATCHER :: IO CInt

-- | usage: (@wxEVT_GRID_CELL_BEGIN_DRAG@).
{-# NOINLINE wxEVT_GRID_CELL_BEGIN_DRAG #-}
wxEVT_GRID_CELL_BEGIN_DRAG ::  EventId
wxEVT_GRID_CELL_BEGIN_DRAG 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_GRID_CELL_BEGIN_DRAG 
foreign import ccall "expEVT_GRID_CELL_BEGIN_DRAG" wx_expEVT_GRID_CELL_BEGIN_DRAG :: IO CInt

-- | usage: (@wxEVT_GRID_CELL_CHANGED@).
{-# NOINLINE wxEVT_GRID_CELL_CHANGED #-}
wxEVT_GRID_CELL_CHANGED ::  EventId
wxEVT_GRID_CELL_CHANGED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_GRID_CELL_CHANGED 
foreign import ccall "expEVT_GRID_CELL_CHANGED" wx_expEVT_GRID_CELL_CHANGED :: IO CInt

-- | usage: (@wxEVT_GRID_CELL_CHANGING@).
{-# NOINLINE wxEVT_GRID_CELL_CHANGING #-}
wxEVT_GRID_CELL_CHANGING ::  EventId
wxEVT_GRID_CELL_CHANGING 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_GRID_CELL_CHANGING 
foreign import ccall "expEVT_GRID_CELL_CHANGING" wx_expEVT_GRID_CELL_CHANGING :: IO CInt

-- | usage: (@wxEVT_GRID_CELL_LEFT_CLICK@).
{-# NOINLINE wxEVT_GRID_CELL_LEFT_CLICK #-}
wxEVT_GRID_CELL_LEFT_CLICK ::  EventId
wxEVT_GRID_CELL_LEFT_CLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_GRID_CELL_LEFT_CLICK 
foreign import ccall "expEVT_GRID_CELL_LEFT_CLICK" wx_expEVT_GRID_CELL_LEFT_CLICK :: IO CInt

-- | usage: (@wxEVT_GRID_CELL_LEFT_DCLICK@).
{-# NOINLINE wxEVT_GRID_CELL_LEFT_DCLICK #-}
wxEVT_GRID_CELL_LEFT_DCLICK ::  EventId
wxEVT_GRID_CELL_LEFT_DCLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_GRID_CELL_LEFT_DCLICK 
foreign import ccall "expEVT_GRID_CELL_LEFT_DCLICK" wx_expEVT_GRID_CELL_LEFT_DCLICK :: IO CInt

-- | usage: (@wxEVT_GRID_CELL_RIGHT_CLICK@).
{-# NOINLINE wxEVT_GRID_CELL_RIGHT_CLICK #-}
wxEVT_GRID_CELL_RIGHT_CLICK ::  EventId
wxEVT_GRID_CELL_RIGHT_CLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_GRID_CELL_RIGHT_CLICK 
foreign import ccall "expEVT_GRID_CELL_RIGHT_CLICK" wx_expEVT_GRID_CELL_RIGHT_CLICK :: IO CInt

-- | usage: (@wxEVT_GRID_CELL_RIGHT_DCLICK@).
{-# NOINLINE wxEVT_GRID_CELL_RIGHT_DCLICK #-}
wxEVT_GRID_CELL_RIGHT_DCLICK ::  EventId
wxEVT_GRID_CELL_RIGHT_DCLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_GRID_CELL_RIGHT_DCLICK 
foreign import ccall "expEVT_GRID_CELL_RIGHT_DCLICK" wx_expEVT_GRID_CELL_RIGHT_DCLICK :: IO CInt

-- | usage: (@wxEVT_GRID_COL_MOVE@).
{-# NOINLINE wxEVT_GRID_COL_MOVE #-}
wxEVT_GRID_COL_MOVE ::  EventId
wxEVT_GRID_COL_MOVE 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_GRID_COL_MOVE 
foreign import ccall "expEVT_GRID_COL_MOVE" wx_expEVT_GRID_COL_MOVE :: IO CInt

-- | usage: (@wxEVT_GRID_COL_SIZE@).
{-# NOINLINE wxEVT_GRID_COL_SIZE #-}
wxEVT_GRID_COL_SIZE ::  EventId
wxEVT_GRID_COL_SIZE 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_GRID_COL_SIZE 
foreign import ccall "expEVT_GRID_COL_SIZE" wx_expEVT_GRID_COL_SIZE :: IO CInt

-- | usage: (@wxEVT_GRID_COL_SORT@).
{-# NOINLINE wxEVT_GRID_COL_SORT #-}
wxEVT_GRID_COL_SORT ::  EventId
wxEVT_GRID_COL_SORT 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_GRID_COL_SORT 
foreign import ccall "expEVT_GRID_COL_SORT" wx_expEVT_GRID_COL_SORT :: IO CInt

-- | usage: (@wxEVT_GRID_EDITOR_CREATED@).
{-# NOINLINE wxEVT_GRID_EDITOR_CREATED #-}
wxEVT_GRID_EDITOR_CREATED ::  EventId
wxEVT_GRID_EDITOR_CREATED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_GRID_EDITOR_CREATED 
foreign import ccall "expEVT_GRID_EDITOR_CREATED" wx_expEVT_GRID_EDITOR_CREATED :: IO CInt

-- | usage: (@wxEVT_GRID_EDITOR_HIDDEN@).
{-# NOINLINE wxEVT_GRID_EDITOR_HIDDEN #-}
wxEVT_GRID_EDITOR_HIDDEN ::  EventId
wxEVT_GRID_EDITOR_HIDDEN 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_GRID_EDITOR_HIDDEN 
foreign import ccall "expEVT_GRID_EDITOR_HIDDEN" wx_expEVT_GRID_EDITOR_HIDDEN :: IO CInt

-- | usage: (@wxEVT_GRID_EDITOR_SHOWN@).
{-# NOINLINE wxEVT_GRID_EDITOR_SHOWN #-}
wxEVT_GRID_EDITOR_SHOWN ::  EventId
wxEVT_GRID_EDITOR_SHOWN 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_GRID_EDITOR_SHOWN 
foreign import ccall "expEVT_GRID_EDITOR_SHOWN" wx_expEVT_GRID_EDITOR_SHOWN :: IO CInt

-- | usage: (@wxEVT_GRID_LABEL_LEFT_CLICK@).
{-# NOINLINE wxEVT_GRID_LABEL_LEFT_CLICK #-}
wxEVT_GRID_LABEL_LEFT_CLICK ::  EventId
wxEVT_GRID_LABEL_LEFT_CLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_GRID_LABEL_LEFT_CLICK 
foreign import ccall "expEVT_GRID_LABEL_LEFT_CLICK" wx_expEVT_GRID_LABEL_LEFT_CLICK :: IO CInt

-- | usage: (@wxEVT_GRID_LABEL_LEFT_DCLICK@).
{-# NOINLINE wxEVT_GRID_LABEL_LEFT_DCLICK #-}
wxEVT_GRID_LABEL_LEFT_DCLICK ::  EventId
wxEVT_GRID_LABEL_LEFT_DCLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_GRID_LABEL_LEFT_DCLICK 
foreign import ccall "expEVT_GRID_LABEL_LEFT_DCLICK" wx_expEVT_GRID_LABEL_LEFT_DCLICK :: IO CInt

-- | usage: (@wxEVT_GRID_LABEL_RIGHT_CLICK@).
{-# NOINLINE wxEVT_GRID_LABEL_RIGHT_CLICK #-}
wxEVT_GRID_LABEL_RIGHT_CLICK ::  EventId
wxEVT_GRID_LABEL_RIGHT_CLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_GRID_LABEL_RIGHT_CLICK 
foreign import ccall "expEVT_GRID_LABEL_RIGHT_CLICK" wx_expEVT_GRID_LABEL_RIGHT_CLICK :: IO CInt

-- | usage: (@wxEVT_GRID_LABEL_RIGHT_DCLICK@).
{-# NOINLINE wxEVT_GRID_LABEL_RIGHT_DCLICK #-}
wxEVT_GRID_LABEL_RIGHT_DCLICK ::  EventId
wxEVT_GRID_LABEL_RIGHT_DCLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_GRID_LABEL_RIGHT_DCLICK 
foreign import ccall "expEVT_GRID_LABEL_RIGHT_DCLICK" wx_expEVT_GRID_LABEL_RIGHT_DCLICK :: IO CInt

-- | usage: (@wxEVT_GRID_RANGE_SELECT@).
{-# NOINLINE wxEVT_GRID_RANGE_SELECT #-}
wxEVT_GRID_RANGE_SELECT ::  EventId
wxEVT_GRID_RANGE_SELECT 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_GRID_RANGE_SELECT 
foreign import ccall "expEVT_GRID_RANGE_SELECT" wx_expEVT_GRID_RANGE_SELECT :: IO CInt

-- | usage: (@wxEVT_GRID_ROW_SIZE@).
{-# NOINLINE wxEVT_GRID_ROW_SIZE #-}
wxEVT_GRID_ROW_SIZE ::  EventId
wxEVT_GRID_ROW_SIZE 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_GRID_ROW_SIZE 
foreign import ccall "expEVT_GRID_ROW_SIZE" wx_expEVT_GRID_ROW_SIZE :: IO CInt

-- | usage: (@wxEVT_GRID_SELECT_CELL@).
{-# NOINLINE wxEVT_GRID_SELECT_CELL #-}
wxEVT_GRID_SELECT_CELL ::  EventId
wxEVT_GRID_SELECT_CELL 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_GRID_SELECT_CELL 
foreign import ccall "expEVT_GRID_SELECT_CELL" wx_expEVT_GRID_SELECT_CELL :: IO CInt

-- | usage: (@wxEVT_HELP@).
{-# NOINLINE wxEVT_HELP #-}
wxEVT_HELP ::  EventId
wxEVT_HELP 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_HELP 
foreign import ccall "expEVT_HELP" wx_expEVT_HELP :: IO CInt

-- | usage: (@wxEVT_HIBERNATE@).
{-# NOINLINE wxEVT_HIBERNATE #-}
wxEVT_HIBERNATE ::  EventId
wxEVT_HIBERNATE 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_HIBERNATE 
foreign import ccall "expEVT_HIBERNATE" wx_expEVT_HIBERNATE :: IO CInt

-- | usage: (@wxEVT_HOTKEY@).
{-# NOINLINE wxEVT_HOTKEY #-}
wxEVT_HOTKEY ::  EventId
wxEVT_HOTKEY 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_HOTKEY 
foreign import ccall "expEVT_HOTKEY" wx_expEVT_HOTKEY :: IO CInt

-- | usage: (@wxEVT_HTML_CELL_CLICKED@).
{-# NOINLINE wxEVT_HTML_CELL_CLICKED #-}
wxEVT_HTML_CELL_CLICKED ::  EventId
wxEVT_HTML_CELL_CLICKED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_HTML_CELL_CLICKED 
foreign import ccall "expEVT_HTML_CELL_CLICKED" wx_expEVT_HTML_CELL_CLICKED :: IO CInt

-- | usage: (@wxEVT_HTML_CELL_MOUSE_HOVER@).
{-# NOINLINE wxEVT_HTML_CELL_MOUSE_HOVER #-}
wxEVT_HTML_CELL_MOUSE_HOVER ::  EventId
wxEVT_HTML_CELL_MOUSE_HOVER 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_HTML_CELL_MOUSE_HOVER 
foreign import ccall "expEVT_HTML_CELL_MOUSE_HOVER" wx_expEVT_HTML_CELL_MOUSE_HOVER :: IO CInt

-- | usage: (@wxEVT_HTML_LINK_CLICKED@).
{-# NOINLINE wxEVT_HTML_LINK_CLICKED #-}
wxEVT_HTML_LINK_CLICKED ::  EventId
wxEVT_HTML_LINK_CLICKED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_HTML_LINK_CLICKED 
foreign import ccall "expEVT_HTML_LINK_CLICKED" wx_expEVT_HTML_LINK_CLICKED :: IO CInt

-- | usage: (@wxEVT_HTML_SET_TITLE@).
{-# NOINLINE wxEVT_HTML_SET_TITLE #-}
wxEVT_HTML_SET_TITLE ::  EventId
wxEVT_HTML_SET_TITLE 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_HTML_SET_TITLE 
foreign import ccall "expEVT_HTML_SET_TITLE" wx_expEVT_HTML_SET_TITLE :: IO CInt

-- | usage: (@wxEVT_ICONIZE@).
{-# NOINLINE wxEVT_ICONIZE #-}
wxEVT_ICONIZE ::  EventId
wxEVT_ICONIZE 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_ICONIZE 
foreign import ccall "expEVT_ICONIZE" wx_expEVT_ICONIZE :: IO CInt

-- | usage: (@wxEVT_IDLE@).
{-# NOINLINE wxEVT_IDLE #-}
wxEVT_IDLE ::  EventId
wxEVT_IDLE 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_IDLE 
foreign import ccall "expEVT_IDLE" wx_expEVT_IDLE :: IO CInt

-- | usage: (@wxEVT_INIT_DIALOG@).
{-# NOINLINE wxEVT_INIT_DIALOG #-}
wxEVT_INIT_DIALOG ::  EventId
wxEVT_INIT_DIALOG 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_INIT_DIALOG 
foreign import ccall "expEVT_INIT_DIALOG" wx_expEVT_INIT_DIALOG :: IO CInt

-- | usage: (@wxEVT_INPUT_SINK@).
{-# NOINLINE wxEVT_INPUT_SINK #-}
wxEVT_INPUT_SINK ::  EventId
wxEVT_INPUT_SINK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_INPUT_SINK 
foreign import ccall "expEVT_INPUT_SINK" wx_expEVT_INPUT_SINK :: IO CInt

-- | usage: (@wxEVT_KEY_DOWN@).
{-# NOINLINE wxEVT_KEY_DOWN #-}
wxEVT_KEY_DOWN ::  EventId
wxEVT_KEY_DOWN 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_KEY_DOWN 
foreign import ccall "expEVT_KEY_DOWN" wx_expEVT_KEY_DOWN :: IO CInt

-- | usage: (@wxEVT_KEY_UP@).
{-# NOINLINE wxEVT_KEY_UP #-}
wxEVT_KEY_UP ::  EventId
wxEVT_KEY_UP 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_KEY_UP 
foreign import ccall "expEVT_KEY_UP" wx_expEVT_KEY_UP :: IO CInt

-- | usage: (@wxEVT_KILL_FOCUS@).
{-# NOINLINE wxEVT_KILL_FOCUS #-}
wxEVT_KILL_FOCUS ::  EventId
wxEVT_KILL_FOCUS 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_KILL_FOCUS 
foreign import ccall "expEVT_KILL_FOCUS" wx_expEVT_KILL_FOCUS :: IO CInt

-- | usage: (@wxEVT_LEAVE_WINDOW@).
{-# NOINLINE wxEVT_LEAVE_WINDOW #-}
wxEVT_LEAVE_WINDOW ::  EventId
wxEVT_LEAVE_WINDOW 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_LEAVE_WINDOW 
foreign import ccall "expEVT_LEAVE_WINDOW" wx_expEVT_LEAVE_WINDOW :: IO CInt

-- | usage: (@wxEVT_LEFT_DCLICK@).
{-# NOINLINE wxEVT_LEFT_DCLICK #-}
wxEVT_LEFT_DCLICK ::  EventId
wxEVT_LEFT_DCLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_LEFT_DCLICK 
foreign import ccall "expEVT_LEFT_DCLICK" wx_expEVT_LEFT_DCLICK :: IO CInt

-- | usage: (@wxEVT_LEFT_DOWN@).
{-# NOINLINE wxEVT_LEFT_DOWN #-}
wxEVT_LEFT_DOWN ::  EventId
wxEVT_LEFT_DOWN 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_LEFT_DOWN 
foreign import ccall "expEVT_LEFT_DOWN" wx_expEVT_LEFT_DOWN :: IO CInt

-- | usage: (@wxEVT_LEFT_UP@).
{-# NOINLINE wxEVT_LEFT_UP #-}
wxEVT_LEFT_UP ::  EventId
wxEVT_LEFT_UP 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_LEFT_UP 
foreign import ccall "expEVT_LEFT_UP" wx_expEVT_LEFT_UP :: IO CInt

-- | usage: (@wxEVT_MAXIMIZE@).
{-# NOINLINE wxEVT_MAXIMIZE #-}
wxEVT_MAXIMIZE ::  EventId
wxEVT_MAXIMIZE 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_MAXIMIZE 
foreign import ccall "expEVT_MAXIMIZE" wx_expEVT_MAXIMIZE :: IO CInt

-- | usage: (@wxEVT_MENU_CLOSE@).
{-# NOINLINE wxEVT_MENU_CLOSE #-}
wxEVT_MENU_CLOSE ::  EventId
wxEVT_MENU_CLOSE 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_MENU_CLOSE 
foreign import ccall "expEVT_MENU_CLOSE" wx_expEVT_MENU_CLOSE :: IO CInt

-- | usage: (@wxEVT_MENU_HIGHLIGHT@).
{-# NOINLINE wxEVT_MENU_HIGHLIGHT #-}
wxEVT_MENU_HIGHLIGHT ::  EventId
wxEVT_MENU_HIGHLIGHT 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_MENU_HIGHLIGHT 
foreign import ccall "expEVT_MENU_HIGHLIGHT" wx_expEVT_MENU_HIGHLIGHT :: IO CInt

-- | usage: (@wxEVT_MENU_OPEN@).
{-# NOINLINE wxEVT_MENU_OPEN #-}
wxEVT_MENU_OPEN ::  EventId
wxEVT_MENU_OPEN 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_MENU_OPEN 
foreign import ccall "expEVT_MENU_OPEN" wx_expEVT_MENU_OPEN :: IO CInt

-- | usage: (@wxEVT_MIDDLE_DCLICK@).
{-# NOINLINE wxEVT_MIDDLE_DCLICK #-}
wxEVT_MIDDLE_DCLICK ::  EventId
wxEVT_MIDDLE_DCLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_MIDDLE_DCLICK 
foreign import ccall "expEVT_MIDDLE_DCLICK" wx_expEVT_MIDDLE_DCLICK :: IO CInt

-- | usage: (@wxEVT_MIDDLE_DOWN@).
{-# NOINLINE wxEVT_MIDDLE_DOWN #-}
wxEVT_MIDDLE_DOWN ::  EventId
wxEVT_MIDDLE_DOWN 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_MIDDLE_DOWN 
foreign import ccall "expEVT_MIDDLE_DOWN" wx_expEVT_MIDDLE_DOWN :: IO CInt

-- | usage: (@wxEVT_MIDDLE_UP@).
{-# NOINLINE wxEVT_MIDDLE_UP #-}
wxEVT_MIDDLE_UP ::  EventId
wxEVT_MIDDLE_UP 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_MIDDLE_UP 
foreign import ccall "expEVT_MIDDLE_UP" wx_expEVT_MIDDLE_UP :: IO CInt

-- | usage: (@wxEVT_MOTION@).
{-# NOINLINE wxEVT_MOTION #-}
wxEVT_MOTION ::  EventId
wxEVT_MOTION 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_MOTION 
foreign import ccall "expEVT_MOTION" wx_expEVT_MOTION :: IO CInt

-- | usage: (@wxEVT_MOUSEWHEEL@).
{-# NOINLINE wxEVT_MOUSEWHEEL #-}
wxEVT_MOUSEWHEEL ::  EventId
wxEVT_MOUSEWHEEL 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_MOUSEWHEEL 
foreign import ccall "expEVT_MOUSEWHEEL" wx_expEVT_MOUSEWHEEL :: IO CInt

-- | usage: (@wxEVT_MOUSE_CAPTURE_CHANGED@).
{-# NOINLINE wxEVT_MOUSE_CAPTURE_CHANGED #-}
wxEVT_MOUSE_CAPTURE_CHANGED ::  EventId
wxEVT_MOUSE_CAPTURE_CHANGED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_MOUSE_CAPTURE_CHANGED 
foreign import ccall "expEVT_MOUSE_CAPTURE_CHANGED" wx_expEVT_MOUSE_CAPTURE_CHANGED :: IO CInt

-- | usage: (@wxEVT_MOUSE_CAPTURE_LOST@).
{-# NOINLINE wxEVT_MOUSE_CAPTURE_LOST #-}
wxEVT_MOUSE_CAPTURE_LOST ::  EventId
wxEVT_MOUSE_CAPTURE_LOST 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_MOUSE_CAPTURE_LOST 
foreign import ccall "expEVT_MOUSE_CAPTURE_LOST" wx_expEVT_MOUSE_CAPTURE_LOST :: IO CInt

-- | usage: (@wxEVT_MOVE@).
{-# NOINLINE wxEVT_MOVE #-}
wxEVT_MOVE ::  EventId
wxEVT_MOVE 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_MOVE 
foreign import ccall "expEVT_MOVE" wx_expEVT_MOVE :: IO CInt

-- | usage: (@wxEVT_MOVE_END@).
{-# NOINLINE wxEVT_MOVE_END #-}
wxEVT_MOVE_END ::  EventId
wxEVT_MOVE_END 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_MOVE_END 
foreign import ccall "expEVT_MOVE_END" wx_expEVT_MOVE_END :: IO CInt

-- | usage: (@wxEVT_MOVE_START@).
{-# NOINLINE wxEVT_MOVE_START #-}
wxEVT_MOVE_START ::  EventId
wxEVT_MOVE_START 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_MOVE_START 
foreign import ccall "expEVT_MOVE_START" wx_expEVT_MOVE_START :: IO CInt

-- | usage: (@wxEVT_MOVING@).
{-# NOINLINE wxEVT_MOVING #-}
wxEVT_MOVING ::  EventId
wxEVT_MOVING 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_MOVING 
foreign import ccall "expEVT_MOVING" wx_expEVT_MOVING :: IO CInt

-- | usage: (@wxEVT_NAVIGATION_KEY@).
{-# NOINLINE wxEVT_NAVIGATION_KEY #-}
wxEVT_NAVIGATION_KEY ::  EventId
wxEVT_NAVIGATION_KEY 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_NAVIGATION_KEY 
foreign import ccall "expEVT_NAVIGATION_KEY" wx_expEVT_NAVIGATION_KEY :: IO CInt

-- | usage: (@wxEVT_NC_PAINT@).
{-# NOINLINE wxEVT_NC_PAINT #-}
wxEVT_NC_PAINT ::  EventId
wxEVT_NC_PAINT 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_NC_PAINT 
foreign import ccall "expEVT_NC_PAINT" wx_expEVT_NC_PAINT :: IO CInt

-- | usage: (@wxEVT_PAINT@).
{-# NOINLINE wxEVT_PAINT #-}
wxEVT_PAINT ::  EventId
wxEVT_PAINT 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_PAINT 
foreign import ccall "expEVT_PAINT" wx_expEVT_PAINT :: IO CInt

-- | usage: (@wxEVT_PALETTE_CHANGED@).
{-# NOINLINE wxEVT_PALETTE_CHANGED #-}
wxEVT_PALETTE_CHANGED ::  EventId
wxEVT_PALETTE_CHANGED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_PALETTE_CHANGED 
foreign import ccall "expEVT_PALETTE_CHANGED" wx_expEVT_PALETTE_CHANGED :: IO CInt

-- | usage: (@wxEVT_PG_CHANGED@).
{-# NOINLINE wxEVT_PG_CHANGED #-}
wxEVT_PG_CHANGED ::  EventId
wxEVT_PG_CHANGED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_PG_CHANGED 
foreign import ccall "expEVT_PG_CHANGED" wx_expEVT_PG_CHANGED :: IO CInt

-- | usage: (@wxEVT_PG_CHANGING@).
{-# NOINLINE wxEVT_PG_CHANGING #-}
wxEVT_PG_CHANGING ::  EventId
wxEVT_PG_CHANGING 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_PG_CHANGING 
foreign import ccall "expEVT_PG_CHANGING" wx_expEVT_PG_CHANGING :: IO CInt

-- | usage: (@wxEVT_PG_DOUBLE_CLICK@).
{-# NOINLINE wxEVT_PG_DOUBLE_CLICK #-}
wxEVT_PG_DOUBLE_CLICK ::  EventId
wxEVT_PG_DOUBLE_CLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_PG_DOUBLE_CLICK 
foreign import ccall "expEVT_PG_DOUBLE_CLICK" wx_expEVT_PG_DOUBLE_CLICK :: IO CInt

-- | usage: (@wxEVT_PG_HIGHLIGHTED@).
{-# NOINLINE wxEVT_PG_HIGHLIGHTED #-}
wxEVT_PG_HIGHLIGHTED ::  EventId
wxEVT_PG_HIGHLIGHTED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_PG_HIGHLIGHTED 
foreign import ccall "expEVT_PG_HIGHLIGHTED" wx_expEVT_PG_HIGHLIGHTED :: IO CInt

-- | usage: (@wxEVT_PG_ITEM_COLLAPSED@).
{-# NOINLINE wxEVT_PG_ITEM_COLLAPSED #-}
wxEVT_PG_ITEM_COLLAPSED ::  EventId
wxEVT_PG_ITEM_COLLAPSED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_PG_ITEM_COLLAPSED 
foreign import ccall "expEVT_PG_ITEM_COLLAPSED" wx_expEVT_PG_ITEM_COLLAPSED :: IO CInt

-- | usage: (@wxEVT_PG_ITEM_EXPANDED@).
{-# NOINLINE wxEVT_PG_ITEM_EXPANDED #-}
wxEVT_PG_ITEM_EXPANDED ::  EventId
wxEVT_PG_ITEM_EXPANDED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_PG_ITEM_EXPANDED 
foreign import ccall "expEVT_PG_ITEM_EXPANDED" wx_expEVT_PG_ITEM_EXPANDED :: IO CInt

-- | usage: (@wxEVT_PG_PAGE_CHANGED@).
{-# NOINLINE wxEVT_PG_PAGE_CHANGED #-}
wxEVT_PG_PAGE_CHANGED ::  EventId
wxEVT_PG_PAGE_CHANGED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_PG_PAGE_CHANGED 
foreign import ccall "expEVT_PG_PAGE_CHANGED" wx_expEVT_PG_PAGE_CHANGED :: IO CInt

-- | usage: (@wxEVT_PG_RIGHT_CLICK@).
{-# NOINLINE wxEVT_PG_RIGHT_CLICK #-}
wxEVT_PG_RIGHT_CLICK ::  EventId
wxEVT_PG_RIGHT_CLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_PG_RIGHT_CLICK 
foreign import ccall "expEVT_PG_RIGHT_CLICK" wx_expEVT_PG_RIGHT_CLICK :: IO CInt

-- | usage: (@wxEVT_PG_SELECTED@).
{-# NOINLINE wxEVT_PG_SELECTED #-}
wxEVT_PG_SELECTED ::  EventId
wxEVT_PG_SELECTED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_PG_SELECTED 
foreign import ccall "expEVT_PG_SELECTED" wx_expEVT_PG_SELECTED :: IO CInt

-- | usage: (@wxEVT_POWER_RESUME@).
{-# NOINLINE wxEVT_POWER_RESUME #-}
wxEVT_POWER_RESUME ::  EventId
wxEVT_POWER_RESUME 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_POWER_RESUME 
foreign import ccall "expEVT_POWER_RESUME" wx_expEVT_POWER_RESUME :: IO CInt

-- | usage: (@wxEVT_POWER_SUSPENDED@).
{-# NOINLINE wxEVT_POWER_SUSPENDED #-}
wxEVT_POWER_SUSPENDED ::  EventId
wxEVT_POWER_SUSPENDED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_POWER_SUSPENDED 
foreign import ccall "expEVT_POWER_SUSPENDED" wx_expEVT_POWER_SUSPENDED :: IO CInt

-- | usage: (@wxEVT_POWER_SUSPENDING@).
{-# NOINLINE wxEVT_POWER_SUSPENDING #-}
wxEVT_POWER_SUSPENDING ::  EventId
wxEVT_POWER_SUSPENDING 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_POWER_SUSPENDING 
foreign import ccall "expEVT_POWER_SUSPENDING" wx_expEVT_POWER_SUSPENDING :: IO CInt

-- | usage: (@wxEVT_POWER_SUSPEND_CANCEL@).
{-# NOINLINE wxEVT_POWER_SUSPEND_CANCEL #-}
wxEVT_POWER_SUSPEND_CANCEL ::  EventId
wxEVT_POWER_SUSPEND_CANCEL 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_POWER_SUSPEND_CANCEL 
foreign import ccall "expEVT_POWER_SUSPEND_CANCEL" wx_expEVT_POWER_SUSPEND_CANCEL :: IO CInt

-- | usage: (@wxEVT_PRINT_BEGIN@).
{-# NOINLINE wxEVT_PRINT_BEGIN #-}
wxEVT_PRINT_BEGIN ::  EventId
wxEVT_PRINT_BEGIN 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_PRINT_BEGIN 
foreign import ccall "expEVT_PRINT_BEGIN" wx_expEVT_PRINT_BEGIN :: IO CInt

-- | usage: (@wxEVT_PRINT_BEGIN_DOC@).
{-# NOINLINE wxEVT_PRINT_BEGIN_DOC #-}
wxEVT_PRINT_BEGIN_DOC ::  EventId
wxEVT_PRINT_BEGIN_DOC 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_PRINT_BEGIN_DOC 
foreign import ccall "expEVT_PRINT_BEGIN_DOC" wx_expEVT_PRINT_BEGIN_DOC :: IO CInt

-- | usage: (@wxEVT_PRINT_END@).
{-# NOINLINE wxEVT_PRINT_END #-}
wxEVT_PRINT_END ::  EventId
wxEVT_PRINT_END 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_PRINT_END 
foreign import ccall "expEVT_PRINT_END" wx_expEVT_PRINT_END :: IO CInt

-- | usage: (@wxEVT_PRINT_END_DOC@).
{-# NOINLINE wxEVT_PRINT_END_DOC #-}
wxEVT_PRINT_END_DOC ::  EventId
wxEVT_PRINT_END_DOC 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_PRINT_END_DOC 
foreign import ccall "expEVT_PRINT_END_DOC" wx_expEVT_PRINT_END_DOC :: IO CInt

-- | usage: (@wxEVT_PRINT_PAGE@).
{-# NOINLINE wxEVT_PRINT_PAGE #-}
wxEVT_PRINT_PAGE ::  EventId
wxEVT_PRINT_PAGE 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_PRINT_PAGE 
foreign import ccall "expEVT_PRINT_PAGE" wx_expEVT_PRINT_PAGE :: IO CInt

-- | usage: (@wxEVT_PRINT_PREPARE@).
{-# NOINLINE wxEVT_PRINT_PREPARE #-}
wxEVT_PRINT_PREPARE ::  EventId
wxEVT_PRINT_PREPARE 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_PRINT_PREPARE 
foreign import ccall "expEVT_PRINT_PREPARE" wx_expEVT_PRINT_PREPARE :: IO CInt

-- | usage: (@wxEVT_QUERY_END_SESSION@).
{-# NOINLINE wxEVT_QUERY_END_SESSION #-}
wxEVT_QUERY_END_SESSION ::  EventId
wxEVT_QUERY_END_SESSION 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_QUERY_END_SESSION 
foreign import ccall "expEVT_QUERY_END_SESSION" wx_expEVT_QUERY_END_SESSION :: IO CInt

-- | usage: (@wxEVT_QUERY_LAYOUT_INFO@).
{-# NOINLINE wxEVT_QUERY_LAYOUT_INFO #-}
wxEVT_QUERY_LAYOUT_INFO ::  EventId
wxEVT_QUERY_LAYOUT_INFO 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_QUERY_LAYOUT_INFO 
foreign import ccall "expEVT_QUERY_LAYOUT_INFO" wx_expEVT_QUERY_LAYOUT_INFO :: IO CInt

-- | usage: (@wxEVT_QUERY_NEW_PALETTE@).
{-# NOINLINE wxEVT_QUERY_NEW_PALETTE #-}
wxEVT_QUERY_NEW_PALETTE ::  EventId
wxEVT_QUERY_NEW_PALETTE 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_QUERY_NEW_PALETTE 
foreign import ccall "expEVT_QUERY_NEW_PALETTE" wx_expEVT_QUERY_NEW_PALETTE :: IO CInt

-- | usage: (@wxEVT_RIGHT_DCLICK@).
{-# NOINLINE wxEVT_RIGHT_DCLICK #-}
wxEVT_RIGHT_DCLICK ::  EventId
wxEVT_RIGHT_DCLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_RIGHT_DCLICK 
foreign import ccall "expEVT_RIGHT_DCLICK" wx_expEVT_RIGHT_DCLICK :: IO CInt

-- | usage: (@wxEVT_RIGHT_DOWN@).
{-# NOINLINE wxEVT_RIGHT_DOWN #-}
wxEVT_RIGHT_DOWN ::  EventId
wxEVT_RIGHT_DOWN 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_RIGHT_DOWN 
foreign import ccall "expEVT_RIGHT_DOWN" wx_expEVT_RIGHT_DOWN :: IO CInt

-- | usage: (@wxEVT_RIGHT_UP@).
{-# NOINLINE wxEVT_RIGHT_UP #-}
wxEVT_RIGHT_UP ::  EventId
wxEVT_RIGHT_UP 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_RIGHT_UP 
foreign import ccall "expEVT_RIGHT_UP" wx_expEVT_RIGHT_UP :: IO CInt

-- | usage: (@wxEVT_SASH_DRAGGED@).
{-# NOINLINE wxEVT_SASH_DRAGGED #-}
wxEVT_SASH_DRAGGED ::  EventId
wxEVT_SASH_DRAGGED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_SASH_DRAGGED 
foreign import ccall "expEVT_SASH_DRAGGED" wx_expEVT_SASH_DRAGGED :: IO CInt

-- | usage: (@wxEVT_SCROLLWIN_BOTTOM@).
{-# NOINLINE wxEVT_SCROLLWIN_BOTTOM #-}
wxEVT_SCROLLWIN_BOTTOM ::  EventId
wxEVT_SCROLLWIN_BOTTOM 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_SCROLLWIN_BOTTOM 
foreign import ccall "expEVT_SCROLLWIN_BOTTOM" wx_expEVT_SCROLLWIN_BOTTOM :: IO CInt

-- | usage: (@wxEVT_SCROLLWIN_LINEDOWN@).
{-# NOINLINE wxEVT_SCROLLWIN_LINEDOWN #-}
wxEVT_SCROLLWIN_LINEDOWN ::  EventId
wxEVT_SCROLLWIN_LINEDOWN 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_SCROLLWIN_LINEDOWN 
foreign import ccall "expEVT_SCROLLWIN_LINEDOWN" wx_expEVT_SCROLLWIN_LINEDOWN :: IO CInt

-- | usage: (@wxEVT_SCROLLWIN_LINEUP@).
{-# NOINLINE wxEVT_SCROLLWIN_LINEUP #-}
wxEVT_SCROLLWIN_LINEUP ::  EventId
wxEVT_SCROLLWIN_LINEUP 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_SCROLLWIN_LINEUP 
foreign import ccall "expEVT_SCROLLWIN_LINEUP" wx_expEVT_SCROLLWIN_LINEUP :: IO CInt

-- | usage: (@wxEVT_SCROLLWIN_PAGEDOWN@).
{-# NOINLINE wxEVT_SCROLLWIN_PAGEDOWN #-}
wxEVT_SCROLLWIN_PAGEDOWN ::  EventId
wxEVT_SCROLLWIN_PAGEDOWN 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_SCROLLWIN_PAGEDOWN 
foreign import ccall "expEVT_SCROLLWIN_PAGEDOWN" wx_expEVT_SCROLLWIN_PAGEDOWN :: IO CInt

-- | usage: (@wxEVT_SCROLLWIN_PAGEUP@).
{-# NOINLINE wxEVT_SCROLLWIN_PAGEUP #-}
wxEVT_SCROLLWIN_PAGEUP ::  EventId
wxEVT_SCROLLWIN_PAGEUP 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_SCROLLWIN_PAGEUP 
foreign import ccall "expEVT_SCROLLWIN_PAGEUP" wx_expEVT_SCROLLWIN_PAGEUP :: IO CInt

-- | usage: (@wxEVT_SCROLLWIN_THUMBRELEASE@).
{-# NOINLINE wxEVT_SCROLLWIN_THUMBRELEASE #-}
wxEVT_SCROLLWIN_THUMBRELEASE ::  EventId
wxEVT_SCROLLWIN_THUMBRELEASE 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_SCROLLWIN_THUMBRELEASE 
foreign import ccall "expEVT_SCROLLWIN_THUMBRELEASE" wx_expEVT_SCROLLWIN_THUMBRELEASE :: IO CInt

-- | usage: (@wxEVT_SCROLLWIN_THUMBTRACK@).
{-# NOINLINE wxEVT_SCROLLWIN_THUMBTRACK #-}
wxEVT_SCROLLWIN_THUMBTRACK ::  EventId
wxEVT_SCROLLWIN_THUMBTRACK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_SCROLLWIN_THUMBTRACK 
foreign import ccall "expEVT_SCROLLWIN_THUMBTRACK" wx_expEVT_SCROLLWIN_THUMBTRACK :: IO CInt

-- | usage: (@wxEVT_SCROLLWIN_TOP@).
{-# NOINLINE wxEVT_SCROLLWIN_TOP #-}
wxEVT_SCROLLWIN_TOP ::  EventId
wxEVT_SCROLLWIN_TOP 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_SCROLLWIN_TOP 
foreign import ccall "expEVT_SCROLLWIN_TOP" wx_expEVT_SCROLLWIN_TOP :: IO CInt

-- | usage: (@wxEVT_SCROLL_BOTTOM@).
{-# NOINLINE wxEVT_SCROLL_BOTTOM #-}
wxEVT_SCROLL_BOTTOM ::  EventId
wxEVT_SCROLL_BOTTOM 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_SCROLL_BOTTOM 
foreign import ccall "expEVT_SCROLL_BOTTOM" wx_expEVT_SCROLL_BOTTOM :: IO CInt

-- | usage: (@wxEVT_SCROLL_CHANGED@).
{-# NOINLINE wxEVT_SCROLL_CHANGED #-}
wxEVT_SCROLL_CHANGED ::  EventId
wxEVT_SCROLL_CHANGED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_SCROLL_CHANGED 
foreign import ccall "expEVT_SCROLL_CHANGED" wx_expEVT_SCROLL_CHANGED :: IO CInt

-- | usage: (@wxEVT_SCROLL_LINEDOWN@).
{-# NOINLINE wxEVT_SCROLL_LINEDOWN #-}
wxEVT_SCROLL_LINEDOWN ::  EventId
wxEVT_SCROLL_LINEDOWN 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_SCROLL_LINEDOWN 
foreign import ccall "expEVT_SCROLL_LINEDOWN" wx_expEVT_SCROLL_LINEDOWN :: IO CInt

-- | usage: (@wxEVT_SCROLL_LINEUP@).
{-# NOINLINE wxEVT_SCROLL_LINEUP #-}
wxEVT_SCROLL_LINEUP ::  EventId
wxEVT_SCROLL_LINEUP 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_SCROLL_LINEUP 
foreign import ccall "expEVT_SCROLL_LINEUP" wx_expEVT_SCROLL_LINEUP :: IO CInt

-- | usage: (@wxEVT_SCROLL_PAGEDOWN@).
{-# NOINLINE wxEVT_SCROLL_PAGEDOWN #-}
wxEVT_SCROLL_PAGEDOWN ::  EventId
wxEVT_SCROLL_PAGEDOWN 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_SCROLL_PAGEDOWN 
foreign import ccall "expEVT_SCROLL_PAGEDOWN" wx_expEVT_SCROLL_PAGEDOWN :: IO CInt

-- | usage: (@wxEVT_SCROLL_PAGEUP@).
{-# NOINLINE wxEVT_SCROLL_PAGEUP #-}
wxEVT_SCROLL_PAGEUP ::  EventId
wxEVT_SCROLL_PAGEUP 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_SCROLL_PAGEUP 
foreign import ccall "expEVT_SCROLL_PAGEUP" wx_expEVT_SCROLL_PAGEUP :: IO CInt

-- | usage: (@wxEVT_SCROLL_THUMBRELEASE@).
{-# NOINLINE wxEVT_SCROLL_THUMBRELEASE #-}
wxEVT_SCROLL_THUMBRELEASE ::  EventId
wxEVT_SCROLL_THUMBRELEASE 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_SCROLL_THUMBRELEASE 
foreign import ccall "expEVT_SCROLL_THUMBRELEASE" wx_expEVT_SCROLL_THUMBRELEASE :: IO CInt

-- | usage: (@wxEVT_SCROLL_THUMBTRACK@).
{-# NOINLINE wxEVT_SCROLL_THUMBTRACK #-}
wxEVT_SCROLL_THUMBTRACK ::  EventId
wxEVT_SCROLL_THUMBTRACK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_SCROLL_THUMBTRACK 
foreign import ccall "expEVT_SCROLL_THUMBTRACK" wx_expEVT_SCROLL_THUMBTRACK :: IO CInt

-- | usage: (@wxEVT_SCROLL_TOP@).
{-# NOINLINE wxEVT_SCROLL_TOP #-}
wxEVT_SCROLL_TOP ::  EventId
wxEVT_SCROLL_TOP 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_SCROLL_TOP 
foreign import ccall "expEVT_SCROLL_TOP" wx_expEVT_SCROLL_TOP :: IO CInt

-- | usage: (@wxEVT_SET_CURSOR@).
{-# NOINLINE wxEVT_SET_CURSOR #-}
wxEVT_SET_CURSOR ::  EventId
wxEVT_SET_CURSOR 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_SET_CURSOR 
foreign import ccall "expEVT_SET_CURSOR" wx_expEVT_SET_CURSOR :: IO CInt

-- | usage: (@wxEVT_SET_FOCUS@).
{-# NOINLINE wxEVT_SET_FOCUS #-}
wxEVT_SET_FOCUS ::  EventId
wxEVT_SET_FOCUS 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_SET_FOCUS 
foreign import ccall "expEVT_SET_FOCUS" wx_expEVT_SET_FOCUS :: IO CInt

-- | usage: (@wxEVT_SHOW@).
{-# NOINLINE wxEVT_SHOW #-}
wxEVT_SHOW ::  EventId
wxEVT_SHOW 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_SHOW 
foreign import ccall "expEVT_SHOW" wx_expEVT_SHOW :: IO CInt

-- | usage: (@wxEVT_SIZE@).
{-# NOINLINE wxEVT_SIZE #-}
wxEVT_SIZE ::  EventId
wxEVT_SIZE 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_SIZE 
foreign import ccall "expEVT_SIZE" wx_expEVT_SIZE :: IO CInt

-- | usage: (@wxEVT_SIZING@).
{-# NOINLINE wxEVT_SIZING #-}
wxEVT_SIZING ::  EventId
wxEVT_SIZING 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_SIZING 
foreign import ccall "expEVT_SIZING" wx_expEVT_SIZING :: IO CInt

-- | usage: (@wxEVT_SOCKET@).
{-# NOINLINE wxEVT_SOCKET #-}
wxEVT_SOCKET ::  EventId
wxEVT_SOCKET 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_SOCKET 
foreign import ccall "expEVT_SOCKET" wx_expEVT_SOCKET :: IO CInt

-- | usage: (@wxEVT_SORT@).
{-# NOINLINE wxEVT_SORT #-}
wxEVT_SORT ::  EventId
wxEVT_SORT 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_SORT 
foreign import ccall "expEVT_SORT" wx_expEVT_SORT :: IO CInt

-- | usage: (@wxEVT_SPIN@).
{-# NOINLINE wxEVT_SPIN #-}
wxEVT_SPIN ::  EventId
wxEVT_SPIN 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_SPIN 
foreign import ccall "expEVT_SPIN" wx_expEVT_SPIN :: IO CInt

-- | usage: (@wxEVT_SPIN_DOWN@).
{-# NOINLINE wxEVT_SPIN_DOWN #-}
wxEVT_SPIN_DOWN ::  EventId
wxEVT_SPIN_DOWN 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_SPIN_DOWN 
foreign import ccall "expEVT_SPIN_DOWN" wx_expEVT_SPIN_DOWN :: IO CInt

-- | usage: (@wxEVT_SPIN_UP@).
{-# NOINLINE wxEVT_SPIN_UP #-}
wxEVT_SPIN_UP ::  EventId
wxEVT_SPIN_UP 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_SPIN_UP 
foreign import ccall "expEVT_SPIN_UP" wx_expEVT_SPIN_UP :: IO CInt

-- | usage: (@wxEVT_STC_AUTOCOMP_SELECTION@).
{-# NOINLINE wxEVT_STC_AUTOCOMP_SELECTION #-}
wxEVT_STC_AUTOCOMP_SELECTION ::  EventId
wxEVT_STC_AUTOCOMP_SELECTION 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_STC_AUTOCOMP_SELECTION 
foreign import ccall "expEVT_STC_AUTOCOMP_SELECTION" wx_expEVT_STC_AUTOCOMP_SELECTION :: IO CInt

-- | usage: (@wxEVT_STC_CALLTIP_CLICK@).
{-# NOINLINE wxEVT_STC_CALLTIP_CLICK #-}
wxEVT_STC_CALLTIP_CLICK ::  EventId
wxEVT_STC_CALLTIP_CLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_STC_CALLTIP_CLICK 
foreign import ccall "expEVT_STC_CALLTIP_CLICK" wx_expEVT_STC_CALLTIP_CLICK :: IO CInt

-- | usage: (@wxEVT_STC_CHANGE@).
{-# NOINLINE wxEVT_STC_CHANGE #-}
wxEVT_STC_CHANGE ::  EventId
wxEVT_STC_CHANGE 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_STC_CHANGE 
foreign import ccall "expEVT_STC_CHANGE" wx_expEVT_STC_CHANGE :: IO CInt

-- | usage: (@wxEVT_STC_CHARADDED@).
{-# NOINLINE wxEVT_STC_CHARADDED #-}
wxEVT_STC_CHARADDED ::  EventId
wxEVT_STC_CHARADDED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_STC_CHARADDED 
foreign import ccall "expEVT_STC_CHARADDED" wx_expEVT_STC_CHARADDED :: IO CInt

-- | usage: (@wxEVT_STC_DOUBLECLICK@).
{-# NOINLINE wxEVT_STC_DOUBLECLICK #-}
wxEVT_STC_DOUBLECLICK ::  EventId
wxEVT_STC_DOUBLECLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_STC_DOUBLECLICK 
foreign import ccall "expEVT_STC_DOUBLECLICK" wx_expEVT_STC_DOUBLECLICK :: IO CInt

-- | usage: (@wxEVT_STC_DO_DROP@).
{-# NOINLINE wxEVT_STC_DO_DROP #-}
wxEVT_STC_DO_DROP ::  EventId
wxEVT_STC_DO_DROP 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_STC_DO_DROP 
foreign import ccall "expEVT_STC_DO_DROP" wx_expEVT_STC_DO_DROP :: IO CInt

-- | usage: (@wxEVT_STC_DRAG_OVER@).
{-# NOINLINE wxEVT_STC_DRAG_OVER #-}
wxEVT_STC_DRAG_OVER ::  EventId
wxEVT_STC_DRAG_OVER 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_STC_DRAG_OVER 
foreign import ccall "expEVT_STC_DRAG_OVER" wx_expEVT_STC_DRAG_OVER :: IO CInt

-- | usage: (@wxEVT_STC_DWELLEND@).
{-# NOINLINE wxEVT_STC_DWELLEND #-}
wxEVT_STC_DWELLEND ::  EventId
wxEVT_STC_DWELLEND 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_STC_DWELLEND 
foreign import ccall "expEVT_STC_DWELLEND" wx_expEVT_STC_DWELLEND :: IO CInt

-- | usage: (@wxEVT_STC_DWELLSTART@).
{-# NOINLINE wxEVT_STC_DWELLSTART #-}
wxEVT_STC_DWELLSTART ::  EventId
wxEVT_STC_DWELLSTART 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_STC_DWELLSTART 
foreign import ccall "expEVT_STC_DWELLSTART" wx_expEVT_STC_DWELLSTART :: IO CInt

-- | usage: (@wxEVT_STC_HOTSPOT_CLICK@).
{-# NOINLINE wxEVT_STC_HOTSPOT_CLICK #-}
wxEVT_STC_HOTSPOT_CLICK ::  EventId
wxEVT_STC_HOTSPOT_CLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_STC_HOTSPOT_CLICK 
foreign import ccall "expEVT_STC_HOTSPOT_CLICK" wx_expEVT_STC_HOTSPOT_CLICK :: IO CInt

-- | usage: (@wxEVT_STC_HOTSPOT_DCLICK@).
{-# NOINLINE wxEVT_STC_HOTSPOT_DCLICK #-}
wxEVT_STC_HOTSPOT_DCLICK ::  EventId
wxEVT_STC_HOTSPOT_DCLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_STC_HOTSPOT_DCLICK 
foreign import ccall "expEVT_STC_HOTSPOT_DCLICK" wx_expEVT_STC_HOTSPOT_DCLICK :: IO CInt

-- | usage: (@wxEVT_STC_KEY@).
{-# NOINLINE wxEVT_STC_KEY #-}
wxEVT_STC_KEY ::  EventId
wxEVT_STC_KEY 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_STC_KEY 
foreign import ccall "expEVT_STC_KEY" wx_expEVT_STC_KEY :: IO CInt

-- | usage: (@wxEVT_STC_MACRORECORD@).
{-# NOINLINE wxEVT_STC_MACRORECORD #-}
wxEVT_STC_MACRORECORD ::  EventId
wxEVT_STC_MACRORECORD 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_STC_MACRORECORD 
foreign import ccall "expEVT_STC_MACRORECORD" wx_expEVT_STC_MACRORECORD :: IO CInt

-- | usage: (@wxEVT_STC_MARGINCLICK@).
{-# NOINLINE wxEVT_STC_MARGINCLICK #-}
wxEVT_STC_MARGINCLICK ::  EventId
wxEVT_STC_MARGINCLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_STC_MARGINCLICK 
foreign import ccall "expEVT_STC_MARGINCLICK" wx_expEVT_STC_MARGINCLICK :: IO CInt

-- | usage: (@wxEVT_STC_MODIFIED@).
{-# NOINLINE wxEVT_STC_MODIFIED #-}
wxEVT_STC_MODIFIED ::  EventId
wxEVT_STC_MODIFIED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_STC_MODIFIED 
foreign import ccall "expEVT_STC_MODIFIED" wx_expEVT_STC_MODIFIED :: IO CInt

-- | usage: (@wxEVT_STC_NEEDSHOWN@).
{-# NOINLINE wxEVT_STC_NEEDSHOWN #-}
wxEVT_STC_NEEDSHOWN ::  EventId
wxEVT_STC_NEEDSHOWN 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_STC_NEEDSHOWN 
foreign import ccall "expEVT_STC_NEEDSHOWN" wx_expEVT_STC_NEEDSHOWN :: IO CInt

-- | usage: (@wxEVT_STC_PAINTED@).
{-# NOINLINE wxEVT_STC_PAINTED #-}
wxEVT_STC_PAINTED ::  EventId
wxEVT_STC_PAINTED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_STC_PAINTED 
foreign import ccall "expEVT_STC_PAINTED" wx_expEVT_STC_PAINTED :: IO CInt

-- | usage: (@wxEVT_STC_ROMODIFYATTEMPT@).
{-# NOINLINE wxEVT_STC_ROMODIFYATTEMPT #-}
wxEVT_STC_ROMODIFYATTEMPT ::  EventId
wxEVT_STC_ROMODIFYATTEMPT 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_STC_ROMODIFYATTEMPT 
foreign import ccall "expEVT_STC_ROMODIFYATTEMPT" wx_expEVT_STC_ROMODIFYATTEMPT :: IO CInt

-- | usage: (@wxEVT_STC_SAVEPOINTLEFT@).
{-# NOINLINE wxEVT_STC_SAVEPOINTLEFT #-}
wxEVT_STC_SAVEPOINTLEFT ::  EventId
wxEVT_STC_SAVEPOINTLEFT 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_STC_SAVEPOINTLEFT 
foreign import ccall "expEVT_STC_SAVEPOINTLEFT" wx_expEVT_STC_SAVEPOINTLEFT :: IO CInt

-- | usage: (@wxEVT_STC_SAVEPOINTREACHED@).
{-# NOINLINE wxEVT_STC_SAVEPOINTREACHED #-}
wxEVT_STC_SAVEPOINTREACHED ::  EventId
wxEVT_STC_SAVEPOINTREACHED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_STC_SAVEPOINTREACHED 
foreign import ccall "expEVT_STC_SAVEPOINTREACHED" wx_expEVT_STC_SAVEPOINTREACHED :: IO CInt

-- | usage: (@wxEVT_STC_START_DRAG@).
{-# NOINLINE wxEVT_STC_START_DRAG #-}
wxEVT_STC_START_DRAG ::  EventId
wxEVT_STC_START_DRAG 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_STC_START_DRAG 
foreign import ccall "expEVT_STC_START_DRAG" wx_expEVT_STC_START_DRAG :: IO CInt

-- | usage: (@wxEVT_STC_STYLENEEDED@).
{-# NOINLINE wxEVT_STC_STYLENEEDED #-}
wxEVT_STC_STYLENEEDED ::  EventId
wxEVT_STC_STYLENEEDED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_STC_STYLENEEDED 
foreign import ccall "expEVT_STC_STYLENEEDED" wx_expEVT_STC_STYLENEEDED :: IO CInt

-- | usage: (@wxEVT_STC_UPDATEUI@).
{-# NOINLINE wxEVT_STC_UPDATEUI #-}
wxEVT_STC_UPDATEUI ::  EventId
wxEVT_STC_UPDATEUI 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_STC_UPDATEUI 
foreign import ccall "expEVT_STC_UPDATEUI" wx_expEVT_STC_UPDATEUI :: IO CInt

-- | usage: (@wxEVT_STC_URIDROPPED@).
{-# NOINLINE wxEVT_STC_URIDROPPED #-}
wxEVT_STC_URIDROPPED ::  EventId
wxEVT_STC_URIDROPPED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_STC_URIDROPPED 
foreign import ccall "expEVT_STC_URIDROPPED" wx_expEVT_STC_URIDROPPED :: IO CInt

-- | usage: (@wxEVT_STC_USERLISTSELECTION@).
{-# NOINLINE wxEVT_STC_USERLISTSELECTION #-}
wxEVT_STC_USERLISTSELECTION ::  EventId
wxEVT_STC_USERLISTSELECTION 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_STC_USERLISTSELECTION 
foreign import ccall "expEVT_STC_USERLISTSELECTION" wx_expEVT_STC_USERLISTSELECTION :: IO CInt

-- | usage: (@wxEVT_STC_ZOOM@).
{-# NOINLINE wxEVT_STC_ZOOM #-}
wxEVT_STC_ZOOM ::  EventId
wxEVT_STC_ZOOM 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_STC_ZOOM 
foreign import ccall "expEVT_STC_ZOOM" wx_expEVT_STC_ZOOM :: IO CInt

-- | usage: (@wxEVT_SYS_COLOUR_CHANGED@).
{-# NOINLINE wxEVT_SYS_COLOUR_CHANGED #-}
wxEVT_SYS_COLOUR_CHANGED ::  EventId
wxEVT_SYS_COLOUR_CHANGED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_SYS_COLOUR_CHANGED 
foreign import ccall "expEVT_SYS_COLOUR_CHANGED" wx_expEVT_SYS_COLOUR_CHANGED :: IO CInt

-- | usage: (@wxEVT_TASKBAR_BALLOON_CLICK@).
{-# NOINLINE wxEVT_TASKBAR_BALLOON_CLICK #-}
wxEVT_TASKBAR_BALLOON_CLICK ::  EventId
wxEVT_TASKBAR_BALLOON_CLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_TASKBAR_BALLOON_CLICK 
foreign import ccall "expEVT_TASKBAR_BALLOON_CLICK" wx_expEVT_TASKBAR_BALLOON_CLICK :: IO CInt

-- | usage: (@wxEVT_TASKBAR_BALLOON_TIMEOUT@).
{-# NOINLINE wxEVT_TASKBAR_BALLOON_TIMEOUT #-}
wxEVT_TASKBAR_BALLOON_TIMEOUT ::  EventId
wxEVT_TASKBAR_BALLOON_TIMEOUT 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_TASKBAR_BALLOON_TIMEOUT 
foreign import ccall "expEVT_TASKBAR_BALLOON_TIMEOUT" wx_expEVT_TASKBAR_BALLOON_TIMEOUT :: IO CInt

-- | usage: (@wxEVT_TASKBAR_LEFT_DCLICK@).
{-# NOINLINE wxEVT_TASKBAR_LEFT_DCLICK #-}
wxEVT_TASKBAR_LEFT_DCLICK ::  EventId
wxEVT_TASKBAR_LEFT_DCLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_TASKBAR_LEFT_DCLICK 
foreign import ccall "expEVT_TASKBAR_LEFT_DCLICK" wx_expEVT_TASKBAR_LEFT_DCLICK :: IO CInt

-- | usage: (@wxEVT_TASKBAR_LEFT_DOWN@).
{-# NOINLINE wxEVT_TASKBAR_LEFT_DOWN #-}
wxEVT_TASKBAR_LEFT_DOWN ::  EventId
wxEVT_TASKBAR_LEFT_DOWN 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_TASKBAR_LEFT_DOWN 
foreign import ccall "expEVT_TASKBAR_LEFT_DOWN" wx_expEVT_TASKBAR_LEFT_DOWN :: IO CInt

-- | usage: (@wxEVT_TASKBAR_LEFT_UP@).
{-# NOINLINE wxEVT_TASKBAR_LEFT_UP #-}
wxEVT_TASKBAR_LEFT_UP ::  EventId
wxEVT_TASKBAR_LEFT_UP 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_TASKBAR_LEFT_UP 
foreign import ccall "expEVT_TASKBAR_LEFT_UP" wx_expEVT_TASKBAR_LEFT_UP :: IO CInt

-- | usage: (@wxEVT_TASKBAR_MOVE@).
{-# NOINLINE wxEVT_TASKBAR_MOVE #-}
wxEVT_TASKBAR_MOVE ::  EventId
wxEVT_TASKBAR_MOVE 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_TASKBAR_MOVE 
foreign import ccall "expEVT_TASKBAR_MOVE" wx_expEVT_TASKBAR_MOVE :: IO CInt

-- | usage: (@wxEVT_TASKBAR_RIGHT_DCLICK@).
{-# NOINLINE wxEVT_TASKBAR_RIGHT_DCLICK #-}
wxEVT_TASKBAR_RIGHT_DCLICK ::  EventId
wxEVT_TASKBAR_RIGHT_DCLICK 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_TASKBAR_RIGHT_DCLICK 
foreign import ccall "expEVT_TASKBAR_RIGHT_DCLICK" wx_expEVT_TASKBAR_RIGHT_DCLICK :: IO CInt

-- | usage: (@wxEVT_TASKBAR_RIGHT_DOWN@).
{-# NOINLINE wxEVT_TASKBAR_RIGHT_DOWN #-}
wxEVT_TASKBAR_RIGHT_DOWN ::  EventId
wxEVT_TASKBAR_RIGHT_DOWN 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_TASKBAR_RIGHT_DOWN 
foreign import ccall "expEVT_TASKBAR_RIGHT_DOWN" wx_expEVT_TASKBAR_RIGHT_DOWN :: IO CInt

-- | usage: (@wxEVT_TASKBAR_RIGHT_UP@).
{-# NOINLINE wxEVT_TASKBAR_RIGHT_UP #-}
wxEVT_TASKBAR_RIGHT_UP ::  EventId
wxEVT_TASKBAR_RIGHT_UP 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_TASKBAR_RIGHT_UP 
foreign import ccall "expEVT_TASKBAR_RIGHT_UP" wx_expEVT_TASKBAR_RIGHT_UP :: IO CInt

-- | usage: (@wxEVT_TIMER@).
{-# NOINLINE wxEVT_TIMER #-}
wxEVT_TIMER ::  EventId
wxEVT_TIMER 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_TIMER 
foreign import ccall "expEVT_TIMER" wx_expEVT_TIMER :: IO CInt

-- | usage: (@wxEVT_UPDATE_UI@).
{-# NOINLINE wxEVT_UPDATE_UI #-}
wxEVT_UPDATE_UI ::  EventId
wxEVT_UPDATE_UI 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_UPDATE_UI 
foreign import ccall "expEVT_UPDATE_UI" wx_expEVT_UPDATE_UI :: IO CInt

-- | usage: (@wxEVT_WINDOW_MODAL_DIALOG_CLOSED@).
{-# NOINLINE wxEVT_WINDOW_MODAL_DIALOG_CLOSED #-}
wxEVT_WINDOW_MODAL_DIALOG_CLOSED ::  EventId
wxEVT_WINDOW_MODAL_DIALOG_CLOSED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_WINDOW_MODAL_DIALOG_CLOSED 
foreign import ccall "expEVT_WINDOW_MODAL_DIALOG_CLOSED" wx_expEVT_WINDOW_MODAL_DIALOG_CLOSED :: IO CInt

-- | usage: (@wxEVT_WIZARD_CANCEL@).
{-# NOINLINE wxEVT_WIZARD_CANCEL #-}
wxEVT_WIZARD_CANCEL ::  EventId
wxEVT_WIZARD_CANCEL 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_WIZARD_CANCEL 
foreign import ccall "expEVT_WIZARD_CANCEL" wx_expEVT_WIZARD_CANCEL :: IO CInt

-- | usage: (@wxEVT_WIZARD_FINISHED@).
{-# NOINLINE wxEVT_WIZARD_FINISHED #-}
wxEVT_WIZARD_FINISHED ::  EventId
wxEVT_WIZARD_FINISHED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_WIZARD_FINISHED 
foreign import ccall "expEVT_WIZARD_FINISHED" wx_expEVT_WIZARD_FINISHED :: IO CInt

-- | usage: (@wxEVT_WIZARD_HELP@).
{-# NOINLINE wxEVT_WIZARD_HELP #-}
wxEVT_WIZARD_HELP ::  EventId
wxEVT_WIZARD_HELP 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_WIZARD_HELP 
foreign import ccall "expEVT_WIZARD_HELP" wx_expEVT_WIZARD_HELP :: IO CInt

-- | usage: (@wxEVT_WIZARD_PAGE_CHANGED@).
{-# NOINLINE wxEVT_WIZARD_PAGE_CHANGED #-}
wxEVT_WIZARD_PAGE_CHANGED ::  EventId
wxEVT_WIZARD_PAGE_CHANGED 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_WIZARD_PAGE_CHANGED 
foreign import ccall "expEVT_WIZARD_PAGE_CHANGED" wx_expEVT_WIZARD_PAGE_CHANGED :: IO CInt

-- | usage: (@wxEVT_WIZARD_PAGE_CHANGING@).
{-# NOINLINE wxEVT_WIZARD_PAGE_CHANGING #-}
wxEVT_WIZARD_PAGE_CHANGING ::  EventId
wxEVT_WIZARD_PAGE_CHANGING 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_WIZARD_PAGE_CHANGING 
foreign import ccall "expEVT_WIZARD_PAGE_CHANGING" wx_expEVT_WIZARD_PAGE_CHANGING :: IO CInt

-- | usage: (@wxEVT_WIZARD_PAGE_SHOWN@).
{-# NOINLINE wxEVT_WIZARD_PAGE_SHOWN #-}
wxEVT_WIZARD_PAGE_SHOWN ::  EventId
wxEVT_WIZARD_PAGE_SHOWN 
  = unsafePerformIO $
    withIntResult $
    wx_expEVT_WIZARD_PAGE_SHOWN 
foreign import ccall "expEVT_WIZARD_PAGE_SHOWN" wx_expEVT_WIZARD_PAGE_SHOWN :: IO CInt

-- | usage: (@wxK_ADD@).
{-# NOINLINE wxK_ADD #-}
wxK_ADD ::  Int
wxK_ADD 
  = unsafePerformIO $
    withIntResult $
    wx_expK_ADD 
foreign import ccall "expK_ADD" wx_expK_ADD :: IO CInt

-- | usage: (@wxK_ALT@).
{-# NOINLINE wxK_ALT #-}
wxK_ALT ::  Int
wxK_ALT 
  = unsafePerformIO $
    withIntResult $
    wx_expK_ALT 
foreign import ccall "expK_ALT" wx_expK_ALT :: IO CInt

-- | usage: (@wxK_BACK@).
{-# NOINLINE wxK_BACK #-}
wxK_BACK ::  Int
wxK_BACK 
  = unsafePerformIO $
    withIntResult $
    wx_expK_BACK 
foreign import ccall "expK_BACK" wx_expK_BACK :: IO CInt

-- | usage: (@wxK_CANCEL@).
{-# NOINLINE wxK_CANCEL #-}
wxK_CANCEL ::  Int
wxK_CANCEL 
  = unsafePerformIO $
    withIntResult $
    wx_expK_CANCEL 
foreign import ccall "expK_CANCEL" wx_expK_CANCEL :: IO CInt

-- | usage: (@wxK_CAPITAL@).
{-# NOINLINE wxK_CAPITAL #-}
wxK_CAPITAL ::  Int
wxK_CAPITAL 
  = unsafePerformIO $
    withIntResult $
    wx_expK_CAPITAL 
foreign import ccall "expK_CAPITAL" wx_expK_CAPITAL :: IO CInt

-- | usage: (@wxK_CLEAR@).
{-# NOINLINE wxK_CLEAR #-}
wxK_CLEAR ::  Int
wxK_CLEAR 
  = unsafePerformIO $
    withIntResult $
    wx_expK_CLEAR 
foreign import ccall "expK_CLEAR" wx_expK_CLEAR :: IO CInt

-- | usage: (@wxK_CONTROL@).
{-# NOINLINE wxK_CONTROL #-}
wxK_CONTROL ::  Int
wxK_CONTROL 
  = unsafePerformIO $
    withIntResult $
    wx_expK_CONTROL 
foreign import ccall "expK_CONTROL" wx_expK_CONTROL :: IO CInt

-- | usage: (@wxK_DECIMAL@).
{-# NOINLINE wxK_DECIMAL #-}
wxK_DECIMAL ::  Int
wxK_DECIMAL 
  = unsafePerformIO $
    withIntResult $
    wx_expK_DECIMAL 
foreign import ccall "expK_DECIMAL" wx_expK_DECIMAL :: IO CInt

-- | usage: (@wxK_DELETE@).
{-# NOINLINE wxK_DELETE #-}
wxK_DELETE ::  Int
wxK_DELETE 
  = unsafePerformIO $
    withIntResult $
    wx_expK_DELETE 
foreign import ccall "expK_DELETE" wx_expK_DELETE :: IO CInt

-- | usage: (@wxK_DIVIDE@).
{-# NOINLINE wxK_DIVIDE #-}
wxK_DIVIDE ::  Int
wxK_DIVIDE 
  = unsafePerformIO $
    withIntResult $
    wx_expK_DIVIDE 
foreign import ccall "expK_DIVIDE" wx_expK_DIVIDE :: IO CInt

-- | usage: (@wxK_DOWN@).
{-# NOINLINE wxK_DOWN #-}
wxK_DOWN ::  Int
wxK_DOWN 
  = unsafePerformIO $
    withIntResult $
    wx_expK_DOWN 
foreign import ccall "expK_DOWN" wx_expK_DOWN :: IO CInt

-- | usage: (@wxK_END@).
{-# NOINLINE wxK_END #-}
wxK_END ::  Int
wxK_END 
  = unsafePerformIO $
    withIntResult $
    wx_expK_END 
foreign import ccall "expK_END" wx_expK_END :: IO CInt

-- | usage: (@wxK_ESCAPE@).
{-# NOINLINE wxK_ESCAPE #-}
wxK_ESCAPE ::  Int
wxK_ESCAPE 
  = unsafePerformIO $
    withIntResult $
    wx_expK_ESCAPE 
foreign import ccall "expK_ESCAPE" wx_expK_ESCAPE :: IO CInt

-- | usage: (@wxK_EXECUTE@).
{-# NOINLINE wxK_EXECUTE #-}
wxK_EXECUTE ::  Int
wxK_EXECUTE 
  = unsafePerformIO $
    withIntResult $
    wx_expK_EXECUTE 
foreign import ccall "expK_EXECUTE" wx_expK_EXECUTE :: IO CInt

-- | usage: (@wxK_F1@).
{-# NOINLINE wxK_F1 #-}
wxK_F1 ::  Int
wxK_F1 
  = unsafePerformIO $
    withIntResult $
    wx_expK_F1 
foreign import ccall "expK_F1" wx_expK_F1 :: IO CInt

-- | usage: (@wxK_F10@).
{-# NOINLINE wxK_F10 #-}
wxK_F10 ::  Int
wxK_F10 
  = unsafePerformIO $
    withIntResult $
    wx_expK_F10 
foreign import ccall "expK_F10" wx_expK_F10 :: IO CInt

-- | usage: (@wxK_F11@).
{-# NOINLINE wxK_F11 #-}
wxK_F11 ::  Int
wxK_F11 
  = unsafePerformIO $
    withIntResult $
    wx_expK_F11 
foreign import ccall "expK_F11" wx_expK_F11 :: IO CInt

-- | usage: (@wxK_F12@).
{-# NOINLINE wxK_F12 #-}
wxK_F12 ::  Int
wxK_F12 
  = unsafePerformIO $
    withIntResult $
    wx_expK_F12 
foreign import ccall "expK_F12" wx_expK_F12 :: IO CInt

-- | usage: (@wxK_F13@).
{-# NOINLINE wxK_F13 #-}
wxK_F13 ::  Int
wxK_F13 
  = unsafePerformIO $
    withIntResult $
    wx_expK_F13 
foreign import ccall "expK_F13" wx_expK_F13 :: IO CInt

-- | usage: (@wxK_F14@).
{-# NOINLINE wxK_F14 #-}
wxK_F14 ::  Int
wxK_F14 
  = unsafePerformIO $
    withIntResult $
    wx_expK_F14 
foreign import ccall "expK_F14" wx_expK_F14 :: IO CInt

-- | usage: (@wxK_F15@).
{-# NOINLINE wxK_F15 #-}
wxK_F15 ::  Int
wxK_F15 
  = unsafePerformIO $
    withIntResult $
    wx_expK_F15 
foreign import ccall "expK_F15" wx_expK_F15 :: IO CInt

-- | usage: (@wxK_F16@).
{-# NOINLINE wxK_F16 #-}
wxK_F16 ::  Int
wxK_F16 
  = unsafePerformIO $
    withIntResult $
    wx_expK_F16 
foreign import ccall "expK_F16" wx_expK_F16 :: IO CInt

-- | usage: (@wxK_F17@).
{-# NOINLINE wxK_F17 #-}
wxK_F17 ::  Int
wxK_F17 
  = unsafePerformIO $
    withIntResult $
    wx_expK_F17 
foreign import ccall "expK_F17" wx_expK_F17 :: IO CInt

-- | usage: (@wxK_F18@).
{-# NOINLINE wxK_F18 #-}
wxK_F18 ::  Int
wxK_F18 
  = unsafePerformIO $
    withIntResult $
    wx_expK_F18 
foreign import ccall "expK_F18" wx_expK_F18 :: IO CInt

-- | usage: (@wxK_F19@).
{-# NOINLINE wxK_F19 #-}
wxK_F19 ::  Int
wxK_F19 
  = unsafePerformIO $
    withIntResult $
    wx_expK_F19 
foreign import ccall "expK_F19" wx_expK_F19 :: IO CInt

-- | usage: (@wxK_F2@).
{-# NOINLINE wxK_F2 #-}
wxK_F2 ::  Int
wxK_F2 
  = unsafePerformIO $
    withIntResult $
    wx_expK_F2 
foreign import ccall "expK_F2" wx_expK_F2 :: IO CInt

-- | usage: (@wxK_F20@).
{-# NOINLINE wxK_F20 #-}
wxK_F20 ::  Int
wxK_F20 
  = unsafePerformIO $
    withIntResult $
    wx_expK_F20 
foreign import ccall "expK_F20" wx_expK_F20 :: IO CInt

-- | usage: (@wxK_F21@).
{-# NOINLINE wxK_F21 #-}
wxK_F21 ::  Int
wxK_F21 
  = unsafePerformIO $
    withIntResult $
    wx_expK_F21 
foreign import ccall "expK_F21" wx_expK_F21 :: IO CInt

-- | usage: (@wxK_F22@).
{-# NOINLINE wxK_F22 #-}
wxK_F22 ::  Int
wxK_F22 
  = unsafePerformIO $
    withIntResult $
    wx_expK_F22 
foreign import ccall "expK_F22" wx_expK_F22 :: IO CInt

-- | usage: (@wxK_F23@).
{-# NOINLINE wxK_F23 #-}
wxK_F23 ::  Int
wxK_F23 
  = unsafePerformIO $
    withIntResult $
    wx_expK_F23 
foreign import ccall "expK_F23" wx_expK_F23 :: IO CInt

-- | usage: (@wxK_F24@).
{-# NOINLINE wxK_F24 #-}
wxK_F24 ::  Int
wxK_F24 
  = unsafePerformIO $
    withIntResult $
    wx_expK_F24 
foreign import ccall "expK_F24" wx_expK_F24 :: IO CInt

-- | usage: (@wxK_F3@).
{-# NOINLINE wxK_F3 #-}
wxK_F3 ::  Int
wxK_F3 
  = unsafePerformIO $
    withIntResult $
    wx_expK_F3 
foreign import ccall "expK_F3" wx_expK_F3 :: IO CInt

-- | usage: (@wxK_F4@).
{-# NOINLINE wxK_F4 #-}
wxK_F4 ::  Int
wxK_F4 
  = unsafePerformIO $
    withIntResult $
    wx_expK_F4 
foreign import ccall "expK_F4" wx_expK_F4 :: IO CInt

-- | usage: (@wxK_F5@).
{-# NOINLINE wxK_F5 #-}
wxK_F5 ::  Int
wxK_F5 
  = unsafePerformIO $
    withIntResult $
    wx_expK_F5 
foreign import ccall "expK_F5" wx_expK_F5 :: IO CInt

-- | usage: (@wxK_F6@).
{-# NOINLINE wxK_F6 #-}
wxK_F6 ::  Int
wxK_F6 
  = unsafePerformIO $
    withIntResult $
    wx_expK_F6 
foreign import ccall "expK_F6" wx_expK_F6 :: IO CInt

-- | usage: (@wxK_F7@).
{-# NOINLINE wxK_F7 #-}
wxK_F7 ::  Int
wxK_F7 
  = unsafePerformIO $
    withIntResult $
    wx_expK_F7 
foreign import ccall "expK_F7" wx_expK_F7 :: IO CInt

-- | usage: (@wxK_F8@).
{-# NOINLINE wxK_F8 #-}
wxK_F8 ::  Int
wxK_F8 
  = unsafePerformIO $
    withIntResult $
    wx_expK_F8 
foreign import ccall "expK_F8" wx_expK_F8 :: IO CInt

-- | usage: (@wxK_F9@).
{-# NOINLINE wxK_F9 #-}
wxK_F9 ::  Int
wxK_F9 
  = unsafePerformIO $
    withIntResult $
    wx_expK_F9 
foreign import ccall "expK_F9" wx_expK_F9 :: IO CInt

-- | usage: (@wxK_HELP@).
{-# NOINLINE wxK_HELP #-}
wxK_HELP ::  Int
wxK_HELP 
  = unsafePerformIO $
    withIntResult $
    wx_expK_HELP 
foreign import ccall "expK_HELP" wx_expK_HELP :: IO CInt

-- | usage: (@wxK_HOME@).
{-# NOINLINE wxK_HOME #-}
wxK_HOME ::  Int
wxK_HOME 
  = unsafePerformIO $
    withIntResult $
    wx_expK_HOME 
foreign import ccall "expK_HOME" wx_expK_HOME :: IO CInt

-- | usage: (@wxK_INSERT@).
{-# NOINLINE wxK_INSERT #-}
wxK_INSERT ::  Int
wxK_INSERT 
  = unsafePerformIO $
    withIntResult $
    wx_expK_INSERT 
foreign import ccall "expK_INSERT" wx_expK_INSERT :: IO CInt

-- | usage: (@wxK_LBUTTON@).
{-# NOINLINE wxK_LBUTTON #-}
wxK_LBUTTON ::  Int
wxK_LBUTTON 
  = unsafePerformIO $
    withIntResult $
    wx_expK_LBUTTON 
foreign import ccall "expK_LBUTTON" wx_expK_LBUTTON :: IO CInt

-- | usage: (@wxK_LEFT@).
{-# NOINLINE wxK_LEFT #-}
wxK_LEFT ::  Int
wxK_LEFT 
  = unsafePerformIO $
    withIntResult $
    wx_expK_LEFT 
foreign import ccall "expK_LEFT" wx_expK_LEFT :: IO CInt

-- | usage: (@wxK_MBUTTON@).
{-# NOINLINE wxK_MBUTTON #-}
wxK_MBUTTON ::  Int
wxK_MBUTTON 
  = unsafePerformIO $
    withIntResult $
    wx_expK_MBUTTON 
foreign import ccall "expK_MBUTTON" wx_expK_MBUTTON :: IO CInt

-- | usage: (@wxK_MENU@).
{-# NOINLINE wxK_MENU #-}
wxK_MENU ::  Int
wxK_MENU 
  = unsafePerformIO $
    withIntResult $
    wx_expK_MENU 
foreign import ccall "expK_MENU" wx_expK_MENU :: IO CInt

-- | usage: (@wxK_MULTIPLY@).
{-# NOINLINE wxK_MULTIPLY #-}
wxK_MULTIPLY ::  Int
wxK_MULTIPLY 
  = unsafePerformIO $
    withIntResult $
    wx_expK_MULTIPLY 
foreign import ccall "expK_MULTIPLY" wx_expK_MULTIPLY :: IO CInt

-- | usage: (@wxK_NUMLOCK@).
{-# NOINLINE wxK_NUMLOCK #-}
wxK_NUMLOCK ::  Int
wxK_NUMLOCK 
  = unsafePerformIO $
    withIntResult $
    wx_expK_NUMLOCK 
foreign import ccall "expK_NUMLOCK" wx_expK_NUMLOCK :: IO CInt

-- | usage: (@wxK_NUMPAD0@).
{-# NOINLINE wxK_NUMPAD0 #-}
wxK_NUMPAD0 ::  Int
wxK_NUMPAD0 
  = unsafePerformIO $
    withIntResult $
    wx_expK_NUMPAD0 
foreign import ccall "expK_NUMPAD0" wx_expK_NUMPAD0 :: IO CInt

-- | usage: (@wxK_NUMPAD1@).
{-# NOINLINE wxK_NUMPAD1 #-}
wxK_NUMPAD1 ::  Int
wxK_NUMPAD1 
  = unsafePerformIO $
    withIntResult $
    wx_expK_NUMPAD1 
foreign import ccall "expK_NUMPAD1" wx_expK_NUMPAD1 :: IO CInt

-- | usage: (@wxK_NUMPAD2@).
{-# NOINLINE wxK_NUMPAD2 #-}
wxK_NUMPAD2 ::  Int
wxK_NUMPAD2 
  = unsafePerformIO $
    withIntResult $
    wx_expK_NUMPAD2 
foreign import ccall "expK_NUMPAD2" wx_expK_NUMPAD2 :: IO CInt

-- | usage: (@wxK_NUMPAD3@).
{-# NOINLINE wxK_NUMPAD3 #-}
wxK_NUMPAD3 ::  Int
wxK_NUMPAD3 
  = unsafePerformIO $
    withIntResult $
    wx_expK_NUMPAD3 
foreign import ccall "expK_NUMPAD3" wx_expK_NUMPAD3 :: IO CInt

-- | usage: (@wxK_NUMPAD4@).
{-# NOINLINE wxK_NUMPAD4 #-}
wxK_NUMPAD4 ::  Int
wxK_NUMPAD4 
  = unsafePerformIO $
    withIntResult $
    wx_expK_NUMPAD4 
foreign import ccall "expK_NUMPAD4" wx_expK_NUMPAD4 :: IO CInt

-- | usage: (@wxK_NUMPAD5@).
{-# NOINLINE wxK_NUMPAD5 #-}
wxK_NUMPAD5 ::  Int
wxK_NUMPAD5 
  = unsafePerformIO $
    withIntResult $
    wx_expK_NUMPAD5 
foreign import ccall "expK_NUMPAD5" wx_expK_NUMPAD5 :: IO CInt

-- | usage: (@wxK_NUMPAD6@).
{-# NOINLINE wxK_NUMPAD6 #-}
wxK_NUMPAD6 ::  Int
wxK_NUMPAD6 
  = unsafePerformIO $
    withIntResult $
    wx_expK_NUMPAD6 
foreign import ccall "expK_NUMPAD6" wx_expK_NUMPAD6 :: IO CInt

-- | usage: (@wxK_NUMPAD7@).
{-# NOINLINE wxK_NUMPAD7 #-}
wxK_NUMPAD7 ::  Int
wxK_NUMPAD7 
  = unsafePerformIO $
    withIntResult $
    wx_expK_NUMPAD7 
foreign import ccall "expK_NUMPAD7" wx_expK_NUMPAD7 :: IO CInt

-- | usage: (@wxK_NUMPAD8@).
{-# NOINLINE wxK_NUMPAD8 #-}
wxK_NUMPAD8 ::  Int
wxK_NUMPAD8 
  = unsafePerformIO $
    withIntResult $
    wx_expK_NUMPAD8 
foreign import ccall "expK_NUMPAD8" wx_expK_NUMPAD8 :: IO CInt

-- | usage: (@wxK_NUMPAD9@).
{-# NOINLINE wxK_NUMPAD9 #-}
wxK_NUMPAD9 ::  Int
wxK_NUMPAD9 
  = unsafePerformIO $
    withIntResult $
    wx_expK_NUMPAD9 
foreign import ccall "expK_NUMPAD9" wx_expK_NUMPAD9 :: IO CInt

-- | usage: (@wxK_NUMPAD_ADD@).
{-# NOINLINE wxK_NUMPAD_ADD #-}
wxK_NUMPAD_ADD ::  Int
wxK_NUMPAD_ADD 
  = unsafePerformIO $
    withIntResult $
    wx_expK_NUMPAD_ADD 
foreign import ccall "expK_NUMPAD_ADD" wx_expK_NUMPAD_ADD :: IO CInt

-- | usage: (@wxK_NUMPAD_BEGIN@).
{-# NOINLINE wxK_NUMPAD_BEGIN #-}
wxK_NUMPAD_BEGIN ::  Int
wxK_NUMPAD_BEGIN 
  = unsafePerformIO $
    withIntResult $
    wx_expK_NUMPAD_BEGIN 
foreign import ccall "expK_NUMPAD_BEGIN" wx_expK_NUMPAD_BEGIN :: IO CInt

-- | usage: (@wxK_NUMPAD_DECIMAL@).
{-# NOINLINE wxK_NUMPAD_DECIMAL #-}
wxK_NUMPAD_DECIMAL ::  Int
wxK_NUMPAD_DECIMAL 
  = unsafePerformIO $
    withIntResult $
    wx_expK_NUMPAD_DECIMAL 
foreign import ccall "expK_NUMPAD_DECIMAL" wx_expK_NUMPAD_DECIMAL :: IO CInt

-- | usage: (@wxK_NUMPAD_DELETE@).
{-# NOINLINE wxK_NUMPAD_DELETE #-}
wxK_NUMPAD_DELETE ::  Int
wxK_NUMPAD_DELETE 
  = unsafePerformIO $
    withIntResult $
    wx_expK_NUMPAD_DELETE 
foreign import ccall "expK_NUMPAD_DELETE" wx_expK_NUMPAD_DELETE :: IO CInt

-- | usage: (@wxK_NUMPAD_DIVIDE@).
{-# NOINLINE wxK_NUMPAD_DIVIDE #-}
wxK_NUMPAD_DIVIDE ::  Int
wxK_NUMPAD_DIVIDE 
  = unsafePerformIO $
    withIntResult $
    wx_expK_NUMPAD_DIVIDE 
foreign import ccall "expK_NUMPAD_DIVIDE" wx_expK_NUMPAD_DIVIDE :: IO CInt

-- | usage: (@wxK_NUMPAD_DOWN@).
{-# NOINLINE wxK_NUMPAD_DOWN #-}
wxK_NUMPAD_DOWN ::  Int
wxK_NUMPAD_DOWN 
  = unsafePerformIO $
    withIntResult $
    wx_expK_NUMPAD_DOWN 
foreign import ccall "expK_NUMPAD_DOWN" wx_expK_NUMPAD_DOWN :: IO CInt

-- | usage: (@wxK_NUMPAD_END@).
{-# NOINLINE wxK_NUMPAD_END #-}
wxK_NUMPAD_END ::  Int
wxK_NUMPAD_END 
  = unsafePerformIO $
    withIntResult $
    wx_expK_NUMPAD_END 
foreign import ccall "expK_NUMPAD_END" wx_expK_NUMPAD_END :: IO CInt

-- | usage: (@wxK_NUMPAD_ENTER@).
{-# NOINLINE wxK_NUMPAD_ENTER #-}
wxK_NUMPAD_ENTER ::  Int
wxK_NUMPAD_ENTER 
  = unsafePerformIO $
    withIntResult $
    wx_expK_NUMPAD_ENTER 
foreign import ccall "expK_NUMPAD_ENTER" wx_expK_NUMPAD_ENTER :: IO CInt

-- | usage: (@wxK_NUMPAD_EQUAL@).
{-# NOINLINE wxK_NUMPAD_EQUAL #-}
wxK_NUMPAD_EQUAL ::  Int
wxK_NUMPAD_EQUAL 
  = unsafePerformIO $
    withIntResult $
    wx_expK_NUMPAD_EQUAL 
foreign import ccall "expK_NUMPAD_EQUAL" wx_expK_NUMPAD_EQUAL :: IO CInt

-- | usage: (@wxK_NUMPAD_F1@).
{-# NOINLINE wxK_NUMPAD_F1 #-}
wxK_NUMPAD_F1 ::  Int
wxK_NUMPAD_F1 
  = unsafePerformIO $
    withIntResult $
    wx_expK_NUMPAD_F1 
foreign import ccall "expK_NUMPAD_F1" wx_expK_NUMPAD_F1 :: IO CInt

-- | usage: (@wxK_NUMPAD_F2@).
{-# NOINLINE wxK_NUMPAD_F2 #-}
wxK_NUMPAD_F2 ::  Int
wxK_NUMPAD_F2 
  = unsafePerformIO $
    withIntResult $
    wx_expK_NUMPAD_F2 
foreign import ccall "expK_NUMPAD_F2" wx_expK_NUMPAD_F2 :: IO CInt

-- | usage: (@wxK_NUMPAD_F3@).
{-# NOINLINE wxK_NUMPAD_F3 #-}
wxK_NUMPAD_F3 ::  Int
wxK_NUMPAD_F3 
  = unsafePerformIO $
    withIntResult $
    wx_expK_NUMPAD_F3 
foreign import ccall "expK_NUMPAD_F3" wx_expK_NUMPAD_F3 :: IO CInt

-- | usage: (@wxK_NUMPAD_F4@).
{-# NOINLINE wxK_NUMPAD_F4 #-}
wxK_NUMPAD_F4 ::  Int
wxK_NUMPAD_F4 
  = unsafePerformIO $
    withIntResult $
    wx_expK_NUMPAD_F4 
foreign import ccall "expK_NUMPAD_F4" wx_expK_NUMPAD_F4 :: IO CInt

-- | usage: (@wxK_NUMPAD_HOME@).
{-# NOINLINE wxK_NUMPAD_HOME #-}
wxK_NUMPAD_HOME ::  Int
wxK_NUMPAD_HOME 
  = unsafePerformIO $
    withIntResult $
    wx_expK_NUMPAD_HOME 
foreign import ccall "expK_NUMPAD_HOME" wx_expK_NUMPAD_HOME :: IO CInt

-- | usage: (@wxK_NUMPAD_INSERT@).
{-# NOINLINE wxK_NUMPAD_INSERT #-}
wxK_NUMPAD_INSERT ::  Int
wxK_NUMPAD_INSERT 
  = unsafePerformIO $
    withIntResult $
    wx_expK_NUMPAD_INSERT 
foreign import ccall "expK_NUMPAD_INSERT" wx_expK_NUMPAD_INSERT :: IO CInt

-- | usage: (@wxK_NUMPAD_LEFT@).
{-# NOINLINE wxK_NUMPAD_LEFT #-}
wxK_NUMPAD_LEFT ::  Int
wxK_NUMPAD_LEFT 
  = unsafePerformIO $
    withIntResult $
    wx_expK_NUMPAD_LEFT 
foreign import ccall "expK_NUMPAD_LEFT" wx_expK_NUMPAD_LEFT :: IO CInt

-- | usage: (@wxK_NUMPAD_MULTIPLY@).
{-# NOINLINE wxK_NUMPAD_MULTIPLY #-}
wxK_NUMPAD_MULTIPLY ::  Int
wxK_NUMPAD_MULTIPLY 
  = unsafePerformIO $
    withIntResult $
    wx_expK_NUMPAD_MULTIPLY 
foreign import ccall "expK_NUMPAD_MULTIPLY" wx_expK_NUMPAD_MULTIPLY :: IO CInt

-- | usage: (@wxK_NUMPAD_PAGEDOWN@).
{-# NOINLINE wxK_NUMPAD_PAGEDOWN #-}
wxK_NUMPAD_PAGEDOWN ::  Int
wxK_NUMPAD_PAGEDOWN 
  = unsafePerformIO $
    withIntResult $
    wx_expK_NUMPAD_PAGEDOWN 
foreign import ccall "expK_NUMPAD_PAGEDOWN" wx_expK_NUMPAD_PAGEDOWN :: IO CInt

-- | usage: (@wxK_NUMPAD_PAGEUP@).
{-# NOINLINE wxK_NUMPAD_PAGEUP #-}
wxK_NUMPAD_PAGEUP ::  Int
wxK_NUMPAD_PAGEUP 
  = unsafePerformIO $
    withIntResult $
    wx_expK_NUMPAD_PAGEUP 
foreign import ccall "expK_NUMPAD_PAGEUP" wx_expK_NUMPAD_PAGEUP :: IO CInt

-- | usage: (@wxK_NUMPAD_RIGHT@).
{-# NOINLINE wxK_NUMPAD_RIGHT #-}
wxK_NUMPAD_RIGHT ::  Int
wxK_NUMPAD_RIGHT 
  = unsafePerformIO $
    withIntResult $
    wx_expK_NUMPAD_RIGHT 
foreign import ccall "expK_NUMPAD_RIGHT" wx_expK_NUMPAD_RIGHT :: IO CInt

-- | usage: (@wxK_NUMPAD_SEPARATOR@).
{-# NOINLINE wxK_NUMPAD_SEPARATOR #-}
wxK_NUMPAD_SEPARATOR ::  Int
wxK_NUMPAD_SEPARATOR 
  = unsafePerformIO $
    withIntResult $
    wx_expK_NUMPAD_SEPARATOR 
foreign import ccall "expK_NUMPAD_SEPARATOR" wx_expK_NUMPAD_SEPARATOR :: IO CInt

-- | usage: (@wxK_NUMPAD_SPACE@).
{-# NOINLINE wxK_NUMPAD_SPACE #-}
wxK_NUMPAD_SPACE ::  Int
wxK_NUMPAD_SPACE 
  = unsafePerformIO $
    withIntResult $
    wx_expK_NUMPAD_SPACE 
foreign import ccall "expK_NUMPAD_SPACE" wx_expK_NUMPAD_SPACE :: IO CInt

-- | usage: (@wxK_NUMPAD_SUBTRACT@).
{-# NOINLINE wxK_NUMPAD_SUBTRACT #-}
wxK_NUMPAD_SUBTRACT ::  Int
wxK_NUMPAD_SUBTRACT 
  = unsafePerformIO $
    withIntResult $
    wx_expK_NUMPAD_SUBTRACT 
foreign import ccall "expK_NUMPAD_SUBTRACT" wx_expK_NUMPAD_SUBTRACT :: IO CInt

-- | usage: (@wxK_NUMPAD_TAB@).
{-# NOINLINE wxK_NUMPAD_TAB #-}
wxK_NUMPAD_TAB ::  Int
wxK_NUMPAD_TAB 
  = unsafePerformIO $
    withIntResult $
    wx_expK_NUMPAD_TAB 
foreign import ccall "expK_NUMPAD_TAB" wx_expK_NUMPAD_TAB :: IO CInt

-- | usage: (@wxK_NUMPAD_UP@).
{-# NOINLINE wxK_NUMPAD_UP #-}
wxK_NUMPAD_UP ::  Int
wxK_NUMPAD_UP 
  = unsafePerformIO $
    withIntResult $
    wx_expK_NUMPAD_UP 
foreign import ccall "expK_NUMPAD_UP" wx_expK_NUMPAD_UP :: IO CInt

-- | usage: (@wxK_PAGEDOWN@).
{-# NOINLINE wxK_PAGEDOWN #-}
wxK_PAGEDOWN ::  Int
wxK_PAGEDOWN 
  = unsafePerformIO $
    withIntResult $
    wx_expK_PAGEDOWN 
foreign import ccall "expK_PAGEDOWN" wx_expK_PAGEDOWN :: IO CInt

-- | usage: (@wxK_PAGEUP@).
{-# NOINLINE wxK_PAGEUP #-}
wxK_PAGEUP ::  Int
wxK_PAGEUP 
  = unsafePerformIO $
    withIntResult $
    wx_expK_PAGEUP 
foreign import ccall "expK_PAGEUP" wx_expK_PAGEUP :: IO CInt

-- | usage: (@wxK_PAUSE@).
{-# NOINLINE wxK_PAUSE #-}
wxK_PAUSE ::  Int
wxK_PAUSE 
  = unsafePerformIO $
    withIntResult $
    wx_expK_PAUSE 
foreign import ccall "expK_PAUSE" wx_expK_PAUSE :: IO CInt

-- | usage: (@wxK_PRINT@).
{-# NOINLINE wxK_PRINT #-}
wxK_PRINT ::  Int
wxK_PRINT 
  = unsafePerformIO $
    withIntResult $
    wx_expK_PRINT 
foreign import ccall "expK_PRINT" wx_expK_PRINT :: IO CInt

-- | usage: (@wxK_RBUTTON@).
{-# NOINLINE wxK_RBUTTON #-}
wxK_RBUTTON ::  Int
wxK_RBUTTON 
  = unsafePerformIO $
    withIntResult $
    wx_expK_RBUTTON 
foreign import ccall "expK_RBUTTON" wx_expK_RBUTTON :: IO CInt

-- | usage: (@wxK_RETURN@).
{-# NOINLINE wxK_RETURN #-}
wxK_RETURN ::  Int
wxK_RETURN 
  = unsafePerformIO $
    withIntResult $
    wx_expK_RETURN 
foreign import ccall "expK_RETURN" wx_expK_RETURN :: IO CInt

-- | usage: (@wxK_RIGHT@).
{-# NOINLINE wxK_RIGHT #-}
wxK_RIGHT ::  Int
wxK_RIGHT 
  = unsafePerformIO $
    withIntResult $
    wx_expK_RIGHT 
foreign import ccall "expK_RIGHT" wx_expK_RIGHT :: IO CInt

-- | usage: (@wxK_SCROLL@).
{-# NOINLINE wxK_SCROLL #-}
wxK_SCROLL ::  Int
wxK_SCROLL 
  = unsafePerformIO $
    withIntResult $
    wx_expK_SCROLL 
foreign import ccall "expK_SCROLL" wx_expK_SCROLL :: IO CInt

-- | usage: (@wxK_SELECT@).
{-# NOINLINE wxK_SELECT #-}
wxK_SELECT ::  Int
wxK_SELECT 
  = unsafePerformIO $
    withIntResult $
    wx_expK_SELECT 
foreign import ccall "expK_SELECT" wx_expK_SELECT :: IO CInt

-- | usage: (@wxK_SEPARATOR@).
{-# NOINLINE wxK_SEPARATOR #-}
wxK_SEPARATOR ::  Int
wxK_SEPARATOR 
  = unsafePerformIO $
    withIntResult $
    wx_expK_SEPARATOR 
foreign import ccall "expK_SEPARATOR" wx_expK_SEPARATOR :: IO CInt

-- | usage: (@wxK_SHIFT@).
{-# NOINLINE wxK_SHIFT #-}
wxK_SHIFT ::  Int
wxK_SHIFT 
  = unsafePerformIO $
    withIntResult $
    wx_expK_SHIFT 
foreign import ccall "expK_SHIFT" wx_expK_SHIFT :: IO CInt

-- | usage: (@wxK_SNAPSHOT@).
{-# NOINLINE wxK_SNAPSHOT #-}
wxK_SNAPSHOT ::  Int
wxK_SNAPSHOT 
  = unsafePerformIO $
    withIntResult $
    wx_expK_SNAPSHOT 
foreign import ccall "expK_SNAPSHOT" wx_expK_SNAPSHOT :: IO CInt

-- | usage: (@wxK_SPACE@).
{-# NOINLINE wxK_SPACE #-}
wxK_SPACE ::  Int
wxK_SPACE 
  = unsafePerformIO $
    withIntResult $
    wx_expK_SPACE 
foreign import ccall "expK_SPACE" wx_expK_SPACE :: IO CInt

-- | usage: (@wxK_START@).
{-# NOINLINE wxK_START #-}
wxK_START ::  Int
wxK_START 
  = unsafePerformIO $
    withIntResult $
    wx_expK_START 
foreign import ccall "expK_START" wx_expK_START :: IO CInt

-- | usage: (@wxK_SUBTRACT@).
{-# NOINLINE wxK_SUBTRACT #-}
wxK_SUBTRACT ::  Int
wxK_SUBTRACT 
  = unsafePerformIO $
    withIntResult $
    wx_expK_SUBTRACT 
foreign import ccall "expK_SUBTRACT" wx_expK_SUBTRACT :: IO CInt

-- | usage: (@wxK_TAB@).
{-# NOINLINE wxK_TAB #-}
wxK_TAB ::  Int
wxK_TAB 
  = unsafePerformIO $
    withIntResult $
    wx_expK_TAB 
foreign import ccall "expK_TAB" wx_expK_TAB :: IO CInt

-- | usage: (@wxK_UP@).
{-# NOINLINE wxK_UP #-}
wxK_UP ::  Int
wxK_UP 
  = unsafePerformIO $
    withIntResult $
    wx_expK_UP 
foreign import ccall "expK_UP" wx_expK_UP :: IO CInt

-- | usage: (@wxNB_BOTTOM@).
{-# NOINLINE wxNB_BOTTOM #-}
wxNB_BOTTOM ::  Int
wxNB_BOTTOM 
  = unsafePerformIO $
    withIntResult $
    wx_expNB_BOTTOM 
foreign import ccall "expNB_BOTTOM" wx_expNB_BOTTOM :: IO CInt

-- | usage: (@wxNB_LEFT@).
{-# NOINLINE wxNB_LEFT #-}
wxNB_LEFT ::  Int
wxNB_LEFT 
  = unsafePerformIO $
    withIntResult $
    wx_expNB_LEFT 
foreign import ccall "expNB_LEFT" wx_expNB_LEFT :: IO CInt

-- | usage: (@wxNB_RIGHT@).
{-# NOINLINE wxNB_RIGHT #-}
wxNB_RIGHT ::  Int
wxNB_RIGHT 
  = unsafePerformIO $
    withIntResult $
    wx_expNB_RIGHT 
foreign import ccall "expNB_RIGHT" wx_expNB_RIGHT :: IO CInt

-- | usage: (@wxNB_TOP@).
{-# NOINLINE wxNB_TOP #-}
wxNB_TOP ::  Int
wxNB_TOP 
  = unsafePerformIO $
    withIntResult $
    wx_expNB_TOP 
foreign import ccall "expNB_TOP" wx_expNB_TOP :: IO CInt

-- | usage: (@wxcAppBell@).
wxcAppBell ::  IO ()
wxcAppBell 
  = wx_ELJApp_Bell 
foreign import ccall "ELJApp_Bell" wx_ELJApp_Bell :: IO ()

-- | usage: (@wxcAppCreateLogTarget@).
wxcAppCreateLogTarget ::  IO (WXCLog  ())
wxcAppCreateLogTarget 
  = withObjectResult $
    wx_ELJApp_CreateLogTarget 
foreign import ccall "ELJApp_CreateLogTarget" wx_ELJApp_CreateLogTarget :: IO (Ptr (TWXCLog ()))

-- | usage: (@wxcAppDispatch@).
wxcAppDispatch ::  IO ()
wxcAppDispatch 
  = wx_ELJApp_Dispatch 
foreign import ccall "ELJApp_Dispatch" wx_ELJApp_Dispatch :: IO ()

-- | usage: (@wxcAppDisplaySize@).
wxcAppDisplaySize ::  IO (Size)
wxcAppDisplaySize 
  = withWxSizeResult $
    wx_ELJApp_DisplaySize 
foreign import ccall "ELJApp_DisplaySize" wx_ELJApp_DisplaySize :: IO (Ptr (TWxSize ()))

-- | usage: (@wxcAppEnableTooltips enable@).
wxcAppEnableTooltips :: Bool ->  IO ()
wxcAppEnableTooltips _enable 
  = wx_ELJApp_EnableTooltips (toCBool _enable)  
foreign import ccall "ELJApp_EnableTooltips" wx_ELJApp_EnableTooltips :: CBool -> IO ()

-- | usage: (@wxcAppEnableTopLevelWindows enb@).
wxcAppEnableTopLevelWindows :: Int ->  IO ()
wxcAppEnableTopLevelWindows _enb 
  = wx_ELJApp_EnableTopLevelWindows (toCInt _enb)  
foreign import ccall "ELJApp_EnableTopLevelWindows" wx_ELJApp_EnableTopLevelWindows :: CInt -> IO ()

-- | usage: (@wxcAppExecuteProcess cmd snc prc@).
wxcAppExecuteProcess :: String -> Int -> Process  c ->  IO Int
wxcAppExecuteProcess _cmd _snc _prc 
  = withIntResult $
    withStringPtr _cmd $ \cobj__cmd -> 
    withObjectPtr _prc $ \cobj__prc -> 
    wx_ELJApp_ExecuteProcess cobj__cmd  (toCInt _snc)  cobj__prc  
foreign import ccall "ELJApp_ExecuteProcess" wx_ELJApp_ExecuteProcess :: Ptr (TWxString a) -> CInt -> Ptr (TProcess c) -> IO CInt

-- | usage: (@wxcAppExit@).
wxcAppExit ::  IO ()
wxcAppExit 
  = wx_ELJApp_Exit 
foreign import ccall "ELJApp_Exit" wx_ELJApp_Exit :: IO ()

-- | usage: (@wxcAppExitMainLoop@).
wxcAppExitMainLoop ::  IO ()
wxcAppExitMainLoop 
  = wx_ELJApp_ExitMainLoop 
foreign import ccall "ELJApp_ExitMainLoop" wx_ELJApp_ExitMainLoop :: IO ()

-- | usage: (@wxcAppFindWindowById id prt@).
wxcAppFindWindowById :: Id -> Window  b ->  IO (Ptr  ())
wxcAppFindWindowById _id _prt 
  = withObjectPtr _prt $ \cobj__prt -> 
    wx_ELJApp_FindWindowById (toCInt _id)  cobj__prt  
foreign import ccall "ELJApp_FindWindowById" wx_ELJApp_FindWindowById :: CInt -> Ptr (TWindow b) -> IO (Ptr  ())

-- | usage: (@wxcAppFindWindowByLabel lbl prt@).
wxcAppFindWindowByLabel :: String -> Window  b ->  IO (Window  ())
wxcAppFindWindowByLabel _lbl _prt 
  = withObjectResult $
    withStringPtr _lbl $ \cobj__lbl -> 
    withObjectPtr _prt $ \cobj__prt -> 
    wx_ELJApp_FindWindowByLabel cobj__lbl  cobj__prt  
foreign import ccall "ELJApp_FindWindowByLabel" wx_ELJApp_FindWindowByLabel :: Ptr (TWxString a) -> Ptr (TWindow b) -> IO (Ptr (TWindow ()))

-- | usage: (@wxcAppFindWindowByName lbl prt@).
wxcAppFindWindowByName :: String -> Window  b ->  IO (Window  ())
wxcAppFindWindowByName _lbl _prt 
  = withObjectResult $
    withStringPtr _lbl $ \cobj__lbl -> 
    withObjectPtr _prt $ \cobj__prt -> 
    wx_ELJApp_FindWindowByName cobj__lbl  cobj__prt  
foreign import ccall "ELJApp_FindWindowByName" wx_ELJApp_FindWindowByName :: Ptr (TWxString a) -> Ptr (TWindow b) -> IO (Ptr (TWindow ()))

-- | usage: (@wxcAppGetApp@).
wxcAppGetApp ::  IO (App  ())
wxcAppGetApp 
  = withObjectResult $
    wx_ELJApp_GetApp 
foreign import ccall "ELJApp_GetApp" wx_ELJApp_GetApp :: IO (Ptr (TApp ()))

-- | usage: (@wxcAppGetAppName@).
wxcAppGetAppName ::  IO (String)
wxcAppGetAppName 
  = withManagedStringResult $
    wx_ELJApp_GetAppName 
foreign import ccall "ELJApp_GetAppName" wx_ELJApp_GetAppName :: IO (Ptr (TWxString ()))

-- | usage: (@wxcAppGetClassName@).
wxcAppGetClassName ::  IO (String)
wxcAppGetClassName 
  = withManagedStringResult $
    wx_ELJApp_GetClassName 
foreign import ccall "ELJApp_GetClassName" wx_ELJApp_GetClassName :: IO (Ptr (TWxString ()))

-- | usage: (@wxcAppGetExitOnFrameDelete@).
wxcAppGetExitOnFrameDelete ::  IO Int
wxcAppGetExitOnFrameDelete 
  = withIntResult $
    wx_ELJApp_GetExitOnFrameDelete 
foreign import ccall "ELJApp_GetExitOnFrameDelete" wx_ELJApp_GetExitOnFrameDelete :: IO CInt

-- | usage: (@wxcAppGetIdleInterval@).
wxcAppGetIdleInterval ::  IO Int
wxcAppGetIdleInterval 
  = withIntResult $
    wx_ELJApp_GetIdleInterval 
foreign import ccall "ELJApp_GetIdleInterval" wx_ELJApp_GetIdleInterval :: IO CInt

-- | usage: (@wxcAppGetOsDescription@).
wxcAppGetOsDescription ::  IO (String)
wxcAppGetOsDescription 
  = withManagedStringResult $
    wx_ELJApp_GetOsDescription 
foreign import ccall "ELJApp_GetOsDescription" wx_ELJApp_GetOsDescription :: IO (Ptr (TWxString ()))

-- | usage: (@wxcAppGetOsVersion maj min@).
wxcAppGetOsVersion :: Ptr  a -> Ptr  b ->  IO Int
wxcAppGetOsVersion _maj _min 
  = withIntResult $
    wx_ELJApp_GetOsVersion _maj  _min  
foreign import ccall "ELJApp_GetOsVersion" wx_ELJApp_GetOsVersion :: Ptr  a -> Ptr  b -> IO CInt

-- | usage: (@wxcAppGetTopWindow@).
wxcAppGetTopWindow ::  IO (Window  ())
wxcAppGetTopWindow 
  = withObjectResult $
    wx_ELJApp_GetTopWindow 
foreign import ccall "ELJApp_GetTopWindow" wx_ELJApp_GetTopWindow :: IO (Ptr (TWindow ()))

-- | usage: (@wxcAppGetUseBestVisual@).
wxcAppGetUseBestVisual ::  IO Int
wxcAppGetUseBestVisual 
  = withIntResult $
    wx_ELJApp_GetUseBestVisual 
foreign import ccall "ELJApp_GetUseBestVisual" wx_ELJApp_GetUseBestVisual :: IO CInt

-- | usage: (@wxcAppGetUserHome usr@).
wxcAppGetUserHome :: Ptr  a ->  IO (String)
wxcAppGetUserHome _usr 
  = withManagedStringResult $
    wx_ELJApp_GetUserHome _usr  
foreign import ccall "ELJApp_GetUserHome" wx_ELJApp_GetUserHome :: Ptr  a -> IO (Ptr (TWxString ()))

-- | usage: (@wxcAppGetUserId@).
wxcAppGetUserId ::  IO (String)
wxcAppGetUserId 
  = withManagedStringResult $
    wx_ELJApp_GetUserId 
foreign import ccall "ELJApp_GetUserId" wx_ELJApp_GetUserId :: IO (Ptr (TWxString ()))

-- | usage: (@wxcAppGetUserName@).
wxcAppGetUserName ::  IO (String)
wxcAppGetUserName 
  = withManagedStringResult $
    wx_ELJApp_GetUserName 
foreign import ccall "ELJApp_GetUserName" wx_ELJApp_GetUserName :: IO (Ptr (TWxString ()))

-- | usage: (@wxcAppGetVendorName@).
wxcAppGetVendorName ::  IO (String)
wxcAppGetVendorName 
  = withManagedStringResult $
    wx_ELJApp_GetVendorName 
foreign import ccall "ELJApp_GetVendorName" wx_ELJApp_GetVendorName :: IO (Ptr (TWxString ()))

-- | usage: (@wxcAppInitAllImageHandlers@).
wxcAppInitAllImageHandlers ::  IO ()
wxcAppInitAllImageHandlers 
  = wx_ELJApp_InitAllImageHandlers 
foreign import ccall "ELJApp_InitAllImageHandlers" wx_ELJApp_InitAllImageHandlers :: IO ()

-- | usage: (@wxcAppInitializeC closure argc argv@).
wxcAppInitializeC :: Closure  a -> Int -> Ptr (Ptr CWchar) ->  IO ()
wxcAppInitializeC closure _argc _argv 
  = withObjectPtr closure $ \cobj_closure -> 
    wx_ELJApp_InitializeC cobj_closure  (toCInt _argc)  _argv  
foreign import ccall "ELJApp_InitializeC" wx_ELJApp_InitializeC :: Ptr (TClosure a) -> CInt -> Ptr (Ptr CWchar) -> IO ()

-- | usage: (@wxcAppInitialized@).
wxcAppInitialized ::  IO Bool
wxcAppInitialized 
  = withBoolResult $
    wx_ELJApp_Initialized 
foreign import ccall "ELJApp_Initialized" wx_ELJApp_Initialized :: IO CBool

-- | usage: (@wxcAppIsTerminating@).
wxcAppIsTerminating ::  IO Bool
wxcAppIsTerminating 
  = withBoolResult $
    wx_ELJApp_IsTerminating 
foreign import ccall "ELJApp_IsTerminating" wx_ELJApp_IsTerminating :: IO CBool

-- | usage: (@wxcAppMainLoop@).
wxcAppMainLoop ::  IO Int
wxcAppMainLoop 
  = withIntResult $
    wx_ELJApp_MainLoop 
foreign import ccall "ELJApp_MainLoop" wx_ELJApp_MainLoop :: IO CInt

-- | usage: (@wxcAppMilliSleep mscs@).
wxcAppMilliSleep :: Int ->  IO ()
wxcAppMilliSleep _mscs 
  = wx_ELJApp_MilliSleep (toCInt _mscs)  
foreign import ccall "ELJApp_MilliSleep" wx_ELJApp_MilliSleep :: CInt -> IO ()

-- | usage: (@wxcAppMousePosition@).
wxcAppMousePosition ::  IO (Point)
wxcAppMousePosition 
  = withWxPointResult $
    wx_ELJApp_MousePosition 
foreign import ccall "ELJApp_MousePosition" wx_ELJApp_MousePosition :: IO (Ptr (TWxPoint ()))

-- | usage: (@wxcAppPending@).
wxcAppPending ::  IO Int
wxcAppPending 
  = withIntResult $
    wx_ELJApp_Pending 
foreign import ccall "ELJApp_Pending" wx_ELJApp_Pending :: IO CInt

-- | usage: (@wxcAppSafeYield win@).
wxcAppSafeYield :: Window  a ->  IO Int
wxcAppSafeYield _win 
  = withIntResult $
    withObjectPtr _win $ \cobj__win -> 
    wx_ELJApp_SafeYield cobj__win  
foreign import ccall "ELJApp_SafeYield" wx_ELJApp_SafeYield :: Ptr (TWindow a) -> IO CInt

-- | usage: (@wxcAppSetAppName name@).
wxcAppSetAppName :: String ->  IO ()
wxcAppSetAppName name 
  = withStringPtr name $ \cobj_name -> 
    wx_ELJApp_SetAppName cobj_name  
foreign import ccall "ELJApp_SetAppName" wx_ELJApp_SetAppName :: Ptr (TWxString a) -> IO ()

-- | usage: (@wxcAppSetClassName name@).
wxcAppSetClassName :: String ->  IO ()
wxcAppSetClassName name 
  = withStringPtr name $ \cobj_name -> 
    wx_ELJApp_SetClassName cobj_name  
foreign import ccall "ELJApp_SetClassName" wx_ELJApp_SetClassName :: Ptr (TWxString a) -> IO ()

-- | usage: (@wxcAppSetExitOnFrameDelete flag@).
wxcAppSetExitOnFrameDelete :: Int ->  IO ()
wxcAppSetExitOnFrameDelete flag 
  = wx_ELJApp_SetExitOnFrameDelete (toCInt flag)  
foreign import ccall "ELJApp_SetExitOnFrameDelete" wx_ELJApp_SetExitOnFrameDelete :: CInt -> IO ()

-- | usage: (@wxcAppSetIdleInterval interval@).
wxcAppSetIdleInterval :: Int ->  IO ()
wxcAppSetIdleInterval interval 
  = wx_ELJApp_SetIdleInterval (toCInt interval)  
foreign import ccall "ELJApp_SetIdleInterval" wx_ELJApp_SetIdleInterval :: CInt -> IO ()

-- | usage: (@wxcAppSetPrintMode mode@).
wxcAppSetPrintMode :: Int ->  IO ()
wxcAppSetPrintMode mode 
  = wx_ELJApp_SetPrintMode (toCInt mode)  
foreign import ccall "ELJApp_SetPrintMode" wx_ELJApp_SetPrintMode :: CInt -> IO ()

-- | usage: (@wxcAppSetTooltipDelay ms@).
wxcAppSetTooltipDelay :: Int ->  IO ()
wxcAppSetTooltipDelay _ms 
  = wx_ELJApp_SetTooltipDelay (toCInt _ms)  
foreign import ccall "ELJApp_SetTooltipDelay" wx_ELJApp_SetTooltipDelay :: CInt -> IO ()

-- | usage: (@wxcAppSetTopWindow wnd@).
wxcAppSetTopWindow :: Window  a ->  IO ()
wxcAppSetTopWindow _wnd 
  = withObjectPtr _wnd $ \cobj__wnd -> 
    wx_ELJApp_SetTopWindow cobj__wnd  
foreign import ccall "ELJApp_SetTopWindow" wx_ELJApp_SetTopWindow :: Ptr (TWindow a) -> IO ()

-- | usage: (@wxcAppSetUseBestVisual flag@).
wxcAppSetUseBestVisual :: Int ->  IO ()
wxcAppSetUseBestVisual flag 
  = wx_ELJApp_SetUseBestVisual (toCInt flag)  
foreign import ccall "ELJApp_SetUseBestVisual" wx_ELJApp_SetUseBestVisual :: CInt -> IO ()

-- | usage: (@wxcAppSetVendorName name@).
wxcAppSetVendorName :: String ->  IO ()
wxcAppSetVendorName name 
  = withStringPtr name $ \cobj_name -> 
    wx_ELJApp_SetVendorName cobj_name  
foreign import ccall "ELJApp_SetVendorName" wx_ELJApp_SetVendorName :: Ptr (TWxString a) -> IO ()

-- | usage: (@wxcAppSleep scs@).
wxcAppSleep :: Int ->  IO ()
wxcAppSleep _scs 
  = wx_ELJApp_Sleep (toCInt _scs)  
foreign import ccall "ELJApp_Sleep" wx_ELJApp_Sleep :: CInt -> IO ()

-- | usage: (@wxcAppYield@).
wxcAppYield ::  IO Int
wxcAppYield 
  = withIntResult $
    wx_ELJApp_Yield 
foreign import ccall "ELJApp_Yield" wx_ELJApp_Yield :: IO CInt

-- | usage: (@wxcArtProvCreate obj clb@).
wxcArtProvCreate :: Ptr  a -> Ptr  b ->  IO (WXCArtProv  ())
wxcArtProvCreate _obj _clb 
  = withObjectResult $
    wx_ELJArtProv_Create _obj  _clb  
foreign import ccall "ELJArtProv_Create" wx_ELJArtProv_Create :: Ptr  a -> Ptr  b -> IO (Ptr (TWXCArtProv ()))

-- | usage: (@wxcArtProvRelease obj@).
wxcArtProvRelease :: WXCArtProv  a ->  IO ()
wxcArtProvRelease _obj 
  = withObjectRef "wxcArtProvRelease" _obj $ \cobj__obj -> 
    wx_ELJArtProv_Release cobj__obj  
foreign import ccall "ELJArtProv_Release" wx_ELJArtProv_Release :: Ptr (TWXCArtProv a) -> IO ()

-- | usage: (@wxcBeginBusyCursor@).
wxcBeginBusyCursor ::  IO ()
wxcBeginBusyCursor 
  = wx_wxcBeginBusyCursor 
foreign import ccall "wxcBeginBusyCursor" wx_wxcBeginBusyCursor :: IO ()

-- | usage: (@wxcBell@).
wxcBell ::  IO ()
wxcBell 
  = wx_wxcBell 
foreign import ccall "wxcBell" wx_wxcBell :: IO ()

-- | usage: (@wxcDragDataObjectCreate obj fmt func1 func2 func3@).
wxcDragDataObjectCreate :: Ptr  a -> String -> Ptr  c -> Ptr  d -> Ptr  e ->  IO (WXCDragDataObject  ())
wxcDragDataObjectCreate _obj _fmt _func1 _func2 _func3 
  = withObjectResult $
    withStringPtr _fmt $ \cobj__fmt -> 
    wx_ELJDragDataObject_Create _obj  cobj__fmt  _func1  _func2  _func3  
foreign import ccall "ELJDragDataObject_Create" wx_ELJDragDataObject_Create :: Ptr  a -> Ptr (TWxString b) -> Ptr  c -> Ptr  d -> Ptr  e -> IO (Ptr (TWXCDragDataObject ()))

-- | usage: (@wxcDragDataObjectDelete obj@).
wxcDragDataObjectDelete :: WXCDragDataObject  a ->  IO ()
wxcDragDataObjectDelete _obj 
  = withObjectRef "wxcDragDataObjectDelete" _obj $ \cobj__obj -> 
    wx_ELJDragDataObject_Delete cobj__obj  
foreign import ccall "ELJDragDataObject_Delete" wx_ELJDragDataObject_Delete :: Ptr (TWXCDragDataObject a) -> IO ()

-- | usage: (@wxcDropTargetCreate obj@).
wxcDropTargetCreate :: Ptr  a ->  IO (WXCDropTarget  ())
wxcDropTargetCreate _obj 
  = withObjectResult $
    wx_ELJDropTarget_Create _obj  
foreign import ccall "ELJDropTarget_Create" wx_ELJDropTarget_Create :: Ptr  a -> IO (Ptr (TWXCDropTarget ()))

-- | usage: (@wxcDropTargetDelete obj@).
wxcDropTargetDelete :: WXCDropTarget  a ->  IO ()
wxcDropTargetDelete _obj 
  = withObjectRef "wxcDropTargetDelete" _obj $ \cobj__obj -> 
    wx_ELJDropTarget_Delete cobj__obj  
foreign import ccall "ELJDropTarget_Delete" wx_ELJDropTarget_Delete :: Ptr (TWXCDropTarget a) -> IO ()

-- | usage: (@wxcDropTargetSetOnData obj func@).
wxcDropTargetSetOnData :: WXCDropTarget  a -> Ptr  b ->  IO ()
wxcDropTargetSetOnData _obj _func 
  = withObjectRef "wxcDropTargetSetOnData" _obj $ \cobj__obj -> 
    wx_ELJDropTarget_SetOnData cobj__obj  _func  
foreign import ccall "ELJDropTarget_SetOnData" wx_ELJDropTarget_SetOnData :: Ptr (TWXCDropTarget a) -> Ptr  b -> IO ()

-- | usage: (@wxcDropTargetSetOnDragOver obj func@).
wxcDropTargetSetOnDragOver :: WXCDropTarget  a -> Ptr  b ->  IO ()
wxcDropTargetSetOnDragOver _obj _func 
  = withObjectRef "wxcDropTargetSetOnDragOver" _obj $ \cobj__obj -> 
    wx_ELJDropTarget_SetOnDragOver cobj__obj  _func  
foreign import ccall "ELJDropTarget_SetOnDragOver" wx_ELJDropTarget_SetOnDragOver :: Ptr (TWXCDropTarget a) -> Ptr  b -> IO ()

-- | usage: (@wxcDropTargetSetOnDrop obj func@).
wxcDropTargetSetOnDrop :: WXCDropTarget  a -> Ptr  b ->  IO ()
wxcDropTargetSetOnDrop _obj _func 
  = withObjectRef "wxcDropTargetSetOnDrop" _obj $ \cobj__obj -> 
    wx_ELJDropTarget_SetOnDrop cobj__obj  _func  
foreign import ccall "ELJDropTarget_SetOnDrop" wx_ELJDropTarget_SetOnDrop :: Ptr (TWXCDropTarget a) -> Ptr  b -> IO ()

-- | usage: (@wxcDropTargetSetOnEnter obj func@).
wxcDropTargetSetOnEnter :: WXCDropTarget  a -> Ptr  b ->  IO ()
wxcDropTargetSetOnEnter _obj _func 
  = withObjectRef "wxcDropTargetSetOnEnter" _obj $ \cobj__obj -> 
    wx_ELJDropTarget_SetOnEnter cobj__obj  _func  
foreign import ccall "ELJDropTarget_SetOnEnter" wx_ELJDropTarget_SetOnEnter :: Ptr (TWXCDropTarget a) -> Ptr  b -> IO ()

-- | usage: (@wxcDropTargetSetOnLeave obj func@).
wxcDropTargetSetOnLeave :: WXCDropTarget  a -> Ptr  b ->  IO ()
wxcDropTargetSetOnLeave _obj _func 
  = withObjectRef "wxcDropTargetSetOnLeave" _obj $ \cobj__obj -> 
    wx_ELJDropTarget_SetOnLeave cobj__obj  _func  
foreign import ccall "ELJDropTarget_SetOnLeave" wx_ELJDropTarget_SetOnLeave :: Ptr (TWXCDropTarget a) -> Ptr  b -> IO ()

-- | usage: (@wxcEndBusyCursor@).
wxcEndBusyCursor ::  IO ()
wxcEndBusyCursor 
  = wx_wxcEndBusyCursor 
foreign import ccall "wxcEndBusyCursor" wx_wxcEndBusyCursor :: IO ()

-- | usage: (@wxcFileDropTargetCreate obj func@).
wxcFileDropTargetCreate :: Ptr  a -> Ptr  b ->  IO (WXCFileDropTarget  ())
wxcFileDropTargetCreate _obj _func 
  = withObjectResult $
    wx_ELJFileDropTarget_Create _obj  _func  
foreign import ccall "ELJFileDropTarget_Create" wx_ELJFileDropTarget_Create :: Ptr  a -> Ptr  b -> IO (Ptr (TWXCFileDropTarget ()))

-- | usage: (@wxcFileDropTargetDelete obj@).
wxcFileDropTargetDelete :: WXCFileDropTarget  a ->  IO ()
wxcFileDropTargetDelete _obj 
  = withObjectRef "wxcFileDropTargetDelete" _obj $ \cobj__obj -> 
    wx_ELJFileDropTarget_Delete cobj__obj  
foreign import ccall "ELJFileDropTarget_Delete" wx_ELJFileDropTarget_Delete :: Ptr (TWXCFileDropTarget a) -> IO ()

-- | usage: (@wxcFileDropTargetSetOnData obj func@).
wxcFileDropTargetSetOnData :: WXCFileDropTarget  a -> Ptr  b ->  IO ()
wxcFileDropTargetSetOnData _obj _func 
  = withObjectRef "wxcFileDropTargetSetOnData" _obj $ \cobj__obj -> 
    wx_ELJFileDropTarget_SetOnData cobj__obj  _func  
foreign import ccall "ELJFileDropTarget_SetOnData" wx_ELJFileDropTarget_SetOnData :: Ptr (TWXCFileDropTarget a) -> Ptr  b -> IO ()

-- | usage: (@wxcFileDropTargetSetOnDragOver obj func@).
wxcFileDropTargetSetOnDragOver :: WXCFileDropTarget  a -> Ptr  b ->  IO ()
wxcFileDropTargetSetOnDragOver _obj _func 
  = withObjectRef "wxcFileDropTargetSetOnDragOver" _obj $ \cobj__obj -> 
    wx_ELJFileDropTarget_SetOnDragOver cobj__obj  _func  
foreign import ccall "ELJFileDropTarget_SetOnDragOver" wx_ELJFileDropTarget_SetOnDragOver :: Ptr (TWXCFileDropTarget a) -> Ptr  b -> IO ()

-- | usage: (@wxcFileDropTargetSetOnDrop obj func@).
wxcFileDropTargetSetOnDrop :: WXCFileDropTarget  a -> Ptr  b ->  IO ()
wxcFileDropTargetSetOnDrop _obj _func 
  = withObjectRef "wxcFileDropTargetSetOnDrop" _obj $ \cobj__obj -> 
    wx_ELJFileDropTarget_SetOnDrop cobj__obj  _func  
foreign import ccall "ELJFileDropTarget_SetOnDrop" wx_ELJFileDropTarget_SetOnDrop :: Ptr (TWXCFileDropTarget a) -> Ptr  b -> IO ()

-- | usage: (@wxcFileDropTargetSetOnEnter obj func@).
wxcFileDropTargetSetOnEnter :: WXCFileDropTarget  a -> Ptr  b ->  IO ()
wxcFileDropTargetSetOnEnter _obj _func 
  = withObjectRef "wxcFileDropTargetSetOnEnter" _obj $ \cobj__obj -> 
    wx_ELJFileDropTarget_SetOnEnter cobj__obj  _func  
foreign import ccall "ELJFileDropTarget_SetOnEnter" wx_ELJFileDropTarget_SetOnEnter :: Ptr (TWXCFileDropTarget a) -> Ptr  b -> IO ()

-- | usage: (@wxcFileDropTargetSetOnLeave obj func@).
wxcFileDropTargetSetOnLeave :: WXCFileDropTarget  a -> Ptr  b ->  IO ()
wxcFileDropTargetSetOnLeave _obj _func 
  = withObjectRef "wxcFileDropTargetSetOnLeave" _obj $ \cobj__obj -> 
    wx_ELJFileDropTarget_SetOnLeave cobj__obj  _func  
foreign import ccall "ELJFileDropTarget_SetOnLeave" wx_ELJFileDropTarget_SetOnLeave :: Ptr (TWXCFileDropTarget a) -> Ptr  b -> IO ()

-- | usage: (@wxcFree p@).
wxcFree :: Ptr  a ->  IO ()
wxcFree p 
  = wx_wxcFree p  
foreign import ccall "wxcFree" wx_wxcFree :: Ptr  a -> IO ()

-- | usage: (@wxcGetMousePosition@).
wxcGetMousePosition ::  IO (Point)
wxcGetMousePosition 
  = withWxPointResult $
    wx_wxcGetMousePosition 
foreign import ccall "wxcGetMousePosition" wx_wxcGetMousePosition :: IO (Ptr (TWxPoint ()))

-- | usage: (@wxcGetPixelRGB buffer width xy@).
wxcGetPixelRGB :: Ptr Word8 -> Int -> Point ->  IO Int
wxcGetPixelRGB buffer width xy 
  = withIntResult $
    wx_wxcGetPixelRGB buffer  (toCInt width)  (toCIntPointX xy) (toCIntPointY xy)  
foreign import ccall "wxcGetPixelRGB" wx_wxcGetPixelRGB :: Ptr Word8 -> CInt -> CInt -> CInt -> IO CInt

-- | usage: (@wxcGetPixelRGBA buffer width xy@).
wxcGetPixelRGBA :: Ptr Word8 -> Int -> Point ->  IO Word
wxcGetPixelRGBA buffer width xy 
  = wx_wxcGetPixelRGBA buffer  (toCInt width)  (toCIntPointX xy) (toCIntPointY xy)  
foreign import ccall "wxcGetPixelRGBA" wx_wxcGetPixelRGBA :: Ptr Word8 -> CInt -> CInt -> CInt -> IO Word

-- | usage: (@wxcGridTableCreate obj eifGetNumberRows eifGetNumberCols eifGetValue eifSetValue eifIsEmptyCell eifClear eifInsertRows eifAppendRows eifDeleteRows eifInsertCols eifAppendCols eifDeleteCols eifSetRowLabelValue eifSetColLabelValue eifGetRowLabelValue eifGetColLabelValue@).
wxcGridTableCreate :: Ptr  a -> Ptr  b -> Ptr  c -> Ptr  d -> Ptr  e -> Ptr  f -> Ptr  g -> Ptr  h -> Ptr  i -> Ptr  j -> Ptr  k -> Ptr  l -> Ptr  m -> Ptr  n -> Ptr  o -> Ptr  p -> Ptr  q ->  IO (WXCGridTable  ())
wxcGridTableCreate _obj _EifGetNumberRows _EifGetNumberCols _EifGetValue _EifSetValue _EifIsEmptyCell _EifClear _EifInsertRows _EifAppendRows _EifDeleteRows _EifInsertCols _EifAppendCols _EifDeleteCols _EifSetRowLabelValue _EifSetColLabelValue _EifGetRowLabelValue _EifGetColLabelValue 
  = withObjectResult $
    wx_ELJGridTable_Create _obj  _EifGetNumberRows  _EifGetNumberCols  _EifGetValue  _EifSetValue  _EifIsEmptyCell  _EifClear  _EifInsertRows  _EifAppendRows  _EifDeleteRows  _EifInsertCols  _EifAppendCols  _EifDeleteCols  _EifSetRowLabelValue  _EifSetColLabelValue  _EifGetRowLabelValue  _EifGetColLabelValue  
foreign import ccall "ELJGridTable_Create" wx_ELJGridTable_Create :: Ptr  a -> Ptr  b -> Ptr  c -> Ptr  d -> Ptr  e -> Ptr  f -> Ptr  g -> Ptr  h -> Ptr  i -> Ptr  j -> Ptr  k -> Ptr  l -> Ptr  m -> Ptr  n -> Ptr  o -> Ptr  p -> Ptr  q -> IO (Ptr (TWXCGridTable ()))

-- | usage: (@wxcGridTableDelete obj@).
wxcGridTableDelete :: WXCGridTable  a ->  IO ()
wxcGridTableDelete
  = objectDelete


-- | usage: (@wxcGridTableGetView obj@).
wxcGridTableGetView :: WXCGridTable  a ->  IO (View  ())
wxcGridTableGetView _obj 
  = withObjectResult $
    withObjectRef "wxcGridTableGetView" _obj $ \cobj__obj -> 
    wx_ELJGridTable_GetView cobj__obj  
foreign import ccall "ELJGridTable_GetView" wx_ELJGridTable_GetView :: Ptr (TWXCGridTable a) -> IO (Ptr (TView ()))

-- | usage: (@wxcGridTableSendTableMessage obj id val1 val2@).
wxcGridTableSendTableMessage :: WXCGridTable  a -> Id -> Int -> Int ->  IO (Ptr  ())
wxcGridTableSendTableMessage _obj id val1 val2 
  = withObjectRef "wxcGridTableSendTableMessage" _obj $ \cobj__obj -> 
    wx_ELJGridTable_SendTableMessage cobj__obj  (toCInt id)  (toCInt val1)  (toCInt val2)  
foreign import ccall "ELJGridTable_SendTableMessage" wx_ELJGridTable_SendTableMessage :: Ptr (TWXCGridTable a) -> CInt -> CInt -> CInt -> IO (Ptr  ())

{- |  Return the /href/ attribute of the associated html anchor (if applicable)  -}
wxcHtmlEventGetHref :: WXCHtmlEvent  a ->  IO (String)
wxcHtmlEventGetHref self 
  = withManagedStringResult $
    withObjectRef "wxcHtmlEventGetHref" self $ \cobj_self -> 
    wxcHtmlEvent_GetHref cobj_self  
foreign import ccall "wxcHtmlEvent_GetHref" wxcHtmlEvent_GetHref :: Ptr (TWXCHtmlEvent a) -> IO (Ptr (TWxString ()))

-- | usage: (@wxcHtmlEventGetHtmlCell self@).
wxcHtmlEventGetHtmlCell :: WXCHtmlEvent  a ->  IO (HtmlCell  ())
wxcHtmlEventGetHtmlCell self 
  = withObjectResult $
    withObjectRef "wxcHtmlEventGetHtmlCell" self $ \cobj_self -> 
    wxcHtmlEvent_GetHtmlCell cobj_self  
foreign import ccall "wxcHtmlEvent_GetHtmlCell" wxcHtmlEvent_GetHtmlCell :: Ptr (TWXCHtmlEvent a) -> IO (Ptr (THtmlCell ()))

-- | usage: (@wxcHtmlEventGetHtmlCellId self@).
wxcHtmlEventGetHtmlCellId :: WXCHtmlEvent  a ->  IO (String)
wxcHtmlEventGetHtmlCellId self 
  = withManagedStringResult $
    withObjectRef "wxcHtmlEventGetHtmlCellId" self $ \cobj_self -> 
    wxcHtmlEvent_GetHtmlCellId cobj_self  
foreign import ccall "wxcHtmlEvent_GetHtmlCellId" wxcHtmlEvent_GetHtmlCellId :: Ptr (TWXCHtmlEvent a) -> IO (Ptr (TWxString ()))

-- | usage: (@wxcHtmlEventGetLogicalPosition self@).
wxcHtmlEventGetLogicalPosition :: WXCHtmlEvent  a ->  IO (Point)
wxcHtmlEventGetLogicalPosition self 
  = withWxPointResult $
    withObjectRef "wxcHtmlEventGetLogicalPosition" self $ \cobj_self -> 
    wxcHtmlEvent_GetLogicalPosition cobj_self  
foreign import ccall "wxcHtmlEvent_GetLogicalPosition" wxcHtmlEvent_GetLogicalPosition :: Ptr (TWXCHtmlEvent a) -> IO (Ptr (TWxPoint ()))

-- | usage: (@wxcHtmlEventGetMouseEvent self@).
wxcHtmlEventGetMouseEvent :: WXCHtmlEvent  a ->  IO (MouseEvent  ())
wxcHtmlEventGetMouseEvent self 
  = withObjectResult $
    withObjectRef "wxcHtmlEventGetMouseEvent" self $ \cobj_self -> 
    wxcHtmlEvent_GetMouseEvent cobj_self  
foreign import ccall "wxcHtmlEvent_GetMouseEvent" wxcHtmlEvent_GetMouseEvent :: Ptr (TWXCHtmlEvent a) -> IO (Ptr (TMouseEvent ()))

-- | usage: (@wxcHtmlEventGetTarget self@).
wxcHtmlEventGetTarget :: WXCHtmlEvent  a ->  IO (String)
wxcHtmlEventGetTarget self 
  = withManagedStringResult $
    withObjectRef "wxcHtmlEventGetTarget" self $ \cobj_self -> 
    wxcHtmlEvent_GetTarget cobj_self  
foreign import ccall "wxcHtmlEvent_GetTarget" wxcHtmlEvent_GetTarget :: Ptr (TWXCHtmlEvent a) -> IO (Ptr (TWxString ()))

-- | usage: (@wxcHtmlWindowCreate prt id lfttopwdthgt stl txt@).
wxcHtmlWindowCreate :: Window  a -> Id -> Rect -> Style -> String ->  IO (WXCHtmlWindow  ())
wxcHtmlWindowCreate _prt _id _lfttopwdthgt _stl _txt 
  = withObjectResult $
    withObjectPtr _prt $ \cobj__prt -> 
    withStringPtr _txt $ \cobj__txt -> 
    wxcHtmlWindow_Create cobj__prt  (toCInt _id)  (toCIntRectX _lfttopwdthgt) (toCIntRectY _lfttopwdthgt)(toCIntRectW _lfttopwdthgt) (toCIntRectH _lfttopwdthgt)  (toCInt _stl)  cobj__txt  
foreign import ccall "wxcHtmlWindow_Create" wxcHtmlWindow_Create :: Ptr (TWindow a) -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> Ptr (TWxString e) -> IO (Ptr (TWXCHtmlWindow ()))

-- | usage: (@wxcInitPixelsRGB buffer widthheight rgba@).
wxcInitPixelsRGB :: Ptr Word8 -> Size -> Int ->  IO ()
wxcInitPixelsRGB buffer widthheight rgba 
  = wx_wxcInitPixelsRGB buffer  (toCIntSizeW widthheight) (toCIntSizeH widthheight)  (toCInt rgba)  
foreign import ccall "wxcInitPixelsRGB" wx_wxcInitPixelsRGB :: Ptr Word8 -> CInt -> CInt -> CInt -> IO ()

-- | usage: (@wxcInitPixelsRGBA buffer widthheight rgba@).
wxcInitPixelsRGBA :: Ptr Word8 -> Size -> Word ->  IO ()
wxcInitPixelsRGBA buffer widthheight rgba 
  = wx_wxcInitPixelsRGBA buffer  (toCIntSizeW widthheight) (toCIntSizeH widthheight)  rgba  
foreign import ccall "wxcInitPixelsRGBA" wx_wxcInitPixelsRGBA :: Ptr Word8 -> CInt -> CInt -> Word -> IO ()

-- | usage: (@wxcIsBusy@).
wxcIsBusy ::  IO ()
wxcIsBusy 
  = wx_wxcIsBusy 
foreign import ccall "wxcIsBusy" wx_wxcIsBusy :: IO ()

-- | usage: (@wxcLogAddTraceMask obj str@).
wxcLogAddTraceMask :: WXCLog  a -> String ->  IO ()
wxcLogAddTraceMask _obj str 
  = withObjectRef "wxcLogAddTraceMask" _obj $ \cobj__obj -> 
    withCWString str $ \cstr_str -> 
    wx_ELJLog_AddTraceMask cobj__obj  cstr_str  
foreign import ccall "ELJLog_AddTraceMask" wx_ELJLog_AddTraceMask :: Ptr (TWXCLog a) -> CWString -> IO ()

-- | usage: (@wxcLogCreate obj fnc@).
wxcLogCreate :: Ptr  a -> Ptr  b ->  IO (WXCLog  ())
wxcLogCreate _obj _fnc 
  = withObjectResult $
    wx_ELJLog_Create _obj  _fnc  
foreign import ccall "ELJLog_Create" wx_ELJLog_Create :: Ptr  a -> Ptr  b -> IO (Ptr (TWXCLog ()))

-- | usage: (@wxcLogDelete obj@).
wxcLogDelete :: WXCLog  a ->  IO ()
wxcLogDelete _obj 
  = withObjectRef "wxcLogDelete" _obj $ \cobj__obj -> 
    wx_ELJLog_Delete cobj__obj  
foreign import ccall "ELJLog_Delete" wx_ELJLog_Delete :: Ptr (TWXCLog a) -> IO ()

-- | usage: (@wxcLogDontCreateOnDemand obj@).
wxcLogDontCreateOnDemand :: WXCLog  a ->  IO ()
wxcLogDontCreateOnDemand _obj 
  = withObjectRef "wxcLogDontCreateOnDemand" _obj $ \cobj__obj -> 
    wx_ELJLog_DontCreateOnDemand cobj__obj  
foreign import ccall "ELJLog_DontCreateOnDemand" wx_ELJLog_DontCreateOnDemand :: Ptr (TWXCLog a) -> IO ()

-- | usage: (@wxcLogEnableLogging obj doIt@).
wxcLogEnableLogging :: WXCLog  a -> Bool ->  IO Int
wxcLogEnableLogging _obj doIt 
  = withIntResult $
    withObjectRef "wxcLogEnableLogging" _obj $ \cobj__obj -> 
    wx_ELJLog_EnableLogging cobj__obj  (toCBool doIt)  
foreign import ccall "ELJLog_EnableLogging" wx_ELJLog_EnableLogging :: Ptr (TWXCLog a) -> CBool -> IO CInt

-- | usage: (@wxcLogFlush obj@).
wxcLogFlush :: WXCLog  a ->  IO ()
wxcLogFlush _obj 
  = withObjectRef "wxcLogFlush" _obj $ \cobj__obj -> 
    wx_ELJLog_Flush cobj__obj  
foreign import ccall "ELJLog_Flush" wx_ELJLog_Flush :: Ptr (TWXCLog a) -> IO ()

-- | usage: (@wxcLogFlushActive obj@).
wxcLogFlushActive :: WXCLog  a ->  IO ()
wxcLogFlushActive _obj 
  = withObjectRef "wxcLogFlushActive" _obj $ \cobj__obj -> 
    wx_ELJLog_FlushActive cobj__obj  
foreign import ccall "ELJLog_FlushActive" wx_ELJLog_FlushActive :: Ptr (TWXCLog a) -> IO ()

-- | usage: (@wxcLogGetActiveTarget@).
wxcLogGetActiveTarget ::  IO (Ptr  ())
wxcLogGetActiveTarget 
  = wx_ELJLog_GetActiveTarget 
foreign import ccall "ELJLog_GetActiveTarget" wx_ELJLog_GetActiveTarget :: IO (Ptr  ())

-- | usage: (@wxcLogGetTimestamp obj@).
wxcLogGetTimestamp :: WXCLog  a ->  IO (Ptr  ())
wxcLogGetTimestamp _obj 
  = withObjectRef "wxcLogGetTimestamp" _obj $ \cobj__obj -> 
    wx_ELJLog_GetTimestamp cobj__obj  
foreign import ccall "ELJLog_GetTimestamp" wx_ELJLog_GetTimestamp :: Ptr (TWXCLog a) -> IO (Ptr  ())

-- | usage: (@wxcLogGetVerbose obj@).
wxcLogGetVerbose :: WXCLog  a ->  IO Int
wxcLogGetVerbose _obj 
  = withIntResult $
    withObjectRef "wxcLogGetVerbose" _obj $ \cobj__obj -> 
    wx_ELJLog_GetVerbose cobj__obj  
foreign import ccall "ELJLog_GetVerbose" wx_ELJLog_GetVerbose :: Ptr (TWXCLog a) -> IO CInt

-- | usage: (@wxcLogHasPendingMessages obj@).
wxcLogHasPendingMessages :: WXCLog  a ->  IO Bool
wxcLogHasPendingMessages _obj 
  = withBoolResult $
    withObjectRef "wxcLogHasPendingMessages" _obj $ \cobj__obj -> 
    wx_ELJLog_HasPendingMessages cobj__obj  
foreign import ccall "ELJLog_HasPendingMessages" wx_ELJLog_HasPendingMessages :: Ptr (TWXCLog a) -> IO CBool

-- | usage: (@wxcLogIsAllowedTraceMask obj mask@).
wxcLogIsAllowedTraceMask :: WXCLog  a -> Mask  b ->  IO Bool
wxcLogIsAllowedTraceMask _obj mask 
  = withBoolResult $
    withObjectRef "wxcLogIsAllowedTraceMask" _obj $ \cobj__obj -> 
    withObjectPtr mask $ \cobj_mask -> 
    wx_ELJLog_IsAllowedTraceMask cobj__obj  cobj_mask  
foreign import ccall "ELJLog_IsAllowedTraceMask" wx_ELJLog_IsAllowedTraceMask :: Ptr (TWXCLog a) -> Ptr (TMask b) -> IO CBool

-- | usage: (@wxcLogIsEnabled obj@).
wxcLogIsEnabled :: WXCLog  a ->  IO Bool
wxcLogIsEnabled _obj 
  = withBoolResult $
    withObjectRef "wxcLogIsEnabled" _obj $ \cobj__obj -> 
    wx_ELJLog_IsEnabled cobj__obj  
foreign import ccall "ELJLog_IsEnabled" wx_ELJLog_IsEnabled :: Ptr (TWXCLog a) -> IO CBool

-- | usage: (@wxcLogOnLog obj level szString t@).
wxcLogOnLog :: WXCLog  a -> Int -> Ptr  c -> Int ->  IO ()
wxcLogOnLog _obj level szString t 
  = withObjectRef "wxcLogOnLog" _obj $ \cobj__obj -> 
    wx_ELJLog_OnLog cobj__obj  (toCInt level)  szString  (toCInt t)  
foreign import ccall "ELJLog_OnLog" wx_ELJLog_OnLog :: Ptr (TWXCLog a) -> CInt -> Ptr  c -> CInt -> IO ()

-- | usage: (@wxcLogRemoveTraceMask obj str@).
wxcLogRemoveTraceMask :: WXCLog  a -> String ->  IO ()
wxcLogRemoveTraceMask _obj str 
  = withObjectRef "wxcLogRemoveTraceMask" _obj $ \cobj__obj -> 
    withCWString str $ \cstr_str -> 
    wx_ELJLog_RemoveTraceMask cobj__obj  cstr_str  
foreign import ccall "ELJLog_RemoveTraceMask" wx_ELJLog_RemoveTraceMask :: Ptr (TWXCLog a) -> CWString -> IO ()

-- | usage: (@wxcLogResume obj@).
wxcLogResume :: WXCLog  a ->  IO ()
wxcLogResume _obj 
  = withObjectRef "wxcLogResume" _obj $ \cobj__obj -> 
    wx_ELJLog_Resume cobj__obj  
foreign import ccall "ELJLog_Resume" wx_ELJLog_Resume :: Ptr (TWXCLog a) -> IO ()

-- | usage: (@wxcLogSetActiveTarget pLogger@).
wxcLogSetActiveTarget :: WXCLog  a ->  IO (Ptr  ())
wxcLogSetActiveTarget pLogger 
  = withObjectRef "wxcLogSetActiveTarget" pLogger $ \cobj_pLogger -> 
    wx_ELJLog_SetActiveTarget cobj_pLogger  
foreign import ccall "ELJLog_SetActiveTarget" wx_ELJLog_SetActiveTarget :: Ptr (TWXCLog a) -> IO (Ptr  ())

-- | usage: (@wxcLogSetTimestamp obj ts@).
wxcLogSetTimestamp :: WXCLog  a -> Ptr  b ->  IO ()
wxcLogSetTimestamp _obj ts 
  = withObjectRef "wxcLogSetTimestamp" _obj $ \cobj__obj -> 
    wx_ELJLog_SetTimestamp cobj__obj  ts  
foreign import ccall "ELJLog_SetTimestamp" wx_ELJLog_SetTimestamp :: Ptr (TWXCLog a) -> Ptr  b -> IO ()

-- | usage: (@wxcLogSetVerbose obj bVerbose@).
wxcLogSetVerbose :: WXCLog  a -> Int ->  IO ()
wxcLogSetVerbose _obj bVerbose 
  = withObjectRef "wxcLogSetVerbose" _obj $ \cobj__obj -> 
    wx_ELJLog_SetVerbose cobj__obj  (toCInt bVerbose)  
foreign import ccall "ELJLog_SetVerbose" wx_ELJLog_SetVerbose :: Ptr (TWXCLog a) -> CInt -> IO ()

-- | usage: (@wxcLogSuspend obj@).
wxcLogSuspend :: WXCLog  a ->  IO ()
wxcLogSuspend _obj 
  = withObjectRef "wxcLogSuspend" _obj $ \cobj__obj -> 
    wx_ELJLog_Suspend cobj__obj  
foreign import ccall "ELJLog_Suspend" wx_ELJLog_Suspend :: Ptr (TWXCLog a) -> IO ()

-- | usage: (@wxcMalloc size@).
wxcMalloc :: Int ->  IO (Ptr  ())
wxcMalloc size 
  = wx_wxcMalloc (toCInt size)  
foreign import ccall "wxcMalloc" wx_wxcMalloc :: CInt -> IO (Ptr  ())

-- | usage: (@wxcPreviewControlBarCreate preview buttons parent title xywh style@).
wxcPreviewControlBarCreate :: Ptr  a -> Int -> Window  c -> Ptr  d -> Rect -> Int ->  IO (WXCPreviewControlBar  ())
wxcPreviewControlBarCreate preview buttons parent title xywh style 
  = withObjectResult $
    withObjectPtr parent $ \cobj_parent -> 
    wx_ELJPreviewControlBar_Create preview  (toCInt buttons)  cobj_parent  title  (toCIntRectX xywh) (toCIntRectY xywh)(toCIntRectW xywh) (toCIntRectH xywh)  (toCInt style)  
foreign import ccall "ELJPreviewControlBar_Create" wx_ELJPreviewControlBar_Create :: Ptr  a -> CInt -> Ptr (TWindow c) -> Ptr  d -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TWXCPreviewControlBar ()))

-- | usage: (@wxcPreviewFrameCreate obj wxinit createcanvas createtoolbar preview parent title xywh style@).
wxcPreviewFrameCreate :: Ptr  a -> Ptr  b -> Ptr  c -> Ptr  d -> Ptr  e -> Window  f -> Ptr  g -> Rect -> Int ->  IO (WXCPreviewFrame  ())
wxcPreviewFrameCreate _obj _init _createcanvas _createtoolbar preview parent title xywh style 
  = withObjectResult $
    withObjectPtr parent $ \cobj_parent -> 
    wx_ELJPreviewFrame_Create _obj  _init  _createcanvas  _createtoolbar  preview  cobj_parent  title  (toCIntRectX xywh) (toCIntRectY xywh)(toCIntRectW xywh) (toCIntRectH xywh)  (toCInt style)  
foreign import ccall "ELJPreviewFrame_Create" wx_ELJPreviewFrame_Create :: Ptr  a -> Ptr  b -> Ptr  c -> Ptr  d -> Ptr  e -> Ptr (TWindow f) -> Ptr  g -> CInt -> CInt -> CInt -> CInt -> CInt -> IO (Ptr (TWXCPreviewFrame ()))

-- | usage: (@wxcPreviewFrameGetControlBar obj@).
wxcPreviewFrameGetControlBar :: WXCPreviewFrame  a ->  IO (Ptr  ())
wxcPreviewFrameGetControlBar _obj 
  = withObjectRef "wxcPreviewFrameGetControlBar" _obj $ \cobj__obj -> 
    wx_ELJPreviewFrame_GetControlBar cobj__obj  
foreign import ccall "ELJPreviewFrame_GetControlBar" wx_ELJPreviewFrame_GetControlBar :: Ptr (TWXCPreviewFrame a) -> IO (Ptr  ())

-- | usage: (@wxcPreviewFrameGetPreviewCanvas obj@).
wxcPreviewFrameGetPreviewCanvas :: WXCPreviewFrame  a ->  IO (PreviewCanvas  ())
wxcPreviewFrameGetPreviewCanvas _obj 
  = withObjectResult $
    withObjectRef "wxcPreviewFrameGetPreviewCanvas" _obj $ \cobj__obj -> 
    wx_ELJPreviewFrame_GetPreviewCanvas cobj__obj  
foreign import ccall "ELJPreviewFrame_GetPreviewCanvas" wx_ELJPreviewFrame_GetPreviewCanvas :: Ptr (TWXCPreviewFrame a) -> IO (Ptr (TPreviewCanvas ()))

-- | usage: (@wxcPreviewFrameGetPrintPreview obj@).
wxcPreviewFrameGetPrintPreview :: WXCPreviewFrame  a ->  IO (PrintPreview  ())
wxcPreviewFrameGetPrintPreview _obj 
  = withObjectResult $
    withObjectRef "wxcPreviewFrameGetPrintPreview" _obj $ \cobj__obj -> 
    wx_ELJPreviewFrame_GetPrintPreview cobj__obj  
foreign import ccall "ELJPreviewFrame_GetPrintPreview" wx_ELJPreviewFrame_GetPrintPreview :: Ptr (TWXCPreviewFrame a) -> IO (Ptr (TPrintPreview ()))

-- | usage: (@wxcPreviewFrameInitialize obj@).
wxcPreviewFrameInitialize :: WXCPreviewFrame  a ->  IO ()
wxcPreviewFrameInitialize _obj 
  = withObjectRef "wxcPreviewFrameInitialize" _obj $ \cobj__obj -> 
    wx_ELJPreviewFrame_Initialize cobj__obj  
foreign import ccall "ELJPreviewFrame_Initialize" wx_ELJPreviewFrame_Initialize :: Ptr (TWXCPreviewFrame a) -> IO ()

-- | usage: (@wxcPreviewFrameSetControlBar obj obj@).
wxcPreviewFrameSetControlBar :: WXCPreviewFrame  a -> Ptr  b ->  IO ()
wxcPreviewFrameSetControlBar _obj obj 
  = withObjectRef "wxcPreviewFrameSetControlBar" _obj $ \cobj__obj -> 
    wx_ELJPreviewFrame_SetControlBar cobj__obj  obj  
foreign import ccall "ELJPreviewFrame_SetControlBar" wx_ELJPreviewFrame_SetControlBar :: Ptr (TWXCPreviewFrame a) -> Ptr  b -> IO ()

-- | usage: (@wxcPreviewFrameSetPreviewCanvas obj obj@).
wxcPreviewFrameSetPreviewCanvas :: WXCPreviewFrame  a -> PreviewCanvas  b ->  IO ()
wxcPreviewFrameSetPreviewCanvas _obj obj 
  = withObjectRef "wxcPreviewFrameSetPreviewCanvas" _obj $ \cobj__obj -> 
    withObjectPtr obj $ \cobj_obj -> 
    wx_ELJPreviewFrame_SetPreviewCanvas cobj__obj  cobj_obj  
foreign import ccall "ELJPreviewFrame_SetPreviewCanvas" wx_ELJPreviewFrame_SetPreviewCanvas :: Ptr (TWXCPreviewFrame a) -> Ptr (TPreviewCanvas b) -> IO ()

-- | usage: (@wxcPreviewFrameSetPrintPreview obj obj@).
wxcPreviewFrameSetPrintPreview :: WXCPreviewFrame  a -> PrintPreview  b ->  IO ()
wxcPreviewFrameSetPrintPreview _obj obj 
  = withObjectRef "wxcPreviewFrameSetPrintPreview" _obj $ \cobj__obj -> 
    withObjectPtr obj $ \cobj_obj -> 
    wx_ELJPreviewFrame_SetPrintPreview cobj__obj  cobj_obj  
foreign import ccall "ELJPreviewFrame_SetPrintPreview" wx_ELJPreviewFrame_SetPrintPreview :: Ptr (TWXCPreviewFrame a) -> Ptr (TPrintPreview b) -> IO ()

-- | usage: (@wxcPrintEventGetContinue self@).
wxcPrintEventGetContinue :: WXCPrintEvent  a ->  IO Bool
wxcPrintEventGetContinue self 
  = withBoolResult $
    withObjectRef "wxcPrintEventGetContinue" self $ \cobj_self -> 
    wxcPrintEvent_GetContinue cobj_self  
foreign import ccall "wxcPrintEvent_GetContinue" wxcPrintEvent_GetContinue :: Ptr (TWXCPrintEvent a) -> IO CBool

-- | usage: (@wxcPrintEventGetEndPage self@).
wxcPrintEventGetEndPage :: WXCPrintEvent  a ->  IO Int
wxcPrintEventGetEndPage self 
  = withIntResult $
    withObjectRef "wxcPrintEventGetEndPage" self $ \cobj_self -> 
    wxcPrintEvent_GetEndPage cobj_self  
foreign import ccall "wxcPrintEvent_GetEndPage" wxcPrintEvent_GetEndPage :: Ptr (TWXCPrintEvent a) -> IO CInt

-- | usage: (@wxcPrintEventGetPage self@).
wxcPrintEventGetPage :: WXCPrintEvent  a ->  IO Int
wxcPrintEventGetPage self 
  = withIntResult $
    withObjectRef "wxcPrintEventGetPage" self $ \cobj_self -> 
    wxcPrintEvent_GetPage cobj_self  
foreign import ccall "wxcPrintEvent_GetPage" wxcPrintEvent_GetPage :: Ptr (TWXCPrintEvent a) -> IO CInt

{- |  Usage: @wxcPrintEventGetPrintout self@. Do not delete the associated printout!  -}
wxcPrintEventGetPrintout :: WXCPrintEvent  a ->  IO (WXCPrintout  ())
wxcPrintEventGetPrintout self 
  = withObjectResult $
    withObjectRef "wxcPrintEventGetPrintout" self $ \cobj_self -> 
    wxcPrintEvent_GetPrintout cobj_self  
foreign import ccall "wxcPrintEvent_GetPrintout" wxcPrintEvent_GetPrintout :: Ptr (TWXCPrintEvent a) -> IO (Ptr (TWXCPrintout ()))

-- | usage: (@wxcPrintEventSetContinue self cont@).
wxcPrintEventSetContinue :: WXCPrintEvent  a -> Bool ->  IO ()
wxcPrintEventSetContinue self cont 
  = withObjectRef "wxcPrintEventSetContinue" self $ \cobj_self -> 
    wxcPrintEvent_SetContinue cobj_self  (toCBool cont)  
foreign import ccall "wxcPrintEvent_SetContinue" wxcPrintEvent_SetContinue :: Ptr (TWXCPrintEvent a) -> CBool -> IO ()

-- | usage: (@wxcPrintEventSetPageLimits self startPage endPage fromPage toPage@).
wxcPrintEventSetPageLimits :: WXCPrintEvent  a -> Int -> Int -> Int -> Int ->  IO ()
wxcPrintEventSetPageLimits self startPage endPage fromPage toPage 
  = withObjectRef "wxcPrintEventSetPageLimits" self $ \cobj_self -> 
    wxcPrintEvent_SetPageLimits cobj_self  (toCInt startPage)  (toCInt endPage)  (toCInt fromPage)  (toCInt toPage)  
foreign import ccall "wxcPrintEvent_SetPageLimits" wxcPrintEvent_SetPageLimits :: Ptr (TWXCPrintEvent a) -> CInt -> CInt -> CInt -> CInt -> IO ()

-- | usage: (@wxcPrintoutCreate title@).
wxcPrintoutCreate :: String ->  IO (WXCPrintout  ())
wxcPrintoutCreate title 
  = withObjectResult $
    withStringPtr title $ \cobj_title -> 
    wxcPrintout_Create cobj_title  
foreign import ccall "wxcPrintout_Create" wxcPrintout_Create :: Ptr (TWxString a) -> IO (Ptr (TWXCPrintout ()))

-- | usage: (@wxcPrintoutDelete self@).
wxcPrintoutDelete :: WXCPrintout  a ->  IO ()
wxcPrintoutDelete
  = objectDelete


{- |  Usage: @wxcPrintoutGetEvtHandler self@. Do not delete the associated event handler!  -}
wxcPrintoutGetEvtHandler :: WXCPrintout  a ->  IO (WXCPrintoutHandler  ())
wxcPrintoutGetEvtHandler self 
  = withObjectResult $
    withObjectRef "wxcPrintoutGetEvtHandler" self $ \cobj_self -> 
    wxcPrintout_GetEvtHandler cobj_self  
foreign import ccall "wxcPrintout_GetEvtHandler" wxcPrintout_GetEvtHandler :: Ptr (TWXCPrintout a) -> IO (Ptr (TWXCPrintoutHandler ()))

-- | usage: (@wxcPrintoutSetPageLimits self startPage endPage fromPage toPage@).
wxcPrintoutSetPageLimits :: WXCPrintout  a -> Int -> Int -> Int -> Int ->  IO ()
wxcPrintoutSetPageLimits self startPage endPage fromPage toPage 
  = withObjectRef "wxcPrintoutSetPageLimits" self $ \cobj_self -> 
    wxcPrintout_SetPageLimits cobj_self  (toCInt startPage)  (toCInt endPage)  (toCInt fromPage)  (toCInt toPage)  
foreign import ccall "wxcPrintout_SetPageLimits" wxcPrintout_SetPageLimits :: Ptr (TWXCPrintout a) -> CInt -> CInt -> CInt -> CInt -> IO ()

-- | usage: (@wxcSetPixelRGB buffer width xy rgb@).
wxcSetPixelRGB :: Ptr Word8 -> Int -> Point -> Int ->  IO ()
wxcSetPixelRGB buffer width xy rgb 
  = wx_wxcSetPixelRGB buffer  (toCInt width)  (toCIntPointX xy) (toCIntPointY xy)  (toCInt rgb)  
foreign import ccall "wxcSetPixelRGB" wx_wxcSetPixelRGB :: Ptr Word8 -> CInt -> CInt -> CInt -> CInt -> IO ()

-- | usage: (@wxcSetPixelRGBA buffer width xy rgba@).
wxcSetPixelRGBA :: Ptr Word8 -> Int -> Point -> Word ->  IO ()
wxcSetPixelRGBA buffer width xy rgba 
  = wx_wxcSetPixelRGBA buffer  (toCInt width)  (toCIntPointX xy) (toCIntPointY xy)  rgba  
foreign import ccall "wxcSetPixelRGBA" wx_wxcSetPixelRGBA :: Ptr Word8 -> CInt -> CInt -> CInt -> Word -> IO ()

-- | usage: (@wxcSetPixelRowRGB buffer width xy rgbStart rgbEnd count@).
wxcSetPixelRowRGB :: Ptr Word8 -> Int -> Point -> Int -> Int -> Int ->  IO ()
wxcSetPixelRowRGB buffer width xy rgbStart rgbEnd count 
  = wx_wxcSetPixelRowRGB buffer  (toCInt width)  (toCIntPointX xy) (toCIntPointY xy)  (toCInt rgbStart)  (toCInt rgbEnd)  (toCInt count)  
foreign import ccall "wxcSetPixelRowRGB" wx_wxcSetPixelRowRGB :: Ptr Word8 -> CInt -> CInt -> CInt -> CInt -> CInt -> CInt -> IO ()

-- | usage: (@wxcSetPixelRowRGBA buffer width xy rgbaStart rgbEnd count@).
wxcSetPixelRowRGBA :: Ptr Word8 -> Int -> Point -> Int -> Int -> Word ->  IO ()
wxcSetPixelRowRGBA buffer width xy rgbaStart rgbEnd count 
  = wx_wxcSetPixelRowRGBA buffer  (toCInt width)  (toCIntPointX xy) (toCIntPointY xy)  (toCInt rgbaStart)  (toCInt rgbEnd)  count  
foreign import ccall "wxcSetPixelRowRGBA" wx_wxcSetPixelRowRGBA :: Ptr Word8 -> CInt -> CInt -> CInt -> CInt -> CInt -> Word -> IO ()

-- | usage: (@wxcSysErrorCode@).
wxcSysErrorCode ::  IO Int
wxcSysErrorCode 
  = withIntResult $
    wx_ELJSysErrorCode 
foreign import ccall "ELJSysErrorCode" wx_ELJSysErrorCode :: IO CInt

-- | usage: (@wxcSysErrorMsg nErrCode@).
wxcSysErrorMsg :: Int ->  IO (Ptr  ())
wxcSysErrorMsg nErrCode 
  = wx_ELJSysErrorMsg (toCInt nErrCode)  
foreign import ccall "ELJSysErrorMsg" wx_ELJSysErrorMsg :: CInt -> IO (Ptr  ())

-- | usage: (@wxcSystemSettingsGetColour systemColour@).
wxcSystemSettingsGetColour :: Int ->  IO (Color)
wxcSystemSettingsGetColour systemColour 
  = withManagedColourResult $
    wx_wxcSystemSettingsGetColour (toCInt systemColour)  
foreign import ccall "wxcSystemSettingsGetColour" wx_wxcSystemSettingsGetColour :: CInt -> IO (Ptr (TColour ()))

-- | usage: (@wxcTextDropTargetCreate obj func@).
wxcTextDropTargetCreate :: Ptr  a -> Ptr  b ->  IO (WXCTextDropTarget  ())
wxcTextDropTargetCreate _obj _func 
  = withObjectResult $
    wx_ELJTextDropTarget_Create _obj  _func  
foreign import ccall "ELJTextDropTarget_Create" wx_ELJTextDropTarget_Create :: Ptr  a -> Ptr  b -> IO (Ptr (TWXCTextDropTarget ()))

-- | usage: (@wxcTextDropTargetDelete obj@).
wxcTextDropTargetDelete :: WXCTextDropTarget  a ->  IO ()
wxcTextDropTargetDelete _obj 
  = withObjectRef "wxcTextDropTargetDelete" _obj $ \cobj__obj -> 
    wx_ELJTextDropTarget_Delete cobj__obj  
foreign import ccall "ELJTextDropTarget_Delete" wx_ELJTextDropTarget_Delete :: Ptr (TWXCTextDropTarget a) -> IO ()

-- | usage: (@wxcTextDropTargetSetOnData obj func@).
wxcTextDropTargetSetOnData :: WXCTextDropTarget  a -> Ptr  b ->  IO ()
wxcTextDropTargetSetOnData _obj _func 
  = withObjectRef "wxcTextDropTargetSetOnData" _obj $ \cobj__obj -> 
    wx_ELJTextDropTarget_SetOnData cobj__obj  _func  
foreign import ccall "ELJTextDropTarget_SetOnData" wx_ELJTextDropTarget_SetOnData :: Ptr (TWXCTextDropTarget a) -> Ptr  b -> IO ()

-- | usage: (@wxcTextDropTargetSetOnDragOver obj func@).
wxcTextDropTargetSetOnDragOver :: WXCTextDropTarget  a -> Ptr  b ->  IO ()
wxcTextDropTargetSetOnDragOver _obj _func 
  = withObjectRef "wxcTextDropTargetSetOnDragOver" _obj $ \cobj__obj -> 
    wx_ELJTextDropTarget_SetOnDragOver cobj__obj  _func  
foreign import ccall "ELJTextDropTarget_SetOnDragOver" wx_ELJTextDropTarget_SetOnDragOver :: Ptr (TWXCTextDropTarget a) -> Ptr  b -> IO ()

-- | usage: (@wxcTextDropTargetSetOnDrop obj func@).
wxcTextDropTargetSetOnDrop :: WXCTextDropTarget  a -> Ptr  b ->  IO ()
wxcTextDropTargetSetOnDrop _obj _func 
  = withObjectRef "wxcTextDropTargetSetOnDrop" _obj $ \cobj__obj -> 
    wx_ELJTextDropTarget_SetOnDrop cobj__obj  _func  
foreign import ccall "ELJTextDropTarget_SetOnDrop" wx_ELJTextDropTarget_SetOnDrop :: Ptr (TWXCTextDropTarget a) -> Ptr  b -> IO ()

-- | usage: (@wxcTextDropTargetSetOnEnter obj func@).
wxcTextDropTargetSetOnEnter :: WXCTextDropTarget  a -> Ptr  b ->  IO ()
wxcTextDropTargetSetOnEnter _obj _func 
  = withObjectRef "wxcTextDropTargetSetOnEnter" _obj $ \cobj__obj -> 
    wx_ELJTextDropTarget_SetOnEnter cobj__obj  _func  
foreign import ccall "ELJTextDropTarget_SetOnEnter" wx_ELJTextDropTarget_SetOnEnter :: Ptr (TWXCTextDropTarget a) -> Ptr  b -> IO ()

-- | usage: (@wxcTextDropTargetSetOnLeave obj func@).
wxcTextDropTargetSetOnLeave :: WXCTextDropTarget  a -> Ptr  b ->  IO ()
wxcTextDropTargetSetOnLeave _obj _func 
  = withObjectRef "wxcTextDropTargetSetOnLeave" _obj $ \cobj__obj -> 
    wx_ELJTextDropTarget_SetOnLeave cobj__obj  _func  
foreign import ccall "ELJTextDropTarget_SetOnLeave" wx_ELJTextDropTarget_SetOnLeave :: Ptr (TWXCTextDropTarget a) -> Ptr  b -> IO ()

-- | usage: (@wxcTextValidatorCreate obj fnc txt stl@).
wxcTextValidatorCreate :: Ptr  a -> Ptr  b -> String -> Style ->  IO (WXCTextValidator  ())
wxcTextValidatorCreate _obj _fnc _txt _stl 
  = withObjectResult $
    withCWString _txt $ \cstr__txt -> 
    wx_ELJTextValidator_Create _obj  _fnc  cstr__txt  (toCInt _stl)  
foreign import ccall "ELJTextValidator_Create" wx_ELJTextValidator_Create :: Ptr  a -> Ptr  b -> CWString -> CInt -> IO (Ptr (TWXCTextValidator ()))

-- | usage: (@wxcTreeItemDataCreate closure@).
wxcTreeItemDataCreate :: Closure  a ->  IO (WXCTreeItemData  ())
wxcTreeItemDataCreate closure 
  = withObjectResult $
    withObjectPtr closure $ \cobj_closure -> 
    wxcTreeItemData_Create cobj_closure  
foreign import ccall "wxcTreeItemData_Create" wxcTreeItemData_Create :: Ptr (TClosure a) -> IO (Ptr (TWXCTreeItemData ()))

-- | usage: (@wxcTreeItemDataGetClientClosure self@).
wxcTreeItemDataGetClientClosure :: WXCTreeItemData  a ->  IO (Closure  ())
wxcTreeItemDataGetClientClosure self 
  = withObjectResult $
    withObjectRef "wxcTreeItemDataGetClientClosure" self $ \cobj_self -> 
    wxcTreeItemData_GetClientClosure cobj_self  
foreign import ccall "wxcTreeItemData_GetClientClosure" wxcTreeItemData_GetClientClosure :: Ptr (TWXCTreeItemData a) -> IO (Ptr (TClosure ()))

-- | usage: (@wxcTreeItemDataSetClientClosure self closure@).
wxcTreeItemDataSetClientClosure :: WXCTreeItemData  a -> Closure  b ->  IO ()
wxcTreeItemDataSetClientClosure self closure 
  = withObjectRef "wxcTreeItemDataSetClientClosure" self $ \cobj_self -> 
    withObjectPtr closure $ \cobj_closure -> 
    wxcTreeItemData_SetClientClosure cobj_self  cobj_closure  
foreign import ccall "wxcTreeItemData_SetClientClosure" wxcTreeItemData_SetClientClosure :: Ptr (TWXCTreeItemData a) -> Ptr (TClosure b) -> IO ()

-- | usage: (@wxcWakeUpIdle@).
wxcWakeUpIdle ::  IO ()
wxcWakeUpIdle 
  = wx_wxcWakeUpIdle 
foreign import ccall "wxcWakeUpIdle" wx_wxcWakeUpIdle :: IO ()

-- | usage: (@wxobjectDelete obj@).
wxobjectDelete :: WxObject  a ->  IO ()
wxobjectDelete
  = objectDelete


-- | usage: (@xmlResourceAddHandler obj handler@).
xmlResourceAddHandler :: XmlResource  a -> EvtHandler  b ->  IO ()
xmlResourceAddHandler _obj handler 
  = withObjectRef "xmlResourceAddHandler" _obj $ \cobj__obj -> 
    withObjectPtr handler $ \cobj_handler -> 
    wxXmlResource_AddHandler cobj__obj  cobj_handler  
foreign import ccall "wxXmlResource_AddHandler" wxXmlResource_AddHandler :: Ptr (TXmlResource a) -> Ptr (TEvtHandler b) -> IO ()

-- | usage: (@xmlResourceAddSubclassFactory obj factory@).
xmlResourceAddSubclassFactory :: XmlResource  a -> Ptr  b ->  IO ()
xmlResourceAddSubclassFactory _obj factory 
  = withObjectRef "xmlResourceAddSubclassFactory" _obj $ \cobj__obj -> 
    wxXmlResource_AddSubclassFactory cobj__obj  factory  
foreign import ccall "wxXmlResource_AddSubclassFactory" wxXmlResource_AddSubclassFactory :: Ptr (TXmlResource a) -> Ptr  b -> IO ()

-- | usage: (@xmlResourceAttachUnknownControl obj control parent@).
xmlResourceAttachUnknownControl :: XmlResource  a -> Control  b -> Window  c ->  IO Int
xmlResourceAttachUnknownControl _obj control parent 
  = withIntResult $
    withObjectRef "xmlResourceAttachUnknownControl" _obj $ \cobj__obj -> 
    withObjectPtr control $ \cobj_control -> 
    withObjectPtr parent $ \cobj_parent -> 
    wxXmlResource_AttachUnknownControl cobj__obj  cobj_control  cobj_parent  
foreign import ccall "wxXmlResource_AttachUnknownControl" wxXmlResource_AttachUnknownControl :: Ptr (TXmlResource a) -> Ptr (TControl b) -> Ptr (TWindow c) -> IO CInt

-- | usage: (@xmlResourceClearHandlers obj@).
xmlResourceClearHandlers :: XmlResource  a ->  IO ()
xmlResourceClearHandlers _obj 
  = withObjectRef "xmlResourceClearHandlers" _obj $ \cobj__obj -> 
    wxXmlResource_ClearHandlers cobj__obj  
foreign import ccall "wxXmlResource_ClearHandlers" wxXmlResource_ClearHandlers :: Ptr (TXmlResource a) -> IO ()

-- | usage: (@xmlResourceCompareVersion obj major minor release revision@).
xmlResourceCompareVersion :: XmlResource  a -> Int -> Int -> Int -> Int ->  IO Int
xmlResourceCompareVersion _obj major minor release revision 
  = withIntResult $
    withObjectRef "xmlResourceCompareVersion" _obj $ \cobj__obj -> 
    wxXmlResource_CompareVersion cobj__obj  (toCInt major)  (toCInt minor)  (toCInt release)  (toCInt revision)  
foreign import ccall "wxXmlResource_CompareVersion" wxXmlResource_CompareVersion :: Ptr (TXmlResource a) -> CInt -> CInt -> CInt -> CInt -> IO CInt

-- | usage: (@xmlResourceCreate flags@).
xmlResourceCreate :: Int ->  IO (XmlResource  ())
xmlResourceCreate flags 
  = withObjectResult $
    wxXmlResource_Create (toCInt flags)  
foreign import ccall "wxXmlResource_Create" wxXmlResource_Create :: CInt -> IO (Ptr (TXmlResource ()))

-- | usage: (@xmlResourceCreateFromFile filemask flags@).
xmlResourceCreateFromFile :: String -> Int ->  IO (XmlResource  ())
xmlResourceCreateFromFile filemask flags 
  = withObjectResult $
    withStringPtr filemask $ \cobj_filemask -> 
    wxXmlResource_CreateFromFile cobj_filemask  (toCInt flags)  
foreign import ccall "wxXmlResource_CreateFromFile" wxXmlResource_CreateFromFile :: Ptr (TWxString a) -> CInt -> IO (Ptr (TXmlResource ()))

-- | usage: (@xmlResourceDelete obj@).
xmlResourceDelete :: XmlResource  a ->  IO ()
xmlResourceDelete
  = objectDelete


-- | usage: (@xmlResourceGet@).
xmlResourceGet ::  IO (XmlResource  ())
xmlResourceGet 
  = withObjectResult $
    wxXmlResource_Get 
foreign import ccall "wxXmlResource_Get" wxXmlResource_Get :: IO (Ptr (TXmlResource ()))

-- | usage: (@xmlResourceGetBitmapButton obj strid@).
xmlResourceGetBitmapButton :: Window  a -> String ->  IO (BitmapButton  ())
xmlResourceGetBitmapButton _obj strid 
  = withObjectResult $
    withObjectPtr _obj $ \cobj__obj -> 
    withStringPtr strid $ \cobj_strid -> 
    wxXmlResource_GetBitmapButton cobj__obj  cobj_strid  
foreign import ccall "wxXmlResource_GetBitmapButton" wxXmlResource_GetBitmapButton :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TBitmapButton ()))

-- | usage: (@xmlResourceGetBoxSizer obj strid@).
xmlResourceGetBoxSizer :: Window  a -> String ->  IO (BoxSizer  ())
xmlResourceGetBoxSizer _obj strid 
  = withObjectResult $
    withObjectPtr _obj $ \cobj__obj -> 
    withStringPtr strid $ \cobj_strid -> 
    wxXmlResource_GetBoxSizer cobj__obj  cobj_strid  
foreign import ccall "wxXmlResource_GetBoxSizer" wxXmlResource_GetBoxSizer :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TBoxSizer ()))

-- | usage: (@xmlResourceGetButton obj strid@).
xmlResourceGetButton :: Window  a -> String ->  IO (Button  ())
xmlResourceGetButton _obj strid 
  = withObjectResult $
    withObjectPtr _obj $ \cobj__obj -> 
    withStringPtr strid $ \cobj_strid -> 
    wxXmlResource_GetButton cobj__obj  cobj_strid  
foreign import ccall "wxXmlResource_GetButton" wxXmlResource_GetButton :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TButton ()))

-- | usage: (@xmlResourceGetCalendarCtrl obj strid@).
xmlResourceGetCalendarCtrl :: Window  a -> String ->  IO (CalendarCtrl  ())
xmlResourceGetCalendarCtrl _obj strid 
  = withObjectResult $
    withObjectPtr _obj $ \cobj__obj -> 
    withStringPtr strid $ \cobj_strid -> 
    wxXmlResource_GetCalendarCtrl cobj__obj  cobj_strid  
foreign import ccall "wxXmlResource_GetCalendarCtrl" wxXmlResource_GetCalendarCtrl :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TCalendarCtrl ()))

-- | usage: (@xmlResourceGetCheckBox obj strid@).
xmlResourceGetCheckBox :: Window  a -> String ->  IO (CheckBox  ())
xmlResourceGetCheckBox _obj strid 
  = withObjectResult $
    withObjectPtr _obj $ \cobj__obj -> 
    withStringPtr strid $ \cobj_strid -> 
    wxXmlResource_GetCheckBox cobj__obj  cobj_strid  
foreign import ccall "wxXmlResource_GetCheckBox" wxXmlResource_GetCheckBox :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TCheckBox ()))

-- | usage: (@xmlResourceGetCheckListBox obj strid@).
xmlResourceGetCheckListBox :: Window  a -> String ->  IO (CheckListBox  ())
xmlResourceGetCheckListBox _obj strid 
  = withObjectResult $
    withObjectPtr _obj $ \cobj__obj -> 
    withStringPtr strid $ \cobj_strid -> 
    wxXmlResource_GetCheckListBox cobj__obj  cobj_strid  
foreign import ccall "wxXmlResource_GetCheckListBox" wxXmlResource_GetCheckListBox :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TCheckListBox ()))

-- | usage: (@xmlResourceGetChoice obj strid@).
xmlResourceGetChoice :: Window  a -> String ->  IO (Choice  ())
xmlResourceGetChoice _obj strid 
  = withObjectResult $
    withObjectPtr _obj $ \cobj__obj -> 
    withStringPtr strid $ \cobj_strid -> 
    wxXmlResource_GetChoice cobj__obj  cobj_strid  
foreign import ccall "wxXmlResource_GetChoice" wxXmlResource_GetChoice :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TChoice ()))

-- | usage: (@xmlResourceGetComboBox obj strid@).
xmlResourceGetComboBox :: Window  a -> String ->  IO (ComboBox  ())
xmlResourceGetComboBox _obj strid 
  = withObjectResult $
    withObjectPtr _obj $ \cobj__obj -> 
    withStringPtr strid $ \cobj_strid -> 
    wxXmlResource_GetComboBox cobj__obj  cobj_strid  
foreign import ccall "wxXmlResource_GetComboBox" wxXmlResource_GetComboBox :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TComboBox ()))

-- | usage: (@xmlResourceGetDomain obj@).
xmlResourceGetDomain :: XmlResource  a ->  IO (String)
xmlResourceGetDomain _obj 
  = withManagedStringResult $
    withObjectRef "xmlResourceGetDomain" _obj $ \cobj__obj -> 
    wxXmlResource_GetDomain cobj__obj  
foreign import ccall "wxXmlResource_GetDomain" wxXmlResource_GetDomain :: Ptr (TXmlResource a) -> IO (Ptr (TWxString ()))

-- | usage: (@xmlResourceGetFlags obj@).
xmlResourceGetFlags :: XmlResource  a ->  IO Int
xmlResourceGetFlags _obj 
  = withIntResult $
    withObjectRef "xmlResourceGetFlags" _obj $ \cobj__obj -> 
    wxXmlResource_GetFlags cobj__obj  
foreign import ccall "wxXmlResource_GetFlags" wxXmlResource_GetFlags :: Ptr (TXmlResource a) -> IO CInt

-- | usage: (@xmlResourceGetFlexGridSizer obj strid@).
xmlResourceGetFlexGridSizer :: Window  a -> String ->  IO (FlexGridSizer  ())
xmlResourceGetFlexGridSizer _obj strid 
  = withObjectResult $
    withObjectPtr _obj $ \cobj__obj -> 
    withStringPtr strid $ \cobj_strid -> 
    wxXmlResource_GetFlexGridSizer cobj__obj  cobj_strid  
foreign import ccall "wxXmlResource_GetFlexGridSizer" wxXmlResource_GetFlexGridSizer :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TFlexGridSizer ()))

-- | usage: (@xmlResourceGetGauge obj strid@).
xmlResourceGetGauge :: Window  a -> String ->  IO (Gauge  ())
xmlResourceGetGauge _obj strid 
  = withObjectResult $
    withObjectPtr _obj $ \cobj__obj -> 
    withStringPtr strid $ \cobj_strid -> 
    wxXmlResource_GetGauge cobj__obj  cobj_strid  
foreign import ccall "wxXmlResource_GetGauge" wxXmlResource_GetGauge :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TGauge ()))

-- | usage: (@xmlResourceGetGrid obj strid@).
xmlResourceGetGrid :: Window  a -> String ->  IO (Grid  ())
xmlResourceGetGrid _obj strid 
  = withObjectResult $
    withObjectPtr _obj $ \cobj__obj -> 
    withStringPtr strid $ \cobj_strid -> 
    wxXmlResource_GetGrid cobj__obj  cobj_strid  
foreign import ccall "wxXmlResource_GetGrid" wxXmlResource_GetGrid :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TGrid ()))

-- | usage: (@xmlResourceGetGridSizer obj strid@).
xmlResourceGetGridSizer :: Window  a -> String ->  IO (GridSizer  ())
xmlResourceGetGridSizer _obj strid 
  = withObjectResult $
    withObjectPtr _obj $ \cobj__obj -> 
    withStringPtr strid $ \cobj_strid -> 
    wxXmlResource_GetGridSizer cobj__obj  cobj_strid  
foreign import ccall "wxXmlResource_GetGridSizer" wxXmlResource_GetGridSizer :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TGridSizer ()))

-- | usage: (@xmlResourceGetHtmlWindow obj strid@).
xmlResourceGetHtmlWindow :: Window  a -> String ->  IO (HtmlWindow  ())
xmlResourceGetHtmlWindow _obj strid 
  = withObjectResult $
    withObjectPtr _obj $ \cobj__obj -> 
    withStringPtr strid $ \cobj_strid -> 
    wxXmlResource_GetHtmlWindow cobj__obj  cobj_strid  
foreign import ccall "wxXmlResource_GetHtmlWindow" wxXmlResource_GetHtmlWindow :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (THtmlWindow ()))

-- | usage: (@xmlResourceGetListBox obj strid@).
xmlResourceGetListBox :: Window  a -> String ->  IO (ListBox  ())
xmlResourceGetListBox _obj strid 
  = withObjectResult $
    withObjectPtr _obj $ \cobj__obj -> 
    withStringPtr strid $ \cobj_strid -> 
    wxXmlResource_GetListBox cobj__obj  cobj_strid  
foreign import ccall "wxXmlResource_GetListBox" wxXmlResource_GetListBox :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TListBox ()))

-- | usage: (@xmlResourceGetListCtrl obj strid@).
xmlResourceGetListCtrl :: Window  a -> String ->  IO (ListCtrl  ())
xmlResourceGetListCtrl _obj strid 
  = withObjectResult $
    withObjectPtr _obj $ \cobj__obj -> 
    withStringPtr strid $ \cobj_strid -> 
    wxXmlResource_GetListCtrl cobj__obj  cobj_strid  
foreign import ccall "wxXmlResource_GetListCtrl" wxXmlResource_GetListCtrl :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TListCtrl ()))

-- | usage: (@xmlResourceGetMDIChildFrame obj strid@).
xmlResourceGetMDIChildFrame :: Window  a -> String ->  IO (MDIChildFrame  ())
xmlResourceGetMDIChildFrame _obj strid 
  = withObjectResult $
    withObjectPtr _obj $ \cobj__obj -> 
    withStringPtr strid $ \cobj_strid -> 
    wxXmlResource_GetMDIChildFrame cobj__obj  cobj_strid  
foreign import ccall "wxXmlResource_GetMDIChildFrame" wxXmlResource_GetMDIChildFrame :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TMDIChildFrame ()))

-- | usage: (@xmlResourceGetMDIParentFrame obj strid@).
xmlResourceGetMDIParentFrame :: Window  a -> String ->  IO (MDIParentFrame  ())
xmlResourceGetMDIParentFrame _obj strid 
  = withObjectResult $
    withObjectPtr _obj $ \cobj__obj -> 
    withStringPtr strid $ \cobj_strid -> 
    wxXmlResource_GetMDIParentFrame cobj__obj  cobj_strid  
foreign import ccall "wxXmlResource_GetMDIParentFrame" wxXmlResource_GetMDIParentFrame :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TMDIParentFrame ()))

-- | usage: (@xmlResourceGetMenu obj strid@).
xmlResourceGetMenu :: Window  a -> String ->  IO (Menu  ())
xmlResourceGetMenu _obj strid 
  = withObjectResult $
    withObjectPtr _obj $ \cobj__obj -> 
    withStringPtr strid $ \cobj_strid -> 
    wxXmlResource_GetMenu cobj__obj  cobj_strid  
foreign import ccall "wxXmlResource_GetMenu" wxXmlResource_GetMenu :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TMenu ()))

-- | usage: (@xmlResourceGetMenuBar obj strid@).
xmlResourceGetMenuBar :: Window  a -> String ->  IO (MenuBar  ())
xmlResourceGetMenuBar _obj strid 
  = withObjectResult $
    withObjectPtr _obj $ \cobj__obj -> 
    withStringPtr strid $ \cobj_strid -> 
    wxXmlResource_GetMenuBar cobj__obj  cobj_strid  
foreign import ccall "wxXmlResource_GetMenuBar" wxXmlResource_GetMenuBar :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TMenuBar ()))

-- | usage: (@xmlResourceGetMenuItem obj strid@).
xmlResourceGetMenuItem :: Window  a -> String ->  IO (MenuItem  ())
xmlResourceGetMenuItem _obj strid 
  = withObjectResult $
    withObjectPtr _obj $ \cobj__obj -> 
    withStringPtr strid $ \cobj_strid -> 
    wxXmlResource_GetMenuItem cobj__obj  cobj_strid  
foreign import ccall "wxXmlResource_GetMenuItem" wxXmlResource_GetMenuItem :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TMenuItem ()))

-- | usage: (@xmlResourceGetNotebook obj strid@).
xmlResourceGetNotebook :: Window  a -> String ->  IO (Notebook  ())
xmlResourceGetNotebook _obj strid 
  = withObjectResult $
    withObjectPtr _obj $ \cobj__obj -> 
    withStringPtr strid $ \cobj_strid -> 
    wxXmlResource_GetNotebook cobj__obj  cobj_strid  
foreign import ccall "wxXmlResource_GetNotebook" wxXmlResource_GetNotebook :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TNotebook ()))

-- | usage: (@xmlResourceGetPanel obj strid@).
xmlResourceGetPanel :: Window  a -> String ->  IO (Panel  ())
xmlResourceGetPanel _obj strid 
  = withObjectResult $
    withObjectPtr _obj $ \cobj__obj -> 
    withStringPtr strid $ \cobj_strid -> 
    wxXmlResource_GetPanel cobj__obj  cobj_strid  
foreign import ccall "wxXmlResource_GetPanel" wxXmlResource_GetPanel :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TPanel ()))

-- | usage: (@xmlResourceGetRadioBox obj strid@).
xmlResourceGetRadioBox :: Window  a -> String ->  IO (RadioBox  ())
xmlResourceGetRadioBox _obj strid 
  = withObjectResult $
    withObjectPtr _obj $ \cobj__obj -> 
    withStringPtr strid $ \cobj_strid -> 
    wxXmlResource_GetRadioBox cobj__obj  cobj_strid  
foreign import ccall "wxXmlResource_GetRadioBox" wxXmlResource_GetRadioBox :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TRadioBox ()))

-- | usage: (@xmlResourceGetRadioButton obj strid@).
xmlResourceGetRadioButton :: Window  a -> String ->  IO (RadioButton  ())
xmlResourceGetRadioButton _obj strid 
  = withObjectResult $
    withObjectPtr _obj $ \cobj__obj -> 
    withStringPtr strid $ \cobj_strid -> 
    wxXmlResource_GetRadioButton cobj__obj  cobj_strid  
foreign import ccall "wxXmlResource_GetRadioButton" wxXmlResource_GetRadioButton :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TRadioButton ()))

-- | usage: (@xmlResourceGetScrollBar obj strid@).
xmlResourceGetScrollBar :: Window  a -> String ->  IO (ScrollBar  ())
xmlResourceGetScrollBar _obj strid 
  = withObjectResult $
    withObjectPtr _obj $ \cobj__obj -> 
    withStringPtr strid $ \cobj_strid -> 
    wxXmlResource_GetScrollBar cobj__obj  cobj_strid  
foreign import ccall "wxXmlResource_GetScrollBar" wxXmlResource_GetScrollBar :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TScrollBar ()))

-- | usage: (@xmlResourceGetScrolledWindow obj strid@).
xmlResourceGetScrolledWindow :: Window  a -> String ->  IO (ScrolledWindow  ())
xmlResourceGetScrolledWindow _obj strid 
  = withObjectResult $
    withObjectPtr _obj $ \cobj__obj -> 
    withStringPtr strid $ \cobj_strid -> 
    wxXmlResource_GetScrolledWindow cobj__obj  cobj_strid  
foreign import ccall "wxXmlResource_GetScrolledWindow" wxXmlResource_GetScrolledWindow :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TScrolledWindow ()))

-- | usage: (@xmlResourceGetSizer obj strid@).
xmlResourceGetSizer :: Window  a -> String ->  IO (Sizer  ())
xmlResourceGetSizer _obj strid 
  = withObjectResult $
    withObjectPtr _obj $ \cobj__obj -> 
    withStringPtr strid $ \cobj_strid -> 
    wxXmlResource_GetSizer cobj__obj  cobj_strid  
foreign import ccall "wxXmlResource_GetSizer" wxXmlResource_GetSizer :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TSizer ()))

-- | usage: (@xmlResourceGetSlider obj strid@).
xmlResourceGetSlider :: Window  a -> String ->  IO (Slider  ())
xmlResourceGetSlider _obj strid 
  = withObjectResult $
    withObjectPtr _obj $ \cobj__obj -> 
    withStringPtr strid $ \cobj_strid -> 
    wxXmlResource_GetSlider cobj__obj  cobj_strid  
foreign import ccall "wxXmlResource_GetSlider" wxXmlResource_GetSlider :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TSlider ()))

-- | usage: (@xmlResourceGetSpinButton obj strid@).
xmlResourceGetSpinButton :: Window  a -> String ->  IO (SpinButton  ())
xmlResourceGetSpinButton _obj strid 
  = withObjectResult $
    withObjectPtr _obj $ \cobj__obj -> 
    withStringPtr strid $ \cobj_strid -> 
    wxXmlResource_GetSpinButton cobj__obj  cobj_strid  
foreign import ccall "wxXmlResource_GetSpinButton" wxXmlResource_GetSpinButton :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TSpinButton ()))

-- | usage: (@xmlResourceGetSpinCtrl obj strid@).
xmlResourceGetSpinCtrl :: Window  a -> String ->  IO (SpinCtrl  ())
xmlResourceGetSpinCtrl _obj strid 
  = withObjectResult $
    withObjectPtr _obj $ \cobj__obj -> 
    withStringPtr strid $ \cobj_strid -> 
    wxXmlResource_GetSpinCtrl cobj__obj  cobj_strid  
foreign import ccall "wxXmlResource_GetSpinCtrl" wxXmlResource_GetSpinCtrl :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TSpinCtrl ()))

-- | usage: (@xmlResourceGetSplitterWindow obj strid@).
xmlResourceGetSplitterWindow :: Window  a -> String ->  IO (SplitterWindow  ())
xmlResourceGetSplitterWindow _obj strid 
  = withObjectResult $
    withObjectPtr _obj $ \cobj__obj -> 
    withStringPtr strid $ \cobj_strid -> 
    wxXmlResource_GetSplitterWindow cobj__obj  cobj_strid  
foreign import ccall "wxXmlResource_GetSplitterWindow" wxXmlResource_GetSplitterWindow :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TSplitterWindow ()))

-- | usage: (@xmlResourceGetStaticBitmap obj strid@).
xmlResourceGetStaticBitmap :: Window  a -> String ->  IO (StaticBitmap  ())
xmlResourceGetStaticBitmap _obj strid 
  = withObjectResult $
    withObjectPtr _obj $ \cobj__obj -> 
    withStringPtr strid $ \cobj_strid -> 
    wxXmlResource_GetStaticBitmap cobj__obj  cobj_strid  
foreign import ccall "wxXmlResource_GetStaticBitmap" wxXmlResource_GetStaticBitmap :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TStaticBitmap ()))

-- | usage: (@xmlResourceGetStaticBox obj strid@).
xmlResourceGetStaticBox :: Window  a -> String ->  IO (StaticBox  ())
xmlResourceGetStaticBox _obj strid 
  = withObjectResult $
    withObjectPtr _obj $ \cobj__obj -> 
    withStringPtr strid $ \cobj_strid -> 
    wxXmlResource_GetStaticBox cobj__obj  cobj_strid  
foreign import ccall "wxXmlResource_GetStaticBox" wxXmlResource_GetStaticBox :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TStaticBox ()))

-- | usage: (@xmlResourceGetStaticBoxSizer obj strid@).
xmlResourceGetStaticBoxSizer :: Window  a -> String ->  IO (StaticBoxSizer  ())
xmlResourceGetStaticBoxSizer _obj strid 
  = withObjectResult $
    withObjectPtr _obj $ \cobj__obj -> 
    withStringPtr strid $ \cobj_strid -> 
    wxXmlResource_GetStaticBoxSizer cobj__obj  cobj_strid  
foreign import ccall "wxXmlResource_GetStaticBoxSizer" wxXmlResource_GetStaticBoxSizer :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TStaticBoxSizer ()))

-- | usage: (@xmlResourceGetStaticLine obj strid@).
xmlResourceGetStaticLine :: Window  a -> String ->  IO (StaticLine  ())
xmlResourceGetStaticLine _obj strid 
  = withObjectResult $
    withObjectPtr _obj $ \cobj__obj -> 
    withStringPtr strid $ \cobj_strid -> 
    wxXmlResource_GetStaticLine cobj__obj  cobj_strid  
foreign import ccall "wxXmlResource_GetStaticLine" wxXmlResource_GetStaticLine :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TStaticLine ()))

-- | usage: (@xmlResourceGetStaticText obj strid@).
xmlResourceGetStaticText :: Window  a -> String ->  IO (StaticText  ())
xmlResourceGetStaticText _obj strid 
  = withObjectResult $
    withObjectPtr _obj $ \cobj__obj -> 
    withStringPtr strid $ \cobj_strid -> 
    wxXmlResource_GetStaticText cobj__obj  cobj_strid  
foreign import ccall "wxXmlResource_GetStaticText" wxXmlResource_GetStaticText :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TStaticText ()))

-- | usage: (@xmlResourceGetStyledTextCtrl obj strid@).
xmlResourceGetStyledTextCtrl :: Window  a -> String ->  IO (StyledTextCtrl  ())
xmlResourceGetStyledTextCtrl _obj strid 
  = withObjectResult $
    withObjectPtr _obj $ \cobj__obj -> 
    withStringPtr strid $ \cobj_strid -> 
    wxXmlResource_GetStyledTextCtrl cobj__obj  cobj_strid  
foreign import ccall "wxXmlResource_GetStyledTextCtrl" wxXmlResource_GetStyledTextCtrl :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TStyledTextCtrl ()))

-- | usage: (@xmlResourceGetTextCtrl obj strid@).
xmlResourceGetTextCtrl :: Window  a -> String ->  IO (TextCtrl  ())
xmlResourceGetTextCtrl _obj strid 
  = withObjectResult $
    withObjectPtr _obj $ \cobj__obj -> 
    withStringPtr strid $ \cobj_strid -> 
    wxXmlResource_GetTextCtrl cobj__obj  cobj_strid  
foreign import ccall "wxXmlResource_GetTextCtrl" wxXmlResource_GetTextCtrl :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TTextCtrl ()))

-- | usage: (@xmlResourceGetTreeCtrl obj strid@).
xmlResourceGetTreeCtrl :: Window  a -> String ->  IO (TreeCtrl  ())
xmlResourceGetTreeCtrl _obj strid 
  = withObjectResult $
    withObjectPtr _obj $ \cobj__obj -> 
    withStringPtr strid $ \cobj_strid -> 
    wxXmlResource_GetTreeCtrl cobj__obj  cobj_strid  
foreign import ccall "wxXmlResource_GetTreeCtrl" wxXmlResource_GetTreeCtrl :: Ptr (TWindow a) -> Ptr (TWxString b) -> IO (Ptr (TTreeCtrl ()))

-- | usage: (@xmlResourceGetVersion obj@).
xmlResourceGetVersion :: XmlResource  a ->  IO Int
xmlResourceGetVersion _obj 
  = withIntResult $
    withObjectRef "xmlResourceGetVersion" _obj $ \cobj__obj -> 
    wxXmlResource_GetVersion cobj__obj  
foreign import ccall "wxXmlResource_GetVersion" wxXmlResource_GetVersion :: Ptr (TXmlResource a) -> IO CInt

-- | usage: (@xmlResourceGetXRCID obj strid@).
xmlResourceGetXRCID :: XmlResource  a -> String ->  IO Int
xmlResourceGetXRCID _obj strid 
  = withIntResult $
    withObjectRef "xmlResourceGetXRCID" _obj $ \cobj__obj -> 
    withStringPtr strid $ \cobj_strid -> 
    wxXmlResource_GetXRCID cobj__obj  cobj_strid  
foreign import ccall "wxXmlResource_GetXRCID" wxXmlResource_GetXRCID :: Ptr (TXmlResource a) -> Ptr (TWxString b) -> IO CInt

-- | usage: (@xmlResourceInitAllHandlers obj@).
xmlResourceInitAllHandlers :: XmlResource  a ->  IO ()
xmlResourceInitAllHandlers _obj 
  = withObjectRef "xmlResourceInitAllHandlers" _obj $ \cobj__obj -> 
    wxXmlResource_InitAllHandlers cobj__obj  
foreign import ccall "wxXmlResource_InitAllHandlers" wxXmlResource_InitAllHandlers :: Ptr (TXmlResource a) -> IO ()

-- | usage: (@xmlResourceInsertHandler obj handler@).
xmlResourceInsertHandler :: XmlResource  a -> EvtHandler  b ->  IO ()
xmlResourceInsertHandler _obj handler 
  = withObjectRef "xmlResourceInsertHandler" _obj $ \cobj__obj -> 
    withObjectPtr handler $ \cobj_handler -> 
    wxXmlResource_InsertHandler cobj__obj  cobj_handler  
foreign import ccall "wxXmlResource_InsertHandler" wxXmlResource_InsertHandler :: Ptr (TXmlResource a) -> Ptr (TEvtHandler b) -> IO ()

-- | usage: (@xmlResourceLoad obj filemask@).
xmlResourceLoad :: XmlResource  a -> String ->  IO Bool
xmlResourceLoad _obj filemask 
  = withBoolResult $
    withObjectRef "xmlResourceLoad" _obj $ \cobj__obj -> 
    withStringPtr filemask $ \cobj_filemask -> 
    wxXmlResource_Load cobj__obj  cobj_filemask  
foreign import ccall "wxXmlResource_Load" wxXmlResource_Load :: Ptr (TXmlResource a) -> Ptr (TWxString b) -> IO CBool

-- | usage: (@xmlResourceLoadBitmap obj name@).
xmlResourceLoadBitmap :: XmlResource  a -> String ->  IO (Bitmap  ())
xmlResourceLoadBitmap _obj name 
  = withRefBitmap $ \pref -> 
    withObjectRef "xmlResourceLoadBitmap" _obj $ \cobj__obj -> 
    withStringPtr name $ \cobj_name -> 
    wxXmlResource_LoadBitmap cobj__obj  cobj_name   pref
foreign import ccall "wxXmlResource_LoadBitmap" wxXmlResource_LoadBitmap :: Ptr (TXmlResource a) -> Ptr (TWxString b) -> Ptr (TBitmap ()) -> IO ()

-- | usage: (@xmlResourceLoadDialog obj parent name@).
xmlResourceLoadDialog :: XmlResource  a -> Window  b -> String ->  IO (Dialog  ())
xmlResourceLoadDialog _obj parent name 
  = withObjectResult $
    withObjectRef "xmlResourceLoadDialog" _obj $ \cobj__obj -> 
    withObjectPtr parent $ \cobj_parent -> 
    withStringPtr name $ \cobj_name -> 
    wxXmlResource_LoadDialog cobj__obj  cobj_parent  cobj_name  
foreign import ccall "wxXmlResource_LoadDialog" wxXmlResource_LoadDialog :: Ptr (TXmlResource a) -> Ptr (TWindow b) -> Ptr (TWxString c) -> IO (Ptr (TDialog ()))

-- | usage: (@xmlResourceLoadFrame obj parent name@).
xmlResourceLoadFrame :: XmlResource  a -> Window  b -> String ->  IO (Frame  ())
xmlResourceLoadFrame _obj parent name 
  = withObjectResult $
    withObjectRef "xmlResourceLoadFrame" _obj $ \cobj__obj -> 
    withObjectPtr parent $ \cobj_parent -> 
    withStringPtr name $ \cobj_name -> 
    wxXmlResource_LoadFrame cobj__obj  cobj_parent  cobj_name  
foreign import ccall "wxXmlResource_LoadFrame" wxXmlResource_LoadFrame :: Ptr (TXmlResource a) -> Ptr (TWindow b) -> Ptr (TWxString c) -> IO (Ptr (TFrame ()))

-- | usage: (@xmlResourceLoadIcon obj name@).
xmlResourceLoadIcon :: XmlResource  a -> String ->  IO (Icon  ())
xmlResourceLoadIcon _obj name 
  = withRefIcon $ \pref -> 
    withObjectRef "xmlResourceLoadIcon" _obj $ \cobj__obj -> 
    withStringPtr name $ \cobj_name -> 
    wxXmlResource_LoadIcon cobj__obj  cobj_name   pref
foreign import ccall "wxXmlResource_LoadIcon" wxXmlResource_LoadIcon :: Ptr (TXmlResource a) -> Ptr (TWxString b) -> Ptr (TIcon ()) -> IO ()

-- | usage: (@xmlResourceLoadMenu obj name@).
xmlResourceLoadMenu :: XmlResource  a -> String ->  IO (Menu  ())
xmlResourceLoadMenu _obj name 
  = withObjectResult $
    withObjectRef "xmlResourceLoadMenu" _obj $ \cobj__obj -> 
    withStringPtr name $ \cobj_name -> 
    wxXmlResource_LoadMenu cobj__obj  cobj_name  
foreign import ccall "wxXmlResource_LoadMenu" wxXmlResource_LoadMenu :: Ptr (TXmlResource a) -> Ptr (TWxString b) -> IO (Ptr (TMenu ()))

-- | usage: (@xmlResourceLoadMenuBar obj parent name@).
xmlResourceLoadMenuBar :: XmlResource  a -> Window  b -> String ->  IO (MenuBar  ())
xmlResourceLoadMenuBar _obj parent name 
  = withObjectResult $
    withObjectRef "xmlResourceLoadMenuBar" _obj $ \cobj__obj -> 
    withObjectPtr parent $ \cobj_parent -> 
    withStringPtr name $ \cobj_name -> 
    wxXmlResource_LoadMenuBar cobj__obj  cobj_parent  cobj_name  
foreign import ccall "wxXmlResource_LoadMenuBar" wxXmlResource_LoadMenuBar :: Ptr (TXmlResource a) -> Ptr (TWindow b) -> Ptr (TWxString c) -> IO (Ptr (TMenuBar ()))

-- | usage: (@xmlResourceLoadPanel obj parent name@).
xmlResourceLoadPanel :: XmlResource  a -> Window  b -> String ->  IO (Panel  ())
xmlResourceLoadPanel _obj parent name 
  = withObjectResult $
    withObjectRef "xmlResourceLoadPanel" _obj $ \cobj__obj -> 
    withObjectPtr parent $ \cobj_parent -> 
    withStringPtr name $ \cobj_name -> 
    wxXmlResource_LoadPanel cobj__obj  cobj_parent  cobj_name  
foreign import ccall "wxXmlResource_LoadPanel" wxXmlResource_LoadPanel :: Ptr (TXmlResource a) -> Ptr (TWindow b) -> Ptr (TWxString c) -> IO (Ptr (TPanel ()))

-- | usage: (@xmlResourceLoadToolBar obj parent name@).
xmlResourceLoadToolBar :: XmlResource  a -> Window  b -> String ->  IO (ToolBar  ())
xmlResourceLoadToolBar _obj parent name 
  = withObjectResult $
    withObjectRef "xmlResourceLoadToolBar" _obj $ \cobj__obj -> 
    withObjectPtr parent $ \cobj_parent -> 
    withStringPtr name $ \cobj_name -> 
    wxXmlResource_LoadToolBar cobj__obj  cobj_parent  cobj_name  
foreign import ccall "wxXmlResource_LoadToolBar" wxXmlResource_LoadToolBar :: Ptr (TXmlResource a) -> Ptr (TWindow b) -> Ptr (TWxString c) -> IO (Ptr (TToolBar ()))

-- | usage: (@xmlResourceSet obj res@).
xmlResourceSet :: XmlResource  a -> XmlResource  b ->  IO (XmlResource  ())
xmlResourceSet _obj res 
  = withObjectResult $
    withObjectRef "xmlResourceSet" _obj $ \cobj__obj -> 
    withObjectPtr res $ \cobj_res -> 
    wxXmlResource_Set cobj__obj  cobj_res  
foreign import ccall "wxXmlResource_Set" wxXmlResource_Set :: Ptr (TXmlResource a) -> Ptr (TXmlResource b) -> IO (Ptr (TXmlResource ()))

-- | usage: (@xmlResourceSetDomain obj domain@).
xmlResourceSetDomain :: XmlResource  a -> String ->  IO ()
xmlResourceSetDomain _obj domain 
  = withObjectRef "xmlResourceSetDomain" _obj $ \cobj__obj -> 
    withStringPtr domain $ \cobj_domain -> 
    wxXmlResource_SetDomain cobj__obj  cobj_domain  
foreign import ccall "wxXmlResource_SetDomain" wxXmlResource_SetDomain :: Ptr (TXmlResource a) -> Ptr (TWxString b) -> IO ()

-- | usage: (@xmlResourceSetFlags obj flags@).
xmlResourceSetFlags :: XmlResource  a -> Int ->  IO ()
xmlResourceSetFlags _obj flags 
  = withObjectRef "xmlResourceSetFlags" _obj $ \cobj__obj -> 
    wxXmlResource_SetFlags cobj__obj  (toCInt flags)  
foreign import ccall "wxXmlResource_SetFlags" wxXmlResource_SetFlags :: Ptr (TXmlResource a) -> CInt -> IO ()

-- | usage: (@xmlResourceUnload obj filemask@).
xmlResourceUnload :: XmlResource  a -> String ->  IO Bool
xmlResourceUnload _obj filemask 
  = withBoolResult $
    withObjectRef "xmlResourceUnload" _obj $ \cobj__obj -> 
    withStringPtr filemask $ \cobj_filemask -> 
    wxXmlResource_Unload cobj__obj  cobj_filemask  
foreign import ccall "wxXmlResource_Unload" wxXmlResource_Unload :: Ptr (TXmlResource a) -> Ptr (TWxString b) -> IO CBool

